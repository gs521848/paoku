/*
 * Generated code file by Il2CppInspector - http://www.djkaty.com - https://github.com/djkaty
 */

using System;
using System.Collections;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Configuration;
using System.Configuration.Assemblies;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Globalization;
using System.IO;
using System.Net;
using System.Net.NetworkInformation;
using System.Net.Sockets;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.ConstrainedExecution;
using System.Runtime.ExceptionServices;
using System.Runtime.InteropServices;
using System.Runtime.Remoting;
using System.Runtime.Remoting.Activation;
using System.Runtime.Remoting.Contexts;
using System.Runtime.Remoting.Lifetime;
using System.Runtime.Remoting.Messaging;
using System.Runtime.Remoting.Metadata;
using System.Runtime.Remoting.Proxies;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters;
using System.Runtime.Serialization.Formatters.Binary;
using System.Security;
using System.Security.Cryptography;
using System.Security.Policy;
using System.Security.Principal;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Xml;
using AnimationOrTween;
using Cinemachine;
using Cinemachine.Utility;
using Microsoft.Win32;
using Microsoft.Win32.SafeHandles;
using Mono;
using Mono.Globalization.Unicode;
using Mono.Xml;
using Unity.Collections;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Jobs;
using UnityEngine;
using UnityEngine.Animations;
using UnityEngine.Audio;
using UnityEngine.Bindings;
using UnityEngine.Events;
using UnityEngine.EventSystems;
using UnityEngine.Experimental.Rendering;
using UnityEngine.Internal;
using UnityEngine.Networking;
using UnityEngine.Networking.Match;
using UnityEngine.Networking.NetworkSystem;
using UnityEngine.Networking.Types;
using UnityEngine.Playables;
using UnityEngine.Profiling;
using UnityEngine.Rendering;
using UnityEngine.SceneManagement;
using UnityEngine.Scripting;
using UnityEngine.Scripting.APIUpdating;
using UnityEngine.Serialization;
using UnityEngine.Timeline;
using UnityEngine.U2D;
using UnityEngine.UI;
using UnityEngine.UI.Collections;
using UnityEngine.UI.CoroutineTween;
using UnityEngineInternal;

// Image 0: mscorlib.dll - Assembly: mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089 - Types 0-1441
[assembly: AssemblyCompany] // 0x004BD70C-0x004BDA68
[assembly: AssemblyCopyright] // 0x004BD70C-0x004BDA68
[assembly: AssemblyDefaultAlias] // 0x004BD70C-0x004BDA68
[assembly: AssemblyDelaySign] // 0x004BD70C-0x004BDA68
[assembly: AssemblyDescription] // 0x004BD70C-0x004BDA68
[assembly: AssemblyFileVersion] // 0x004BD70C-0x004BDA68
[assembly: AssemblyInformationalVersion] // 0x004BD70C-0x004BDA68
[assembly: AssemblyKeyFile] // 0x004BD70C-0x004BDA68
[assembly: AssemblyProduct] // 0x004BD70C-0x004BDA68
[assembly: AssemblyTitle] // 0x004BD70C-0x004BDA68
[assembly: CLSCompliant] // 0x004BD70C-0x004BDA68
[assembly: ComCompatibleVersion] // 0x004BD70C-0x004BDA68
[assembly: CompilationRelaxations] // 0x004BD70C-0x004BDA68
[assembly: ComVisible] // 0x004BD70C-0x004BDA68
[assembly: Debuggable] // 0x004BD70C-0x004BDA68
[assembly: DefaultDependency] // 0x004BD70C-0x004BDA68
[assembly: Guid] // 0x004BD70C-0x004BDA68
[assembly: InternalsVisibleTo] // 0x004BD70C-0x004BDA68
[assembly: InternalsVisibleTo] // 0x004BD70C-0x004BDA68
[assembly: InternalsVisibleTo] // 0x004BD70C-0x004BDA68
[assembly: InternalsVisibleTo] // 0x004BD70C-0x004BDA68
[assembly: InternalsVisibleTo] // 0x004BD70C-0x004BDA68
[assembly: NeutralResourcesLanguage] // 0x004BD70C-0x004BDA68
[assembly: RuntimeCompatibility] // 0x004BD70C-0x004BDA68
[assembly: SatelliteContractVersion] // 0x004BD70C-0x004BDA68
[assembly: StringFreezing] // 0x004BD70C-0x004BDA68

// Image 1: System.dll - Assembly: System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e - Types 1442-1607
[assembly: AssemblyCompany] // 0x004BE1DC-0x004BE4A4
[assembly: AssemblyCopyright] // 0x004BE1DC-0x004BE4A4
[assembly: AssemblyDefaultAlias] // 0x004BE1DC-0x004BE4A4
[assembly: AssemblyDelaySign] // 0x004BE1DC-0x004BE4A4
[assembly: AssemblyDescription] // 0x004BE1DC-0x004BE4A4
[assembly: AssemblyFileVersion] // 0x004BE1DC-0x004BE4A4
[assembly: AssemblyInformationalVersion] // 0x004BE1DC-0x004BE4A4
[assembly: AssemblyKeyFile] // 0x004BE1DC-0x004BE4A4
[assembly: AssemblyProduct] // 0x004BE1DC-0x004BE4A4
[assembly: AssemblyTitle] // 0x004BE1DC-0x004BE4A4
[assembly: CLSCompliant] // 0x004BE1DC-0x004BE4A4
[assembly: CompilationRelaxations] // 0x004BE1DC-0x004BE4A4
[assembly: ComVisible] // 0x004BE1DC-0x004BE4A4
[assembly: Debuggable] // 0x004BE1DC-0x004BE4A4
[assembly: InternalsVisibleTo] // 0x004BE1DC-0x004BE4A4
[assembly: InternalsVisibleTo] // 0x004BE1DC-0x004BE4A4
[assembly: InternalsVisibleTo] // 0x004BE1DC-0x004BE4A4
[assembly: InternalsVisibleTo] // 0x004BE1DC-0x004BE4A4
[assembly: NeutralResourcesLanguage] // 0x004BE1DC-0x004BE4A4
[assembly: RuntimeCompatibility] // 0x004BE1DC-0x004BE4A4
[assembly: SatelliteContractVersion] // 0x004BE1DC-0x004BE4A4

// Image 2: Mono.Security.dll - Assembly: Mono.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756 - Types 1608-1612
[assembly: AssemblyCompany] // 0x004BE4DC-0x004BE678
[assembly: AssemblyCopyright] // 0x004BE4DC-0x004BE678
[assembly: AssemblyDelaySign] // 0x004BE4DC-0x004BE678
[assembly: AssemblyDescription] // 0x004BE4DC-0x004BE678
[assembly: AssemblyProduct] // 0x004BE4DC-0x004BE678
[assembly: AssemblyTitle] // 0x004BE4DC-0x004BE678
[assembly: CLSCompliant] // 0x004BE4DC-0x004BE678
[assembly: CompilationRelaxations] // 0x004BE4DC-0x004BE678
[assembly: ComVisible] // 0x004BE4DC-0x004BE678
[assembly: Debuggable] // 0x004BE4DC-0x004BE678
[assembly: InternalsVisibleTo] // 0x004BE4DC-0x004BE678
[assembly: NeutralResourcesLanguage] // 0x004BE4DC-0x004BE678
[assembly: RuntimeCompatibility] // 0x004BE4DC-0x004BE678

// Image 3: System.Xml.dll - Assembly: System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e - Types 1613-1615
[assembly: AssemblyCompany] // 0x004BE764-0x004BEA54
[assembly: AssemblyCopyright] // 0x004BE764-0x004BEA54
[assembly: AssemblyDefaultAlias] // 0x004BE764-0x004BEA54
[assembly: AssemblyDelaySign] // 0x004BE764-0x004BEA54
[assembly: AssemblyDescription] // 0x004BE764-0x004BEA54
[assembly: AssemblyFileVersion] // 0x004BE764-0x004BEA54
[assembly: AssemblyInformationalVersion] // 0x004BE764-0x004BEA54
[assembly: AssemblyKeyFile] // 0x004BE764-0x004BEA54
[assembly: AssemblyProduct] // 0x004BE764-0x004BEA54
[assembly: AssemblyTitle] // 0x004BE764-0x004BEA54
[assembly: CLSCompliant] // 0x004BE764-0x004BEA54
[assembly: CompilationRelaxations] // 0x004BE764-0x004BEA54
[assembly: ComVisible] // 0x004BE764-0x004BEA54
[assembly: Debuggable] // 0x004BE764-0x004BEA54
[assembly: InternalsVisibleTo] // 0x004BE764-0x004BEA54
[assembly: InternalsVisibleTo] // 0x004BE764-0x004BEA54
[assembly: InternalsVisibleTo] // 0x004BE764-0x004BEA54
[assembly: InternalsVisibleTo] // 0x004BE764-0x004BEA54
[assembly: InternalsVisibleTo] // 0x004BE764-0x004BEA54
[assembly: NeutralResourcesLanguage] // 0x004BE764-0x004BEA54
[assembly: RuntimeCompatibility] // 0x004BE764-0x004BEA54
[assembly: SatelliteContractVersion] // 0x004BE764-0x004BEA54

// Image 4: System.Configuration.dll - Assembly: System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a - Types 1616-1625
[assembly: AssemblyCompany] // 0x004BEB10-0x004BED34
[assembly: AssemblyCopyright] // 0x004BEB10-0x004BED34
[assembly: AssemblyDefaultAlias] // 0x004BEB10-0x004BED34
[assembly: AssemblyDescription] // 0x004BEB10-0x004BED34
[assembly: AssemblyFileVersion] // 0x004BEB10-0x004BED34
[assembly: AssemblyInformationalVersion] // 0x004BEB10-0x004BED34
[assembly: AssemblyProduct] // 0x004BEB10-0x004BED34
[assembly: AssemblyTitle] // 0x004BEB10-0x004BED34
[assembly: CLSCompliant] // 0x004BEB10-0x004BED34
[assembly: ComCompatibleVersion] // 0x004BEB10-0x004BED34
[assembly: CompilationRelaxations] // 0x004BEB10-0x004BED34
[assembly: ComVisible] // 0x004BEB10-0x004BED34
[assembly: Debuggable] // 0x004BEB10-0x004BED34
[assembly: DefaultDllImportSearchPaths] // 0x004BEB10-0x004BED34
[assembly: NeutralResourcesLanguage] // 0x004BEB10-0x004BED34
[assembly: RuntimeCompatibility] // 0x004BEB10-0x004BED34
[assembly: SatelliteContractVersion] // 0x004BEB10-0x004BED34

// Image 5: System.Core.dll - Assembly: System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e - Types 1626-1637
[assembly: AssemblyCompany] // 0x004BEE4C-0x004BF084
[assembly: AssemblyCopyright] // 0x004BEE4C-0x004BF084
[assembly: AssemblyDefaultAlias] // 0x004BEE4C-0x004BF084
[assembly: AssemblyDelaySign] // 0x004BEE4C-0x004BF084
[assembly: AssemblyDescription] // 0x004BEE4C-0x004BF084
[assembly: AssemblyFileVersion] // 0x004BEE4C-0x004BF084
[assembly: AssemblyInformationalVersion] // 0x004BEE4C-0x004BF084
[assembly: AssemblyKeyFile] // 0x004BEE4C-0x004BF084
[assembly: AssemblyProduct] // 0x004BEE4C-0x004BF084
[assembly: AssemblyTitle] // 0x004BEE4C-0x004BF084
[assembly: CLSCompliant] // 0x004BEE4C-0x004BF084
[assembly: CompilationRelaxations] // 0x004BEE4C-0x004BF084
[assembly: ComVisible] // 0x004BEE4C-0x004BF084
[assembly: Debuggable] // 0x004BEE4C-0x004BF084
[assembly: NeutralResourcesLanguage] // 0x004BEE4C-0x004BF084
[assembly: RuntimeCompatibility] // 0x004BEE4C-0x004BF084
[assembly: SatelliteContractVersion] // 0x004BEE4C-0x004BF084

// Image 6: UnityEngine.SharedInternalsModule.dll - Assembly: UnityEngine.SharedInternalsModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 1638-1666
[assembly: Debuggable] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: InternalsVisibleTo] // 0x004BFE58-0x004C1004
[assembly: RuntimeCompatibility] // 0x004BFE58-0x004C1004
[assembly: UnityEngineModuleAssembly] // 0x004BFE58-0x004C1004

// Image 7: UnityEngine.CoreModule.dll - Assembly: UnityEngine.CoreModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 1667-2152
[assembly: Debuggable] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: InternalsVisibleTo] // 0x004CE304-0x004CF5F8
[assembly: RuntimeCompatibility] // 0x004CE304-0x004CF5F8
[assembly: UnityEngineModuleAssembly] // 0x004CE304-0x004CF5F8

// Image 10: UnityEngine.PhysicsModule.dll - Assembly: UnityEngine.PhysicsModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2155-2170
[assembly: Debuggable] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: InternalsVisibleTo] // 0x004D0DC0-0x004D1F7C
[assembly: RuntimeCompatibility] // 0x004D0DC0-0x004D1F7C
[assembly: UnityEngineModuleAssembly] // 0x004D0DC0-0x004D1F7C

// Image 11: UnityEngine.TextRenderingModule.dll - Assembly: UnityEngine.TextRenderingModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2171-2184
[assembly: Debuggable] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: InternalsVisibleTo] // 0x004D2430-0x004D35DC
[assembly: RuntimeCompatibility] // 0x004D2430-0x004D35DC
[assembly: UnityEngineModuleAssembly] // 0x004D2430-0x004D35DC

// Image 12: UnityEngine.AnimationModule.dll - Assembly: UnityEngine.AnimationModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2185-2228
[assembly: Debuggable] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: InternalsVisibleTo] // 0x004D58A0-0x004D6A5C
[assembly: RuntimeCompatibility] // 0x004D58A0-0x004D6A5C
[assembly: UnityEngineModuleAssembly] // 0x004D58A0-0x004D6A5C

// Image 13: UnityEngine.AssetBundleModule.dll - Assembly: UnityEngine.AssetBundleModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2229-2232
[assembly: Debuggable] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: InternalsVisibleTo] // 0x004D6B40-0x004D7D34
[assembly: RuntimeCompatibility] // 0x004D6B40-0x004D7D34
[assembly: UnityEngineModuleAssembly] // 0x004D6B40-0x004D7D34

// Image 14: UnityEngine.AudioModule.dll - Assembly: UnityEngine.AudioModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2233-2250
[assembly: Debuggable] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: InternalsVisibleTo] // 0x004D88B8-0x004D9B30
[assembly: RuntimeCompatibility] // 0x004D88B8-0x004D9B30
[assembly: UnityEngineModuleAssembly] // 0x004D88B8-0x004D9B30

// Image 15: UnityEngine.DirectorModule.dll - Assembly: UnityEngine.DirectorModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2251-2252
[assembly: Debuggable] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: InternalsVisibleTo] // 0x004D9CBC-0x004DAE68
[assembly: RuntimeCompatibility] // 0x004D9CBC-0x004DAE68
[assembly: UnityEngineModuleAssembly] // 0x004D9CBC-0x004DAE68

// Image 16: UnityEngine.GridModule.dll - Assembly: UnityEngine.GridModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2253-2254
[assembly: Debuggable] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: InternalsVisibleTo] // 0x004DAF24-0x004DC0D0
[assembly: RuntimeCompatibility] // 0x004DAF24-0x004DC0D0
[assembly: UnityEngineModuleAssembly] // 0x004DAF24-0x004DC0D0

// Image 17: UnityEngine.IMGUIModule.dll - Assembly: UnityEngine.IMGUIModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2255-2289
[assembly: Debuggable] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: InternalsVisibleTo] // 0x004DE838-0x004DFA10
[assembly: RuntimeCompatibility] // 0x004DE838-0x004DFA10
[assembly: UnityEngineModuleAssembly] // 0x004DE838-0x004DFA10

// Image 18: UnityEngine.ImageConversionModule.dll - Assembly: UnityEngine.ImageConversionModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2290-2291
[assembly: Debuggable] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: InternalsVisibleTo] // 0x004DFB28-0x004E0CE4
[assembly: RuntimeCompatibility] // 0x004DFB28-0x004E0CE4
[assembly: UnityEngineModuleAssembly] // 0x004DFB28-0x004E0CE4

// Image 19: UnityEngine.InputLegacyModule.dll - Assembly: UnityEngine.InputLegacyModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2292-2300
[assembly: Debuggable] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: InternalsVisibleTo] // 0x004E0F9C-0x004E2148
[assembly: RuntimeCompatibility] // 0x004E0F9C-0x004E2148
[assembly: UnityEngineModuleAssembly] // 0x004E0F9C-0x004E2148

// Image 20: UnityEngine.JSONSerializeModule.dll - Assembly: UnityEngine.JSONSerializeModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2301-2302
[assembly: Debuggable] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: InternalsVisibleTo] // 0x004E223C-0x004E33E8
[assembly: RuntimeCompatibility] // 0x004E223C-0x004E33E8
[assembly: UnityEngineModuleAssembly] // 0x004E223C-0x004E33E8

// Image 21: UnityEngine.ParticleSystemModule.dll - Assembly: UnityEngine.ParticleSystemModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2303-2314
[assembly: Debuggable] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: InternalsVisibleTo] // 0x004E3F8C-0x004E5148
[assembly: RuntimeCompatibility] // 0x004E3F8C-0x004E5148
[assembly: UnityEngineModuleAssembly] // 0x004E3F8C-0x004E5148

// Image 22: UnityEngine.Physics2DModule.dll - Assembly: UnityEngine.Physics2DModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2315-2326
[assembly: Debuggable] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: InternalsVisibleTo] // 0x004E6470-0x004E762C
[assembly: RuntimeCompatibility] // 0x004E6470-0x004E762C
[assembly: UnityEngineModuleAssembly] // 0x004E6470-0x004E762C

// Image 23: UnityEngine.UIModule.dll - Assembly: UnityEngine.UIModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2327-2336
[assembly: Debuggable] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: InternalsVisibleTo] // 0x004E7C1C-0x004E8DC8
[assembly: RuntimeCompatibility] // 0x004E7C1C-0x004E8DC8
[assembly: UnityEngineModuleAssembly] // 0x004E7C1C-0x004E8DC8

// Image 24: UnityEngine.UnityWebRequestModule.dll - Assembly: UnityEngine.UnityWebRequestModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2337-2349
[assembly: Debuggable] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: InternalsVisibleTo] // 0x004E9470-0x004EA6BC
[assembly: RuntimeCompatibility] // 0x004E9470-0x004EA6BC
[assembly: UnityEngineModuleAssembly] // 0x004E9470-0x004EA6BC

// Image 25: UnityEngine.XRModule.dll - Assembly: UnityEngine.XRModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2350-2422
[assembly: Debuggable] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: InternalsVisibleTo] // 0x004ED1B8-0x004EE364
[assembly: RuntimeCompatibility] // 0x004ED1B8-0x004EE364
[assembly: UnityEngineModuleAssembly] // 0x004ED1B8-0x004EE364

// Image 27: Unity.Timeline.dll - Assembly: Unity.Timeline, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2424-2536
[assembly: AssemblyCompany] // 0x004F0734-0x004F0A20
[assembly: AssemblyConfiguration] // 0x004F0734-0x004F0A20
[assembly: AssemblyCopyright] // 0x004F0734-0x004F0A20
[assembly: AssemblyDescription] // 0x004F0734-0x004F0A20
[assembly: AssemblyFileVersion] // 0x004F0734-0x004F0A20
[assembly: AssemblyProduct] // 0x004F0734-0x004F0A20
[assembly: AssemblyTitle] // 0x004F0734-0x004F0A20
[assembly: AssemblyTrademark] // 0x004F0734-0x004F0A20
[assembly: CompilationRelaxations] // 0x004F0734-0x004F0A20
[assembly: ComVisible] // 0x004F0734-0x004F0A20
[assembly: Debuggable] // 0x004F0734-0x004F0A20
[assembly: Guid] // 0x004F0734-0x004F0A20
[assembly: InternalsVisibleTo] // 0x004F0734-0x004F0A20
[assembly: InternalsVisibleTo] // 0x004F0734-0x004F0A20
[assembly: InternalsVisibleTo] // 0x004F0734-0x004F0A20
[assembly: InternalsVisibleTo] // 0x004F0734-0x004F0A20
[assembly: InternalsVisibleTo] // 0x004F0734-0x004F0A20
[assembly: InternalsVisibleTo] // 0x004F0734-0x004F0A20
[assembly: InternalsVisibleTo] // 0x004F0734-0x004F0A20
[assembly: InternalsVisibleTo] // 0x004F0734-0x004F0A20
[assembly: RuntimeCompatibility] // 0x004F0734-0x004F0A20

// Image 28: UnityEngine.AIModule.dll - Assembly: UnityEngine.AIModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2537-2539
[assembly: Debuggable] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: InternalsVisibleTo] // 0x004F0ADC-0x004F1C88
[assembly: RuntimeCompatibility] // 0x004F0ADC-0x004F1C88
[assembly: UnityEngineModuleAssembly] // 0x004F0ADC-0x004F1C88

// Image 29: UnityEngine.AndroidJNIModule.dll - Assembly: UnityEngine.AndroidJNIModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2540-2553
[assembly: Debuggable] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: InternalsVisibleTo] // 0x004F2C44-0x004F3DF0
[assembly: RuntimeCompatibility] // 0x004F2C44-0x004F3DF0
[assembly: UnityEngineModuleAssembly] // 0x004F2C44-0x004F3DF0

// Image 30: UnityEngine.InputModule.dll - Assembly: UnityEngine.InputModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2554-2558
[assembly: Debuggable] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: InternalsVisibleTo] // 0x004F3EC4-0x004F5094
[assembly: RuntimeCompatibility] // 0x004F3EC4-0x004F5094
[assembly: UnityEngineModuleAssembly] // 0x004F3EC4-0x004F5094

// Image 31: UnityEngine.TerrainModule.dll - Assembly: UnityEngine.TerrainModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2559-2574
[assembly: Debuggable] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: InternalsVisibleTo] // 0x004F53EC-0x004F65A8
[assembly: RuntimeCompatibility] // 0x004F53EC-0x004F65A8
[assembly: UnityEngineModuleAssembly] // 0x004F53EC-0x004F65A8

// Image 32: UnityEngine.TilemapModule.dll - Assembly: UnityEngine.TilemapModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2575-2583
[assembly: Debuggable] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: InternalsVisibleTo] // 0x004F68AC-0x004F7A58
[assembly: RuntimeCompatibility] // 0x004F68AC-0x004F7A58
[assembly: UnityEngineModuleAssembly] // 0x004F68AC-0x004F7A58

// Image 33: UnityEngine.UI.dll - Assembly: UnityEngine.UI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2584-2765
[assembly: AssemblyCompany] // 0x004FB4A4-0x004FB680
[assembly: AssemblyConfiguration] // 0x004FB4A4-0x004FB680
[assembly: AssemblyCopyright] // 0x004FB4A4-0x004FB680
[assembly: AssemblyDescription] // 0x004FB4A4-0x004FB680
[assembly: AssemblyFileVersion] // 0x004FB4A4-0x004FB680
[assembly: AssemblyProduct] // 0x004FB4A4-0x004FB680
[assembly: AssemblyTitle] // 0x004FB4A4-0x004FB680
[assembly: AssemblyTrademark] // 0x004FB4A4-0x004FB680
[assembly: CompilationRelaxations] // 0x004FB4A4-0x004FB680
[assembly: ComVisible] // 0x004FB4A4-0x004FB680
[assembly: Debuggable] // 0x004FB4A4-0x004FB680
[assembly: Guid] // 0x004FB4A4-0x004FB680
[assembly: InternalsVisibleTo] // 0x004FB4A4-0x004FB680
[assembly: RuntimeCompatibility] // 0x004FB4A4-0x004FB680

// Image 34: UnityEngine.UIElementsModule.dll - Assembly: UnityEngine.UIElementsModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2766-2774
[assembly: Debuggable] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: InternalsVisibleTo] // 0x004FB870-0x004FCA2C
[assembly: RuntimeCompatibility] // 0x004FB870-0x004FCA2C
[assembly: UnityEngineModuleAssembly] // 0x004FB870-0x004FCA2C

// Image 35: UnityEngine.UNETModule.dll - Assembly: UnityEngine.UNETModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2775-2822
[assembly: Debuggable] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: InternalsVisibleTo] // 0x004FF6A0-0x0050084C
[assembly: RuntimeCompatibility] // 0x004FF6A0-0x0050084C
[assembly: UnityEngineModuleAssembly] // 0x004FF6A0-0x0050084C

// Image 36: UnityEngine.UnityAnalyticsModule.dll - Assembly: UnityEngine.UnityAnalyticsModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2823-2832
[assembly: Debuggable] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: InternalsVisibleTo] // 0x00500BA8-0x00501D54
[assembly: RuntimeCompatibility] // 0x00500BA8-0x00501D54
[assembly: UnityEngineModuleAssembly] // 0x00500BA8-0x00501D54

// Image 37: UnityEngine.UnityWebRequestWWWModule.dll - Assembly: UnityEngine.UnityWebRequestWWWModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2833-2834
[assembly: Debuggable] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: InternalsVisibleTo] // 0x00501D8C-0x00502F48
[assembly: RuntimeCompatibility] // 0x00501D8C-0x00502F48
[assembly: UnityEngineModuleAssembly] // 0x00501D8C-0x00502F48

// Image 38: UnityEngine.VFXModule.dll - Assembly: UnityEngine.VFXModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2835-2845
[assembly: Debuggable] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: InternalsVisibleTo] // 0x005033E8-0x00504624
[assembly: RuntimeCompatibility] // 0x005033E8-0x00504624
[assembly: UnityEngineModuleAssembly] // 0x005033E8-0x00504624

// Image 39: UnityEngine.VRModule.dll - Assembly: UnityEngine.VRModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2846-2847
[assembly: Debuggable] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: InternalsVisibleTo] // 0x005046A8-0x00505854
[assembly: RuntimeCompatibility] // 0x005046A8-0x00505854
[assembly: UnityEngineModuleAssembly] // 0x005046A8-0x00505854

// Image 40: UnityEngine.VideoModule.dll - Assembly: UnityEngine.VideoModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2848-2862
[assembly: Debuggable] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: InternalsVisibleTo] // 0x00505CE8-0x00506F34
[assembly: RuntimeCompatibility] // 0x00505CE8-0x00506F34
[assembly: UnityEngineModuleAssembly] // 0x00505CE8-0x00506F34

// Image 41: Cinemachine.dll - Assembly: Cinemachine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 2863-3026
[assembly: CompilationRelaxations] // 0x0050F3C8-0x0050F458
[assembly: Debuggable] // 0x0050F3C8-0x0050F458
[assembly: InternalsVisibleTo] // 0x0050F3C8-0x0050F458
[assembly: RuntimeCompatibility] // 0x0050F3C8-0x0050F458

// Image 43: com.unity.multiplayer-hlapi.Runtime.dll - Assembly: com.unity.multiplayer-hlapi.Runtime, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null - Types 3028-3148
[assembly: AssemblyCompany] // 0x00511468-0x005116C4
[assembly: AssemblyConfiguration] // 0x00511468-0x005116C4
[assembly: AssemblyCopyright] // 0x00511468-0x005116C4
[assembly: AssemblyDescription] // 0x00511468-0x005116C4
[assembly: AssemblyFileVersion] // 0x00511468-0x005116C4
[assembly: AssemblyProduct] // 0x00511468-0x005116C4
[assembly: AssemblyTitle] // 0x00511468-0x005116C4
[assembly: AssemblyTrademark] // 0x00511468-0x005116C4
[assembly: CompilationRelaxations] // 0x00511468-0x005116C4
[assembly: ComVisible] // 0x00511468-0x005116C4
[assembly: Debuggable] // 0x00511468-0x005116C4
[assembly: Guid] // 0x00511468-0x005116C4
[assembly: InternalsVisibleTo] // 0x00511468-0x005116C4
[assembly: InternalsVisibleTo] // 0x00511468-0x005116C4
[assembly: InternalsVisibleTo] // 0x00511468-0x005116C4
[assembly: InternalsVisibleTo] // 0x00511468-0x005116C4
[assembly: RuntimeCompatibility] // 0x00511468-0x005116C4

// Image 44: Assembly-CSharp-firstpass.dll - Assembly: Assembly-CSharp-firstpass, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 3149-3154
[assembly: CompilationRelaxations] // 0x005117C8-0x00511824
[assembly: Debuggable] // 0x005117C8-0x00511824
[assembly: RuntimeCompatibility] // 0x005117C8-0x00511824

// Image 45: Assembly-CSharp.dll - Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null - Types 3155-4479
[assembly: CompilationRelaxations] // 0x00529234-0x005292A0
[assembly: Debuggable] // 0x00529234-0x005292A0
[assembly: RuntimeCompatibility] // 0x00529234-0x005292A0

[CompilerGenerated] // 0x004B1F98-0x004B1FA8
internal sealed class __f__AnonymousType0<_message_j__TPar> // TypeDefIndex: 1
{
	// Fields
	[DebuggerBrowsable] // 0x004B8990-0x004B89A4
	private readonly _message_j__TPar _message_i__Field;

	// Constructors
	[DebuggerHidden] // 0x004B9CE4-0x004B9CF4
	public __f__AnonymousType0(_message_j__TPar message);

	// Methods
	[DebuggerHidden] // 0x004B9CF4-0x004B9D04
	public override bool Equals(object value);
	[DebuggerHidden] // 0x004B9D04-0x004B9D14
	public override int GetHashCode();
	[DebuggerHidden] // 0x004B9D14-0x004B9D24
	public override string ToString();
}

internal sealed class Locale // TypeDefIndex: 2
{
	// Methods
	public static string GetText(string msg); // 0x009D413C-0x009D4140
	public static string GetText(string fmt, params /* 0x004BD130-0x004BD140 */ object[] args); // 0x009D4140-0x009D4148
}

internal static class SR // TypeDefIndex: 3
{
	// Methods
	internal static string Format(string resourceFormat, object p1); // 0x009E8438-0x009E84B8
	internal static string Format(string resourceFormat, object p1, object p2); // 0x009E84B8-0x009E8540
}

namespace Mono
{
	public static class Runtime // TypeDefIndex: 4
	{
		// Methods
		private static void mono_runtime_install_handlers(); // 0x009E4E04-0x009E4E08
		public static void InstallSignalHandlers(); // 0x009E4E08-0x009E4E0C
		private static void mono_runtime_cleanup_handlers(); // 0x009E4E0C-0x009E4E40
		public static void RemoveSignalHandlers(); // 0x009E4E40-0x009E4E74
		public static string GetDisplayName(); // 0x009E4E74-0x009E4E78
		private static string GetNativeStackTrace(Exception exception); // 0x009E4E78-0x009E4E7C
		public static bool SetGCAllowSynchronousMajor(bool flag); // 0x009E4E7C-0x009E5004
	}

	internal struct RuntimeClassHandle // TypeDefIndex: 5
	{
		// Fields
		private unsafe RuntimeStructs.MonoClass* value; // 0x00
	
		// Properties
		internal unsafe RuntimeStructs.MonoClass* Value { get; } // 0x00587C14-0x00587C1C 
	
		// Constructors
		internal unsafe RuntimeClassHandle(RuntimeStructs.MonoClass* value); // 0x00587BE0-0x00587BE8
		internal unsafe RuntimeClassHandle(IntPtr ptr); // 0x00587BE8-0x00587C14
	
		// Methods
		public override bool Equals(object obj); // 0x00587C1C-0x00587C24
		public override int GetHashCode(); // 0x00587C24-0x00587C58
		internal static unsafe IntPtr GetTypeFromClass(RuntimeStructs.MonoClass* klass); // 0x009E5004-0x009E5238
		internal RuntimeTypeHandle GetTypeHandle(); // 0x00587C58-0x00587C60
	}

	internal struct RuntimeRemoteClassHandle // TypeDefIndex: 6
	{
		// Fields
		private unsafe RuntimeStructs.RemoteClass* value; // 0x00
	
		// Properties
		internal RuntimeClassHandle ProxyClass { get; } // 0x00587D68-0x00587D88 
	}

	internal struct RuntimeGenericParamInfoHandle // TypeDefIndex: 7
	{
		// Fields
		private unsafe RuntimeStructs.GenericParamInfo* value; // 0x00
	
		// Properties
		internal Type[] Constraints { get; } // 0x00587D0C-0x00587D14 
		internal GenericParameterAttributes Attributes { get; } // 0x00587D14-0x00587D34 
	
		// Constructors
		internal unsafe RuntimeGenericParamInfoHandle(IntPtr ptr); // 0x00587CE0-0x00587D0C
	
		// Methods
		private Type[] GetConstraints(); // 0x00587D34-0x00587D3C
		private int GetConstraintsCount(); // 0x00587D3C-0x00587D44
	}

	internal struct RuntimeEventHandle // TypeDefIndex: 8
	{
		// Fields
		private IntPtr value; // 0x00
	
		// Properties
		public IntPtr Value { get; } // 0x00587C68-0x00587C70 
	
		// Constructors
		internal RuntimeEventHandle(IntPtr v); // 0x00587C60-0x00587C68
	
		// Methods
		public override bool Equals(object obj); // 0x00587C70-0x00587C78
		public override int GetHashCode(); // 0x00587C78-0x00587C84
	}

	internal struct RuntimePropertyHandle // TypeDefIndex: 9
	{
		// Fields
		private IntPtr value; // 0x00
	
		// Properties
		public IntPtr Value { get; } // 0x00587D4C-0x00587D54 
	
		// Constructors
		internal RuntimePropertyHandle(IntPtr v); // 0x00587D44-0x00587D4C
	
		// Methods
		public override bool Equals(object obj); // 0x00587D54-0x00587D5C
		public override int GetHashCode(); // 0x00587D5C-0x00587D68
	}

	internal struct RuntimeGPtrArrayHandle // TypeDefIndex: 10
	{
		// Fields
		private unsafe RuntimeStructs.GPtrArray* value; // 0x00
	
		// Properties
		internal int Length { get; } // 0x00587CB0-0x00587CD0 
		internal IntPtr this[int i] { get => default; } // 0x00587CD0-0x00587CD8 
	
		// Constructors
		internal unsafe RuntimeGPtrArrayHandle(IntPtr ptr); // 0x00587C84-0x00587CB0
	
		// Methods
		internal IntPtr Lookup(int i); // 0x00587CD8-0x00587CE0
		private static unsafe void GPtrArrayFree(RuntimeStructs.GPtrArray* value); // 0x009E5238-0x009E523C
		internal static void DestroyAndFree(ref RuntimeGPtrArrayHandle h); // 0x009E523C-0x009E543C
	}

	internal static class RuntimeMarshal // TypeDefIndex: 11
	{
		// Methods
		internal static string PtrToUtf8String(IntPtr ptr); // 0x009E543C-0x009E550C
		internal static SafeStringMarshal MarshalString(string str); // 0x009E5560-0x009E55F8
		private static int DecodeBlobSize(IntPtr in_ptr, out IntPtr out_ptr); // 0x009E55F8-0x009E5678
		internal static byte[] DecodeBlobArray(IntPtr ptr); // 0x009E5678-0x009E5734
		internal static int AsciHexDigitValue(int c); // 0x009E5734-0x009E5764
		internal static void FreeAssemblyName(ref MonoAssemblyName name, bool freeStruct); // 0x009E5764-0x009E5934
	}

	internal static class RuntimeStructs // TypeDefIndex: 12
	{
		// Nested types
		internal struct RemoteClass // TypeDefIndex: 13
		{
			// Fields
			internal IntPtr default_vtable; // 0x00
			internal IntPtr xdomain_vtable; // 0x08
			internal unsafe MonoClass* proxy_class; // 0x10
			internal IntPtr proxy_class_name; // 0x18
			internal uint interface_count; // 0x20
		}
	
		internal struct MonoClass // TypeDefIndex: 14
		{
		}
	
		internal struct GenericParamInfo // TypeDefIndex: 15
		{
			// Fields
			internal unsafe MonoClass* pklass; // 0x00
			internal IntPtr name; // 0x08
			internal ushort flags; // 0x10
			internal uint token; // 0x14
			internal unsafe MonoClass** constraints; // 0x18
		}
	
		internal struct GPtrArray // TypeDefIndex: 16
		{
			// Fields
			internal unsafe IntPtr* data; // 0x00
			internal int len; // 0x08
		}
	
		private struct HandleStackMark // TypeDefIndex: 17
		{
			// Fields
			private int size; // 0x00
			private int interior_size; // 0x04
			private IntPtr chunk; // 0x08
		}
	
		private struct MonoError // TypeDefIndex: 18
		{
			// Fields
			private ushort error_code; // 0x00
			private ushort hidden_0; // 0x02
			private IntPtr hidden_1; // 0x08
			private IntPtr hidden_2; // 0x10
			private IntPtr hidden_3; // 0x18
			private IntPtr hidden_4; // 0x20
			private IntPtr hidden_5; // 0x28
			private IntPtr hidden_6; // 0x30
			private IntPtr hidden_7; // 0x38
			private IntPtr hidden_8; // 0x40
			private IntPtr hidden_11; // 0x48
			private IntPtr hidden_12; // 0x50
			private IntPtr hidden_13; // 0x58
			private IntPtr hidden_14; // 0x60
			private IntPtr hidden_15; // 0x68
			private IntPtr hidden_16; // 0x70
			private IntPtr hidden_17; // 0x78
			private IntPtr hidden_18; // 0x80
		}
	}

	internal struct MonoAssemblyName // TypeDefIndex: 19
	{
		// Fields
		internal IntPtr name; // 0x00
		internal IntPtr culture; // 0x08
		internal IntPtr hash_value; // 0x10
		internal IntPtr public_key; // 0x18
		internal unsafe fixed /* 0x004B89A4-0x004B8A0C */ byte public_key_token[0]; // 0x20
		internal uint hash_alg; // 0x34
		internal uint hash_len; // 0x38
		internal uint flags; // 0x3C
		internal ushort major; // 0x40
		internal ushort minor; // 0x42
		internal ushort build; // 0x44
		internal ushort revision; // 0x46
		internal ushort arch; // 0x48
	
		// Nested types
		[CompilerGenerated] // 0x004B1FE0-0x004B2018
		[UnsafeValueType] // 0x004B1FE0-0x004B2018
		public struct _public_key_token_e__FixedBuffer // TypeDefIndex: 20
		{
			// Fields
			public byte FixedElementField; // 0x00
		}
	}

	internal struct SafeGPtrArrayHandle : IDisposable // TypeDefIndex: 21
	{
		// Fields
		private RuntimeGPtrArrayHandle handle; // 0x00
	
		// Properties
		internal int Length { get; } // 0x00587DDC-0x00587DFC 
		internal IntPtr this[int i] { get => default; } // 0x00587DFC-0x00587E94 
	
		// Constructors
		internal SafeGPtrArrayHandle(IntPtr ptr); // 0x00587D88-0x00587DB4
	
		// Methods
		public void Dispose(); // 0x00587DB4-0x00587DDC
	}

	internal struct SafeStringMarshal : IDisposable // TypeDefIndex: 22
	{
		// Fields
		private readonly string str; // 0x00
		private IntPtr marshaled_string; // 0x08
	
		// Properties
		public IntPtr Value { get; } // 0x00587EE4-0x00587EEC 
	
		// Constructors
		public SafeStringMarshal(string str); // 0x00587E94-0x00587EE4
	
		// Methods
		public static IntPtr StringToUtf8(string str); // 0x009E5934-0x009E5938
		public static void GFree(IntPtr ptr); // 0x009E5938-0x009E5A04
		public void Dispose(); // 0x00587EEC-0x00587F88
	}
}

namespace Mono.Xml
{
	internal class SecurityParser : SmallXmlParser, IContentHandler // TypeDefIndex: 23
	{
		// Fields
		private SecurityElement root; // 0x68
		private SecurityElement current; // 0x70
		private Stack stack; // 0x78
	
		// Constructors
		public SecurityParser(); // 0x009E5FF4-0x009E605C
	
		// Methods
		public void LoadXml(string xml); // 0x009E6144-0x009E61D8
		public SecurityElement ToXml(); // 0x009E63BC-0x009E63C4
		public void OnStartParsing(SmallXmlParser parser); // 0x009E63C4-0x009E63C8
		public void OnProcessingInstruction(string name, string text); // 0x009E63C8-0x009E63CC
		public void OnIgnorableWhitespace(string s); // 0x009E63CC-0x009E63D0
		public void OnStartElement(string name, IAttrList attrs); // 0x009E63D0-0x009E6688
		public void OnEndElement(string name); // 0x009E6688-0x009E6708
		public void OnChars(string ch); // 0x009E6708-0x009E679C
		public void OnEndParsing(SmallXmlParser parser); // 0x009E679C-0x009E67A0
	}

	internal class SmallXmlParser // TypeDefIndex: 24
	{
		// Fields
		private IContentHandler handler; // 0x10
		private TextReader reader; // 0x18
		private Stack elementNames; // 0x20
		private Stack xmlSpaces; // 0x28
		private string xmlSpace; // 0x30
		private StringBuilder buffer; // 0x38
		private char[] nameBuffer; // 0x40
		private bool isWhitespace; // 0x48
		private AttrListImpl attributes; // 0x50
		private int line; // 0x58
		private int column; // 0x5C
		private bool resetColumn; // 0x60
	
		// Nested types
		public interface IContentHandler // TypeDefIndex: 25
		{
			// Methods
			void OnStartParsing(SmallXmlParser parser);
			void OnEndParsing(SmallXmlParser parser);
			void OnStartElement(string name, IAttrList attrs);
			void OnEndElement(string name);
			void OnProcessingInstruction(string name, string text);
			void OnChars(string text);
			void OnIgnorableWhitespace(string text);
		}
	
		public interface IAttrList // TypeDefIndex: 26
		{
			// Properties
			int Length { get; }
			string[] Names { get; }
			string[] Values { get; }
	
			// Methods
			string GetName(int i);
			string GetValue(int i);
			string GetValue(string name);
		}
	
		private class AttrListImpl : IAttrList // TypeDefIndex: 27
		{
			// Fields
			private List<string> attrNames; // 0x10
			private List<string> attrValues; // 0x18
	
			// Properties
			public int Length { get; } // 0x009E8164-0x009E81B8 
			public string[] Names { get; } // 0x009E8388-0x009E83E0 
			public string[] Values { get; } // 0x009E83E0-0x009E8438 
	
			// Constructors
			public AttrListImpl(); // 0x009E67A0-0x009E6830
	
			// Methods
			public string GetName(int i); // 0x009E81B8-0x009E8234
			public string GetValue(int i); // 0x009E8234-0x009E82B0
			public string GetValue(string name); // 0x009E82B0-0x009E8388
			internal void Clear(); // 0x009E7BA4-0x009E7C0C
			internal void Add(string name, string value); // 0x009E80E4-0x009E8164
		}
	
		// Constructors
		public SmallXmlParser(); // 0x009E605C-0x009E6144
	
		// Methods
		private Exception Error(string msg); // 0x009E6830-0x009E68AC
		private Exception UnexpectedEndError(); // 0x009E6974-0x009E6A4C
		private bool IsNameChar(char c, bool start); // 0x009E6A4C-0x009E6B64
		private bool IsWhitespace(int c); // 0x009E6B64-0x009E6B94
		public void SkipWhitespaces(); // 0x009E6B94-0x009E6B9C
		private void HandleWhitespaces(); // 0x009E6C68-0x009E6D2C
		public void SkipWhitespaces(bool expected); // 0x009E6B9C-0x009E6C68
		private int Peek(); // 0x009E6DA0-0x009E6DC0
		private int Read(); // 0x009E6D2C-0x009E6DA0
		public void Expect(int c); // 0x009E6DC0-0x009E6EA8
		private string ReadUntil(char until, bool handleReferences); // 0x009E6EA8-0x009E6FB4
		public string ReadName(); // 0x009E7148-0x009E72F4
		public void Parse(TextReader input, IContentHandler handler); // 0x009E61D8-0x009E63BC
		private void Cleanup(); // 0x009E7B28-0x009E7BA4
		public void ReadContent(); // 0x009E72F4-0x009E79D0
		private void HandleBufferedContent(); // 0x009E79D0-0x009E7B28
		private void ReadCharacters(); // 0x009E7F50-0x009E7FE0
		private void ReadReference(); // 0x009E6FB4-0x009E7148
		private int ReadCharacterReference(); // 0x009E7FE0-0x009E80E4
		private void ReadAttribute(AttrListImpl a); // 0x009E7DE8-0x009E7F50
		private void ReadCDATASection(); // 0x009E7C0C-0x009E7D38
		private void ReadComment(); // 0x009E7D38-0x009E7DE8
	}

	internal class SmallXmlParserException : SystemException // TypeDefIndex: 28
	{
		// Fields
		private int line; // 0x88
		private int column; // 0x8C
	
		// Constructors
		public SmallXmlParserException(string msg, int line, int column); // 0x009E68AC-0x009E6974
	}
}

namespace Mono.Globalization.Unicode
{
	internal class CodePointIndexer // TypeDefIndex: 29
	{
		// Fields
		private readonly TableRange[] ranges; // 0x10
		public readonly int TotalCount; // 0x18
		private int defaultIndex; // 0x1C
		private int defaultCP; // 0x20
	
		// Nested types
		[Serializable]
		internal struct TableRange // TypeDefIndex: 30
		{
			// Fields
			public readonly int Start; // 0x00
			public readonly int End; // 0x04
			public readonly int Count; // 0x08
			public readonly int IndexStart; // 0x0C
			public readonly int IndexEnd; // 0x10
	
			// Constructors
			public TableRange(int start, int end, int indexStart); // 0x00587ADC-0x00587AF4
		}
	
		// Constructors
		public CodePointIndexer(int[] starts, int[] ends, int defaultIndex, int defaultCP); // 0x009DC41C-0x009DC5AC
	
		// Methods
		public int ToIndex(int cp); // 0x009DC5AC-0x009DC644
	}

	internal class TailoringInfo // TypeDefIndex: 31
	{
		// Fields
		public readonly int LCID; // 0x10
		public readonly int TailoringIndex; // 0x14
		public readonly int TailoringCount; // 0x18
		public readonly bool FrenchSort; // 0x1C
	
		// Constructors
		public TailoringInfo(int lcid, int tailoringIndex, int tailoringCount, bool frenchSort); // 0x009DDDD4-0x009DDE28
	}

	internal class Contraction // TypeDefIndex: 32
	{
		// Fields
		public int Index; // 0x10
		public readonly char[] Source; // 0x18
		public readonly string Replacement; // 0x20
		public readonly byte[] SortKey; // 0x28
	
		// Constructors
		public Contraction(int index, char[] source, string replacement, byte[] sortkey); // 0x009DC644-0x009DC694
	}

	internal class ContractionComparer : IComparer<Contraction> // TypeDefIndex: 33
	{
		// Fields
		public static readonly ContractionComparer Instance; // 0x00
	
		// Constructors
		public ContractionComparer(); // 0x009DC738-0x009DC740
		static ContractionComparer(); // 0x009DC740-0x009DC7A4
	
		// Methods
		public int Compare(Contraction c1, Contraction c2); // 0x009DC694-0x009DC738
	}

	internal class Level2Map // TypeDefIndex: 34
	{
		// Fields
		public byte Source; // 0x10
		public byte Replace; // 0x11
	
		// Constructors
		public Level2Map(byte source, byte replace); // 0x009DC7A4-0x009DC7E0
	}

	internal class MSCompatUnicodeTable // TypeDefIndex: 35
	{
		// Fields
		public static int MaxExpansionLength; // 0x00
		private static readonly unsafe byte* ignorableFlags; // 0x08
		private static readonly unsafe byte* categories; // 0x10
		private static readonly unsafe byte* level1; // 0x18
		private static readonly unsafe byte* level2; // 0x20
		private static readonly unsafe byte* level3; // 0x28
		private static unsafe byte* cjkCHScategory; // 0x30
		private static unsafe byte* cjkCHTcategory; // 0x38
		private static unsafe byte* cjkJAcategory; // 0x40
		private static unsafe byte* cjkKOcategory; // 0x48
		private static unsafe byte* cjkCHSlv1; // 0x50
		private static unsafe byte* cjkCHTlv1; // 0x58
		private static unsafe byte* cjkJAlv1; // 0x60
		private static unsafe byte* cjkKOlv1; // 0x68
		private static unsafe byte* cjkKOlv2; // 0x70
		private static readonly char[] tailoringArr; // 0x78
		private static readonly TailoringInfo[] tailoringInfos; // 0x80
		private static object forLock; // 0x88
		public static readonly bool isReady; // 0x90
	
		// Properties
		public static bool IsReady { get; } // 0x009DD968-0x009DD9D0 
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x004B2050-0x004B2060
		private sealed class __c // TypeDefIndex: 36
		{
			// Fields
			public static readonly __c __9; // 0x00
			public static Comparison<Level2Map> __9__17_0; // 0x08
	
			// Constructors
			static __c(); // 0x009DE46C-0x009DE4D0
			public __c(); // 0x009DE4D0-0x009DE4D8
	
			// Methods
			internal int _BuildTailoringTables_b__17_0(Level2Map a, Level2Map b); // 0x009DE4D8-0x009DE504
		}
	
		// Constructors
		static MSCompatUnicodeTable(); // 0x009DDA7C-0x009DDDD4
	
		// Methods
		public static TailoringInfo GetTailoringInfo(int lcid); // 0x009DC7E0-0x009DC914
		public static void BuildTailoringTables(CultureInfo culture, TailoringInfo t, ref Contraction[] contractions, ref Level2Map[] diacriticals); // 0x009DC914-0x009DCEFC
		private static unsafe void SetCJKReferences(string name, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer lv2Indexer, ref byte* lv2Table); // 0x009DCEFC-0x009DD18C
		public static byte Category(int cp); // 0x009DD18C-0x009DD244
		public static byte Level1(int cp); // 0x009DD244-0x009DD2FC
		public static byte Level2(int cp); // 0x009DD2FC-0x009DD3B4
		public static byte Level3(int cp); // 0x009DD3B4-0x009DD46C
		public static bool IsIgnorable(int cp, byte flag); // 0x009DD46C-0x009DD598
		public static bool IsIgnorableNonSpacing(int cp); // 0x009DD598-0x009DD600
		public static int ToKanaTypeInsensitive(int i); // 0x009DD600-0x009DD620
		public static int ToWidthCompat(int i); // 0x009DD620-0x009DD7B8
		public static bool HasSpecialWeight(char c); // 0x009DD7B8-0x009DD84C
		public static bool IsHalfWidthKana(char c); // 0x009DD84C-0x009DD860
		public static bool IsHiragana(char c); // 0x009DD860-0x009DD878
		public static bool IsJapaneseSmallLetter(char c); // 0x009DD878-0x009DD968
		private static IntPtr GetResource(string name); // 0x009DD9D0-0x009DDA4C
		private static unsafe uint UInt32FromBytePtr(byte* raw, uint idx); // 0x009DDA4C-0x009DDA7C
		public static unsafe void FillCJK(string culture, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer lv2Indexer, ref byte* lv2Table); // 0x009DDE28-0x009DDF88
		private static unsafe void FillCJKCore(string culture, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer cjkLv2Indexer, ref byte* lv2Table); // 0x009DDF88-0x009DE46C
	}

	internal class MSCompatUnicodeTableUtil // TypeDefIndex: 37
	{
		// Fields
		public static readonly CodePointIndexer Ignorable; // 0x00
		public static readonly CodePointIndexer Category; // 0x08
		public static readonly CodePointIndexer Level1; // 0x10
		public static readonly CodePointIndexer Level2; // 0x18
		public static readonly CodePointIndexer Level3; // 0x20
		public static readonly CodePointIndexer CjkCHS; // 0x28
		public static readonly CodePointIndexer Cjk; // 0x30
	
		// Constructors
		static MSCompatUnicodeTableUtil(); // 0x009DE504-0x009DE8BC
	}

	internal class NormalizationTableUtil // TypeDefIndex: 38
	{
		// Fields
		public static readonly CodePointIndexer Prop; // 0x00
		public static readonly CodePointIndexer Map; // 0x08
		public static readonly CodePointIndexer Combining; // 0x10
		public static readonly CodePointIndexer Composite; // 0x18
		public static readonly CodePointIndexer Helper; // 0x20
	
		// Constructors
		static NormalizationTableUtil(); // 0x009DE8BC-0x009DEB7C
	
		// Methods
		public static int PropIdx(int cp); // 0x009DEB7C-0x009DEBF4
		public static int MapIdx(int cp); // 0x009DEBF4-0x009DEC6C
	}

	internal class SimpleCollator // TypeDefIndex: 39
	{
		// Fields
		private static bool QuickCheckDisabled; // 0x00
		private static SimpleCollator invariant; // 0x08
		private readonly TextInfo textInfo; // 0x10
		private readonly CodePointIndexer cjkIndexer; // 0x18
		private readonly Contraction[] contractions; // 0x20
		private readonly Level2Map[] level2Maps; // 0x28
		private readonly byte[] unsafeFlags; // 0x30
		private readonly unsafe byte* cjkCatTable; // 0x38
		private readonly unsafe byte* cjkLv1Table; // 0x40
		private readonly unsafe byte* cjkLv2Table; // 0x48
		private readonly CodePointIndexer cjkLv2Indexer; // 0x50
		private readonly int lcid; // 0x58
		private readonly bool frenchSort; // 0x5C
	
		// Nested types
		internal struct Context // TypeDefIndex: 40
		{
			// Fields
			public readonly CompareOptions Option; // 0x00
			public readonly unsafe byte* NeverMatchFlags; // 0x08
			public readonly unsafe byte* AlwaysMatchFlags; // 0x10
			public unsafe byte* Buffer1; // 0x18
			public unsafe byte* Buffer2; // 0x20
			public int PrevCode; // 0x28
			public unsafe byte* PrevSortKey; // 0x30
	
			// Constructors
			public unsafe Context(CompareOptions opt, byte* alwaysMatchFlags, byte* neverMatchFlags, byte* buffer1, byte* buffer2, byte* prev1); // 0x00587AF4-0x00587BD0
		}
	
		private struct PreviousInfo // TypeDefIndex: 41
		{
			// Fields
			public int Code; // 0x00
			public unsafe byte* SortKey; // 0x08
	
			// Constructors
			public unsafe PreviousInfo(bool dummy); // 0x00587BD0-0x00587BE0
		}
	
		private struct Escape // TypeDefIndex: 42
		{
			// Fields
			public string Source; // 0x00
			public int Index; // 0x08
			public int Start; // 0x0C
			public int End; // 0x10
			public int Optional; // 0x14
		}
	
		private enum ExtenderType // TypeDefIndex: 43
		{
			None = 0,
			Simple = 1,
			Voiced = 2,
			Conditional = 3,
			Buggy = 4
		}
	
		// Constructors
		public SimpleCollator(CultureInfo culture); // 0x009DEC6C-0x009DEFBC
		static SimpleCollator(); // 0x009E4628-0x009E46FC
	
		// Methods
		private unsafe void SetCJKTable(CultureInfo culture, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer lv2Indexer, ref byte* lv2Table); // 0x009DEFBC-0x009DF0A4
		private static CultureInfo GetNeutralCulture(CultureInfo info); // 0x009DF0A4-0x009DF124
		private byte Category(int cp); // 0x009DF124-0x009DF1D4
		private byte Level1(int cp); // 0x009DF1D4-0x009DF284
		private byte Level2(int cp, ExtenderType ext); // 0x009DF284-0x009DF3F4
		private static bool IsHalfKana(int cp, CompareOptions opt); // 0x009DF3F4-0x009DF47C
		private Contraction GetContraction(string s, int start, int end); // 0x009DF47C-0x009DF55C
		private Contraction GetContraction(string s, int start, int end, Contraction[] clist); // 0x009DF55C-0x009DF68C
		private Contraction GetTailContraction(string s, int start, int end); // 0x009DF68C-0x009DF76C
		private Contraction GetTailContraction(string s, int start, int end, Contraction[] clist); // 0x009DF76C-0x009DF98C
		private int FilterOptions(int i, CompareOptions opt); // 0x009DF98C-0x009DFAB4
		private ExtenderType GetExtenderType(int i); // 0x009DFAB4-0x009DFBC8
		private static byte ToDashTypeValue(ExtenderType ext, CompareOptions opt); // 0x009DFBC8-0x009DFBE8
		private int FilterExtender(int i, ExtenderType ext, CompareOptions opt); // 0x009DFBE8-0x009DFE1C
		private static bool IsIgnorable(int i, CompareOptions opt); // 0x009DFE1C-0x009DFEB0
		private bool IsSafe(int i); // 0x009DFEB0-0x009DFF38
		public SortKey GetSortKey(string s, CompareOptions options); // 0x009DFF38-0x009DFF60
		public SortKey GetSortKey(string s, int start, int length, CompareOptions options); // 0x009DFF60-0x009E0034
		private void GetSortKey(string s, int start, int end, SortKeyBuffer buf, CompareOptions opt); // 0x009E01F8-0x009E05A0
		private void FillSortKeyRaw(int i, ExtenderType ext, SortKeyBuffer buf, CompareOptions opt); // 0x009E0608-0x009E09CC
		private void FillSurrogateSortKeyRaw(int i, SortKeyBuffer buf); // 0x009E0BC4-0x009E0C84
		internal int Compare(string s1, int idx1, int len1, string s2, int idx2, int len2, CompareOptions options); // 0x009E0D20-0x009E0DE0
		private unsafe void ClearBuffer(byte* buffer, int size); // 0x009E05D0-0x009E0608
		private int CompareInternal(string s1, int idx1, int len1, string s2, int idx2, int len2, out bool targetConsumed, out bool sourceConsumed, bool skipHeadingExtenders, bool immediateBreakup, ref Context ctx); // 0x009E0DE0-0x009E2298
		private int CompareFlagPair(bool b1, bool b2); // 0x009E2298-0x009E22B8
		public bool IsPrefix(string src, string target, CompareOptions opt); // 0x009E22B8-0x009E22E0
		public bool IsPrefix(string s, string target, int start, int length, CompareOptions opt); // 0x009E22E0-0x009E2398
		private bool IsPrefix(string s, string target, int start, int length, bool skipHeadingExtenders, ref Context ctx); // 0x009E2398-0x009E2408
		public bool IsSuffix(string src, string target, CompareOptions opt); // 0x009E2408-0x009E2430
		public bool IsSuffix(string s, string target, int start, int length, CompareOptions opt); // 0x009E2430-0x009E24E0
		private int QuickIndexOf(string s, string target, int start, int length, out bool testWasUnable); // 0x009E26C0-0x009E2838
		public int IndexOf(string s, string target, int start, int length, CompareOptions opt); // 0x009E2838-0x009E2A28
		private int IndexOfOrdinal(string s, string target, int start, int length); // 0x009E2ECC-0x009E2FA4
		private int IndexOfOrdinal(string s, char target, int start, int length); // 0x009E2FA4-0x009E3018
		private unsafe int IndexOfSortKey(string s, int start, int length, byte* sortkey, char target, int ti, bool noLv4, ref Context ctx); // 0x009E3018-0x009E30B8
		private unsafe int IndexOf(string s, string target, int start, int length, byte* targetSortKey, ref Context ctx); // 0x009E2A28-0x009E2ECC
		public int LastIndexOf(string s, string target, int start, int length, CompareOptions opt); // 0x009E24E0-0x009E26C0
		private int LastIndexOfOrdinal(string s, string target, int start, int length); // 0x009E3288-0x009E33C0
		private unsafe int LastIndexOfSortKey(string s, int start, int orgStart, int length, byte* sortkey, int ti, bool noLv4, ref Context ctx); // 0x009E3904-0x009E39B4
		private unsafe int LastIndexOf(string s, string target, int start, int length, byte* targetSortKey, ref Context ctx); // 0x009E33C0-0x009E3904
		private unsafe bool MatchesForward(string s, ref int idx, int end, int ti, byte* sortkey, bool noLv4, ref Context ctx); // 0x009E30B8-0x009E3288
		private unsafe bool MatchesForwardCore(string s, ref int idx, int end, int ti, byte* sortkey, bool noLv4, ExtenderType ext, ref Contraction ct, ref Context ctx); // 0x009E3B8C-0x009E3EF0
		private unsafe bool MatchesPrimitive(CompareOptions opt, byte* source, int si, ExtenderType ext, byte* target, int ti, bool noLv4); // 0x009E3EF0-0x009E414C
		private unsafe bool MatchesBackward(string s, ref int idx, int end, int orgStart, int ti, byte* sortkey, bool noLv4, ref Context ctx); // 0x009E39B4-0x009E3B8C
		private unsafe bool MatchesBackwardCore(string s, ref int idx, int end, int orgStart, int ti, byte* sortkey, bool noLv4, ExtenderType ext, ref Contraction ct, ref Context ctx); // 0x009E414C-0x009E4628
	}

	internal class SortKeyBuffer // TypeDefIndex: 44
	{
		// Fields
		private byte[] l1b; // 0x10
		private byte[] l2b; // 0x18
		private byte[] l3b; // 0x20
		private byte[] l4sb; // 0x28
		private byte[] l4tb; // 0x30
		private byte[] l4kb; // 0x38
		private byte[] l4wb; // 0x40
		private byte[] l5b; // 0x48
		private string source; // 0x50
		private int l1; // 0x58
		private int l2; // 0x5C
		private int l3; // 0x60
		private int l4s; // 0x64
		private int l4t; // 0x68
		private int l4k; // 0x6C
		private int l4w; // 0x70
		private int l5; // 0x74
		private int lcid; // 0x78
		private CompareOptions options; // 0x7C
		private bool processLevel2; // 0x80
		private bool frenchSort; // 0x81
		private bool frenchSorted; // 0x82
	
		// Constructors
		public SortKeyBuffer(int lcid); // 0x009E0034-0x009E003C
	
		// Methods
		public void Reset(); // 0x009E46FC-0x009E4710
		internal void Initialize(CompareOptions options, int lcid, string s, bool frenchSort); // 0x009E003C-0x009E01F8
		internal void AppendCJKExtension(byte lv1msb, byte lv1lsb); // 0x009E0B24-0x009E0BC4
		internal void AppendKana(byte category, byte lv1, byte lv2, byte lv3, bool isSmallKana, byte markType, bool isKatakana, bool isHalfWidth); // 0x009E0C84-0x009E0D20
		internal void AppendNormal(byte category, byte lv1, byte lv2, byte lv3); // 0x009E09CC-0x009E0B24
		private void AppendLevel5(byte category, byte lv1); // 0x009E47F0-0x009E489C
		private void AppendBufferPrimitive(byte value, ref byte[] buf, ref int bidx); // 0x009E4710-0x009E47F0
		public SortKey GetResultAndReset(); // 0x009E05A0-0x009E05D0
		private int GetOptimizedLength(byte[] data, int len, byte defaultValue); // 0x009E4D90-0x009E4E04
		public SortKey GetResult(); // 0x009E489C-0x009E4D90
	}
}

namespace Mono.Security
{
	internal sealed class BitConverterLE // TypeDefIndex: 45
	{
		// Methods
		private static unsafe byte[] GetUIntBytes(byte* bytes); // 0x009E5A04-0x009E5B24
		private static unsafe byte[] GetULongBytes(byte* bytes); // 0x009E5B24-0x009E5CC4
		internal static byte[] GetBytes(float value); // 0x009E5CC4-0x009E5CE8
		internal static byte[] GetBytes(double value); // 0x009E5CE8-0x009E5D0C
		private static unsafe void UIntFromBytes(byte* dst, byte[] src, int startIndex); // 0x009E5D0C-0x009E5E70
		private static unsafe void ULongFromBytes(byte* dst, byte[] src, int startIndex); // 0x009E5E70-0x009E5F84
		internal static float ToSingle(byte[] value, int startIndex); // 0x009E5F84-0x009E5FBC
		internal static double ToDouble(byte[] value, int startIndex); // 0x009E5FBC-0x009E5FF4
	}
}

namespace Microsoft.Reflection
{
	internal static class ReflectionExtensions // TypeDefIndex: 46
	{
		// Extension methods
		public static bool IsEnum(this Type type); // 0x009D4148-0x009D4168
		public static bool IsAbstract(this Type type); // 0x009D4168-0x009D4180
		public static bool IsSealed(this Type type); // 0x009D4180-0x009D4198
		public static Type BaseType(this Type type); // 0x009D4198-0x009D41B8
		public static Assembly Assembly(this Type type); // 0x009D41B8-0x009D41D8
		public static TypeCode GetTypeCode(this Type type); // 0x009D41D8-0x009D4240
		public static bool ReflectionOnly(this Assembly assm); // 0x009D4240-0x009D4260
	}
}

namespace Microsoft.Win32
{
	internal static class UnsafeNativeMethods // TypeDefIndex: 47
	{
		// Nested types
		internal static class ManifestEtw // TypeDefIndex: 48
		{
			// Nested types
			internal unsafe delegate void EtwEnableCallback(in Guid sourceId, in int isEnabled, in byte level, in long matchAnyKeywords, in long matchAllKeywords, in EVENT_FILTER_DESCRIPTOR* filterData, in void* callbackContext); // TypeDefIndex: 49; 0x009DAB88-0x009DAE30
	
			internal struct EVENT_FILTER_DESCRIPTOR // TypeDefIndex: 50
			{
				// Fields
				public long Ptr; // 0x00
				public int Size; // 0x08
				public int Type; // 0x0C
			}
	
			internal enum ActivityControl : uint // TypeDefIndex: 51
			{
				EVENT_ACTIVITY_CTRL_GET_ID = 1,
				EVENT_ACTIVITY_CTRL_SET_ID = 2,
				EVENT_ACTIVITY_CTRL_CREATE_ID = 3,
				EVENT_ACTIVITY_CTRL_GET_SET_ID = 4,
				EVENT_ACTIVITY_CTRL_CREATE_SET_ID = 5
			}
	
			internal enum EVENT_INFO_CLASS // TypeDefIndex: 52
			{
				BinaryTrackInfo = 0,
				SetEnableAllKeywords = 1,
				SetTraits = 2
			}
	
			internal enum TRACE_QUERY_INFO_CLASS // TypeDefIndex: 53
			{
				TraceGuidQueryList = 0,
				TraceGuidQueryInfo = 1,
				TraceGuidQueryProcess = 2,
				TraceStackTracingInfo = 3,
				MaxTraceSetInfoClass = 4
			}
	
			internal struct TRACE_GUID_INFO // TypeDefIndex: 54
			{
				// Fields
				public int InstanceCount; // 0x00
				public int Reserved; // 0x04
			}
	
			internal struct TRACE_PROVIDER_INSTANCE_INFO // TypeDefIndex: 55
			{
				// Fields
				public int NextOffset; // 0x00
				public int EnableCount; // 0x04
				public int Pid; // 0x08
				public int Flags; // 0x0C
			}
	
			internal struct TRACE_ENABLE_INFO // TypeDefIndex: 56
			{
				// Fields
				public int IsEnabled; // 0x00
				public byte Level; // 0x04
				public byte Reserved1; // 0x05
				public ushort LoggerId; // 0x06
				public int EnableProperty; // 0x08
				public int Reserved2; // 0x0C
				public long MatchAnyKeyword; // 0x10
				public long MatchAllKeyword; // 0x18
			}
	
			// Methods
			internal static unsafe extern uint EventRegister(in Guid providerId, in EtwEnableCallback enableCallback, in void* callbackContext, [In, Out] long registrationHandle); // 0x009DA5F8-0x009DA6C4
			internal static extern uint EventUnregister(in long registrationHandle); // 0x009DA6C4-0x009DA760
			internal static unsafe int EventWriteTransferWrapper(long registrationHandle, ref EventDescriptor eventDescriptor, Guid* activityId, Guid* relatedActivityId, int userDataCount, EventProvider.EventData* userData); // 0x009DA760-0x009DA854
			private static unsafe extern int EventWriteTransfer(in long registrationHandle, in EventDescriptor eventDescriptor, in Guid* activityId, in Guid* relatedActivityId, in int userDataCount, in EventProvider.EventData* userData); // 0x009DA854-0x009DA930
			internal static extern int EventActivityIdControl(in ActivityControl ControlCode, [In, Out] Guid ActivityId); // 0x009DA930-0x009DA9D8
			internal static unsafe extern int EventSetInformation(in long registrationHandle, in EVENT_INFO_CLASS informationClass, in void* eventInformation, in int informationLength); // 0x009DA9D8-0x009DAA9C
			internal static unsafe extern int EnumerateTraceGuidsEx(TRACE_QUERY_INFO_CLASS TraceQueryInfoClass, void* InBuffer, int InBufferSize, void* OutBuffer, int OutBufferSize, ref int ReturnLength); // 0x009DAA9C-0x009DAB78
		}
	}

	internal interface IRegistryApi // TypeDefIndex: 57
	{
		// Methods
		RegistryKey OpenSubKey(RegistryKey rkey, string keyname, bool writtable);
		void Flush(RegistryKey rkey);
		void Close(RegistryKey rkey);
		object GetValue(RegistryKey rkey, string name, object default_value, RegistryValueOptions options);
		string[] GetSubKeyNames(RegistryKey rkey);
		string ToString(RegistryKey rkey);
		IntPtr GetHandle(RegistryKey key);
	}

	[ComVisible] // 0x004B2070-0x004B2084
	public static class Registry // TypeDefIndex: 58
	{
		// Fields
		public static readonly RegistryKey ClassesRoot; // 0x00
		public static readonly RegistryKey CurrentConfig; // 0x08
		public static readonly RegistryKey CurrentUser; // 0x10
		[Obsolete] // 0x004B8A0C-0x004B8A44
		public static readonly RegistryKey DynData; // 0x18
		public static readonly RegistryKey LocalMachine; // 0x20
		public static readonly RegistryKey PerformanceData; // 0x28
		public static readonly RegistryKey Users; // 0x30
	
		// Constructors
		static Registry(); // 0x009D8A90-0x009D8CC8
	}

	[Serializable]
	[ComVisible] // 0x004B2084-0x004B2098
	public enum RegistryHive // TypeDefIndex: 59
	{
		ClassesRoot = -2147483648,
		CurrentUser = -2147483647,
		LocalMachine = -2147483646,
		Users = -2147483645,
		PerformanceData = -2147483644,
		CurrentConfig = -2147483643,
		DynData = -2147483642
	}

	[ComVisible] // 0x004B2098-0x004B20AC
	public sealed class RegistryKey : MarshalByRefObject, IDisposable // TypeDefIndex: 60
	{
		// Fields
		private object handle; // 0x18
		private SafeRegistryHandle safe_handle; // 0x20
		private object hive; // 0x28
		private readonly string qname; // 0x30
		private readonly bool isRemoteRoot; // 0x38
		private readonly bool isWritable; // 0x39
		private static readonly IRegistryApi RegistryApi; // 0x00
	
		// Properties
		public string Name { get; } // 0x009D9260-0x009D9268 
		[ComVisible] // 0x004BD3A0-0x004BD3F0
		[MonoTODO] // 0x004BD3A0-0x004BD3F0
		public SafeRegistryHandle Handle { get; } // 0x009D934C-0x009D947C 
		internal bool IsRoot { get; } // 0x009D71C4-0x009D71D4 
		internal RegistryHive Hive { get; } // 0x009D71D4-0x009D727C 
		internal object InternalHandle { get; } // 0x009D9A94-0x009D9A9C 
	
		// Constructors
		static RegistryKey(); // 0x009D8D14-0x009D8DD0
		internal RegistryKey(RegistryHive hiveId); // 0x009D8CC8-0x009D8D14
		internal RegistryKey(RegistryHive hiveId, IntPtr keyHandle, bool remoteRoot); // 0x009D8E50-0x009D8F34
		internal RegistryKey(object data, string keyName, bool writable); // 0x009D5AD8-0x009D5B20
	
		// Methods
		internal static bool IsEquals(RegistryKey a, RegistryKey b); // 0x009D9038-0x009D90E8
		public void Dispose(); // 0x009D90E8-0x009D9158
		public void Flush(); // 0x009D9268-0x009D934C
		public void Close(); // 0x009D9158-0x009D9260
		public RegistryKey OpenSubKey(string name); // 0x009D9530-0x009D9538
		public RegistryKey OpenSubKey(string name, bool writable); // 0x009D9538-0x009D9680
		public object GetValue(string name); // 0x009D97AC-0x009D97B4
		public object GetValue(string name, object defaultValue); // 0x009D97B4-0x009D98BC
		public string[] GetSubKeyNames(); // 0x009D98BC-0x009D99A8
		public override string ToString(); // 0x009D99A8-0x009D9A94
		private void AssertKeyStillValid(); // 0x009D947C-0x009D9504
		private void AssertKeyNameLength(string name); // 0x009D9718-0x009D97AC
		internal static string DecodeString(byte[] data); // 0x009D9AD0-0x009D9B84
		internal static IOException CreateMarkedForDeletionException(); // 0x009D9B84-0x009D9BF4
		private static string GetHiveName(RegistryHive hive); // 0x009D8F34-0x009D9038
	}

	[ComVisible] // 0x004B20AC-0x004B20C0
	public enum RegistryValueKind // TypeDefIndex: 61
	{
		None = -1,
		Unknown = 0,
		String = 1,
		ExpandString = 2,
		Binary = 3,
		DWord = 4,
		MultiString = 7,
		QWord = 11
	}

	[Flags] // 0x004B20C0-0x004B20D0
	public enum RegistryValueOptions // TypeDefIndex: 62
	{
		None = 0,
		DoNotExpandEnvironmentNames = 1
	}

	internal class ExpandString // TypeDefIndex: 63
	{
		// Fields
		private string value; // 0x10
	
		// Constructors
		public ExpandString(string s); // 0x009D4260-0x009D428C
	
		// Methods
		public override string ToString(); // 0x009D428C-0x009D4294
		public string Expand(); // 0x009D4294-0x009D4434
	}

	internal class RegistryKeyComparer : IEqualityComparer // TypeDefIndex: 64
	{
		// Constructors
		public RegistryKeyComparer(); // 0x009D4528-0x009D4530
	
		// Methods
		public new bool Equals(object x, object y); // 0x009D9BF4-0x009D9CB0
		public int GetHashCode(object obj); // 0x009D9CB0-0x009D9D44
	}

	internal class KeyHandler // TypeDefIndex: 65
	{
		// Fields
		private static Hashtable key_to_handler; // 0x00
		private static Hashtable dir_to_handler; // 0x08
		public string Dir; // 0x10
		private string ActualDir; // 0x18
		public bool IsVolatile; // 0x20
		private Hashtable values; // 0x28
		private string file; // 0x30
		private bool dirty; // 0x38
		private static string user_store; // 0x10
		private static string machine_store; // 0x18
	
		// Properties
		public bool IsMarkedForDeletion { get; } // 0x009D78DC-0x009D796C 
		private static string UserStore { get; } // 0x009D6928-0x009D6A34 
		private static string MachineStore { get; } // 0x009D6A34-0x009D6BD4 
	
		// Constructors
		static KeyHandler(); // 0x009D4434-0x009D4528
		private KeyHandler(RegistryKey rkey, string basedir); // 0x009D4750-0x009D4758
		private KeyHandler(RegistryKey rkey, string basedir, bool is_volatile); // 0x009D4758-0x009D492C
	
		// Methods
		public void Load(); // 0x009D49F0-0x009D5078
		private void LoadKey(SecurityElement se); // 0x009D5078-0x009D5758
		public RegistryKey Ensure(RegistryKey rkey, string extra, bool writable, bool is_volatile); // 0x009D5758-0x009D5A34
		public RegistryKey Probe(RegistryKey rkey, string extra, bool writable); // 0x009D5B20-0x009D5ED0
		private static string CombineName(RegistryKey rkey, string extra); // 0x009D5A34-0x009D5AD8
		private static long GetSystemBootTime(); // 0x009D60F4-0x009D641C
		private static long GetRegisteredBootTime(string path); // 0x009D641C-0x009D670C
		private static void SaveRegisteredBootTime(string path, long btime); // 0x009D670C-0x009D6928
		private static void CleanVolatileKeys(); // 0x009D4530-0x009D4750
		public static bool VolatileKeyExists(string dir); // 0x009D5ED0-0x009D60F4
		public static string GetVolatileDir(string dir); // 0x009D492C-0x009D49F0
		public static KeyHandler Lookup(RegistryKey rkey, bool createNonExisting); // 0x009D6D1C-0x009D71C4
		private static string GetRootFromDir(string dir); // 0x009D6BD4-0x009D6D1C
		public static void Drop(RegistryKey rkey); // 0x009D727C-0x009D7754
		public object GetValue(string name, RegistryValueOptions options); // 0x009D7754-0x009D78DC
		public string[] GetSubKeyNames(); // 0x009D796C-0x009D7DA8
		public void Flush(); // 0x009D7DA8-0x009D7EC4
		public bool ValueExists(string name); // 0x009D8914-0x009D8A24
		~KeyHandler(); // 0x009D8A24-0x009D8A90
		private void Save(); // 0x009D7EC4-0x009D8914
	}

	internal class UnixRegistryApi : IRegistryApi // TypeDefIndex: 66
	{
		// Constructors
		public UnixRegistryApi(); // 0x009D8E48-0x009D8E50
	
		// Methods
		private static string ToUnix(string keyname); // 0x009D9FA4-0x009DA004
		private static bool IsWellKnownKey(string parentKeyName, string keyname); // 0x009DA004-0x009DA134
		public RegistryKey OpenSubKey(RegistryKey rkey, string keyname, bool writable); // 0x009DA134-0x009DA218
		public void Flush(RegistryKey rkey); // 0x009DA224-0x009DA2A0
		public void Close(RegistryKey rkey); // 0x009DA2A0-0x009DA304
		public object GetValue(RegistryKey rkey, string name, object default_value, RegistryValueOptions options); // 0x009DA304-0x009DA3C8
		public string[] GetSubKeyNames(RegistryKey rkey); // 0x009DA3C8-0x009DA43C
		public string ToString(RegistryKey rkey); // 0x009DA43C-0x009DA458
		private RegistryKey CreateSubKey(RegistryKey rkey, string keyname, bool writable); // 0x009DA218-0x009DA224
		private RegistryKey CreateSubKey(RegistryKey rkey, string keyname, bool writable, bool is_volatile); // 0x009DA458-0x009DA594
		public IntPtr GetHandle(RegistryKey key); // 0x009DA594-0x009DA5F8
	}

	internal class Win32RegistryApi : IRegistryApi // TypeDefIndex: 67
	{
		// Fields
		private readonly int NativeBytesPerCharacter; // 0x10
	
		// Constructors
		public Win32RegistryApi(); // 0x009D8DD0-0x009D8E48
	
		// Methods
		private static extern int RegCloseKey(IntPtr keyHandle); // 0x009DB094-0x009DB12C
		private static extern int RegFlushKey(IntPtr keyHandle); // 0x009DB12C-0x009DB1C4
		private static extern int RegOpenKeyEx(IntPtr keyBase, string keyName, IntPtr reserved, int access, out IntPtr keyHandle); // 0x009DB1C4-0x009DB290
		internal static unsafe extern int RegEnumKeyEx(IntPtr keyHandle, int dwIndex, char* lpName, ref int lpcbName, int[] lpReserved, out StringBuilder lpClass, int[] lpcbClass, long[] lpftLastWriteTime); // 0x009DB290-0x009DB3B4
		private static extern int RegQueryValueEx(IntPtr keyBase, string valueName, IntPtr reserved, ref RegistryValueKind type, IntPtr zero, ref int dataSize); // 0x009DB3B4-0x009DB494
		private static extern int RegQueryValueEx(IntPtr keyBase, string valueName, IntPtr reserved, ref RegistryValueKind type, out byte[] data, ref int dataSize); // 0x009DB494-0x009DB60C
		private static extern int RegQueryValueEx(IntPtr keyBase, string valueName, IntPtr reserved, ref RegistryValueKind type, ref int data, ref int dataSize); // 0x009DB60C-0x009DB6EC
		private static extern int RegQueryValueEx(IntPtr keyBase, string valueName, IntPtr reserved, ref RegistryValueKind type, ref long data, ref int dataSize); // 0x009DB6EC-0x009DB7CC
		internal static extern int RegQueryInfoKey(IntPtr hKey, out StringBuilder lpClass, int[] lpcbClass, IntPtr lpReserved_MustBeZero, ref int lpcSubKeys, int[] lpcbMaxSubKeyLen, int[] lpcbMaxClassLen, ref int lpcValues, int[] lpcbMaxValueNameLen, int[] lpcbMaxValueLen, int[] lpcbSecurityDescriptor, int[] lpftLastWriteTime); // 0x009DB7CC-0x009DB930
		public IntPtr GetHandle(RegistryKey key); // 0x009DB930-0x009DB9B0
		private static bool IsHandleValid(RegistryKey key); // 0x009DB9B0-0x009DB9D0
		public object GetValue(RegistryKey rkey, string name, object defaultValue, RegistryValueOptions options); // 0x009DB9D0-0x009DBD1C
		private int GetBinaryValue(RegistryKey rkey, string name, RegistryValueKind type, out byte[] data, int size); // 0x009DBE90-0x009DBF2C
		public int SubKeyCount(RegistryKey rkey); // 0x009DBF2C-0x009DBFB8
		public RegistryKey OpenSubKey(RegistryKey rkey, string keyName, bool writable); // 0x009DBFB8-0x009DC0D0
		public void Flush(RegistryKey rkey); // 0x009DC140-0x009DC170
		public void Close(RegistryKey rkey); // 0x009DC170-0x009DC1D0
		public string[] GetSubKeyNames(RegistryKey rkey); // 0x009DC1D0-0x009DC38C
		private void GenerateException(int errorCode); // 0x009DBD1C-0x009DBE90
		public string ToString(RegistryKey rkey); // 0x009DC400-0x009DC41C
		internal static string CombineName(RegistryKey rkey, string localName); // 0x009DC0D0-0x009DC140
	}

	internal static class Win32Native // TypeDefIndex: 68
	{
		// Nested types
		internal class WIN32_FIND_DATA // TypeDefIndex: 69
		{
			// Fields
			internal int dwFileAttributes; // 0x10
			internal string cFileName; // 0x18
	
			// Constructors
			public WIN32_FIND_DATA(); // 0x009DB08C-0x009DB094
		}
	
		// Methods
		public static string GetMessage(int hr); // 0x009DAF70-0x009DAFEC
		public static int MakeHRFromErrorCode(int errorCode); // 0x009DAFEC-0x009DAFF8
		internal static extern uint GetCurrentProcessId(); // 0x009DAFF8-0x009DB08C
	}
}

namespace Microsoft.Win32.SafeHandles
{
	public sealed class SafeFileHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 70
	{
		// Constructors
		public SafeFileHandle(IntPtr preexistingHandle, bool ownsHandle); // 0x009D9D44-0x009D9D70
	
		// Methods
		protected override bool ReleaseHandle(); // 0x009D9DCC-0x009D9E58
	}

	internal sealed class SafeFindHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 71
	{
		// Constructors
		internal SafeFindHandle(IntPtr preexistingHandle); // 0x009D9E58-0x009D9E84
	
		// Methods
		protected override bool ReleaseHandle(); // 0x009D9E84-0x009D9EF0
	}

	public sealed class SafeRegistryHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 72
	{
		// Constructors
		public SafeRegistryHandle(IntPtr preexistingHandle, bool ownsHandle); // 0x009D9504-0x009D9530
	
		// Methods
		protected override bool ReleaseHandle(); // 0x009D9F50-0x009D9F58
	}

	public sealed class SafeWaitHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 73
	{
		// Constructors
		[ReliabilityContract] // 0x004B9D94-0x004B9DAC
		public SafeWaitHandle(IntPtr existingHandle, bool ownsHandle); // 0x009D9F58-0x009D9F84
	
		// Methods
		protected override bool ReleaseHandle(); // 0x009D9F84-0x009D9FA4
	}

	public abstract class SafeHandleZeroOrMinusOneIsInvalid : SafeHandle // TypeDefIndex: 74
	{
		// Properties
		public override bool IsInvalid { get; } // 0x009D9EF0-0x009D9F50 
	
		// Constructors
		[ReliabilityContract] // 0x004B9DAC-0x004B9DC4
		protected SafeHandleZeroOrMinusOneIsInvalid(bool ownsHandle); // 0x009D9D70-0x009D9DCC
	}
}

namespace System
{
	internal static class ThrowHelper // TypeDefIndex: 75
	{
		// Methods
		internal static void ThrowArgumentNullException(ExceptionArgument argument); // 0x00916F7C-0x00916FCC
		private static Exception CreateArgumentNullException(ExceptionArgument argument); // 0x00916FCC-0x0091707C
		internal static void ThrowArgumentOutOfRangeException(); // 0x0091707C-0x00917090
		internal static void ThrowWrongValueTypeArgumentException(object value, Type targetType); // 0x00917168-0x0091726C
		internal static void ThrowArgumentException(ExceptionResource resource); // 0x0091726C-0x009172F0
		internal static void ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource); // 0x00917090-0x00917168
		internal static void ThrowInvalidOperationException(ExceptionResource resource); // 0x009173C8-0x0091744C
		internal static void ThrowNotSupportedException(ExceptionResource resource); // 0x0091744C-0x00917568
		internal static void IfNullAndNullsAreIllegalThenThrow<T>(object value, ExceptionArgument argName);
		internal static string GetArgumentName(ExceptionArgument argument); // 0x0091735C-0x009173C8
		internal static string GetResourceName(ExceptionResource resource); // 0x009172F0-0x0091735C
	}

	public abstract class Array : IList, IStructuralComparable, IStructuralEquatable, ICloneable // TypeDefIndex: 76
	{
		// Properties
		int ICollection.Count { get; } // 0x00C09518-0x00C0951C 
		bool IList.IsReadOnly { get; } // 0x00C09588-0x00C09590 
		object IList.this[int index] { get => default; set {} } // 0x00C09590-0x00C09594 0x00C09730-0x00C09740
		public long LongLength { get; } // 0x00C0B0C4-0x00C0B134 
		public bool IsFixedSize { get; } // 0x00C0B700-0x00C0B708 
		public bool IsReadOnly { get; } // 0x00C0B708-0x00C0B710 
		public bool IsSynchronized { get; } // 0x00C0B710-0x00C0B718 
		public object SyncRoot { get; } // 0x00C0B718-0x00C0B71C 
		public int Length { [ReliabilityContract] /* 0x004B9DC4-0x004B9DDC */ get; } // 0x00C0951C-0x00C09588 
		public int Rank { [ReliabilityContract] /* 0x004B9DDC-0x004B9DF4 */ get; } // 0x00C09DC8-0x00C09DCC 
	
		// Nested types
		private sealed class ArrayEnumerator : IEnumerator, ICloneable // TypeDefIndex: 77
		{
			// Fields
			private Array _array; // 0x10
			private int _index; // 0x18
			private int _endIndex; // 0x1C
	
			// Properties
			public object Current { get; } // 0x00C0D990-0x00C0DEE0 
	
			// Constructors
			internal ArrayEnumerator(Array array); // 0x00C0CF20-0x00C0CF6C
	
			// Methods
			public bool MoveNext(); // 0x00C0D954-0x00C0D97C
			public void Reset(); // 0x00C0D97C-0x00C0D988
			public object Clone(); // 0x00C0D988-0x00C0D990
		}
	
		internal struct InternalEnumerator<T> : IEnumerator<T> // TypeDefIndex: 78
		{
			// Fields
			private readonly Array array;
			private int idx;
	
			// Properties
			public T Current { get; }
			object IEnumerator.Current { get; }
	
			// Constructors
			internal InternalEnumerator(Array array);
	
			// Methods
			public void Dispose();
			public bool MoveNext();
			void IEnumerator.Reset();
		}
	
		internal class EmptyInternalEnumerator<T> : IEnumerator<T> // TypeDefIndex: 79
		{
			// Fields
			public static readonly EmptyInternalEnumerator<T> Value;
	
			// Properties
			public T Current { get; }
			object IEnumerator.Current { get; }
	
			// Constructors
			public EmptyInternalEnumerator();
			static EmptyInternalEnumerator();
	
			// Methods
			public void Dispose();
			public bool MoveNext();
			void IEnumerator.Reset();
		}
	
		private struct SorterObjectArray // TypeDefIndex: 80
		{
			// Fields
			private object[] keys; // 0x00
			private object[] items; // 0x08
			private IComparer comparer; // 0x10
	
			// Constructors
			internal SorterObjectArray(object[] keys, object[] items, IComparer comparer); // 0x0058E36C-0x0058E374
	
			// Methods
			internal void SwapIfGreaterWithItems(int a, int b); // 0x0058E374-0x0058E37C
			private void Swap(int i, int j); // 0x0058E37C-0x0058E384
			internal void Sort(int left, int length); // 0x0058E384-0x0058E38C
			private void IntrospectiveSort(int left, int length); // 0x0058E38C-0x0058E394
			private void IntroSort(int lo, int hi, int depthLimit); // 0x0058E394-0x0058E39C
			private int PickPivotAndPartition(int lo, int hi); // 0x0058E39C-0x0058E3A4
			private void Heapsort(int lo, int hi); // 0x0058E3A4-0x0058E3AC
			private void DownHeap(int i, int n, int lo); // 0x0058E3AC-0x0058E3B4
			private void InsertionSort(int lo, int hi); // 0x0058E3B4-0x0058E3BC
		}
	
		private struct SorterGenericArray // TypeDefIndex: 81
		{
			// Fields
			private Array keys; // 0x00
			private Array items; // 0x08
			private IComparer comparer; // 0x10
	
			// Constructors
			internal SorterGenericArray(Array keys, Array items, IComparer comparer); // 0x0058E2D8-0x0058E2E0
	
			// Methods
			internal void SwapIfGreaterWithItems(int a, int b); // 0x0058E2E0-0x0058E2E8
			private void Swap(int i, int j); // 0x0058E2E8-0x0058E2F0
			internal void Sort(int left, int length); // 0x0058E2F0-0x0058E2F8
			private void IntrospectiveSort(int left, int length); // 0x0058E2F8-0x0058E300
			private void IntroSort(int lo, int hi, int depthLimit); // 0x0058E300-0x0058E308
			private int PickPivotAndPartition(int lo, int hi); // 0x0058E308-0x0058E310
			private void Heapsort(int lo, int hi); // 0x0058E310-0x0058E318
			private void DownHeap(int i, int n, int lo); // 0x0058E318-0x0058E320
			private void InsertionSort(int lo, int hi); // 0x0058E320-0x0058E36C
		}
	
		// Constructors
		private Array(); // 0x00C0CF6C-0x00C0CF74
	
		// Methods
		public static Array CreateInstance(Type elementType, params /* 0x004BD140-0x004BD150 */ long[] lengths); // 0x00C09100-0x00C0928C
		public static ReadOnlyCollection<T> AsReadOnly<T>(T[] array);
		public static void Resize<T>(ref T[] array, int newSize);
		int IList.Add(object value); // 0x00C098EC-0x00C0995C
		bool IList.Contains(object value); // 0x00C0995C-0x00C09978
		void IList.Clear(); // 0x00C09A30-0x00C09A6C
		int IList.IndexOf(object value); // 0x00C09BA4-0x00C09BA8
		void IList.Insert(int index, object value); // 0x00C09BA8-0x00C09C18
		void IList.Remove(object value); // 0x00C09C18-0x00C09C88
		void IList.RemoveAt(int index); // 0x00C09C88-0x00C09CF8
		public void CopyTo(Array array, int index); // 0x00C09CF8-0x00C09DC8
		public object Clone(); // 0x00C0A2EC-0x00C0A2F4
		int IStructuralComparable.CompareTo(object other, IComparer comparer); // 0x00C0A2F4-0x00C0A4D4
		bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer); // 0x00C0A4D4-0x00C0A674
		internal static int CombineHashCodes(int h1, int h2); // 0x00C0A674-0x00C0A680
		int IStructuralEquatable.GetHashCode(IEqualityComparer comparer); // 0x00C0A680-0x00C0A7F8
		public static int BinarySearch(Array array, object value); // 0x00C0A7F8-0x00C0A8B4
		public static TOutput[] ConvertAll<TInput, TOutput>(TInput[] array, Converter<TInput, TOutput> converter);
		public static void Copy(Array sourceArray, Array destinationArray, long length); // 0x00C0AD48-0x00C0AE00
		public static void Copy(Array sourceArray, long sourceIndex, Array destinationArray, long destinationIndex, long length); // 0x00C0AEE4-0x00C0B00C
		public void CopyTo(Array array, long index); // 0x00C0B00C-0x00C0B0C4
		public static void ForEach<T>(T[] array, Action<T> action);
		public long GetLongLength(int dimension); // 0x00C0B138-0x00C0B150
		public object GetValue(long index); // 0x00C0B150-0x00C0B200
		public object GetValue(long index1, long index2); // 0x00C0B200-0x00C0B2E4
		public object GetValue(long index1, long index2, long index3); // 0x00C0B384-0x00C0B4A4
		public object GetValue(params /* 0x004BD150-0x004BD160 */ long[] indices); // 0x00C0B55C-0x00C0B6FC
		public static int BinarySearch(Array array, int index, int length, object value); // 0x00C0B71C-0x00C0B724
		public static int BinarySearch(Array array, object value, IComparer comparer); // 0x00C0B724-0x00C0B7E4
		public static int BinarySearch(Array array, int index, int length, object value, IComparer comparer); // 0x00C0A8B4-0x00C0AD48
		private static int GetMedian(int low, int hi); // 0x00C0B7E4-0x00C0B7F0
		public static int BinarySearch<T>(T[] array, T value);
		public static int BinarySearch<T>(T[] array, T value, IComparer<T> comparer);
		public static int BinarySearch<T>(T[] array, int index, int length, T value);
		public static int BinarySearch<T>(T[] array, int index, int length, T value, IComparer<T> comparer);
		public static int IndexOf(Array array, object value); // 0x00C09978-0x00C09A30
		public static int IndexOf(Array array, object value, int startIndex); // 0x00C0BA6C-0x00C0BB2C
		public static int IndexOf(Array array, object value, int startIndex, int count); // 0x00C0B7F0-0x00C0BA6C
		public static int IndexOf<T>(T[] array, T value);
		public static int IndexOf<T>(T[] array, T value, int startIndex);
		public static int IndexOf<T>(T[] array, T value, int startIndex, int count);
		public static int LastIndexOf(Array array, object value); // 0x00C0BB2C-0x00C0BBE0
		public static int LastIndexOf(Array array, object value, int startIndex); // 0x00C0BE60-0x00C0BF04
		public static int LastIndexOf(Array array, object value, int startIndex, int count); // 0x00C0BBE0-0x00C0BE60
		public static int LastIndexOf<T>(T[] array, T value);
		public static int LastIndexOf<T>(T[] array, T value, int startIndex);
		public static int LastIndexOf<T>(T[] array, T value, int startIndex, int count);
		public static void Reverse(Array array); // 0x00C0BF04-0x00C0BFAC
		public static void Reverse(Array array, int index, int length); // 0x00C0BFAC-0x00C0C260
		public static void Reverse<T>(T[] array);
		public static void Reverse<T>(T[] array, int index, int length);
		public void SetValue(object value, long index); // 0x00C0C260-0x00C0C318
		public void SetValue(object value, long index1, long index2); // 0x00C0C318-0x00C0C40C
		public void SetValue(object value, long index1, long index2, long index3); // 0x00C0C4BC-0x00C0C5E4
		public void SetValue(object value, params /* 0x004BD160-0x004BD170 */ long[] indices); // 0x00C0C6A4-0x00C0C84C
		public static void Sort(Array array); // 0x00C0C850-0x00C0C900
		public static void Sort(Array array, int index, int length); // 0x00C0CB44-0x00C0CB60
		public static void Sort(Array array, IComparer comparer); // 0x00C0CB60-0x00C0CC1C
		public static void Sort(Array array, int index, int length, IComparer comparer); // 0x00C0CC1C-0x00C0CC3C
		public static void Sort(Array keys, Array items); // 0x00C0CC3C-0x00C0CCF8
		public static void Sort(Array keys, Array items, IComparer comparer); // 0x00C0CCF8-0x00C0CDB8
		public static void Sort(Array keys, Array items, int index, int length); // 0x00C0CDB8-0x00C0CDC0
		public static void Sort(Array keys, Array items, int index, int length, IComparer comparer); // 0x00C0C900-0x00C0CB44
		public static void Sort<T>(T[] array);
		public static void Sort<T>(T[] array, int index, int length);
		public static void Sort<T>(T[] array, IComparer<T> comparer);
		public static void Sort<T>(T[] array, int index, int length, IComparer<T> comparer);
		public static void Sort<T>(T[] array, Comparison<T> comparison);
		public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items);
		public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length);
		public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, IComparer<TKey> comparer);
		public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length, IComparer<TKey> comparer);
		public static bool Exists<T>(T[] array, Predicate<T> match);
		public static void Fill<T>(T[] array, T value);
		public static void Fill<T>(T[] array, T value, int startIndex, int count);
		public static T Find<T>(T[] array, Predicate<T> match);
		public static T[] FindAll<T>(T[] array, Predicate<T> match);
		public static int FindIndex<T>(T[] array, Predicate<T> match);
		public static int FindIndex<T>(T[] array, int startIndex, Predicate<T> match);
		public static int FindIndex<T>(T[] array, int startIndex, int count, Predicate<T> match);
		public static T FindLast<T>(T[] array, Predicate<T> match);
		public static int FindLastIndex<T>(T[] array, Predicate<T> match);
		public static int FindLastIndex<T>(T[] array, int startIndex, Predicate<T> match);
		public static int FindLastIndex<T>(T[] array, int startIndex, int count, Predicate<T> match);
		public static bool TrueForAll<T>(T[] array, Predicate<T> match);
		public IEnumerator GetEnumerator(); // 0x00C0CEC0-0x00C0CF20
		internal int InternalArray__ICollection_get_Count(); // 0x00C0CF74-0x00C0CF78
		internal bool InternalArray__ICollection_get_IsReadOnly(); // 0x00C0CF78-0x00C0CF80
		internal IEnumerator<T> InternalArray__IEnumerable_GetEnumerator<T>();
		internal void InternalArray__ICollection_Clear(); // 0x00C0CF80-0x00C0CFF0
		internal void InternalArray__ICollection_Add<T>(T item);
		internal bool InternalArray__ICollection_Remove<T>(T item);
		internal bool InternalArray__ICollection_Contains<T>(T item);
		internal void InternalArray__ICollection_CopyTo<T>(T[] array, int arrayIndex);
		internal T InternalArray__IReadOnlyList_get_Item<T>(int index);
		internal int InternalArray__IReadOnlyCollection_get_Count(); // 0x00C0CFF0-0x00C0CFF4
		internal void InternalArray__Insert<T>(int index, T item);
		internal void InternalArray__RemoveAt(int index); // 0x00C0CFF4-0x00C0D064
		internal int InternalArray__IndexOf<T>(T item);
		internal T InternalArray__get_Item<T>(int index);
		internal void InternalArray__set_Item<T>(int index, T item);
		internal void GetGenericValueImpl<T>(int pos, out T value);
		internal void SetGenericValueImpl<T>(int pos, ref T value);
		private int GetRank(); // 0x00C0D064-0x00C0D068
		public int GetLength(int dimension); // 0x00C0B134-0x00C0B138
		[ReliabilityContract] // 0x004B9DF4-0x004B9E0C
		public int GetLowerBound(int dimension); // 0x00C09A6C-0x00C09A70
		public object GetValue(params /* 0x004BD170-0x004BD180 */ int[] indices); // 0x00C0B6FC-0x00C0B700
		public void SetValue(object value, params /* 0x004BD180-0x004BD190 */ int[] indices); // 0x00C0C84C-0x00C0C850
		internal object GetValueImpl(int pos); // 0x00C0D068-0x00C0D06C
		internal void SetValueImpl(object value, int pos); // 0x00C0D06C-0x00C0D070
		internal static bool FastCopy(Array source, int source_idx, Array dest, int dest_idx, int length); // 0x00C0D070-0x00C0D074
		internal static Array CreateInstanceImpl(Type elementType, int[] lengths, int[] bounds); // 0x00C0D074-0x00C0D078
		[ReliabilityContract] // 0x004B9E0C-0x004B9E24
		public int GetUpperBound(int dimension); // 0x00C0D078-0x00C0D0BC
		public object GetValue(int index); // 0x00C09594-0x00C09730
		public object GetValue(int index1, int index2); // 0x00C0B2E4-0x00C0B384
		public object GetValue(int index1, int index2, int index3); // 0x00C0B4A4-0x00C0B55C
		public void SetValue(object value, int index); // 0x00C09740-0x00C098EC
		public void SetValue(object value, int index1, int index2); // 0x00C0C40C-0x00C0C4BC
		public void SetValue(object value, int index1, int index2, int index3); // 0x00C0C5E4-0x00C0C6A4
		internal static Array UnsafeCreateInstance(Type elementType, int[] lengths, int[] lowerBounds); // 0x00C0D0BC-0x00C0D0C0
		internal static Array UnsafeCreateInstance(Type elementType, int length1, int length2); // 0x00C0D488-0x00C0D48C
		internal static Array UnsafeCreateInstance(Type elementType, params /* 0x004BD190-0x004BD1A0 */ int[] lengths); // 0x00C0D52C-0x00C0D530
		public static Array CreateInstance(Type elementType, int length); // 0x00C0D530-0x00C0D5C0
		public static Array CreateInstance(Type elementType, int length1, int length2); // 0x00C0D48C-0x00C0D52C
		public static Array CreateInstance(Type elementType, int length1, int length2, int length3); // 0x00C0D5C0-0x00C0D678
		public static Array CreateInstance(Type elementType, params /* 0x004BD1A0-0x004BD1B0 */ int[] lengths); // 0x00C0928C-0x00C09518
		public static Array CreateInstance(Type elementType, int[] lengths, int[] lowerBounds); // 0x00C0D0C0-0x00C0D488
		[ReliabilityContract] // 0x004B9E24-0x004B9E3C
		public static void Clear(Array array, int index, int length); // 0x00C09A70-0x00C09BA4
		private static void ClearInternal(Array a, int index, int count); // 0x00C0D678-0x00C0D67C
		[ReliabilityContract] // 0x004B9E3C-0x004B9E54
		public static void Copy(Array sourceArray, Array destinationArray, int length); // 0x00C0AE00-0x00C0AEE4
		[ReliabilityContract] // 0x004B9E54-0x004B9E6C
		public static void Copy(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length); // 0x00C09DCC-0x00C0A2EC
		private static Exception CreateArrayTypeMismatchException(); // 0x00C0D67C-0x00C0D6D4
		private static bool CanAssignArrayElement(Type source, Type target); // 0x00C0D6D4-0x00C0D7A8
		[ReliabilityContract] // 0x004B9E6C-0x004B9E84
		public static void ConstrainedCopy(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length); // 0x00C0D81C-0x00C0D820
		public static T[] Empty<T>();
		public void Initialize(); // 0x00C0D820-0x00C0D954
		private static int IndexOfImpl<T>(T[] array, T value, int startIndex, int count);
		private static int LastIndexOfImpl<T>(T[] array, T value, int startIndex, int count);
		private static void SortImpl(Array keys, Array items, int index, int length, IComparer comparer); // 0x00C0CDC0-0x00C0CEC0
		internal static T UnsafeLoad<T>(T[] array, int index);
		internal static void UnsafeStore<T>(T[] array, int index, T value);
		internal static R UnsafeMov<S, R>(S instance);
	}

	internal interface ITupleInternal // TypeDefIndex: 82
	{
		// Methods
		string ToString(StringBuilder sb);
	}

	public static class Tuple // TypeDefIndex: 83
	{
		// Methods
		public static Tuple<T1, T2> Create<T1, T2>(T1 item1, T2 item2);
		internal static int CombineHashCodes(int h1, int h2); // 0x00E7F93C-0x00E7F948
		internal static int CombineHashCodes(int h1, int h2, int h3); // 0x00E7F948-0x00E7F95C
	}

	[Serializable]
	public class Tuple<T1, T2> : IStructuralEquatable, IStructuralComparable, IComparable, ITupleInternal // TypeDefIndex: 84
	{
		// Fields
		private readonly T1 m_Item1;
		private readonly T2 m_Item2;
	
		// Properties
		public T1 Item1 { get; }
		public T2 Item2 { get; }
	
		// Constructors
		public Tuple(T1 item1, T2 item2);
	
		// Methods
		public override bool Equals(object obj);
		bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer);
		int IComparable.CompareTo(object obj);
		int IStructuralComparable.CompareTo(object other, IComparer comparer);
		public override int GetHashCode();
		int IStructuralEquatable.GetHashCode(IEqualityComparer comparer);
		public override string ToString();
		string ITupleInternal.ToString(StringBuilder sb);
	}

	[Serializable]
	public class Tuple<T1, T2, T3> : IStructuralEquatable, IStructuralComparable, IComparable, ITupleInternal // TypeDefIndex: 85
	{
		// Fields
		private readonly T1 m_Item1;
		private readonly T2 m_Item2;
		private readonly T3 m_Item3;
	
		// Properties
		public T1 Item1 { get; }
		public T2 Item2 { get; }
		public T3 Item3 { get; }
	
		// Constructors
		public Tuple(T1 item1, T2 item2, T3 item3);
	
		// Methods
		public override bool Equals(object obj);
		bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer);
		int IComparable.CompareTo(object obj);
		int IStructuralComparable.CompareTo(object other, IComparer comparer);
		public override int GetHashCode();
		int IStructuralEquatable.GetHashCode(IEqualityComparer comparer);
		public override string ToString();
		string ITupleInternal.ToString(StringBuilder sb);
	}

	[Serializable]
	public class Tuple<T1, T2, T3, T4> // TypeDefIndex: 86
	{
		// Fields
		private readonly T1 m_Item1;
		private readonly T2 m_Item2;
		private readonly T3 m_Item3;
		private readonly T4 m_Item4;
	
		// Properties
		public T1 Item1 { get; }
		public T2 Item2 { get; }
		public T3 Item3 { get; }
		public T4 Item4 { get; }
	
		// Methods
		public override bool Equals(object obj);
		public override int GetHashCode();
		public override string ToString();
	}

	[AttributeUsage] // 0x004B20D0-0x004B2108
	internal class MonoTODOAttribute : Attribute // TypeDefIndex: 87
	{
		// Fields
		private string comment; // 0x10
	
		// Constructors
		public MonoTODOAttribute(); // 0x008FCF90-0x008FCF98
		public MonoTODOAttribute(string comment); // 0x008FCF5C-0x008FCF88
	}

	[AttributeUsage] // 0x004B2108-0x004B2140
	internal class MonoLimitationAttribute : MonoTODOAttribute // TypeDefIndex: 88
	{
		// Constructors
		public MonoLimitationAttribute(string comment); // 0x008FCF30-0x008FCF5C
	}

	[Serializable]
	[DebuggerDisplay] // 0x004B2140-0x004B2178
	public class AggregateException : Exception // TypeDefIndex: 89
	{
		// Fields
		private ReadOnlyCollection<Exception> m_innerExceptions; // 0x88
	
		// Properties
		public ReadOnlyCollection<Exception> InnerExceptions { get; } // 0x009E9A94-0x009E9A9C 
	
		// Constructors
		public AggregateException(); // 0x009E8BDC-0x009E8CB8
		public AggregateException(IEnumerable<Exception> innerExceptions); // 0x009E8CB8-0x009E8D24
		public AggregateException(params /* 0x004BD1B0-0x004BD1C0 */ Exception[] innerExceptions); // 0x009E8DDC-0x009E8E48
		public AggregateException(string message, IEnumerable<Exception> innerExceptions); // 0x009E8D24-0x009E8DDC
		public AggregateException(string message, params /* 0x004BD1C0-0x004BD1D0 */ Exception[] innerExceptions); // 0x009E8E48-0x009E8E4C
		private AggregateException(string message, IList<Exception> innerExceptions); // 0x009E8E4C-0x009E920C
		internal AggregateException(IEnumerable<ExceptionDispatchInfo> innerExceptionInfos); // 0x009E920C-0x009E9278
		internal AggregateException(string message, IEnumerable<ExceptionDispatchInfo> innerExceptionInfos); // 0x009E9278-0x009E9330
		private AggregateException(string message, IList<ExceptionDispatchInfo> innerExceptionInfos); // 0x009E9330-0x009E9768
		protected AggregateException(SerializationInfo info, StreamingContext context); // 0x009E9768-0x009E9928
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x009E9928-0x009E9A94
		public AggregateException Flatten(); // 0x009E9A9C-0x009E9D48
		public override string ToString(); // 0x009E9D48-0x009E9FF8
	}

	internal static class AppContextSwitches // TypeDefIndex: 90
	{
		// Fields
		public static readonly bool ThrowExceptionIfDisposedCancellationTokenSource; // 0x00
		public static readonly bool PreserveEventListnerObjectIdentity; // 0x01
	}

	[Serializable]
	internal class __Filters // TypeDefIndex: 91
	{
		// Fields
		internal static readonly __Filters Instance; // 0x00
	
		// Constructors
		public __Filters(); // 0x00E8D74C-0x00E8D754
		static __Filters(); // 0x00E8D754-0x00E8D7B8
	
		// Methods
		internal virtual bool FilterAttribute(MemberInfo m, object filterCriteria); // 0x00E8D090-0x00E8D3F8
		internal virtual bool FilterName(MemberInfo m, object filterCriteria); // 0x00E8D3F8-0x00E8D598
		internal virtual bool FilterIgnoreCase(MemberInfo m, object filterCriteria); // 0x00E8D598-0x00E8D74C
	}

	internal sealed class LocalDataStoreHolder // TypeDefIndex: 92
	{
		// Fields
		private LocalDataStore m_Store; // 0x10
	
		// Properties
		public LocalDataStore Store { get; } // 0x008F8C60-0x008F8C68 
	
		// Constructors
		public LocalDataStoreHolder(LocalDataStore store); // 0x008F8BC0-0x008F8BEC
	
		// Methods
		~LocalDataStoreHolder(); // 0x008F8BEC-0x008F8C60
	}

	internal sealed class LocalDataStoreElement // TypeDefIndex: 93
	{
		// Fields
		private object m_value; // 0x10
		private long m_cookie; // 0x18
	
		// Properties
		public object Value { get; set; } // 0x008F8BA8-0x008F8BB0 0x008F8BB0-0x008F8BB8
		public long Cookie { get; } // 0x008F8BB8-0x008F8BC0 
	
		// Constructors
		public LocalDataStoreElement(long cookie); // 0x008F8B7C-0x008F8BA8
	}

	internal sealed class LocalDataStore // TypeDefIndex: 94
	{
		// Fields
		private LocalDataStoreElement[] m_DataTable; // 0x10
		private LocalDataStoreMgr m_Manager; // 0x18
	
		// Constructors
		public LocalDataStore(LocalDataStoreMgr mgr, int InitialCapacity); // 0x008F839C-0x008F8414
	
		// Methods
		internal void Dispose(); // 0x008F8414-0x008F8434
		public object GetData(LocalDataStoreSlot slot); // 0x008F8518-0x008F8630
		public void SetData(LocalDataStoreSlot slot, object data); // 0x008F86E0-0x008F8804
		internal void FreeData(int slot, long cookie); // 0x008F8B00-0x008F8B5C
		private LocalDataStoreElement PopulateElement(LocalDataStoreSlot slot); // 0x008F8804-0x008F8B00
	}

	[ComVisible] // 0x004B2178-0x004B218C
	public sealed class LocalDataStoreSlot // TypeDefIndex: 95
	{
		// Fields
		private LocalDataStoreMgr m_mgr; // 0x10
		private int m_slot; // 0x18
		private long m_cookie; // 0x20
	
		// Properties
		internal LocalDataStoreMgr Manager { get; } // 0x008F9598-0x008F95A0 
		internal int Slot { get; } // 0x008F95A0-0x008F95A8 
		internal long Cookie { get; } // 0x008F95A8-0x008F95B0 
	
		// Constructors
		internal LocalDataStoreSlot(LocalDataStoreMgr mgr, int slot, long cookie); // 0x008F9004-0x008F9048
	
		// Methods
		~LocalDataStoreSlot(); // 0x008F95B0-0x008F9634
	}

	internal sealed class LocalDataStoreMgr // TypeDefIndex: 96
	{
		// Fields
		private bool[] m_SlotInfoTable; // 0x10
		private int m_FirstAvailableSlot; // 0x18
		private List<LocalDataStore> m_ManagedLocalDataStores; // 0x20
		private Dictionary<string, LocalDataStoreSlot> m_KeyToSlotMap; // 0x28
		private long m_CookieGenerator; // 0x30
	
		// Constructors
		public LocalDataStoreMgr(); // 0x008F94E8-0x008F9598
	
		// Methods
		public LocalDataStoreHolder CreateLocalDataStore(); // 0x008F8C68-0x008F8DA8
		public void DeleteLocalDataStore(LocalDataStore store); // 0x008F8434-0x008F8518
		public LocalDataStoreSlot AllocateDataSlot(); // 0x008F8DA8-0x008F9004
		public LocalDataStoreSlot AllocateNamedDataSlot(string name); // 0x008F9048-0x008F914C
		public LocalDataStoreSlot GetNamedDataSlot(string name); // 0x008F914C-0x008F9278
		public void FreeNamedDataSlot(string name); // 0x008F9278-0x008F935C
		internal void FreeDataSlot(int slot, long cookie); // 0x008F935C-0x008F94E8
		public void ValidateSlot(LocalDataStoreSlot slot); // 0x008F8630-0x008F86E0
		internal int GetSlotTableLength(); // 0x008F8B5C-0x008F8B7C
	}

	public delegate void Action<in T>(T obj); // TypeDefIndex: 97; 0x00000000-0x00000000

	[TypeForwardedFrom] // 0x004B218C-0x004B21C4
	public delegate void Action(); // TypeDefIndex: 98; 0x009E8550-0x009E876C

	[TypeForwardedFrom] // 0x004B21C4-0x004B21FC
	public delegate void Action<in T1, in T2>(T1 arg1, T2 arg2); // TypeDefIndex: 99; 0x00000000-0x00000000

	[TypeForwardedFrom] // 0x004B21FC-0x004B2234
	public delegate void Action<in T1, in T2, in T3>(T1 arg1, T2 arg2, T3 arg3); // TypeDefIndex: 100; 0x00000000-0x00000000

	[TypeForwardedFrom] // 0x004B2234-0x004B226C
	public delegate void Action<in T1, in T2, in T3, in T4>(T1 arg1, T2 arg2, T3 arg3, T4 arg4); // TypeDefIndex: 101; 0x00000000-0x00000000

	[TypeForwardedFrom] // 0x004B226C-0x004B22A4
	public delegate TResult Func<out TResult>(); // TypeDefIndex: 102; 0x00000000-0x00000000

	[TypeForwardedFrom] // 0x004B22A4-0x004B22DC
	public delegate TResult Func<in T, out TResult>(T arg); // TypeDefIndex: 103; 0x00000000-0x00000000

	[TypeForwardedFrom] // 0x004B22DC-0x004B2314
	public delegate TResult Func<in T1, in T2, out TResult>(T1 arg1, T2 arg2); // TypeDefIndex: 104; 0x00000000-0x00000000

	[TypeForwardedFrom] // 0x004B2314-0x004B234C
	public delegate TResult Func<in T1, in T2, in T3, out TResult>(T1 arg1, T2 arg2, T3 arg3); // TypeDefIndex: 105; 0x00000000-0x00000000

	public delegate int Comparison<in T>(T x, T y); // TypeDefIndex: 106; 0x00000000-0x00000000

	public delegate TOutput Converter<in TInput, out TOutput>(TInput input); // TypeDefIndex: 107; 0x00000000-0x00000000

	public delegate bool Predicate<in T>(T obj); // TypeDefIndex: 108; 0x00000000-0x00000000

	[ClassInterface] // 0x004B234C-0x004B23D8
	[ComDefaultInterface] // 0x004B234C-0x004B23D8
	[ComVisible] // 0x004B234C-0x004B23D8
	public sealed class Activator // TypeDefIndex: 109
	{
		// Methods
		public static object CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture); // 0x009E87AC-0x009E87B4
		public static object CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes); // 0x009E87B4-0x009E89D8
		public static object CreateInstance(Type type, params /* 0x004BD1D0-0x004BD1E0 */ object[] args); // 0x009E8A14-0x009E8A30
		public static object CreateInstance(Type type); // 0x009E8A30-0x009E8A38
		public static object CreateInstance(Type type, bool nonPublic); // 0x009E8A38-0x009E8BDC
		public static T CreateInstance<T>();
	}

	[Serializable]
	[ComVisible] // 0x004B23D8-0x004B23EC
	public class AppDomainUnloadedException : SystemException // TypeDefIndex: 110
	{
		// Constructors
		public AppDomainUnloadedException(); // 0x009EB248-0x009EB2BC
		protected AppDomainUnloadedException(SerializationInfo info, StreamingContext context); // 0x009EB2BC-0x009EB2C4
	}

	[Serializable]
	[ComVisible] // 0x004B23EC-0x004B2400
	public class ApplicationException : Exception // TypeDefIndex: 111
	{
		// Constructors
		public ApplicationException(); // 0x009EB2C4-0x009EB360
		public ApplicationException(string message); // 0x009EB360-0x009EB3EC
		public ApplicationException(string message, Exception innerException); // 0x009EB3EC-0x009EB480
		protected ApplicationException(SerializationInfo info, StreamingContext context); // 0x009EB480-0x009EB58C
	}

	[Serializable]
	[ComVisible] // 0x004B2400-0x004B2414
	public class ArgumentException : SystemException, ISerializable // TypeDefIndex: 112
	{
		// Fields
		private string m_paramName; // 0x88
	
		// Properties
		public override string Message { get; } // 0x009EB65C-0x009EB770 
	
		// Constructors
		public ArgumentException(); // 0x009DC38C-0x009DC400
		public ArgumentException(string message); // 0x009D9A9C-0x009D9AD0
		public ArgumentException(string message, Exception innerException); // 0x009EB58C-0x009EB5C0
		public ArgumentException(string message, string paramName); // 0x009E89D8-0x009E8A14
		protected ArgumentException(SerializationInfo info, StreamingContext context); // 0x009EB5C0-0x009EB65C
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x009EB770-0x009EB87C
	}

	[Serializable]
	[ComVisible] // 0x004B2414-0x004B2428
	public class ArgumentNullException : ArgumentException // TypeDefIndex: 113
	{
		// Constructors
		public ArgumentNullException(); // 0x009EB87C-0x009EB904
		public ArgumentNullException(string paramName); // 0x009D9680-0x009D9718
		public ArgumentNullException(string paramName, string message); // 0x009EB904-0x009EB958
		protected ArgumentNullException(SerializationInfo info, StreamingContext context); // 0x009EB958-0x009EB95C
	}

	[Serializable]
	[ComVisible] // 0x004B2428-0x004B243C
	public class ArgumentOutOfRangeException : ArgumentException, ISerializable // TypeDefIndex: 114
	{
		// Fields
		private static string _rangeMessage; // 0x00
		private object m_actualValue; // 0x90
	
		// Properties
		private static string RangeMessage { get; } // 0x009EB95C-0x009EB9F0 
		public override string Message { get; } // 0x009EBB04-0x009EBC2C 
	
		// Constructors
		public ArgumentOutOfRangeException(); // 0x009EB9F0-0x009EBA44
		public ArgumentOutOfRangeException(string paramName); // 0x009EBA44-0x009EBAA0
		public ArgumentOutOfRangeException(string paramName, string message); // 0x009E550C-0x009E5560
		public ArgumentOutOfRangeException(string paramName, object actualValue, string message); // 0x009EBAA0-0x009EBB04
		protected ArgumentOutOfRangeException(SerializationInfo info, StreamingContext context); // 0x009EBD34-0x009ECE08
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x009EBC2C-0x009EBD34
	}

	[Serializable]
	[ComVisible] // 0x004B243C-0x004B2450
	public class ArithmeticException : SystemException // TypeDefIndex: 115
	{
		// Constructors
		public ArithmeticException(); // 0x00C0901C-0x00C09090
		public ArithmeticException(string message); // 0x00C09090-0x00C090C4
		public ArithmeticException(string message, Exception innerException); // 0x00C090C4-0x00C090F8
		protected ArithmeticException(SerializationInfo info, StreamingContext context); // 0x00C090F8-0x00C09100
	}

	[Serializable]
	public struct ArraySegment<T> : IList<T>, IReadOnlyList<T> // TypeDefIndex: 116
	{
		// Fields
		private T[] _array;
		private int _offset;
		private int _count;
	
		// Properties
		public T[] Array { get; }
		public int Offset { get; }
		public int Count { get; }
		T IList<T>.this[int index] { get => default; set {} }
		T IReadOnlyList<T>.this[int index] { get => default; }
		bool ICollection<T>.IsReadOnly { get; }
	
		// Nested types
		[Serializable]
		private sealed class ArraySegmentEnumerator : IEnumerator<T> // TypeDefIndex: 117
		{
			// Fields
			private T[] _array;
			private int _start;
			private int _end;
			private int _current;
	
			// Properties
			public T Current { get; }
			object IEnumerator.Current { get; }
	
			// Constructors
			internal ArraySegmentEnumerator(ArraySegment<T> arraySegment);
	
			// Methods
			public bool MoveNext();
			void IEnumerator.Reset();
			public void Dispose();
		}
	
		// Constructors
		public ArraySegment(T[] array, int offset, int count);
	
		// Methods
		public override int GetHashCode();
		public override bool Equals(object obj);
		public bool Equals(ArraySegment<T> obj);
		int IList<T>.IndexOf(T item);
		void IList<T>.Insert(int index, T item);
		void IList<T>.RemoveAt(int index);
		void ICollection<T>.Add(T item);
		void ICollection<T>.Clear();
		bool ICollection<T>.Contains(T item);
		void ICollection<T>.CopyTo(T[] array, int arrayIndex);
		bool ICollection<T>.Remove(T item);
		IEnumerator<T> IEnumerable<T>.GetEnumerator();
		IEnumerator IEnumerable.GetEnumerator();
	}

	[Serializable]
	[ComVisible] // 0x004B2450-0x004B2464
	public class ArrayTypeMismatchException : SystemException // TypeDefIndex: 118
	{
		// Constructors
		public ArrayTypeMismatchException(); // 0x00C0D7A8-0x00C0D81C
		protected ArrayTypeMismatchException(SerializationInfo info, StreamingContext context); // 0x00C0FA28-0x00C0FA30
	}

	[Serializable]
	[ComVisible] // 0x004B2464-0x004B2478
	public delegate void AsyncCallback(IAsyncResult ar); // TypeDefIndex: 119; 0x00C0FEE8-0x00C1029C

	[Serializable]
	[AttributeUsage] // 0x004B2478-0x004B24B0
	public abstract class Attribute // TypeDefIndex: 120
	{
		// Constructors
		protected Attribute(); // 0x00C10ECC-0x00C10ED4
	
		// Methods
		private static Attribute[] InternalGetCustomAttributes(PropertyInfo element, Type type, bool inherit); // 0x00C102CC-0x00C10380
		private static Attribute[] InternalGetCustomAttributes(EventInfo element, Type type, bool inherit); // 0x00C10380-0x00C10434
		private static bool InternalIsDefined(PropertyInfo element, Type attributeType, bool inherit); // 0x00C10434-0x00C104B4
		private static bool InternalIsDefined(EventInfo element, Type attributeType, bool inherit); // 0x00C104B4-0x00C10534
		public static Attribute[] GetCustomAttributes(MemberInfo element, Type type, bool inherit); // 0x00C10534-0x00C10810
		public static bool IsDefined(MemberInfo element, Type attributeType); // 0x00C10810-0x00C10818
		public static bool IsDefined(MemberInfo element, Type attributeType, bool inherit); // 0x00C10818-0x00C10AE4
		public static Attribute GetCustomAttribute(MemberInfo element, Type attributeType); // 0x00C10AE4-0x00C10AEC
		public static Attribute GetCustomAttribute(MemberInfo element, Type attributeType, bool inherit); // 0x00C10AEC-0x00C10BC0
		public static Attribute[] GetCustomAttributes(Assembly element, Type attributeType, bool inherit); // 0x00C10BC0-0x00C10DF0
		public static Attribute GetCustomAttribute(Assembly element, Type attributeType); // 0x00C10DF0-0x00C10DF8
		public static Attribute GetCustomAttribute(Assembly element, Type attributeType, bool inherit); // 0x00C10DF8-0x00C10ECC
		public override bool Equals(object obj); // 0x00C10ED4-0x00C1117C
		private static bool AreFieldValuesEqual(object thisValue, object thatValue); // 0x00C1117C-0x00C1134C
		public override int GetHashCode(); // 0x00C1134C-0x00C114B8
	}

	[Serializable]
	[ComVisible] // 0x004B24B0-0x004B24EC
	[Flags] // 0x004B24B0-0x004B24EC
	public enum AttributeTargets // TypeDefIndex: 121
	{
		Assembly = 1,
		Module = 2,
		Class = 4,
		Struct = 8,
		Enum = 16,
		Constructor = 32,
		Method = 64,
		Property = 128,
		Field = 256,
		Event = 512,
		Interface = 1024,
		Parameter = 2048,
		Delegate = 4096,
		ReturnValue = 8192,
		GenericParameter = 16384,
		All = 32767
	}

	[Serializable]
	[AttributeUsage] // 0x004B24EC-0x004B253C
	[ComVisible] // 0x004B24EC-0x004B253C
	public sealed class AttributeUsageAttribute : Attribute // TypeDefIndex: 122
	{
		// Fields
		internal AttributeTargets m_attributeTarget; // 0x10
		internal bool m_allowMultiple; // 0x14
		internal bool m_inherited; // 0x15
		internal static AttributeUsageAttribute Default; // 0x00
	
		// Properties
		public bool AllowMultiple { get; set; } // 0x00C114F4-0x00C114FC 0x00C114FC-0x00C11508
		public bool Inherited { get; set; } // 0x00C11508-0x00C11510 0x00C11510-0x00C1151C
	
		// Constructors
		public AttributeUsageAttribute(AttributeTargets validOn); // 0x00C114B8-0x00C114F4
		static AttributeUsageAttribute(); // 0x00C1151C-0x00C1159C
	}

	[Serializable]
	[ComVisible] // 0x004B253C-0x004B2550
	public class BadImageFormatException : SystemException // TypeDefIndex: 123
	{
		// Fields
		private string _fileName; // 0x88
		private string _fusionLog; // 0x90
	
		// Properties
		public override string Message { get; } // 0x00C116B8-0x00C116DC 
		public string FusionLog { get; } // 0x00C11B54-0x00C11B5C 
	
		// Constructors
		public BadImageFormatException(); // 0x00C1159C-0x00C11610
		public BadImageFormatException(string message); // 0x00C11610-0x00C11644
		public BadImageFormatException(string message, Exception inner); // 0x00C11644-0x00C11678
		public BadImageFormatException(string message, string fileName); // 0x00C11678-0x00C116B8
		protected BadImageFormatException(SerializationInfo info, StreamingContext context); // 0x00C11A28-0x00C11B54
	
		// Methods
		private void SetMessageField(); // 0x00C116DC-0x00C11764
		public override string ToString(); // 0x00C11764-0x00C11A28
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00C11B5C-0x00C11D04
	}

	public static class BitConverter // TypeDefIndex: 124
	{
		// Fields
		public static readonly bool IsLittleEndian; // 0x00
	
		// Constructors
		static BitConverter(); // 0x00C12868-0x00C12B44
	
		// Methods
		private static bool AmILittleEndian(); // 0x00C11D04-0x00C11D0C
		public static byte[] GetBytes(short value); // 0x00C11D0C-0x00C11D84
		public static byte[] GetBytes(int value); // 0x00C11D84-0x00C11DFC
		public static short ToInt16(byte[] value, int startIndex); // 0x00C11DFC-0x00C11F14
		public static int ToInt32(byte[] value, int startIndex); // 0x00C11F14-0x00C12048
		public static long ToInt64(byte[] value, int startIndex); // 0x00C12048-0x00C121A8
		[CLSCompliant] // 0x004B9E84-0x004B9E98
		public static ushort ToUInt16(byte[] value, int startIndex); // 0x00C121A8-0x00C12270
		[CLSCompliant] // 0x004B9E98-0x004B9EAC
		public static uint ToUInt32(byte[] value, int startIndex); // 0x00C12270-0x00C12338
		[CLSCompliant] // 0x004B9EAC-0x004B9EC0
		public static ulong ToUInt64(byte[] value, int startIndex); // 0x00C12338-0x00C12400
		private static char GetHexValue(int i); // 0x00C12400-0x00C12418
		public static string ToString(byte[] value, int startIndex, int length); // 0x00C12418-0x00C127A8
		public static string ToString(byte[] value); // 0x00C127A8-0x00C12858
		public static long DoubleToInt64Bits(double value); // 0x00C12858-0x00C12860
		public static double Int64BitsToDouble(long value); // 0x00C12860-0x00C12868
	}

	[Serializable]
	[ComVisible] // 0x004B2550-0x004B2564
	public struct Boolean : IComparable, IConvertible, IComparable<bool>, IEquatable<bool> // TypeDefIndex: 125
	{
		// Fields
		private bool m_value; // 0x00
		internal const int True = 1; // Metadata: 0x001DF2E4
		internal const int False = 0; // Metadata: 0x001DF2E8
		internal const string TrueLiteral = "True"; // Metadata: 0x001DF2EC
		internal const string FalseLiteral = "False"; // Metadata: 0x001DF2F4
		public static readonly string TrueString; // 0x00
		public static readonly string FalseString; // 0x08
	
		// Constructors
		static Boolean(); // 0x00C1377C-0x00C137F0
	
		// Methods
		public override int GetHashCode(); // 0x0058E3BC-0x0058E3CC
		public override string ToString(); // 0x0058E3CC-0x0058E42C
		public string ToString(IFormatProvider provider); // 0x0058E42C-0x0058E48C
		public override bool Equals(object obj); // 0x0058E48C-0x0058E494
		public bool Equals(bool obj); // 0x0058E494-0x0058E4A8
		public int CompareTo(object obj); // 0x0058E4A8-0x0058E4B0
		public int CompareTo(bool value); // 0x0058E4B0-0x0058E4D0
		public static bool Parse(string value); // 0x00C12B44-0x00C12C60
		public static bool TryParse(string value, out bool result); // 0x00C12C60-0x00C12D8C
		private static string TrimWhiteSpaceAndNull(string value); // 0x00C12D8C-0x00C12EEC
		public TypeCode GetTypeCode(); // 0x0058E4D0-0x0058E4D8
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x0058E4D8-0x0058E4E8
		char IConvertible.ToChar(IFormatProvider provider); // 0x0058E4E8-0x0058E4F4
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x0058E4F4-0x0058E4FC
		byte IConvertible.ToByte(IFormatProvider provider); // 0x0058E4FC-0x0058E504
		short IConvertible.ToInt16(IFormatProvider provider); // 0x0058E504-0x0058E50C
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x0058E50C-0x0058E514
		int IConvertible.ToInt32(IFormatProvider provider); // 0x0058E514-0x0058E51C
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x0058E51C-0x0058E524
		long IConvertible.ToInt64(IFormatProvider provider); // 0x0058E524-0x0058E52C
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x0058E52C-0x0058E534
		float IConvertible.ToSingle(IFormatProvider provider); // 0x0058E534-0x0058E53C
		double IConvertible.ToDouble(IFormatProvider provider); // 0x0058E53C-0x0058E544
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x0058E544-0x0058E54C
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x0058E54C-0x0058E558
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x0058E558-0x0058E560
	}

	[ComVisible] // 0x004B2564-0x004B2578
	public static class Buffer // TypeDefIndex: 126
	{
		// Methods
		internal static bool InternalBlockCopy(Array src, int srcOffsetBytes, Array dst, int dstOffsetBytes, int byteCount); // 0x00C137F0-0x00C137F4
		internal static unsafe int IndexOfByte(byte* src, byte value, int index, int count); // 0x00C137F4-0x00C13920
		private static int _ByteLength(Array array); // 0x00C13920-0x00C13924
		internal static unsafe void ZeroMemory(byte* src, long len); // 0x00C13924-0x00C13948
		[ReliabilityContract] // 0x004B9EC0-0x004B9ED8
		internal static unsafe void Memcpy(byte[] dest, int destIndex, byte* src, int srcIndex, int len); // 0x00C13948-0x00C13978
		[ReliabilityContract] // 0x004B9ED8-0x004B9EF0
		internal static unsafe void Memcpy(byte* pDest, int destIndex, byte[] src, int srcIndex, int len); // 0x00C139D4-0x00C13A04
		public static int ByteLength(Array array); // 0x00C13A04-0x00C13AE8
		public static void BlockCopy(Array src, int srcOffset, Array dst, int dstOffset, int count); // 0x00C13AE8-0x00C13D0C
		internal static unsafe void memcpy4(byte* dest, byte* src, int size); // 0x00C13D0C-0x00C13D98
		internal static unsafe void memcpy2(byte* dest, byte* src, int size); // 0x00C13D98-0x00C13E14
		private static unsafe void memcpy1(byte* dest, byte* src, int size); // 0x00C13E14-0x00C14044
		internal static unsafe void Memcpy(byte* dest, byte* src, int size); // 0x00C13978-0x00C139D4
	}

	[Serializable]
	[ComVisible] // 0x004B2578-0x004B258C
	public struct Byte : IComparable, IFormattable, IConvertible, IComparable<byte>, IEquatable<byte> // TypeDefIndex: 127
	{
		// Fields
		private byte m_value; // 0x00
		public const byte MaxValue = 255; // Metadata: 0x001DF2FD
		public const byte MinValue = 0; // Metadata: 0x001DF2FE
	
		// Methods
		public int CompareTo(object value); // 0x0058E560-0x0058E568
		public int CompareTo(byte value); // 0x0058E568-0x0058E574
		public override bool Equals(object obj); // 0x0058E574-0x0058E57C
		public bool Equals(byte obj); // 0x0058E57C-0x0058E58C
		public override int GetHashCode(); // 0x0058E58C-0x0058E594
		public static byte Parse(string s); // 0x00C14044-0x00C14074
		public static byte Parse(string s, IFormatProvider provider); // 0x00C141F0-0x00C14224
		public static byte Parse(string s, NumberStyles style, IFormatProvider provider); // 0x00C14224-0x00C14274
		private static byte Parse(string s, NumberStyles style, NumberFormatInfo info); // 0x00C14074-0x00C141F0
		public static bool TryParse(string s, out byte result); // 0x00C14274-0x00C142AC
		private static bool TryParse(string s, NumberStyles style, NumberFormatInfo info, out byte result); // 0x00C142AC-0x00C14AB4
		public override string ToString(); // 0x0058E594-0x0058E5C8
		public string ToString(string format); // 0x0058E5C8-0x0058E600
		public string ToString(IFormatProvider provider); // 0x0058E600-0x0058E638
		public string ToString(string format, IFormatProvider provider); // 0x0058E638-0x0058E674
		public TypeCode GetTypeCode(); // 0x0058E674-0x0058E67C
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x0058E67C-0x0058E684
		char IConvertible.ToChar(IFormatProvider provider); // 0x0058E684-0x0058E68C
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x0058E68C-0x0058E694
		byte IConvertible.ToByte(IFormatProvider provider); // 0x0058E694-0x0058E69C
		short IConvertible.ToInt16(IFormatProvider provider); // 0x0058E69C-0x0058E6A4
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x0058E6A4-0x0058E6AC
		int IConvertible.ToInt32(IFormatProvider provider); // 0x0058E6AC-0x0058E6B4
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x0058E6B4-0x0058E6BC
		long IConvertible.ToInt64(IFormatProvider provider); // 0x0058E6BC-0x0058E6C4
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x0058E6C4-0x0058E6CC
		float IConvertible.ToSingle(IFormatProvider provider); // 0x0058E6CC-0x0058E6D4
		double IConvertible.ToDouble(IFormatProvider provider); // 0x0058E6D4-0x0058E6DC
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x0058E6DC-0x0058E6E4
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x0058E6E4-0x0058E6F0
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x0058E6F0-0x0058E6F8
	}

	[Serializable]
	[ComVisible] // 0x004B258C-0x004B25A0
	public class CannotUnloadAppDomainException : SystemException // TypeDefIndex: 128
	{
		// Constructors
		public CannotUnloadAppDomainException(); // 0x00C1519C-0x00C15210
		public CannotUnloadAppDomainException(string message); // 0x00C15210-0x00C15244
		protected CannotUnloadAppDomainException(SerializationInfo info, StreamingContext context); // 0x00C15244-0x00C1524C
	}

	[Serializable]
	[ComVisible] // 0x004B25A0-0x004B25B4
	public struct Char : IComparable, IConvertible, IComparable<char>, IEquatable<char> // TypeDefIndex: 129
	{
		// Fields
		internal char m_value; // 0x00
		public const char MaxValue = '\xffff'; // Metadata: 0x001DF2FF
		public const char MinValue = '\x0000'; // Metadata: 0x001DF301
		private static readonly byte[] categoryForLatin1; // 0x00
		internal const int UNICODE_PLANE00_END = 65535; // Metadata: 0x001DF303
		internal const int UNICODE_PLANE01_START = 65536; // Metadata: 0x001DF307
		internal const int UNICODE_PLANE16_END = 1114111; // Metadata: 0x001DF30B
		internal const int HIGH_SURROGATE_START = 55296; // Metadata: 0x001DF30F
		internal const int LOW_SURROGATE_END = 57343; // Metadata: 0x001DF313
	
		// Constructors
		static Char(); // 0x00C1745C-0x00C174D8
	
		// Methods
		private static bool IsLatin1(char ch); // 0x00C1524C-0x00C1525C
		private static bool IsAscii(char ch); // 0x00C1525C-0x00C1526C
		private static UnicodeCategory GetLatin1UnicodeCategory(char ch); // 0x00C1526C-0x00C15508
		public override int GetHashCode(); // 0x0058E6F8-0x0058E704
		public override bool Equals(object obj); // 0x0058E704-0x0058E70C
		public bool Equals(char obj); // 0x0058E70C-0x0058E71C
		public int CompareTo(object value); // 0x0058E71C-0x0058E724
		public int CompareTo(char value); // 0x0058E724-0x0058E730
		public override string ToString(); // 0x0058E730-0x0058E738
		public string ToString(IFormatProvider provider); // 0x0058E738-0x0058E740
		public static string ToString(char c); // 0x00C15508-0x00C15594
		public static char Parse(string s); // 0x00C15594-0x00C15684
		public static bool IsDigit(char c); // 0x00C15684-0x00C15738
		internal static bool CheckLetter(UnicodeCategory uc); // 0x00C15738-0x00C15744
		public static bool IsLetter(char c); // 0x00C15744-0x00C15864
		private static bool IsWhiteSpaceLatin1(char c); // 0x00C15864-0x00C158A8
		public static bool IsWhiteSpace(char c); // 0x00C12EEC-0x00C1377C
		public static bool IsUpper(char c); // 0x00C158A8-0x00C159A4
		public static bool IsLower(char c); // 0x00C159A4-0x00C15AA0
		internal static bool CheckLetterOrDigit(UnicodeCategory uc); // 0x00C15AA0-0x00C15ABC
		public static bool IsLetterOrDigit(char c); // 0x00C15ABC-0x00C15BB0
		public static char ToUpper(char c, CultureInfo culture); // 0x00C15BB0-0x00C15C64
		public static char ToUpper(char c); // 0x00C15C64-0x00C15CFC
		public static char ToUpperInvariant(char c); // 0x00C15CFC-0x00C15D94
		public static char ToLower(char c, CultureInfo culture); // 0x00C15D94-0x00C15E48
		public static char ToLower(char c); // 0x00C15E48-0x00C15EE0
		public static char ToLowerInvariant(char c); // 0x00C15EE0-0x00C16884
		public TypeCode GetTypeCode(); // 0x0058E740-0x0058E748
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x0058E748-0x0058E754
		char IConvertible.ToChar(IFormatProvider provider); // 0x0058E754-0x0058E75C
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x0058E75C-0x0058E764
		byte IConvertible.ToByte(IFormatProvider provider); // 0x0058E764-0x0058E76C
		short IConvertible.ToInt16(IFormatProvider provider); // 0x0058E76C-0x0058E774
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x0058E774-0x0058E77C
		int IConvertible.ToInt32(IFormatProvider provider); // 0x0058E77C-0x0058E784
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x0058E784-0x0058E78C
		long IConvertible.ToInt64(IFormatProvider provider); // 0x0058E78C-0x0058E794
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x0058E794-0x0058E79C
		float IConvertible.ToSingle(IFormatProvider provider); // 0x0058E79C-0x0058E7A8
		double IConvertible.ToDouble(IFormatProvider provider); // 0x0058E7A8-0x0058E7B4
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x0058E7B4-0x0058E7C0
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x0058E7C0-0x0058E7CC
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x0058E7CC-0x0058E9B0
		public static bool IsLetterOrDigit(string s, int index); // 0x00C16884-0x00C16A1C
		internal static bool CheckNumber(UnicodeCategory uc); // 0x00C16A1C-0x00C16A2C
		public static bool IsNumber(char c); // 0x00C16A2C-0x00C16B4C
		public static bool IsSurrogate(char c); // 0x00C16B4C-0x00C16B5C
		public static bool IsSurrogate(string s, int index); // 0x00C16B5C-0x00C16C68
		public static bool IsWhiteSpace(string s, int index); // 0x00C16C68-0x00C16E20
		public static UnicodeCategory GetUnicodeCategory(char c); // 0x00C16E20-0x00C16EDC
		public static UnicodeCategory GetUnicodeCategory(string s, int index); // 0x00C16EDC-0x00C17058
		public static bool IsHighSurrogate(char c); // 0x00C17058-0x00C17068
		public static bool IsHighSurrogate(string s, int index); // 0x00C17068-0x00C17178
		public static bool IsLowSurrogate(char c); // 0x00C17178-0x00C17188
		public static bool IsSurrogatePair(char highSurrogate, char lowSurrogate); // 0x00C17188-0x00C171AC
		public static string ConvertFromUtf32(int utf32); // 0x00C171AC-0x00C17310
		public static int ConvertToUtf32(char highSurrogate, char lowSurrogate); // 0x00C17310-0x00C1745C
	}

	[Serializable]
	[ComVisible] // 0x004B25B4-0x004B25C8
	public sealed class CharEnumerator : ICloneable, IEnumerator<char> // TypeDefIndex: 130
	{
		// Fields
		private string str; // 0x10
		private int index; // 0x18
		private char currentElement; // 0x1C
	
		// Properties
		object IEnumerator.Current { get; } // 0x00C1758C-0x00C17678 
		public char Current { get; } // 0x00C17678-0x00C17744 
	
		// Constructors
		internal CharEnumerator(string str); // 0x00C174D8-0x00C1750C
		internal CharEnumerator(); // 0x00C17754-0x00C17794
	
		// Methods
		public object Clone(); // 0x00C1750C-0x00C17514
		public bool MoveNext(); // 0x00C17514-0x00C17574
		public void Dispose(); // 0x00C17574-0x00C1758C
		public void Reset(); // 0x00C17744-0x00C17754
	}

	[Serializable]
	[AttributeUsage] // 0x004B25C8-0x004B2614
	[ComVisible] // 0x004B25C8-0x004B2614
	public sealed class CLSCompliantAttribute : Attribute // TypeDefIndex: 131
	{
		// Fields
		private bool m_compliant; // 0x10
	
		// Constructors
		public CLSCompliantAttribute(bool isCompliant); // 0x00C1516C-0x00C1519C
	}

	public delegate void ConsoleCancelEventHandler(object sender, ConsoleCancelEventArgs e); // TypeDefIndex: 132; 0x00AB6948-0x00AB6D28

	[Serializable]
	public sealed class ConsoleCancelEventArgs : EventArgs // TypeDefIndex: 133
	{
		// Fields
		private ConsoleSpecialKey _type; // 0x10
		private bool _cancel; // 0x14
	
		// Properties
		public bool Cancel { get; } // 0x00AB74A4-0x00AB74AC 
	
		// Constructors
		internal ConsoleCancelEventArgs(ConsoleSpecialKey type); // 0x00AB68C8-0x00AB6948
		internal ConsoleCancelEventArgs(); // 0x00AB74AC-0x00AB74EC
	}

	[Serializable]
	public enum ConsoleColor // TypeDefIndex: 134
	{
		Black = 0,
		DarkBlue = 1,
		DarkGreen = 2,
		DarkCyan = 3,
		DarkRed = 4,
		DarkMagenta = 5,
		DarkYellow = 6,
		Gray = 7,
		DarkGray = 8,
		Blue = 9,
		Green = 10,
		Cyan = 11,
		Red = 12,
		Magenta = 13,
		Yellow = 14,
		White = 15
	}

	[Serializable]
	public enum ConsoleKey // TypeDefIndex: 135
	{
		Backspace = 8,
		Tab = 9,
		Clear = 12,
		Enter = 13,
		Pause = 19,
		Escape = 27,
		Spacebar = 32,
		PageUp = 33,
		PageDown = 34,
		End = 35,
		Home = 36,
		LeftArrow = 37,
		UpArrow = 38,
		RightArrow = 39,
		DownArrow = 40,
		Select = 41,
		Print = 42,
		Execute = 43,
		PrintScreen = 44,
		Insert = 45,
		Delete = 46,
		Help = 47,
		D0 = 48,
		D1 = 49,
		D2 = 50,
		D3 = 51,
		D4 = 52,
		D5 = 53,
		D6 = 54,
		D7 = 55,
		D8 = 56,
		D9 = 57,
		A = 65,
		B = 66,
		C = 67,
		D = 68,
		E = 69,
		F = 70,
		G = 71,
		H = 72,
		I = 73,
		J = 74,
		K = 75,
		L = 76,
		M = 77,
		N = 78,
		O = 79,
		P = 80,
		Q = 81,
		R = 82,
		S = 83,
		T = 84,
		U = 85,
		V = 86,
		W = 87,
		X = 88,
		Y = 89,
		Z = 90,
		LeftWindows = 91,
		RightWindows = 92,
		Applications = 93,
		Sleep = 95,
		NumPad0 = 96,
		NumPad1 = 97,
		NumPad2 = 98,
		NumPad3 = 99,
		NumPad4 = 100,
		NumPad5 = 101,
		NumPad6 = 102,
		NumPad7 = 103,
		NumPad8 = 104,
		NumPad9 = 105,
		Multiply = 106,
		Add = 107,
		Separator = 108,
		Subtract = 109,
		Decimal = 110,
		Divide = 111,
		F1 = 112,
		F2 = 113,
		F3 = 114,
		F4 = 115,
		F5 = 116,
		F6 = 117,
		F7 = 118,
		F8 = 119,
		F9 = 120,
		F10 = 121,
		F11 = 122,
		F12 = 123,
		F13 = 124,
		F14 = 125,
		F15 = 126,
		F16 = 127,
		F17 = 128,
		F18 = 129,
		F19 = 130,
		F20 = 131,
		F21 = 132,
		F22 = 133,
		F23 = 134,
		F24 = 135,
		BrowserBack = 166,
		BrowserForward = 167,
		BrowserRefresh = 168,
		BrowserStop = 169,
		BrowserSearch = 170,
		BrowserFavorites = 171,
		BrowserHome = 172,
		VolumeMute = 173,
		VolumeDown = 174,
		VolumeUp = 175,
		MediaNext = 176,
		MediaPrevious = 177,
		MediaStop = 178,
		MediaPlay = 179,
		LaunchMail = 180,
		LaunchMediaSelect = 181,
		LaunchApp1 = 182,
		LaunchApp2 = 183,
		Oem1 = 186,
		OemPlus = 187,
		OemComma = 188,
		OemMinus = 189,
		OemPeriod = 190,
		Oem2 = 191,
		Oem3 = 192,
		Oem4 = 219,
		Oem5 = 220,
		Oem6 = 221,
		Oem7 = 222,
		Oem8 = 223,
		Oem102 = 226,
		Process = 229,
		Packet = 231,
		Attention = 246,
		CrSel = 247,
		ExSel = 248,
		EraseEndOfFile = 249,
		Play = 250,
		Zoom = 251,
		NoName = 252,
		Pa1 = 253,
		OemClear = 254
	}

	[Serializable]
	public struct ConsoleKeyInfo // TypeDefIndex: 136
	{
		// Fields
		private char _keyChar; // 0x00
		private ConsoleKey _key; // 0x04
		private ConsoleModifiers _mods; // 0x08
	
		// Properties
		public char KeyChar { get; } // 0x005894F8-0x00589500 
		public ConsoleKey Key { get; } // 0x00589500-0x00589508 
	
		// Constructors
		public ConsoleKeyInfo(char keyChar, ConsoleKey key, bool shift, bool alt, bool control); // 0x005894E4-0x005894F8
	
		// Methods
		public override bool Equals(object value); // 0x00589508-0x00589510
		public bool Equals(ConsoleKeyInfo obj); // 0x00589510-0x00589544
		public override int GetHashCode(); // 0x00589544-0x00589614
	}

	[Serializable]
	[Flags] // 0x004B2614-0x004B2624
	public enum ConsoleModifiers // TypeDefIndex: 137
	{
		Alt = 1,
		Shift = 2,
		Control = 4
	}

	[Serializable]
	public enum ConsoleSpecialKey // TypeDefIndex: 138
	{
		ControlC = 0,
		ControlBreak = 1
	}

	[Serializable]
	[ComVisible] // 0x004B2624-0x004B2638
	public abstract class ContextBoundObject : MarshalByRefObject // TypeDefIndex: 139
	{
		// Constructors
		protected ContextBoundObject(); // 0x00AB7924-0x00AB792C
	}

	[Serializable]
	[AttributeUsage] // 0x004B2638-0x004B2680
	[ComVisible] // 0x004B2638-0x004B2680
	public class ContextStaticAttribute : Attribute // TypeDefIndex: 140
	{
		// Constructors
		public ContextStaticAttribute(); // 0x00AB792C-0x00AB7934
	}

	[Flags] // 0x004B2680-0x004B2690
	public enum Base64FormattingOptions // TypeDefIndex: 141
	{
		None = 0,
		InsertLineBreaks = 1
	}

	public static class Convert // TypeDefIndex: 142
	{
		// Fields
		internal static readonly RuntimeType[] ConvertTypes; // 0x00
		private static readonly RuntimeType EnumType; // 0x08
		internal static readonly char[] base64Table; // 0x10
		public static readonly object DBNull; // 0x18
	
		// Constructors
		static Convert(); // 0x00AC02D0-0x00AC0F98
	
		// Methods
		public static TypeCode GetTypeCode(object value); // 0x00AB7934-0x00AB7A08
		public static object ChangeType(object value, TypeCode typeCode, IFormatProvider provider); // 0x00AB7A08-0x00AB8294
		internal static object DefaultToType(IConvertible value, Type targetType, IFormatProvider provider); // 0x00AB8294-0x00AB94A4
		public static object ChangeType(object value, Type conversionType); // 0x00AB94A4-0x00AB953C
		public static object ChangeType(object value, Type conversionType, IFormatProvider provider); // 0x00AB953C-0x00ABA538
		public static bool ToBoolean(object value, IFormatProvider provider); // 0x00ABA538-0x00ABA64C
		[CLSCompliant] // 0x004B9EF0-0x004B9F04
		public static bool ToBoolean(sbyte value); // 0x00ABA64C-0x00ABA658
		public static bool ToBoolean(byte value); // 0x00ABA658-0x00ABA664
		public static bool ToBoolean(short value); // 0x00ABA664-0x00ABA670
		[CLSCompliant] // 0x004B9F04-0x004B9F18
		public static bool ToBoolean(ushort value); // 0x00ABA670-0x00ABA67C
		public static bool ToBoolean(int value); // 0x00ABA67C-0x00ABA688
		[CLSCompliant] // 0x004B9F18-0x004B9F2C
		public static bool ToBoolean(uint value); // 0x00ABA688-0x00ABA694
		public static bool ToBoolean(long value); // 0x00ABA694-0x00ABA6A0
		[CLSCompliant] // 0x004B9F2C-0x004B9F40
		public static bool ToBoolean(ulong value); // 0x00ABA6A0-0x00ABA6AC
		public static bool ToBoolean(string value, IFormatProvider provider); // 0x00ABA6AC-0x00ABA728
		public static bool ToBoolean(float value); // 0x00ABA728-0x00ABA734
		public static bool ToBoolean(double value); // 0x00ABA734-0x00ABA740
		public static bool ToBoolean(decimal value); // 0x00ABA740-0x00ABA7C4
		public static char ToChar(object value, IFormatProvider provider); // 0x00ABA7C4-0x00ABA8D8
		[CLSCompliant] // 0x004B9F40-0x004B9F54
		public static char ToChar(sbyte value); // 0x00ABA8D8-0x00ABA974
		public static char ToChar(byte value); // 0x00ABA974-0x00ABA97C
		public static char ToChar(short value); // 0x00ABA97C-0x00ABAA1C
		[CLSCompliant] // 0x004B9F54-0x004B9F68
		public static char ToChar(ushort value); // 0x00ABAA1C-0x00ABAA20
		public static char ToChar(int value); // 0x00ABAA20-0x00ABAAC0
		[CLSCompliant] // 0x004B9F68-0x004B9F7C
		public static char ToChar(uint value); // 0x00ABAAC0-0x00ABAB60
		public static char ToChar(long value); // 0x00ABAB60-0x00ABAC00
		[CLSCompliant] // 0x004B9F7C-0x004B9F90
		public static char ToChar(ulong value); // 0x00ABAC00-0x00ABACA0
		public static char ToChar(string value, IFormatProvider provider); // 0x00ABACA0-0x00ABAD90
		[CLSCompliant] // 0x004B9F90-0x004B9FA4
		public static sbyte ToSByte(object value, IFormatProvider provider); // 0x00ABAD90-0x00ABAEA4
		[CLSCompliant] // 0x004B9FA4-0x004B9FB8
		public static sbyte ToSByte(bool value); // 0x00ABAEA4-0x00ABAEAC
		[CLSCompliant] // 0x004B9FB8-0x004B9FCC
		public static sbyte ToSByte(char value); // 0x00ABAEAC-0x00ABAF50
		[CLSCompliant] // 0x004B9FCC-0x004B9FE0
		public static sbyte ToSByte(byte value); // 0x00ABAF50-0x00ABAFF0
		[CLSCompliant] // 0x004B9FE0-0x004B9FF4
		public static sbyte ToSByte(short value); // 0x00ABAFF0-0x00ABB098
		[CLSCompliant] // 0x004B9FF4-0x004BA008
		public static sbyte ToSByte(ushort value); // 0x00ABB098-0x00ABB13C
		[CLSCompliant] // 0x004BA008-0x004BA01C
		public static sbyte ToSByte(int value); // 0x00ABB13C-0x00ABB1E0
		[CLSCompliant] // 0x004BA01C-0x004BA030
		public static sbyte ToSByte(uint value); // 0x00ABB1E0-0x00ABB280
		[CLSCompliant] // 0x004BA030-0x004BA044
		public static sbyte ToSByte(long value); // 0x00ABB280-0x00ABB324
		[CLSCompliant] // 0x004BA044-0x004BA058
		public static sbyte ToSByte(ulong value); // 0x00ABB324-0x00ABB3C4
		[CLSCompliant] // 0x004BA058-0x004BA06C
		public static sbyte ToSByte(float value); // 0x00ABB3C4-0x00ABB430
		[CLSCompliant] // 0x004BA06C-0x004BA080
		public static sbyte ToSByte(double value); // 0x00ABB430-0x00ABB4A0
		[CLSCompliant] // 0x004BA080-0x004BA094
		public static sbyte ToSByte(decimal value); // 0x00ABB5C4-0x00ABB648
		[CLSCompliant] // 0x004BA094-0x004BA0A8
		public static sbyte ToSByte(string value, IFormatProvider provider); // 0x00ABB648-0x00ABB65C
		public static byte ToByte(object value, IFormatProvider provider); // 0x00ABB65C-0x00ABB770
		public static byte ToByte(bool value); // 0x00ABB770-0x00ABB778
		public static byte ToByte(char value); // 0x00ABB778-0x00ABB81C
		[CLSCompliant] // 0x004BA0A8-0x004BA0BC
		public static byte ToByte(sbyte value); // 0x00ABB81C-0x00ABB8BC
		public static byte ToByte(short value); // 0x00ABB8BC-0x00ABB960
		[CLSCompliant] // 0x004BA0BC-0x004BA0D0
		public static byte ToByte(ushort value); // 0x00ABB960-0x00ABBA04
		public static byte ToByte(int value); // 0x00ABBA04-0x00ABBAA4
		[CLSCompliant] // 0x004BA0D0-0x004BA0E4
		public static byte ToByte(uint value); // 0x00ABBAA4-0x00ABBB44
		public static byte ToByte(long value); // 0x00ABBB44-0x00ABBBE4
		[CLSCompliant] // 0x004BA0E4-0x004BA0F8
		public static byte ToByte(ulong value); // 0x00ABBBE4-0x00ABBC84
		public static byte ToByte(float value); // 0x00ABBC84-0x00ABBCF0
		public static byte ToByte(double value); // 0x00ABBCF0-0x00ABBD60
		public static byte ToByte(decimal value); // 0x00ABBD60-0x00ABBDE4
		public static byte ToByte(string value); // 0x00ABBDE4-0x00ABBE6C
		public static byte ToByte(string value, IFormatProvider provider); // 0x00ABBE6C-0x00ABBE88
		public static short ToInt16(object value, IFormatProvider provider); // 0x00ABBE88-0x00ABBF9C
		public static short ToInt16(bool value); // 0x00ABBF9C-0x00ABBFA4
		public static short ToInt16(char value); // 0x00ABBFA4-0x00ABC044
		[CLSCompliant] // 0x004BA0F8-0x004BA10C
		public static short ToInt16(sbyte value); // 0x00ABC044-0x00ABC04C
		public static short ToInt16(byte value); // 0x00ABC04C-0x00ABC054
		[CLSCompliant] // 0x004BA10C-0x004BA120
		public static short ToInt16(ushort value); // 0x00ABC054-0x00ABC0F4
		public static short ToInt16(int value); // 0x00ABC0F4-0x00ABC198
		[CLSCompliant] // 0x004BA120-0x004BA134
		public static short ToInt16(uint value); // 0x00ABC198-0x00ABC238
		public static short ToInt16(long value); // 0x00ABC238-0x00ABC2DC
		[CLSCompliant] // 0x004BA134-0x004BA148
		public static short ToInt16(ulong value); // 0x00ABC2DC-0x00ABC37C
		public static short ToInt16(float value); // 0x00ABC37C-0x00ABC3E8
		public static short ToInt16(double value); // 0x00ABC3E8-0x00ABC458
		public static short ToInt16(decimal value); // 0x00ABC458-0x00ABC4DC
		public static short ToInt16(string value, IFormatProvider provider); // 0x00ABC4DC-0x00ABC4F8
		[CLSCompliant] // 0x004BA148-0x004BA15C
		public static ushort ToUInt16(object value, IFormatProvider provider); // 0x00ABC4F8-0x00ABC60C
		[CLSCompliant] // 0x004BA15C-0x004BA170
		public static ushort ToUInt16(bool value); // 0x00ABC60C-0x00ABC614
		[CLSCompliant] // 0x004BA170-0x004BA184
		public static ushort ToUInt16(char value); // 0x00ABC614-0x00ABC618
		[CLSCompliant] // 0x004BA184-0x004BA198
		public static ushort ToUInt16(sbyte value); // 0x00ABC618-0x00ABC6B4
		[CLSCompliant] // 0x004BA198-0x004BA1AC
		public static ushort ToUInt16(byte value); // 0x00ABC6B4-0x00ABC6BC
		[CLSCompliant] // 0x004BA1AC-0x004BA1C0
		public static ushort ToUInt16(short value); // 0x00ABC6BC-0x00ABC75C
		[CLSCompliant] // 0x004BA1C0-0x004BA1D4
		public static ushort ToUInt16(int value); // 0x00ABC75C-0x00ABC7FC
		[CLSCompliant] // 0x004BA1D4-0x004BA1E8
		public static ushort ToUInt16(uint value); // 0x00ABC7FC-0x00ABC89C
		[CLSCompliant] // 0x004BA1E8-0x004BA1FC
		public static ushort ToUInt16(long value); // 0x00ABC89C-0x00ABC93C
		[CLSCompliant] // 0x004BA1FC-0x004BA210
		public static ushort ToUInt16(ulong value); // 0x00ABC93C-0x00ABC9DC
		[CLSCompliant] // 0x004BA210-0x004BA224
		public static ushort ToUInt16(float value); // 0x00ABC9DC-0x00ABCA48
		[CLSCompliant] // 0x004BA224-0x004BA238
		public static ushort ToUInt16(double value); // 0x00ABCA48-0x00ABCAB8
		[CLSCompliant] // 0x004BA238-0x004BA24C
		public static ushort ToUInt16(decimal value); // 0x00ABCAB8-0x00ABCB3C
		[CLSCompliant] // 0x004BA24C-0x004BA260
		public static ushort ToUInt16(string value, IFormatProvider provider); // 0x00ABCB3C-0x00ABCB58
		public static int ToInt32(object value); // 0x00ABCB58-0x00ABCC68
		public static int ToInt32(object value, IFormatProvider provider); // 0x00ABCC68-0x00ABCD7C
		public static int ToInt32(bool value); // 0x00ABCD7C-0x00ABCD84
		public static int ToInt32(char value); // 0x00ABCD84-0x00ABCD8C
		public static int ToInt32(byte value); // 0x00ABCD8C-0x00ABCD94
		public static int ToInt32(short value); // 0x00ABCD94-0x00ABCD9C
		[CLSCompliant] // 0x004BA260-0x004BA274
		public static int ToInt32(ushort value); // 0x00ABCD9C-0x00ABCDA4
		[CLSCompliant] // 0x004BA274-0x004BA288
		public static int ToInt32(uint value); // 0x00ABCDA4-0x00ABCE40
		public static int ToInt32(long value); // 0x00ABCE40-0x00ABCEE8
		[CLSCompliant] // 0x004BA288-0x004BA29C
		public static int ToInt32(ulong value); // 0x00ABCEE8-0x00ABCF88
		public static int ToInt32(float value); // 0x00ABCF88-0x00ABCFF4
		public static int ToInt32(double value); // 0x00ABB4A0-0x00ABB5C4
		public static int ToInt32(decimal value); // 0x00ABCFF4-0x00ABD06C
		public static int ToInt32(string value); // 0x00ABD06C-0x00ABD0F4
		public static int ToInt32(string value, IFormatProvider provider); // 0x00ABD0F4-0x00ABD110
		[CLSCompliant] // 0x004BA29C-0x004BA2B0
		public static uint ToUInt32(object value); // 0x00ABD110-0x00ABD220
		[CLSCompliant] // 0x004BA2B0-0x004BA2C4
		public static uint ToUInt32(object value, IFormatProvider provider); // 0x00ABD220-0x00ABD334
		[CLSCompliant] // 0x004BA2C4-0x004BA2D8
		public static uint ToUInt32(bool value); // 0x00ABD334-0x00ABD33C
		[CLSCompliant] // 0x004BA2D8-0x004BA2EC
		public static uint ToUInt32(char value); // 0x00ABD33C-0x00ABD344
		[CLSCompliant] // 0x004BA2EC-0x004BA300
		public static uint ToUInt32(sbyte value); // 0x00ABD344-0x00ABD3E0
		[CLSCompliant] // 0x004BA300-0x004BA314
		public static uint ToUInt32(byte value); // 0x00ABD3E0-0x00ABD3E8
		[CLSCompliant] // 0x004BA314-0x004BA328
		public static uint ToUInt32(short value); // 0x00ABD3E8-0x00ABD484
		[CLSCompliant] // 0x004BA328-0x004BA33C
		public static uint ToUInt32(ushort value); // 0x00ABD484-0x00ABD48C
		[CLSCompliant] // 0x004BA33C-0x004BA350
		public static uint ToUInt32(int value); // 0x00ABD48C-0x00ABD528
		[CLSCompliant] // 0x004BA350-0x004BA364
		public static uint ToUInt32(long value); // 0x00ABD528-0x00ABD5C8
		[CLSCompliant] // 0x004BA364-0x004BA378
		public static uint ToUInt32(ulong value); // 0x00ABD5C8-0x00ABD668
		[CLSCompliant] // 0x004BA378-0x004BA38C
		public static uint ToUInt32(float value); // 0x00ABD668-0x00ABD6D4
		[CLSCompliant] // 0x004BA38C-0x004BA3A0
		public static uint ToUInt32(double value); // 0x00ABD6D4-0x00ABD7B4
		[CLSCompliant] // 0x004BA3A0-0x004BA3B4
		public static uint ToUInt32(decimal value); // 0x00ABD7B4-0x00ABD838
		[CLSCompliant] // 0x004BA3B4-0x004BA3C8
		public static uint ToUInt32(string value, IFormatProvider provider); // 0x00ABD838-0x00ABD854
		public static long ToInt64(object value, IFormatProvider provider); // 0x00ABD854-0x00ABD968
		public static long ToInt64(bool value); // 0x00ABD968-0x00ABD970
		public static long ToInt64(char value); // 0x00ABD970-0x00ABD978
		[CLSCompliant] // 0x004BA3C8-0x004BA3DC
		public static long ToInt64(sbyte value); // 0x00ABD978-0x00ABD980
		public static long ToInt64(byte value); // 0x00ABD980-0x00ABD988
		public static long ToInt64(short value); // 0x00ABD988-0x00ABD990
		[CLSCompliant] // 0x004BA3DC-0x004BA3F0
		public static long ToInt64(ushort value); // 0x00ABD990-0x00ABD998
		public static long ToInt64(int value); // 0x00ABD998-0x00ABD9A0
		[CLSCompliant] // 0x004BA3F0-0x004BA404
		public static long ToInt64(uint value); // 0x00ABD9A0-0x00ABD9A8
		[CLSCompliant] // 0x004BA404-0x004BA418
		public static long ToInt64(ulong value); // 0x00ABD9A8-0x00ABDA44
		public static long ToInt64(float value); // 0x00ABDA44-0x00ABDAB0
		public static long ToInt64(double value); // 0x00ABDAB0-0x00ABDBAC
		public static long ToInt64(decimal value); // 0x00ABDBAC-0x00ABDC30
		public static long ToInt64(string value); // 0x00ABDC30-0x00ABDCB8
		public static long ToInt64(string value, IFormatProvider provider); // 0x00ABDCB8-0x00ABDCD4
		[CLSCompliant] // 0x004BA418-0x004BA42C
		public static ulong ToUInt64(object value, IFormatProvider provider); // 0x00ABDCD4-0x00ABDDE8
		[CLSCompliant] // 0x004BA42C-0x004BA440
		public static ulong ToUInt64(bool value); // 0x00ABDDE8-0x00ABDDF0
		[CLSCompliant] // 0x004BA440-0x004BA454
		public static ulong ToUInt64(char value); // 0x00ABDDF0-0x00ABDDF8
		[CLSCompliant] // 0x004BA454-0x004BA468
		public static ulong ToUInt64(sbyte value); // 0x00ABDDF8-0x00ABDE98
		[CLSCompliant] // 0x004BA468-0x004BA47C
		public static ulong ToUInt64(byte value); // 0x00ABDE98-0x00ABDEA0
		[CLSCompliant] // 0x004BA47C-0x004BA490
		public static ulong ToUInt64(short value); // 0x00ABDEA0-0x00ABDF40
		[CLSCompliant] // 0x004BA490-0x004BA4A4
		public static ulong ToUInt64(ushort value); // 0x00ABDF40-0x00ABDF48
		[CLSCompliant] // 0x004BA4A4-0x004BA4B8
		public static ulong ToUInt64(int value); // 0x00ABDF48-0x00ABDFE4
		[CLSCompliant] // 0x004BA4B8-0x004BA4CC
		public static ulong ToUInt64(uint value); // 0x00ABDFE4-0x00ABDFEC
		[CLSCompliant] // 0x004BA4CC-0x004BA4E0
		public static ulong ToUInt64(long value); // 0x00ABDFEC-0x00ABE088
		[CLSCompliant] // 0x004BA4E0-0x004BA4F4
		public static ulong ToUInt64(float value); // 0x00ABE088-0x00ABE0F4
		[CLSCompliant] // 0x004BA4F4-0x004BA508
		public static ulong ToUInt64(double value); // 0x00ABE0F4-0x00ABE1F0
		[CLSCompliant] // 0x004BA508-0x004BA51C
		public static ulong ToUInt64(decimal value); // 0x00ABE1F0-0x00ABE274
		[CLSCompliant] // 0x004BA51C-0x004BA530
		public static ulong ToUInt64(string value, IFormatProvider provider); // 0x00ABE274-0x00ABE290
		public static float ToSingle(object value, IFormatProvider provider); // 0x00ABE290-0x00ABE3A4
		[CLSCompliant] // 0x004BA530-0x004BA544
		public static float ToSingle(sbyte value); // 0x00ABE3A4-0x00ABE3B0
		public static float ToSingle(byte value); // 0x00ABE3B0-0x00ABE3BC
		public static float ToSingle(short value); // 0x00ABE3BC-0x00ABE3C8
		[CLSCompliant] // 0x004BA544-0x004BA558
		public static float ToSingle(ushort value); // 0x00ABE3C8-0x00ABE3D4
		public static float ToSingle(int value); // 0x00ABE3D4-0x00ABE3DC
		[CLSCompliant] // 0x004BA558-0x004BA56C
		public static float ToSingle(uint value); // 0x00ABE3DC-0x00ABE3E8
		public static float ToSingle(long value); // 0x00ABE3E8-0x00ABE3F0
		[CLSCompliant] // 0x004BA56C-0x004BA580
		public static float ToSingle(ulong value); // 0x00ABE3F0-0x00ABE3FC
		public static float ToSingle(double value); // 0x00ABE3FC-0x00ABE404
		public static float ToSingle(decimal value); // 0x00ABE404-0x00ABE47C
		public static float ToSingle(string value, IFormatProvider provider); // 0x00ABE47C-0x00ABE49C
		public static float ToSingle(bool value); // 0x00ABE49C-0x00ABE4B0
		public static double ToDouble(object value); // 0x00ABE4B0-0x00ABE5C0
		public static double ToDouble(object value, IFormatProvider provider); // 0x00ABE5C0-0x00ABE6D4
		[CLSCompliant] // 0x004BA580-0x004BA594
		public static double ToDouble(sbyte value); // 0x00ABE6D4-0x00ABE6E0
		public static double ToDouble(byte value); // 0x00ABE6E0-0x00ABE6EC
		public static double ToDouble(short value); // 0x00ABE6EC-0x00ABE6F8
		[CLSCompliant] // 0x004BA594-0x004BA5A8
		public static double ToDouble(ushort value); // 0x00ABE6F8-0x00ABE704
		public static double ToDouble(int value); // 0x00ABE704-0x00ABE70C
		[CLSCompliant] // 0x004BA5A8-0x004BA5BC
		public static double ToDouble(uint value); // 0x00ABE70C-0x00ABE714
		public static double ToDouble(long value); // 0x00ABE714-0x00ABE71C
		[CLSCompliant] // 0x004BA5BC-0x004BA5D0
		public static double ToDouble(ulong value); // 0x00ABE71C-0x00ABE724
		public static double ToDouble(float value); // 0x00ABE724-0x00ABE72C
		public static double ToDouble(decimal value); // 0x00ABE72C-0x00ABE7A4
		public static double ToDouble(string value, IFormatProvider provider); // 0x00ABE7A4-0x00ABE838
		public static double ToDouble(bool value); // 0x00ABE838-0x00ABE84C
		public static decimal ToDecimal(object value, IFormatProvider provider); // 0x00ABE84C-0x00ABE988
		[CLSCompliant] // 0x004BA5D0-0x004BA5E4
		public static decimal ToDecimal(sbyte value); // 0x00ABE988-0x00ABE9F0
		public static decimal ToDecimal(byte value); // 0x00ABE9F0-0x00ABEA58
		public static decimal ToDecimal(short value); // 0x00ABEA58-0x00ABEAC0
		[CLSCompliant] // 0x004BA5E4-0x004BA5F8
		public static decimal ToDecimal(ushort value); // 0x00ABEAC0-0x00ABEB28
		public static decimal ToDecimal(int value); // 0x00ABEB28-0x00ABEB90
		[CLSCompliant] // 0x004BA5F8-0x004BA60C
		public static decimal ToDecimal(uint value); // 0x00ABEB90-0x00ABEBF8
		public static decimal ToDecimal(long value); // 0x00ABEBF8-0x00ABEC60
		[CLSCompliant] // 0x004BA60C-0x004BA620
		public static decimal ToDecimal(ulong value); // 0x00ABEC60-0x00ABECC8
		public static decimal ToDecimal(float value); // 0x00ABECC8-0x00ABED38
		public static decimal ToDecimal(double value); // 0x00ABED38-0x00ABEDA8
		public static decimal ToDecimal(string value, IFormatProvider provider); // 0x00ABEDA8-0x00ABEE54
		public static decimal ToDecimal(bool value); // 0x00ABEE54-0x00ABEEC0
		public static DateTime ToDateTime(string value); // 0x00ABEEC0-0x00ABF058
		public static DateTime ToDateTime(string value, IFormatProvider provider); // 0x00ABF104-0x00ABF1B4
		public static string ToString(object value, IFormatProvider provider); // 0x00ABF1B4-0x00ABF354
		public static string ToString(char value); // 0x00ABF354-0x00ABF3BC
		public static string ToString(char value, IFormatProvider provider); // 0x00ABF3BC-0x00ABF3E4
		public static string ToString(int value, IFormatProvider provider); // 0x00ABF3E4-0x00ABF40C
		public static string ToString(double value); // 0x00ABF40C-0x00ABF484
		public static string ToString(decimal value); // 0x00ABF484-0x00ABF504
		public static int ToInt32(string value, int fromBase); // 0x00ABF504-0x00ABF5D8
		public static string ToString(int value, int toBase); // 0x00ABF5D8-0x00ABF6B4
		public static string ToBase64String(byte[] inArray); // 0x00ABF6B4-0x00ABF768
		[ComVisible] // 0x004BA620-0x004BA634
		public static string ToBase64String(byte[] inArray, int offset, int length, Base64FormattingOptions options); // 0x00ABF768-0x00ABFA34
		private static unsafe int ConvertToBase64Array(char* outChars, byte* inData, int offset, int length, bool insertLineBreaks); // 0x00ABFB28-0x00ABFD70
		private static int ToBase64_CalculateAndValidateOutputLength(int inputLength, bool insertLineBreaks); // 0x00ABFA34-0x00ABFB28
		public static byte[] FromBase64String(string s); // 0x00ABFD70-0x00ABFE30
		private static unsafe byte[] FromBase64CharPtr(char* inputPtr, int inputLength); // 0x00ABFE30-0x00ABFF68
		private static unsafe int FromBase64_Decode(char* startInputPtr, int inputLength, byte* startDestPtr, int destLength); // 0x00AC0070-0x00AC02D0
		private static unsafe int FromBase64_ComputeResultLength(char* inputPtr, int inputLength); // 0x00ABFF68-0x00AC0070
	}

	[Serializable]
	public struct DateTime : IComparable, IFormattable, IConvertible, ISerializable, IComparable<DateTime>, IEquatable<DateTime> // TypeDefIndex: 143
	{
		// Fields
		private const long TicksPerMillisecond = 10000; // Metadata: 0x001DF5B3
		private const long TicksPerSecond = 10000000; // Metadata: 0x001DF5BB
		private const long TicksPerMinute = 600000000; // Metadata: 0x001DF5C3
		private const long TicksPerHour = 36000000000; // Metadata: 0x001DF5CB
		private const long TicksPerDay = 864000000000; // Metadata: 0x001DF5D3
		private const int MillisPerSecond = 1000; // Metadata: 0x001DF5DB
		private const int MillisPerMinute = 60000; // Metadata: 0x001DF5DF
		private const int MillisPerHour = 3600000; // Metadata: 0x001DF5E3
		private const int MillisPerDay = 86400000; // Metadata: 0x001DF5E7
		private const int DaysPerYear = 365; // Metadata: 0x001DF5EB
		private const int DaysPer4Years = 1461; // Metadata: 0x001DF5EF
		private const int DaysPer100Years = 36524; // Metadata: 0x001DF5F3
		private const int DaysPer400Years = 146097; // Metadata: 0x001DF5F7
		private const int DaysTo1601 = 584388; // Metadata: 0x001DF5FB
		private const int DaysTo1899 = 693593; // Metadata: 0x001DF5FF
		internal const int DaysTo1970 = 719162; // Metadata: 0x001DF603
		private const int DaysTo10000 = 3652059; // Metadata: 0x001DF607
		internal const long MinTicks = 0; // Metadata: 0x001DF60B
		internal const long MaxTicks = 3155378975999999999; // Metadata: 0x001DF613
		private const long MaxMillis = 315537897600000; // Metadata: 0x001DF61B
		private const long FileTimeOffset = 504911232000000000; // Metadata: 0x001DF623
		private const long DoubleDateOffset = 599264352000000000; // Metadata: 0x001DF62B
		private const long OADateMinAsTicks = 31241376000000000; // Metadata: 0x001DF633
		private const double OADateMinAsDouble = -657435; // Metadata: 0x001DF63B
		private const double OADateMaxAsDouble = 2958466; // Metadata: 0x001DF643
		private const int DatePartYear = 0; // Metadata: 0x001DF64B
		private const int DatePartDayOfYear = 1; // Metadata: 0x001DF64F
		private const int DatePartMonth = 2; // Metadata: 0x001DF653
		private const int DatePartDay = 3; // Metadata: 0x001DF657
		private static readonly int[] DaysToMonth365; // 0x00
		private static readonly int[] DaysToMonth366; // 0x08
		public static readonly DateTime MinValue; // 0x10
		public static readonly DateTime MaxValue; // 0x18
		private const ulong TicksMask = 4611686018427387903; // Metadata: 0x001DF65B
		private const ulong FlagsMask = 13835058055282163712; // Metadata: 0x001DF663
		private const ulong LocalMask = 9223372036854775808; // Metadata: 0x001DF66B
		private const long TicksCeiling = 4611686018427387904; // Metadata: 0x001DF673
		private const ulong KindUnspecified = 0; // Metadata: 0x001DF67B
		private const ulong KindUtc = 4611686018427387904; // Metadata: 0x001DF683
		private const ulong KindLocal = 9223372036854775808; // Metadata: 0x001DF68B
		private const ulong KindLocalAmbiguousDst = 13835058055282163712; // Metadata: 0x001DF693
		private const int KindShift = 62; // Metadata: 0x001DF69B
		private const string TicksField = "ticks"; // Metadata: 0x001DF69F
		private const string DateDataField = "dateData"; // Metadata: 0x001DF6A8
		private ulong dateData; // 0x00
	
		// Properties
		internal long InternalTicks { get; } // 0x00589668-0x00589674 
		private ulong InternalKind { get; } // 0x00589674-0x00589680 
		public DateTime Date { get; } // 0x0058973C-0x00589778 
		public int Day { get; } // 0x00589780-0x0058978C 
		public DayOfWeek DayOfWeek { get; } // 0x0058978C-0x005897E0 
		public int DayOfYear { get; } // 0x005897E0-0x005897EC 
		public int Hour { get; } // 0x005897FC-0x00589838 
		public DateTimeKind Kind { get; } // 0x00589838-0x0058985C 
		public int Minute { get; } // 0x0058985C-0x00589898 
		public int Month { get; } // 0x00589898-0x005898A4 
		public static DateTime Now { get; } // 0x00AC3B6C-0x00AC3C94 
		public static DateTime UtcNow { get; } // 0x00AC3C94-0x00AC3D14 
		public int Second { get; } // 0x005898A4-0x005898E0 
		public long Ticks { get; } // 0x005898E0-0x005898EC 
		public TimeSpan TimeOfDay { get; } // 0x005898EC-0x00589920 
		public static DateTime Today { get; } // 0x00AC3D88-0x00AC3E24 
		public int Year { get; } // 0x00589920-0x0058992C 
	
		// Constructors
		public DateTime(long ticks); // 0x0058961C-0x00589624
		private DateTime(ulong dateData); // 0x00589624-0x0058962C
		public DateTime(long ticks, DateTimeKind kind); // 0x0058962C-0x00589634
		internal DateTime(long ticks, DateTimeKind kind, bool isAmbiguousDst); // 0x00589634-0x00589640
		public DateTime(int year, int month, int day); // 0x00589640-0x00589648
		public DateTime(int year, int month, int day, int hour, int minute, int second); // 0x00589648-0x00589650
		public DateTime(int year, int month, int day, int hour, int minute, int second, DateTimeKind kind); // 0x00589650-0x00589658
		public DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond); // 0x00589658-0x00589660
		private DateTime(SerializationInfo info, StreamingContext context); // 0x00589660-0x00589668
		static DateTime(); // 0x00AC5AF4-0x00AC5BF0
	
		// Methods
		public DateTime Add(TimeSpan value); // 0x00589680-0x00589688
		private DateTime Add(double value, int scale); // 0x00589688-0x00589690
		public DateTime AddDays(double value); // 0x00589690-0x005896A0
		public DateTime AddHours(double value); // 0x005896A0-0x005896B0
		public DateTime AddMilliseconds(double value); // 0x005896B0-0x005896BC
		public DateTime AddMinutes(double value); // 0x005896BC-0x005896C8
		public DateTime AddMonths(int months); // 0x005896C8-0x005896D0
		public DateTime AddSeconds(double value); // 0x005896D0-0x005896DC
		public DateTime AddTicks(long value); // 0x005896DC-0x005896E4
		public DateTime AddYears(int value); // 0x005896E4-0x005896EC
		public static int Compare(DateTime t1, DateTime t2); // 0x00AC329C-0x00AC33C8
		public int CompareTo(object value); // 0x005896EC-0x005896F4
		public int CompareTo(DateTime value); // 0x005896F4-0x00589710
		private static long DateToTicks(int year, int month, int day); // 0x00AC1F58-0x00AC2218
		private static long TimeToTicks(int hour, int minute, int second); // 0x00AC2218-0x00AC3058
		public static int DaysInMonth(int year, int month); // 0x00AC3058-0x00AC329C
		public override bool Equals(object value); // 0x00589710-0x00589718
		public bool Equals(DateTime value); // 0x00589718-0x0058972C
		public static DateTime FromBinary(long dateData); // 0x00AC3560-0x00AC376C
		internal static DateTime FromBinaryRaw(long dateData); // 0x00AC376C-0x00AC382C
		public static DateTime FromFileTimeUtc(long fileTime); // 0x00AC382C-0x00AC39D8
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x0058972C-0x00589734
		public static DateTime SpecifyKind(DateTime value, DateTimeKind kind); // 0x00AC39D8-0x00AC3B6C
		internal long ToBinaryRaw(); // 0x00589734-0x0058973C
		private int GetDatePart(int part); // 0x00589778-0x00589780
		public override int GetHashCode(); // 0x005897EC-0x005897FC
		internal static long GetSystemTimeAsFileTime(); // 0x00AC3D14-0x00AC3D88
		public static bool IsLeapYear(int year); // 0x00AC33C8-0x00AC3560
		public static DateTime Parse(string s); // 0x00AC3E24-0x00AC3EC0
		public static DateTime Parse(string s, IFormatProvider provider); // 0x00ABF058-0x00ABF104
		public TimeSpan Subtract(DateTime value); // 0x0058992C-0x00589940
		public long ToFileTime(); // 0x00589940-0x00589974
		public long ToFileTimeUtc(); // 0x00589974-0x0058997C
		public DateTime ToLocalTime(); // 0x0058997C-0x00589988
		internal DateTime ToLocalTime(bool throwOnOverflow); // 0x00589988-0x00589994
		public string ToShortDateString(); // 0x00589994-0x0058999C
		public override string ToString(); // 0x0058999C-0x005899A4
		public string ToString(string format); // 0x005899A4-0x005899AC
		public string ToString(IFormatProvider provider); // 0x005899AC-0x005899B4
		public string ToString(string format, IFormatProvider provider); // 0x005899B4-0x005899BC
		public DateTime ToUniversalTime(); // 0x005899BC-0x005899CC
		public static bool TryParse(string s, out DateTime result); // 0x00AC465C-0x00AC4708
		public static bool TryParse(string s, IFormatProvider provider, DateTimeStyles styles, out DateTime result); // 0x00AC4814-0x00AC48EC
		public static DateTime operator +(DateTime d, TimeSpan t); // 0x00AC48EC-0x00AC49D0
		public static DateTime operator -(DateTime d, TimeSpan t); // 0x00AC49D0-0x00AC4AAC
		public static TimeSpan operator -(DateTime d1, DateTime d2); // 0x00AC4AAC-0x00AC4ABC
		public static bool operator ==(DateTime d1, DateTime d2); // 0x00AC4ABC-0x00AC4ACC
		public static bool operator !=(DateTime d1, DateTime d2); // 0x00AC4ACC-0x00AC4ADC
		public static bool operator <(DateTime t1, DateTime t2); // 0x00AC4ADC-0x00AC4AF0
		public static bool operator <=(DateTime t1, DateTime t2); // 0x00AC4AF0-0x00AC4B04
		public static bool operator >(DateTime t1, DateTime t2); // 0x00AC4B04-0x00AC4B18
		public static bool operator >=(DateTime t1, DateTime t2); // 0x00AC4B18-0x00AC58B4
		public TypeCode GetTypeCode(); // 0x005899CC-0x005899D4
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x005899D4-0x005899E0
		char IConvertible.ToChar(IFormatProvider provider); // 0x005899E0-0x005899EC
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x005899EC-0x005899F8
		byte IConvertible.ToByte(IFormatProvider provider); // 0x005899F8-0x00589A04
		short IConvertible.ToInt16(IFormatProvider provider); // 0x00589A04-0x00589A10
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x00589A10-0x00589A1C
		int IConvertible.ToInt32(IFormatProvider provider); // 0x00589A1C-0x00589A28
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x00589A28-0x00589A34
		long IConvertible.ToInt64(IFormatProvider provider); // 0x00589A34-0x00589A40
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x00589A40-0x00589A4C
		float IConvertible.ToSingle(IFormatProvider provider); // 0x00589A4C-0x00589A58
		double IConvertible.ToDouble(IFormatProvider provider); // 0x00589A58-0x00589A64
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x00589A64-0x00589A70
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x00589A70-0x00589A78
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x00589A78-0x00589A80
		internal static bool TryCreate(int year, int month, int day, int hour, int minute, int second, int millisecond, out DateTime result); // 0x00AC58B4-0x00AC5AF4
	}

	[Serializable]
	[ComVisible] // 0x004B2690-0x004B26A4
	public enum DateTimeKind // TypeDefIndex: 144
	{
		Unspecified = 0,
		Utc = 1,
		Local = 2
	}

	[Serializable]
	public struct DateTimeOffset : IComparable, IFormattable, ISerializable, IDeserializationCallback, IComparable<DateTimeOffset>, IEquatable<DateTimeOffset> // TypeDefIndex: 145
	{
		// Fields
		public static readonly DateTimeOffset MinValue; // 0x00
		public static readonly DateTimeOffset MaxValue; // 0x10
		private DateTime m_dateTime; // 0x00
		private short m_offsetMinutes; // 0x08
	
		// Properties
		public DateTime UtcDateTime { get; } // 0x00589A88-0x00589A90 
		private DateTime ClockDateTime { get; } // 0x00589A90-0x00589A98 
		public TimeSpan Offset { get; } // 0x00589A98-0x00589AD0 
		public long Ticks { get; } // 0x00589AD0-0x00589AEC 
	
		// Constructors
		public DateTimeOffset(long ticks, TimeSpan offset); // 0x00589A80-0x00589A88
		private DateTimeOffset(SerializationInfo info, StreamingContext context); // 0x00589B1C-0x00589B24
		static DateTimeOffset(); // 0x00AC8E3C-0x00AC8F0C
	
		// Methods
		int IComparable.CompareTo(object obj); // 0x00589AEC-0x00589AF4
		public int CompareTo(DateTimeOffset other); // 0x00589AF4-0x00589AFC
		public override bool Equals(object obj); // 0x00589AFC-0x00589B04
		public bool Equals(DateTimeOffset other); // 0x00589B04-0x00589B0C
		void IDeserializationCallback.OnDeserialization(object sender); // 0x00589B0C-0x00589B14
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00589B14-0x00589B1C
		public override int GetHashCode(); // 0x00589B24-0x00589B44
		public override string ToString(); // 0x00589B44-0x00589B4C
		public string ToString(string format, IFormatProvider formatProvider); // 0x00589B4C-0x00589D20
		private static short ValidateOffset(TimeSpan offset); // 0x00AC81B4-0x00AC82F4
		private static DateTime ValidateDate(DateTime dateTime, TimeSpan offset); // 0x00AC82F4-0x00AC8E3C
	}

	[Serializable]
	[ComVisible] // 0x004B26A4-0x004B26B8
	public enum DayOfWeek // TypeDefIndex: 146
	{
		Sunday = 0,
		Monday = 1,
		Tuesday = 2,
		Wednesday = 3,
		Thursday = 4,
		Friday = 5,
		Saturday = 6
	}

	[Serializable]
	[ComVisible] // 0x004B26B8-0x004B26CC
	public sealed class DBNull : ISerializable, IConvertible // TypeDefIndex: 147
	{
		// Fields
		public static readonly DBNull Value; // 0x00
	
		// Constructors
		private DBNull(); // 0x00AC131C-0x00AC1324
		private DBNull(SerializationInfo info, StreamingContext context); // 0x00AC1324-0x00AC13B8
		static DBNull(); // 0x00AC1C30-0x00AC1F58
	
		// Methods
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00AC13B8-0x00AC13D4
		public override string ToString(); // 0x00AC13D4-0x00AC1424
		public string ToString(IFormatProvider provider); // 0x00AC1424-0x00AC1474
		public TypeCode GetTypeCode(); // 0x00AC1474-0x00AC147C
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x00AC147C-0x00AC1500
		char IConvertible.ToChar(IFormatProvider provider); // 0x00AC1500-0x00AC1584
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x00AC1584-0x00AC1608
		byte IConvertible.ToByte(IFormatProvider provider); // 0x00AC1608-0x00AC168C
		short IConvertible.ToInt16(IFormatProvider provider); // 0x00AC168C-0x00AC1710
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x00AC1710-0x00AC1794
		int IConvertible.ToInt32(IFormatProvider provider); // 0x00AC1794-0x00AC1818
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x00AC1818-0x00AC189C
		long IConvertible.ToInt64(IFormatProvider provider); // 0x00AC189C-0x00AC1920
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x00AC1920-0x00AC19A4
		float IConvertible.ToSingle(IFormatProvider provider); // 0x00AC19A4-0x00AC1A28
		double IConvertible.ToDouble(IFormatProvider provider); // 0x00AC1A28-0x00AC1AAC
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x00AC1AAC-0x00AC1B30
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x00AC1B30-0x00AC1BB4
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x00AC1BB4-0x00AC1C30
	}

	[Serializable]
	[ComVisible] // 0x004B26CC-0x004B26E0
	public struct Decimal : IFormattable, IComparable, IConvertible, IDeserializationCallback, IComparable<decimal>, IEquatable<decimal> // TypeDefIndex: 148
	{
		// Fields
		private const int SignMask = -2147483648; // Metadata: 0x001DF6DC
		private const byte DECIMAL_NEG = 128; // Metadata: 0x001DF6E0
		private const byte DECIMAL_ADD = 0; // Metadata: 0x001DF6E1
		private const int ScaleMask = 16711680; // Metadata: 0x001DF6E2
		private const int ScaleShift = 16; // Metadata: 0x001DF6E6
		private const int MaxInt32Scale = 9; // Metadata: 0x001DF6EA
		private static uint[] Powers10; // 0x00
		[DecimalConstant] // 0x004B8A44-0x004B8A68
		public static readonly decimal Zero; // 0x08
		[DecimalConstant] // 0x004B8A68-0x004B8A8C
		public static readonly decimal One; // 0x18
		[DecimalConstant] // 0x004B8A8C-0x004B8AB0
		public static readonly decimal MinusOne; // 0x28
		[DecimalConstant] // 0x004B8AB0-0x004B8AD4
		public static readonly decimal MaxValue; // 0x38
		[DecimalConstant] // 0x004B8AD4-0x004B8AF8
		public static readonly decimal MinValue; // 0x48
		[DecimalConstant] // 0x004B8AF8-0x004B8B1C
		private static readonly decimal NearNegativeZero; // 0x58
		[DecimalConstant] // 0x004B8B1C-0x004B8B40
		private static readonly decimal NearPositiveZero; // 0x68
		private int flags; // 0x00
		private int hi; // 0x04
		private int lo; // 0x08
		private int mid; // 0x0C
	
		// Constructors
		public Decimal(int value); // 0x00580A44-0x00580A68
		[CLSCompliant] // 0x004BA634-0x004BA648
		public Decimal(uint value); // 0x00580A68-0x00580A74
		public Decimal(long value); // 0x00580A74-0x00580A9C
		[CLSCompliant] // 0x004BA648-0x004BA65C
		public Decimal(ulong value); // 0x00580A9C-0x00580AAC
		public Decimal(float value); // 0x00580AAC-0x00580AB4
		public Decimal(double value); // 0x00580AB4-0x00580ABC
		public Decimal(int[] bits); // 0x00580ABC-0x00580AC4
		public Decimal(int lo, int mid, int hi, bool isNegative, byte scale); // 0x00580ACC-0x00580AD8
		private Decimal(int lo, int mid, int hi, int flags); // 0x00580AE8-0x00580AF0
		static Decimal(); // 0x0078CBB8-0x0078CCC8
	
		// Methods
		private void SetBits(int[] bits); // 0x00580AC4-0x00580ACC
		[OnSerializing] // 0x004BA65C-0x004BA66C
		private void OnSerializing(StreamingContext ctx); // 0x00580AD8-0x00580AE0
		void IDeserializationCallback.OnDeserialization(object sender); // 0x00580AE0-0x00580AE8
		[ReliabilityContract] // 0x004BA66C-0x004BA684
		private static int FCallCompare(ref decimal d1, ref decimal d2); // 0x0078B168-0x0078B4E0
		public int CompareTo(object value); // 0x00580AF0-0x00580AF8
		public int CompareTo(decimal value); // 0x00580AF8-0x00580B00
		public override bool Equals(object value); // 0x00580B00-0x00580B08
		public bool Equals(decimal value); // 0x00580B08-0x00580B10
		public override int GetHashCode(); // 0x00580B10-0x00580B18
		public override string ToString(); // 0x00580B18-0x00580B50
		public string ToString(IFormatProvider provider); // 0x00580B50-0x00580B8C
		public string ToString(string format, IFormatProvider provider); // 0x00580B8C-0x00580BD4
		public static decimal Parse(string s, IFormatProvider provider); // 0x0078B4E0-0x0078B518
		public static decimal Parse(string s, NumberStyles style, IFormatProvider provider); // 0x0078B518-0x0078B56C
		public static int[] GetBits(decimal d); // 0x0078AE98-0x0078B168
		internal static decimal ToDecimal(byte[] buffer); // 0x0078B56C-0x0078B69C
		public static decimal Round(decimal d, int decimals); // 0x0078B69C-0x0078B718
		private static void FCallRound(ref decimal d, int decimals); // 0x0078B718-0x0078B71C
		public static byte ToByte(decimal value); // 0x0078B71C-0x0078B8AC
		[CLSCompliant] // 0x004BA684-0x004BA698
		public static sbyte ToSByte(decimal value); // 0x0078B9A8-0x0078BB3C
		public static short ToInt16(decimal value); // 0x0078BC44-0x0078BDD8
		public static double ToDouble(decimal d); // 0x0078BDD8-0x0078BDDC
		internal static int FCallToInt32(decimal d); // 0x0078BDDC-0x0078BDE0
		public static int ToInt32(decimal d); // 0x0078BB3C-0x0078BC44
		public static long ToInt64(decimal d); // 0x0078BDE4-0x0078BEE4
		[CLSCompliant] // 0x004BA698-0x004BA6AC
		public static ushort ToUInt16(decimal value); // 0x0078BEE4-0x0078C074
		[CLSCompliant] // 0x004BA6AC-0x004BA6C0
		public static uint ToUInt32(decimal d); // 0x0078B8AC-0x0078B9A8
		[CLSCompliant] // 0x004BA6C0-0x004BA6D4
		public static ulong ToUInt64(decimal d); // 0x0078C074-0x0078C168
		public static float ToSingle(decimal d); // 0x0078C168-0x0078C16C
		private static void FCallTruncate(ref decimal d); // 0x0078BDE0-0x0078BDE4
		public static implicit operator decimal(byte value); // 0x0078C16C-0x0078C178
		[CLSCompliant] // 0x004BA6D4-0x004BA6E8
		public static implicit operator decimal(sbyte value); // 0x0078C178-0x0078C190
		public static implicit operator decimal(short value); // 0x0078C190-0x0078C1A8
		[CLSCompliant] // 0x004BA6E8-0x004BA6FC
		public static implicit operator decimal(ushort value); // 0x0078C1A8-0x0078C1B4
		public static implicit operator decimal(int value); // 0x0078C1B4-0x0078C1C4
		[CLSCompliant] // 0x004BA6FC-0x004BA710
		public static implicit operator decimal(uint value); // 0x0078C1C4-0x0078C1D0
		public static implicit operator decimal(long value); // 0x0078C1D0-0x0078C1E4
		[CLSCompliant] // 0x004BA710-0x004BA724
		public static implicit operator decimal(ulong value); // 0x0078C1E4-0x0078C1F4
		public static explicit operator decimal(float value); // 0x0078C1F4-0x0078C21C
		public static explicit operator decimal(double value); // 0x0078C21C-0x0078C244
		public static explicit operator float(decimal value); // 0x0078C244-0x0078C2B8
		public static explicit operator double(decimal value); // 0x0078C2B8-0x0078C32C
		public static bool operator ==(decimal d1, decimal d2); // 0x0078C32C-0x0078C3AC
		public static bool operator !=(decimal d1, decimal d2); // 0x0078C3AC-0x0078CBB8
		public TypeCode GetTypeCode(); // 0x00580BD4-0x00580BDC
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x00580BDC-0x00580C50
		char IConvertible.ToChar(IFormatProvider provider); // 0x00580C50-0x00580C5C
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x00580C5C-0x00580C64
		byte IConvertible.ToByte(IFormatProvider provider); // 0x00580C64-0x00580C6C
		short IConvertible.ToInt16(IFormatProvider provider); // 0x00580C6C-0x00580C74
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x00580C74-0x00580C7C
		int IConvertible.ToInt32(IFormatProvider provider); // 0x00580C7C-0x00580C84
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x00580C84-0x00580C8C
		long IConvertible.ToInt64(IFormatProvider provider); // 0x00580C8C-0x00580C94
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x00580C94-0x00580C9C
		float IConvertible.ToSingle(IFormatProvider provider); // 0x00580C9C-0x00580CA4
		double IConvertible.ToDouble(IFormatProvider provider); // 0x00580CA4-0x00580CAC
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x00580CAC-0x00580CB8
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x00580CB8-0x00580CC4
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x00580CC4-0x00580EBC
	}

	[Serializable]
	internal class DefaultBinder : Binder // TypeDefIndex: 149
	{
		// Nested types
		internal class BinderState // TypeDefIndex: 150
		{
			// Fields
			internal int[] m_argsMap; // 0x10
			internal int m_originalSize; // 0x18
			internal bool m_isParamArray; // 0x1C
	
			// Constructors
			internal BinderState(int[] argsMap, int originalSize, bool isParamArray); // 0x0078EEAC-0x0078EEF4
		}
	
		[Serializable]
		[CompilerGenerated] // 0x004B26E0-0x004B26F0
		private sealed class __c // TypeDefIndex: 151
		{
			// Fields
			public static readonly __c __9; // 0x00
			public static Predicate<Type> __9__3_0; // 0x08
	
			// Constructors
			static __c(); // 0x00791CF0-0x00791D54
			public __c(); // 0x00791D54-0x00791D5C
	
			// Methods
			internal bool _SelectProperty_b__3_0(Type t); // 0x00791D5C-0x00791DC8
		}
	
		// Constructors
		public DefaultBinder(); // 0x00791CE8-0x00791CF0
	
		// Methods
		public override MethodBase BindToMethod(BindingFlags bindingAttr, MethodBase[] match, ref object[] args, ParameterModifier[] modifiers, CultureInfo cultureInfo, string[] names, out object state); // 0x0078CCC8-0x0078EB64
		public override FieldInfo BindToField(BindingFlags bindingAttr, FieldInfo[] match, object value, CultureInfo cultureInfo); // 0x0078F180-0x0078F5D4
		public override MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers); // 0x0078F68C-0x0078FD40
		public override PropertyInfo SelectProperty(BindingFlags bindingAttr, PropertyInfo[] match, Type returnType, Type[] indexes, ParameterModifier[] modifiers); // 0x0078FF88-0x007908C8
		public override object ChangeType(object value, Type type, CultureInfo cultureInfo); // 0x00791108-0x0079118C
		public override void ReorderArgumentArray(ref object[] args, object state); // 0x0079118C-0x00791444
		public static MethodBase ExactBinding(MethodBase[] match, Type[] types, ParameterModifier[] modifiers); // 0x00791444-0x0079169C
		public static PropertyInfo ExactPropertyBinding(PropertyInfo[] match, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x007917D8-0x00791AC0
		private static int FindMostSpecific(ParameterInfo[] p1, int[] paramOrder1, Type paramArrayType1, ParameterInfo[] p2, int[] paramOrder2, Type paramArrayType2, Type[] types, object[] args); // 0x00790C64-0x00791050
		private static int FindMostSpecificType(Type c1, Type c2, Type t); // 0x007908C8-0x00790C64
		private static int FindMostSpecificMethod(MethodBase m1, int[] paramOrder1, Type paramArrayType1, MethodBase m2, int[] paramOrder2, Type paramArrayType2, Type[] types, object[] args); // 0x0078F064-0x0078F180
		private static int FindMostSpecificField(FieldInfo cur1, FieldInfo cur2); // 0x0078F5D4-0x0078F68C
		private static int FindMostSpecificProperty(PropertyInfo cur1, PropertyInfo cur2); // 0x00791050-0x00791108
		internal static bool CompareMethodSigAndName(MethodBase m1, MethodBase m2); // 0x00791AC0-0x00791C38
		internal static int GetHierarchyDepth(Type t); // 0x00791C38-0x00791CE8
		internal static MethodBase FindMostDerivedNewSlotMeth(MethodBase[] match, int cMatches); // 0x0079169C-0x007917D8
		private static void ReorderParams(int[] paramOrder, object[] vars); // 0x0078EEF4-0x0078F064
		private static bool CreateParamOrder(int[] paramOrder, ParameterInfo[] pars, string[] names); // 0x0078EB64-0x0078EDB8
		private static bool CanConvertPrimitive(RuntimeType source, RuntimeType target); // 0x0078FD40-0x0078FF88
		private static bool CanConvertPrimitiveObjectToType(object source, RuntimeType type); // 0x0078EDB8-0x0078EEAC
	}

	[Serializable]
	[ComVisible] // 0x004B26F0-0x004B2704
	public class DivideByZeroException : ArithmeticException // TypeDefIndex: 152
	{
		// Constructors
		public DivideByZeroException(); // 0x00862124-0x00862188
		protected DivideByZeroException(SerializationInfo info, StreamingContext context); // 0x00862190-0x00862198
	}

	[Serializable]
	[ComVisible] // 0x004B2704-0x004B2718
	public class DllNotFoundException : TypeLoadException // TypeDefIndex: 153
	{
		// Constructors
		public DllNotFoundException(); // 0x00862198-0x008621FC
		public DllNotFoundException(string message); // 0x008621FC-0x0086222C
		protected DllNotFoundException(SerializationInfo info, StreamingContext context); // 0x0086222C-0x00862234
	}

	[Serializable]
	[ComVisible] // 0x004B2718-0x004B272C
	public struct Double : IComparable, IFormattable, IConvertible, IComparable<double>, IEquatable<double> // TypeDefIndex: 154
	{
		// Fields
		internal double m_value; // 0x00
		public const double MinValue = -1.7976931348623157E+308; // Metadata: 0x001DF6EE
		public const double MaxValue = 1.7976931348623157E+308; // Metadata: 0x001DF6F6
		public const double Epsilon = 5E-324; // Metadata: 0x001DF6FE
		public const double NegativeInfinity = -1D / 0D; // Metadata: 0x001DF706
		public const double PositiveInfinity = 1D / 0D; // Metadata: 0x001DF70E
		public const double NaN = 0D / 0D; // Metadata: 0x001DF716
		internal static double NegativeZero; // 0x00
	
		// Constructors
		static Double(); // 0x00863244-0x008632C0
	
		// Methods
		public static bool IsInfinity(double d); // 0x00862234-0x0086224C
		public static bool IsPositiveInfinity(double d); // 0x0086224C-0x00862260
		public static bool IsNegativeInfinity(double d); // 0x00862260-0x00862274
		[ReliabilityContract] // 0x004BA724-0x004BA73C
		public static bool IsNaN(double d); // 0x00862274-0x00862778
		public int CompareTo(object value); // 0x005817F8-0x00581800
		public int CompareTo(double value); // 0x00581800-0x00581808
		public override bool Equals(object obj); // 0x00581808-0x00581810
		public bool Equals(double obj); // 0x00581810-0x00581818
		public override int GetHashCode(); // 0x00581818-0x00581824
		public override string ToString(); // 0x00581824-0x00581858
		public string ToString(string format); // 0x00581858-0x00581898
		public string ToString(IFormatProvider provider); // 0x00581898-0x005818D0
		public string ToString(string format, IFormatProvider provider); // 0x005818D0-0x00581914
		public static double Parse(string s); // 0x00862778-0x008627F8
		public static double Parse(string s, IFormatProvider provider); // 0x00862800-0x00862890
		public static double Parse(string s, NumberStyles style, IFormatProvider provider); // 0x00862890-0x00862930
		private static double Parse(string s, NumberStyles style, NumberFormatInfo info); // 0x008627F8-0x00862800
		public static bool TryParse(string s, out double result); // 0x00862930-0x008629BC
		private static bool TryParse(string s, NumberStyles style, NumberFormatInfo info, out double result); // 0x008629BC-0x00863244
		public TypeCode GetTypeCode(); // 0x00581914-0x0058191C
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x0058191C-0x00581924
		char IConvertible.ToChar(IFormatProvider provider); // 0x00581924-0x00581930
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x00581930-0x00581938
		byte IConvertible.ToByte(IFormatProvider provider); // 0x00581938-0x00581940
		short IConvertible.ToInt16(IFormatProvider provider); // 0x00581940-0x00581948
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x00581948-0x00581950
		int IConvertible.ToInt32(IFormatProvider provider); // 0x00581950-0x00581958
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x00581958-0x00581960
		long IConvertible.ToInt64(IFormatProvider provider); // 0x00581960-0x00581968
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x00581968-0x00581970
		float IConvertible.ToSingle(IFormatProvider provider); // 0x00581970-0x00581978
		double IConvertible.ToDouble(IFormatProvider provider); // 0x00581978-0x00581980
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x00581980-0x00581988
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x00581988-0x00581994
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x00581994-0x005819EC
	}

	[Serializable]
	internal sealed class Empty : ISerializable // TypeDefIndex: 155
	{
		// Fields
		public static readonly Empty Value; // 0x00
	
		// Constructors
		private Empty(); // 0x008632C0-0x008632C8
		static Empty(); // 0x008633B0-0x00863414
	
		// Methods
		public override string ToString(); // 0x008632C8-0x00863318
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00863318-0x008633B0
	}

	[Serializable]
	[ComVisible] // 0x004B272C-0x004B2740
	public class EntryPointNotFoundException : TypeLoadException // TypeDefIndex: 156
	{
		// Constructors
		public EntryPointNotFoundException(); // 0x00863414-0x00863478
		public EntryPointNotFoundException(string message); // 0x00863478-0x008634A8
		protected EntryPointNotFoundException(SerializationInfo info, StreamingContext context); // 0x008634A8-0x008634B0
	}

	[Serializable]
	[ComVisible] // 0x004B2740-0x004B2754
	public abstract struct Enum : IComparable, IFormattable, IConvertible // TypeDefIndex: 157
	{
		// Fields
		private static readonly char[] enumSeperatorCharArray; // 0x00
		private const string enumSeperator = ", "; // Metadata: 0x001DF71E
	
		// Nested types
		private enum ParseFailureKind // TypeDefIndex: 158
		{
			None = 0,
			Argument = 1,
			ArgumentNull = 2,
			ArgumentWithParameter = 3,
			UnhandledException = 4
		}
	
		private struct EnumResult // TypeDefIndex: 159
		{
			// Fields
			internal object parsedEnum; // 0x00
			internal bool canThrow; // 0x08
			internal ParseFailureKind m_failure; // 0x0C
			internal string m_failureMessageID; // 0x10
			internal string m_failureParameter; // 0x18
			internal object m_failureMessageFormatArgument; // 0x20
			internal Exception m_innerException; // 0x28
	
			// Methods
			internal void Init(bool canMethodThrow); // 0x005819EC-0x005819F8
			internal void SetFailure(Exception unhandledException); // 0x005819F8-0x00581A08
			internal void SetFailure(ParseFailureKind failure, string failureParameter); // 0x00581A08-0x00581A10
			internal void SetFailure(ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument); // 0x00581A10-0x00581A18
			internal Exception GetEnumParseException(); // 0x00581A18-0x00581DF0
		}
	
		private class ValuesAndNames // TypeDefIndex: 160
		{
			// Fields
			public ulong[] Values; // 0x10
			public string[] Names; // 0x18
	
			// Constructors
			public ValuesAndNames(ulong[] values, string[] names); // 0x00863608-0x00863640
		}
	
		// Constructors
		protected Enum(); // 0x00867888-0x00867890
		static Enum(); // 0x00867890-0x0086791C
	
		// Methods
		private static ValuesAndNames GetCachedValuesAndNames(RuntimeType enumType, bool getNames); // 0x008634B0-0x00863604
		private static string InternalFormattedHexString(object value); // 0x00863640-0x00863A54
		private static string InternalFormat(RuntimeType eT, object value); // 0x00863A54-0x00863B80
		private static string InternalFlagsFormat(RuntimeType eT, object value); // 0x00863C60-0x00863E68
		internal static ulong ToUInt64(object value); // 0x00863E68-0x00863FF4
		private static int InternalCompareTo(object o1, object o2); // 0x00863FF4-0x00863FF8
		internal static RuntimeType InternalGetUnderlyingType(RuntimeType enumType); // 0x00863FF8-0x00863FFC
		private static bool GetEnumValuesAndNames(RuntimeType enumType, out ulong[] values, out string[] names); // 0x00863604-0x00863608
		private static object InternalBoxEnum(RuntimeType enumType, long value); // 0x00863FFC-0x00864000
		[ComVisible] // 0x004BA73C-0x004BA750
		public static object Parse(Type enumType, string value); // 0x00864000-0x00864078
		[ComVisible] // 0x004BA750-0x004BA764
		public static object Parse(Type enumType, string value, bool ignoreCase); // 0x00864078-0x008641B0
		private static bool TryParseEnum(Type enumType, string value, bool ignoreCase, ref EnumResult parseResult); // 0x008641B0-0x00864A9C
		[ComVisible] // 0x004BA764-0x004BA778
		public static Type GetUnderlyingType(Type enumType); // 0x0085B700-0x0085B7D0
		[ComVisible] // 0x004BA778-0x004BA78C
		public static Array GetValues(Type enumType); // 0x0086517C-0x0086524C
		internal static ulong[] InternalGetValues(RuntimeType enumType); // 0x0086524C-0x008652C4
		[ComVisible] // 0x004BA78C-0x004BA7A0
		public static string GetName(Type enumType, object value); // 0x00863B80-0x00863C60
		[ComVisible] // 0x004BA7A0-0x004BA7B4
		public static string[] GetNames(Type enumType); // 0x008652C4-0x00865394
		internal static string[] InternalGetNames(RuntimeType enumType); // 0x00865394-0x0086540C
		[ComVisible] // 0x004BA7B4-0x004BA7C8
		public static object ToObject(Type enumType, object value); // 0x00864A9C-0x00864FB0
		[ComVisible] // 0x004BA7C8-0x004BA7DC
		public static bool IsDefined(Type enumType, object value); // 0x0086643C-0x0086651C
		private object get_value(); // 0x0086651C-0x00866520
		internal object GetValue(); // 0x00866520-0x00866524
		private int get_hashcode(); // 0x00866524-0x00866528
		public override bool Equals(object obj); // 0x00866528-0x00866530
		public override int GetHashCode(); // 0x00866530-0x00866534
		public override string ToString(); // 0x00866534-0x00866604
		[Obsolete] // 0x004BA7DC-0x004BA814
		public string ToString(string format, IFormatProvider provider); // 0x00866604-0x00866608
		public int CompareTo(object target); // 0x00866834-0x00866A4C
		public string ToString(string format); // 0x00866608-0x00866834
		[Obsolete] // 0x004BA814-0x004BA84C
		public string ToString(IFormatProvider provider); // 0x00866A7C-0x00866A88
		public TypeCode GetTypeCode(); // 0x00866A88-0x00866E54
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x00866E54-0x00866F00
		char IConvertible.ToChar(IFormatProvider provider); // 0x00866F00-0x00866FAC
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x00866FAC-0x00867058
		byte IConvertible.ToByte(IFormatProvider provider); // 0x00867058-0x00867104
		short IConvertible.ToInt16(IFormatProvider provider); // 0x00867104-0x008671B0
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x008671B0-0x0086725C
		int IConvertible.ToInt32(IFormatProvider provider); // 0x0086725C-0x00867308
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x00867308-0x008673B4
		long IConvertible.ToInt64(IFormatProvider provider); // 0x008673B4-0x00867460
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x00867460-0x0086750C
		float IConvertible.ToSingle(IFormatProvider provider); // 0x0086750C-0x008675B8
		double IConvertible.ToDouble(IFormatProvider provider); // 0x008675B8-0x00867664
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x00867664-0x00867710
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x00867710-0x00867808
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x00867808-0x00867888
		[CLSCompliant] // 0x004BA84C-0x004BA88C
		[ComVisible] // 0x004BA84C-0x004BA88C
		public static object ToObject(Type enumType, sbyte value); // 0x008655D8-0x008657A4
		[ComVisible] // 0x004BA88C-0x004BA8A0
		public static object ToObject(Type enumType, short value); // 0x008657A4-0x00865970
		[ComVisible] // 0x004BA8A0-0x004BA8B4
		public static object ToObject(Type enumType, int value); // 0x0086540C-0x008655D8
		[ComVisible] // 0x004BA8B4-0x004BA8C8
		public static object ToObject(Type enumType, byte value); // 0x00865D08-0x00865ED4
		[CLSCompliant] // 0x004BA8C8-0x004BA908
		[ComVisible] // 0x004BA8C8-0x004BA908
		public static object ToObject(Type enumType, ushort value); // 0x00865ED4-0x008660A0
		[CLSCompliant] // 0x004BA908-0x004BA948
		[ComVisible] // 0x004BA908-0x004BA948
		public static object ToObject(Type enumType, uint value); // 0x00865B3C-0x00865D08
		[ComVisible] // 0x004BA948-0x004BA95C
		public static object ToObject(Type enumType, long value); // 0x00865970-0x00865B3C
		[CLSCompliant] // 0x004BA95C-0x004BA99C
		[ComVisible] // 0x004BA95C-0x004BA99C
		public static object ToObject(Type enumType, ulong value); // 0x00864FB0-0x0086517C
		private static object ToObject(Type enumType, char value); // 0x008660A0-0x0086626C
		private static object ToObject(Type enumType, bool value); // 0x0086626C-0x0086643C
	}

	[Serializable]
	[ComVisible] // 0x004B2754-0x004B2768
	public class EventArgs // TypeDefIndex: 161
	{
		// Fields
		public static readonly EventArgs Empty; // 0x00
	
		// Constructors
		public EventArgs(); // 0x00857414-0x0085741C
		static EventArgs(); // 0x00868DA0-0x00868E04
	}

	[Serializable]
	[ComVisible] // 0x004B2768-0x004B277C
	public delegate void EventHandler(object sender, EventArgs e); // TypeDefIndex: 162; 0x00868E14-0x008691F4

	[Serializable]
	public delegate void EventHandler<TEventArgs>(object sender, TEventArgs e); // TypeDefIndex: 163; 0x00000000-0x00000000

	[Serializable]
	[ClassInterface] // 0x004B277C-0x004B2808
	[ComDefaultInterface] // 0x004B277C-0x004B2808
	[ComVisible] // 0x004B277C-0x004B2808
	public class Exception : ISerializable, _Exception // TypeDefIndex: 164
	{
		// Fields
		[System.Runtime.Serialization.OptionalField] // 0x004B8B40-0x004B8B50
		private static object s_EDILock; // 0x00
		private string _className; // 0x10
		internal string _message; // 0x18
		private IDictionary _data; // 0x20
		private Exception _innerException; // 0x28
		private string _helpURL; // 0x30
		private object _stackTrace; // 0x38
		private string _stackTraceString; // 0x40
		private string _remoteStackTraceString; // 0x48
		private int _remoteStackIndex; // 0x50
		private object _dynamicMethods; // 0x58
		internal int _HResult; // 0x60
		private string _source; // 0x68
		[System.Runtime.Serialization.OptionalField] // 0x004B8B50-0x004B8B88
		private SafeSerializationManager _safeSerializationManager; // 0x70
		internal StackTrace[] captured_traces; // 0x78
		private IntPtr[] native_trace_ips; // 0x80
		private const int _COMPlusExceptionCode = -532462766; // Metadata: 0x001DF738
	
		// Properties
		public virtual string Message { get; } // 0x008692D0-0x008693A8 
		public Exception InnerException { get; } // 0x008693F8-0x00869400 
		public virtual string StackTrace { get; } // 0x00869400-0x00869408 
		public virtual string Source { get; } // 0x00869460-0x00869578 
		public int HResult { get; protected set; } // 0x00869CD4-0x00869CDC 0x00869CDC-0x00869CE4
	
		// Nested types
		internal enum ExceptionMessageKind // TypeDefIndex: 165
		{
			ThreadAbort = 1,
			ThreadInterrupted = 2,
			OutOfMemory = 3
		}
	
		// Constructors
		public Exception(); // 0x008692A8-0x008692D0
		public Exception(string message); // 0x008574A4-0x008574D8
		public Exception(string message, Exception innerException); // 0x00857564-0x008575A8
		protected Exception(SerializationInfo info, StreamingContext context); // 0x00857634-0x00857974
		static Exception(); // 0x00869E24-0x00869E90
	
		// Methods
		private void Init(); // 0x00869230-0x008692A8
		private string GetClassName(); // 0x008693A8-0x008693F0
		private string GetStackTrace(bool needFileInfo); // 0x00869408-0x00869458
		[FriendAccessAllowed] // 0x004BA99C-0x004BA9AC
		internal void SetErrorCode(int hr); // 0x00862188-0x00862190
		public override string ToString(); // 0x00869578-0x00869584
		private string ToString(bool needFileLineInfo, bool needMessage); // 0x00869584-0x008697F4
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x008697F4-0x00869BC0
		[OnDeserialized] // 0x004BA9AC-0x004BA9BC
		private void OnDeserialized(StreamingContext context); // 0x00869BC0-0x00869C40
		private string StripFileInfo(string stackTrace, bool isRemoteStackTrace); // 0x00869458-0x00869460
		internal void RestoreExceptionDispatchInfo(ExceptionDispatchInfo exceptionDispatchInfo); // 0x00869C40-0x00869CD4
		public new Type GetType(); // 0x008693F0-0x008693F8
		internal static string GetMessageFromNativeResources(ExceptionMessageKind kind); // 0x00869CE4-0x00869D40
		internal Exception FixRemotingException(); // 0x00869D40-0x00869E20
		internal static void ReportUnhandledException(Exception exception); // 0x00869E20-0x00869E24
	}

	[Serializable]
	[ComVisible] // 0x004B2808-0x004B2858
	[Obsolete] // 0x004B2808-0x004B2858
	public sealed class ExecutionEngineException : SystemException // TypeDefIndex: 166
	{
		// Constructors
		public ExecutionEngineException(); // 0x00869E90-0x00869EF4
		public ExecutionEngineException(string message); // 0x00869EF4-0x00869F24
		public ExecutionEngineException(string message, Exception innerException); // 0x00868CA0-0x00868CD0
		internal ExecutionEngineException(SerializationInfo info, StreamingContext context); // 0x00869F24-0x00869F2C
	}

	[Serializable]
	[ComVisible] // 0x004B2858-0x004B286C
	public class FieldAccessException : MemberAccessException // TypeDefIndex: 167
	{
		// Constructors
		public FieldAccessException(); // 0x00869F2C-0x00869F90
		public FieldAccessException(string message); // 0x00869F90-0x00869FC0
		protected FieldAccessException(SerializationInfo info, StreamingContext context); // 0x00869FC0-0x00869FC8
	}

	[Serializable]
	[AttributeUsage] // 0x004B286C-0x004B28B8
	[ComVisible] // 0x004B286C-0x004B28B8
	public class FlagsAttribute : Attribute // TypeDefIndex: 168
	{
		// Constructors
		public FlagsAttribute(); // 0x00869FC8-0x00869FD0
	}

	[Serializable]
	[ComVisible] // 0x004B28B8-0x004B28CC
	public class FormatException : SystemException // TypeDefIndex: 169
	{
		// Constructors
		public FormatException(); // 0x00869FD0-0x0086A034
		public FormatException(string message); // 0x00866A4C-0x00866A7C
		public FormatException(string message, Exception innerException); // 0x0086A034-0x0086A064
		protected FormatException(SerializationInfo info, StreamingContext context); // 0x0086A064-0x0086A06C
	}

	public static class GC // TypeDefIndex: 170
	{
		// Fields
		internal static readonly object EPHEMERON_TOMBSTONE; // 0x00
	
		// Properties
		public static int MaxGeneration { get; } // 0x0086A0DC-0x0086A138 
	
		// Constructors
		static GC(); // 0x0086A294-0x0086A2E8
	
		// Methods
		private static int GetMaxGeneration(); // 0x0086A06C-0x0086A070
		private static void InternalCollect(int generation); // 0x0086A070-0x0086A074
		internal static void register_ephemeron_array(Ephemeron[] array); // 0x0086A074-0x0086A078
		private static object get_ephemeron_tombstone(); // 0x0086A078-0x0086A07C
		public static void Collect(); // 0x0086A07C-0x0086A0DC
		[ReliabilityContract] // 0x004BA9BC-0x004BA9D4
		public static void KeepAlive(object obj); // 0x0086A138-0x0086A13C
		[ReliabilityContract] // 0x004BA9D4-0x004BA9EC
		private static void _SuppressFinalize(object o); // 0x0086A13C-0x0086A140
		[ReliabilityContract] // 0x004BA9EC-0x004BAA04
		public static void SuppressFinalize(object obj); // 0x0086A140-0x0086A1E8
		private static void _ReRegisterForFinalize(object o); // 0x0086A1E8-0x0086A1EC
		public static void ReRegisterForFinalize(object obj); // 0x0086A1EC-0x0086A294
	}

	internal static class DateTimeFormat // TypeDefIndex: 171
	{
		// Fields
		internal static readonly TimeSpan NullOffset; // 0x00
		internal static char[] allStandardFormats; // 0x08
		internal static string[] fixedNumberFormats; // 0x10
	
		// Constructors
		static DateTimeFormat(); // 0x00AC7EA8-0x00AC81B4
	
		// Methods
		internal static void FormatDigits(StringBuilder outputBuffer, int value, int len); // 0x00AC5BF0-0x00AC5C70
		internal static void FormatDigits(StringBuilder outputBuffer, int value, int len, bool overrideLengthLimit); // 0x00AC5C70-0x00AC5D4C
		private static void HebrewFormatDigits(StringBuilder outputBuffer, int digits); // 0x00AC5D4C-0x00AC5DDC
		internal static int ParseRepeatPattern(string format, int pos, char patternChar); // 0x00AC5DDC-0x00AC5E50
		private static string FormatDayOfWeek(int dayOfWeek, int repeat, DateTimeFormatInfo dtfi); // 0x00AC5E50-0x00AC5E8C
		private static string FormatMonth(int month, int repeatCount, DateTimeFormatInfo dtfi); // 0x00AC5E8C-0x00AC5EC8
		private static string FormatHebrewMonthName(DateTime time, int month, int repeatCount, DateTimeFormatInfo dtfi); // 0x00AC5EC8-0x00AC5F94
		internal static int ParseQuoteString(string format, int pos, StringBuilder result); // 0x00AC5F94-0x00AC616C
		internal static int ParseNextChar(string format, int pos); // 0x00AC616C-0x00AC61AC
		private static bool IsUseGenitiveForm(string format, int index, int tokenLen, char patternToMatch); // 0x00AC61AC-0x00AC62F0
		private static string FormatCustomized(DateTime dateTime, string format, DateTimeFormatInfo dtfi, TimeSpan offset); // 0x00AC62F0-0x00AC7078
		private static void FormatCustomizedTimeZone(DateTime dateTime, TimeSpan offset, string format, int tokenLen, bool timeOnly, StringBuilder result); // 0x00AC7078-0x00AC73B8
		private static void FormatCustomizedRoundripTimeZone(DateTime dateTime, TimeSpan offset, StringBuilder result); // 0x00AC73B8-0x00AC75EC
		internal static string GetRealFormat(string format, DateTimeFormatInfo dtfi); // 0x00AC75F0-0x00AC78A4
		private static string ExpandPredefinedFormat(string format, ref DateTime dateTime, ref DateTimeFormatInfo dtfi, ref TimeSpan offset); // 0x00AC78A4-0x00AC7C58
		internal static string Format(DateTime dateTime, string format, DateTimeFormatInfo dtfi); // 0x00AC4324-0x00AC465C
		internal static string Format(DateTime dateTime, string format, DateTimeFormatInfo dtfi, TimeSpan offset); // 0x00AC7C5C-0x00AC7EA8
		internal static void InvalidFormatForLocal(string format, DateTime dateTime); // 0x00AC7C58-0x00AC7C5C
		internal static void InvalidFormatForUtc(string format, DateTime dateTime); // 0x00AC75EC-0x00AC75F0
	}

	internal static class DateTimeParse // TypeDefIndex: 172
	{
		// Fields
		internal static MatchNumberDelegate m_hebrewNumberParser; // 0x00
		private static DS[][] dateParsingStates; // 0x08
	
		// Nested types
		internal delegate bool MatchNumberDelegate(ref __DTString str, int digitLen, out int result); // TypeDefIndex: 173; 0x0078A534-0x0078A7BC
	
		internal enum DTT // TypeDefIndex: 174
		{
			End = 0,
			NumEnd = 1,
			NumAmpm = 2,
			NumSpace = 3,
			NumDatesep = 4,
			NumTimesep = 5,
			MonthEnd = 6,
			MonthSpace = 7,
			MonthDatesep = 8,
			NumDatesuff = 9,
			NumTimesuff = 10,
			DayOfWeek = 11,
			YearSpace = 12,
			YearDateSep = 13,
			YearEnd = 14,
			TimeZone = 15,
			Era = 16,
			NumUTCTimeMark = 17,
			Unk = 18,
			NumLocalTimeMark = 19,
			Max = 20
		}
	
		internal enum TM // TypeDefIndex: 175
		{
			NotSet = -1,
			AM = 0,
			PM = 1
		}
	
		internal enum DS // TypeDefIndex: 176
		{
			BEGIN = 0,
			N = 1,
			NN = 2,
			D_Nd = 3,
			D_NN = 4,
			D_NNd = 5,
			D_M = 6,
			D_MN = 7,
			D_NM = 8,
			D_MNd = 9,
			D_NDS = 10,
			D_Y = 11,
			D_YN = 12,
			D_YNd = 13,
			D_YM = 14,
			D_YMd = 15,
			D_S = 16,
			T_S = 17,
			T_Nt = 18,
			T_NNt = 19,
			ERROR = 20,
			DX_NN = 21,
			DX_NNN = 22,
			DX_MN = 23,
			DX_NM = 24,
			DX_MNN = 25,
			DX_DS = 26,
			DX_DSN = 27,
			DX_NDS = 28,
			DX_NNDS = 29,
			DX_YNN = 30,
			DX_YMN = 31,
			DX_YN = 32,
			DX_YM = 33,
			TX_N = 34,
			TX_NN = 35,
			TX_NNN = 36,
			TX_TS = 37,
			DX_NNY = 38
		}
	
		// Constructors
		static DateTimeParse(); // 0x00ACE8E4-0x00ACFFA8
	
		// Methods
		internal static bool IsDigit(char ch); // 0x00AC8F0C-0x00AC8F20
		private static bool ParseFraction(ref __DTString str, out double result); // 0x00AC8F20-0x00AC9004
		private static bool ParseTimeZone(ref __DTString str, ref TimeSpan result); // 0x00AC9004-0x00AC9298
		private static bool HandleTimeZone(ref __DTString str, ref DateTimeResult result); // 0x00AC9298-0x00AC9414
		private static bool Lex(DS dps, ref __DTString str, ref DateTimeToken dtok, ref DateTimeRawInfo raw, ref DateTimeResult result, ref DateTimeFormatInfo dtfi, DateTimeStyles styles); // 0x00AC9414-0x00ACA0E8
		private static bool VerifyValidPunctuation(ref __DTString str); // 0x00ACA4E8-0x00ACA660
		private static bool GetYearMonthDayOrder(string datePattern, DateTimeFormatInfo dtfi, out int order); // 0x00ACA660-0x00ACA910
		private static bool GetYearMonthOrder(string pattern, DateTimeFormatInfo dtfi, out int order); // 0x00ACA910-0x00ACAACC
		private static bool GetMonthDayOrder(string pattern, DateTimeFormatInfo dtfi, out int order); // 0x00ACAACC-0x00ACACCC
		private static bool TryAdjustYear(ref DateTimeResult result, int year, out int adjustedYear); // 0x00ACACCC-0x00ACADC8
		private static bool SetDateYMD(ref DateTimeResult result, int year, int month, int day); // 0x00ACADC8-0x00ACAE4C
		private static bool SetDateMDY(ref DateTimeResult result, int month, int day, int year); // 0x00ACAE4C-0x00ACAED8
		private static bool SetDateDMY(ref DateTimeResult result, int day, int month, int year); // 0x00ACAED8-0x00ACAF64
		private static bool SetDateYDM(ref DateTimeResult result, int year, int day, int month); // 0x00ACAF64-0x00ACAFF0
		private static void GetDefaultYear(ref DateTimeResult result, ref DateTimeStyles styles); // 0x00ACAFF0-0x00ACB0A0
		private static bool GetDayOfNN(ref DateTimeResult result, ref DateTimeStyles styles, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x00ACB198-0x00ACB344
		private static bool GetDayOfNNN(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x00ACB344-0x00ACB644
		private static bool GetDayOfMN(ref DateTimeResult result, ref DateTimeStyles styles, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x00ACB644-0x00ACB898
		private static bool GetHebrewDayOfNM(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x00ACB898-0x00ACBA04
		private static bool GetDayOfNM(ref DateTimeResult result, ref DateTimeStyles styles, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x00ACBA04-0x00ACBC58
		private static bool GetDayOfMNN(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x00ACBC58-0x00ACBF6C
		private static bool GetDayOfYNN(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x00ACBF6C-0x00ACC0F4
		private static bool GetDayOfNNY(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x00ACC0F4-0x00ACC298
		private static bool GetDayOfYMN(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x00ACC298-0x00ACC378
		private static bool GetDayOfYN(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x00ACC378-0x00ACC458
		private static bool GetDayOfYM(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x00ACC458-0x00ACC520
		private static void AdjustTimeMark(DateTimeFormatInfo dtfi, ref DateTimeRawInfo raw); // 0x00ACC520-0x00ACC59C
		private static bool AdjustHour(ref int hour, TM timeMark); // 0x00ACC59C-0x00ACC5E4
		private static bool GetTimeOfN(DateTimeFormatInfo dtfi, ref DateTimeResult result, ref DateTimeRawInfo raw); // 0x00ACC5E4-0x00ACC690
		private static bool GetTimeOfNN(DateTimeFormatInfo dtfi, ref DateTimeResult result, ref DateTimeRawInfo raw); // 0x00ACC690-0x00ACC748
		private static bool GetTimeOfNNN(DateTimeFormatInfo dtfi, ref DateTimeResult result, ref DateTimeRawInfo raw); // 0x00ACC748-0x00ACC814
		private static bool GetDateOfDSN(ref DateTimeResult result, ref DateTimeRawInfo raw); // 0x00ACC814-0x00ACC8B8
		private static bool GetDateOfNDS(ref DateTimeResult result, ref DateTimeRawInfo raw); // 0x00ACC8B8-0x00ACC998
		private static bool GetDateOfNNDS(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x00ACC998-0x00ACCBF4
		private static bool ProcessDateTimeSuffix(ref DateTimeResult result, ref DateTimeRawInfo raw, ref DateTimeToken dtok); // 0x00ACCBF4-0x00ACCCEC
		internal static bool ProcessHebrewTerminalState(DS dps, ref DateTimeResult result, ref DateTimeStyles styles, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x00ACCCEC-0x00ACCFDC
		internal static bool ProcessTerminaltState(DS dps, ref DateTimeResult result, ref DateTimeStyles styles, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi); // 0x00ACA0E8-0x00ACA4E8
		internal static DateTime Parse(string s, DateTimeFormatInfo dtfi, DateTimeStyles styles); // 0x00AC3EC0-0x00AC4324
		internal static bool TryParse(string s, DateTimeFormatInfo dtfi, DateTimeStyles styles, out DateTime result); // 0x00AC4708-0x00AC4814
		internal static bool TryParse(string s, DateTimeFormatInfo dtfi, DateTimeStyles styles, ref DateTimeResult result); // 0x00ACCFDC-0x00ACD6B8
		private static bool DetermineTimeZoneAdjustments(ref DateTimeResult result, DateTimeStyles styles, bool bTimeOnly); // 0x00ACDFF8-0x00ACE1EC
		private static bool DateTimeOffsetTimeZonePostProcessing(ref DateTimeResult result, DateTimeStyles styles); // 0x00ACE1EC-0x00ACE3E0
		private static bool AdjustTimeZoneToUniversal(ref DateTimeResult result); // 0x00ACE3E0-0x00ACE4B0
		private static bool AdjustTimeZoneToLocal(ref DateTimeResult result, bool bTimeOnly); // 0x00ACE4B0-0x00ACE69C
		private static bool ParseISO8601(ref DateTimeRawInfo raw, ref __DTString str, DateTimeStyles styles, ref DateTimeResult result); // 0x00ACD848-0x00ACDD70
		internal static bool MatchHebrewDigits(ref __DTString str, int digitLen, out int number); // 0x00ACE744-0x00ACE830
		internal static bool ParseDigits(ref __DTString str, int digitLen, out int result); // 0x00ACE69C-0x00ACE744
		internal static bool ParseDigits(ref __DTString str, int minDigitLen, int maxDigitLen, out int result); // 0x00ACE830-0x00ACE8E4
		private static DateTime GetDateTimeNow(ref DateTimeResult result, ref DateTimeStyles styles); // 0x00ACB0A0-0x00ACB198
		private static bool CheckDefaultDateTime(ref DateTimeResult result, ref Calendar cal, DateTimeStyles styles); // 0x00ACDD70-0x00ACDFF8
		private static Exception GetDateTimeParseException(ref DateTimeResult result); // 0x00ACD6B8-0x00ACD848
	}

	internal struct __DTString // TypeDefIndex: 177
	{
		// Fields
		internal string Value; // 0x00
		internal int Index; // 0x08
		internal int len; // 0x0C
		internal char m_current; // 0x10
		private CompareInfo m_info; // 0x18
		private bool m_checkDigitToken; // 0x20
		private static char[] WhiteSpaceChecks; // 0x00
	
		// Constructors
		internal __DTString(string str, DateTimeFormatInfo dtfi); // 0x005913F0-0x005913F8
		static __DTString(); // 0x00E8CFF4-0x00E8D090
	
		// Methods
		internal bool GetNext(); // 0x005913F8-0x00591400
		internal bool AtEnd(); // 0x00591400-0x00591410
		internal bool Advance(int count); // 0x00591410-0x00591418
		internal void GetRegularToken(out TokenType tokenType, out int tokenValue, DateTimeFormatInfo dtfi); // 0x00591418-0x00591420
		internal TokenType GetSeparatorToken(DateTimeFormatInfo dtfi, out int indexBeforeSeparator, out char charBeforeSeparator); // 0x00591420-0x00591428
		internal bool MatchSpecifiedWords(string target, bool checkWordBoundary, ref int matchLength); // 0x00591428-0x00591434
		internal bool Match(char ch); // 0x00591434-0x0059143C
		internal bool GetNextDigit(); // 0x0059143C-0x00591444
		internal char GetChar(); // 0x00591444-0x0059144C
		internal int GetDigit(); // 0x0059144C-0x00591454
		internal void SkipWhiteSpaces(); // 0x00591454-0x0059145C
		internal bool SkipWhiteSpaceCurrent(); // 0x0059145C-0x00591464
		internal DTSubString GetSubString(); // 0x00591464-0x0059146C
		internal void ConsumeSubString(DTSubString sub); // 0x0059146C-0x00595284
	}

	internal enum DTSubStringType // TypeDefIndex: 178
	{
		Unknown = 0,
		Invalid = 1,
		Number = 2,
		End = 3,
		Other = 4
	}

	internal struct DTSubString // TypeDefIndex: 179
	{
		// Fields
		internal string s; // 0x00
		internal int index; // 0x08
		internal int length; // 0x0C
		internal DTSubStringType type; // 0x10
		internal int value; // 0x14
	
		// Properties
		internal char this[int relativeIndex] { get => default; } // 0x00589614-0x0058961C 
	}

	internal struct DateTimeToken // TypeDefIndex: 180
	{
		// Fields
		internal DateTimeParse.DTT dtt; // 0x00
		internal TokenType suffix; // 0x04
		internal int num; // 0x08
	}

	internal struct DateTimeRawInfo // TypeDefIndex: 181
	{
		// Fields
		private unsafe int* num; // 0x00
		internal int numCount; // 0x08
		internal int month; // 0x0C
		internal int year; // 0x10
		internal int dayOfWeek; // 0x14
		internal int era; // 0x18
		internal DateTimeParse.TM timeMark; // 0x1C
		internal double fraction; // 0x20
		internal bool hasSameDateAndTimeSeparators; // 0x28
		internal bool timeZone; // 0x29
	
		// Methods
		internal unsafe void Init(int* numberBuffer); // 0x00580970-0x00580994
		internal void AddNumber(int value); // 0x00580994-0x005809AC
		internal int GetNumber(int index); // 0x005809AC-0x005809FC
	}

	internal enum ParseFailureKind // TypeDefIndex: 182
	{
		None = 0,
		ArgumentNull = 1,
		Format = 2,
		FormatWithParameter = 3,
		FormatBadDateTimeCalendar = 4
	}

	[Flags] // 0x004B2904-0x004B2914
	internal enum ParseFlags // TypeDefIndex: 183
	{
		HaveYear = 1,
		HaveMonth = 2,
		HaveDay = 4,
		HaveHour = 8,
		HaveMinute = 16,
		HaveSecond = 32,
		HaveTime = 64,
		HaveDate = 128,
		TimeZoneUsed = 256,
		TimeZoneUtc = 512,
		ParsedMonthName = 1024,
		CaptureOffset = 2048,
		YearDefault = 4096,
		Rfc1123Pattern = 8192,
		UtcSortPattern = 16384
	}

	internal struct DateTimeResult // TypeDefIndex: 184
	{
		// Fields
		internal int Year; // 0x00
		internal int Month; // 0x04
		internal int Day; // 0x08
		internal int Hour; // 0x0C
		internal int Minute; // 0x10
		internal int Second; // 0x14
		internal double fraction; // 0x18
		internal int era; // 0x20
		internal ParseFlags flags; // 0x24
		internal TimeSpan timeZoneOffset; // 0x28
		internal Calendar calendar; // 0x30
		internal DateTime parsedDate; // 0x38
		internal ParseFailureKind failure; // 0x40
		internal string failureMessageID; // 0x48
		internal object failureMessageFormatArgument; // 0x50
		internal string failureArgumentName; // 0x58
	
		// Methods
		internal void Init(); // 0x005809FC-0x00580A1C
		internal void SetDate(int year, int month, int day); // 0x00580A1C-0x00580A28
		internal void SetFailure(ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument); // 0x00580A28-0x00580A34
		internal void SetFailure(ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument, string failureArgumentName); // 0x00580A34-0x00580A44
	}

	internal enum TokenType // TypeDefIndex: 185
	{
		NumberToken = 1,
		YearNumberToken = 2,
		Am = 3,
		Pm = 4,
		MonthToken = 5,
		EndOfString = 6,
		DayOfWeekToken = 7,
		TimeZoneToken = 8,
		EraToken = 9,
		DateWordToken = 10,
		UnknownToken = 11,
		HebrewNumber = 12,
		JapaneseEraToken = 13,
		TEraToken = 14,
		IgnorableSymbol = 15,
		RegularTokenMask = 255,
		SEP_Unk = 256,
		SEP_End = 512,
		SEP_Space = 768,
		SEP_Am = 1024,
		SEP_Pm = 1280,
		SEP_Date = 1536,
		SEP_Time = 1792,
		SEP_YearSuff = 2048,
		SEP_MonthSuff = 2304,
		SEP_DaySuff = 2560,
		SEP_HourSuff = 2816,
		SEP_MinuteSuff = 3072,
		SEP_SecondSuff = 3328,
		SEP_LocalTimeMark = 3584,
		SEP_DateOrOffset = 3840,
		SeparatorTokenMask = 65280
	}

	[Serializable]
	[ComVisible] // 0x004B2914-0x004B2928
	public struct Guid : IFormattable, IComparable, IComparable<Guid>, IEquatable<Guid> // TypeDefIndex: 186
	{
		// Fields
		public static readonly Guid Empty; // 0x00
		private int _a; // 0x00
		private short _b; // 0x04
		private short _c; // 0x06
		private byte _d; // 0x08
		private byte _e; // 0x09
		private byte _f; // 0x0A
		private byte _g; // 0x0B
		private byte _h; // 0x0C
		private byte _i; // 0x0D
		private byte _j; // 0x0E
		private byte _k; // 0x0F
		private static object _rngAccess; // 0x10
		private static RandomNumberGenerator _rng; // 0x18
	
		// Nested types
		[Flags] // 0x004B2928-0x004B2938
		private enum GuidStyles // TypeDefIndex: 187
		{
			None = 0,
			NumberFormat = 0,
			AllowParenthesis = 1,
			AllowBraces = 2,
			AllowDashes = 4,
			AllowHexPrefix = 8,
			Any = 15,
			RequireParenthesis = 16,
			RequireBraces = 32,
			RequireDashes = 64,
			DigitFormat = 64,
			ParenthesisFormat = 80,
			BraceFormat = 96,
			RequireHexPrefix = 128,
			HexFormat = 160
		}
	
		private enum GuidParseThrowStyle // TypeDefIndex: 188
		{
			None = 0,
			All = 1,
			AllButOverflow = 2
		}
	
		private enum ParseFailureKind // TypeDefIndex: 189
		{
			None = 0,
			ArgumentNull = 1,
			Format = 2,
			FormatWithParameter = 3,
			NativeException = 4,
			FormatWithInnerException = 5
		}
	
		private struct GuidResult // TypeDefIndex: 190
		{
			// Fields
			internal Guid parsedGuid; // 0x00
			internal GuidParseThrowStyle throwStyle; // 0x10
			internal ParseFailureKind m_failure; // 0x14
			internal string m_failureMessageID; // 0x18
			internal object m_failureMessageFormatArgument; // 0x20
			internal string m_failureArgumentName; // 0x28
			internal Exception m_innerException; // 0x30
	
			// Methods
			internal void Init(GuidParseThrowStyle canThrow); // 0x00586FF4-0x00586FFC
			internal void SetFailure(Exception nativeException); // 0x00586FFC-0x0058700C
			internal void SetFailure(ParseFailureKind failure, string failureMessageID); // 0x0058700C-0x00587020
			internal void SetFailure(ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument); // 0x00587020-0x00587030
			internal void SetFailure(ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument, string failureArgumentName, Exception innerException); // 0x00587030-0x00587038
			internal Exception GetGuidParseException(); // 0x00587038-0x005872A4
		}
	
		// Constructors
		public Guid(byte[] b); // 0x00586EE8-0x00586EF0
		[CLSCompliant] // 0x004BAA04-0x004BAA18
		public Guid(uint a, ushort b, ushort c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k); // 0x00586EF0-0x00586F30
		public Guid(string g); // 0x00586F30-0x00586F38
		static Guid(); // 0x0098732C-0x009873A4
	
		// Methods
		public static Guid Parse(string input); // 0x00984AD4-0x00984BE4
		public static bool TryParse(string input, out Guid result); // 0x00984BE4-0x00984CE4
		private static bool TryParseGuid(string g, GuidStyles flags, ref GuidResult result); // 0x009846C4-0x00984AD4
		private static bool TryParseGuidWithHexPrefix(string guidString, ref GuidResult result); // 0x0098505C-0x009855EC
		private static bool TryParseGuidWithNoStyle(string guidString, ref GuidResult result); // 0x009855EC-0x009859C4
		private static bool TryParseGuidWithDashes(string guidString, ref GuidResult result); // 0x00984CE4-0x0098505C
		private static bool StringToShort(string str, int requiredLength, int flags, out short result, ref GuidResult parseResult); // 0x00985C9C-0x00985D34
		private static unsafe bool StringToShort(string str, int* parsePos, int requiredLength, int flags, out short result, ref GuidResult parseResult); // 0x00985E6C-0x00985F28
		private static bool StringToInt(string str, int requiredLength, int flags, out int result, ref GuidResult parseResult); // 0x00985C04-0x00985C9C
		private static bool StringToInt(string str, ref int parsePos, int requiredLength, int flags, out int result, ref GuidResult parseResult); // 0x00985DC8-0x00985E6C
		private static unsafe bool StringToInt(string str, int* parsePos, int requiredLength, int flags, out int result, ref GuidResult parseResult); // 0x00985F28-0x00986150
		private static bool StringToLong(string str, ref int parsePos, int flags, out long result, ref GuidResult parseResult); // 0x00985D34-0x00985DC8
		private static unsafe bool StringToLong(string str, int* parsePos, int flags, out long result, ref GuidResult parseResult); // 0x00986150-0x00986EAC
		private static string EatAllWhitespace(string str); // 0x009859C4-0x00985AE4
		private static bool IsHexPrefix(string str, int i); // 0x00985AE4-0x00985C04
		public byte[] ToByteArray(); // 0x00586F38-0x00586F40
		public override string ToString(); // 0x00586F40-0x00586F48
		public override int GetHashCode(); // 0x00586F48-0x00586F70
		public override bool Equals(object o); // 0x00586F70-0x00586F78
		public bool Equals(Guid g); // 0x00586F78-0x00586F80
		private int GetResult(uint me, uint them); // 0x00586F80-0x00586F90
		public int CompareTo(object value); // 0x00586F90-0x00586F98
		public int CompareTo(Guid value); // 0x00586F98-0x00586FA0
		public static bool operator ==(Guid a, Guid b); // 0x0097FE64-0x0097FF10
		public static bool operator !=(Guid a, Guid b); // 0x00986EAC-0x00986F48
		public string ToString(string format); // 0x00586FA0-0x00586FA8
		private static char HexToChar(int a); // 0x00986F48-0x00986F64
		private static unsafe int HexsToChars(char* guidChars, int offset, int a, int b); // 0x00986F64-0x00986FF4
		private static unsafe int HexsToChars(char* guidChars, int offset, int a, int b, bool hex); // 0x00986FF4-0x00987158
		public string ToString(string format, IFormatProvider provider); // 0x00586FA8-0x00586FF4
		public static Guid NewGuid(); // 0x00987158-0x0098732C
	}

	[ComVisible] // 0x004B2938-0x004B294C
	public interface IAsyncResult // TypeDefIndex: 191
	{
		// Properties
		WaitHandle AsyncWaitHandle { get; }
		object AsyncState { get; }
	}

	[ComVisible] // 0x004B294C-0x004B2960
	public interface ICloneable // TypeDefIndex: 192
	{
		// Methods
		object Clone();
	}

	[ComVisible] // 0x004B2960-0x004B2974
	public interface IComparable // TypeDefIndex: 193
	{
		// Methods
		int CompareTo(object obj);
	}

	public interface IComparable<in T> // TypeDefIndex: 194
	{
		// Methods
		int CompareTo(T other);
	}

	[CLSCompliant] // 0x004B2974-0x004B29B4
	[ComVisible] // 0x004B2974-0x004B29B4
	public interface IConvertible // TypeDefIndex: 195
	{
		// Methods
		TypeCode GetTypeCode();
		bool ToBoolean(IFormatProvider provider);
		char ToChar(IFormatProvider provider);
		sbyte ToSByte(IFormatProvider provider);
		byte ToByte(IFormatProvider provider);
		short ToInt16(IFormatProvider provider);
		ushort ToUInt16(IFormatProvider provider);
		int ToInt32(IFormatProvider provider);
		uint ToUInt32(IFormatProvider provider);
		long ToInt64(IFormatProvider provider);
		ulong ToUInt64(IFormatProvider provider);
		float ToSingle(IFormatProvider provider);
		double ToDouble(IFormatProvider provider);
		decimal ToDecimal(IFormatProvider provider);
		DateTime ToDateTime(IFormatProvider provider);
		string ToString(IFormatProvider provider);
		object ToType(Type conversionType, IFormatProvider provider);
	}

	[ComVisible] // 0x004B29B4-0x004B29C8
	public interface ICustomFormatter // TypeDefIndex: 196
	{
		// Methods
		string Format(string format, object arg, IFormatProvider formatProvider);
	}

	[ComVisible] // 0x004B29C8-0x004B29DC
	public interface IDisposable // TypeDefIndex: 197
	{
		// Methods
		void Dispose();
	}

	public interface IEquatable<T> // TypeDefIndex: 198
	{
		// Methods
		bool Equals(T other);
	}

	[ComVisible] // 0x004B29DC-0x004B29F0
	public interface IFormatProvider // TypeDefIndex: 199
	{
		// Methods
		object GetFormat(Type formatType);
	}

	[ComVisible] // 0x004B29F0-0x004B2A04
	public interface IFormattable // TypeDefIndex: 200
	{
		// Methods
		string ToString(string format, IFormatProvider formatProvider);
	}

	[Serializable]
	[ComVisible] // 0x004B2A04-0x004B2A18
	public sealed class IndexOutOfRangeException : SystemException // TypeDefIndex: 201
	{
		// Constructors
		public IndexOutOfRangeException(); // 0x008F5420-0x008F5494
		public IndexOutOfRangeException(string message); // 0x008F3F9C-0x008F3FD0
		internal IndexOutOfRangeException(SerializationInfo info, StreamingContext context); // 0x008F5494-0x008F5654
	}

	[Serializable]
	[ComVisible] // 0x004B2A18-0x004B2A2C
	public struct Int16 : IComparable, IFormattable, IConvertible, IComparable<short>, IEquatable<short> // TypeDefIndex: 202
	{
		// Fields
		internal short m_value; // 0x00
		public const short MaxValue = 32767; // Metadata: 0x001DF988
		public const short MinValue = -32768; // Metadata: 0x001DF98A
	
		// Methods
		public int CompareTo(object value); // 0x00583C4C-0x00583C54
		public int CompareTo(short value); // 0x00583C54-0x00583C60
		public override bool Equals(object obj); // 0x00583C60-0x00583C68
		public bool Equals(short obj); // 0x00583C68-0x00583C78
		public override int GetHashCode(); // 0x00583C78-0x00583C84
		public override string ToString(); // 0x00583C84-0x00583CB4
		public string ToString(IFormatProvider provider); // 0x00583CB4-0x00583CE8
		public string ToString(string format, IFormatProvider provider); // 0x00583CE8-0x00583D20
		private string ToString(string format, NumberFormatInfo info); // 0x00583D20-0x00583D28
		public static short Parse(string s, IFormatProvider provider); // 0x008F5860-0x008F5894
		public static short Parse(string s, NumberStyles style, IFormatProvider provider); // 0x008F5A1C-0x008F5A6C
		private static short Parse(string s, NumberStyles style, NumberFormatInfo info); // 0x008F5894-0x008F5A1C
		public TypeCode GetTypeCode(); // 0x00583D28-0x00583D30
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x00583D30-0x00583D38
		char IConvertible.ToChar(IFormatProvider provider); // 0x00583D38-0x00583D40
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x00583D40-0x00583D48
		byte IConvertible.ToByte(IFormatProvider provider); // 0x00583D48-0x00583D50
		short IConvertible.ToInt16(IFormatProvider provider); // 0x00583D50-0x00583D58
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x00583D58-0x00583D60
		int IConvertible.ToInt32(IFormatProvider provider); // 0x00583D60-0x00583D68
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x00583D68-0x00583D70
		long IConvertible.ToInt64(IFormatProvider provider); // 0x00583D70-0x00583D78
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x00583D78-0x00583D80
		float IConvertible.ToSingle(IFormatProvider provider); // 0x00583D80-0x00583D88
		double IConvertible.ToDouble(IFormatProvider provider); // 0x00583D88-0x00583D90
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x00583D90-0x00583D98
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x00583D98-0x00583DA4
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x00583DA4-0x00583DAC
	}

	[Serializable]
	[ComVisible] // 0x004B2A2C-0x004B2A40
	public struct Int32 : IComparable, IFormattable, IConvertible, IComparable<int>, IEquatable<int> // TypeDefIndex: 203
	{
		// Fields
		internal int m_value; // 0x00
		public const int MaxValue = 2147483647; // Metadata: 0x001DF98C
		public const int MinValue = -2147483648; // Metadata: 0x001DF990
	
		// Methods
		public int CompareTo(object value); // 0x00583DAC-0x00583DB4
		public int CompareTo(int value); // 0x00583DB4-0x00583DC8
		public override bool Equals(object obj); // 0x00583DC8-0x00583DD0
		public bool Equals(int obj); // 0x00583DD0-0x00583DE0
		public override int GetHashCode(); // 0x00583DE0-0x00583DE8
		public override string ToString(); // 0x00583DE8-0x00583E18
		public string ToString(string format); // 0x00583E18-0x00583E4C
		public string ToString(IFormatProvider provider); // 0x00583E4C-0x00583E80
		public string ToString(string format, IFormatProvider provider); // 0x00583E80-0x00583EB8
		public static int Parse(string s); // 0x008F654C-0x008F657C
		public static int Parse(string s, IFormatProvider provider); // 0x008F657C-0x008F65B0
		public static int Parse(string s, NumberStyles style, IFormatProvider provider); // 0x008F65B0-0x008F6600
		public static bool TryParse(string s, out int result); // 0x008F6600-0x008F6638
		public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out int result); // 0x008F6770-0x008F7068
		public TypeCode GetTypeCode(); // 0x00583EB8-0x00583EC0
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x00583EC0-0x00583EC8
		char IConvertible.ToChar(IFormatProvider provider); // 0x00583EC8-0x00583ED0
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x00583ED0-0x00583ED8
		byte IConvertible.ToByte(IFormatProvider provider); // 0x00583ED8-0x00583EE0
		short IConvertible.ToInt16(IFormatProvider provider); // 0x00583EE0-0x00583EE8
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x00583EE8-0x00583EF0
		int IConvertible.ToInt32(IFormatProvider provider); // 0x00583EF0-0x00583EF8
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x00583EF8-0x00583F00
		long IConvertible.ToInt64(IFormatProvider provider); // 0x00583F00-0x00583F08
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x00583F08-0x00583F10
		float IConvertible.ToSingle(IFormatProvider provider); // 0x00583F10-0x00583F18
		double IConvertible.ToDouble(IFormatProvider provider); // 0x00583F18-0x00583F20
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x00583F20-0x00583F28
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x00583F28-0x00583F34
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x00583F34-0x00583F3C
	}

	[Serializable]
	[ComVisible] // 0x004B2A40-0x004B2A54
	public struct Int64 : IComparable, IFormattable, IConvertible, IComparable<long>, IEquatable<long> // TypeDefIndex: 204
	{
		// Fields
		internal long m_value; // 0x00
		public const long MaxValue = 9223372036854775807; // Metadata: 0x001DF994
		public const long MinValue = -9223372036854775808; // Metadata: 0x001DF99C
	
		// Methods
		public int CompareTo(object value); // 0x00583F3C-0x00583F44
		public int CompareTo(long value); // 0x00583F44-0x00583F58
		public override bool Equals(object obj); // 0x00583F58-0x00583F60
		public bool Equals(long obj); // 0x00583F60-0x00583F70
		public override int GetHashCode(); // 0x00583F70-0x00583F7C
		public override string ToString(); // 0x00583F7C-0x00583FAC
		public string ToString(IFormatProvider provider); // 0x00583FAC-0x00583FE0
		public string ToString(string format, IFormatProvider provider); // 0x00583FE0-0x00584018
		public static long Parse(string s); // 0x008F7150-0x008F7180
		public static long Parse(string s, IFormatProvider provider); // 0x008F72F0-0x008F7324
		public static long Parse(string s, NumberStyles style, IFormatProvider provider); // 0x008F7324-0x008F7374
		public static bool TryParse(string s, out long result); // 0x008F7374-0x008F73AC
		public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out long result); // 0x008F74DC-0x008F7C8C
		public TypeCode GetTypeCode(); // 0x00584018-0x00584020
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x00584020-0x00584028
		char IConvertible.ToChar(IFormatProvider provider); // 0x00584028-0x00584030
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x00584030-0x00584038
		byte IConvertible.ToByte(IFormatProvider provider); // 0x00584038-0x00584040
		short IConvertible.ToInt16(IFormatProvider provider); // 0x00584040-0x00584048
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x00584048-0x00584050
		int IConvertible.ToInt32(IFormatProvider provider); // 0x00584050-0x00584058
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x00584058-0x00584060
		long IConvertible.ToInt64(IFormatProvider provider); // 0x00584060-0x00584068
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x00584068-0x00584070
		float IConvertible.ToSingle(IFormatProvider provider); // 0x00584070-0x00584078
		double IConvertible.ToDouble(IFormatProvider provider); // 0x00584078-0x00584080
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x00584080-0x00584088
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x00584088-0x00584094
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x00584094-0x0058409C
	}

	[Serializable]
	[ComVisible] // 0x004B2A54-0x004B2A68
	public class InvalidCastException : SystemException // TypeDefIndex: 205
	{
		// Constructors
		public InvalidCastException(); // 0x008F7E8C-0x008F7F00
		public InvalidCastException(string message); // 0x008F61F4-0x008F654C
		protected InvalidCastException(SerializationInfo info, StreamingContext context); // 0x008F7F00-0x008F7F08
	}

	[Serializable]
	[ComVisible] // 0x004B2A68-0x004B2A7C
	public class InvalidOperationException : SystemException // TypeDefIndex: 206
	{
		// Constructors
		public InvalidOperationException(); // 0x008F7F08-0x008F7F7C
		public InvalidOperationException(string message); // 0x008EC71C-0x008EC750
		public InvalidOperationException(string message, Exception innerException); // 0x008F7F7C-0x008F7FB0
		protected InvalidOperationException(SerializationInfo info, StreamingContext context); // 0x008F7FB0-0x008F7FB8
	}

	[Serializable]
	[ComVisible] // 0x004B2A7C-0x004B2A90
	public sealed class InvalidProgramException : SystemException // TypeDefIndex: 207
	{
		// Constructors
		public InvalidProgramException(); // 0x008F7FB8-0x008F802C
		public InvalidProgramException(string message); // 0x008F802C-0x008F8060
		internal InvalidProgramException(SerializationInfo info, StreamingContext context); // 0x008F8060-0x008F8068
	}

	[Serializable]
	[TypeForwardedFrom] // 0x004B2A90-0x004B2AC8
	public class InvalidTimeZoneException : Exception // TypeDefIndex: 208
	{
		// Constructors
		public InvalidTimeZoneException(string message); // 0x008F8068-0x008F80E0
		public InvalidTimeZoneException(string message, Exception innerException); // 0x008F80E0-0x008F8160
		protected InvalidTimeZoneException(SerializationInfo info, StreamingContext context); // 0x008F8160-0x008F81F0
		public InvalidTimeZoneException(); // 0x008F81F0-0x008F8258
	}

	public static class Math // TypeDefIndex: 209
	{
		// Fields
		private static double doubleRoundLimit; // 0x00
		private const int maxRoundingDigits = 15; // Metadata: 0x001DF9A4
		private static double[] roundPower10Double; // 0x08
		public const double PI = 3.141592653589793; // Metadata: 0x001DF9A8
		public const double E = 2.718281828459045; // Metadata: 0x001DF9B0
	
		// Constructors
		static Math(); // 0x008FA250-0x008FA2E8
	
		// Methods
		public static double Acos(double d); // 0x008F9828-0x008F982C
		public static double Atan(double d); // 0x008F982C-0x008F9830
		public static double Atan2(double y, double x); // 0x008F9830-0x008F9834
		public static double Ceiling(double a); // 0x008F9834-0x008F983C
		public static double Cos(double d); // 0x008F983C-0x008F9840
		public static double Floor(double d); // 0x008F9840-0x008F9848
		private static double InternalRound(double value, int digits, MidpointRounding mode); // 0x008F9848-0x008F9A34
		public static double Sin(double a); // 0x008F9AFC-0x008F9B00
		public static double Tan(double a); // 0x008F9B00-0x008F9B04
		public static double Round(double a); // 0x008F9B04-0x008F9B84
		public static double Round(double value, MidpointRounding mode); // 0x008F9B84-0x008F9BFC
		public static double Round(double value, int digits, MidpointRounding mode); // 0x008F9BFC-0x008F9DD4
		private static unsafe double SplitFractionDouble(double* value); // 0x008F9A34-0x008F9A38
		[ReliabilityContract] // 0x004BAA18-0x004BAA30
		public static double Sqrt(double d); // 0x008F9DD4-0x008F9DEC
		public static double Log(double d); // 0x008F9DEC-0x008F9DF0
		public static double Log10(double d); // 0x008F9DF0-0x008F9DF4
		public static double Exp(double d); // 0x008F9DF4-0x008F9DF8
		public static double Pow(double x, double y); // 0x008F9DF8-0x008F9DFC
		public static int Abs(int value); // 0x008F9DFC-0x008F9E74
		private static int AbsHelper(int value); // 0x008F9E74-0x008F9F18
		public static float Abs(float value); // 0x008F9F18-0x008F9F20
		public static double Abs(double value); // 0x008F9F20-0x008F9F28
		[ReliabilityContract] // 0x004BAA30-0x004BAA48
		public static int Max(int val1, int val2); // 0x008F9F28-0x008F9F34
		[CLSCompliant] // 0x004BAA48-0x004BAA8C
		[ReliabilityContract] // 0x004BAA48-0x004BAA8C
		public static uint Max(uint val1, uint val2); // 0x008F9F34-0x008F9F40
		[ReliabilityContract] // 0x004BAA8C-0x004BAAA4
		public static long Max(long val1, long val2); // 0x008F9F40-0x008F9F4C
		[ReliabilityContract] // 0x004BAAA4-0x004BAABC
		public static float Max(float val1, float val2); // 0x008F9F4C-0x008F9F90
		[ReliabilityContract] // 0x004BAABC-0x004BAAD4
		public static double Max(double val1, double val2); // 0x008F9F90-0x008FA020
		[ReliabilityContract] // 0x004BAAD4-0x004BAAEC
		public static int Min(int val1, int val2); // 0x008FA020-0x008FA02C
		[ReliabilityContract] // 0x004BAAEC-0x004BAB04
		public static long Min(long val1, long val2); // 0x008FA02C-0x008FA038
		[ReliabilityContract] // 0x004BAB04-0x004BAB1C
		public static float Min(float val1, float val2); // 0x008FA038-0x008FA07C
		[ReliabilityContract] // 0x004BAB1C-0x004BAB34
		public static double Min(double val1, double val2); // 0x008FA07C-0x008FA10C
		public static double Log(double a, double newBase); // 0x008FA10C-0x008FA250
		public static int Sign(double value); // 0x008F9A38-0x008F9AFC
	}

	[Serializable]
	[ComVisible] // 0x004B2AC8-0x004B2ADC
	public class MemberAccessException : SystemException // TypeDefIndex: 210
	{
		// Constructors
		public MemberAccessException(); // 0x008FA2E8-0x008FA35C
		public MemberAccessException(string message); // 0x008FA35C-0x008FA390
		protected MemberAccessException(SerializationInfo info, StreamingContext context); // 0x008FA390-0x008FA398
	}

	[Serializable]
	[ComVisible] // 0x004B2ADC-0x004B2AF0
	public class MethodAccessException : MemberAccessException // TypeDefIndex: 211
	{
		// Constructors
		public MethodAccessException(); // 0x008FA398-0x008FA424
		public MethodAccessException(string message); // 0x008FA424-0x008FA470
		protected MethodAccessException(SerializationInfo info, StreamingContext context); // 0x008FA470-0x008FA478
	}

	[ComVisible] // 0x004B2AF0-0x004B2B04
	public enum MidpointRounding // TypeDefIndex: 212
	{
		ToEven = 0,
		AwayFromZero = 1
	}

	[Serializable]
	[ComVisible] // 0x004B2B04-0x004B2B18
	public class MissingFieldException : MissingMemberException, ISerializable // TypeDefIndex: 213
	{
		// Properties
		public override string Message { get; } // 0x008FA6A8-0x008FA7D4 
	
		// Constructors
		public MissingFieldException(); // 0x008FA478-0x008FA4E8
		public MissingFieldException(string message); // 0x008FA534-0x008FA564
		protected MissingFieldException(SerializationInfo info, StreamingContext context); // 0x008FA564-0x008FA568
		public MissingFieldException(string className, string fieldName); // 0x008FA92C-0x008FA960
	}

	[Serializable]
	[ComVisible] // 0x004B2B18-0x004B2B2C
	public class MissingMemberException : MemberAccessException, ISerializable // TypeDefIndex: 214
	{
		// Fields
		protected string ClassName; // 0x88
		protected string MemberName; // 0x90
		protected byte[] Signature; // 0x98
	
		// Properties
		public override string Message { get; } // 0x008FA7D4-0x008FA928 
	
		// Constructors
		public MissingMemberException(); // 0x008FA960-0x008FA9EC
		public MissingMemberException(string message); // 0x008FA4E8-0x008FA534
		protected MissingMemberException(SerializationInfo info, StreamingContext context); // 0x008FA568-0x008FA6A8
	
		// Methods
		internal static string FormatSignature(byte[] signature); // 0x008FA928-0x008FA92C
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x008FA9EC-0x008FAB64
	}

	[Serializable]
	[ComVisible] // 0x004B2B2C-0x004B2B40
	public class MissingMethodException : MissingMemberException, ISerializable // TypeDefIndex: 215
	{
		// Fields
		[NonSerialized]
		private string signature; // 0xA0
	
		// Properties
		public override string Message { get; } // 0x008FAC08-0x008FAD04 
	
		// Constructors
		public MissingMethodException(); // 0x008FAB64-0x008FABD4
		public MissingMethodException(string message); // 0x008FABD4-0x008FAC04
		protected MissingMethodException(SerializationInfo info, StreamingContext context); // 0x008FAC04-0x008FAC08
		public MissingMethodException(string className, string methodName); // 0x008FAD04-0x008FAD38
		private MissingMethodException(string className, string methodName, string signature, string message); // 0x008FAD38-0x008FAD78
	}

	[Serializable]
	[ComVisible] // 0x004B2B40-0x004B2B54
	public sealed class MulticastNotSupportedException : SystemException // TypeDefIndex: 216
	{
		// Constructors
		public MulticastNotSupportedException(); // 0x008FD938-0x008FD9AC
		public MulticastNotSupportedException(string message); // 0x008FD9AC-0x008FD9E0
		internal MulticastNotSupportedException(SerializationInfo info, StreamingContext context); // 0x008FD9E0-0x008FD9E8
	}

	[AttributeUsage] // 0x004B2B54-0x004B2BA0
	[ComVisible] // 0x004B2B54-0x004B2BA0
	public sealed class NonSerializedAttribute : Attribute // TypeDefIndex: 217
	{
		// Constructors
		public NonSerializedAttribute(); // 0x008FD9E8-0x008FD9F0
	}

	[Serializable]
	[ComVisible] // 0x004B2BA0-0x004B2BB4
	public class NotImplementedException : SystemException // TypeDefIndex: 218
	{
		// Constructors
		public NotImplementedException(); // 0x008FD9F0-0x008FDA64
		public NotImplementedException(string message); // 0x008FDA64-0x008FDA98
		protected NotImplementedException(SerializationInfo info, StreamingContext context); // 0x008FDA98-0x008FDAA0
	}

	[Serializable]
	[ComVisible] // 0x004B2BB4-0x004B2BC8
	public class NotSupportedException : SystemException // TypeDefIndex: 219
	{
		// Constructors
		public NotSupportedException(); // 0x008F9694-0x008F9708
		public NotSupportedException(string message); // 0x008F3F68-0x008F3F9C
		protected NotSupportedException(SerializationInfo info, StreamingContext context); // 0x008FDAA0-0x008FDAA8
	}

	[Serializable]
	[ComVisible] // 0x004B2BC8-0x004B2BDC
	public class NullReferenceException : SystemException // TypeDefIndex: 220
	{
		// Constructors
		public NullReferenceException(); // 0x008FDBA8-0x008FDC1C
		public NullReferenceException(string message); // 0x008FDC1C-0x008FDC50
		protected NullReferenceException(SerializationInfo info, StreamingContext context); // 0x008FDC50-0x008FDC58
	}

	[FriendAccessAllowed] // 0x004B2BDC-0x004B2BEC
	internal class Number // TypeDefIndex: 221
	{
		// Nested types
		[FriendAccessAllowed] // 0x004B2BEC-0x004B2BFC
		internal struct NumberBuffer // TypeDefIndex: 222
		{
			// Fields
			public static readonly int NumberBufferBytes; // 0x00
			private unsafe byte* baseAddress; // 0x00
			public unsafe char* digits; // 0x08
			public int precision; // 0x10
			public int scale; // 0x14
			public bool sign; // 0x18
	
			// Constructors
			public unsafe NumberBuffer(byte* stackBuffer); // 0x0058475C-0x00584770
			static NumberBuffer(); // 0x008FFF74-0x008FFFC8
	
			// Methods
			public unsafe byte* PackForNative(); // 0x00584770-0x00584794
		}
	
		// Methods
		public static unsafe bool NumberBufferToDecimal(byte* number, ref decimal value); // 0x008FDDF4-0x008FDDF8
		internal static unsafe bool NumberBufferToDouble(byte* number, ref double value); // 0x008FDDF8-0x008FDDFC
		public static string FormatDecimal(decimal value, string format, NumberFormatInfo info); // 0x008FDDFC-0x008FDE88
		public static string FormatDouble(double value, string format, NumberFormatInfo info); // 0x008FDF64-0x008FDFE8
		public static string FormatInt32(int value, string format, NumberFormatInfo info); // 0x008F5654-0x008F57E4
		public static string FormatUInt32(uint value, string format, NumberFormatInfo info); // 0x008F57E4-0x008F5860
		public static string FormatInt64(long value, string format, NumberFormatInfo info); // 0x008F7068-0x008F7150
		public static string FormatUInt64(ulong value, string format, NumberFormatInfo info); // 0x008FE344-0x008FE3C0
		public static string FormatSingle(float value, string format, NumberFormatInfo info); // 0x008FE474-0x008FE4F8
		private static bool HexNumberToInt32(ref NumberBuffer number, ref int value); // 0x008FE630-0x008FE664
		private static bool HexNumberToInt64(ref NumberBuffer number, ref long value); // 0x008FE704-0x008FE738
		private static bool HexNumberToUInt32(ref NumberBuffer number, ref uint value); // 0x008FE664-0x008FE704
		private static bool HexNumberToUInt64(ref NumberBuffer number, ref ulong value); // 0x008FE738-0x008FE7DC
		private static bool IsWhite(char ch); // 0x008FE7DC-0x008FE804
		private static bool NumberToInt32(ref NumberBuffer number, ref int value); // 0x008FE804-0x008FE890
		private static bool NumberToInt64(ref NumberBuffer number, ref long value); // 0x008FE890-0x008FE914
		private static bool NumberToUInt32(ref NumberBuffer number, ref uint value); // 0x008FE914-0x008FE9A4
		private static bool NumberToUInt64(ref NumberBuffer number, ref ulong value); // 0x008FE9A4-0x008FEA34
		private static unsafe char* MatchChars(char* p, string str); // 0x008FEA34-0x008FEAA8
		private static unsafe char* MatchChars(char* p, char* str); // 0x008FEAA8-0x008FEAF4
		internal static decimal ParseDecimal(string value, NumberStyles options, NumberFormatInfo numfmt); // 0x008FEAF4-0x008FEC68
		internal static double ParseDouble(string value, NumberStyles options, NumberFormatInfo numfmt); // 0x008FEDEC-0x008FF058
		internal static int ParseInt32(string s, NumberStyles style, NumberFormatInfo info); // 0x008F5A6C-0x008F61F4
		internal static long ParseInt64(string value, NumberStyles options, NumberFormatInfo numfmt); // 0x008F7180-0x008F72F0
		private static unsafe bool ParseNumber(ref char* str, NumberStyles options, ref NumberBuffer number, StringBuilder sb, NumberFormatInfo numfmt, bool parseDecimal); // 0x008FF06C-0x008FF590
		internal static float ParseSingle(string value, NumberStyles options, NumberFormatInfo numfmt); // 0x008FF590-0x008FF818
		internal static uint ParseUInt32(string value, NumberStyles options, NumberFormatInfo numfmt); // 0x008FF818-0x008FF968
		internal static ulong ParseUInt64(string value, NumberStyles options, NumberFormatInfo numfmt); // 0x008FF968-0x008FFAB8
		private static void StringToNumber(string str, NumberStyles options, ref NumberBuffer number, NumberFormatInfo info, bool parseDecimal); // 0x008FEC68-0x008FEDEC
		private static bool TrailingZeros(string s, int index); // 0x008FFAB8-0x008FFB20
		internal static bool TryParseDouble(string value, NumberStyles options, NumberFormatInfo numfmt, out double result); // 0x008FFB20-0x008FFC40
		internal static bool TryParseInt32(string s, NumberStyles style, NumberFormatInfo info, out int result); // 0x008F6638-0x008F6770
		internal static bool TryParseInt64(string s, NumberStyles style, NumberFormatInfo info, out long result); // 0x008F73AC-0x008F74DC
		internal static bool TryParseSingle(string value, NumberStyles options, NumberFormatInfo numfmt, out float result); // 0x008FFC40-0x008FFD98
		internal static bool TryParseUInt32(string s, NumberStyles style, NumberFormatInfo info, out uint result); // 0x008FFD98-0x008FFEBC
		internal static bool TryStringToNumber(string str, NumberStyles options, ref NumberBuffer number, NumberFormatInfo numfmt, bool parseDecimal); // 0x008FF058-0x008FF06C
		[FriendAccessAllowed] // 0x004BAB34-0x004BAB44
		internal static bool TryStringToNumber(string str, NumberStyles options, ref NumberBuffer number, StringBuilder sb, NumberFormatInfo numfmt, bool parseDecimal); // 0x008FFEBC-0x008FFF74
	}

	[Serializable]
	[ComVisible] // 0x004B2BFC-0x004B2C10
	public class ObjectDisposedException : InvalidOperationException // TypeDefIndex: 223
	{
		// Fields
		private string objectName; // 0x88
	
		// Properties
		public override string Message { get; } // 0x00BDBDBC-0x00BDBED0 
		public string ObjectName { get; } // 0x00BDBED0-0x00BDBF4C 
	
		// Constructors
		private ObjectDisposedException(); // 0x00BDBC74-0x00BDBCF0
		public ObjectDisposedException(string objectName); // 0x00BDBD34-0x00BDBDBC
		public ObjectDisposedException(string objectName, string message); // 0x00BDBCF0-0x00BDBD34
		protected ObjectDisposedException(SerializationInfo info, StreamingContext context); // 0x00BDBF4C-0x00BDBFE8
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00BDBFE8-0x00BDC0CC
	}

	[Serializable]
	[AttributeUsage] // 0x004B2C10-0x004B2C5C
	[ComVisible] // 0x004B2C10-0x004B2C5C
	public sealed class ObsoleteAttribute : Attribute // TypeDefIndex: 224
	{
		// Fields
		private string _message; // 0x10
		private bool _error; // 0x18
	
		// Properties
		public string Message { get; } // 0x00BDC168-0x00BDC170 
	
		// Constructors
		public ObsoleteAttribute(); // 0x00BDC0CC-0x00BDC0F8
		public ObsoleteAttribute(string message); // 0x00BDC0F8-0x00BDC128
		public ObsoleteAttribute(string message, bool error); // 0x00BDC128-0x00BDC168
	}

	[Serializable]
	[ComVisible] // 0x004B2C5C-0x004B2C70
	public class OperationCanceledException : SystemException // TypeDefIndex: 225
	{
		// Fields
		[NonSerialized]
		private CancellationToken _cancellationToken; // 0x88
	
		// Properties
		public CancellationToken CancellationToken { get; private set; } // 0x00BDC6E4-0x00BDC6EC 0x00BDC6EC-0x00BDC6F4
	
		// Constructors
		public OperationCanceledException(); // 0x00BDC6F4-0x00BDC768
		public OperationCanceledException(string message); // 0x00BDC768-0x00BDC79C
		public OperationCanceledException(string message, CancellationToken token); // 0x00BDC79C-0x00BDC7DC
		protected OperationCanceledException(SerializationInfo info, StreamingContext context); // 0x00BDC7DC-0x00BDC7E4
	}

	[Serializable]
	[ComVisible] // 0x004B2C70-0x004B2C84
	public class OutOfMemoryException : SystemException // TypeDefIndex: 226
	{
		// Constructors
		public OutOfMemoryException(); // 0x00BDCB04-0x00BDCB90
		public OutOfMemoryException(string message); // 0x00BDCB90-0x00BDCBC4
		protected OutOfMemoryException(SerializationInfo info, StreamingContext context); // 0x00BDCBC4-0x00BDCBCC
	}

	[Serializable]
	[ComVisible] // 0x004B2C84-0x004B2C98
	public class OverflowException : ArithmeticException // TypeDefIndex: 227
	{
		// Constructors
		public OverflowException(); // 0x00BDCBCC-0x00BDCC40
		public OverflowException(string message); // 0x00BDCC40-0x00BDCC74
		public OverflowException(string message, Exception innerException); // 0x00BDCC74-0x00BDCCA8
		protected OverflowException(SerializationInfo info, StreamingContext context); // 0x00BDCCA8-0x00BDCCB0
	}

	[AttributeUsage] // 0x004B2C98-0x004B2CE4
	[ComVisible] // 0x004B2C98-0x004B2CE4
	public sealed class ParamArrayAttribute : Attribute // TypeDefIndex: 228
	{
		// Constructors
		public ParamArrayAttribute(); // 0x00BDCCB0-0x00BDCCB8
	}

	internal struct ParamsArray // TypeDefIndex: 229
	{
		// Fields
		private static readonly object[] oneArgArray; // 0x00
		private static readonly object[] twoArgArray; // 0x08
		private static readonly object[] threeArgArray; // 0x10
		private readonly object arg0; // 0x00
		private readonly object arg1; // 0x08
		private readonly object arg2; // 0x10
		private readonly object[] args; // 0x18
	
		// Properties
		public int Length { get; } // 0x0058DCC0-0x0058DCE0 
		public object this[int index] { get => default; } // 0x0058DCE0-0x0058DCF4 
	
		// Constructors
		public ParamsArray(object arg0); // 0x0058DCA0-0x0058DCA8
		public ParamsArray(object arg0, object arg1); // 0x0058DCA8-0x0058DCB0
		public ParamsArray(object arg0, object arg1, object arg2); // 0x0058DCB0-0x0058DCB8
		public ParamsArray(object[] args); // 0x0058DCB8-0x0058DCC0
		static ParamsArray(); // 0x00BDE2CC-0x00BDE360
	
		// Methods
		private object GetAtSlow(int index); // 0x0058DCF4-0x0058DDC8
	}

	[Serializable]
	[ComVisible] // 0x004B2D1C-0x004B2D30
	public class PlatformNotSupportedException : NotSupportedException // TypeDefIndex: 230
	{
		// Constructors
		public PlatformNotSupportedException(); // 0x00BDF3E4-0x00BDF458
		protected PlatformNotSupportedException(SerializationInfo info, StreamingContext context); // 0x00BDF458-0x00BDF460
	}

	[Serializable]
	[ComVisible] // 0x004B2D30-0x004B2D44
	public class Random // TypeDefIndex: 231
	{
		// Fields
		private const int MBIG = 2147483647; // Metadata: 0x001DF9C0
		private const int MSEED = 161803398; // Metadata: 0x001DF9C4
		private const int MZ = 0; // Metadata: 0x001DF9C8
		private int inext; // 0x10
		private int inextp; // 0x14
		private int[] SeedArray; // 0x18
	
		// Constructors
		public Random(); // 0x00BDF564-0x00BDF590
		public Random(int Seed); // 0x00BDF590-0x00BDF7B8
	
		// Methods
		protected virtual double Sample(); // 0x00BDF7B8-0x00BDF7DC
		private int InternalSample(); // 0x00BDF7DC-0x00BDF884
		private double GetSampleForLargeRange(); // 0x00BDF884-0x00BDF8D4
		public virtual int Next(int minValue, int maxValue); // 0x00BDF8D4-0x00BDFA50
		public virtual int Next(int maxValue); // 0x00BDFA50-0x00BDFB5C
		public virtual double NextDouble(); // 0x00BDFB5C-0x00BDFB68
	}

	[Serializable]
	[ComVisible] // 0x004B2D44-0x004B2D58
	public class RankException : SystemException // TypeDefIndex: 232
	{
		// Constructors
		public RankException(); // 0x00BDFB68-0x00BDFBDC
		public RankException(string message); // 0x00BDFBDC-0x00BDFC10
		protected RankException(SerializationInfo info, StreamingContext context); // 0x00BDFC10-0x00BDFC18
	}

	internal enum TypeNameFormatFlags // TypeDefIndex: 233
	{
		FormatBasic = 0,
		FormatNamespace = 1,
		FormatFullInst = 2,
		FormatAssembly = 4,
		FormatSignature = 8,
		FormatNoVersion = 16,
		FormatAngleBrackets = 64,
		FormatStubInfo = 128,
		FormatGenericParam = 256,
		FormatSerialization = 259
	}

	internal enum TypeNameKind // TypeDefIndex: 234
	{
		Name = 0,
		ToString = 1,
		SerializationName = 2,
		FullName = 3
	}

	[Serializable]
	internal class RuntimeType : System.Reflection.TypeInfo, ISerializable, ICloneable // TypeDefIndex: 235
	{
		// Fields
		internal static readonly RuntimeType ValueType; // 0x00
		internal static readonly RuntimeType EnumType; // 0x08
		private static readonly RuntimeType ObjectType; // 0x10
		private static readonly RuntimeType StringType; // 0x18
		private static readonly RuntimeType DelegateType; // 0x20
		private static Type[] s_SICtorParamTypes; // 0x28
		private const BindingFlags MemberBindingMask = BindingFlags.Default | BindingFlags.IgnoreCase | BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy; // Metadata: 0x001DFA04
		private const BindingFlags InvocationMask = BindingFlags.Default | BindingFlags.InvokeMethod | BindingFlags.CreateInstance | BindingFlags.GetField | BindingFlags.SetField | BindingFlags.GetProperty | BindingFlags.SetProperty | BindingFlags.PutDispProperty | BindingFlags.PutRefDispProperty; // Metadata: 0x001DFA08
		private const BindingFlags BinderNonCreateInstance = BindingFlags.Default | BindingFlags.InvokeMethod | BindingFlags.GetField | BindingFlags.SetField | BindingFlags.GetProperty | BindingFlags.SetProperty; // Metadata: 0x001DFA0C
		private const BindingFlags BinderGetSetProperty = BindingFlags.Default | BindingFlags.GetProperty | BindingFlags.SetProperty; // Metadata: 0x001DFA10
		private const BindingFlags BinderSetInvokeProperty = BindingFlags.Default | BindingFlags.InvokeMethod | BindingFlags.SetProperty; // Metadata: 0x001DFA14
		private const BindingFlags BinderGetSetField = BindingFlags.Default | BindingFlags.GetField | BindingFlags.SetField; // Metadata: 0x001DFA18
		private const BindingFlags BinderSetInvokeField = BindingFlags.Default | BindingFlags.InvokeMethod | BindingFlags.SetField; // Metadata: 0x001DFA1C
		private const BindingFlags BinderNonFieldGetSet = BindingFlags.Default | BindingFlags.InvokeMethod | BindingFlags.CreateInstance | BindingFlags.GetProperty | BindingFlags.SetProperty | BindingFlags.PutDispProperty | BindingFlags.PutRefDispProperty | BindingFlags.ExactBinding | BindingFlags.SuppressChangeType | BindingFlags.OptionalParamBinding; // Metadata: 0x001DFA20
		private const BindingFlags ClassicBindingMask = BindingFlags.Default | BindingFlags.InvokeMethod | BindingFlags.GetProperty | BindingFlags.SetProperty | BindingFlags.PutDispProperty | BindingFlags.PutRefDispProperty; // Metadata: 0x001DFA24
		private static RuntimeType s_typedRef; // 0x30
		[NonSerialized]
		private MonoTypeInfo type_info; // 0x18
		internal object GenericCache; // 0x20
		private RuntimeConstructorInfo m_serializationCtor; // 0x28
	
		// Properties
		public override Module Module { get; } // 0x009FD7C0-0x009FD7C4 
		public override Assembly Assembly { get; } // 0x009FD7CC-0x009FD7D0 
		public override RuntimeTypeHandle TypeHandle { get; } // 0x009FD7D8-0x009FD810 
		public override Type BaseType { get; } // 0x009FDB60-0x009FDB64 
		public override Type UnderlyingSystemType { get; } // 0x009FDB6C-0x009FDB70 
		public override bool IsEnum { get; } // 0x009FDD60-0x009FDDE4 
		public override GenericParameterAttributes GenericParameterAttributes { get; } // 0x009FDE2C-0x009FDEDC 
		internal override bool IsSzArray { get; } // 0x009FDF20-0x009FDF24 
		public override bool IsGenericTypeDefinition { get; } // 0x009FF0CC-0x009FF0D0 
		public override bool IsGenericParameter { get; } // 0x009FF0D4-0x009FF0D8 
		public override int GenericParameterPosition { get; } // 0x009FF0D8-0x009FF188 
		public override bool IsGenericType { get; } // 0x009FF240-0x009FF244 
		public override MemberTypes MemberType { get; } // 0x00A009F4-0x00A00A40 
		public override Type ReflectedType { get; } // 0x00A00A40-0x00A00A4C 
		public override int MetadataToken { get; } // 0x00A00A4C-0x00A00A50 
		public override bool ContainsGenericParameters { get; } // 0x00A02BAC-0x00A02CC4 
		public override MethodBase DeclaringMethod { get; } // 0x00A02FAC-0x00A02FB0 
		public override string AssemblyQualifiedName { get; } // 0x00A02FC0-0x00A02FCC 
		public override Type DeclaringType { get; } // 0x00A02FCC-0x00A02FD0 
		public override string Name { get; } // 0x00A02FD0-0x00A02FD4 
		public override string Namespace { get; } // 0x00A02FD4-0x00A02FD8 
		public override string FullName { get; } // 0x00A030CC-0x00A031AC 
	
		// Nested types
		internal enum MemberListType // TypeDefIndex: 236
		{
			All = 0,
			CaseSensitive = 1,
			CaseInsensitive = 2,
			HandleToInfo = 3
		}
	
		private struct ListBuilder<T> // TypeDefIndex: 237
			where T : class
		{
			// Fields
			private T[] _items;
			private T _item;
			private int _count;
			private int _capacity;
	
			// Properties
			public T this[int index] { get => default; }
			public int Count { get; }
	
			// Constructors
			public ListBuilder(int capacity);
	
			// Methods
			public T[] ToArray();
			public void CopyTo(object[] array, int index);
			public void Add(T item);
		}
	
		// Constructors
		internal RuntimeType(); // 0x009FA2CC-0x009FA340
		static RuntimeType(); // 0x00A031AC-0x00A03814
	
		// Methods
		private static void ThrowIfTypeNeverValidGenericArgument(RuntimeType type); // 0x009F94F4-0x009F9664
		internal static void SanityCheckGenericArguments(RuntimeType[] genericArguments, RuntimeType[] genericParamters); // 0x009F9664-0x009F98B4
		private static void SplitName(string fullname, out string name, out string ns); // 0x009F98B4-0x009F999C
		private static void FilterHelper(BindingFlags bindingFlags, ref string name, bool allowPrefixLookup, out bool prefixLookup, out bool ignoreCase, out MemberListType listType); // 0x009F999C-0x009F9AC8
		private static void FilterHelper(BindingFlags bindingFlags, ref string name, out bool ignoreCase, out MemberListType listType); // 0x009F9AC8-0x009F9B64
		private static bool FilterApplyPrefixLookup(MemberInfo memberInfo, string name, bool ignoreCase); // 0x009F9B64-0x009F9BC8
		private static bool FilterApplyBase(MemberInfo memberInfo, BindingFlags bindingFlags, bool isPublic, bool isNonProtectedInternal, bool isStatic, string name, bool prefixLookup); // 0x009F9BC8-0x009F9DB8
		private static bool FilterApplyType(Type type, BindingFlags bindingFlags, string name, bool prefixLookup, string ns); // 0x009F9DB8-0x009F9EEC
		private static bool FilterApplyMethodInfo(RuntimeMethodInfo method, BindingFlags bindingFlags, CallingConventions callConv, Type[] argumentTypes); // 0x009F9EEC-0x009F9F90
		private static bool FilterApplyConstructorInfo(RuntimeConstructorInfo constructor, BindingFlags bindingFlags, CallingConventions callConv, Type[] argumentTypes); // 0x009FA228-0x009FA2CC
		private static bool FilterApplyMethodBase(MethodBase methodBase, BindingFlags methodFlags, BindingFlags bindingFlags, CallingConventions callConv, Type[] argumentTypes); // 0x009F9F90-0x009FA228
		internal bool IsSpecialSerializableType(); // 0x009FA340-0x009FA428
		private ListBuilder<MethodInfo> GetMethodCandidates(string name, BindingFlags bindingAttr, CallingConventions callConv, Type[] types, bool allowPrefixLookup); // 0x009FA634-0x009FA81C
		private ListBuilder<ConstructorInfo> GetConstructorCandidates(string name, BindingFlags bindingAttr, CallingConventions callConv, Type[] types, bool allowPrefixLookup); // 0x009FAB0C-0x009FAD88
		private ListBuilder<PropertyInfo> GetPropertyCandidates(string name, BindingFlags bindingAttr, Type[] types, bool allowPrefixLookup); // 0x009FAFA8-0x009FB1C0
		private ListBuilder<EventInfo> GetEventCandidates(string name, BindingFlags bindingAttr, bool allowPrefixLookup); // 0x009FB4B0-0x009FB694
		private ListBuilder<FieldInfo> GetFieldCandidates(string name, BindingFlags bindingAttr, bool allowPrefixLookup); // 0x009FB97C-0x009FBB60
		private ListBuilder<Type> GetNestedTypeCandidates(string fullname, BindingFlags bindingAttr, bool allowPrefixLookup); // 0x009FBE48-0x009FC008
		public override MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0x009FC38C-0x009FC41C
		[ComVisible] // 0x004BAB44-0x004BAB58
		public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0x009FC41C-0x009FC4BC
		public override PropertyInfo[] GetProperties(BindingFlags bindingAttr); // 0x009FC4BC-0x009FC548
		public override FieldInfo[] GetFields(BindingFlags bindingAttr); // 0x009FC548-0x009FC5D0
		protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConv, Type[] types, ParameterModifier[] modifiers); // 0x009FC5D0-0x009FC838
		protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x009FC838-0x009FCA34
		protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x009FCA34-0x009FCCA0
		public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x009FCCA0-0x009FCE8C
		public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x009FCE8C-0x009FD19C
		public override Type GetNestedType(string fullname, BindingFlags bindingAttr); // 0x009FD19C-0x009FD3B4
		public override MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr); // 0x009FD3B4-0x009FD7C0
		internal RuntimeModule GetRuntimeModule(); // 0x009FD7C4-0x009FD7C8
		internal RuntimeAssembly GetRuntimeAssembly(); // 0x009FD7D0-0x009FD7D4
		public override bool IsInstanceOfType(object o); // 0x009FD810-0x009FD814
		[ComVisible] // 0x004BAB58-0x004BAB6C
		public override bool IsSubclassOf(Type type); // 0x009FD818-0x009FD9AC
		public override bool IsAssignableFrom(Type c); // 0x009FD9AC-0x009FDA9C
		public override bool IsEquivalentTo(Type other); // 0x009FDAAC-0x009FDB58
		private RuntimeType GetBaseType(); // 0x009FA428-0x009FA628
		protected override TypeAttributes GetAttributeFlagsImpl(); // 0x009FDB70-0x009FDB74
		protected override bool IsContextfulImpl(); // 0x009FDB78-0x009FDB7C
		protected override bool IsByRefImpl(); // 0x009FDC0C-0x009FDC10
		protected override bool IsPrimitiveImpl(); // 0x009FDC14-0x009FDC18
		protected override bool IsPointerImpl(); // 0x009FDC1C-0x009FDC20
		protected override bool IsCOMObjectImpl(); // 0x009FDC24-0x009FDC28
		protected override bool IsValueTypeImpl(); // 0x009FDC38-0x009FDD60
		protected override bool HasElementTypeImpl(); // 0x009FDDE4-0x009FDDE8
		protected override bool IsArrayImpl(); // 0x009FDF78-0x009FDF7C
		public override int GetArrayRank(); // 0x009FDF80-0x009FE030
		public override Type GetElementType(); // 0x009FE034-0x009FE038
		public override string[] GetEnumNames(); // 0x009FE03C-0x009FE15C
		public override Array GetEnumValues(); // 0x009FE15C-0x009FE328
		public override Type GetEnumUnderlyingType(); // 0x009FE328-0x009FE408
		public override bool IsEnumDefined(object value); // 0x009FE408-0x009FE97C
		public override string GetEnumName(object value); // 0x009FE97C-0x009FEB7C
		internal RuntimeType[] GetGenericArgumentsInternal(); // 0x009FEB7C-0x009FEBF8
		public override Type[] GetGenericArguments(); // 0x009FEC00-0x009FEC7C
		public override Type MakeGenericType(params /* 0x004BD1E0-0x004BD1F0 */ Type[] instantiation); // 0x009FEC7C-0x009FF0C8
		public override Type GetGenericTypeDefinition(); // 0x009FF18C-0x009FF23C
		[DebuggerHidden] // 0x004BAB6C-0x004BABA4
		[DebuggerStepThrough] // 0x004BAB6C-0x004BABA4
		public override object InvokeMember(string name, BindingFlags bindingFlags, Binder binder, object target, object[] providedArgs, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParams); // 0x009FF248-0x00A00238
		public override bool Equals(object obj); // 0x00A00328-0x00A00334
		public static bool operator ==(RuntimeType left, RuntimeType right); // 0x009F4DE0-0x009F4DEC
		public static bool operator !=(RuntimeType left, RuntimeType right); // 0x009FA628-0x009FA634
		public object Clone(); // 0x00A00334-0x00A00338
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00A00338-0x00A003D4
		public override object[] GetCustomAttributes(bool inherit); // 0x00A003D4-0x00A00480
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00A00480-0x00A00614
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00A00614-0x00A007A8
		public override IList<CustomAttributeData> GetCustomAttributesData(); // 0x00A007A8-0x00A007B0
		internal override string FormatTypeName(bool serialization); // 0x00A007B0-0x00A00960
		private void CreateInstanceCheckThis(); // 0x00A00A54-0x00A00C6C
		internal object CreateInstanceImpl(BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, ref StackCrawlMark stackMark); // 0x00A00C6C-0x00A015D8
		[DebuggerHidden] // 0x004BABA4-0x004BABDC
		[DebuggerStepThrough] // 0x004BABA4-0x004BABDC
		internal object CreateInstanceDefaultCtor(bool publicOnly, bool skipCheckThis, bool fillCache, ref StackCrawlMark stackMark); // 0x00A015E0-0x00A01704
		internal MonoCMethod GetDefaultConstructor(); // 0x00A0173C-0x00A018DC
		private string GetDefaultMemberName(); // 0x00A00238-0x00A00328
		internal RuntimeConstructorInfo GetSerializationCtor(); // 0x009F3024-0x009F31F0
		internal object CreateInstanceSlow(bool publicOnly, bool skipCheckThis, bool fillCache, ref StackCrawlMark stackMark); // 0x00A01704-0x00A0173C
		private object CreateInstanceMono(bool nonPublic); // 0x00A018DC-0x00A01BE0
		internal object CheckValue(object value, Binder binder, CultureInfo culture, BindingFlags invokeAttr); // 0x00A01BE4-0x00A01D74
		private object TryConvertToType(object value, ref bool failed); // 0x00A01D74-0x00A01FDC
		private static object IsConvertibleToPrimitiveType(object value, Type targetType); // 0x00A01FDC-0x00A02A0C
		private string GetCachedName(TypeNameKind kind); // 0x00A00960-0x00A009F4
		private Type make_array_type(int rank); // 0x00A02A0C-0x00A02A10
		public override Type MakeArrayType(); // 0x00A02A10-0x00A02A18
		public override Type MakeArrayType(int rank); // 0x00A02A18-0x00A02AAC
		private Type make_byref_type(); // 0x00A02AAC-0x00A02AB0
		public override Type MakeByRefType(); // 0x00A02AB0-0x00A02B44
		private static Type MakePointerType(Type type); // 0x00A02B44-0x00A02B48
		public override Type MakePointerType(); // 0x00A02B48-0x00A02BAC
		public override Type[] GetGenericParameterConstraints(); // 0x00A02CC4-0x00A02DD0
		internal static object CreateInstanceForAnotherGenericParameter(Type genericType, RuntimeType genericArgument); // 0x00A02DD4-0x00A02F18
		private static Type MakeGenericType(Type gt, Type[] types); // 0x009FF0C8-0x009FF0CC
		internal IntPtr GetMethodsByName_native(IntPtr namePtr, BindingFlags bindingAttr, bool ignoreCase); // 0x00A02F18-0x00A02F20
		internal RuntimeMethodInfo[] GetMethodsByName(string name, BindingFlags bindingAttr, bool ignoreCase, RuntimeType reflectedType); // 0x009FA81C-0x009FAB0C
		private IntPtr GetPropertiesByName_native(IntPtr name, BindingFlags bindingAttr, bool icase); // 0x00A02F20-0x00A02F28
		private IntPtr GetConstructors_native(BindingFlags bindingAttr); // 0x00A02F28-0x00A02F2C
		private RuntimeConstructorInfo[] GetConstructors_internal(BindingFlags bindingAttr, RuntimeType reflectedType); // 0x009FAD88-0x009FAFA8
		private RuntimePropertyInfo[] GetPropertiesByName(string name, BindingFlags bindingAttr, bool icase, RuntimeType reflectedType); // 0x009FB1C0-0x009FB4B0
		protected override TypeCode GetTypeCodeImpl(); // 0x00A02F2C-0x00A02F90
		private static TypeCode GetTypeCodeImplInternal(Type type); // 0x00A02F90-0x00A02F94
		public override string ToString(); // 0x00A02F94-0x00A02FA0
		private bool IsGenericCOMObjectImpl(); // 0x00A015D8-0x00A015E0
		private static object CreateInstanceInternal(Type type); // 0x00A01BE0-0x00A01BE4
		internal string getFullName(bool full_name, bool assembly_qualified); // 0x00A02FA0-0x00A02FAC
		private Type[] GetGenericArgumentsInternal(bool runtimeArray); // 0x009FEBF8-0x009FEC00
		private GenericParameterAttributes GetGenericParameterAttributes(); // 0x009FDEDC-0x009FDF20
		private int GetGenericParameterPosition(); // 0x009FF188-0x009FF18C
		private IntPtr GetEvents_native(IntPtr name, BindingFlags bindingAttr); // 0x00A02FB0-0x00A02FB4
		private IntPtr GetFields_native(IntPtr name, BindingFlags bindingAttr); // 0x00A02FB4-0x00A02FB8
		private RuntimeFieldInfo[] GetFields_internal(string name, BindingFlags bindingAttr, RuntimeType reflectedType); // 0x009FBB60-0x009FBE48
		private RuntimeEventInfo[] GetEvents_internal(string name, BindingFlags bindingAttr, RuntimeType reflectedType); // 0x009FB694-0x009FB97C
		public override Type[] GetInterfaces(); // 0x00A02FB8-0x00A02FBC
		private IntPtr GetNestedTypes_native(IntPtr name, BindingFlags bindingAttr); // 0x00A02FBC-0x00A02FC0
		private RuntimeType[] GetNestedTypes_internal(string displayName, BindingFlags bindingAttr); // 0x009FC008-0x009FC38C
		public override int GetHashCode(); // 0x00A02FD8-0x00A030CC
	}

	[Serializable]
	internal class ReflectionOnlyType : RuntimeType // TypeDefIndex: 238
	{
		// Properties
		public override RuntimeTypeHandle TypeHandle { get; } // 0x00872E9C-0x00872F20 
	
		// Constructors
		private ReflectionOnlyType(); // 0x00872E34-0x00872E9C
	}

	[Serializable]
	[CLSCompliant] // 0x004B2D90-0x004B2DD0
	[ComVisible] // 0x004B2D90-0x004B2DD0
	public struct SByte : IComparable, IFormattable, IConvertible, IComparable<sbyte>, IEquatable<sbyte> // TypeDefIndex: 239
	{
		// Fields
		private sbyte m_value; // 0x00
		public const sbyte MaxValue = 127; // Metadata: 0x001DFA38
		public const sbyte MinValue = 128; // Metadata: 0x001DFA39
	
		// Methods
		public int CompareTo(object obj); // 0x005882CC-0x005882D4
		public int CompareTo(sbyte value); // 0x005882D4-0x005882E0
		public override bool Equals(object obj); // 0x005882E0-0x005882E8
		public bool Equals(sbyte obj); // 0x005882E8-0x005882F8
		public override int GetHashCode(); // 0x005882F8-0x00588304
		public override string ToString(); // 0x00588304-0x00588338
		public string ToString(IFormatProvider provider); // 0x00588338-0x00588370
		public string ToString(string format, IFormatProvider provider); // 0x00588370-0x005883A8
		private string ToString(string format, NumberFormatInfo info); // 0x005883A8-0x005883B0
		[CLSCompliant] // 0x004BABDC-0x004BABF0
		public static sbyte Parse(string s, IFormatProvider provider); // 0x00A03B28-0x00A03B5C
		[CLSCompliant] // 0x004BABF0-0x004BAC04
		public static sbyte Parse(string s, NumberStyles style, IFormatProvider provider); // 0x00A03CE8-0x00A043A0
		private static sbyte Parse(string s, NumberStyles style, NumberFormatInfo info); // 0x00A03B5C-0x00A03CE8
		public TypeCode GetTypeCode(); // 0x005883B0-0x005883B8
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x005883B8-0x005883C0
		char IConvertible.ToChar(IFormatProvider provider); // 0x005883C0-0x005883C8
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x005883C8-0x005883D0
		byte IConvertible.ToByte(IFormatProvider provider); // 0x005883D0-0x005883D8
		short IConvertible.ToInt16(IFormatProvider provider); // 0x005883D8-0x005883E0
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x005883E0-0x005883E8
		int IConvertible.ToInt32(IFormatProvider provider); // 0x005883E8-0x005883F0
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x005883F0-0x005883F8
		long IConvertible.ToInt64(IFormatProvider provider); // 0x005883F8-0x00588400
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x00588400-0x00588408
		float IConvertible.ToSingle(IFormatProvider provider); // 0x00588408-0x00588410
		double IConvertible.ToDouble(IFormatProvider provider); // 0x00588410-0x00588418
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x00588418-0x00588420
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x00588420-0x0058842C
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x0058842C-0x00588488
	}

	[AttributeUsage] // 0x004B2DD0-0x004B2E18
	[ComVisible] // 0x004B2DD0-0x004B2E18
	public sealed class SerializableAttribute : Attribute // TypeDefIndex: 240
	{
		// Constructors
		public SerializableAttribute(); // 0x00B04F90-0x00B04F98
	}

	[Serializable]
	[ComVisible] // 0x004B2E18-0x004B2E2C
	public struct Single : IComparable, IFormattable, IConvertible, IComparable<float>, IEquatable<float> // TypeDefIndex: 241
	{
		// Fields
		internal float m_value; // 0x00
		public const float MinValue = -3.4028235E+38f; // Metadata: 0x001DFA3A
		public const float Epsilon = 1E-45f; // Metadata: 0x001DFA3E
		public const float MaxValue = 3.4028235E+38f; // Metadata: 0x001DFA42
		public const float PositiveInfinity = 1F / 0F; // Metadata: 0x001DFA46
		public const float NegativeInfinity = -1F / 0F; // Metadata: 0x001DFA4A
		public const float NaN = 0F / 0F; // Metadata: 0x001DFA4E
	
		// Methods
		public static bool IsInfinity(float f); // 0x00B04F98-0x00B04FB0
		[ReliabilityContract] // 0x004BAC04-0x004BAC1C
		public static bool IsNaN(float f); // 0x00B04FB0-0x00B05350
		public int CompareTo(object value); // 0x0058B2F0-0x0058B2F8
		public int CompareTo(float value); // 0x0058B2F8-0x0058B354
		public override bool Equals(object obj); // 0x0058B354-0x0058B35C
		public bool Equals(float obj); // 0x0058B35C-0x0058B3A8
		public override int GetHashCode(); // 0x0058B3A8-0x0058B3BC
		public override string ToString(); // 0x0058B3BC-0x0058B3F0
		public string ToString(IFormatProvider provider); // 0x0058B3F0-0x0058B428
		public string ToString(string format); // 0x0058B428-0x0058B468
		public string ToString(string format, IFormatProvider provider); // 0x0058B468-0x0058B4AC
		public static float Parse(string s); // 0x00B05350-0x00B05384
		public static float Parse(string s, IFormatProvider provider); // 0x00B0538C-0x00B053C4
		public static float Parse(string s, NumberStyles style, IFormatProvider provider); // 0x00B053C4-0x00B05418
		private static float Parse(string s, NumberStyles style, NumberFormatInfo info); // 0x00B05384-0x00B0538C
		public static bool TryParse(string s, out float result); // 0x00B05418-0x00B05450
		private static bool TryParse(string s, NumberStyles style, NumberFormatInfo info, out float result); // 0x00B05450-0x00B05520
		public TypeCode GetTypeCode(); // 0x0058B4AC-0x0058B4B4
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x0058B4B4-0x0058B4BC
		char IConvertible.ToChar(IFormatProvider provider); // 0x0058B4BC-0x0058B4C8
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x0058B4C8-0x0058B4D0
		byte IConvertible.ToByte(IFormatProvider provider); // 0x0058B4D0-0x0058B4D8
		short IConvertible.ToInt16(IFormatProvider provider); // 0x0058B4D8-0x0058B4E0
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x0058B4E0-0x0058B4E8
		int IConvertible.ToInt32(IFormatProvider provider); // 0x0058B4E8-0x0058B4F0
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x0058B4F0-0x0058B4F8
		long IConvertible.ToInt64(IFormatProvider provider); // 0x0058B4F8-0x0058B500
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x0058B500-0x0058B508
		float IConvertible.ToSingle(IFormatProvider provider); // 0x0058B508-0x0058B510
		double IConvertible.ToDouble(IFormatProvider provider); // 0x0058B510-0x0058B518
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x0058B518-0x0058B520
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x0058B520-0x0058B52C
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x0058B52C-0x0058B5D0
	}

	[Serializable]
	[ComVisible] // 0x004B2E2C-0x004B2E40
	public sealed class StackOverflowException : SystemException // TypeDefIndex: 242
	{
		// Constructors
		public StackOverflowException(); // 0x00B05DA0-0x00B05E10
		public StackOverflowException(string message); // 0x00B05E10-0x00B05E40
		internal StackOverflowException(SerializationInfo info, StreamingContext context); // 0x00B05E40-0x00B05E44
	}

	[Serializable]
	[ComVisible] // 0x004B2E40-0x004B2E90
	public sealed class String : IComparable, ICloneable, IConvertible, IComparable<string>, IEnumerable<char>, IEquatable<string> // TypeDefIndex: 243
	{
		// Fields
		[NonSerialized]
		private int m_stringLength; // 0x10
		[NonSerialized]
		private char m_firstChar; // 0x14
		private const int TrimHead = 0; // Metadata: 0x001DFA52
		private const int TrimTail = 1; // Metadata: 0x001DFA56
		private const int TrimBoth = 2; // Metadata: 0x001DFA5A
		public static readonly string Empty; // 0x00
		private const int charPtrAlignConst = 1; // Metadata: 0x001DFA5E
		private const int alignConst = 3; // Metadata: 0x001DFA62
	
		// Properties
		public char this[int index] { get => default; } // 0x00B04050-0x00B040E8 
		public int Length { get; } // 0x00B0CA1C-0x00B0CA24 
	
		// Constructors
		[CLSCompliant] // 0x004BACD0-0x004BACE4
		public unsafe String(char* value); // 0x00B07EE8-0x00B07EEC
		[CLSCompliant] // 0x004BACE4-0x004BACF8
		public unsafe String(char* value, int startIndex, int length); // 0x00B07EEC-0x00B07EF0
		[CLSCompliant] // 0x004BACF8-0x004BAD0C
		public unsafe String(sbyte* value, int startIndex, int length, Encoding enc); // 0x00B07EF0-0x00B07EF4
		public String(char[] value, int startIndex, int length); // 0x00B08168-0x00B0816C
		public String(char[] value); // 0x00B0816C-0x00B08170
		public String(char c, int count); // 0x00B0886C-0x00B08870
	
		// Methods
		public static string Join(string separator, params /* 0x004BD1F0-0x004BD200 */ string[] value); // 0x00B05E44-0x00B05EE4
		public static string Join(string separator, string[] value, int startIndex, int count); // 0x00B05EE4-0x00B06198
		private static int CompareOrdinalIgnoreCaseHelper(string strA, string strB); // 0x00B0619C-0x00B0628C
		[ReliabilityContract] // 0x004BAC1C-0x004BAC34
		private static bool EqualsHelper(string strA, string strB); // 0x00B0628C-0x00B063E0
		private static int CompareOrdinalHelper(string strA, string strB); // 0x00B063E0-0x00B06574
		[ReliabilityContract] // 0x004BAC34-0x004BAC4C
		public override bool Equals(object obj); // 0x00B06574-0x00B0665C
		[ReliabilityContract] // 0x004BAC4C-0x004BAC64
		public bool Equals(string value); // 0x00B05528-0x00B05DA0
		public bool Equals(string value, StringComparison comparisonType); // 0x00B0665C-0x00B06914
		public static bool Equals(string a, string b); // 0x00B06954-0x00B06990
		public static bool Equals(string a, string b, StringComparison comparisonType); // 0x00B06990-0x00B06C50
		public static bool operator ==(string a, string b); // 0x00B049F8-0x00B049FC
		public static bool operator !=(string a, string b); // 0x00B06C50-0x00B06C6C
		public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count); // 0x00B06C6C-0x00B06E54
		public char[] ToCharArray(); // 0x00B06E60-0x00B06EF8
		public static bool IsNullOrEmpty(string value); // 0x00B06EF8-0x00B06F14
		public static bool IsNullOrWhiteSpace(string value); // 0x00B06F14-0x00B06FD0
		[ReliabilityContract] // 0x004BAC64-0x004BAC7C
		public override int GetHashCode(); // 0x00B06FD0-0x00B07048
		[ReliabilityContract] // 0x004BAC7C-0x004BAC94
		internal int GetLegacyNonRandomizedHashCode(); // 0x00B07048-0x00B070C0
		public string[] Split(params /* 0x004BD200-0x004BD210 */ char[] separator); // 0x00B070C0-0x00B070CC
		[ComVisible] // 0x004BAC94-0x004BACA8
		public string[] Split(char[] separator, StringSplitOptions options); // 0x00B0733C-0x00B0734C
		[ComVisible] // 0x004BACA8-0x004BACBC
		public string[] Split(char[] separator, int count, StringSplitOptions options); // 0x00B0734C-0x00B07350
		[ComVisible] // 0x004BACBC-0x004BACD0
		internal string[] SplitInternal(char[] separator, int count, StringSplitOptions options); // 0x00B070CC-0x00B0733C
		private string[] InternalSplitKeepEmptyEntries(int[] sepList, int[] lengthList, int numReplaces, int count); // 0x00B07808-0x00B07A2C
		private string[] InternalSplitOmitEmptyEntries(int[] sepList, int[] lengthList, int numReplaces, int count); // 0x00B0751C-0x00B07808
		private int MakeSeparatorList(char[] separator, ref int[] sepList); // 0x00B07350-0x00B0751C
		public string Substring(int startIndex); // 0x00B07B90-0x00B07B9C
		public string Substring(int startIndex, int length); // 0x00B07A2C-0x00B07B90
		private string InternalSubString(int startIndex, int length); // 0x00B07B9C-0x00B07BF8
		public string Trim(params /* 0x004BD210-0x004BD220 */ char[] trimChars); // 0x00B07BF8-0x00B07C14
		public string TrimEnd(params /* 0x004BD220-0x004BD230 */ char[] trimChars); // 0x00B07ECC-0x00B07EE8
		internal static unsafe string CreateStringFromEncoding(byte* bytes, int byteLength, Encoding encoding); // 0x00B07EF4-0x00B07FD4
		public string Normalize(NormalizationForm normalizationForm); // 0x00B07FD4-0x00B080AC
		internal static string FastAllocateString(int length); // 0x00B06198-0x00B0619C
		private static void FillStringChecked(string dest, int destPos, string src); // 0x00B080AC-0x00B08168
		internal static unsafe void wstrcpy(char* dmem, char* smem, int charCount); // 0x00B06E54-0x00B06E60
		private string CtorCharArray(char[] value); // 0x00B08170-0x00B08228
		private string CtorCharArrayStartLength(char[] value, int startIndex, int length); // 0x00B08228-0x00B083F4
		private static unsafe int wcslen(char* ptr); // 0x00B083F4-0x00B08474
		private unsafe string CtorCharPtr(char* ptr); // 0x00B08474-0x00B08634
		private unsafe string CtorCharPtrStartLength(char* ptr, int startIndex, int length); // 0x00B08634-0x00B0886C
		public static int Compare(string strA, string strB); // 0x00B08870-0x00B08910
		public static int Compare(string strA, string strB, StringComparison comparisonType); // 0x00B08910-0x00B08C1C
		public static int Compare(string strA, string strB, bool ignoreCase, CultureInfo culture); // 0x00B08C1C-0x00B08CE8
		public static int Compare(string strA, int indexA, string strB, int indexB, int length); // 0x00B08CE8-0x00B08DE8
		public static int Compare(string strA, int indexA, string strB, int indexB, int length, CultureInfo culture, CompareOptions options); // 0x00B08DE8-0x00B08F14
		public static int Compare(string strA, int indexA, string strB, int indexB, int length, StringComparison comparisonType); // 0x00B08F14-0x00B09330
		public int CompareTo(object value); // 0x00B094AC-0x00B09588
		public int CompareTo(string strB); // 0x00B09588-0x00B09640
		public static int CompareOrdinal(string strA, string strB); // 0x00B09640-0x00B09688
		public static int CompareOrdinal(string strA, int indexA, string strB, int indexB, int length); // 0x00B09688-0x00B096B4
		public bool Contains(string value); // 0x00B096B4-0x00B096DC
		public bool EndsWith(string value); // 0x00B096F0-0x00B096F8
		[ComVisible] // 0x004BAD0C-0x004BAD20
		public bool EndsWith(string value, StringComparison comparisonType); // 0x00B096F8-0x00B09994
		internal bool EndsWith(char value); // 0x00B09994-0x00B099D8
		public int IndexOf(char value); // 0x00B099D8-0x00B099E4
		public int IndexOf(char value, int startIndex); // 0x00B09B30-0x00B09B3C
		public int IndexOfAny(char[] anyOf); // 0x00B04044-0x00B04050
		public int IndexOfAny(char[] anyOf, int startIndex); // 0x00B09C58-0x00B09C64
		public int IndexOf(string value); // 0x00B09C64-0x00B09C74
		public int IndexOf(string value, int startIndex); // 0x00B09C74-0x00B09C84
		public int IndexOf(string value, StringComparison comparisonType); // 0x00B096DC-0x00B096F0
		public int IndexOf(string value, int startIndex, StringComparison comparisonType); // 0x00B09C84-0x00B09C98
		public int IndexOf(string value, int startIndex, int count, StringComparison comparisonType); // 0x00B09C98-0x00B0A044
		public int LastIndexOf(char value); // 0x00B0A044-0x00B0A050
		public int LastIndexOf(char value, int startIndex); // 0x00B0A19C-0x00B0A1A4
		public int LastIndexOfAny(char[] anyOf); // 0x00B0A1A4-0x00B0A1B0
		public int LastIndexOfAny(char[] anyOf, int startIndex); // 0x00B0A318-0x00B0A320
		public int LastIndexOf(string value, int startIndex); // 0x00B0A320-0x00B0A32C
		public int LastIndexOf(string value, StringComparison comparisonType); // 0x00B0A748-0x00B0A75C
		public int LastIndexOf(string value, int startIndex, int count, StringComparison comparisonType); // 0x00B0A32C-0x00B0A748
		public string PadLeft(int totalWidth, char paddingChar); // 0x00B0A75C-0x00B0A764
		public string PadRight(int totalWidth, char paddingChar); // 0x00B0A8B8-0x00B0A8C0
		public bool StartsWith(string value); // 0x00B0A8C0-0x00B0A95C
		[ComVisible] // 0x004BAD20-0x004BAD34
		public bool StartsWith(string value, StringComparison comparisonType); // 0x00B0A95C-0x00B0AC00
		public string ToLower(); // 0x00B0AC00-0x00B0AC70
		public string ToLower(CultureInfo culture); // 0x00B0AC70-0x00B0AD24
		public string ToLowerInvariant(); // 0x00B0AD24-0x00B0AD94
		public string ToUpper(); // 0x00B0AD94-0x00B0AE04
		public string ToUpper(CultureInfo culture); // 0x00B0AE04-0x00B0AEB8
		public string ToUpperInvariant(); // 0x00B0AEB8-0x00B0AF28
		public override string ToString(); // 0x00B0AF28-0x00B0AF2C
		public string ToString(IFormatProvider provider); // 0x00B0AF2C-0x00B0AF30
		public object Clone(); // 0x00B0AF30-0x00B0AF34
		private static bool IsBOMWhitespace(char c); // 0x00B0AF34-0x00B0AF3C
		public string Trim(); // 0x00B05520-0x00B05528
		private string TrimHelper(int trimType); // 0x00B07C14-0x00B07D78
		private string TrimHelper(char[] trimChars, int trimType); // 0x00B07D78-0x00B07ECC
		private string CreateTrimmedString(int start, int end); // 0x00B0AF3C-0x00B0AFD4
		public string Insert(int startIndex, string value); // 0x00B0AFD4-0x00B0B138
		public string Replace(char oldChar, char newChar); // 0x00B0B138-0x00B0B13C
		public string Replace(string oldValue, string newValue); // 0x00B0B230-0x00B0B2D0
		public string Remove(int startIndex, int count); // 0x00B0B3D8-0x00B0B55C
		public static string Format(string format, object arg0); // 0x00B0B55C-0x00B0B5AC
		public static string Format(string format, object arg0, object arg1); // 0x00B0B6A0-0x00B0B6F0
		public static string Format(string format, object arg0, object arg1, object arg2); // 0x00B0B6F0-0x00B0B740
		public static string Format(string format, params /* 0x004BD230-0x004BD240 */ object[] args); // 0x00B0B740-0x00B0B81C
		public static string Format(IFormatProvider provider, string format, object arg0); // 0x00B0B81C-0x00B0B874
		public static string Format(IFormatProvider provider, string format, object arg0, object arg1); // 0x00B0B874-0x00B0B8D0
		public static string Format(IFormatProvider provider, string format, object arg0, object arg1, object arg2); // 0x00B0B8D0-0x00B0B930
		public static string Format(IFormatProvider provider, string format, params /* 0x004BD240-0x004BD250 */ object[] args); // 0x00B0B930-0x00B0BA10
		private static string FormatHelper(IFormatProvider provider, string format, ParamsArray args); // 0x00B0B5AC-0x00B0B6A0
		public static string Copy(string str); // 0x00B0BA10-0x00B0BACC
		public static string Concat(object arg0, object arg1); // 0x00B0BACC-0x00B0BB94
		public static string Concat(object arg0, object arg1, object arg2); // 0x00B0BB94-0x00B0BC98
		public static string Concat(params /* 0x004BD250-0x004BD260 */ object[] args); // 0x00B0BC98-0x00B0BE8C
		public static string Concat(string str0, string str1); // 0x00B03B38-0x00B03C28
		public static string Concat(string str0, string str1, string str2); // 0x00B02FFC-0x00B03110
		public static string Concat(string str0, string str1, string str2, string str3); // 0x00B0BF3C-0x00B0C0AC
		private static string ConcatArray(string[] values, int totalLength); // 0x00B0BE8C-0x00B0BF3C
		public static string Concat(params /* 0x004BD260-0x004BD270 */ string[] values); // 0x00B0C0AC-0x00B0C23C
		public TypeCode GetTypeCode(); // 0x00B0C23C-0x00B0C244
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x00B0C244-0x00B0C2BC
		char IConvertible.ToChar(IFormatProvider provider); // 0x00B0C2BC-0x00B0C334
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x00B0C334-0x00B0C3AC
		byte IConvertible.ToByte(IFormatProvider provider); // 0x00B0C3AC-0x00B0C424
		short IConvertible.ToInt16(IFormatProvider provider); // 0x00B0C424-0x00B0C49C
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x00B0C49C-0x00B0C514
		int IConvertible.ToInt32(IFormatProvider provider); // 0x00B0C514-0x00B0C58C
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x00B0C58C-0x00B0C604
		long IConvertible.ToInt64(IFormatProvider provider); // 0x00B0C604-0x00B0C67C
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x00B0C67C-0x00B0C6F4
		float IConvertible.ToSingle(IFormatProvider provider); // 0x00B0C6F4-0x00B0C76C
		double IConvertible.ToDouble(IFormatProvider provider); // 0x00B0C76C-0x00B0C7E4
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x00B0C7E4-0x00B0C85C
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x00B0C85C-0x00B0C8D4
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x00B0C8D4-0x00B0C954
		IEnumerator<char> IEnumerable<char>.GetEnumerator(); // 0x00B0C954-0x00B0C9B8
		IEnumerator IEnumerable.GetEnumerator(); // 0x00B0C9B8-0x00B0CA1C
		internal static int CompareOrdinalUnchecked(string strA, int indexA, int lenA, string strB, int indexB, int lenB); // 0x00B0CA24-0x00B0CBA8
		public int IndexOf(char value, int startIndex, int count); // 0x00B099E4-0x00B09B30
		internal int IndexOfUnchecked(char value, int startIndex, int count); // 0x00B0CBA8-0x00B0CD6C
		internal int IndexOfUnchecked(string value, int startIndex, int count); // 0x00B0CD6C-0x00B0CE90
		public int IndexOfAny(char[] anyOf, int startIndex, int count); // 0x00B09B3C-0x00B09C58
		private int IndexOfAnyUnchecked(char[] anyOf, int startIndex, int count); // 0x00B0CE90-0x00B0CF84
		public int LastIndexOf(char value, int startIndex, int count); // 0x00B0A050-0x00B0A19C
		internal int LastIndexOfUnchecked(char value, int startIndex, int count); // 0x00B0CF84-0x00B0D150
		public int LastIndexOfAny(char[] anyOf, int startIndex, int count); // 0x00B0A1B0-0x00B0A318
		private int LastIndexOfAnyUnchecked(char[] anyOf, int startIndex, int count); // 0x00B0D150-0x00B0D1F4
		internal static int nativeCompareOrdinalEx(string strA, int indexA, string strB, int indexB, int count); // 0x00B09330-0x00B094AC
		private string ReplaceInternal(char oldChar, char newChar); // 0x00B0B13C-0x00B0B230
		internal string ReplaceInternal(string oldValue, string newValue); // 0x00B0B2D0-0x00B0B3D8
		private string ReplaceUnchecked(string oldValue, string newValue); // 0x00B0D23C-0x00B0D5E0
		private string ReplaceFallback(string oldValue, string newValue, int testedCount); // 0x00B0D5E0-0x00B0D738
		private string PadHelper(int totalWidth, char paddingChar, bool isRightPadded); // 0x00B0A764-0x00B0A8B8
		internal bool StartsWithOrdinalUnchecked(string value); // 0x00B0D738-0x00B0D78C
		internal bool IsAscii(); // 0x00B06914-0x00B06954
		internal static unsafe void CharCopy(char* dest, char* src, int count); // 0x00B0D1F4-0x00B0D23C
		private static unsafe void memset(byte* dest, int val, int len); // 0x00B0D78C-0x00B0D844
		private static unsafe void memcpy(byte* dest, byte* src, int size); // 0x00B0D844-0x00B0D84C
		internal static unsafe void bzero(byte* dest, int len); // 0x00B0D84C-0x00B0D85C
		internal static unsafe void bzero_aligned_1(byte* dest, int len); // 0x00B0D85C-0x00B0D864
		internal static unsafe void bzero_aligned_2(byte* dest, int len); // 0x00B0D864-0x00B0D86C
		internal static unsafe void bzero_aligned_4(byte* dest, int len); // 0x00B0D86C-0x00B0D874
		internal static unsafe void bzero_aligned_8(byte* dest, int len); // 0x00B0D874-0x00B0D87C
		internal static unsafe void memcpy_aligned_1(byte* dest, byte* src, int size); // 0x00B0D87C-0x00B0D888
		internal static unsafe void memcpy_aligned_2(byte* dest, byte* src, int size); // 0x00B0D888-0x00B0D894
		internal static unsafe void memcpy_aligned_4(byte* dest, byte* src, int size); // 0x00B0D894-0x00B0D8A0
		internal static unsafe void memcpy_aligned_8(byte* dest, byte* src, int size); // 0x00B0D8A0-0x00B0D8AC
		private unsafe string CreateString(sbyte* value); // 0x00B0D8AC-0x00B0D940
		private unsafe string CreateString(sbyte* value, int startIndex, int length); // 0x00B0DC2C-0x00B0DC34
		private unsafe string CreateString(char* value); // 0x00B0DC34-0x00B0DC38
		private unsafe string CreateString(char* value, int startIndex, int length); // 0x00B0DC38-0x00B0DC3C
		private string CreateString(char[] val, int startIndex, int length); // 0x00B0DC3C-0x00B0DC40
		private string CreateString(char[] val); // 0x00B0DC40-0x00B0DC44
		private string CreateString(char c, int count); // 0x00B0DC44-0x00B0DD2C
		private unsafe string CreateString(sbyte* value, int startIndex, int length, Encoding enc); // 0x00B0D940-0x00B0DC2C
	}

	[ComVisible] // 0x004B2E90-0x004B2ECC
	[Flags] // 0x004B2E90-0x004B2ECC
	public enum StringSplitOptions // TypeDefIndex: 244
	{
		None = 0,
		RemoveEmptyEntries = 1
	}

	[Serializable]
	[ComVisible] // 0x004B2ECC-0x004B2EE0
	public abstract class StringComparer : IComparer, IEqualityComparer, IComparer<string>, IEqualityComparer<string> // TypeDefIndex: 245
	{
		// Fields
		private static readonly StringComparer _invariantCulture; // 0x00
		private static readonly StringComparer _invariantCultureIgnoreCase; // 0x08
		private static readonly StringComparer _ordinal; // 0x10
		private static readonly StringComparer _ordinalIgnoreCase; // 0x18
	
		// Properties
		public static StringComparer InvariantCultureIgnoreCase { get; } // 0x00B0DD2C-0x00B0DD94 
		public static StringComparer CurrentCultureIgnoreCase { get; } // 0x00B0DD94-0x00B0DE28 
		public static StringComparer Ordinal { get; } // 0x00B0DE28-0x00B0DE90 
		public static StringComparer OrdinalIgnoreCase { get; } // 0x00B0DE90-0x00B0DEF8 
	
		// Constructors
		protected StringComparer(); // 0x00B0E234-0x00B0E23C
		static StringComparer(); // 0x00B0E23C-0x00B0E370
	
		// Methods
		public int Compare(object x, object y); // 0x00B0DEF8-0x00B0E094
		public new bool Equals(object x, object y); // 0x00B0E094-0x00B0E164
		public int GetHashCode(object obj); // 0x00B0E164-0x00B0E234
		public abstract int Compare(string x, string y);
		public abstract bool Equals(string x, string y);
		public abstract int GetHashCode(string obj);
	}

	[Serializable]
	internal sealed class CultureAwareComparer : StringComparer // TypeDefIndex: 246
	{
		// Fields
		private CompareInfo _compareInfo; // 0x10
		private bool _ignoreCase; // 0x18
		[System.Runtime.Serialization.OptionalField] // 0x004B8B88-0x004B8B98
		private CompareOptions _options; // 0x1C
	
		// Constructors
		internal CultureAwareComparer(CultureInfo culture, bool ignoreCase); // 0x00AC0F98-0x00AC1044
	
		// Methods
		public override int Compare(string x, string y); // 0x00AC1044-0x00AC1098
		public override bool Equals(string x, string y); // 0x00AC1098-0x00AC10EC
		public override int GetHashCode(string obj); // 0x00AC10EC-0x00AC1194
		public override bool Equals(object obj); // 0x00AC1194-0x00AC1260
		public override int GetHashCode(); // 0x00AC1260-0x00AC12A0
	}

	[Serializable]
	internal sealed class OrdinalComparer : StringComparer // TypeDefIndex: 247
	{
		// Fields
		private bool _ignoreCase; // 0x10
	
		// Constructors
		internal OrdinalComparer(bool ignoreCase); // 0x00BDC7E4-0x00BDC864
	
		// Methods
		public override int Compare(string x, string y); // 0x00BDC864-0x00BDC8BC
		public override bool Equals(string x, string y); // 0x00BDC8BC-0x00BDC93C
		public override int GetHashCode(string obj); // 0x00BDC93C-0x00BDC9F8
		public override bool Equals(object obj); // 0x00BDC9F8-0x00BDCA98
		public override int GetHashCode(); // 0x00BDCA98-0x00BDCB04
	}

	[Serializable]
	[ComVisible] // 0x004B2EE0-0x004B2EF4
	public class SystemException : Exception // TypeDefIndex: 248
	{
		// Constructors
		public SystemException(); // 0x00B04EF0-0x00B04F8C
		public SystemException(string message); // 0x00AFB7F4-0x00AFB880
		public SystemException(string message, Exception innerException); // 0x00B04D2C-0x00B04DC0
		protected SystemException(SerializationInfo info, StreamingContext context); // 0x00AFB8B4-0x00AFB944
	}

	[AttributeUsage] // 0x004B2EF4-0x004B2F34
	[ComVisible] // 0x004B2EF4-0x004B2F34
	public sealed class STAThreadAttribute : Attribute // TypeDefIndex: 249
	{
		// Constructors
		public STAThreadAttribute(); // 0x00A043A0-0x00A043A8
	}

	[Serializable]
	[AttributeUsage] // 0x004B2F34-0x004B2F7C
	[ComVisible] // 0x004B2F34-0x004B2F7C
	public class ThreadStaticAttribute : Attribute // TypeDefIndex: 250
	{
		// Constructors
		public ThreadStaticAttribute(); // 0x00B53330-0x00B53338
	}

	internal enum ExceptionArgument // TypeDefIndex: 251
	{
		obj = 0,
		dictionary = 1,
		dictionaryCreationThreshold = 2,
		array = 3,
		info = 4,
		key = 5,
		collection = 6,
		list = 7,
		match = 8,
		converter = 9,
		queue = 10,
		stack = 11,
		capacity = 12,
		index = 13,
		startIndex = 14,
		value = 15,
		count = 16,
		arrayIndex = 17,
		name = 18,
		mode = 19,
		item = 20,
		options = 21,
		view = 22,
		sourceBytesToCopy = 23,
		start = 24,
		pointer = 25,
		ownedMemory = 26,
		text = 27
	}

	internal enum ExceptionResource // TypeDefIndex: 252
	{
		Argument_ImplementIComparable = 0,
		Argument_InvalidType = 1,
		Argument_InvalidArgumentForComparison = 2,
		Argument_InvalidRegistryKeyPermissionCheck = 3,
		ArgumentOutOfRange_NeedNonNegNum = 4,
		Arg_ArrayPlusOffTooSmall = 5,
		Arg_NonZeroLowerBound = 6,
		Arg_RankMultiDimNotSupported = 7,
		Arg_RegKeyDelHive = 8,
		Arg_RegKeyStrLenBug = 9,
		Arg_RegSetStrArrNull = 10,
		Arg_RegSetMismatchedKind = 11,
		Arg_RegSubKeyAbsent = 12,
		Arg_RegSubKeyValueAbsent = 13,
		Argument_AddingDuplicate = 14,
		Serialization_InvalidOnDeser = 15,
		Serialization_MissingKeys = 16,
		Serialization_NullKey = 17,
		Argument_InvalidArrayType = 18,
		NotSupported_KeyCollectionSet = 19,
		NotSupported_ValueCollectionSet = 20,
		ArgumentOutOfRange_SmallCapacity = 21,
		ArgumentOutOfRange_Index = 22,
		Argument_InvalidOffLen = 23,
		Argument_ItemNotExist = 24,
		ArgumentOutOfRange_Count = 25,
		ArgumentOutOfRange_InvalidThreshold = 26,
		ArgumentOutOfRange_ListInsert = 27,
		NotSupported_ReadOnlyCollection = 28,
		InvalidOperation_CannotRemoveFromStackOrQueue = 29,
		InvalidOperation_EmptyQueue = 30,
		InvalidOperation_EnumOpCantHappen = 31,
		InvalidOperation_EnumFailedVersion = 32,
		InvalidOperation_EmptyStack = 33,
		ArgumentOutOfRange_BiggerThanCollection = 34,
		InvalidOperation_EnumNotStarted = 35,
		InvalidOperation_EnumEnded = 36,
		NotSupported_SortedListNestedWrite = 37,
		InvalidOperation_NoValue = 38,
		InvalidOperation_RegRemoveSubKey = 39,
		Security_RegistryPermission = 40,
		UnauthorizedAccess_RegistryNoWrite = 41,
		ObjectDisposed_RegKeyClosed = 42,
		NotSupported_InComparableType = 43,
		Argument_InvalidRegistryOptionsCheck = 44,
		Argument_InvalidRegistryViewCheck = 45
	}

	[Serializable]
	[ComVisible] // 0x004B2F7C-0x004B2F90
	public class TimeoutException : SystemException // TypeDefIndex: 253
	{
		// Constructors
		public TimeoutException(); // 0x00E7F88C-0x00E7F900
		public TimeoutException(string message); // 0x00E7F900-0x00E7F934
		protected TimeoutException(SerializationInfo info, StreamingContext context); // 0x00E7F934-0x00E7F93C
	}

	[Serializable]
	[ComVisible] // 0x004B2F90-0x004B2FA4
	public struct TimeSpan : IComparable, IComparable<TimeSpan>, IEquatable<TimeSpan>, IFormattable // TypeDefIndex: 254
	{
		// Fields
		public static readonly TimeSpan Zero; // 0x00
		public static readonly TimeSpan MaxValue; // 0x08
		public static readonly TimeSpan MinValue; // 0x10
		internal long _ticks; // 0x00
		private static bool _legacyConfigChecked; // 0x18
		private static bool _legacyMode; // 0x19
	
		// Properties
		public long Ticks { get; } // 0x00584944-0x0058494C 
		public int Days { get; } // 0x0058494C-0x00584978 
		public int Hours { get; } // 0x00584978-0x005849C0 
		public int Minutes { get; } // 0x005849C0-0x00584A08 
		public int Seconds { get; } // 0x00584A08-0x00584A54 
		public double TotalHours { get; } // 0x00584A54-0x00584A6C 
		public double TotalMilliseconds { get; } // 0x00584A6C-0x00584AA0 
		public double TotalMinutes { get; } // 0x00584AA0-0x00584AB8 
		public double TotalSeconds { get; } // 0x00584AB8-0x00584AD0 
		private static bool LegacyMode { get; } // 0x009180F4-0x00918200 
	
		// Constructors
		public TimeSpan(long ticks); // 0x0058492C-0x00584934
		public TimeSpan(int hours, int minutes, int seconds); // 0x00584934-0x0058493C
		public TimeSpan(int days, int hours, int minutes, int seconds, int milliseconds); // 0x0058493C-0x00584944
		static TimeSpan(); // 0x009182E0-0x0091834C
	
		// Methods
		public TimeSpan Add(TimeSpan ts); // 0x00584AD0-0x00584AD8
		public int CompareTo(object value); // 0x00584AD8-0x00584AE0
		public int CompareTo(TimeSpan value); // 0x00584AE0-0x00584AF4
		public static TimeSpan FromDays(double value); // 0x00917960-0x009179D4
		public override bool Equals(object value); // 0x00584AF4-0x00584AFC
		public bool Equals(TimeSpan obj); // 0x00584AFC-0x00584B0C
		public override int GetHashCode(); // 0x00584B0C-0x00584B18
		public static TimeSpan FromHours(double value); // 0x00917BD0-0x00917C44
		private static TimeSpan Interval(double value, int scale); // 0x009179D4-0x00917BD0
		public static TimeSpan FromMilliseconds(double value); // 0x00917C44-0x00917CB4
		public static TimeSpan FromMinutes(double value); // 0x00917CB4-0x00917E00
		public TimeSpan Negate(); // 0x00584B18-0x00584B20
		public static TimeSpan FromSeconds(double value); // 0x00917E00-0x00917F28
		public TimeSpan Subtract(TimeSpan ts); // 0x00584B20-0x00584B28
		public static TimeSpan FromTicks(long value); // 0x00917F28-0x009180F4
		internal static long TimeToTicks(int hour, int minute, int second); // 0x00917568-0x00917960
		public override string ToString(); // 0x00584B28-0x00584B30
		public string ToString(string format); // 0x00584B30-0x00584B38
		public string ToString(string format, IFormatProvider formatProvider); // 0x00584B38-0x00584B40
		public static TimeSpan operator -(TimeSpan t1, TimeSpan t2); // 0x00918200-0x00918224
		public static TimeSpan operator +(TimeSpan t1, TimeSpan t2); // 0x00918224-0x00918248
		public static bool operator ==(TimeSpan t1, TimeSpan t2); // 0x00918248-0x00918254
		public static bool operator !=(TimeSpan t1, TimeSpan t2); // 0x00918254-0x00918260
		public static bool operator <(TimeSpan t1, TimeSpan t2); // 0x00918260-0x0091826C
		public static bool operator <=(TimeSpan t1, TimeSpan t2); // 0x0091826C-0x00918278
		public static bool operator >(TimeSpan t1, TimeSpan t2); // 0x00918278-0x00918284
		public static bool operator >=(TimeSpan t1, TimeSpan t2); // 0x00918284-0x00918290
		private static bool GetLegacyFormatMode(); // 0x00918290-0x009182E0
	}

	[Flags] // 0x004B2FA4-0x004B2FB4
	internal enum TimeZoneInfoOptions // TypeDefIndex: 255
	{
		None = 1,
		NoThrowOnInvalidTime = 2
	}

	[Serializable]
	[TypeForwardedFrom] // 0x004B2FB4-0x004B2FEC
	public sealed class TimeZoneInfo : IEquatable<TimeZoneInfo>, ISerializable, IDeserializationCallback // TypeDefIndex: 256
	{
		// Fields
		private TimeSpan baseUtcOffset; // 0x10
		private string daylightDisplayName; // 0x18
		private string displayName; // 0x20
		private string id; // 0x28
		private static TimeZoneInfo local; // 0x00
		private List<KeyValuePair<DateTime, TimeType>> transitions; // 0x30
		private static bool readlinkNotFound; // 0x08
		private string standardDisplayName; // 0x38
		private bool supportsDaylightSavingTime; // 0x40
		private static TimeZoneInfo utc; // 0x10
		private static string timeZoneDirectory; // 0x18
		private AdjustmentRule[] adjustmentRules; // 0x48
		private static RegistryKey timeZoneKey; // 0x20
		private static RegistryKey localZoneKey; // 0x28
		private static ReadOnlyCollection<TimeZoneInfo> systemTimeZones; // 0x30
	
		// Properties
		public TimeSpan BaseUtcOffset { get; } // 0x0091ACEC-0x0091ACF4 
		public string DisplayName { get; } // 0x0091ACF4-0x0091ACFC 
		public string Id { get; } // 0x0091ACFC-0x0091AD04 
		public static TimeZoneInfo Local { get; } // 0x0091AC30-0x0091ACEC 
		public bool SupportsDaylightSavingTime { get; } // 0x0091C6E8-0x0091C6F0 
		public static TimeZoneInfo Utc { get; } // 0x0091A570-0x0091A600 
		private static string TimeZoneDirectory { get; } // 0x0091B604-0x0091B670 
		private static bool IsWindows { get; } // 0x0091B670-0x0091B6BC 
		private static RegistryKey TimeZoneKey { get; } // 0x0091C5BC-0x0091C6E8 
		private static RegistryKey LocalZoneKey { get; } // 0x0091B6BC-0x0091B7E8 
	
		// Nested types
		[Serializable]
		[TypeForwardedFrom] // 0x004B2FEC-0x004B3024
		public sealed class AdjustmentRule : IEquatable<AdjustmentRule>, ISerializable, IDeserializationCallback // TypeDefIndex: 257
		{
			// Fields
			private DateTime m_dateStart; // 0x10
			private DateTime m_dateEnd; // 0x18
			private TimeSpan m_daylightDelta; // 0x20
			private TransitionTime m_daylightTransitionStart; // 0x28
			private TransitionTime m_daylightTransitionEnd; // 0x40
			private TimeSpan m_baseUtcOffsetDelta; // 0x58
	
			// Properties
			public DateTime DateStart { get; } // 0x00E7DEEC-0x00E7DEF4 
			public DateTime DateEnd { get; } // 0x00E7DEF4-0x00E7DEFC 
			public TimeSpan DaylightDelta { get; } // 0x00E7DEFC-0x00E7DF04 
			public TransitionTime DaylightTransitionStart { get; } // 0x00E7DF04-0x00E7DF18 
			public TransitionTime DaylightTransitionEnd { get; } // 0x00E7DF18-0x00E7DF2C 
	
			// Constructors
			private AdjustmentRule(); // 0x00E7E1B4-0x00E7E1BC
			private AdjustmentRule(SerializationInfo info, StreamingContext context); // 0x00E7E994-0x00E7EC6C
	
			// Methods
			public bool Equals(AdjustmentRule other); // 0x00E7DF2C-0x00E7E1A8
			public override int GetHashCode(); // 0x00E7E1A8-0x00E7E1B4
			public static AdjustmentRule CreateAdjustmentRule(DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TransitionTime daylightTransitionStart, TransitionTime daylightTransitionEnd); // 0x00E7E1BC-0x00E7E2E0
			internal static AdjustmentRule CreateAdjustmentRule(DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TransitionTime daylightTransitionStart, TransitionTime daylightTransitionEnd, TimeSpan baseUtcOffsetDelta); // 0x00E7E640-0x00E7E69C
			private static void ValidateAdjustmentRule(DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TransitionTime daylightTransitionStart, TransitionTime daylightTransitionEnd); // 0x00E7E2E0-0x00E7E640
			void IDeserializationCallback.OnDeserialization(object sender); // 0x00E7E69C-0x00E7E7E4
			void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00E7E7E4-0x00E7E994
		}
	
		[Serializable]
		[TypeForwardedFrom] // 0x004B3024-0x004B305C
		public struct TransitionTime : IEquatable<TransitionTime>, ISerializable, IDeserializationCallback // TypeDefIndex: 258
		{
			// Fields
			private DateTime m_timeOfDay; // 0x00
			private byte m_month; // 0x08
			private byte m_week; // 0x09
			private byte m_day; // 0x0A
			private DayOfWeek m_dayOfWeek; // 0x0C
			private bool m_isFixedDateRule; // 0x10
	
			// Properties
			public DateTime TimeOfDay { get; } // 0x00590D08-0x00590D10 
			public int Month { get; } // 0x00590D10-0x00590D18 
			public int Week { get; } // 0x00590D18-0x00590D20 
			public int Day { get; } // 0x00590D20-0x00590D28 
			public DayOfWeek DayOfWeek { get; } // 0x00590D28-0x00590D30 
			public bool IsFixedDateRule { get; } // 0x00590D30-0x00590D38 
	
			// Constructors
			private TransitionTime(SerializationInfo info, StreamingContext context); // 0x00590D9C-0x00590DE4
	
			// Methods
			public override bool Equals(object obj); // 0x00590D38-0x00590D40
			public static bool operator !=(TransitionTime t1, TransitionTime t2); // 0x00E7EDC0-0x00E7EE0C
			public bool Equals(TransitionTime other); // 0x00590D40-0x00590D78
			public override int GetHashCode(); // 0x00590D78-0x00590D8C
			public static TransitionTime CreateFixedDateRule(DateTime timeOfDay, int month, int day); // 0x00E7EE0C-0x00E7EE80
			public static TransitionTime CreateFloatingDateRule(DateTime timeOfDay, int month, int week, DayOfWeek dayOfWeek); // 0x00E7EEFC-0x00E7EF6C
			private static TransitionTime CreateTransitionTime(DateTime timeOfDay, int month, int week, int day, DayOfWeek dayOfWeek, bool isFixedDateRule); // 0x00E7EE80-0x00E7EEFC
			private static void ValidateTransitionTime(DateTime timeOfDay, int month, int week, int day, DayOfWeek dayOfWeek); // 0x00E7EF6C-0x00E7F714
			void IDeserializationCallback.OnDeserialization(object sender); // 0x00590D8C-0x00590D94
			void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00590D94-0x00590D9C
		}
	
		internal struct SYSTEMTIME // TypeDefIndex: 259
		{
			// Fields
			internal ushort wYear; // 0x00
			internal ushort wMonth; // 0x02
			internal ushort wDayOfWeek; // 0x04
			internal ushort wDay; // 0x06
			internal ushort wHour; // 0x08
			internal ushort wMinute; // 0x0A
			internal ushort wSecond; // 0x0C
			internal ushort wMilliseconds; // 0x0E
		}
	
		internal struct TIME_ZONE_INFORMATION // TypeDefIndex: 260
		{
			// Fields
			internal int Bias; // 0x00
			internal string StandardName; // 0x08
			internal SYSTEMTIME StandardDate; // 0x10
			internal int StandardBias; // 0x20
			internal string DaylightName; // 0x28
			internal SYSTEMTIME DaylightDate; // 0x30
			internal int DaylightBias; // 0x40
		}
	
		internal struct DYNAMIC_TIME_ZONE_INFORMATION // TypeDefIndex: 261
		{
			// Fields
			internal TIME_ZONE_INFORMATION TZI; // 0x00
			internal string TimeZoneKeyName; // 0x48
			internal byte DynamicDaylightTimeDisabled; // 0x50
		}
	
		[Serializable]
		[CompilerGenerated] // 0x004B305C-0x004B306C
		private sealed class __c // TypeDefIndex: 262
		{
			// Fields
			public static readonly __c __9; // 0x00
			public static Comparison<AdjustmentRule> __9__19_0; // 0x08
	
			// Constructors
			static __c(); // 0x00E7DE3C-0x00E7DEA0
			public __c(); // 0x00E7DEA0-0x00E7DEA8
	
			// Methods
			internal int _CreateLocalUnity_b__19_0(AdjustmentRule rule1, AdjustmentRule rule2); // 0x00E7DEA8-0x00E7DEEC
		}
	
		// Constructors
		private TimeZoneInfo(SerializationInfo info, StreamingContext context); // 0x0091F354-0x0091F650
		private TimeZoneInfo(string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime); // 0x00919FB0-0x0091A46C
		internal TimeZoneInfo(); // 0x00920658-0x00921698
	
		// Methods
		internal static bool UtcOffsetOutOfRange(TimeSpan offset); // 0x009185E4-0x00918614
		private static List<AdjustmentRule> CreateAdjustmentRule(int year, out long[] data, out string[] names, string standardNameCurrentYear, string daylightNameCurrentYear); // 0x00918614-0x00918D00
		private static TimeZoneInfo CreateLocalUnity(); // 0x00918D00-0x009190F4
		internal static extern uint EnumDynamicTimeZoneInformation(uint dwIndex, out DYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation); // 0x009191A4-0x009192A0
		internal static extern uint GetDynamicTimeZoneInformation(out DYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation); // 0x009192A0-0x0091938C
		internal static extern uint GetDynamicTimeZoneInformationWin32(out DYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation); // 0x0091938C-0x00919478
		internal static extern uint GetDynamicTimeZoneInformationEffectiveYears(ref DYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation, out uint FirstYear, out uint LastYear); // 0x00919478-0x00919588
		internal static extern bool GetTimeZoneInformationForYear(ushort wYear, ref DYNAMIC_TIME_ZONE_INFORMATION pdtzi, out TIME_ZONE_INFORMATION ptzi); // 0x00919588-0x009196E0
		internal static AdjustmentRule CreateAdjustmentRuleFromTimeZoneInformation(ref DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation, DateTime startDate, DateTime endDate, int defaultBaseUtcOffset); // 0x009196E0-0x00919970
		private static bool TransitionTimeFromTimeZoneInformation(DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation, out TransitionTime transitionTime, bool readStartDate); // 0x00919970-0x00919B04
		internal static TimeZoneInfo TryCreateTimeZone(DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation); // 0x00919B04-0x00919FB0
		internal static TimeZoneInfo GetLocalTimeZoneInfoWinRTFallback(); // 0x0091A46C-0x0091A570
		internal static string GetLocalTimeZoneKeyNameWin32Fallback(); // 0x0091A600-0x0091A710
		internal static TimeZoneInfo FindSystemTimeZoneByIdWinRTFallback(string id); // 0x0091A710-0x0091A9D4
		internal static List<TimeZoneInfo> GetSystemTimeZonesWinRTFallback(); // 0x0091AAA8-0x0091AC30
		private static extern int readlink(string path, byte[] buffer, int buflen); // 0x0091B144-0x0091B214
		private static string readlink(string path); // 0x0091B214-0x0091B3C0
		private static bool TryGetNameFromPath(string path, out string name); // 0x0091B3C0-0x0091B604
		private static TimeZoneInfo CreateLocal(); // 0x0091AD04-0x0091B144
		private static TimeZoneInfo FindSystemTimeZoneByIdCore(string id); // 0x0091BC74-0x0091BCF8
		private static void GetSystemTimeZonesCore(List<TimeZoneInfo> systemTimeZones); // 0x0091BCF8-0x0091C5BC
		private static string TrimSpecial(string str); // 0x0091B7E8-0x0091B95C
		private static bool TryAddTicks(DateTime date, long ticks, out DateTime result, DateTimeKind kind = DateTimeKind.Unspecified /* Metadata: 0x001DFB9E */); // 0x0091C700-0x0091C87C
		public static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone); // 0x0091C87C-0x0091CA90
		private DateTime ConvertTimeFromUtc(DateTime dateTime); // 0x0091CC84-0x0091CDE8
		public static DateTime ConvertTimeFromUtc(DateTime dateTime, TimeZoneInfo destinationTimeZone); // 0x0091CBEC-0x0091CC84
		internal static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfoOptions flags); // 0x0091CE0C-0x0091CE3C
		public static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo sourceTimeZone); // 0x0091CBE4-0x0091CBEC
		private static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfoOptions flags); // 0x0091CE3C-0x0091CFE8
		internal static TimeSpan GetDateTimeNowUtcOffsetFromUtc(DateTime time, out bool isAmbiguousLocalDst); // 0x0091D0B8-0x0091D0FC
		public static TimeZoneInfo CreateCustomTimeZone(string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName); // 0x0091C6F0-0x0091C700
		public static TimeZoneInfo CreateCustomTimeZone(string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, AdjustmentRule[] adjustmentRules); // 0x0091D164-0x0091D16C
		public static TimeZoneInfo CreateCustomTimeZone(string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime); // 0x009190F4-0x009191A4
		public override bool Equals(object obj); // 0x0091D16C-0x0091D1E0
		public bool Equals(TimeZoneInfo other); // 0x0091D1E0-0x0091D230
		public static TimeZoneInfo FindSystemTimeZoneById(string id); // 0x0091B95C-0x0091BAB0
		private static TimeZoneInfo FindSystemTimeZoneByFileName(string id, string filepath); // 0x0091BAB0-0x0091BC74
		private static TimeZoneInfo FromRegistryKey(string id, RegistryKey key); // 0x0091D3C4-0x0091D764
		private static void ParseRegTzi(List<AdjustmentRule> adjustmentRules, int start_year, int end_year, byte[] buffer); // 0x0091D924-0x0091DD14
		public AdjustmentRule[] GetAdjustmentRules(); // 0x0091DE5C-0x0091DEF8
		public override int GetHashCode(); // 0x0091DEF8-0x0091DFA0
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x0091DFA0-0x0091E110
		public static ReadOnlyCollection<TimeZoneInfo> GetSystemTimeZones(); // 0x0091A9D4-0x0091AAA8
		public TimeSpan GetUtcOffset(DateTime dateTime); // 0x0091CDE8-0x0091CE0C
		private TimeSpan GetUtcOffset(DateTime dateTime, out bool isDST); // 0x0091CFE8-0x0091D0B8
		private static TimeSpan GetUtcOffsetHelper(DateTime dateTime, TimeZoneInfo tz, out bool isDST); // 0x0091E110-0x0091E3B0
		public bool HasSameRules(TimeZoneInfo other); // 0x0091D230-0x0091D3C4
		public bool IsAmbiguousTime(DateTime dateTime); // 0x0091E830-0x0091EA20
		private bool IsInDST(AdjustmentRule rule, DateTime dateTime); // 0x0091E790-0x0091E830
		private bool IsInDSTForYear(AdjustmentRule rule, DateTime dateTime, int year); // 0x0091EBE8-0x0091EE1C
		public bool IsInvalidTime(DateTime dateTime); // 0x0091CA90-0x0091CBE4
		void IDeserializationCallback.OnDeserialization(object sender); // 0x0091EE1C-0x0091EF1C
		private static void Validate(string id, TimeSpan baseUtcOffset, AdjustmentRule[] adjustmentRules); // 0x0091EF1C-0x0091F34C
		public override string ToString(); // 0x0091F34C-0x0091F354
		private AdjustmentRule GetApplicableRule(DateTime dateTime); // 0x0091E5D0-0x0091E790
		private bool TryGetTransitionOffset(DateTime dateTime, out TimeSpan offset, out bool isDst); // 0x0091E3B0-0x0091E5D0
		private static DateTime TransitionPoint(TransitionTime transition, int year); // 0x0091EA20-0x0091EBE8
		private static AdjustmentRule[] ValidateRules(List<AdjustmentRule> adjustmentRules); // 0x0091DD14-0x0091DE5C
		private static TimeZoneInfo BuildFromStream(string id, Stream stream); // 0x0091D764-0x0091D924
		private static bool ValidTZFile(byte[] buffer, int length); // 0x0091F650-0x0091F748
		private static int SwapInt32(int i); // 0x0092003C-0x00920044
		private static int ReadBigEndianInt32(byte[] buffer, int start); // 0x00920044-0x009200D8
		private static TimeZoneInfo ParseTZBuffer(string id, byte[] buffer, int length); // 0x0091F748-0x0092003C
		private static Dictionary<int, string> ParseAbbreviations(byte[] buffer, int index, int count); // 0x009200D8-0x009202B0
		private static Dictionary<int, TimeType> ParseTimesTypes(byte[] buffer, int index, int count, Dictionary<int, string> abbreviations); // 0x009202B0-0x00920450
		private static List<KeyValuePair<DateTime, TimeType>> ParseTransitions(byte[] buffer, int index, int count, Dictionary<int, TimeType> time_types); // 0x00920450-0x009205B4
		private static DateTime DateTimeFromUnixTime(long unix_time); // 0x009205B4-0x009205FC
		internal static TimeSpan GetLocalUtcOffset(DateTime dateTime, TimeZoneInfoOptions flags); // 0x009205FC-0x00920634
		internal TimeSpan GetUtcOffset(DateTime dateTime, TimeZoneInfoOptions flags); // 0x00920634-0x00920658
		internal static TimeSpan GetUtcOffsetFromUtc(DateTime time, TimeZoneInfo zone, out bool isDaylightSavings, out bool isAmbiguousLocalDst); // 0x0091D0FC-0x0091D164
	}

	[Serializable]
	[TypeForwardedFrom] // 0x004B306C-0x004B30A4
	public class TimeZoneNotFoundException : Exception // TypeDefIndex: 263
	{
		// Constructors
		public TimeZoneNotFoundException(string message, Exception innerException); // 0x00E7F714-0x00E7F794
		protected TimeZoneNotFoundException(SerializationInfo info, StreamingContext context); // 0x00E7F794-0x00E7F824
		public TimeZoneNotFoundException(); // 0x00E7F824-0x00E7F88C
	}

	[Serializable]
	[ClassInterface] // 0x004B30A4-0x004B3130
	[ComDefaultInterface] // 0x004B30A4-0x004B3130
	[ComVisible] // 0x004B30A4-0x004B3130
	public abstract class Type : MemberInfo, _Type // TypeDefIndex: 264
	{
		// Fields
		public static readonly MemberFilter FilterAttribute; // 0x00
		public static readonly MemberFilter FilterName; // 0x08
		public static readonly MemberFilter FilterNameIgnoreCase; // 0x10
		public static readonly object Missing; // 0x18
		public static readonly char Delimiter; // 0x20
		public static readonly Type[] EmptyTypes; // 0x28
		private static Binder defaultBinder; // 0x30
		private const BindingFlags DefaultLookup = BindingFlags.Default | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public; // Metadata: 0x001DFBA2
		internal const BindingFlags DeclaredOnlyLookup = BindingFlags.Default | BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic; // Metadata: 0x001DFBA6
		internal RuntimeTypeHandle _impl; // 0x10
	
		// Properties
		public override MemberTypes MemberType { get; } // 0x00E7F964-0x00E7F96C 
		public override Type DeclaringType { get; } // 0x00E7F96C-0x00E7F974 
		public virtual MethodBase DeclaringMethod { get; } // 0x00E7F974-0x00E7F97C 
		public override Type ReflectedType { get; } // 0x00E7F97C-0x00E7F984 
		public static Binder DefaultBinder { get; } // 0x00E7FD20-0x00E7FDC8 
		public abstract Module Module { get; }
		public abstract Assembly Assembly { get; }
		public virtual RuntimeTypeHandle TypeHandle { get; } // 0x00E7FE88-0x00E7FEEC 
		public abstract string FullName { get; }
		public abstract string Namespace { get; }
		public abstract string AssemblyQualifiedName { get; }
		public abstract Type BaseType { get; }
		public bool IsNested { get; } // 0x00E80DA0-0x00E80E20 
		public TypeAttributes Attributes { get; } // 0x00E80E20-0x00E80E30 
		public virtual GenericParameterAttributes GenericParameterAttributes { get; } // 0x00E80E30-0x00E80E94 
		public bool IsNotPublic { get; } // 0x00E80E94-0x00E80EBC 
		public bool IsPublic { get; } // 0x00E80EBC-0x00E80EE8 
		public bool IsNestedPublic { get; } // 0x00E80EE8-0x00E80F14 
		public bool IsNestedAssembly { get; } // 0x00E80F14-0x00E80F40 
		public bool IsExplicitLayout { get; } // 0x00E80F40-0x00E80F6C 
		public bool IsClass { get; } // 0x00E80F6C-0x00E80FC0 
		public bool IsInterface { get; } // 0x00E80FD0-0x00E810A4 
		public bool IsValueType { get; } // 0x00E80FC0-0x00E80FD0 
		public bool IsAbstract { get; } // 0x00E810A4-0x00E810C8 
		public bool IsSealed { get; } // 0x00E810C8-0x00E810EC 
		public virtual bool IsEnum { get; } // 0x00E810EC-0x00E81168 
		public virtual bool IsSerializable { get; } // 0x00E81168-0x00E8126C 
		public bool IsArray { get; } // 0x00E8126C-0x00E8127C 
		internal virtual bool IsSzArray { get; } // 0x00E8127C-0x00E81284 
		public virtual bool IsGenericType { get; } // 0x00E81284-0x00E8128C 
		public virtual bool IsGenericTypeDefinition { get; } // 0x00E8128C-0x00E81294 
		public virtual bool IsGenericParameter { get; } // 0x00E81294-0x00E8129C 
		public virtual int GenericParameterPosition { get; } // 0x00E8129C-0x00E81320 
		public virtual bool ContainsGenericParameters { get; } // 0x00E81320-0x00E81428 
		public bool IsByRef { get; } // 0x00E81568-0x00E81578 
		public bool IsPointer { get; } // 0x00E81578-0x00E81588 
		public bool IsPrimitive { get; } // 0x00E81588-0x00E81598 
		public bool IsCOMObject { get; } // 0x00E81598-0x00E815A8 
		public bool HasElementType { get; } // 0x00E81428-0x00E81438 
		public bool IsContextful { get; } // 0x00E815A8-0x00E815B8 
		public bool IsMarshalByRef { get; } // 0x00E815B8-0x00E815C8 
		public abstract Type UnderlyingSystemType { get; }
	
		// Constructors
		protected Type(); // 0x00E7F95C-0x00E7F964
		static Type(); // 0x00E835D4-0x00E83794
	
		// Methods
		public static Type GetType(string typeName, Func<AssemblyName, Assembly> assemblyResolver, Func<Assembly, string, bool, Type> typeResolver, bool throwOnError); // 0x00E7F984-0x00E7F990
		public virtual Type MakePointerType(); // 0x00E7F9DC-0x00E7FA40
		public virtual Type MakeByRefType(); // 0x00E7FA40-0x00E7FAA4
		public virtual Type MakeArrayType(); // 0x00E7FAA4-0x00E7FB08
		public virtual Type MakeArrayType(int rank); // 0x00E7FB08-0x00E7FB6C
		public static TypeCode GetTypeCode(Type type); // 0x00E7FB6C-0x00E7FBF4
		protected virtual TypeCode GetTypeCodeImpl(); // 0x00E7FC00-0x00E7FD14
		private static void CreateBinder(); // 0x00E7FDC8-0x00E7FE88
		public abstract object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters);
		public static RuntimeTypeHandle GetTypeHandle(object o); // 0x00E7FEEC-0x00E7FFF8
		public virtual int GetArrayRank(); // 0x00E7FFF8-0x00E8007C
		[ComVisible] // 0x004BAD34-0x004BAD48
		public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00E8007C-0x00E801BC
		[ComVisible] // 0x004BAD48-0x004BAD5C
		public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers); // 0x00E801BC-0x00E802F0
		[ComVisible] // 0x004BAD5C-0x004BAD70
		public ConstructorInfo GetConstructor(Type[] types); // 0x00E802F0-0x00E80308
		protected abstract ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
		[ComVisible] // 0x004BAD70-0x004BAD84
		public abstract ConstructorInfo[] GetConstructors(BindingFlags bindingAttr);
		public MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers); // 0x00E80308-0x00E8046C
		public MethodInfo GetMethod(string name, Type[] types); // 0x00E8046C-0x00E805B4
		public MethodInfo GetMethod(string name, BindingFlags bindingAttr); // 0x00E805B4-0x00E80670
		public MethodInfo GetMethod(string name); // 0x00E80670-0x00E80728
		protected abstract MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
		public MethodInfo[] GetMethods(); // 0x00E80728-0x00E8073C
		public abstract MethodInfo[] GetMethods(BindingFlags bindingAttr);
		public abstract FieldInfo GetField(string name, BindingFlags bindingAttr);
		public FieldInfo GetField(string name); // 0x00E8073C-0x00E80750
		public abstract FieldInfo[] GetFields(BindingFlags bindingAttr);
		public abstract Type[] GetInterfaces();
		public virtual Type[] FindInterfaces(TypeFilter filter, object filterCriteria); // 0x00E80750-0x00E8096C
		public abstract EventInfo GetEvent(string name, BindingFlags bindingAttr);
		public PropertyInfo GetProperty(string name, BindingFlags bindingAttr); // 0x00E8096C-0x00E80A28
		public PropertyInfo GetProperty(string name, Type returnType, Type[] types); // 0x00E80A28-0x00E80B10
		public PropertyInfo GetProperty(string name, Type returnType); // 0x00E80B10-0x00E80C0C
		public PropertyInfo GetProperty(string name); // 0x00E80C0C-0x00E80CC4
		protected abstract PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
		public abstract PropertyInfo[] GetProperties(BindingFlags bindingAttr);
		public PropertyInfo[] GetProperties(); // 0x00E80CC4-0x00E80CD8
		public Type GetNestedType(string name); // 0x00E80CD8-0x00E80CEC
		public abstract Type GetNestedType(string name, BindingFlags bindingAttr);
		public MemberInfo[] GetMember(string name); // 0x00E80CEC-0x00E80D00
		public virtual MemberInfo[] GetMember(string name, BindingFlags bindingAttr); // 0x00E80D00-0x00E80D1C
		public virtual MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr); // 0x00E80D1C-0x00E80DA0
		public virtual Type[] GetGenericParameterConstraints(); // 0x00E81494-0x00E81568
		protected virtual bool IsValueTypeImpl(); // 0x00E815C8-0x00E81644
		protected abstract TypeAttributes GetAttributeFlagsImpl();
		protected abstract bool IsArrayImpl();
		protected abstract bool IsByRefImpl();
		protected abstract bool IsPointerImpl();
		protected abstract bool IsPrimitiveImpl();
		protected abstract bool IsCOMObjectImpl();
		public virtual Type MakeGenericType(params /* 0x004BD270-0x004BD280 */ Type[] typeArguments); // 0x00E81644-0x00E816C8
		protected virtual bool IsContextfulImpl(); // 0x00E816C8-0x00E81754
		protected virtual bool IsMarshalByRefImpl(); // 0x00E81754-0x00E817E0
		public abstract Type GetElementType();
		public virtual Type[] GetGenericArguments(); // 0x00E817E0-0x00E81864
		public virtual Type GetGenericTypeDefinition(); // 0x00E81864-0x00E818E8
		protected abstract bool HasElementTypeImpl();
		internal Type GetRootElementType(); // 0x00E81438-0x00E81494
		public virtual string[] GetEnumNames(); // 0x00E818E8-0x00E819C0
		public virtual Array GetEnumValues(); // 0x00E81DBC-0x00E81E9C
		private Array GetEnumRawConstantValues(); // 0x00E81E9C-0x00E81EC8
		private void GetEnumData(out string[] enumNames, out Array enumValues); // 0x00E819C0-0x00E81DBC
		public virtual Type GetEnumUnderlyingType(); // 0x00E81EC8-0x00E81FCC
		public virtual bool IsEnumDefined(object value); // 0x00E81FCC-0x00E82514
		public virtual string GetEnumName(object value); // 0x00E828D8-0x00E82B14
		private static int BinarySearch(Array array, object value); // 0x00E82774-0x00E828D8
		internal static bool IsIntegerType(Type t); // 0x00E82514-0x00E82774
		[ComVisible] // 0x004BAD84-0x004BAD98
		public virtual bool IsSubclassOf(Type c); // 0x00E82B14-0x00E82BEC
		public virtual bool IsInstanceOfType(object o); // 0x00E82BEC-0x00E82C3C
		public virtual bool IsAssignableFrom(Type c); // 0x00E82C3C-0x00E82E6C
		public virtual bool IsEquivalentTo(Type other); // 0x00E82FEC-0x00E83060
		internal bool ImplementInterface(Type ifaceType); // 0x00E82E6C-0x00E82FEC
		internal string FormatTypeName(); // 0x00E83060-0x00E83074
		internal virtual string FormatTypeName(bool serialization); // 0x00E83074-0x00E830D8
		public override string ToString(); // 0x00E830D8-0x00E83140
		public override bool Equals(object o); // 0x00E83140-0x00E831F0
		public virtual bool Equals(Type o); // 0x00E831F0-0x00E83248
		public static bool operator ==(Type left, Type right); // 0x00E7FBF4-0x00E7FC00
		public static bool operator !=(Type left, Type right); // 0x00E7FD14-0x00E7FD20
		public override int GetHashCode(); // 0x00E83248-0x00E832A0
		public new Type GetType(); // 0x00E832A0-0x00E832A8
		private static Type internal_from_name(string name, bool throwOnError, bool ignoreCase); // 0x00E832A8-0x00E832B4
		public static Type GetType(string typeName); // 0x00E832B4-0x00E8334C
		public static Type GetType(string typeName, bool throwOnError); // 0x00E834F0-0x00E8359C
		public static Type GetType(string typeName, bool throwOnError, bool ignoreCase); // 0x00E8334C-0x00E834F0
		public static Type GetTypeFromHandle(RuntimeTypeHandle handle); // 0x00E7EC6C-0x00E7EDC0
		private static Type internal_from_handle(IntPtr handle); // 0x00E835D0-0x00E835D4
	}

	[CLSCompliant] // 0x004B3130-0x004B3170
	[ComVisible] // 0x004B3130-0x004B3170
	public struct TypedReference // TypeDefIndex: 265
	{
		// Fields
		private RuntimeTypeHandle type; // 0x00
		private IntPtr Value; // 0x08
		private IntPtr Type; // 0x10
	
		// Properties
		internal bool IsNull { get; } // 0x00590DF8-0x00590E3C 
	
		// Methods
		[CLSCompliant] // 0x004BAD98-0x004BADAC
		public static TypedReference MakeTypedReference(object target, FieldInfo[] flds); // 0x00E86080-0x00E86474
		private static TypedReference MakeTypedReferenceInternal(object target, FieldInfo[] fields); // 0x00E86474-0x00E865F0
		public override int GetHashCode(); // 0x00590DE4-0x00590DEC
		public override bool Equals(object o); // 0x00590DEC-0x00590DF8
		[CLSCompliant] // 0x004BADAC-0x004BADC0
		public static void SetTypedReference(TypedReference target, object value); // 0x00E865F0-0x00E8688C
	}

	[Serializable]
	[ComVisible] // 0x004B3170-0x004B3184
	public sealed class TypeInitializationException : SystemException // TypeDefIndex: 266
	{
		// Fields
		private string _typeName; // 0x88
	
		// Properties
		public string TypeName { get; } // 0x00E83B78-0x00E83BD4 
	
		// Constructors
		private TypeInitializationException(); // 0x00E8397C-0x00E839F0
		public TypeInitializationException(string fullTypeName, Exception innerException); // 0x00E839F0-0x00E83ADC
		internal TypeInitializationException(SerializationInfo info, StreamingContext context); // 0x00E83ADC-0x00E83B78
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00E83BD4-0x00E83CE4
	}

	[Serializable]
	[ComVisible] // 0x004B3184-0x004B3198
	public class TypeLoadException : SystemException, ISerializable // TypeDefIndex: 267
	{
		// Fields
		private string ClassName; // 0x88
		private string AssemblyName; // 0x90
		private string MessageArg; // 0x98
		internal int ResourceId; // 0xA0
	
		// Properties
		public override string Message { get; } // 0x00E83D58-0x00E83D7C 
	
		// Constructors
		public TypeLoadException(); // 0x00E83CE4-0x00E83D58
		public TypeLoadException(string message); // 0x00E8359C-0x00E835D0
		private TypeLoadException(string className, string assemblyName); // 0x00E83E80-0x00E83E8C
		private TypeLoadException(string className, string assemblyName, string messageArg, int resourceId); // 0x00E83E8C-0x00E83EF8
		protected TypeLoadException(SerializationInfo info, StreamingContext context); // 0x00E83EF8-0x00E84020
	
		// Methods
		private void SetMessageField(); // 0x00E83D7C-0x00E83E80
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00E84020-0x00E841A0
	}

	[Serializable]
	[CLSCompliant] // 0x004B3198-0x004B31D8
	[ComVisible] // 0x004B3198-0x004B31D8
	public struct UInt16 : IComparable, IFormattable, IConvertible, IComparable<ushort>, IEquatable<ushort> // TypeDefIndex: 268
	{
		// Fields
		private ushort m_value; // 0x00
		public const ushort MaxValue = 65535; // Metadata: 0x001DFBAA
		public const ushort MinValue = 0; // Metadata: 0x001DFBAC
	
		// Methods
		public int CompareTo(object value); // 0x00590E3C-0x00590E44
		public int CompareTo(ushort value); // 0x00590E44-0x00590E50
		public override bool Equals(object obj); // 0x00590E50-0x00590E58
		public bool Equals(ushort obj); // 0x00590E58-0x00590E68
		public override int GetHashCode(); // 0x00590E68-0x00590E70
		public override string ToString(); // 0x00590E70-0x00590EA4
		public string ToString(IFormatProvider provider); // 0x00590EA4-0x00590EDC
		public string ToString(string format, IFormatProvider provider); // 0x00590EDC-0x00590F18
		[CLSCompliant] // 0x004BADC0-0x004BADD4
		public static ushort Parse(string s, IFormatProvider provider); // 0x00E8688C-0x00E868C0
		[CLSCompliant] // 0x004BADD4-0x004BADE8
		public static ushort Parse(string s, NumberStyles style, IFormatProvider provider); // 0x00E86A3C-0x00E873A4
		private static ushort Parse(string s, NumberStyles style, NumberFormatInfo info); // 0x00E868C0-0x00E86A3C
		public TypeCode GetTypeCode(); // 0x00590F18-0x00590F20
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x00590F20-0x00590F28
		char IConvertible.ToChar(IFormatProvider provider); // 0x00590F28-0x00590F30
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x00590F30-0x00590F38
		byte IConvertible.ToByte(IFormatProvider provider); // 0x00590F38-0x00590F40
		short IConvertible.ToInt16(IFormatProvider provider); // 0x00590F40-0x00590F48
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x00590F48-0x00590F50
		int IConvertible.ToInt32(IFormatProvider provider); // 0x00590F50-0x00590F58
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x00590F58-0x00590F60
		long IConvertible.ToInt64(IFormatProvider provider); // 0x00590F60-0x00590F68
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x00590F68-0x00590F70
		float IConvertible.ToSingle(IFormatProvider provider); // 0x00590F70-0x00590F78
		double IConvertible.ToDouble(IFormatProvider provider); // 0x00590F78-0x00590F80
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x00590F80-0x00590F88
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x00590F88-0x00590F94
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x00590F94-0x00590F9C
	}

	[Serializable]
	[CLSCompliant] // 0x004B31D8-0x004B3218
	[ComVisible] // 0x004B31D8-0x004B3218
	public struct UInt32 : IComparable, IFormattable, IConvertible, IComparable<uint>, IEquatable<uint> // TypeDefIndex: 269
	{
		// Fields
		private uint m_value; // 0x00
		public const uint MaxValue = 4294967295; // Metadata: 0x001DFBAE
		public const uint MinValue = 0; // Metadata: 0x001DFBB2
	
		// Methods
		public int CompareTo(object value); // 0x00590F9C-0x00590FA4
		public int CompareTo(uint value); // 0x00590FA4-0x00590FB8
		public override bool Equals(object obj); // 0x00590FB8-0x00590FC0
		public bool Equals(uint obj); // 0x00590FC0-0x00590FD0
		public override int GetHashCode(); // 0x00590FD0-0x00590FD8
		public override string ToString(); // 0x00590FD8-0x0059100C
		public string ToString(IFormatProvider provider); // 0x0059100C-0x00591044
		public string ToString(string format, IFormatProvider provider); // 0x00591044-0x00591080
		[CLSCompliant] // 0x004BADE8-0x004BADFC
		public static uint Parse(string s, NumberStyles style); // 0x00E873A4-0x00E873E8
		[CLSCompliant] // 0x004BADFC-0x004BAE10
		public static uint Parse(string s, IFormatProvider provider); // 0x00E873E8-0x00E87420
		[CLSCompliant] // 0x004BAE10-0x004BAE24
		public static uint Parse(string s, NumberStyles style, IFormatProvider provider); // 0x00E87420-0x00E87474
		[CLSCompliant] // 0x004BAE24-0x004BAE38
		public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out uint result); // 0x00E87474-0x00E87E24
		public TypeCode GetTypeCode(); // 0x00591080-0x00591088
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x00591088-0x00591090
		char IConvertible.ToChar(IFormatProvider provider); // 0x00591090-0x00591098
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x00591098-0x005910A0
		byte IConvertible.ToByte(IFormatProvider provider); // 0x005910A0-0x005910A8
		short IConvertible.ToInt16(IFormatProvider provider); // 0x005910A8-0x005910B0
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x005910B0-0x005910B8
		int IConvertible.ToInt32(IFormatProvider provider); // 0x005910B8-0x005910C0
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x005910C0-0x005910C8
		long IConvertible.ToInt64(IFormatProvider provider); // 0x005910C8-0x005910D0
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x005910D0-0x005910D8
		float IConvertible.ToSingle(IFormatProvider provider); // 0x005910D8-0x005910E0
		double IConvertible.ToDouble(IFormatProvider provider); // 0x005910E0-0x005910E8
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x005910E8-0x005910F0
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x005910F0-0x005910FC
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x005910FC-0x00591104
	}

	[Serializable]
	[CLSCompliant] // 0x004B3218-0x004B3258
	[ComVisible] // 0x004B3218-0x004B3258
	public struct UInt64 : IComparable, IFormattable, IConvertible, IComparable<ulong>, IEquatable<ulong> // TypeDefIndex: 270
	{
		// Fields
		private ulong m_value; // 0x00
		public const ulong MaxValue = 18446744073709551615; // Metadata: 0x001DFBB6
		public const ulong MinValue = 0; // Metadata: 0x001DFBBE
	
		// Methods
		public int CompareTo(object value); // 0x00591104-0x0059110C
		public int CompareTo(ulong value); // 0x0059110C-0x00591120
		public override bool Equals(object obj); // 0x00591120-0x00591128
		public bool Equals(ulong obj); // 0x00591128-0x00591138
		public override int GetHashCode(); // 0x00591138-0x00591144
		public override string ToString(); // 0x00591144-0x00591178
		public string ToString(IFormatProvider provider); // 0x00591178-0x005911B0
		public string ToString(string format); // 0x005911B0-0x005911E8
		public string ToString(string format, IFormatProvider provider); // 0x005911E8-0x00591224
		[CLSCompliant] // 0x004BAE38-0x004BAE4C
		public static ulong Parse(string s, IFormatProvider provider); // 0x00E87E24-0x00E87E5C
		[CLSCompliant] // 0x004BAE4C-0x004BAE60
		public static ulong Parse(string s, NumberStyles style, IFormatProvider provider); // 0x00E87E5C-0x00E8869C
		public TypeCode GetTypeCode(); // 0x00591224-0x0059122C
		bool IConvertible.ToBoolean(IFormatProvider provider); // 0x0059122C-0x00591234
		char IConvertible.ToChar(IFormatProvider provider); // 0x00591234-0x0059123C
		sbyte IConvertible.ToSByte(IFormatProvider provider); // 0x0059123C-0x00591244
		byte IConvertible.ToByte(IFormatProvider provider); // 0x00591244-0x0059124C
		short IConvertible.ToInt16(IFormatProvider provider); // 0x0059124C-0x00591254
		ushort IConvertible.ToUInt16(IFormatProvider provider); // 0x00591254-0x0059125C
		int IConvertible.ToInt32(IFormatProvider provider); // 0x0059125C-0x00591264
		uint IConvertible.ToUInt32(IFormatProvider provider); // 0x00591264-0x0059126C
		long IConvertible.ToInt64(IFormatProvider provider); // 0x0059126C-0x00591274
		ulong IConvertible.ToUInt64(IFormatProvider provider); // 0x00591274-0x0059127C
		float IConvertible.ToSingle(IFormatProvider provider); // 0x0059127C-0x00591284
		double IConvertible.ToDouble(IFormatProvider provider); // 0x00591284-0x0059128C
		decimal IConvertible.ToDecimal(IFormatProvider provider); // 0x0059128C-0x00591294
		DateTime IConvertible.ToDateTime(IFormatProvider provider); // 0x00591294-0x005912A0
		object IConvertible.ToType(Type type, IFormatProvider provider); // 0x005912A0-0x005912A8
	}

	[Serializable]
	[ComVisible] // 0x004B3258-0x004B326C
	public class UnauthorizedAccessException : SystemException // TypeDefIndex: 271
	{
		// Constructors
		public UnauthorizedAccessException(); // 0x00E88890-0x00E88904
		public UnauthorizedAccessException(string message); // 0x00E88904-0x00E88938
		protected UnauthorizedAccessException(SerializationInfo info, StreamingContext context); // 0x00E88938-0x00E88940
	}

	[Serializable]
	[ComVisible] // 0x004B326C-0x004B3280
	public class UnhandledExceptionEventArgs : EventArgs // TypeDefIndex: 272
	{
		// Fields
		private object _Exception; // 0x10
		private bool _IsTerminating; // 0x18
	
		// Properties
		public object ExceptionObject { [ReliabilityContract] /* 0x004BAE60-0x004BAE78 */ get; } // 0x00E889C8-0x00E889D0 
		public bool IsTerminating { [ReliabilityContract] /* 0x004BAE78-0x004BAE90 */ get; } // 0x00E889D0-0x00E889D8 
	
		// Constructors
		public UnhandledExceptionEventArgs(object exception, bool isTerminating); // 0x00E88940-0x00E889C8
	}

	[Serializable]
	[ComVisible] // 0x004B3280-0x004B3294
	public delegate void UnhandledExceptionEventHandler(object sender, UnhandledExceptionEventArgs e); // TypeDefIndex: 273; 0x00E889E8-0x00E88DC8

	[Serializable]
	internal class UnitySerializationHolder : ISerializable, IObjectReference // TypeDefIndex: 274
	{
		// Fields
		private Type[] m_instantiation; // 0x10
		private int[] m_elementTypes; // 0x18
		private int m_genericParameterPosition; // 0x20
		private Type m_declaringType; // 0x28
		private MethodBase m_declaringMethod; // 0x30
		private string m_data; // 0x38
		private string m_assemblyName; // 0x40
		private int m_unityType; // 0x48
	
		// Constructors
		internal UnitySerializationHolder(SerializationInfo info, StreamingContext context); // 0x00E89674-0x00E8997C
	
		// Methods
		internal static void GetUnitySerializationInfo(SerializationInfo info, Missing missing); // 0x00E88E04-0x00E88EAC
		internal static RuntimeType AddElementTypes(SerializationInfo info, RuntimeType type); // 0x00E88EAC-0x00E89100
		internal Type MakeElementTypes(Type type); // 0x00E89100-0x00E8920C
		internal static void GetUnitySerializationInfo(SerializationInfo info, RuntimeType type); // 0x00E8920C-0x00E89524
		internal static void GetUnitySerializationInfo(SerializationInfo info, int unityType, string data, RuntimeAssembly assembly); // 0x00E89524-0x00E89674
		private void ThrowInsufficientInformation(string field); // 0x00E8997C-0x00E89A44
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00E89A44-0x00E89AC8
		public virtual object GetRealObject(StreamingContext context); // 0x00E89AC8-0x00E89FAC
	}

	internal struct UnSafeCharBuffer // TypeDefIndex: 275
	{
		// Fields
		private unsafe char* m_buffer; // 0x00
		private int m_totalSize; // 0x08
		private int m_length; // 0x0C
	
		// Constructors
		public unsafe UnSafeCharBuffer(char* buffer, int bufferSize); // 0x00591318-0x00591324
	
		// Methods
		public void AppendString(string stringToAppend); // 0x00591324-0x00591338
	}

	[Serializable]
	[ComVisible] // 0x004B3294-0x004B32A8
	public sealed class Version : ICloneable, IComparable, IComparable<System.Version>, IEquatable<System.Version> // TypeDefIndex: 276
	{
		// Fields
		private int _Major; // 0x10
		private int _Minor; // 0x14
		private int _Build; // 0x18
		private int _Revision; // 0x1C
		private static readonly char[] SeparatorsArray; // 0x00
		private const int ZERO_CHAR_VALUE = 48; // Metadata: 0x001DFBC6
	
		// Properties
		public int Major { get; } // 0x00E8A928-0x00E8A930 
		public int Minor { get; } // 0x00E8A930-0x00E8A938 
		public int Build { get; } // 0x00E8A938-0x00E8A940 
		public int Revision { get; } // 0x00E8A940-0x00E8A948 
	
		// Nested types
		internal enum ParseFailureKind // TypeDefIndex: 277
		{
			ArgumentNullException = 0,
			ArgumentException = 1,
			ArgumentOutOfRangeException = 2,
			FormatException = 3
		}
	
		internal struct VersionResult // TypeDefIndex: 278
		{
			// Fields
			internal Version m_parsedVersion; // 0x00
			internal ParseFailureKind m_failure; // 0x08
			internal string m_exceptionArgument; // 0x10
			internal string m_argumentName; // 0x18
			internal bool m_canThrow; // 0x20
	
			// Methods
			internal void Init(string argumentName, bool canThrow); // 0x00591384-0x00591394
			internal void SetFailure(ParseFailureKind failure); // 0x00591394-0x0059139C
			internal void SetFailure(ParseFailureKind failure, string argument); // 0x0059139C-0x005913A4
			internal Exception GetVersionParseException(); // 0x005913A4-0x005913F0
		}
	
		// Constructors
		public Version(int major, int minor, int build, int revision); // 0x00E8A348-0x00E8A4DC
		public Version(int major, int minor, int build); // 0x00E8A4DC-0x00E8A630
		public Version(int major, int minor); // 0x00E8A630-0x00E8A738
		public Version(string version); // 0x00E8A738-0x00E8A7E8
		public Version(); // 0x00E8A8F8-0x00E8A928
		static Version(); // 0x00E8B97C-0x00E8BA08
	
		// Methods
		public object Clone(); // 0x00E8A948-0x00E8A9E0
		public int CompareTo(object version); // 0x00E8A9E0-0x00E8AB1C
		public int CompareTo(Version value); // 0x00E8AB30-0x00E8AC10
		public override bool Equals(object obj); // 0x00E8AC10-0x00E8ACEC
		public bool Equals(Version obj); // 0x00E8ACEC-0x00E8ADBC
		public override int GetHashCode(); // 0x00E8ADBC-0x00E8ADD8
		public override string ToString(); // 0x00E8ADD8-0x00E8AE00
		public string ToString(int fieldCount); // 0x00E8AE00-0x00E8B1DC
		private static void AppendPositiveNumber(int num, StringBuilder sb); // 0x00E8B1DC-0x00E8B278
		public static Version Parse(string input); // 0x00E8A7E8-0x00E8A8F8
		private static bool TryParseVersion(string version, ref VersionResult result); // 0x00E8B278-0x00E8B798
		private static bool TryParseComponent(string component, string componentName, ref VersionResult result, out int parsedComponent); // 0x00E8B798-0x00E8B8E8
		public static bool operator ==(Version v1, Version v2); // 0x00E8AB1C-0x00E8AB30
		public static bool operator !=(Version v1, Version v2); // 0x00E8B8E8-0x00E8B97C
	}

	[ClassInterface] // 0x004B32A8-0x004B32E8
	[ComVisible] // 0x004B32A8-0x004B32E8
	public sealed class AppDomain : MarshalByRefObject // TypeDefIndex: 279
	{
		// Fields
		private IntPtr _mono_app_domain; // 0x18
		private static string _process_guid; // 0x00
		[ThreadStatic] // 0x004B8B98-0x004B8BA8
		private static Dictionary<string, object> type_resolve_in_progress; // 0x80000000
		[ThreadStatic] // 0x004B8BA8-0x004B8BB8
		private static Dictionary<string, object> assembly_resolve_in_progress; // 0x80000008
		[ThreadStatic] // 0x004B8BB8-0x004B8BC8
		private static Dictionary<string, object> assembly_resolve_in_progress_refonly; // 0x80000010
		private object _evidence; // 0x20
		private object _granted; // 0x28
		private int _principalPolicy; // 0x30
		[ThreadStatic] // 0x004B8BC8-0x004B8BD8
		private static object _principal; // 0x80000018
		private static AppDomain default_domain; // 0x08
		[CompilerGenerated] // 0x004B8BD8-0x004B8BE8
		private AssemblyLoadEventHandler AssemblyLoad; // 0x38
		[CompilerGenerated] // 0x004B8BE8-0x004B8BF8
		private ResolveEventHandler AssemblyResolve; // 0x40
		[CompilerGenerated] // 0x004B8BF8-0x004B8C08
		private EventHandler DomainUnload; // 0x48
		[CompilerGenerated] // 0x004B8C08-0x004B8C18
		private EventHandler ProcessExit; // 0x50
		[CompilerGenerated] // 0x004B8C18-0x004B8C28
		private ResolveEventHandler ResourceResolve; // 0x58
		[CompilerGenerated] // 0x004B8C28-0x004B8C38
		private ResolveEventHandler TypeResolve; // 0x60
		[CompilerGenerated] // 0x004B8C38-0x004B8C48
		private UnhandledExceptionEventHandler UnhandledException; // 0x68
		[CompilerGenerated] // 0x004B8C48-0x004B8C58
		private EventHandler<FirstChanceExceptionEventArgs> FirstChanceException; // 0x70
		private object _domain_manager; // 0x78
		[CompilerGenerated] // 0x004B8C58-0x004B8C68
		private ResolveEventHandler ReflectionOnlyAssemblyResolve; // 0x80
		private object _activation; // 0x88
		private object _applicationIdentity; // 0x90
		private List<string> compatibility_switch; // 0x98
	
		// Properties
		public static AppDomain CurrentDomain { get; } // 0x009EA008-0x009EA00C 
	
		// Events
		public event EventHandler DomainUnload {
			add; // 0x009EAE68-0x009EAF0C
			remove; // 0x009EAF0C-0x009EAFB0
		}
		public event EventHandler ProcessExit {
			add; // 0x009EAFB0-0x009EB054
			remove; // 0x009EB054-0x009EB0F8
		}
		public event UnhandledExceptionEventHandler UnhandledException {
			add; // 0x009EB0F8-0x009EB19C
			remove; // 0x009EB19C-0x009EB240
		}
	
		// Constructors
		private AppDomain(); // 0x009E9FF8-0x009EA000
	
		// Methods
		private string getFriendlyName(); // 0x009EA000-0x009EA004
		private static AppDomain getCurDomain(); // 0x009EA004-0x009EA008
		public object GetData(string name); // 0x009EA00C-0x009EA010
		public override object InitializeLifetimeService(); // 0x009EA010-0x009EA018
		internal Assembly LoadAssembly(string assemblyRef, Evidence securityEvidence, bool refOnly); // 0x009EA018-0x009EA020
		internal Assembly LoadSatellite(AssemblyName assemblyRef, bool throwOnError); // 0x009EA020-0x009EA138
		public Assembly Load(string assemblyString); // 0x009EA138-0x009EA144
		internal Assembly Load(string assemblyString, Evidence assemblySecurity, bool refonly); // 0x009EA144-0x009EA278
		private static AppDomain InternalSetDomainByID(int domain_id); // 0x009EA278-0x009EA27C
		private static AppDomain InternalSetDomain(AppDomain context); // 0x009EA27C-0x009EA280
		internal static void InternalPushDomainRefByID(int domain_id); // 0x009EA280-0x009EA284
		internal static void InternalPopDomainRef(); // 0x009EA284-0x009EA288
		internal static Context InternalSetContext(Context context); // 0x009EA288-0x009EA28C
		internal static Context InternalGetContext(); // 0x009EA28C-0x009EA290
		internal static Context InternalGetDefaultContext(); // 0x009EA290-0x009EA294
		internal static string InternalGetProcessGuid(string newguid); // 0x009EA294-0x009EA298
		internal static object InvokeInDomainByID(int domain_id, MethodInfo method, object obj, object[] args); // 0x009EA298-0x009EA420
		internal static string GetProcessGuid(); // 0x009EA420-0x009EA4D4
		private static bool InternalIsFinalizingForUnload(int domain_id); // 0x009EA4D4-0x009EA4D8
		public bool IsFinalizingForUnload(); // 0x009EA4D8-0x009EA4F0
		private int getDomainID(); // 0x009EA4F0-0x009EA4F8
		[Obsolete] // 0x004BAE90-0x004BAEC8
		public static int GetCurrentThreadId(); // 0x009EA4F8-0x009EA500
		public override string ToString(); // 0x009EA500-0x009EA504
		private void DoAssemblyLoad(Assembly assembly); // 0x009EA504-0x009EA598
		private Assembly DoAssemblyResolve(string name, Assembly requestingAssembly, bool refonly); // 0x009EA598-0x009EA85C
		internal Assembly DoTypeResolve(object name_or_tb); // 0x009EA85C-0x009EAAF4
		internal Assembly DoResourceResolve(string name, Assembly requesting); // 0x009EAAF4-0x009EAC48
		private void DoDomainUnload(); // 0x009EAC48-0x009EAC68
		internal byte[] GetMarshalledDomainObjRef(); // 0x009EAC68-0x009EAD40
		internal void ProcessMessageInDomain(byte[] arrRequest, CADMethodCallMessage cadMsg, out byte[] arrResponse, out CADMethodReturnMessage cadMrm); // 0x009EAD40-0x009EAE68
	}

	[FriendAccessAllowed] // 0x004B32E8-0x004B32F8
	internal class CLRConfig // TypeDefIndex: 280
	{
		// Methods
		internal static bool CheckThrowUnobservedTaskExceptions(); // 0x00C15168-0x00C1516C
	}

	internal static class CompatibilitySwitches // TypeDefIndex: 281
	{
		// Fields
		public static readonly bool IsAppEarlierThanSilverlight4; // 0x00
		public static readonly bool IsAppEarlierThanWindowsPhone8; // 0x01
	}

	[ComVisible] // 0x004B32F8-0x004B330C
	public static class Environment // TypeDefIndex: 282
	{
		// Fields
		private const int mono_corlib_version = 1051100001; // Metadata: 0x001DFBDA
		private static string nl; // 0x00
		private static OperatingSystem os; // 0x08
	
		// Properties
		public static int CurrentManagedThreadId { get; } // 0x00867A5C-0x00867A80 
		public static bool HasShutdownStarted { get; } // 0x00867A80-0x00867A84 
		public static string NewLine { get; } // 0x00867A88-0x00867AF8 
		private static PlatformID Platform { get; } // 0x00867AF8-0x00867AFC 
		public static OperatingSystem OSVersion { get; } // 0x00867B00-0x00867BB4 
		public static string StackTrace { get; } // 0x00867DF0-0x00867E68 
		public static int TickCount { get; } // 0x00867E68-0x00867E6C 
		public static bool Is64BitProcess { get; } // 0x00868CD0-0x00868CF0 
		public static int ProcessorCount { get; } // 0x00868CF0-0x00868CF4 
		internal static bool IsRunningOnWindows { get; } // 0x00868138-0x00868154 
	
		// Nested types
		[ComVisible] // 0x004B330C-0x004B3320
		public enum SpecialFolder // TypeDefIndex: 283
		{
			Desktop = 0,
			Programs = 2,
			MyDocuments = 5,
			Personal = 5,
			Favorites = 6,
			Startup = 7,
			Recent = 8,
			SendTo = 9,
			StartMenu = 11,
			MyMusic = 13,
			MyVideos = 14,
			DesktopDirectory = 16,
			MyComputer = 17,
			NetworkShortcuts = 19,
			Fonts = 20,
			Templates = 21,
			CommonStartMenu = 22,
			CommonPrograms = 23,
			CommonStartup = 24,
			CommonDesktopDirectory = 25,
			ApplicationData = 26,
			PrinterShortcuts = 27,
			LocalApplicationData = 28,
			InternetCache = 32,
			Cookies = 33,
			History = 34,
			CommonApplicationData = 35,
			Windows = 36,
			System = 37,
			ProgramFiles = 38,
			MyPictures = 39,
			UserProfile = 40,
			SystemX86 = 41,
			ProgramFilesX86 = 42,
			CommonProgramFiles = 43,
			CommonProgramFilesX86 = 44,
			CommonTemplates = 45,
			CommonDocuments = 46,
			CommonAdminTools = 47,
			AdminTools = 48,
			CommonMusic = 53,
			CommonPictures = 54,
			CommonVideos = 55,
			Resources = 56,
			LocalizedResources = 57,
			CommonOemLinks = 58,
			CDBurning = 59
		}
	
		public enum SpecialFolderOption // TypeDefIndex: 284
		{
			None = 0,
			DoNotVerify = 16384,
			Create = 32768
		}
	
		// Methods
		internal static string GetResourceString(string key); // 0x008574A0-0x008574A4
		internal static string GetResourceString(string key, params /* 0x004BD280-0x004BD290 */ object[] values); // 0x00859AAC-0x00859B2C
		internal static string GetResourceStringEncodingName(int codePage); // 0x0086791C-0x00867A5C
		private static string GetNewLine(); // 0x00867A84-0x00867A88
		internal static string GetOSVersionString(); // 0x00867AFC-0x00867B00
		internal static System.Version CreateVersionFromString(string info); // 0x00867BB4-0x00867DF0
		public static void Exit(int exitCode); // 0x00867E6C-0x00867E70
		public static string ExpandEnvironmentVariables(string name); // 0x00867E70-0x00868134
		internal static string internalGetEnvironmentVariable_native(IntPtr variable); // 0x00868258-0x0086825C
		internal static string internalGetEnvironmentVariable(string variable); // 0x0086825C-0x008682FC
		public static string GetEnvironmentVariable(string variable); // 0x00868134-0x00868138
		private static Hashtable GetEnvironmentVariablesNoCase(); // 0x00868154-0x00868258
		public static string GetFolderPath(SpecialFolder folder); // 0x00868300-0x00868308
		private static string GetWindowsFolderPath(int folder); // 0x0086834C-0x00868350
		public static string GetFolderPath(SpecialFolder folder, SpecialFolderOption option); // 0x00868308-0x0086834C
		private static string ReadXdgUserDir(string config_dir, string home_dir, string key, string fallback); // 0x00868768-0x00868BC4
		internal static string UnixGetFolderPath(SpecialFolder folder, SpecialFolderOption option); // 0x00868350-0x00868768
		public static void FailFast(string message); // 0x00868BC8-0x00868C2C
		public static void FailFast(string message, Exception exception); // 0x00868C2C-0x00868CA0
		private static string[] GetEnvironmentVariableNames(); // 0x008682FC-0x00868300
		internal static string GetMachineConfigPath(); // 0x00868CF4-0x00868CF8
		internal static string internalGetHome(); // 0x00868BC4-0x00868BC8
		internal static int GetPageSize(); // 0x00868CF8-0x00868CFC
		internal static string GetStackTrace(Exception e, bool needFileInfo); // 0x00868CFC-0x00868DA0
	}

	internal static class ParseNumbers // TypeDefIndex: 285
	{
		// Methods
		public static int StringToInt(string value, int fromBase, int flags); // 0x00BDE360-0x00BDE368
		public static unsafe int StringToInt(string value, int fromBase, int flags, int* parsePos); // 0x00BDE368-0x00BDE788
		public static unsafe long StringToLong(string value, int fromBase, int flags, int* parsePos); // 0x00BDE788-0x00BDEBD8
		public static string IntToString(int value, int toBase, int width, char paddingChar, int flags); // 0x00BDEBD8-0x00BDEE20
		private static void EndianSwap(ref byte[] value); // 0x00BDF314-0x00BDF3E4
		private static StringBuilder ConvertToBase2(byte[] value); // 0x00BDEE20-0x00BDEF6C
		private static StringBuilder ConvertToBase8(byte[] value); // 0x00BDEF6C-0x00BDF14C
		private static StringBuilder ConvertToBase16(byte[] value); // 0x00BDF14C-0x00BDF314
	}

	internal class MonoTypeInfo // TypeDefIndex: 286
	{
		// Fields
		public string full_name; // 0x10
		public MonoCMethod default_ctor; // 0x18
	
		// Constructors
		public MonoTypeInfo(); // 0x008FCF98-0x008FCFA0
	}

	internal sealed class TypeNameParser // TypeDefIndex: 287
	{
		// Methods
		internal static Type GetType(string typeName, Func<AssemblyName, Assembly> assemblyResolver, Func<Assembly, string, bool, Type> typeResolver, bool throwOnError, bool ignoreCase, ref StackCrawlMark stackMark); // 0x00E7F990-0x00E7F9DC
	}

	[Serializable]
	[ClassInterface] // 0x004B3320-0x004B3360
	[ComVisible] // 0x004B3320-0x004B3360
	public sealed class AppDomainSetup // TypeDefIndex: 288
	{
		// Fields
		private string application_base; // 0x10
		private string application_name; // 0x18
		private string cache_path; // 0x20
		private string configuration_file; // 0x28
		private string dynamic_base; // 0x30
		private string license_file; // 0x38
		private string private_bin_path; // 0x40
		private string private_bin_path_probe; // 0x48
		private string shadow_copy_directories; // 0x50
		private string shadow_copy_files; // 0x58
		private bool publisher_policy; // 0x60
		private bool path_changed; // 0x61
		private int loader_optimization; // 0x64
		private bool disallow_binding_redirects; // 0x68
		private bool disallow_code_downloads; // 0x69
		private object _activationArguments; // 0x70
		private object domain_initializer; // 0x78
		private object application_trust; // 0x80
		private string[] domain_initializer_args; // 0x88
		private bool disallow_appbase_probe; // 0x90
		private byte[] configuration_bytes; // 0x98
		private byte[] serialized_non_primitives; // 0xA0
		[CompilerGenerated] // 0x004B8C68-0x004B8C78
		private string _TargetFrameworkName_k__BackingField; // 0xA8
	
		// Constructors
		public AppDomainSetup(); // 0x009EB240-0x009EB248
	}

	public struct ArgIterator // TypeDefIndex: 289
	{
		// Fields
		private IntPtr sig; // 0x00
		private IntPtr args; // 0x08
		private int next_arg; // 0x10
		private int num_args; // 0x14
	
		// Methods
		public override bool Equals(object o); // 0x00587F88-0x00587F94
		public override int GetHashCode(); // 0x00587F94-0x00588020
	}

	[ComVisible] // 0x004B3360-0x004B3374
	public class AssemblyLoadEventArgs : EventArgs // TypeDefIndex: 290
	{
		// Fields
		private Assembly m_loadedAssembly; // 0x10
	
		// Constructors
		public AssemblyLoadEventArgs(Assembly loadedAssembly); // 0x00C0FA30-0x00C0FAAC
	}

	[Serializable]
	[ComVisible] // 0x004B3374-0x004B3388
	public delegate void AssemblyLoadEventHandler(object sender, AssemblyLoadEventArgs args); // TypeDefIndex: 291; 0x00C0FABC-0x00C0FE9C

	public static class Console // TypeDefIndex: 292
	{
		// Fields
		internal static TextWriter stdout; // 0x00
		private static TextWriter stderr; // 0x08
		private static TextReader stdin; // 0x10
		private static Encoding inputEncoding; // 0x18
		private static Encoding outputEncoding; // 0x20
		private static ConsoleCancelEventHandler cancel_event; // 0x28
		private static readonly InternalCancelHandler cancel_handler; // 0x30
	
		// Properties
		public static TextWriter Error { get; } // 0x00AB61FC-0x00AB6264 
		public static Encoding InputEncoding { get; } // 0x00AB6440-0x00AB64A8 
		public static Encoding OutputEncoding { get; } // 0x00AB64A8-0x00AB6510 
	
		// Nested types
		private class WindowsConsole // TypeDefIndex: 293
		{
			// Fields
			public static bool ctrlHandlerAdded; // 0x00
			private static WindowsCancelHandler cancelHandler; // 0x08
	
			// Nested types
			private delegate bool WindowsCancelHandler(int keyCode); // TypeDefIndex: 294; 0x00AB719C-0x00AB73EC
	
			// Constructors
			static WindowsConsole(); // 0x00AB7108-0x00AB718C
	
			// Methods
			private static extern int GetConsoleCP(); // 0x00AB6F84-0x00AB700C
			private static extern int GetConsoleOutputCP(); // 0x00AB700C-0x00AB7098
			private static bool DoWindowsConsoleCancelEvent(int keyCode); // 0x00AB7098-0x00AB7108
			public static int GetInputCodePage(); // 0x00AB5A5C-0x00AB5AB8
			public static int GetOutputCodePage(); // 0x00AB5AB8-0x00AB5B14
		}
	
		private delegate void InternalCancelHandler(); // TypeDefIndex: 295; 0x00AB6D28-0x00AB6F44
	
		// Constructors
		static Console(); // 0x00AB5840-0x00AB5A4C
	
		// Methods
		private static void SetupStreams(Encoding inputEncoding, Encoding outputEncoding); // 0x00AB5B14-0x00AB5EB8
		private static Stream Open(IntPtr handle, FileAccess access, int bufferSize); // 0x00AB6264-0x00AB6390
		public static Stream OpenStandardError(int bufferSize); // 0x00AB6160-0x00AB61FC
		public static Stream OpenStandardInput(int bufferSize); // 0x00AB6028-0x00AB60C4
		public static Stream OpenStandardOutput(int bufferSize); // 0x00AB60C4-0x00AB6160
		public static void SetOut(TextWriter newOut); // 0x00AB6390-0x00AB6440
		public static ConsoleKeyInfo ReadKey(); // 0x00AB6510-0x00AB6578
		public static ConsoleKeyInfo ReadKey(bool intercept); // 0x00AB6578-0x00AB65E4
		internal static void DoConsoleCancelEvent(); // 0x00AB66CC-0x00AB68C8
	}

	internal static class ConsoleDriver // TypeDefIndex: 296
	{
		// Fields
		internal static IConsoleDriver driver; // 0x00
		private static bool is_console; // 0x08
		private static bool called_isatty; // 0x09
	
		// Properties
		public static bool IsConsole { get; } // 0x00AB5EB8-0x00AB6028 
	
		// Constructors
		static ConsoleDriver(); // 0x00AB7538-0x00AB75F8
	
		// Methods
		private static IConsoleDriver CreateNullConsoleDriver(); // 0x00AB75F8-0x00AB7654
		private static IConsoleDriver CreateWindowsConsoleDriver(); // 0x00AB7654-0x00AB76B0
		private static IConsoleDriver CreateTermInfoDriver(string term); // 0x00AB76B0-0x00AB7714
		public static ConsoleKeyInfo ReadKey(bool intercept); // 0x00AB65E4-0x00AB66CC
		private static bool Isatty(IntPtr handle); // 0x00AB7714-0x00AB7718
		internal static int InternalKeyAvailable(int ms_timeout); // 0x00AB7718-0x00AB771C
		internal static unsafe bool TtySetup(string keypadXmit, string teardown, out byte[] control_characters, out int* address); // 0x00AB771C-0x00AB7720
		internal static bool SetEcho(bool wantEcho); // 0x00AB7720-0x00AB7924
	}

	internal sealed class DelegateData // TypeDefIndex: 297
	{
		// Fields
		public Type target_type; // 0x10
		public string method_name; // 0x18
		public bool curried_first_arg; // 0x20
	
		// Constructors
		public DelegateData(); // 0x007929E4-0x007929EC
	}

	[Serializable]
	[ClassInterface] // 0x004B3388-0x004B33C8
	[ComVisible] // 0x004B3388-0x004B33C8
	public abstract class Delegate : ICloneable, ISerializable // TypeDefIndex: 298
	{
		// Fields
		private IntPtr method_ptr; // 0x10
		private IntPtr invoke_impl; // 0x18
		private object m_target; // 0x20
		private IntPtr method; // 0x28
		private IntPtr delegate_trampoline; // 0x30
		private IntPtr extra_arg; // 0x38
		private IntPtr method_code; // 0x40
		private MethodInfo method_info; // 0x48
		private MethodInfo original_method_info; // 0x50
		private DelegateData data; // 0x58
		private bool method_is_virtual; // 0x60
	
		// Properties
		public MethodInfo Method { get; } // 0x00791DC8-0x00791DD4 
		public object Target { get; } // 0x00791DD8-0x00791DE0 
	
		// Methods
		private MethodInfo GetVirtualMethod_internal(); // 0x00791DD4-0x00791DD8
		internal static Delegate CreateDelegate_internal(Type type, object target, MethodInfo info, bool throwOnBindFailure); // 0x00791DE0-0x00791DE8
		private static bool arg_type_match(Type delArgType, Type argType); // 0x00791DE8-0x00791FA8
		private static bool arg_type_match_this(Type delArgType, Type argType, bool boxedThis); // 0x00791FA8-0x00792128
		private static bool return_type_match(Type delReturnType, Type returnType); // 0x00792128-0x007921F4
		public static Delegate CreateDelegate(Type type, object firstArgument, MethodInfo method, bool throwOnBindFailure); // 0x007921F4-0x00792200
		private static Delegate CreateDelegate(Type type, object firstArgument, MethodInfo method, bool throwOnBindFailure, bool allowClosed); // 0x00792200-0x007929E4
		public static Delegate CreateDelegate(Type type, object firstArgument, MethodInfo method); // 0x007929EC-0x007929F8
		public static Delegate CreateDelegate(Type type, MethodInfo method, bool throwOnBindFailure); // 0x007929F8-0x00792A10
		public static Delegate CreateDelegate(Type type, MethodInfo method); // 0x00792A10-0x00792A28
		public static Delegate CreateDelegate(Type type, object target, string method); // 0x00792A28-0x00792A34
		private static MethodInfo GetCandidateMethod(Type type, Type target, string method, BindingFlags bflags, bool ignoreCase, bool throwOnBindFailure); // 0x00792A40-0x00792E44
		public static Delegate CreateDelegate(Type type, Type target, string method, bool ignoreCase, bool throwOnBindFailure); // 0x00792E44-0x00792F68
		public static Delegate CreateDelegate(Type type, Type target, string method); // 0x00792F68-0x00792F74
		public static Delegate CreateDelegate(Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure); // 0x00792F74-0x00793074
		public static Delegate CreateDelegate(Type type, object target, string method, bool ignoreCase); // 0x00792A34-0x00792A40
		public virtual object Clone(); // 0x00793074-0x0079307C
		public override bool Equals(object obj); // 0x0079307C-0x00793248
		public override int GetHashCode(); // 0x00793248-0x007932D0
		protected virtual MethodInfo GetMethodImpl(); // 0x007932D0-0x0079339C
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0079339C-0x007933A0
		public virtual Delegate[] GetInvocationList(); // 0x007935D4-0x00793674
		public static Delegate Combine(Delegate a, Delegate b); // 0x00793674-0x00793884
		[ComVisible] // 0x004BAF28-0x004BAF3C
		public static Delegate Combine(params /* 0x004BD290-0x004BD2A0 */ Delegate[] delegates); // 0x00793884-0x007938F4
		protected virtual Delegate CombineImpl(Delegate d); // 0x007938F4-0x00793970
		public static Delegate Remove(Delegate source, Delegate value); // 0x00793970-0x00793B7C
		protected virtual Delegate RemoveImpl(Delegate d); // 0x00793B7C-0x00793BAC
		public static bool operator ==(Delegate d1, Delegate d2); // 0x00793BAC-0x00793BD4
		public static bool operator !=(Delegate d1, Delegate d2); // 0x00793BD4-0x00793C10
		internal static Delegate CreateDelegateNoSecurityCheck(RuntimeType type, object firstArgument, MethodInfo method); // 0x00793C10-0x00793C18
		internal static MulticastDelegate AllocDelegateLike_internal(Delegate d); // 0x00793C18-0x00793C1C
	}

	[Serializable]
	internal class DelegateSerializationHolder : ISerializable, IObjectReference // TypeDefIndex: 299
	{
		// Fields
		private Delegate _delegate; // 0x10
	
		// Nested types
		[Serializable]
		private class DelegateEntry // TypeDefIndex: 300
		{
			// Fields
			private string type; // 0x10
			private string assembly; // 0x18
			private object target; // 0x20
			private string targetTypeAssembly; // 0x28
			private string targetTypeName; // 0x30
			private string methodName; // 0x38
			public DelegateEntry delegateEntry; // 0x40
	
			// Constructors
			public DelegateEntry(Delegate del, string targetLabel); // 0x00794094-0x007941D0
	
			// Methods
			public Delegate DeserializeDelegate(SerializationInfo info, int index); // 0x00793E18-0x00794094
		}
	
		// Constructors
		private DelegateSerializationHolder(SerializationInfo info, StreamingContext ctx); // 0x00793C1C-0x00793E18
	
		// Methods
		public static void GetDelegateData(Delegate instance, SerializationInfo info, StreamingContext ctx); // 0x007933A0-0x007935D4
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x007941D0-0x00794234
		public object GetRealObject(StreamingContext context); // 0x00794234-0x0079423C
	}

	internal static class EmptyArray<T> // TypeDefIndex: 301
	{
		// Fields
		public static readonly T[] Value;
	
		// Constructors
		static EmptyArray();
	}

	internal enum SByteEnum : sbyte // TypeDefIndex: 302
	{
	
	}

	internal enum Int16Enum : short // TypeDefIndex: 303
	{
	
	}

	internal enum Int32Enum // TypeDefIndex: 304
	{
	
	}

	internal enum Int64Enum : long // TypeDefIndex: 305
	{
	
	}

	internal enum ByteEnum : byte // TypeDefIndex: 306
	{
	
	}

	internal enum UInt16Enum : ushort // TypeDefIndex: 307
	{
	
	}

	internal enum UInt32Enum : uint // TypeDefIndex: 308
	{
	
	}

	internal enum UInt64Enum : ulong // TypeDefIndex: 309
	{
	
	}

	internal interface IConsoleDriver // TypeDefIndex: 310
	{
		// Methods
		ConsoleKeyInfo ReadKey(bool intercept);
	}

	[Serializable]
	[ComVisible] // 0x004B33C8-0x004B33DC
	public struct IntPtr : ISerializable // TypeDefIndex: 311
	{
		// Fields
		private unsafe void* m_value; // 0x00
		public static readonly IntPtr Zero; // 0x00
	
		// Properties
		public static int Size { [ReliabilityContract] /* 0x004BAFB0-0x004BAFC8 */ get; } // 0x008F7C8C-0x008F7E48 
	
		// Constructors
		[ReliabilityContract] // 0x004BAF3C-0x004BAF54
		public unsafe IntPtr(int value); // 0x0058409C-0x005840A8
		[ReliabilityContract] // 0x004BAF54-0x004BAF6C
		public unsafe IntPtr(long value); // 0x005840A8-0x005840B0
		[CLSCompliant] // 0x004BAF6C-0x004BAFB0
		[ReliabilityContract] // 0x004BAF6C-0x004BAFB0
		public unsafe IntPtr(void* value); // 0x005840B0-0x005840B8
		private unsafe IntPtr(SerializationInfo info, StreamingContext context); // 0x005840B8-0x005840C0
	
		// Methods
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x005840C0-0x005840C8
		public override bool Equals(object obj); // 0x005840C8-0x005840D0
		public override int GetHashCode(); // 0x005840D0-0x005840D8
		[ReliabilityContract] // 0x004BAFC8-0x004BAFE0
		public long ToInt64(); // 0x005840D8-0x005840E0
		[CLSCompliant] // 0x004BAFE0-0x004BB024
		[ReliabilityContract] // 0x004BAFE0-0x004BB024
		public unsafe void* ToPointer(); // 0x005840E0-0x005840E8
		public override string ToString(); // 0x005840E8-0x0058411C
		public string ToString(string format); // 0x0058411C-0x00584154
		[ReliabilityContract] // 0x004BB024-0x004BB03C
		public static bool operator ==(IntPtr value1, IntPtr value2); // 0x008F7E48-0x008F7E54
		[ReliabilityContract] // 0x004BB03C-0x004BB054
		public static bool operator !=(IntPtr value1, IntPtr value2); // 0x008F7E54-0x008F7E60
		[ReliabilityContract] // 0x004BB054-0x004BB06C
		public static explicit operator IntPtr(int value); // 0x008F7E60-0x008F7E68
		[ReliabilityContract] // 0x004BB06C-0x004BB084
		public static explicit operator IntPtr(long value); // 0x008F7E68-0x008F7E6C
		[CLSCompliant] // 0x004BB084-0x004BB0C8
		[ReliabilityContract] // 0x004BB084-0x004BB0C8
		public static unsafe explicit operator IntPtr(void* value); // 0x008F7E6C-0x008F7E70
		public static explicit operator int(IntPtr value); // 0x008F7E70-0x008F7E74
		public static explicit operator long(IntPtr value); // 0x008F7E74-0x008F7E78
		[CLSCompliant] // 0x004BB0C8-0x004BB0DC
		public static unsafe explicit operator void*(IntPtr value); // 0x008F7E78-0x008F7E8C
		[ReliabilityContract] // 0x004BB0DC-0x004BB0F4
		internal bool IsNull(); // 0x00584154-0x0058475C
	}

	internal static class KnownTerminals // TypeDefIndex: 312
	{
		// Properties
		public static byte[] linux { get; } // 0x008F8258-0x008F82C4 
		public static byte[] xterm { get; } // 0x008F82C4-0x008F8330 
		public static byte[] ansi { get; } // 0x008F8330-0x008F839C 
	}

	[Serializable]
	[ComVisible] // 0x004B33DC-0x004B33F0
	public abstract class MarshalByRefObject // TypeDefIndex: 313
	{
		// Fields
		[NonSerialized]
		private object _identity; // 0x10
	
		// Properties
		internal ServerIdentity ObjectIdentity { get; set; } // 0x008F9634-0x008F9694 0x008F9708-0x008F9768
	
		// Constructors
		protected MarshalByRefObject(); // 0x008ED098-0x008ED0A0
	
		// Methods
		public virtual ObjRef CreateObjRef(Type requestedType); // 0x008F9768-0x008F97C8
		public virtual object InitializeLifetimeService(); // 0x008F97C8-0x008F9828
	}

	internal class MonoAsyncCall // TypeDefIndex: 314
	{
		// Fields
		private object msg; // 0x10
		private IntPtr cb_method; // 0x18
		private object cb_target; // 0x20
		private object state; // 0x28
		private object res; // 0x30
		private object out_args; // 0x38
	
		// Constructors
		public MonoAsyncCall(); // 0x008FAD78-0x008FAD80
	}

	internal static class MonoCustomAttrs // TypeDefIndex: 315
	{
		// Fields
		private static Assembly corlib; // 0x00
		[ThreadStatic] // 0x004B8C78-0x004B8C88
		private static Dictionary<Type, AttributeUsageAttribute> usage_cache; // 0x80000000
		private static readonly AttributeUsageAttribute DefaultAttributeUsage; // 0x08
	
		// Nested types
		private class AttributeInfo // TypeDefIndex: 316
		{
			// Fields
			private AttributeUsageAttribute _usage; // 0x10
			private int _inheritanceLevel; // 0x18
	
			// Properties
			public AttributeUsageAttribute Usage { get; } // 0x008FCF20-0x008FCF28 
			public int InheritanceLevel { get; } // 0x008FCF28-0x008FCF30 
	
			// Constructors
			public AttributeInfo(AttributeUsageAttribute usage, int inheritanceLevel); // 0x008FC268-0x008FC2A4
		}
	
		// Constructors
		static MonoCustomAttrs(); // 0x008FCEB0-0x008FCF20
	
		// Methods
		private static bool IsUserCattrProvider(object obj); // 0x008FAD80-0x008FAF68
		internal static object[] GetCustomAttributesInternal(ICustomAttributeProvider obj, Type attributeType, bool pseudoAttrs); // 0x008FAF68-0x008FAF70
		internal static object[] GetPseudoCustomAttributes(ICustomAttributeProvider obj, Type attributeType); // 0x008FAF70-0x008FB25C
		private static object[] GetPseudoCustomAttributes(Type type); // 0x008FB25C-0x008FB3B8
		internal static object[] GetCustomAttributesBase(ICustomAttributeProvider obj, Type attributeType, bool inheritedOnly); // 0x008FB3B8-0x008FB574
		internal static object[] GetCustomAttributes(ICustomAttributeProvider obj, Type attributeType, bool inherit); // 0x008FB574-0x008FBED4
		internal static object[] GetCustomAttributes(ICustomAttributeProvider obj, bool inherit); // 0x008FC2A4-0x008FC424
		private static CustomAttributeData[] GetCustomAttributesDataInternal(ICustomAttributeProvider obj); // 0x008FC424-0x008FC428
		internal static IList<CustomAttributeData> GetCustomAttributesData(ICustomAttributeProvider obj); // 0x008FC428-0x008FC4E0
		internal static bool IsDefined(ICustomAttributeProvider obj, Type attributeType, bool inherit); // 0x008FC4E0-0x008FC7AC
		internal static bool IsDefinedInternal(ICustomAttributeProvider obj, Type AttributeType); // 0x008FC7AC-0x008FC7B0
		private static PropertyInfo GetBasePropertyDefinition(MonoProperty property); // 0x008FC7B0-0x008FCA70
		private static EventInfo GetBaseEventDefinition(MonoEvent evt); // 0x008FCA70-0x008FCC44
		private static ICustomAttributeProvider GetBase(ICustomAttributeProvider obj); // 0x008FBED4-0x008FC108
		private static AttributeUsageAttribute RetrieveAttributeUsageNoCache(Type attributeType); // 0x008FCC44-0x008FCEB0
		private static AttributeUsageAttribute RetrieveAttributeUsage(Type attributeType); // 0x008FC108-0x008FC268
	}

	internal sealed class MonoListItem // TypeDefIndex: 317
	{
		// Fields
		private MonoListItem next; // 0x10
		private object data; // 0x18
	
		// Constructors
		public MonoListItem(); // 0x008FCF88-0x008FCF90
	}

	internal sealed class MonoType : RuntimeType // TypeDefIndex: 318
	{
	}

	[Serializable]
	[ComVisible] // 0x004B33F0-0x004B3404
	public abstract class MulticastDelegate : Delegate // TypeDefIndex: 319
	{
		// Fields
		private Delegate[] delegates; // 0x68
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x008FCFA0-0x008FCFA8
		public sealed override bool Equals(object obj); // 0x008FCFA8-0x008FD12C
		public sealed override int GetHashCode(); // 0x008FD12C-0x008FD134
		protected override MethodInfo GetMethodImpl(); // 0x008FD134-0x008FD18C
		public sealed override Delegate[] GetInvocationList(); // 0x008FD18C-0x008FD27C
		protected sealed override Delegate CombineImpl(Delegate follow); // 0x008FD27C-0x008FD4FC
		private int LastIndexOf(Delegate[] haystack, Delegate[] needle); // 0x008FD4FC-0x008FD64C
		protected sealed override Delegate RemoveImpl(Delegate value); // 0x008FD64C-0x008FD938
	}

	internal class NullConsoleDriver : IConsoleDriver // TypeDefIndex: 320
	{
		// Fields
		private static readonly ConsoleKeyInfo EmptyConsoleKeyInfo; // 0x00
	
		// Constructors
		public NullConsoleDriver(); // 0x008FDB14-0x008FDB1C
		static NullConsoleDriver(); // 0x008FDB1C-0x008FDBA8
	
		// Methods
		public ConsoleKeyInfo ReadKey(bool intercept); // 0x008FDAA8-0x008FDB14
	}

	[ComVisible] // 0x004B3404-0x004B3418
	public static class Nullable // TypeDefIndex: 321
	{
		// Methods
		public static Type GetUnderlyingType(Type nullableType); // 0x008FDC58-0x008FDDF4
	}

	[Serializable]
	[DebuggerStepThrough] // 0x004B3418-0x004B3428
	public struct Nullable<T> // TypeDefIndex: 322
		where T : struct
	{
		// Fields
		internal T value;
		internal bool has_value;
	
		// Properties
		public bool HasValue { get; }
		public T Value { get; }
	
		// Constructors
		public Nullable(T value);
	
		// Methods
		public override bool Equals(object other);
		private bool Equals(T? other);
		public override int GetHashCode();
		public override string ToString();
		private static object Box(T? o);
		private static T? Unbox(object o);
	}

	internal sealed class NumberFormatter // TypeDefIndex: 323
	{
		// Fields
		private static readonly unsafe ulong* MantissaBitsTable; // 0x00
		private static readonly unsafe int* TensExponentTable; // 0x08
		private static readonly unsafe char* DigitLowerTable; // 0x10
		private static readonly unsafe char* DigitUpperTable; // 0x18
		private static readonly unsafe long* TenPowersList; // 0x20
		private static readonly unsafe int* DecHexDigits; // 0x28
		private NumberFormatInfo _nfi; // 0x10
		private char[] _cbuf; // 0x18
		private bool _NaN; // 0x20
		private bool _infinity; // 0x21
		private bool _isCustomFormat; // 0x22
		private bool _specifierIsUpper; // 0x23
		private bool _positive; // 0x24
		private char _specifier; // 0x26
		private int _precision; // 0x28
		private int _defPrecision; // 0x2C
		private int _digitsLen; // 0x30
		private int _offset; // 0x34
		private int _decPointPos; // 0x38
		private uint _val1; // 0x3C
		private uint _val2; // 0x40
		private uint _val3; // 0x44
		private uint _val4; // 0x48
		private int _ind; // 0x4C
		[ThreadStatic] // 0x004B8C88-0x004B8C98
		private static NumberFormatter threadNumberFormatter; // 0x80000000
		[ThreadStatic] // 0x004B8C98-0x004B8CA8
		private static NumberFormatter userFormatProvider; // 0x80000008
	
		// Properties
		private CultureInfo CurrentCulture { set; } // 0x00900AE4-0x00900B30
		private int IntegerDigits { get; } // 0x00901764-0x00901774 
		private int DecimalDigits { get; } // 0x00901774-0x00901788 
		private bool IsFloatingSource { get; } // 0x00901788-0x0090179C 
		private bool IsZero { get; } // 0x0090179C-0x009017AC 
		private bool IsZeroInteger { get; } // 0x009017AC-0x009017CC 
	
		// Nested types
		private class CustomInfo // TypeDefIndex: 324
		{
			// Fields
			public bool UseGroup; // 0x10
			public int DecimalDigits; // 0x14
			public int DecimalPointPos; // 0x18
			public int DecimalTailSharpDigits; // 0x1C
			public int IntegerDigits; // 0x20
			public int IntegerHeadSharpDigits; // 0x24
			public int IntegerHeadPos; // 0x28
			public bool UseExponent; // 0x2C
			public int ExponentDigits; // 0x30
			public int ExponentTailSharpDigits; // 0x34
			public bool ExponentNegativeSignOnly; // 0x38
			public int DividePlaces; // 0x3C
			public int Percents; // 0x40
			public int Permilles; // 0x44
	
			// Constructors
			public CustomInfo(); // 0x00BDB444-0x00BDB458
	
			// Methods
			public static void GetActiveSection(string format, ref bool positive, bool zero, ref int offset, ref int length); // 0x00BDACA8-0x00BDAF9C
			public static CustomInfo Parse(string format, int offset, int length, NumberFormatInfo nfi); // 0x00BDAF9C-0x00BDB444
			public string Format(string format, int offset, int length, NumberFormatInfo nfi, bool positive, StringBuilder sb_int, StringBuilder sb_dec, StringBuilder sb_exp); // 0x00BDB458-0x00BDBBEC
		}
	
		// Constructors
		static NumberFormatter(); // 0x008FFFCC-0x0090002C
		private NumberFormatter(Thread current); // 0x00900A24-0x00900AE4
	
		// Methods
		private static unsafe void GetFormatterTables(out ulong* MantissaBitsTable, out int* TensExponentTable, out char* DigitLowerTable, out char* DigitUpperTable, out long* TenPowersList, out int* DecHexDigits); // 0x008FFFC8-0x008FFFCC
		private static long GetTenPowerOf(int i); // 0x0090002C-0x0090009C
		private void InitDecHexDigits(uint value); // 0x0090009C-0x00900164
		private void InitDecHexDigits(ulong value); // 0x009002F8-0x0090041C
		private void InitDecHexDigits(uint hi, ulong lo); // 0x0090041C-0x00900604
		private static uint FastToDecHex(int val); // 0x00900164-0x00900234
		private static uint ToDecHex(int val); // 0x00900234-0x009002F8
		private static int FastDecHexLen(int val); // 0x00900604-0x0090062C
		private static int DecHexLen(uint val); // 0x0090062C-0x009006F4
		private int DecHexLen(); // 0x009006F4-0x00900818
		private static int ScaleOrder(long hi); // 0x00900818-0x009008AC
		private int InitialFloatingPrecision(); // 0x009008AC-0x00900988
		private static int ParsePrecision(string format); // 0x00900988-0x00900A24
		private void Init(string format); // 0x00900B30-0x00900C5C
		private void InitHex(ulong value); // 0x00900C5C-0x00900CA4
		private void Init(string format, int value, int defPrecision); // 0x00900CA4-0x00900D48
		private void Init(string format, uint value, int defPrecision); // 0x00900D48-0x00900DD0
		private void Init(string format, long value); // 0x00900DD0-0x00900E5C
		private void Init(string format, ulong value); // 0x00900E5C-0x00900EE0
		private void Init(string format, double value, int defPrecision); // 0x00900EE0-0x009011C8
		private void Init(string format, decimal value); // 0x009012EC-0x00901464
		private void ResetCharBuf(int size); // 0x00901464-0x009014E8
		private void Resize(int len); // 0x009014E8-0x00901548
		private void Append(char c); // 0x00901548-0x009015D4
		private void Append(char c, int cnt); // 0x009015D4-0x00901680
		private void Append(string s); // 0x00901680-0x00901748
		private NumberFormatInfo GetNumberFormatInstance(IFormatProvider fp); // 0x00901748-0x00901764
		private void RoundPos(int pos); // 0x009017CC-0x009017D8
		private bool RoundDecimal(int decimals); // 0x00901944-0x00901958
		private bool RoundBits(int shift); // 0x009017D8-0x00901944
		private void RemoveTrailingZeros(); // 0x00901A8C-0x00901ACC
		private void AddOneToDecHex(); // 0x00901958-0x00901A8C
		private static uint AddOneToDecHex(uint val); // 0x00901ACC-0x00901B78
		private int CountTrailingZeros(); // 0x009011C8-0x009012EC
		private static int CountTrailingZeros(uint val); // 0x00901B78-0x00901BCC
		private static NumberFormatter GetInstance(IFormatProvider fp); // 0x00901BCC-0x00901D48
		private void Release(); // 0x00901D48-0x00901DE0
		public static string NumberToString(string format, uint value, IFormatProvider fp); // 0x008FE1D8-0x008FE290
		public static string NumberToString(string format, int value, IFormatProvider fp); // 0x008FE120-0x008FE1D8
		public static string NumberToString(string format, ulong value, IFormatProvider fp); // 0x008FE3C0-0x008FE474
		public static string NumberToString(string format, long value, IFormatProvider fp); // 0x008FE290-0x008FE344
		public static string NumberToString(string format, float value, IFormatProvider fp); // 0x008FE4F8-0x008FE630
		public static string NumberToString(string format, double value, IFormatProvider fp); // 0x008FDFE8-0x008FE120
		public static string NumberToString(string format, decimal value, IFormatProvider fp); // 0x008FDE88-0x008FDF64
		private string IntegerToString(string format, IFormatProvider fp); // 0x00901DE0-0x00901FCC
		private string NumberToString(string format, NumberFormatInfo nfi); // 0x00902064-0x00902208
		private string FormatCurrency(int precision, NumberFormatInfo nfi); // 0x00902310-0x0090257C
		private string FormatDecimal(int precision, NumberFormatInfo nfi); // 0x0090257C-0x00902648
		private string FormatHexadecimal(int precision); // 0x00902BC8-0x00902D24
		private string FormatFixedPoint(int precision, NumberFormatInfo nfi); // 0x0090269C-0x00902788
		private string FormatRoundtrip(double origval, NumberFormatInfo nfi); // 0x00902208-0x00902310
		private string FormatRoundtrip(float origval, NumberFormatInfo nfi); // 0x00901FCC-0x00902064
		private string FormatGeneral(int precision, NumberFormatInfo nfi); // 0x00902788-0x009028DC
		private string FormatNumber(int precision, NumberFormatInfo nfi); // 0x009028DC-0x00902A54
		private string FormatPercent(int precision, NumberFormatInfo nfi); // 0x00902A54-0x00902BC8
		private string FormatExponential(int precision, NumberFormatInfo nfi); // 0x00902648-0x0090269C
		private string FormatExponential(int precision, NumberFormatInfo nfi, int expDigits); // 0x00903814-0x009038E8
		private string FormatCustom(string format, NumberFormatInfo nfi); // 0x00902D24-0x00903264
		private static void ZeroTrimEnd(StringBuilder sb, bool canEmpty); // 0x00903E28-0x00903F00
		private static bool IsZeroOnly(StringBuilder sb); // 0x00903D34-0x00903E28
		private static void AppendNonNegativeNumber(StringBuilder sb, int v); // 0x00903B74-0x00903C84
		private void AppendIntegerString(int minLength, StringBuilder sb); // 0x00903C84-0x00903D10
		private void AppendIntegerString(int minLength); // 0x0090373C-0x009037A8
		private void AppendDecimalString(int precision, StringBuilder sb); // 0x00903D10-0x00903D34
		private void AppendDecimalString(int precision); // 0x009034A8-0x009034C0
		private void AppendIntegerStringWithGroupSeparator(int[] groups, string groupSeparator); // 0x00903264-0x009034A8
		private void AppendExponent(NumberFormatInfo nfi, int exponent, int minDigits); // 0x009039EC-0x00903B54
		private void AppendOneDigit(int start); // 0x00903908-0x009039EC
		private void AppendDigits(int start, int end); // 0x009034C0-0x0090373C
		private void AppendDigits(int start, int end, StringBuilder sb); // 0x00903F00-0x00905254
		private void Multiply10(int count); // 0x009038E8-0x00903908
		private void Divide10(int count); // 0x00903B54-0x00903B74
		private NumberFormatter GetClone(); // 0x009037A8-0x00903814
	}

	[Serializable]
	[ClassInterface] // 0x004B3428-0x004B3468
	[ComVisible] // 0x004B3428-0x004B3468
	public class Object // TypeDefIndex: 325
	{
		// Constructors
		[ReliabilityContract] // 0x004BB0F4-0x004BB10C
		public Object(); // 0x00BDBBEC-0x00BDBBF0
	
		// Methods
		public virtual bool Equals(object obj); // 0x00BDBBF0-0x00BDBBFC
		public static bool Equals(object objA, object objB); // 0x00BDBBFC-0x00BDBC28
		[ReliabilityContract] // 0x004BB10C-0x004BB124
		~Object(); // 0x00BDBC28-0x00BDBC2C
		public virtual int GetHashCode(); // 0x00BDBC2C-0x00BDBC30
		public Type GetType(); // 0x00BDBC34-0x00BDBC38
		protected object MemberwiseClone(); // 0x00BDBC38-0x00BDBC3C
		public virtual string ToString(); // 0x00BDBC3C-0x00BDBC60
		[ReliabilityContract] // 0x004BB124-0x004BB13C
		public static bool ReferenceEquals(object objA, object objB); // 0x00BDBC60-0x00BDBC6C
		internal static int InternalGetHashCode(object o); // 0x00BDBC30-0x00BDBC34
		private void FieldGetter(string typeName, string fieldName, ref object val); // 0x00BDBC6C-0x00BDBC70
		private void FieldSetter(string typeName, string fieldName, object val); // 0x00BDBC70-0x00BDBC74
	}

	[Serializable]
	[ComVisible] // 0x004B3468-0x004B347C
	public sealed class OperatingSystem : ICloneable, ISerializable // TypeDefIndex: 326
	{
		// Fields
		private PlatformID _platform; // 0x10
		private System.Version _version; // 0x18
		private string _servicePack; // 0x20
	
		// Properties
		public PlatformID Platform { get; } // 0x00BDC418-0x00BDC420 
		public System.Version Version { get; } // 0x00BDC420-0x00BDC428 
		public string ServicePack { get; } // 0x00BDC428-0x00BDC430 
	
		// Constructors
		public OperatingSystem(PlatformID platform, System.Version version); // 0x00BDC170-0x00BDC2B4
		private OperatingSystem(SerializationInfo information, StreamingContext context); // 0x00BDC2B4-0x00BDC418
	
		// Methods
		public object Clone(); // 0x00BDC430-0x00BDC4A4
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00BDC4A4-0x00BDC56C
		public override string ToString(); // 0x00BDC56C-0x00BDC6E4
	}

	[Serializable]
	[ComVisible] // 0x004B347C-0x004B3490
	public enum PlatformID // TypeDefIndex: 327
	{
		Win32S = 0,
		Win32Windows = 1,
		Win32NT = 2,
		WinCE = 3,
		Unix = 4,
		Xbox = 5,
		MacOSX = 6
	}

	[ComVisible] // 0x004B3490-0x004B34A4
	public class ResolveEventArgs : EventArgs // TypeDefIndex: 328
	{
		// Fields
		private string m_Name; // 0x10
		private Assembly m_Requesting; // 0x18
	
		// Constructors
		public ResolveEventArgs(string name); // 0x00872F20-0x00872F9C
		public ResolveEventArgs(string name, Assembly requestingAssembly); // 0x00872F9C-0x0087301C
	}

	[Serializable]
	[ComVisible] // 0x004B34A4-0x004B34B8
	public delegate Assembly ResolveEventHandler(object sender, ResolveEventArgs args); // TypeDefIndex: 329; 0x0087302C-0x00873414

	[ComVisible] // 0x004B34B8-0x004B34CC
	public struct RuntimeArgumentHandle // TypeDefIndex: 330
	{
		// Fields
		internal IntPtr args; // 0x00
	}

	[Serializable]
	[ComVisible] // 0x004B34CC-0x004B34E0
	public struct RuntimeFieldHandle : ISerializable // TypeDefIndex: 331
	{
		// Fields
		private IntPtr value; // 0x00
	
		// Properties
		public IntPtr Value { get; } // 0x00588218-0x00588220 
	
		// Constructors
		internal RuntimeFieldHandle(IntPtr v); // 0x00588208-0x00588210
		private RuntimeFieldHandle(SerializationInfo info, StreamingContext context); // 0x00588210-0x00588218
	
		// Methods
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00588220-0x00588228
		[ReliabilityContract] // 0x004BB13C-0x004BB154
		public override bool Equals(object obj); // 0x00588228-0x00588230
		public override int GetHashCode(); // 0x00588230-0x0058823C
		private static void SetValueInternal(FieldInfo fi, object obj, object value); // 0x009F8F10-0x009F8F14
		internal static void SetValue(RtFieldInfo field, object obj, object value, RuntimeType fieldType, FieldAttributes fieldAttr, RuntimeType declaringType, ref bool domainInitialized); // 0x009F8F14-0x009F8F18
		internal static unsafe void SetValueDirect(RtFieldInfo field, RuntimeType fieldType, void* pTypedRef, object value, RuntimeType contextType); // 0x009F8F18-0x009F9354
	}

	[Serializable]
	[ComVisible] // 0x004B34E0-0x004B34F4
	public struct RuntimeMethodHandle : ISerializable // TypeDefIndex: 332
	{
		// Fields
		private IntPtr value; // 0x00
	
		// Properties
		public IntPtr Value { get; } // 0x0058824C-0x00588254 
	
		// Constructors
		internal RuntimeMethodHandle(IntPtr v); // 0x0058823C-0x00588244
		private RuntimeMethodHandle(SerializationInfo info, StreamingContext context); // 0x00588244-0x0058824C
	
		// Methods
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00588254-0x0058825C
		[ReliabilityContract] // 0x004BB154-0x004BB16C
		public override bool Equals(object obj); // 0x0058825C-0x00588264
		public override int GetHashCode(); // 0x00588264-0x00588270
		internal static string ConstructInstantiation(RuntimeMethodInfo method, TypeNameFormatFlags format); // 0x009F9354-0x009F94F4
		internal bool IsNullHandle(); // 0x00588270-0x00588278
	}

	[Serializable]
	[ComVisible] // 0x004B34F4-0x004B3508
	public struct RuntimeTypeHandle : ISerializable // TypeDefIndex: 333
	{
		// Fields
		private IntPtr value; // 0x00
	
		// Properties
		public IntPtr Value { get; } // 0x005882A8-0x005882B0 
	
		// Constructors
		internal RuntimeTypeHandle(IntPtr val); // 0x00588278-0x00588280
		internal RuntimeTypeHandle(RuntimeType type); // 0x00588280-0x005882A0
		private RuntimeTypeHandle(SerializationInfo info, StreamingContext context); // 0x005882A0-0x005882A8
	
		// Methods
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x005882B0-0x005882B8
		[ReliabilityContract] // 0x004BB16C-0x004BB184
		public override bool Equals(object obj); // 0x005882B8-0x005882C0
		public override int GetHashCode(); // 0x005882C0-0x005882CC
		internal static TypeAttributes GetAttributes(RuntimeType type); // 0x009FDB74-0x009FDB78
		private static int GetMetadataToken(RuntimeType type); // 0x00A03814-0x00A03818
		internal static int GetToken(RuntimeType type); // 0x00A00A50-0x00A00A54
		private static Type GetGenericTypeDefinition_impl(RuntimeType type); // 0x00A03818-0x00A0381C
		internal static Type GetGenericTypeDefinition(RuntimeType type); // 0x009FF23C-0x009FF240
		internal static bool HasElementType(RuntimeType type); // 0x009FDDE8-0x009FDE2C
		internal static bool HasInstantiation(RuntimeType type); // 0x009FF244-0x009FF248
		internal static bool IsArray(RuntimeType type); // 0x009FDF7C-0x009FDF80
		internal static bool IsByRef(RuntimeType type); // 0x009FDC10-0x009FDC14
		internal static bool IsComObject(RuntimeType type); // 0x00A0381C-0x00A03820
		internal static bool IsInstanceOfType(RuntimeType type, object o); // 0x009FD814-0x009FD818
		internal static bool IsPointer(RuntimeType type); // 0x009FDC20-0x009FDC24
		internal static bool IsPrimitive(RuntimeType type); // 0x009FDC18-0x009FDC1C
		internal static bool HasReferences(RuntimeType type); // 0x00A03820-0x00A03824
		internal static bool IsComObject(RuntimeType type, bool isGenericCOM); // 0x009FDC28-0x009FDC38
		internal static bool IsContextful(RuntimeType type); // 0x009FDB7C-0x009FDC0C
		internal static bool IsEquivalentTo(RuntimeType rtType1, RuntimeType rtType2); // 0x009FDB58-0x009FDB60
		internal static bool IsSzArray(RuntimeType type); // 0x009FDF24-0x009FDF78
		internal static bool IsInterface(RuntimeType type); // 0x00A03824-0x00A03848
		internal static int GetArrayRank(RuntimeType type); // 0x009FE030-0x009FE034
		internal static RuntimeAssembly GetAssembly(RuntimeType type); // 0x009FD7D4-0x009FD7D8
		internal static RuntimeType GetElementType(RuntimeType type); // 0x009FE038-0x009FE03C
		internal static RuntimeModule GetModule(RuntimeType type); // 0x009FD7C8-0x009FD7CC
		internal static bool IsGenericVariable(RuntimeType type); // 0x009FDB64-0x009FDB68
		internal static RuntimeType GetBaseType(RuntimeType type); // 0x009FDB68-0x009FDB6C
		internal static bool CanCastTo(RuntimeType type, RuntimeType target); // 0x009FDA9C-0x009FDAAC
		private static bool type_is_assignable_from(Type a, Type b); // 0x00A03848-0x00A03B28
		internal static bool IsGenericTypeDefinition(RuntimeType type); // 0x009FF0D0-0x009FF0D4
		internal static IntPtr GetGenericParameterInfo(RuntimeType type); // 0x00A02DD0-0x00A02DD4
	}

	[Serializable]
	[ComVisible] // 0x004B3508-0x004B351C
	public enum StringComparison // TypeDefIndex: 334
	{
		CurrentCulture = 0,
		CurrentCultureIgnoreCase = 1,
		InvariantCulture = 2,
		InvariantCultureIgnoreCase = 3,
		Ordinal = 4,
		OrdinalIgnoreCase = 5
	}

	internal class TermInfoDriver : IConsoleDriver // TypeDefIndex: 335
	{
		// Fields
		private static unsafe int* native_terminal_size; // 0x00
		private static int terminal_size; // 0x08
		private static readonly string[] locations; // 0x10
		private TermInfoReader reader; // 0x10
		private int cursorLeft; // 0x18
		private int cursorTop; // 0x1C
		private string title; // 0x20
		private string titleFormat; // 0x28
		private bool cursorVisible; // 0x30
		private string csrVisible; // 0x38
		private string csrInvisible; // 0x40
		private string clear; // 0x48
		private string bell; // 0x50
		private string term; // 0x58
		private StreamReader stdin; // 0x60
		private CStreamWriter stdout; // 0x68
		private int windowWidth; // 0x70
		private int windowHeight; // 0x74
		private int bufferHeight; // 0x78
		private int bufferWidth; // 0x7C
		private char[] buffer; // 0x80
		private int readpos; // 0x88
		private int writepos; // 0x8C
		private string keypadXmit; // 0x90
		private string keypadLocal; // 0x98
		private bool inited; // 0xA0
		private object initLock; // 0xA8
		private bool initKeys; // 0xB0
		private string origPair; // 0xB8
		private string origColors; // 0xC0
		private string cursorAddress; // 0xC8
		private ConsoleColor fgcolor; // 0xD0
		private string setfgcolor; // 0xD8
		private string setbgcolor; // 0xE0
		private int maxColors; // 0xE8
		private bool noGetPosition; // 0xEC
		private Hashtable keymap; // 0xF0
		private ByteMatcher rootmap; // 0xF8
		private int rl_startx; // 0x100
		private int rl_starty; // 0x104
		private byte[] control_characters; // 0x108
		private static readonly int[] _consoleColorToAnsiCode; // 0x18
		private char[] echobuf; // 0x110
		private int echon; // 0x118
	
		// Properties
		public bool Initialized { get; } // 0x00B0E9CC-0x00B0E9D4 
		public int WindowHeight { get; } // 0x00B0F3B4-0x00B0F3EC 
		public int WindowWidth { get; } // 0x00B0F37C-0x00B0F3B4 
	
		// Constructors
		public TermInfoDriver(string term); // 0x00B0E660-0x00B0E9CC
		static TermInfoDriver(); // 0x00B12870-0x00B139FC
	
		// Methods
		private static string TryTermInfoDir(string dir, string term); // 0x00B0E370-0x00B0E4B8
		private static string SearchTerminfo(string term); // 0x00B0E4B8-0x00B0E63C
		private void WriteConsole(string str); // 0x00B0E63C-0x00B0E660
		public void Init(); // 0x00B0E9D4-0x00B0F0A0
		private void IncrementX(); // 0x00B0F30C-0x00B0F37C
		public void WriteSpecialKey(ConsoleKeyInfo key); // 0x00B0F3EC-0x00B0F51C
		public void WriteSpecialKey(char c); // 0x00B0F6D8-0x00B0F70C
		public bool IsSpecialKey(ConsoleKeyInfo key); // 0x00B0F8A0-0x00B0F928
		public bool IsSpecialKey(char c); // 0x00B0F928-0x00B0F95C
		private void GetCursorPosition(); // 0x00B0F0A0-0x00B0F30C
		private void CheckWindowDimensions(); // 0x00B0FA64-0x00B0FBC0
		private void AddToBuffer(int b); // 0x00B0F95C-0x00B0FA64
		private void AdjustBuffer(); // 0x00B0FBC0-0x00B0FBD4
		private ConsoleKeyInfo CreateKeyInfoFromInt(int n, bool alt); // 0x00B0F70C-0x00B0F8A0
		private object GetKeyFromBuffer(bool cooked); // 0x00B0FBD4-0x00B0FECC
		private ConsoleKeyInfo ReadKeyInternal(out bool fresh); // 0x00B0FECC-0x00B100A0
		private bool InputPending(); // 0x00B1020C-0x00B1023C
		private void QueueEcho(char c); // 0x00B1023C-0x00B1033C
		private void Echo(ConsoleKeyInfo key); // 0x00B1033C-0x00B103A0
		private void EchoFlush(); // 0x00B103A0-0x00B103E0
		public int Read([In, Out] char[] dest, int index, int count); // 0x00B103E0-0x00B10718
		public ConsoleKeyInfo ReadKey(bool intercept); // 0x00B10718-0x00B10780
		public string ReadLine(); // 0x00B10780-0x00B10788
		public string ReadToEnd(); // 0x00B1097C-0x00B10984
		private string ReadUntilConditionInternal(bool haltOnNewLine); // 0x00B10788-0x00B1097C
		public void SetCursorPosition(int left, int top); // 0x00B0F51C-0x00B0F6D8
		private void CreateKeyMap(); // 0x00B10984-0x00B12810
		private void InitKeys(); // 0x00B100A0-0x00B1020C
		private void AddStringMapping(TermInfoStrings s); // 0x00B12810-0x00B12870
	}

	internal static class ParameterizedStrings // TypeDefIndex: 336
	{
		// Fields
		[ThreadStatic] // 0x004B8CA8-0x004B8CB8
		private static LowLevelStack _cachedStack; // 0x80000000
	
		// Nested types
		public struct FormatParam // TypeDefIndex: 337
		{
			// Fields
			private readonly int _int32; // 0x00
			private readonly string _string; // 0x08
	
			// Properties
			public int Int32 { get; } // 0x0058DBF0-0x0058DBF8 
			public string String { get; } // 0x0058DBF8-0x0058DC54 
			public object Object { get; } // 0x0058DC54-0x0058DCA0 
	
			// Constructors
			public FormatParam(int value); // 0x0058DBD8-0x0058DBE4
			private FormatParam(int intValue, string stringValue); // 0x0058DBE4-0x0058DBF0
	
			// Methods
			public static implicit operator FormatParam(int value); // 0x00BDDBD8-0x00BDDBE4
		}
	
		private sealed class LowLevelStack // TypeDefIndex: 338
		{
			// Fields
			private FormatParam[] _arr; // 0x10
			private int _count; // 0x18
	
			// Constructors
			public LowLevelStack(); // 0x00BDCDF4-0x00BDCE4C
	
			// Methods
			public FormatParam Pop(); // 0x00BDD734-0x00BDD8C8
			public void Push(FormatParam item); // 0x00BDDAE8-0x00BDDBD8
			public void Clear(); // 0x00BDCE4C-0x00BDCE80
		}
	
		// Methods
		public static string Evaluate(string format, params /* 0x004BD2A0-0x004BD2B0 */ FormatParam[] args); // 0x00BDCCB8-0x00BDCDF4
		private static string EvaluateInternal(string format, ref int pos, FormatParam[] args, LowLevelStack stack, ref FormatParam[] dynamicVars, ref FormatParam[] staticVars); // 0x00BDCE80-0x00BDD734
		private static bool AsBool(int i); // 0x00BDDD00-0x00BDDD0C
		private static int AsInt(bool b); // 0x00BDDCF8-0x00BDDD00
		private static string StringFromAsciiBytes(byte[] buffer, int offset, int length); // 0x00BDDD0C-0x00BDDE14
		private static unsafe extern int snprintf(byte* str, IntPtr size, string format, string arg1); // 0x00BDDE14-0x00BDDF04
		private static unsafe extern int snprintf(byte* str, IntPtr size, string format, int arg1); // 0x00BDDF04-0x00BDE2CC
		private static string FormatPrintF(string format, object arg); // 0x00BDD8C8-0x00BDDAE8
		private static FormatParam[] GetDynamicOrStaticVariables(char c, ref FormatParam[] dynamicVars, ref FormatParam[] staticVars, out int index); // 0x00BDDBE4-0x00BDDCF8
	}

	internal class ByteMatcher // TypeDefIndex: 339
	{
		// Fields
		private Hashtable map; // 0x10
		private Hashtable starts; // 0x18
	
		// Constructors
		public ByteMatcher(); // 0x00C150C0-0x00C1515C
	
		// Methods
		public void AddMapping(TermInfoStrings key, byte[] val); // 0x00C14AB4-0x00C14BD4
		public void Sort(); // 0x00C14BD4-0x00C14BD8
		public bool StartsWith(int c); // 0x00C14BD8-0x00C14C6C
		public TermInfoStrings Match(char[] buffer, int offset, int length, out int used); // 0x00C14C6C-0x00C150C0
	}

	internal enum TermInfoNumbers // TypeDefIndex: 340
	{
		Columns = 0,
		InitTabs = 1,
		Lines = 2,
		LinesOfMemory = 3,
		MagicCookieGlitch = 4,
		PaddingBaudRate = 5,
		VirtualTerminal = 6,
		WidthStatusLine = 7,
		NumLabels = 8,
		LabelHeight = 9,
		LabelWidth = 10,
		MaxAttributes = 11,
		MaximumWindows = 12,
		MaxColors = 13,
		MaxPairs = 14,
		NoColorVideo = 15,
		BufferCapacity = 16,
		DotVertSpacing = 17,
		DotHorzSpacing = 18,
		MaxMicroAddress = 19,
		MaxMicroJump = 20,
		MicroColSize = 21,
		MicroLineSize = 22,
		NumberOfPins = 23,
		OutputResChar = 24,
		OutputResLine = 25,
		OutputResHorzInch = 26,
		OutputResVertInch = 27,
		PrintRate = 28,
		WideCharSize = 29,
		Buttons = 30,
		BitImageEntwining = 31,
		BitImageType = 32,
		Last = 33
	}

	internal class TermInfoReader // TypeDefIndex: 341
	{
		// Fields
		private short boolSize; // 0x10
		private short numSize; // 0x12
		private short strOffsets; // 0x14
		private byte[] buffer; // 0x18
		private int booleansOffset; // 0x20
	
		// Constructors
		public TermInfoReader(string term, string filename); // 0x00CCD200-0x00CCD46C
		public TermInfoReader(string term, byte[] buffer); // 0x00CCD610-0x00CCD6D0
	
		// Methods
		private void ReadHeader(byte[] buffer, ref int position); // 0x00CCD46C-0x00CCD5D0
		private void ReadNames(byte[] buffer, ref int position); // 0x00CCD5D0-0x00CCD610
		public int Get(TermInfoNumbers number); // 0x00CCD7CC-0x00CCD830
		public string Get(TermInfoStrings tstr); // 0x00CCD830-0x00CCD8C8
		public byte[] GetStringBytes(TermInfoStrings tstr); // 0x00CCD8C8-0x00CCD960
		private short GetInt16(byte[] buffer, int offset); // 0x00CCD6D0-0x00CCD734
		private string GetString(byte[] buffer, int offset); // 0x00CCD734-0x00CCD7CC
		private byte[] GetStringBytes(byte[] buffer, int offset); // 0x00CCD960-0x00CCDA30
	}

	internal enum TermInfoStrings // TypeDefIndex: 342
	{
		BackTab = 0,
		Bell = 1,
		CarriageReturn = 2,
		ChangeScrollRegion = 3,
		ClearAllTabs = 4,
		ClearScreen = 5,
		ClrEol = 6,
		ClrEos = 7,
		ColumnAddress = 8,
		CommandCharacter = 9,
		CursorAddress = 10,
		CursorDown = 11,
		CursorHome = 12,
		CursorInvisible = 13,
		CursorLeft = 14,
		CursorMemAddress = 15,
		CursorNormal = 16,
		CursorRight = 17,
		CursorToLl = 18,
		CursorUp = 19,
		CursorVisible = 20,
		DeleteCharacter = 21,
		DeleteLine = 22,
		DisStatusLine = 23,
		DownHalfLine = 24,
		EnterAltCharsetMode = 25,
		EnterBlinkMode = 26,
		EnterBoldMode = 27,
		EnterCaMode = 28,
		EnterDeleteMode = 29,
		EnterDimMode = 30,
		EnterInsertMode = 31,
		EnterSecureMode = 32,
		EnterProtectedMode = 33,
		EnterReverseMode = 34,
		EnterStandoutMode = 35,
		EnterUnderlineMode = 36,
		EraseChars = 37,
		ExitAltCharsetMode = 38,
		ExitAttributeMode = 39,
		ExitCaMode = 40,
		ExitDeleteMode = 41,
		ExitInsertMode = 42,
		ExitStandoutMode = 43,
		ExitUnderlineMode = 44,
		FlashScreen = 45,
		FormFeed = 46,
		FromStatusLine = 47,
		Init1string = 48,
		Init2string = 49,
		Init3string = 50,
		InitFile = 51,
		InsertCharacter = 52,
		InsertLine = 53,
		InsertPadding = 54,
		KeyBackspace = 55,
		KeyCatab = 56,
		KeyClear = 57,
		KeyCtab = 58,
		KeyDc = 59,
		KeyDl = 60,
		KeyDown = 61,
		KeyEic = 62,
		KeyEol = 63,
		KeyEos = 64,
		KeyF0 = 65,
		KeyF1 = 66,
		KeyF10 = 67,
		KeyF2 = 68,
		KeyF3 = 69,
		KeyF4 = 70,
		KeyF5 = 71,
		KeyF6 = 72,
		KeyF7 = 73,
		KeyF8 = 74,
		KeyF9 = 75,
		KeyHome = 76,
		KeyIc = 77,
		KeyIl = 78,
		KeyLeft = 79,
		KeyLl = 80,
		KeyNpage = 81,
		KeyPpage = 82,
		KeyRight = 83,
		KeySf = 84,
		KeySr = 85,
		KeyStab = 86,
		KeyUp = 87,
		KeypadLocal = 88,
		KeypadXmit = 89,
		LabF0 = 90,
		LabF1 = 91,
		LabF10 = 92,
		LabF2 = 93,
		LabF3 = 94,
		LabF4 = 95,
		LabF5 = 96,
		LabF6 = 97,
		LabF7 = 98,
		LabF8 = 99,
		LabF9 = 100,
		MetaOff = 101,
		MetaOn = 102,
		Newline = 103,
		PadChar = 104,
		ParmDch = 105,
		ParmDeleteLine = 106,
		ParmDownCursor = 107,
		ParmIch = 108,
		ParmIndex = 109,
		ParmInsertLine = 110,
		ParmLeftCursor = 111,
		ParmRightCursor = 112,
		ParmRindex = 113,
		ParmUpCursor = 114,
		PkeyKey = 115,
		PkeyLocal = 116,
		PkeyXmit = 117,
		PrintScreen = 118,
		PrtrOff = 119,
		PrtrOn = 120,
		RepeatChar = 121,
		Reset1string = 122,
		Reset2string = 123,
		Reset3string = 124,
		ResetFile = 125,
		RestoreCursor = 126,
		RowAddress = 127,
		SaveCursor = 128,
		ScrollForward = 129,
		ScrollReverse = 130,
		SetAttributes = 131,
		SetTab = 132,
		SetWindow = 133,
		Tab = 134,
		ToStatusLine = 135,
		UnderlineChar = 136,
		UpHalfLine = 137,
		InitProg = 138,
		KeyA1 = 139,
		KeyA3 = 140,
		KeyB2 = 141,
		KeyC1 = 142,
		KeyC3 = 143,
		PrtrNon = 144,
		CharPadding = 145,
		AcsChars = 146,
		PlabNorm = 147,
		KeyBtab = 148,
		EnterXonMode = 149,
		ExitXonMode = 150,
		EnterAmMode = 151,
		ExitAmMode = 152,
		XonCharacter = 153,
		XoffCharacter = 154,
		EnaAcs = 155,
		LabelOn = 156,
		LabelOff = 157,
		KeyBeg = 158,
		KeyCancel = 159,
		KeyClose = 160,
		KeyCommand = 161,
		KeyCopy = 162,
		KeyCreate = 163,
		KeyEnd = 164,
		KeyEnter = 165,
		KeyExit = 166,
		KeyFind = 167,
		KeyHelp = 168,
		KeyMark = 169,
		KeyMessage = 170,
		KeyMove = 171,
		KeyNext = 172,
		KeyOpen = 173,
		KeyOptions = 174,
		KeyPrevious = 175,
		KeyPrint = 176,
		KeyRedo = 177,
		KeyReference = 178,
		KeyRefresh = 179,
		KeyReplace = 180,
		KeyRestart = 181,
		KeyResume = 182,
		KeySave = 183,
		KeySuspend = 184,
		KeyUndo = 185,
		KeySbeg = 186,
		KeyScancel = 187,
		KeyScommand = 188,
		KeyScopy = 189,
		KeyScreate = 190,
		KeySdc = 191,
		KeySdl = 192,
		KeySelect = 193,
		KeySend = 194,
		KeySeol = 195,
		KeySexit = 196,
		KeySfind = 197,
		KeyShelp = 198,
		KeyShome = 199,
		KeySic = 200,
		KeySleft = 201,
		KeySmessage = 202,
		KeySmove = 203,
		KeySnext = 204,
		KeySoptions = 205,
		KeySprevious = 206,
		KeySprint = 207,
		KeySredo = 208,
		KeySreplace = 209,
		KeySright = 210,
		KeySrsume = 211,
		KeySsave = 212,
		KeySsuspend = 213,
		KeySundo = 214,
		ReqForInput = 215,
		KeyF11 = 216,
		KeyF12 = 217,
		KeyF13 = 218,
		KeyF14 = 219,
		KeyF15 = 220,
		KeyF16 = 221,
		KeyF17 = 222,
		KeyF18 = 223,
		KeyF19 = 224,
		KeyF20 = 225,
		KeyF21 = 226,
		KeyF22 = 227,
		KeyF23 = 228,
		KeyF24 = 229,
		KeyF25 = 230,
		KeyF26 = 231,
		KeyF27 = 232,
		KeyF28 = 233,
		KeyF29 = 234,
		KeyF30 = 235,
		KeyF31 = 236,
		KeyF32 = 237,
		KeyF33 = 238,
		KeyF34 = 239,
		KeyF35 = 240,
		KeyF36 = 241,
		KeyF37 = 242,
		KeyF38 = 243,
		KeyF39 = 244,
		KeyF40 = 245,
		KeyF41 = 246,
		KeyF42 = 247,
		KeyF43 = 248,
		KeyF44 = 249,
		KeyF45 = 250,
		KeyF46 = 251,
		KeyF47 = 252,
		KeyF48 = 253,
		KeyF49 = 254,
		KeyF50 = 255,
		KeyF51 = 256,
		KeyF52 = 257,
		KeyF53 = 258,
		KeyF54 = 259,
		KeyF55 = 260,
		KeyF56 = 261,
		KeyF57 = 262,
		KeyF58 = 263,
		KeyF59 = 264,
		KeyF60 = 265,
		KeyF61 = 266,
		KeyF62 = 267,
		KeyF63 = 268,
		ClrBol = 269,
		ClearMargins = 270,
		SetLeftMargin = 271,
		SetRightMargin = 272,
		LabelFormat = 273,
		SetClock = 274,
		DisplayClock = 275,
		RemoveClock = 276,
		CreateWindow = 277,
		GotoWindow = 278,
		Hangup = 279,
		DialPhone = 280,
		QuickDial = 281,
		Tone = 282,
		Pulse = 283,
		FlashHook = 284,
		FixedPause = 285,
		WaitTone = 286,
		User0 = 287,
		User1 = 288,
		User2 = 289,
		User3 = 290,
		User4 = 291,
		User5 = 292,
		User6 = 293,
		User7 = 294,
		User8 = 295,
		User9 = 296,
		OrigPair = 297,
		OrigColors = 298,
		InitializeColor = 299,
		InitializePair = 300,
		SetColorPair = 301,
		SetForeground = 302,
		SetBackground = 303,
		ChangeCharPitch = 304,
		ChangeLinePitch = 305,
		ChangeResHorz = 306,
		ChangeResVert = 307,
		DefineChar = 308,
		EnterDoublewideMode = 309,
		EnterDraftQuality = 310,
		EnterItalicsMode = 311,
		EnterLeftwardMode = 312,
		EnterMicroMode = 313,
		EnterNearLetterQuality = 314,
		EnterNormalQuality = 315,
		EnterShadowMode = 316,
		EnterSubscriptMode = 317,
		EnterSuperscriptMode = 318,
		EnterUpwardMode = 319,
		ExitDoublewideMode = 320,
		ExitItalicsMode = 321,
		ExitLeftwardMode = 322,
		ExitMicroMode = 323,
		ExitShadowMode = 324,
		ExitSubscriptMode = 325,
		ExitSuperscriptMode = 326,
		ExitUpwardMode = 327,
		MicroColumnAddress = 328,
		MicroDown = 329,
		MicroLeft = 330,
		MicroRight = 331,
		MicroRowAddress = 332,
		MicroUp = 333,
		OrderOfPins = 334,
		ParmDownMicro = 335,
		ParmLeftMicro = 336,
		ParmRightMicro = 337,
		ParmUpMicro = 338,
		SelectCharSet = 339,
		SetBottomMargin = 340,
		SetBottomMarginParm = 341,
		SetLeftMarginParm = 342,
		SetRightMarginParm = 343,
		SetTopMargin = 344,
		SetTopMarginParm = 345,
		StartBitImage = 346,
		StartCharSetDef = 347,
		StopBitImage = 348,
		StopCharSetDef = 349,
		SubscriptCharacters = 350,
		SuperscriptCharacters = 351,
		TheseCauseCr = 352,
		ZeroMotion = 353,
		CharSetNames = 354,
		KeyMouse = 355,
		MouseInfo = 356,
		ReqMousePos = 357,
		GetMouse = 358,
		SetAForeground = 359,
		SetABackground = 360,
		PkeyPlab = 361,
		DeviceType = 362,
		CodeSetInit = 363,
		Set0DesSeq = 364,
		Set1DesSeq = 365,
		Set2DesSeq = 366,
		Set3DesSeq = 367,
		SetLrMargin = 368,
		SetTbMargin = 369,
		BitImageRepeat = 370,
		BitImageNewline = 371,
		BitImageCarriageReturn = 372,
		ColorNames = 373,
		DefineBitImageRegion = 374,
		EndBitImageRegion = 375,
		SetColorBand = 376,
		SetPageLength = 377,
		DisplayPcChar = 378,
		EnterPcCharsetMode = 379,
		ExitPcCharsetMode = 380,
		EnterScancodeMode = 381,
		ExitScancodeMode = 382,
		PcTermOptions = 383,
		ScancodeEscape = 384,
		AltScancodeEsc = 385,
		EnterHorizontalHlMode = 386,
		EnterLeftHlMode = 387,
		EnterLowHlMode = 388,
		EnterRightHlMode = 389,
		EnterTopHlMode = 390,
		EnterVerticalHlMode = 391,
		SetAAttributes = 392,
		SetPglenInch = 393,
		Last = 394
	}

	[Serializable]
	[ComVisible] // 0x004B351C-0x004B3530
	public abstract class TimeZone // TypeDefIndex: 343
	{
		// Fields
		[NonSerialized]
		private static object tz_lock; // 0x00
	
		// Constructors
		protected TimeZone(); // 0x00918570-0x00918578
		static TimeZone(); // 0x00918578-0x009185E4
	}

	[Serializable]
	internal class CurrentSystemTimeZone : TimeZone // TypeDefIndex: 344
	{
		// Fields
		private readonly TimeZoneInfo LocalTimeZone; // 0x10
	
		// Constructors
		internal CurrentSystemTimeZone(); // 0x00AC12A0-0x00AC1318
	
		// Methods
		public static bool GetTimeZoneData(int year, out long[] data, out string[] names, out bool daylight_inverted); // 0x00AC1318-0x00AC131C
	}

	internal class TimeType // TypeDefIndex: 345
	{
		// Fields
		public readonly int Offset; // 0x10
		public readonly bool IsDst; // 0x14
		public string Name; // 0x18
	
		// Constructors
		public TimeType(int offset, bool is_dst, string abbrev); // 0x0091834C-0x00918394
	
		// Methods
		public override string ToString(); // 0x00918394-0x00918570
	}

	[Serializable]
	[ComVisible] // 0x004B3530-0x004B3544
	public enum TypeCode // TypeDefIndex: 346
	{
		Empty = 0,
		Object = 1,
		DBNull = 2,
		Boolean = 3,
		Char = 4,
		SByte = 5,
		Byte = 6,
		Int16 = 7,
		UInt16 = 8,
		Int32 = 9,
		UInt32 = 10,
		Int64 = 11,
		UInt64 = 12,
		Single = 13,
		Double = 14,
		Decimal = 15,
		DateTime = 16,
		String = 18
	}

	internal interface TypeName : IEquatable<TypeName> // TypeDefIndex: 347
	{
		// Properties
		string DisplayName { get; }
	}

	internal interface TypeIdentifier : TypeName // TypeDefIndex: 348
	{
		// Properties
		string InternalName { get; }
	}

	internal class TypeNames // TypeDefIndex: 349
	{
		// Nested types
		internal abstract class ATypeName : TypeName // TypeDefIndex: 350
		{
			// Properties
			public abstract string DisplayName { get; }
	
			// Constructors
			protected ATypeName(); // 0x00E83824-0x00E8382C
	
			// Methods
			public bool Equals(TypeName other); // 0x00E84A98-0x00E84B84
			public override int GetHashCode(); // 0x00E84B84-0x00E84BB0
			public override bool Equals(object other); // 0x00E84BB0-0x00E84C18
		}
	}

	internal class TypeIdentifiers // TypeDefIndex: 351
	{
		// Nested types
		private class Display : TypeNames.ATypeName, TypeIdentifier // TypeDefIndex: 352
		{
			// Fields
			private string displayName; // 0x10
			private string internal_name; // 0x18
	
			// Properties
			public override string DisplayName { get; } // 0x00E8382C-0x00E83834 
			public string InternalName { get; } // 0x00E83834-0x00E83864 
	
			// Constructors
			internal Display(string displayName); // 0x00E837F8-0x00E83824
	
			// Methods
			private string GetInternalName(); // 0x00E83864-0x00E8386C
		}
	
		// Methods
		internal static TypeIdentifier FromDisplay(string displayName); // 0x00E83794-0x00E837F8
	}

	internal interface ModifierSpec // TypeDefIndex: 353
	{
		// Methods
		Type Resolve(Type type);
		StringBuilder Append(StringBuilder sb);
	}

	internal class ArraySpec : ModifierSpec // TypeDefIndex: 354
	{
		// Fields
		private int dimensions; // 0x10
		private bool bound; // 0x14
	
		// Constructors
		internal ArraySpec(int dimensions, bool bound); // 0x00C0F844-0x00C0F884
	
		// Methods
		public Type Resolve(Type type); // 0x00C0F884-0x00C0F8F4
		public StringBuilder Append(StringBuilder sb); // 0x00C0F8F4-0x00C0F9B0
		public override string ToString(); // 0x00C0F9B0-0x00C0FA28
	}

	internal class PointerSpec : ModifierSpec // TypeDefIndex: 355
	{
		// Fields
		private int pointer_level; // 0x10
	
		// Constructors
		internal PointerSpec(int pointer_level); // 0x00BDF460-0x00BDF468
	
		// Methods
		public Type Resolve(Type type); // 0x00BDF468-0x00BDF4C0
		public StringBuilder Append(StringBuilder sb); // 0x00BDF4C0-0x00BDF4EC
		public override string ToString(); // 0x00BDF4EC-0x00BDF564
	}

	internal class TypeSpec // TypeDefIndex: 356
	{
		// Fields
		private TypeIdentifier name; // 0x10
		private string assembly_name; // 0x18
		private List<TypeIdentifier> nested; // 0x20
		private List<TypeSpec> generic_params; // 0x28
		private List<ModifierSpec> modifier_spec; // 0x30
		private bool is_byref; // 0x38
		private string display_fullname; // 0x40
	
		// Properties
		internal bool HasModifiers { get; } // 0x00E84C18-0x00E84C28 
		internal string DisplayFullName { get; } // 0x00E85078-0x00E850AC 
	
		// Nested types
		[Flags] // 0x004B3544-0x004B3554
		internal enum DisplayNameFormat // TypeDefIndex: 357
		{
			Default = 0,
			WANT_ASSEMBLY = 1,
			NO_MODIFIERS = 2
		}
	
		// Constructors
		public TypeSpec(); // 0x00E86078-0x00E86080
	
		// Methods
		private string GetDisplayFullName(DisplayNameFormat flags); // 0x00E84C28-0x00E85078
		private StringBuilder GetModifierString(StringBuilder sb); // 0x00E850AC-0x00E85250
		internal static TypeSpec Parse(string typeName); // 0x00E841A0-0x00E8428C
		internal static string UnescapeInternalName(string displayName); // 0x00E8386C-0x00E8397C
		internal Type Resolve(Func<AssemblyName, Assembly> assemblyResolver, Func<Assembly, string, bool, Type> typeResolver, bool throwOnError, bool ignoreCase); // 0x00E8428C-0x00E84A98
		private void AddName(string type_name); // 0x00E85D84-0x00E85E5C
		private void AddModifier(ModifierSpec md); // 0x00E85E60-0x00E85EFC
		private static void SkipSpace(string name, ref int pos); // 0x00E85EFC-0x00E85FC8
		private static void BoundCheck(int idx, string s); // 0x00E85FC8-0x00E86078
		private static TypeIdentifier ParsedTypeIdentifier(string displayName); // 0x00E85E5C-0x00E85E60
		private static TypeSpec Parse(string name, ref int p, bool is_recurse, bool allow_aqn); // 0x00E85250-0x00E85D84
	}

	[Serializable]
	[CLSCompliant] // 0x004B3554-0x004B3594
	[ComVisible] // 0x004B3554-0x004B3594
	public struct UIntPtr : ISerializable // TypeDefIndex: 358
	{
		// Fields
		public static readonly UIntPtr Zero; // 0x00
		private unsafe void* _pointer; // 0x00
	
		// Properties
		public static int Size { get; } // 0x00E8869C-0x00E8874C 
	
		// Constructors
		public unsafe UIntPtr(uint value); // 0x005912A8-0x005912B4
		[CLSCompliant] // 0x004BB184-0x004BB198
		public unsafe UIntPtr(void* value); // 0x005912B4-0x005912BC
		static UIntPtr(); // 0x00E88760-0x00E88890
	
		// Methods
		public override bool Equals(object obj); // 0x005912BC-0x005912C4
		public override int GetHashCode(); // 0x005912C4-0x005912CC
		public override string ToString(); // 0x005912CC-0x005912D4
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x005912D4-0x00591318
		public static bool operator ==(UIntPtr value1, UIntPtr value2); // 0x00E8874C-0x00E88758
		public static explicit operator ulong(UIntPtr value); // 0x00E88758-0x00E8875C
		[CLSCompliant] // 0x004BB198-0x004BB1AC
		public static unsafe explicit operator UIntPtr(void* value); // 0x00E8875C-0x00E88760
	}

	[Serializable]
	[ComVisible] // 0x004B3594-0x004B35A8
	public abstract class ValueType // TypeDefIndex: 359
	{
		// Constructors
		protected ValueType(); // 0x00E89FAC-0x00E89FB4
	
		// Methods
		private static bool InternalEquals(object o1, object o2, out object[] fields); // 0x00E89FB4-0x00E89FB8
		internal static bool DefaultEquals(object o1, object o2); // 0x00E89FB8-0x00E8A198
		public override bool Equals(object obj); // 0x00E8A198-0x00E8A19C
		internal static int InternalGetHashCode(object o, out object[] fields); // 0x00E8A19C-0x00E8A1A0
		public override int GetHashCode(); // 0x00E8A1A0-0x00E8A23C
		public override string ToString(); // 0x00E8A23C-0x00E8A348
	}

	internal struct Variant // TypeDefIndex: 360
	{
		// Fields
		public short vt; // 0x00
		public ushort wReserved1; // 0x02
		public ushort wReserved2; // 0x04
		public ushort wReserved3; // 0x06
		public long llVal; // 0x08
		public int lVal; // 0x08
		public byte bVal; // 0x08
		public short iVal; // 0x08
		public float fltVal; // 0x08
		public double dblVal; // 0x08
		public short boolVal; // 0x08
		public IntPtr bstrVal; // 0x08
		public sbyte cVal; // 0x08
		public ushort uiVal; // 0x08
		public uint ulVal; // 0x08
		public ulong ullVal; // 0x08
		public int intVal; // 0x08
		public uint uintVal; // 0x08
		public IntPtr pdispVal; // 0x08
		public BRECORD bRecord; // 0x08
	
		// Methods
		public void Clear(); // 0x00591338-0x00591384
	}

	internal struct BRECORD // TypeDefIndex: 361
	{
		// Fields
		private IntPtr pvRecord; // 0x00
		private IntPtr pRecInfo; // 0x08
	}

	[Serializable]
	[ComVisible] // 0x004B35A8-0x004B35BC
	public struct Void // TypeDefIndex: 362
	{
	}

	[Serializable]
	[ComVisible] // 0x004B35BC-0x004B35D0
	public class WeakReference : ISerializable // TypeDefIndex: 363
	{
		// Fields
		private bool isLongReference; // 0x10
		private GCHandle gcHandle; // 0x14
	
		// Properties
		public virtual bool IsAlive { get; } // 0x00E8BBEC-0x00E8BC10 
		public virtual object Target { get; set; } // 0x00E8BC10-0x00E8BC54 0x00E8BC54-0x00E8BC60
		public virtual bool TrackResurrection { get; } // 0x00E8BC60-0x00E8BC68 
	
		// Constructors
		protected WeakReference(); // 0x00E8BA3C-0x00E8BA44
		public WeakReference(object target); // 0x00E8BA44-0x00E8BA84
		public WeakReference(object target, bool trackResurrection); // 0x00E8BA84-0x00E8BAD0
		protected WeakReference(SerializationInfo info, StreamingContext context); // 0x00E8BAD0-0x00E8BBEC
	
		// Methods
		private void AllocateHandle(object target); // 0x00E8BA08-0x00E8BA3C
		~WeakReference(); // 0x00E8BC68-0x00E8BCDC
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00E8BCDC-0x00E8BE5C
	}

	[Serializable]
	public sealed class WeakReference<T> : ISerializable // TypeDefIndex: 364
		where T : class
	{
		// Fields
		private GCHandle handle;
		private bool trackResurrection;
	
		// Constructors
		public WeakReference(T target);
		public WeakReference(T target, bool trackResurrection);
		private WeakReference(SerializationInfo info, StreamingContext context);
	
		// Methods
		public void GetObjectData(SerializationInfo info, StreamingContext context);
		public bool TryGetTarget(out T target);
		~WeakReference();
	}

	internal struct InputRecord // TypeDefIndex: 365
	{
		// Fields
		public short EventType; // 0x00
		public bool KeyDown; // 0x02
		public short RepeatCount; // 0x04
		public short VirtualKeyCode; // 0x06
		public short VirtualScanCode; // 0x08
		public char Character; // 0x0A
		public int ControlKeyState; // 0x0C
		private int pad1; // 0x10
		private bool pad2; // 0x14
	}

	internal struct Coord // TypeDefIndex: 366
	{
		// Fields
		public short X; // 0x00
		public short Y; // 0x02
	}

	internal struct SmallRect // TypeDefIndex: 367
	{
		// Fields
		public short Left; // 0x00
		public short Top; // 0x02
		public short Right; // 0x04
		public short Bottom; // 0x06
	}

	internal struct ConsoleScreenBufferInfo // TypeDefIndex: 368
	{
		// Fields
		public Coord Size; // 0x00
		public Coord CursorPosition; // 0x04
		public short Attribute; // 0x08
		public SmallRect Window; // 0x0A
		public Coord MaxWindowSize; // 0x12
	}

	internal enum Handles // TypeDefIndex: 369
	{
		STD_ERROR = -12,
		STD_OUTPUT = -11,
		STD_INPUT = -10
	}

	internal class WindowsConsoleDriver : IConsoleDriver // TypeDefIndex: 370
	{
		// Fields
		private IntPtr inputHandle; // 0x10
		private IntPtr outputHandle; // 0x18
		private short defaultAttribute; // 0x20
	
		// Constructors
		public WindowsConsoleDriver(); // 0x00E8BE5C-0x00E8BEBC
	
		// Methods
		public ConsoleKeyInfo ReadKey(bool intercept); // 0x00E8C014-0x00E8C190
		private static bool IsModifierKey(short virtualKeyCode); // 0x00E8C298-0x00E8C2CC
		private static extern IntPtr GetStdHandle(Handles handle); // 0x00E8BEBC-0x00E8BF5C
		private static extern bool GetConsoleScreenBufferInfo(IntPtr handle, out ConsoleScreenBufferInfo info); // 0x00E8BF5C-0x00E8C014
		private static extern bool ReadConsoleInput(IntPtr handle, out InputRecord record, int length, out int nread); // 0x00E8C190-0x00E8C298
	}

	internal class __ComObject // TypeDefIndex: 371
	{
		// Constructors
		private __ComObject(); // 0x00E8C2CC-0x00E8CFF4
	}
}

namespace System.Configuration.Assemblies
{
	[Serializable]
	[ComVisible] // 0x004B35D0-0x004B35E4
	public enum AssemblyHashAlgorithm // TypeDefIndex: 372
	{
		None = 0,
		MD5 = 32771,
		SHA1 = 32772,
		SHA256 = 32780,
		SHA384 = 32781,
		SHA512 = 32782
	}

	[Serializable]
	[ComVisible] // 0x004B35E4-0x004B35F8
	public enum AssemblyVersionCompatibility // TypeDefIndex: 373
	{
		SameMachine = 1,
		SameProcess = 2,
		SameDomain = 3
	}
}

namespace System.Text
{
	[Serializable]
	[ComVisible] // 0x004B35F8-0x004B360C
	public class ASCIIEncoding : Encoding // TypeDefIndex: 374
	{
		// Constructors
		public ASCIIEncoding(); // 0x00CCDACC-0x00CCDAD4
	
		// Methods
		internal override void SetDefaultFallbacks(); // 0x00CCDB88-0x00CCDBB4
		public override int GetByteCount(char[] chars, int index, int count); // 0x00CCDE44-0x00CCE020
		public override int GetByteCount(string chars); // 0x00CCE020-0x00CCE0D4
		[CLSCompliant] // 0x004BB1AC-0x004BB1EC
		[ComVisible] // 0x004BB1AC-0x004BB1EC
		public override unsafe int GetByteCount(char* chars, int count); // 0x00CCE0D4-0x00CCE1F4
		public override int GetBytes(string chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00CCE1F4-0x00CCE470
		public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00CCE470-0x00CCE71C
		[CLSCompliant] // 0x004BB1EC-0x004BB22C
		[ComVisible] // 0x004BB1EC-0x004BB22C
		public override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount); // 0x00CCE71C-0x00CCE884
		public override int GetCharCount(byte[] bytes, int index, int count); // 0x00CCE884-0x00CCEA60
		[CLSCompliant] // 0x004BB22C-0x004BB26C
		[ComVisible] // 0x004BB22C-0x004BB26C
		public override unsafe int GetCharCount(byte* bytes, int count); // 0x00CCEA60-0x00CCEB80
		public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x00CCEB80-0x00CCEE2C
		[CLSCompliant] // 0x004BB26C-0x004BB2AC
		[ComVisible] // 0x004BB26C-0x004BB2AC
		public override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount); // 0x00CCEE2C-0x00CCEF94
		public override string GetString(byte[] bytes, int byteIndex, int byteCount); // 0x00CCEF94-0x00CCF174
		internal override unsafe int GetByteCount(char* chars, int charCount, EncoderNLS encoder); // 0x00CCF174-0x00CCF4F0
		internal override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS encoder); // 0x00CCF5A4-0x00CCFA48
		internal override unsafe int GetCharCount(byte* bytes, int count, DecoderNLS decoder); // 0x00CCFACC-0x00CCFC34
		internal override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS decoder); // 0x00CCFC84-0x00CCFF3C
		public override int GetMaxByteCount(int charCount); // 0x00CCFFC8-0x00CD00D8
		public override int GetMaxCharCount(int byteCount); // 0x00CD00D8-0x00CD01E4
		[ComVisible] // 0x004BB2AC-0x004BB2C0
		public override Decoder GetDecoder(); // 0x00CD01E4-0x00CD0244
		[ComVisible] // 0x004BB2C0-0x004BB2D4
		public override Encoder GetEncoder(); // 0x00CD0290-0x00CD02F0
	}

	[Serializable]
	[ComVisible] // 0x004B360C-0x004B3620
	public abstract class Decoder // TypeDefIndex: 375
	{
		// Fields
		internal DecoderFallback m_fallback; // 0x10
		[NonSerialized]
		internal DecoderFallbackBuffer m_fallbackBuffer; // 0x18
	
		// Properties
		[ComVisible] // 0x004BD3F0-0x004BD404
		public DecoderFallback Fallback { get; } // 0x00CD03B4-0x00CD03BC 
		[ComVisible] // 0x004BD404-0x004BD418
		public DecoderFallbackBuffer FallbackBuffer { get; } // 0x00CCFC34-0x00CCFC7C 
		internal bool InternalHasFallbackBuffer { get; } // 0x00CD03BC-0x00CD03CC 
	
		// Constructors
		protected Decoder(); // 0x00CD03AC-0x00CD03B4
	
		// Methods
		internal void SerializeDecoder(SerializationInfo info); // 0x00CD033C-0x00CD03AC
		[ComVisible] // 0x004BB2D4-0x004BB2E8
		public virtual void Reset(); // 0x00CD03CC-0x00CD04A0
		public abstract int GetCharCount(byte[] bytes, int index, int count);
		[ComVisible] // 0x004BB2E8-0x004BB2FC
		public virtual int GetCharCount(byte[] bytes, int index, int count, bool flush); // 0x00CD04A0-0x00CD04AC
		[CLSCompliant] // 0x004BB2FC-0x004BB33C
		[ComVisible] // 0x004BB2FC-0x004BB33C
		public virtual unsafe int GetCharCount(byte* bytes, int count, bool flush); // 0x00CD04AC-0x00CD062C
		public abstract int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
		public virtual int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush); // 0x00CD062C-0x00CD0638
		[CLSCompliant] // 0x004BB33C-0x004BB37C
		[ComVisible] // 0x004BB33C-0x004BB37C
		public virtual unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount, bool flush); // 0x00CD0638-0x00CD0870
	}

	[Serializable]
	internal sealed class InternalDecoderBestFitFallback : DecoderFallback // TypeDefIndex: 376
	{
		// Fields
		internal Encoding encoding; // 0x18
		internal char[] arrayBestFit; // 0x20
		internal char cReplacement; // 0x28
	
		// Properties
		public override int MaxCharCount { get; } // 0x00CDA8E8-0x00CDA8F0 
	
		// Constructors
		internal InternalDecoderBestFitFallback(Encoding encoding); // 0x00CD4A50-0x00CD4A8C
	
		// Methods
		public override DecoderFallbackBuffer CreateFallbackBuffer(); // 0x00CDA770-0x00CDA7D0
		public override bool Equals(object value); // 0x00CDA8F0-0x00CDA9B0
		public override int GetHashCode(); // 0x00CDA9B0-0x00CDA9D4
	}

	internal sealed class InternalDecoderBestFitFallbackBuffer : DecoderFallbackBuffer // TypeDefIndex: 377
	{
		// Fields
		internal char cBestFit; // 0x20
		internal int iCount; // 0x24
		internal int iSize; // 0x28
		private InternalDecoderBestFitFallback oFallback; // 0x30
		private static object s_InternalSyncObject; // 0x00
	
		// Properties
		private static object InternalSyncObject { get; } // 0x00CDA9D4-0x00CDAA64 
	
		// Constructors
		public InternalDecoderBestFitFallbackBuffer(InternalDecoderBestFitFallback fallback); // 0x00CDA7D0-0x00CDA8E8
	
		// Methods
		public override bool Fallback(byte[] bytesUnknown, int index); // 0x00CDAA64-0x00CDAAB4
		public override char GetNextChar(); // 0x00CDAC14-0x00CDAC54
		public override void Reset(); // 0x00CDAC54-0x00CDAC64
		internal override unsafe int InternalFallback(byte[] bytes, byte* pBytes); // 0x00CDAC64-0x00CDAC6C
		private char TryBestFit(byte[] bytesCheck); // 0x00CDAAB4-0x00CDAC14
	}

	[Serializable]
	public sealed class DecoderExceptionFallback : DecoderFallback // TypeDefIndex: 378
	{
		// Properties
		public override int MaxCharCount { get; } // 0x00CD08E4-0x00CD08EC 
	
		// Constructors
		public DecoderExceptionFallback(); // 0x00CD0870-0x00CD0878
	
		// Methods
		public override DecoderFallbackBuffer CreateFallbackBuffer(); // 0x00CD0880-0x00CD08DC
		public override bool Equals(object value); // 0x00CD08EC-0x00CD0950
		public override int GetHashCode(); // 0x00CD0950-0x00CD0958
	}

	public sealed class DecoderExceptionFallbackBuffer : DecoderFallbackBuffer // TypeDefIndex: 379
	{
		// Constructors
		public DecoderExceptionFallbackBuffer(); // 0x00CD08DC-0x00CD08E4
	
		// Methods
		public override bool Fallback(byte[] bytesUnknown, int index); // 0x00CD0958-0x00CD0964
		public override char GetNextChar(); // 0x00CD0B98-0x00CD0BA0
		private void Throw(byte[] bytesUnknown, int index); // 0x00CD0964-0x00CD0B98
	}

	[Serializable]
	public sealed class DecoderFallbackException : ArgumentException // TypeDefIndex: 380
	{
		// Fields
		private byte[] bytesUnknown; // 0x90
		private int index; // 0x98
	
		// Constructors
		public DecoderFallbackException(); // 0x00CD1558-0x00CD15CC
		internal DecoderFallbackException(SerializationInfo info, StreamingContext context); // 0x00CD15CC-0x00CD15D4
		public DecoderFallbackException(string message, byte[] bytesUnknown, int index); // 0x00CD0D20-0x00CD0D5C
	}

	[Serializable]
	public abstract class DecoderFallback // TypeDefIndex: 381
	{
		// Fields
		internal bool bIsMicrosoftBestFitFallback; // 0x10
		private static DecoderFallback replacementFallback; // 0x00
		private static DecoderFallback exceptionFallback; // 0x08
		private static object s_InternalSyncObject; // 0x10
	
		// Properties
		private static object InternalSyncObject { get; } // 0x00CD0D64-0x00CD0DF8 
		public static DecoderFallback ReplacementFallback { get; } // 0x00CCDCFC-0x00CCDE44 
		public static DecoderFallback ExceptionFallback { get; } // 0x00CD0E48-0x00CD0F94 
		public abstract int MaxCharCount { get; }
	
		// Constructors
		protected DecoderFallback(); // 0x00CD0878-0x00CD0880
	
		// Methods
		public abstract DecoderFallbackBuffer CreateFallbackBuffer();
	}

	public abstract class DecoderFallbackBuffer // TypeDefIndex: 382
	{
		// Fields
		internal unsafe byte* byteStart; // 0x10
		internal unsafe char* charEnd; // 0x18
	
		// Constructors
		protected DecoderFallbackBuffer(); // 0x00CD0D5C-0x00CD0D64
	
		// Methods
		public abstract bool Fallback(byte[] bytesUnknown, int index);
		public abstract char GetNextChar();
		public virtual void Reset(); // 0x00CD0F94-0x00CD0FC8
		internal void InternalReset(); // 0x00CCFFB8-0x00CCFFC8
		internal unsafe void InternalInitialize(byte* byteStart, char* charEnd); // 0x00CCFC7C-0x00CCFC84
		internal virtual unsafe bool InternalFallback(byte[] bytes, byte* pBytes, ref char* chars); // 0x00CD0FC8-0x00CD117C
		internal virtual unsafe int InternalFallback(byte[] bytes, byte* pBytes); // 0x00CD117C-0x00CD1318
		internal void ThrowLastBytesRecursive(byte[] bytesUnknown); // 0x00CD1318-0x00CD154C
	}

	[Serializable]
	internal class DecoderNLS : Decoder, ISerializable // TypeDefIndex: 383
	{
		// Fields
		protected Encoding m_encoding; // 0x20
		[NonSerialized]
		protected bool m_mustFlush; // 0x28
		[NonSerialized]
		internal bool m_throwOnOverflow; // 0x29
		[NonSerialized]
		internal int m_bytesUsed; // 0x2C
	
		// Properties
		public bool MustFlush { get; } // 0x00CD1F58-0x00CD1F60 
		internal virtual bool HasState { get; } // 0x00CD1F60-0x00CD1F68 
	
		// Constructors
		internal DecoderNLS(SerializationInfo info, StreamingContext context); // 0x00CD15D4-0x00CD16C0
		internal DecoderNLS(Encoding encoding); // 0x00CD0244-0x00CD0290
		internal DecoderNLS(); // 0x00CD1784-0x00CD17B8
	
		// Methods
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00CD16C0-0x00CD1784
		public override void Reset(); // 0x00CD17B8-0x00CD17D0
		public override int GetCharCount(byte[] bytes, int index, int count); // 0x00CD17D0-0x00CD17E0
		public override int GetCharCount(byte[] bytes, int index, int count, bool flush); // 0x00CD17E0-0x00CD19C8
		public override unsafe int GetCharCount(byte* bytes, int count, bool flush); // 0x00CD19C8-0x00CD1B0C
		public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x00CD1B0C-0x00CD1B1C
		public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush); // 0x00CD1B1C-0x00CD1DCC
		public override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount, bool flush); // 0x00CD1DCC-0x00CD1F58
		internal void ClearMustFlush(); // 0x00CD1F68-0x00CD1F70
	}

	[Serializable]
	public sealed class DecoderReplacementFallback : DecoderFallback // TypeDefIndex: 384
	{
		// Fields
		private string strDefault; // 0x18
	
		// Properties
		public string DefaultString { get; } // 0x00CD2158-0x00CD2160 
		public override int MaxCharCount { get; } // 0x00CD2204-0x00CD2224 
	
		// Constructors
		public DecoderReplacementFallback(); // 0x00CD0DF8-0x00CD0E48
		public DecoderReplacementFallback(string replacement); // 0x00CD1F70-0x00CD2158
	
		// Methods
		public override DecoderFallbackBuffer CreateFallbackBuffer(); // 0x00CD2160-0x00CD21C0
		public override bool Equals(object value); // 0x00CD2224-0x00CD22BC
		public override int GetHashCode(); // 0x00CD22BC-0x00CD22DC
	}

	public sealed class DecoderReplacementFallbackBuffer : DecoderFallbackBuffer // TypeDefIndex: 385
	{
		// Fields
		private string strDefault; // 0x20
		private int fallbackCount; // 0x28
		private int fallbackIndex; // 0x2C
	
		// Constructors
		public DecoderReplacementFallbackBuffer(DecoderReplacementFallback fallback); // 0x00CD21C0-0x00CD2204
	
		// Methods
		public override bool Fallback(byte[] bytesUnknown, int index); // 0x00CD22DC-0x00CD2328
		public override char GetNextChar(); // 0x00CD2328-0x00CD2374
		public override void Reset(); // 0x00CD2374-0x00CD2384
		internal override unsafe int InternalFallback(byte[] bytes, byte* pBytes); // 0x00CD2384-0x00CD23A4
	}

	[Serializable]
	[ComVisible] // 0x004B3620-0x004B3634
	public abstract class Encoder // TypeDefIndex: 386
	{
		// Fields
		internal EncoderFallback m_fallback; // 0x10
		[NonSerialized]
		internal EncoderFallbackBuffer m_fallbackBuffer; // 0x18
	
		// Properties
		[ComVisible] // 0x004BD418-0x004BD42C
		public EncoderFallback Fallback { get; } // 0x00CD241C-0x00CD2424 
		[ComVisible] // 0x004BD42C-0x004BD440
		public EncoderFallbackBuffer FallbackBuffer { get; } // 0x00CCF500-0x00CCF548 
		internal bool InternalHasFallbackBuffer { get; } // 0x00CCF4F0-0x00CCF500 
	
		// Constructors
		protected Encoder(); // 0x00CD2414-0x00CD241C
	
		// Methods
		internal void SerializeEncoder(SerializationInfo info); // 0x00CD23A4-0x00CD2414
		[ComVisible] // 0x004BB37C-0x004BB390
		public virtual void Reset(); // 0x00CD2424-0x00CD24F8
		public abstract int GetByteCount(char[] chars, int index, int count, bool flush);
		[CLSCompliant] // 0x004BB390-0x004BB3D0
		[ComVisible] // 0x004BB390-0x004BB3D0
		public virtual unsafe int GetByteCount(char* chars, int count, bool flush); // 0x00CD24F8-0x00CD2688
		public abstract int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush);
		[CLSCompliant] // 0x004BB3D0-0x004BB410
		[ComVisible] // 0x004BB3D0-0x004BB410
		public virtual unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, bool flush); // 0x00CD2688-0x00CD28C0
	}

	[Serializable]
	internal class InternalEncoderBestFitFallback : EncoderFallback // TypeDefIndex: 387
	{
		// Fields
		internal Encoding encoding; // 0x18
		internal char[] arrayBestFit; // 0x20
	
		// Properties
		public override int MaxCharCount { get; } // 0x00CDADE4-0x00CDADEC 
	
		// Constructors
		internal InternalEncoderBestFitFallback(Encoding encoding); // 0x00CD4A1C-0x00CD4A50
	
		// Methods
		public override EncoderFallbackBuffer CreateFallbackBuffer(); // 0x00CDAC6C-0x00CDACCC
		public override bool Equals(object value); // 0x00CDADEC-0x00CDAEC8
		public override int GetHashCode(); // 0x00CDAEC8-0x00CDAEEC
	}

	internal sealed class InternalEncoderBestFitFallbackBuffer : EncoderFallbackBuffer // TypeDefIndex: 388
	{
		// Fields
		private char cBestFit; // 0x30
		private InternalEncoderBestFitFallback oFallback; // 0x38
		private int iCount; // 0x40
		private int iSize; // 0x44
		private static object s_InternalSyncObject; // 0x00
	
		// Properties
		private static object InternalSyncObject { get; } // 0x00CDAEEC-0x00CDAF7C 
		public override int Remaining { get; } // 0x00CDB3A8-0x00CDB3B4 
	
		// Constructors
		public InternalEncoderBestFitFallbackBuffer(InternalEncoderBestFitFallback fallback); // 0x00CDACCC-0x00CDADE4
	
		// Methods
		public override bool Fallback(char charUnknown, int index); // 0x00CDAF7C-0x00CDAFB8
		public override bool Fallback(char charUnknownHigh, char charUnknownLow, int index); // 0x00CDB098-0x00CDB33C
		public override char GetNextChar(); // 0x00CDB33C-0x00CDB37C
		public override bool MovePrevious(); // 0x00CDB37C-0x00CDB3A8
		public override void Reset(); // 0x00CDB3B4-0x00CDB3C8
		private char TryBestFit(char cUnknown); // 0x00CDAFB8-0x00CDB098
	}

	[Serializable]
	public sealed class EncoderExceptionFallback : EncoderFallback // TypeDefIndex: 389
	{
		// Properties
		public override int MaxCharCount { get; } // 0x00CD2934-0x00CD293C 
	
		// Constructors
		public EncoderExceptionFallback(); // 0x00CD28C0-0x00CD28C8
	
		// Methods
		public override EncoderFallbackBuffer CreateFallbackBuffer(); // 0x00CD28D0-0x00CD292C
		public override bool Equals(object value); // 0x00CD293C-0x00CD29A0
		public override int GetHashCode(); // 0x00CD29A0-0x00CD29A8
	}

	public sealed class EncoderExceptionFallbackBuffer : EncoderFallbackBuffer // TypeDefIndex: 390
	{
		// Properties
		public override int Remaining { get; } // 0x00CD319C-0x00CD31A4 
	
		// Constructors
		public EncoderExceptionFallbackBuffer(); // 0x00CD292C-0x00CD2934
	
		// Methods
		public override bool Fallback(char charUnknown, int index); // 0x00CD29B0-0x00CD2AEC
		public override bool Fallback(char charUnknownHigh, char charUnknownLow, int index); // 0x00CD2B28-0x00CD2ED0
		public override char GetNextChar(); // 0x00CD318C-0x00CD3194
		public override bool MovePrevious(); // 0x00CD3194-0x00CD319C
	}

	[Serializable]
	public sealed class EncoderFallbackException : ArgumentException // TypeDefIndex: 391
	{
		// Fields
		private char charUnknown; // 0x90
		private char charUnknownHigh; // 0x92
		private char charUnknownLow; // 0x94
		private int index; // 0x98
	
		// Constructors
		public EncoderFallbackException(); // 0x00CD36E8-0x00CD375C
		internal EncoderFallbackException(SerializationInfo info, StreamingContext context); // 0x00CD375C-0x00CD3764
		internal EncoderFallbackException(string message, char charUnknown, int index); // 0x00CD2AEC-0x00CD2B28
		internal EncoderFallbackException(string message, char charUnknownHigh, char charUnknownLow, int index); // 0x00CD2ED0-0x00CD318C
	}

	[Serializable]
	public abstract class EncoderFallback // TypeDefIndex: 392
	{
		// Fields
		internal bool bIsMicrosoftBestFitFallback; // 0x10
		private static EncoderFallback replacementFallback; // 0x00
		private static EncoderFallback exceptionFallback; // 0x08
		private static object s_InternalSyncObject; // 0x10
	
		// Properties
		private static object InternalSyncObject { get; } // 0x00CD31A4-0x00CD3238 
		public static EncoderFallback ReplacementFallback { get; } // 0x00CCDBB4-0x00CCDCFC 
		public static EncoderFallback ExceptionFallback { get; } // 0x00CD3288-0x00CD33D4 
		public abstract int MaxCharCount { get; }
	
		// Constructors
		protected EncoderFallback(); // 0x00CD28C8-0x00CD28D0
	
		// Methods
		public abstract EncoderFallbackBuffer CreateFallbackBuffer();
	}

	public abstract class EncoderFallbackBuffer // TypeDefIndex: 393
	{
		// Fields
		internal unsafe char* charStart; // 0x10
		internal unsafe char* charEnd; // 0x18
		internal EncoderNLS encoder; // 0x20
		internal bool setEncoder; // 0x28
		internal bool bUsedEncoder; // 0x29
		internal bool bFallingBack; // 0x2A
		internal int iRecursionCount; // 0x2C
	
		// Properties
		public abstract int Remaining { get; }
	
		// Constructors
		protected EncoderFallbackBuffer(); // 0x00CD29A8-0x00CD29B0
	
		// Methods
		public abstract bool Fallback(char charUnknown, int index);
		public abstract bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
		public abstract char GetNextChar();
		public abstract bool MovePrevious();
		public virtual void Reset(); // 0x00CD33D4-0x00CD3408
		internal void InternalReset(); // 0x00CD3408-0x00CD3420
		internal unsafe void InternalInitialize(char* charStart, char* charEnd, EncoderNLS encoder, bool setEncoder); // 0x00CCF548-0x00CCF564
		internal char InternalGetNextChar(); // 0x00CCF564-0x00CCF5A4
		internal virtual unsafe bool InternalFallback(char ch, ref char* chars); // 0x00CD3420-0x00CD35F0
		internal void ThrowLastCharRecursive(int charRecursive); // 0x00CD35F0-0x00CD36E8
	}

	[Serializable]
	internal class EncoderNLS : Encoder, ISerializable // TypeDefIndex: 394
	{
		// Fields
		internal char charLeftOver; // 0x20
		protected Encoding m_encoding; // 0x28
		[NonSerialized]
		protected bool m_mustFlush; // 0x30
		[NonSerialized]
		internal bool m_throwOnOverflow; // 0x31
		[NonSerialized]
		internal int m_charsUsed; // 0x34
	
		// Properties
		public Encoding Encoding { get; } // 0x00CD40EC-0x00CD40F4 
		public bool MustFlush { get; } // 0x00CD40F4-0x00CD40FC 
	
		// Constructors
		internal EncoderNLS(SerializationInfo info, StreamingContext context); // 0x00CD3764-0x00CD3850
		internal EncoderNLS(Encoding encoding); // 0x00CD02F0-0x00CD033C
		internal EncoderNLS(); // 0x00CD3930-0x00CD3964
	
		// Methods
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00CD3850-0x00CD3930
		public override void Reset(); // 0x00CD3964-0x00CD3984
		public override int GetByteCount(char[] chars, int index, int count, bool flush); // 0x00CD3984-0x00CD3B6C
		public override unsafe int GetByteCount(char* chars, int count, bool flush); // 0x00CD3B6C-0x00CD3CB0
		public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush); // 0x00CD3CB0-0x00CD3F60
		public override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, bool flush); // 0x00CD3F60-0x00CD40EC
		internal void ClearMustFlush(); // 0x00CD40FC-0x00CD4104
	}

	[Serializable]
	public sealed class EncoderReplacementFallback : EncoderFallback // TypeDefIndex: 395
	{
		// Fields
		private string strDefault; // 0x18
	
		// Properties
		public string DefaultString { get; } // 0x00CD42EC-0x00CD42F4 
		public override int MaxCharCount { get; } // 0x00CD43A4-0x00CD43C4 
	
		// Constructors
		public EncoderReplacementFallback(); // 0x00CD3238-0x00CD3288
		public EncoderReplacementFallback(string replacement); // 0x00CD4104-0x00CD42EC
	
		// Methods
		public override EncoderFallbackBuffer CreateFallbackBuffer(); // 0x00CD42F4-0x00CD4354
		public override bool Equals(object value); // 0x00CD43C4-0x00CD445C
		public override int GetHashCode(); // 0x00CD445C-0x00CD447C
	}

	public sealed class EncoderReplacementFallbackBuffer : EncoderFallbackBuffer // TypeDefIndex: 396
	{
		// Fields
		private string strDefault; // 0x30
		private int fallbackCount; // 0x38
		private int fallbackIndex; // 0x3C
	
		// Properties
		public override int Remaining { get; } // 0x00CD4950-0x00CD495C 
	
		// Constructors
		public EncoderReplacementFallbackBuffer(EncoderReplacementFallback fallback); // 0x00CD4354-0x00CD43A4
	
		// Methods
		public override bool Fallback(char charUnknown, int index); // 0x00CD447C-0x00CD45E4
		public override bool Fallback(char charUnknownHigh, char charUnknownLow, int index); // 0x00CD45E4-0x00CD48D4
		public override char GetNextChar(); // 0x00CD48D4-0x00CD4920
		public override bool MovePrevious(); // 0x00CD4920-0x00CD4950
		public override void Reset(); // 0x00CD495C-0x00CD4970
	}

	[Serializable]
	[ComVisible] // 0x004B3634-0x004B3648
	public abstract class Encoding : ICloneable // TypeDefIndex: 397
	{
		// Fields
		private static Encoding defaultEncoding; // 0x00
		private static Encoding unicodeEncoding; // 0x08
		private static Encoding bigEndianUnicode; // 0x10
		private static Encoding utf7Encoding; // 0x18
		private static Encoding utf8Encoding; // 0x20
		private static Encoding utf32Encoding; // 0x28
		private static Encoding asciiEncoding; // 0x30
		private static Encoding latin1Encoding; // 0x38
		private static Hashtable encodings; // 0x40
		private const int MIMECONTF_MAILNEWS = 1; // Metadata: 0x001E0413
		private const int MIMECONTF_BROWSER = 2; // Metadata: 0x001E0417
		private const int MIMECONTF_SAVABLE_MAILNEWS = 256; // Metadata: 0x001E041B
		private const int MIMECONTF_SAVABLE_BROWSER = 512; // Metadata: 0x001E041F
		private const int CodePageDefault = 0; // Metadata: 0x001E0423
		private const int CodePageNoOEM = 1; // Metadata: 0x001E0427
		private const int CodePageNoMac = 2; // Metadata: 0x001E042B
		private const int CodePageNoThread = 3; // Metadata: 0x001E042F
		private const int CodePageNoSymbol = 42; // Metadata: 0x001E0433
		private const int CodePageUnicode = 1200; // Metadata: 0x001E0437
		private const int CodePageBigEndian = 1201; // Metadata: 0x001E043B
		private const int CodePageWindows1252 = 1252; // Metadata: 0x001E043F
		private const int CodePageMacGB2312 = 10008; // Metadata: 0x001E0443
		private const int CodePageGB2312 = 20936; // Metadata: 0x001E0447
		private const int CodePageMacKorean = 10003; // Metadata: 0x001E044B
		private const int CodePageDLLKorean = 20949; // Metadata: 0x001E044F
		private const int ISO2022JP = 50220; // Metadata: 0x001E0453
		private const int ISO2022JPESC = 50221; // Metadata: 0x001E0457
		private const int ISO2022JPSISO = 50222; // Metadata: 0x001E045B
		private const int ISOKorean = 50225; // Metadata: 0x001E045F
		private const int ISOSimplifiedCN = 50227; // Metadata: 0x001E0463
		private const int EUCJP = 51932; // Metadata: 0x001E0467
		private const int ChineseHZ = 52936; // Metadata: 0x001E046B
		private const int DuplicateEUCCN = 51936; // Metadata: 0x001E046F
		private const int EUCCN = 936; // Metadata: 0x001E0473
		private const int EUCKR = 51949; // Metadata: 0x001E0477
		internal const int CodePageASCII = 20127; // Metadata: 0x001E047B
		internal const int ISO_8859_1 = 28591; // Metadata: 0x001E047F
		private const int ISCIIAssemese = 57006; // Metadata: 0x001E0483
		private const int ISCIIBengali = 57003; // Metadata: 0x001E0487
		private const int ISCIIDevanagari = 57002; // Metadata: 0x001E048B
		private const int ISCIIGujarathi = 57010; // Metadata: 0x001E048F
		private const int ISCIIKannada = 57008; // Metadata: 0x001E0493
		private const int ISCIIMalayalam = 57009; // Metadata: 0x001E0497
		private const int ISCIIOriya = 57007; // Metadata: 0x001E049B
		private const int ISCIIPanjabi = 57011; // Metadata: 0x001E049F
		private const int ISCIITamil = 57004; // Metadata: 0x001E04A3
		private const int ISCIITelugu = 57005; // Metadata: 0x001E04A7
		private const int GB18030 = 54936; // Metadata: 0x001E04AB
		private const int ISO_8859_8I = 38598; // Metadata: 0x001E04AF
		private const int ISO_8859_8_Visual = 28598; // Metadata: 0x001E04B3
		private const int ENC50229 = 50229; // Metadata: 0x001E04B7
		private const int CodePageUTF7 = 65000; // Metadata: 0x001E04BB
		private const int CodePageUTF8 = 65001; // Metadata: 0x001E04BF
		private const int CodePageUTF32 = 12000; // Metadata: 0x001E04C3
		private const int CodePageUTF32BE = 12001; // Metadata: 0x001E04C7
		internal int m_codePage; // 0x10
		internal CodePageDataItem dataItem; // 0x18
		[NonSerialized]
		internal bool m_deserializedFromEverett; // 0x20
		[System.Runtime.Serialization.OptionalField] // 0x004B8CB8-0x004B8CF0
		private bool m_isReadOnly; // 0x21
		[System.Runtime.Serialization.OptionalField] // 0x004B8CF0-0x004B8D28
		internal EncoderFallback encoderFallback; // 0x28
		[System.Runtime.Serialization.OptionalField] // 0x004B8D28-0x004B8D60
		internal DecoderFallback decoderFallback; // 0x30
		private static object s_InternalSyncObject; // 0x48
	
		// Properties
		private static object InternalSyncObject { get; } // 0x00CD4FC8-0x00CD505C 
		public virtual string EncodingName { get; } // 0x00CD68BC-0x00CD68C8 
		public virtual string HeaderName { get; } // 0x00CD68C8-0x00CD6904 
		public virtual string WebName { get; } // 0x00CD6904-0x00CD6940 
		[ComVisible] // 0x004BD440-0x004BD454
		public EncoderFallback EncoderFallback { get; set; } // 0x00CD6940-0x00CD6948 0x00CD6948-0x00CD6A38
		[ComVisible] // 0x004BD454-0x004BD468
		public DecoderFallback DecoderFallback { get; set; } // 0x00CD6A38-0x00CD6A40 0x00CD6A40-0x00CD6B30
		[ComVisible] // 0x004BD468-0x004BD47C
		public bool IsReadOnly { get; } // 0x00CD6BC0-0x00CD6BC8 
		public static Encoding ASCII { get; } // 0x00CCDA30-0x00CCDACC 
		private static Encoding Latin1 { get; } // 0x00CD5E64-0x00CD5F00 
		public virtual int CodePage { get; } // 0x00CD779C-0x00CD77A4 
		public static Encoding Default { get; } // 0x00CD5AA8-0x00CD5B2C 
		public static Encoding Unicode { get; } // 0x00CD5B2C-0x00CD5BD0 
		public static Encoding BigEndianUnicode { get; } // 0x00CD5BD0-0x00CD5C74 
		public static Encoding UTF7 { get; } // 0x00CD5C74-0x00CD5D10 
		public static Encoding UTF8 { get; } // 0x00CD5DC4-0x00CD5E64 
		public static Encoding UTF32 { get; } // 0x00CD5D10-0x00CD5DB4 
	
		// Nested types
		[Serializable]
		internal class DefaultEncoder : Encoder, ISerializable, IObjectReference // TypeDefIndex: 398
		{
			// Fields
			private Encoding m_encoding; // 0x20
			[NonSerialized]
			private bool m_hasInitializedEncoding; // 0x28
			[NonSerialized]
			internal char charLeftOver; // 0x2A
	
			// Constructors
			public DefaultEncoder(Encoding encoding); // 0x00CD7AC8-0x00CD7AFC
			internal DefaultEncoder(SerializationInfo info, StreamingContext context); // 0x00CD8468-0x00CD8718
	
			// Methods
			public object GetRealObject(StreamingContext context); // 0x00CD8718-0x00CD87D8
			void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00CD87D8-0x00CD8880
			public override int GetByteCount(char[] chars, int index, int count, bool flush); // 0x00CD8880-0x00CD88A0
			public override unsafe int GetByteCount(char* chars, int count, bool flush); // 0x00CD88A0-0x00CD88C4
			public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush); // 0x00CD88C4-0x00CD88E8
			public override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, bool flush); // 0x00CD88E8-0x00CD890C
		}
	
		[Serializable]
		internal class DefaultDecoder : Decoder, ISerializable, IObjectReference // TypeDefIndex: 399
		{
			// Fields
			private Encoding m_encoding; // 0x20
			[NonSerialized]
			private bool m_hasInitializedEncoding; // 0x28
	
			// Constructors
			public DefaultDecoder(Encoding encoding); // 0x00CD7810-0x00CD7844
			internal DefaultDecoder(SerializationInfo info, StreamingContext context); // 0x00CD8080-0x00CD82B8
	
			// Methods
			public object GetRealObject(StreamingContext context); // 0x00CD82B8-0x00CD8310
			void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00CD8310-0x00CD83B8
			public override int GetCharCount(byte[] bytes, int index, int count); // 0x00CD83B8-0x00CD83C8
			public override int GetCharCount(byte[] bytes, int index, int count, bool flush); // 0x00CD83C8-0x00CD83EC
			public override unsafe int GetCharCount(byte* bytes, int count, bool flush); // 0x00CD83EC-0x00CD8410
			public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x00CD8410-0x00CD8420
			public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush); // 0x00CD8420-0x00CD8444
			public override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount, bool flush); // 0x00CD8444-0x00CD8468
		}
	
		internal class EncodingCharBuffer // TypeDefIndex: 400
		{
			// Fields
			private unsafe char* chars; // 0x10
			private unsafe char* charStart; // 0x18
			private unsafe char* charEnd; // 0x20
			private int charCountResult; // 0x28
			private Encoding enc; // 0x30
			private DecoderNLS decoder; // 0x38
			private unsafe byte* byteStart; // 0x40
			private unsafe byte* byteEnd; // 0x48
			private unsafe byte* bytes; // 0x50
			private DecoderFallbackBuffer fallbackBuffer; // 0x58
	
			// Properties
			internal bool MoreData { get; } // 0x00CD8ED0-0x00CD8EE0 
			internal int BytesUsed { get; } // 0x00CD8F04-0x00CD8F14 
			internal int Count { get; } // 0x00CD909C-0x00CD90A4 
	
			// Constructors
			internal unsafe EncodingCharBuffer(Encoding enc, DecoderNLS decoder, char* charStart, int charCount, byte* byteStart, int byteCount); // 0x00CD8D8C-0x00CD8E40
	
			// Methods
			internal bool AddChar(char ch, int numBytes); // 0x00CD8E40-0x00CD8EB8
			internal bool AddChar(char ch); // 0x00CD8EB8-0x00CD8EC0
			internal void AdjustBytes(int count); // 0x00CD8EC0-0x00CD8ED0
			internal byte GetNextByte(); // 0x00CD8EE0-0x00CD8F04
			internal bool Fallback(byte fallbackByte); // 0x00CD8F14-0x00CD8FA4
			internal bool Fallback(byte[] byteBuffer); // 0x00CD8FA4-0x00CD909C
		}
	
		internal class EncodingByteBuffer // TypeDefIndex: 401
		{
			// Fields
			private unsafe byte* bytes; // 0x10
			private unsafe byte* byteStart; // 0x18
			private unsafe byte* byteEnd; // 0x20
			private unsafe char* chars; // 0x28
			private unsafe char* charStart; // 0x30
			private unsafe char* charEnd; // 0x38
			private int byteCountResult; // 0x40
			private Encoding enc; // 0x48
			private EncoderNLS encoder; // 0x50
			internal EncoderFallbackBuffer fallbackBuffer; // 0x58
	
			// Properties
			internal bool MoreData { get; } // 0x00CD8CA4-0x00CD8CF8 
			internal int CharsUsed { get; } // 0x00CD8D6C-0x00CD8D84 
			internal int Count { get; } // 0x00CD8D84-0x00CD8D8C 
	
			// Constructors
			internal unsafe EncodingByteBuffer(Encoding inEncoding, EncoderNLS inEncoder, byte* inByteStart, int inByteCount, char* inCharStart, int inCharCount); // 0x00CD890C-0x00CD8B64
	
			// Methods
			internal bool AddByte(byte b, int moreBytesExpected); // 0x00CD8B64-0x00CD8BB8
			internal bool AddByte(byte b1); // 0x00CD8C3C-0x00CD8C44
			internal bool AddByte(byte b1, byte b2); // 0x00CD8C44-0x00CD8C4C
			internal bool AddByte(byte b1, byte b2, int moreBytesExpected); // 0x00CD8C4C-0x00CD8CA4
			internal void MovePrevious(bool bThrow); // 0x00CD8BB8-0x00CD8C3C
			internal char GetNextChar(); // 0x00CD8CF8-0x00CD8D6C
		}
	
		// Constructors
		protected Encoding(); // 0x00CD4970-0x00CD4978
		protected Encoding(int codePage); // 0x00CCDAD4-0x00CCDB88
	
		// Methods
		internal virtual void SetDefaultFallbacks(); // 0x00CD4978-0x00CD4A1C
		internal void OnDeserializing(); // 0x00CD4A8C-0x00CD4A9C
		internal void OnDeserialized(); // 0x00CD4A9C-0x00CD4AE4
		[OnDeserializing] // 0x004BB410-0x004BB420
		private void OnDeserializing(StreamingContext ctx); // 0x00CD4AE4-0x00CD4AF4
		[OnDeserialized] // 0x004BB420-0x004BB430
		private void OnDeserialized(StreamingContext ctx); // 0x00CD4AF4-0x00CD4B3C
		[OnSerializing] // 0x004BB430-0x004BB440
		private void OnSerializing(StreamingContext ctx); // 0x00CD4B3C-0x00CD4B44
		internal void DeserializeEncoding(SerializationInfo info, StreamingContext context); // 0x00CD4B44-0x00CD4E78
		internal void SerializeEncoding(SerializationInfo info, StreamingContext context); // 0x00CD4E78-0x00CD4FC8
		public static Encoding GetEncoding(int codepage); // 0x00CD505C-0x00CD5998
		public static Encoding GetEncoding(string name); // 0x00CD6560-0x00CD6604
		public virtual byte[] GetPreamble(); // 0x00CD6714-0x00CD677C
		private void GetDataItem(); // 0x00CD677C-0x00CD68BC
		[ComVisible] // 0x004BB440-0x004BB454
		public virtual object Clone(); // 0x00CD6B30-0x00CD6BC0
		public virtual int GetByteCount(string s); // 0x00CD6BD0-0x00CD6C90
		public abstract int GetByteCount(char[] chars, int index, int count);
		[CLSCompliant] // 0x004BB454-0x004BB494
		[ComVisible] // 0x004BB454-0x004BB494
		public virtual unsafe int GetByteCount(char* chars, int count); // 0x00CD6C90-0x00CD6E10
		internal virtual unsafe int GetByteCount(char* chars, int count, EncoderNLS encoder); // 0x00CD6E10-0x00CD6E20
		public virtual byte[] GetBytes(char[] chars, int index, int count); // 0x00CD6E20-0x00CD6EE0
		public abstract int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
		public virtual byte[] GetBytes(string s); // 0x00CD6EE0-0x00CD6FEC
		public virtual int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00CD6FEC-0x00CD70CC
		internal virtual unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS encoder); // 0x00CD70CC-0x00CD70DC
		[CLSCompliant] // 0x004BB494-0x004BB4D4
		[ComVisible] // 0x004BB494-0x004BB4D4
		public virtual unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount); // 0x00CD70DC-0x00CD7308
		public abstract int GetCharCount(byte[] bytes, int index, int count);
		[CLSCompliant] // 0x004BB4D4-0x004BB514
		[ComVisible] // 0x004BB4D4-0x004BB514
		public virtual unsafe int GetCharCount(byte* bytes, int count); // 0x00CD7308-0x00CD748C
		internal virtual unsafe int GetCharCount(byte* bytes, int count, DecoderNLS decoder); // 0x00CD748C-0x00CD749C
		public virtual char[] GetChars(byte[] bytes, int index, int count); // 0x00CD749C-0x00CD7560
		public abstract int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
		[CLSCompliant] // 0x004BB514-0x004BB554
		[ComVisible] // 0x004BB514-0x004BB554
		public virtual unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount); // 0x00CD7560-0x00CD778C
		internal virtual unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS decoder); // 0x00CD778C-0x00CD779C
		public virtual Decoder GetDecoder(); // 0x00CD77A4-0x00CD7810
		private static Encoding CreateDefaultEncoding(); // 0x00CD7844-0x00CD78B4
		internal void setReadOnly(bool value = true /* Metadata: 0x001E0412 */); // 0x00CD7A50-0x00CD7A5C
		public virtual Encoder GetEncoder(); // 0x00CD7A5C-0x00CD7AC8
		public abstract int GetMaxByteCount(int charCount);
		public abstract int GetMaxCharCount(int byteCount);
		public virtual string GetString(byte[] bytes); // 0x00CD7AFC-0x00CD7BC8
		public virtual string GetString(byte[] bytes, int index, int count); // 0x00CD7BC8-0x00CD7BF4
		public override bool Equals(object value); // 0x00CD7BF4-0x00CD7CDC
		public override int GetHashCode(); // 0x00CD7CDC-0x00CD7D40
		internal virtual char[] GetBestFitUnicodeToBytesData(); // 0x00CD7D40-0x00CD7DA8
		internal virtual char[] GetBestFitBytesToUnicodeData(); // 0x00CD7DA8-0x00CD7E10
		internal void ThrowBytesOverflow(); // 0x00CD7E10-0x00CD7F48
		internal void ThrowBytesOverflow(EncoderNLS encoder, bool nothingEncoded); // 0x00CCFA48-0x00CCFACC
		internal void ThrowCharsOverflow(); // 0x00CD7F48-0x00CD8080
		internal void ThrowCharsOverflow(DecoderNLS decoder, bool nothingDecoded); // 0x00CCFF3C-0x00CCFFB8
	}

	[Serializable]
	[ComVisible] // 0x004B3648-0x004B365C
	internal abstract class EncodingNLS : Encoding // TypeDefIndex: 402
	{
		// Constructors
		protected EncodingNLS(int codePage); // 0x00CD9310-0x00CD9314
	
		// Methods
		public override int GetByteCount(char[] chars, int index, int count); // 0x00CD9314-0x00CD94F0
		public override int GetByteCount(string s); // 0x00CD94F0-0x00CD95A4
		public override unsafe int GetByteCount(char* chars, int count); // 0x00CD95A4-0x00CD96C4
		public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00CD96C4-0x00CD9940
		public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00CD9940-0x00CD9BEC
		public override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount); // 0x00CD9BEC-0x00CD9D54
		public override int GetCharCount(byte[] bytes, int index, int count); // 0x00CD9D54-0x00CD9F30
		public override unsafe int GetCharCount(byte* bytes, int count); // 0x00CD9F30-0x00CDA050
		public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x00CDA050-0x00CDA2FC
		public override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount); // 0x00CDA2FC-0x00CDA464
		public override string GetString(byte[] bytes, int index, int count); // 0x00CDA464-0x00CDA644
		public override Decoder GetDecoder(); // 0x00CDA644-0x00CDA6A4
		public override Encoder GetEncoder(); // 0x00CDA6A4-0x00CDA704
	}

	[ComVisible] // 0x004B365C-0x004B3670
	public abstract class EncodingProvider // TypeDefIndex: 403
	{
		// Fields
		private static object s_InternalSyncObject; // 0x00
		private static EncodingProvider[] s_providers; // 0x08
	
		// Constructors
		static EncodingProvider(); // 0x00CDA704-0x00CDA770
	
		// Methods
		public abstract Encoding GetEncoding(string name);
		public abstract Encoding GetEncoding(int codepage);
		internal static Encoding GetEncodingFromProvider(int codepage); // 0x00CD5998-0x00CD5AA8
		internal static Encoding GetEncodingFromProvider(string encodingName); // 0x00CD6604-0x00CD6714
	}

	[Serializable]
	internal class Latin1Encoding : EncodingNLS, ISerializable // TypeDefIndex: 404
	{
		// Fields
		private static readonly char[] arrayCharBestFit; // 0x00
	
		// Constructors
		public Latin1Encoding(); // 0x00CD6BC8-0x00CD6BD0
		internal Latin1Encoding(SerializationInfo info, StreamingContext context); // 0x00CDB3C8-0x00CDB3F8
		static Latin1Encoding(); // 0x00CDBD1C-0x00CDBD98
	
		// Methods
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00CDB3F8-0x00CDB4C0
		internal override unsafe int GetByteCount(char* chars, int charCount, EncoderNLS encoder); // 0x00CDB4C0-0x00CDB698
		internal override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS encoder); // 0x00CDB698-0x00CDBA1C
		internal override unsafe int GetCharCount(byte* bytes, int count, DecoderNLS decoder); // 0x00CDBA1C-0x00CDBA24
		internal override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS decoder); // 0x00CDBA24-0x00CDBA98
		public override int GetMaxByteCount(int charCount); // 0x00CDBA98-0x00CDBBA8
		public override int GetMaxCharCount(int byteCount); // 0x00CDBBA8-0x00CDBCB4
		internal override char[] GetBestFitUnicodeToBytesData(); // 0x00CDBCB4-0x00CDBD1C
	}

	[Serializable]
	[ComVisible] // 0x004B3670-0x004B36C0
	public sealed class StringBuilder : ISerializable // TypeDefIndex: 405
	{
		// Fields
		internal char[] m_ChunkChars; // 0x10
		internal StringBuilder m_ChunkPrevious; // 0x18
		internal int m_ChunkLength; // 0x20
		internal int m_ChunkOffset; // 0x24
		internal int m_MaxCapacity; // 0x28
		internal const int DefaultCapacity = 16; // Metadata: 0x001E04CB
		private const string CapacityField = "Capacity"; // Metadata: 0x001E04CF
		private const string MaxCapacityField = "m_MaxCapacity"; // Metadata: 0x001E04DB
		private const string StringValueField = "m_StringValue"; // Metadata: 0x001E04EC
		private const string ThreadIDField = "m_currentThread"; // Metadata: 0x001E04FD
		internal const int MaxChunkSize = 8000; // Metadata: 0x001E0510
	
		// Properties
		public int Capacity { get; } // 0x00CDE590-0x00CDE5B8 
		public int MaxCapacity { get; } // 0x00CDE5B8-0x00CDE5C0 
		public int Length { get; set; } // 0x00CD154C-0x00CD1558 0x00CDE98C-0x00CDEB30
		public char this[int index] { get => default; set {} } // 0x00CDC920-0x00CDC9F8 0x00CDCC88-0x00CDCD90
	
		// Constructors
		public StringBuilder(); // 0x00CDDDEC-0x00CDDDF4
		public StringBuilder(int capacity); // 0x00CD0BA0-0x00CD0C08
		public StringBuilder(string value); // 0x00CDDE24-0x00CDDE2C
		public StringBuilder(string value, int capacity); // 0x00CDDDF4-0x00CDDE24
		public StringBuilder(string value, int startIndex, int length, int capacity); // 0x00CDDE2C-0x00CDE08C
		private StringBuilder(SerializationInfo info, StreamingContext context); // 0x00CDE1B4-0x00CDE46C
		private StringBuilder(StringBuilder from); // 0x00CE0F98-0x00CE0FF4
		private StringBuilder(int size, int maxCapacity, StringBuilder previousBlock); // 0x00CE0FF4-0x00CE1088
	
		// Methods
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00CDE46C-0x00CDE590
		public override string ToString(); // 0x00CDE5C0-0x00CDE714
		public string ToString(int startIndex, int length); // 0x00CDE714-0x00CDE964
		public StringBuilder Clear(); // 0x00CDE964-0x00CDE98C
		public StringBuilder Append(char value, int repeatCount); // 0x00CDEB30-0x00CDEC60
		public StringBuilder Append(char[] value, int startIndex, int charCount); // 0x00CDEE28-0x00CDEFE0
		public StringBuilder Append(string value); // 0x00CD0C08-0x00CD0D20
		private void AppendHelper(string value); // 0x00CDF120-0x00CDF15C
		public StringBuilder Append(string value, int startIndex, int count); // 0x00CDD2E4-0x00CDD480
		[ComVisible] // 0x004BB554-0x004BB568
		public StringBuilder AppendLine(); // 0x00CDF15C-0x00CDF188
		[ComVisible] // 0x004BB568-0x004BB57C
		public StringBuilder AppendLine(string value); // 0x00CDF188-0x00CDF1B8
		public StringBuilder Insert(int index, string value, int count); // 0x00CDF1B8-0x00CDF388
		public StringBuilder Remove(int startIndex, int length); // 0x00CDCD90-0x00CDCF1C
		public StringBuilder Append(byte value); // 0x00CDF89C-0x00CDF92C
		public StringBuilder Append(char value); // 0x00CDD908-0x00CDD970
		public StringBuilder Append(int value); // 0x00CDF92C-0x00CDF9BC
		public StringBuilder Append(long value); // 0x00CDF9BC-0x00CDFA4C
		public StringBuilder Append(object value); // 0x00CDFA4C-0x00CDFA98
		public StringBuilder Insert(int index, string value); // 0x00CDFA98-0x00CDFB7C
		public StringBuilder Insert(int index, char value); // 0x00CDFC94-0x00CDFCC4
		public StringBuilder AppendFormat(string format, object arg0); // 0x00CDFCC4-0x00CDFD20
		public StringBuilder AppendFormat(string format, object arg0, object arg1); // 0x00CE050C-0x00CE056C
		public StringBuilder AppendFormat(string format, object arg0, object arg1, object arg2); // 0x00CE056C-0x00CE05D0
		public StringBuilder AppendFormat(string format, params /* 0x004BD2B0-0x004BD2C0 */ object[] args); // 0x00CE05D0-0x00CE06B4
		public StringBuilder AppendFormat(IFormatProvider provider, string format, object arg0); // 0x00CE06B4-0x00CE071C
		public StringBuilder AppendFormat(IFormatProvider provider, string format, object arg0, object arg1); // 0x00CE071C-0x00CE0788
		private static void FormatError(); // 0x00CE0788-0x00CE080C
		internal StringBuilder AppendFormatHelper(IFormatProvider provider, string format, ParamsArray args); // 0x00CDFD20-0x00CE050C
		public StringBuilder Replace(string oldValue, string newValue); // 0x00CE080C-0x00CE081C
		public StringBuilder Replace(string oldValue, string newValue, int startIndex, int count); // 0x00CE081C-0x00CE0B60
		[CLSCompliant] // 0x004BB57C-0x004BB590
		public unsafe StringBuilder Append(char* value, int valueCount); // 0x00CDEFE0-0x00CDF120
		private unsafe void Insert(int index, char* value, int valueCount); // 0x00CDFB7C-0x00CDFC94
		private void ReplaceAllInChunk(int[] replacements, int replacementsCount, StringBuilder sourceChunk, int removeCount, string value); // 0x00CE0C50-0x00CE0E24
		private bool StartsWith(StringBuilder chunk, int indexInChunk, int count, string value); // 0x00CE0B60-0x00CE0C50
		private unsafe void ReplaceInPlaceAtChunk(ref StringBuilder chunk, ref int indexInChunk, char* value, int count); // 0x00CDF67C-0x00CDF798
		private static unsafe void ThreadSafeCopy(char* sourcePtr, char[] destination, int destinationIndex, int count); // 0x00CDE08C-0x00CDE1B4
		private static void ThreadSafeCopy(char[] source, int sourceIndex, char[] destination, int destinationIndex, int count); // 0x00CE0E6C-0x00CE0F98
		private StringBuilder FindChunkForIndex(int index); // 0x00CDEC60-0x00CDEC8C
		private StringBuilder Next(StringBuilder chunk); // 0x00CE0E24-0x00CE0E6C
		private void ExpandByABlock(int minBlockCharCount); // 0x00CDEC8C-0x00CDEE28
		private void MakeRoom(int index, int count, out StringBuilder chunk, out int indexInChunk, bool doneMoveFollowingChars); // 0x00CDF388-0x00CDF67C
		private void Remove(int startIndex, int count, out StringBuilder chunk, out int indexInChunk); // 0x00CDF798-0x00CDF89C
	}

	internal static class StringBuilderCache // TypeDefIndex: 406
	{
		// Fields
		[ThreadStatic] // 0x004B8D60-0x004B8D70
		private static StringBuilder CachedInstance; // 0x80000000
	
		// Methods
		public static StringBuilder Acquire(int capacity = 16 /* Metadata: 0x001E0514 */); // 0x00CE1088-0x00CE1150
		public static void Release(StringBuilder sb); // 0x00CE1150-0x00CE11CC
		public static string GetStringAndRelease(StringBuilder sb); // 0x00CE11CC-0x00CE1210
	}

	[Serializable]
	[ComVisible] // 0x004B36C0-0x004B36D4
	public class UnicodeEncoding : Encoding // TypeDefIndex: 407
	{
		// Fields
		[System.Runtime.Serialization.OptionalField] // 0x004B8D70-0x004B8DA8
		internal bool isThrowException; // 0x38
		internal bool bigEndian; // 0x39
		internal bool byteOrderMark; // 0x3A
		private static readonly ulong highLowPatternMask; // 0x00
	
		// Nested types
		[Serializable]
		private class Decoder : DecoderNLS, ISerializable // TypeDefIndex: 408
		{
			// Fields
			internal int lastByte; // 0x30
			internal char lastChar; // 0x34
	
			// Properties
			internal override bool HasState { get; } // 0x00B5330C-0x00B53330 
	
			// Constructors
			public Decoder(UnicodeEncoding encoding); // 0x00B52800-0x00B52810
			internal Decoder(SerializationInfo info, StreamingContext context); // 0x00B52D98-0x00B53160
	
			// Methods
			new void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00B53160-0x00B532E4
			public override void Reset(); // 0x00B532E4-0x00B5330C
		}
	
		// Constructors
		public UnicodeEncoding(); // 0x00B4F404-0x00B4F414
		public UnicodeEncoding(bool bigEndian, bool byteOrderMark); // 0x00B4F414-0x00B4F424
		public UnicodeEncoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes); // 0x00B4F424-0x00B4F4B4
		static UnicodeEncoding(); // 0x00B52CF4-0x00B52D98
	
		// Methods
		[OnDeserializing] // 0x004BB590-0x004BB5A0
		private new void OnDeserializing(StreamingContext ctx); // 0x00B4F4B4-0x00B4F4BC
		internal override void SetDefaultFallbacks(); // 0x00B4F4BC-0x00B4F578
		public override int GetByteCount(char[] chars, int index, int count); // 0x00B4F578-0x00B4F754
		public override int GetByteCount(string s); // 0x00B4F754-0x00B4F808
		[CLSCompliant] // 0x004BB5A0-0x004BB5E0
		[ComVisible] // 0x004BB5A0-0x004BB5E0
		public override unsafe int GetByteCount(char* chars, int count); // 0x00B4F808-0x00B4F928
		public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00B4F928-0x00B4FBA4
		public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00B4FBA4-0x00B4FE50
		[CLSCompliant] // 0x004BB5E0-0x004BB620
		[ComVisible] // 0x004BB5E0-0x004BB620
		public override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount); // 0x00B4FE50-0x00B4FFB8
		public override int GetCharCount(byte[] bytes, int index, int count); // 0x00B4FFB8-0x00B50194
		[CLSCompliant] // 0x004BB620-0x004BB660
		[ComVisible] // 0x004BB620-0x004BB660
		public override unsafe int GetCharCount(byte* bytes, int count); // 0x00B50194-0x00B502B4
		public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x00B502B4-0x00B50560
		[CLSCompliant] // 0x004BB660-0x004BB6A0
		[ComVisible] // 0x004BB660-0x004BB6A0
		public override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount); // 0x00B50560-0x00B506C8
		[ComVisible] // 0x004BB6A0-0x004BB6B4
		public override string GetString(byte[] bytes, int index, int count); // 0x00B506C8-0x00B508A8
		internal override unsafe int GetByteCount(char* chars, int count, EncoderNLS encoder); // 0x00B508A8-0x00B50EC8
		internal override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS encoder); // 0x00B50EC8-0x00B516E8
		internal override unsafe int GetCharCount(byte* bytes, int count, DecoderNLS baseDecoder); // 0x00B516E8-0x00B51E30
		internal override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS baseDecoder); // 0x00B51E30-0x00B52730
		[ComVisible] // 0x004BB6B4-0x004BB6C8
		public override Encoder GetEncoder(); // 0x00B52730-0x00B52794
		public override Decoder GetDecoder(); // 0x00B52794-0x00B52800
		public override byte[] GetPreamble(); // 0x00B52810-0x00B528F8
		public override int GetMaxByteCount(int charCount); // 0x00B528F8-0x00B52A08
		public override int GetMaxCharCount(int byteCount); // 0x00B52A08-0x00B52B1C
		public override bool Equals(object value); // 0x00B52B1C-0x00B52C68
		public override int GetHashCode(); // 0x00B52C68-0x00B52CF4
	}

	[Serializable]
	public sealed class UTF32Encoding : Encoding // TypeDefIndex: 409
	{
		// Fields
		private bool emitUTF32ByteOrderMark; // 0x38
		private bool isThrowException; // 0x39
		private bool bigEndian; // 0x3A
	
		// Nested types
		[Serializable]
		internal class UTF32Decoder : DecoderNLS // TypeDefIndex: 410
		{
			// Fields
			internal int iChar; // 0x30
			internal int readByteCount; // 0x34
	
			// Properties
			internal override bool HasState { get; } // 0x00B48994-0x00B489A4 
	
			// Constructors
			public UTF32Decoder(UTF32Encoding encoding); // 0x00B4896C-0x00B48974
	
			// Methods
			public override void Reset(); // 0x00B48974-0x00B48994
		}
	
		// Constructors
		public UTF32Encoding(); // 0x00CE1210-0x00CE1220
		public UTF32Encoding(bool bigEndian, bool byteOrderMark); // 0x00CD5DB4-0x00CD5DC4
		public UTF32Encoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters); // 0x00CE1220-0x00CE12A4
	
		// Methods
		internal override void SetDefaultFallbacks(); // 0x00CE12A4-0x00CE1350
		public override int GetByteCount(char[] chars, int index, int count); // 0x00CE1350-0x00CE152C
		public override int GetByteCount(string s); // 0x00CE152C-0x00CE15E0
		[CLSCompliant] // 0x004BB6C8-0x004BB6DC
		public override unsafe int GetByteCount(char* chars, int count); // 0x00CE15E0-0x00CE1700
		public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00CE1700-0x00CE197C
		public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00CE197C-0x00CE1C28
		[CLSCompliant] // 0x004BB6DC-0x004BB6F0
		public override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount); // 0x00CE1C28-0x00CE1D90
		public override int GetCharCount(byte[] bytes, int index, int count); // 0x00CE1D90-0x00CE1F6C
		[CLSCompliant] // 0x004BB6F0-0x004BB704
		public override unsafe int GetCharCount(byte* bytes, int count); // 0x00CE1F6C-0x00CE208C
		public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x00CE208C-0x00CE2338
		[CLSCompliant] // 0x004BB704-0x004BB718
		public override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount); // 0x00CE2338-0x00CE24A0
		public override string GetString(byte[] bytes, int index, int count); // 0x00CE24A0-0x00CE2680
		internal override unsafe int GetByteCount(char* chars, int count, EncoderNLS encoder); // 0x00CE2680-0x00CE29E8
		internal override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS encoder); // 0x00CE29E8-0x00CE2E7C
		internal override unsafe int GetCharCount(byte* bytes, int count, DecoderNLS baseDecoder); // 0x00CE2E98-0x00CE3210
		internal override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS baseDecoder); // 0x00CE3210-0x00CE3640
		private uint GetSurrogate(char cHigh, char cLow); // 0x00CE2E7C-0x00CE2E98
		private char GetHighSurrogate(uint iChar); // 0x00CE3640-0x00CE3654
		private char GetLowSurrogate(uint iChar); // 0x00CE3654-0x00CE3660
		public override Decoder GetDecoder(); // 0x00CE3660-0x00CE36C4
		public override Encoder GetEncoder(); // 0x00CE36C4-0x00CE3724
		public override int GetMaxByteCount(int charCount); // 0x00CE3724-0x00CE3834
		public override int GetMaxCharCount(int byteCount); // 0x00CE3834-0x00CE3934
		public override byte[] GetPreamble(); // 0x00CE3934-0x00CE3A24
		public override bool Equals(object value); // 0x00CE3A24-0x00CE3B20
		public override int GetHashCode(); // 0x00CE3B20-0x00CE4BB0
	}

	[Serializable]
	[ComVisible] // 0x004B36D4-0x004B36E8
	public class UTF7Encoding : Encoding // TypeDefIndex: 411
	{
		// Fields
		private byte[] base64Bytes; // 0x38
		private sbyte[] base64Values; // 0x40
		private bool[] directEncode; // 0x48
		[System.Runtime.Serialization.OptionalField] // 0x004B8DA8-0x004B8DE0
		private bool m_allowOptionals; // 0x50
	
		// Nested types
		[Serializable]
		private class Decoder : DecoderNLS, ISerializable // TypeDefIndex: 412
		{
			// Fields
			internal int bits; // 0x30
			internal int bitCount; // 0x34
			internal bool firstByte; // 0x38
	
			// Properties
			internal override bool HasState { get; } // 0x00B4AF18-0x00B4AF28 
	
			// Constructors
			public Decoder(UTF7Encoding encoding); // 0x00B4A9C8-0x00B4A9D0
			internal Decoder(SerializationInfo info, StreamingContext context); // 0x00B4ABB0-0x00B4ADF4
	
			// Methods
			new void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00B4ADF4-0x00B4AEF0
			public override void Reset(); // 0x00B4AEF0-0x00B4AF18
		}
	
		[Serializable]
		private class Encoder : EncoderNLS, ISerializable // TypeDefIndex: 413
		{
			// Fields
			internal int bits; // 0x38
			internal int bitCount; // 0x3C
	
			// Constructors
			public Encoder(UTF7Encoding encoding); // 0x00B4AA34-0x00B4AA3C
			internal Encoder(SerializationInfo info, StreamingContext context); // 0x00B4B14C-0x00B4B330
	
			// Methods
			new void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00B4B330-0x00B4B410
			public override void Reset(); // 0x00B4B410-0x00B4B434
		}
	
		[Serializable]
		internal sealed class DecoderUTF7Fallback : DecoderFallback // TypeDefIndex: 414
		{
			// Properties
			public override int MaxCharCount { get; } // 0x00B4AF9C-0x00B4AFA4 
	
			// Constructors
			public DecoderUTF7Fallback(); // 0x00B48D14-0x00B48D1C
	
			// Methods
			public override DecoderFallbackBuffer CreateFallbackBuffer(); // 0x00B4AF28-0x00B4AF8C
			public override bool Equals(object value); // 0x00B4AFA4-0x00B4B008
			public override int GetHashCode(); // 0x00B4B008-0x00B4B010
		}
	
		internal sealed class DecoderUTF7FallbackBuffer : DecoderFallbackBuffer // TypeDefIndex: 415
		{
			// Fields
			private char cFallback; // 0x20
			private int iCount; // 0x24
			private int iSize; // 0x28
	
			// Constructors
			public DecoderUTF7FallbackBuffer(DecoderUTF7Fallback fallback); // 0x00B4AF8C-0x00B4AF9C
	
			// Methods
			public override bool Fallback(byte[] bytesUnknown, int index); // 0x00B4B010-0x00B4B064
			public override char GetNextChar(); // 0x00B4B064-0x00B4B084
			public override void Reset(); // 0x00B4B084-0x00B4B094
			internal override unsafe int InternalFallback(byte[] bytes, byte* pBytes); // 0x00B4B094-0x00B4B14C
		}
	
		// Constructors
		public UTF7Encoding(); // 0x00B489A4-0x00B489D4
		public UTF7Encoding(bool allowOptionals); // 0x00B489D4-0x00B48A0C
	
		// Methods
		private void MakeTables(); // 0x00B48A0C-0x00B48C74
		internal override void SetDefaultFallbacks(); // 0x00B48C74-0x00B48D14
		[OnDeserializing] // 0x004BB718-0x004BB728
		private new void OnDeserializing(StreamingContext ctx); // 0x00B48D1C-0x00B48D24
		[OnDeserialized] // 0x004BB728-0x004BB738
		private new void OnDeserialized(StreamingContext ctx); // 0x00B48D24-0x00B48DD8
		[ComVisible] // 0x004BB738-0x004BB74C
		public override bool Equals(object value); // 0x00B48DD8-0x00B48ED0
		[ComVisible] // 0x004BB74C-0x004BB760
		public override int GetHashCode(); // 0x00B48ED0-0x00B48F44
		public override int GetByteCount(char[] chars, int index, int count); // 0x00B48F44-0x00B49120
		[ComVisible] // 0x004BB760-0x004BB774
		public override int GetByteCount(string s); // 0x00B49120-0x00B491D4
		[CLSCompliant] // 0x004BB774-0x004BB7B4
		[ComVisible] // 0x004BB774-0x004BB7B4
		public override unsafe int GetByteCount(char* chars, int count); // 0x00B491D4-0x00B492F4
		[ComVisible] // 0x004BB7B4-0x004BB7C8
		public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00B492F4-0x00B49570
		public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00B49570-0x00B4981C
		[CLSCompliant] // 0x004BB7C8-0x004BB808
		[ComVisible] // 0x004BB7C8-0x004BB808
		public override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount); // 0x00B4981C-0x00B49984
		public override int GetCharCount(byte[] bytes, int index, int count); // 0x00B49984-0x00B49B60
		[CLSCompliant] // 0x004BB808-0x004BB848
		[ComVisible] // 0x004BB808-0x004BB848
		public override unsafe int GetCharCount(byte* bytes, int count); // 0x00B49B60-0x00B49C80
		public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x00B49C80-0x00B49F2C
		[CLSCompliant] // 0x004BB848-0x004BB888
		[ComVisible] // 0x004BB848-0x004BB888
		public override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount); // 0x00B49F2C-0x00B4A094
		[ComVisible] // 0x004BB888-0x004BB89C
		public override string GetString(byte[] bytes, int index, int count); // 0x00B4A094-0x00B4A274
		internal override unsafe int GetByteCount(char* chars, int count, EncoderNLS baseEncoder); // 0x00B4A274-0x00B4A294
		internal override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS baseEncoder); // 0x00B4A294-0x00B4A670
		internal override unsafe int GetCharCount(byte* bytes, int count, DecoderNLS baseDecoder); // 0x00B4A670-0x00B4A690
		internal override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS baseDecoder); // 0x00B4A690-0x00B4A964
		public override Decoder GetDecoder(); // 0x00B4A964-0x00B4A9C8
		public override Encoder GetEncoder(); // 0x00B4A9D0-0x00B4AA34
		public override int GetMaxByteCount(int charCount); // 0x00B4AA3C-0x00B4AB04
		public override int GetMaxCharCount(int byteCount); // 0x00B4AB04-0x00B4ABB0
	}

	[Serializable]
	[ComVisible] // 0x004B36E8-0x004B36FC
	public class UTF8Encoding : Encoding // TypeDefIndex: 416
	{
		// Fields
		private bool emitUTF8Identifier; // 0x38
		private bool isThrowException; // 0x39
	
		// Nested types
		[Serializable]
		internal class UTF8Encoder : EncoderNLS, ISerializable // TypeDefIndex: 417
		{
			// Fields
			internal int surrogateChar; // 0x38
	
			// Constructors
			public UTF8Encoder(UTF8Encoding encoding); // 0x00B4E7C4-0x00B4E7CC
			internal UTF8Encoder(SerializationInfo info, StreamingContext context); // 0x00B4F028-0x00B4F2C4
	
			// Methods
			new void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00B4F2C4-0x00B4F3E4
			public override void Reset(); // 0x00B4F3E4-0x00B4F404
		}
	
		[Serializable]
		internal class UTF8Decoder : DecoderNLS, ISerializable // TypeDefIndex: 418
		{
			// Fields
			internal int bits; // 0x30
	
			// Properties
			internal override bool HasState { get; } // 0x00B4F018-0x00B4F028 
	
			// Constructors
			public UTF8Decoder(UTF8Encoding encoding); // 0x00B4E758-0x00B4E760
			internal UTF8Decoder(SerializationInfo info, StreamingContext context); // 0x00B4EBF8-0x00B4EEA8
	
			// Methods
			new void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00B4EEA8-0x00B4EFF8
			public override void Reset(); // 0x00B4EFF8-0x00B4F018
		}
	
		// Constructors
		public UTF8Encoding(); // 0x00B4B434-0x00B4B460
		public UTF8Encoding(bool encoderShouldEmitUTF8Identifier); // 0x00B4B460-0x00B4B498
		public UTF8Encoding(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes); // 0x00B4B498-0x00B4B500
	
		// Methods
		internal override void SetDefaultFallbacks(); // 0x00B4B500-0x00B4B5BC
		public override int GetByteCount(char[] chars, int index, int count); // 0x00B4B5BC-0x00B4B798
		public override int GetByteCount(string chars); // 0x00B4B798-0x00B4B84C
		[CLSCompliant] // 0x004BB89C-0x004BB8DC
		[ComVisible] // 0x004BB89C-0x004BB8DC
		public override unsafe int GetByteCount(char* chars, int count); // 0x00B4B84C-0x00B4B96C
		public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00B4B96C-0x00B4BBE8
		public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00B4BBE8-0x00B4BE94
		[CLSCompliant] // 0x004BB8DC-0x004BB91C
		[ComVisible] // 0x004BB8DC-0x004BB91C
		public override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount); // 0x00B4BE94-0x00B4BFFC
		public override int GetCharCount(byte[] bytes, int index, int count); // 0x00B4BFFC-0x00B4C1D8
		[CLSCompliant] // 0x004BB91C-0x004BB95C
		[ComVisible] // 0x004BB91C-0x004BB95C
		public override unsafe int GetCharCount(byte* bytes, int count); // 0x00B4C1D8-0x00B4C2F8
		public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x00B4C2F8-0x00B4C5A4
		[CLSCompliant] // 0x004BB95C-0x004BB99C
		[ComVisible] // 0x004BB95C-0x004BB99C
		public override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount); // 0x00B4C5A4-0x00B4C70C
		[ComVisible] // 0x004BB99C-0x004BB9B0
		public override string GetString(byte[] bytes, int index, int count); // 0x00B4C70C-0x00B4C8EC
		internal override unsafe int GetByteCount(char* chars, int count, EncoderNLS baseEncoder); // 0x00B4C8EC-0x00B4CED0
		private static unsafe int PtrDiff(char* a, char* b); // 0x00B4CEE4-0x00B4CEF0
		private static unsafe int PtrDiff(byte* a, byte* b); // 0x00B4CEF0-0x00B4CEF8
		private static bool InRange(int ch, int start, int end); // 0x00B4CED0-0x00B4CEE4
		internal override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS baseEncoder); // 0x00B4CEF8-0x00B4D6A8
		internal override unsafe int GetCharCount(byte* bytes, int count, DecoderNLS baseDecoder); // 0x00B4D6A8-0x00B4DBAC
		internal override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS baseDecoder); // 0x00B4DBF4-0x00B4E430
		private unsafe bool FallbackInvalidByteSequence(ref byte* pSrc, int ch, DecoderFallbackBuffer fallback, ref char* pTarget); // 0x00B4E430-0x00B4E4AC
		private unsafe int FallbackInvalidByteSequence(byte* pSrc, int ch, DecoderFallbackBuffer fallback); // 0x00B4DBAC-0x00B4DBF4
		private unsafe byte[] GetBytesUnknown(ref byte* pSrc, int ch); // 0x00B4E4AC-0x00B4E6F4
		public override Decoder GetDecoder(); // 0x00B4E6F4-0x00B4E758
		public override Encoder GetEncoder(); // 0x00B4E760-0x00B4E7C4
		public override int GetMaxByteCount(int charCount); // 0x00B4E7CC-0x00B4E8DC
		public override int GetMaxCharCount(int byteCount); // 0x00B4E8DC-0x00B4E9EC
		public override byte[] GetPreamble(); // 0x00B4E9EC-0x00B4EA94
		public override bool Equals(object value); // 0x00B4EA94-0x00B4EB8C
		public override int GetHashCode(); // 0x00B4EB8C-0x00B4EBF8
	}

	internal enum NormalizationCheck // TypeDefIndex: 419
	{
		Yes = 0,
		No = 1,
		Maybe = 2
	}

	internal class Normalization // TypeDefIndex: 420
	{
		// Fields
		private static unsafe byte* props; // 0x00
		private static unsafe int* mappedChars; // 0x08
		private static unsafe short* charMapIndex; // 0x10
		private static unsafe short* helperIndex; // 0x18
		private static unsafe ushort* mapIdxToComposite; // 0x20
		private static unsafe byte* combiningClass; // 0x28
		private static object forLock; // 0x30
		public static readonly bool isReady; // 0x38
	
		// Constructors
		static Normalization(); // 0x00CDDC18-0x00CDDDEC
	
		// Methods
		private static uint PropValue(int cp); // 0x00CDBD98-0x00CDBE38
		private static int CharMapIdx(int cp); // 0x00CDBE38-0x00CDBED8
		private static byte GetCombiningClass(int c); // 0x00CDBED8-0x00CDBF94
		private static int GetPrimaryCompositeFromMapIndex(int src); // 0x00CDBF94-0x00CDC050
		private static int GetPrimaryCompositeHelperIndex(int cp); // 0x00CDC050-0x00CDC10C
		private static string Compose(string source, int checkType); // 0x00CDC10C-0x00CDC214
		private static StringBuilder Combine(string source, int start, int checkType); // 0x00CDC370-0x00CDC4B4
		private static void Combine(StringBuilder sb, int i, int checkType); // 0x00CDC4B4-0x00CDC5E4
		private static int CombineHangul(StringBuilder sb, string s, int current); // 0x00CDC74C-0x00CDC920
		private static int Fetch(StringBuilder sb, string s, int i); // 0x00CDCC48-0x00CDCC88
		private static int TryComposeWithPreviousStarter(StringBuilder sb, string s, int current); // 0x00CDC9F8-0x00CDCC48
		private static int TryCompose(int i, int starter, int candidate); // 0x00CDCF1C-0x00CDD06C
		private static string Decompose(string source, int checkType); // 0x00CDD06C-0x00CDD108
		private static void Decompose(string source, ref StringBuilder sb, int checkType); // 0x00CDC214-0x00CDC370
		private static void ReorderCanonical(string src, ref StringBuilder sb, int start); // 0x00CDD480-0x00CDD708
		private static void DecomposeChar(ref StringBuilder sb, ref int[] buf, string s, int i, int checkType, ref int start); // 0x00CDD108-0x00CDD2E4
		public static NormalizationCheck QuickCheck(char c, int type); // 0x00CDC5E4-0x00CDC74C
		private static int GetCanonicalHangul(int s, int[] buf, int bufIdx); // 0x00CDD970-0x00CDDA70
		private static int GetCanonical(int c, int[] buf, int bufIdx, int checkType); // 0x00CDD708-0x00CDD908
		public static string Normalize(string source, NormalizationForm normalizationForm); // 0x00CDDA70-0x00CDDB5C
		public static string Normalize(string source, int type); // 0x00CDDB5C-0x00CDDC14
		private static void load_normalization_resource(out IntPtr props, out IntPtr mappedChars, out IntPtr charMapIndex, out IntPtr helperIndex, out IntPtr mapIdxToComposite, out IntPtr combiningClass); // 0x00CDDC14-0x00CDDC18
	}

	internal static class EncodingHelper // TypeDefIndex: 421
	{
		// Fields
		private static Encoding utf8EncodingWithoutMarkers; // 0x00
		private static readonly object lockobj; // 0x08
		private static Assembly i18nAssembly; // 0x10
		private static bool i18nDisabled; // 0x18
	
		// Properties
		internal static Encoding UTF8Unmarked { get; } // 0x00CD90A4-0x00CD92A0 
	
		// Constructors
		static EncodingHelper(); // 0x00CD92A4-0x00CD9310
	
		// Methods
		internal static string InternalCodePage(ref int code_page); // 0x00CD92A0-0x00CD92A4
		internal static Encoding GetDefaultEncoding(); // 0x00CD78B4-0x00CD7A50
		internal static object InvokeI18N(string name, params /* 0x004BD2C0-0x004BD2D0 */ object[] args); // 0x00CD5F00-0x00CD6560
	}

	[ComVisible] // 0x004B36FC-0x004B3710
	public enum NormalizationForm // TypeDefIndex: 422
	{
		FormC = 1,
		FormD = 2,
		FormKC = 5,
		FormKD = 6
	}
}

namespace System.Resources
{
	internal sealed class FastResourceComparer : IComparer, IEqualityComparer, IComparer<string>, IEqualityComparer<string> // TypeDefIndex: 423
	{
		// Fields
		internal static readonly FastResourceComparer Default; // 0x00
	
		// Constructors
		public FastResourceComparer(); // 0x00873924-0x0087392C
		static FastResourceComparer(); // 0x0087392C-0x00873990
	
		// Methods
		public int GetHashCode(object key); // 0x00873450-0x008734E0
		public int GetHashCode(string key); // 0x00873558-0x008735BC
		internal static int HashFunction(string key); // 0x008734E0-0x00873558
		public int Compare(object a, object b); // 0x008735BC-0x0087366C
		public int Compare(string a, string b); // 0x0087366C-0x0087367C
		public bool Equals(string a, string b); // 0x0087367C-0x0087368C
		public new bool Equals(object a, object b); // 0x0087368C-0x0087373C
		public static int CompareOrdinal(string a, byte[] bytes, int bCharLength); // 0x0087373C-0x008737FC
		public static int CompareOrdinal(byte[] bytes, int aCharLength, string b); // 0x008737FC-0x00873880
		internal static unsafe int CompareOrdinal(byte* a, int byteLen, string b); // 0x00873880-0x00873924
	}

	internal class FileBasedResourceGroveler : IResourceGroveler // TypeDefIndex: 424
	{
		// Fields
		private ResourceManager.ResourceManagerMediator _mediator; // 0x10
	
		// Constructors
		public FileBasedResourceGroveler(ResourceManager.ResourceManagerMediator mediator); // 0x00873990-0x008739BC
	
		// Methods
		public ResourceSet GrovelForResourceSet(CultureInfo culture, Dictionary<string, ResourceSet> localResourceSets, bool tryParents, bool createIfNotExists, ref StackCrawlMark stackMark); // 0x008739BC-0x00873D38
		private string FindResourceFile(CultureInfo culture, string fileName); // 0x00873D58-0x00873E20
		private ResourceSet CreateResourceSet(string file); // 0x00873E94-0x00874164
	}

	internal interface IResourceGroveler // TypeDefIndex: 425
	{
		// Methods
		ResourceSet GrovelForResourceSet(CultureInfo culture, Dictionary<string, ResourceSet> localResourceSets, bool tryParents, bool createIfNotExists, ref StackCrawlMark stackMark);
	}

	[ComVisible] // 0x004B3710-0x004B3724
	public interface IResourceReader : IEnumerable, IDisposable // TypeDefIndex: 426
	{
		// Methods
		void Close();
		IDictionaryEnumerator GetEnumerator();
	}

	internal class ManifestBasedResourceGroveler : IResourceGroveler // TypeDefIndex: 427
	{
		// Fields
		private ResourceManager.ResourceManagerMediator _mediator; // 0x10
	
		// Constructors
		public ManifestBasedResourceGroveler(ResourceManager.ResourceManagerMediator mediator); // 0x008742AC-0x008742D8
	
		// Methods
		public ResourceSet GrovelForResourceSet(CultureInfo culture, Dictionary<string, ResourceSet> localResourceSets, bool tryParents, bool createIfNotExists, ref StackCrawlMark stackMark); // 0x008742D8-0x0087457C
		private CultureInfo UltimateFallbackFixup(CultureInfo lookForCulture); // 0x0087457C-0x008746A0
		internal static CultureInfo GetNeutralResourcesLanguage(Assembly a, ref UltimateResourceFallbackLocation fallbackLocation); // 0x008759E4-0x00875D24
		internal ResourceSet CreateResourceSet(Stream store, Assembly assembly); // 0x00874D4C-0x008756B4
		private Stream GetManifestResourceStream(RuntimeAssembly satellite, string fileName, ref StackCrawlMark stackMark); // 0x00874C68-0x00874D4C
		private Stream CaseInsensitiveManifestResourceStreamLookup(RuntimeAssembly satellite, string name); // 0x00876008-0x008763B4
		private RuntimeAssembly GetSatelliteAssembly(CultureInfo lookForCulture, ref StackCrawlMark stackMark); // 0x00874750-0x008748F4
		private bool CanUseDefaultResourceClasses(string readerTypeName, string resSetTypeName); // 0x00875DA0-0x00875F10
		private string GetSatelliteAssemblyName(); // 0x0087647C-0x008764E8
		private void HandleSatelliteMissing(); // 0x008748F4-0x00874C68
		private void HandleResourceStreamMissing(string fileName); // 0x008756B4-0x008759C4
		private static bool GetNeutralResourcesLanguageAttribute(Assembly assembly, ref string cultureName, ref short fallbackLocation); // 0x00875D24-0x00875DA0
	}

	[Serializable]
	[ComVisible] // 0x004B3724-0x004B3738
	public class MissingManifestResourceException : SystemException // TypeDefIndex: 428
	{
		// Constructors
		public MissingManifestResourceException(); // 0x008767D0-0x00876844
		public MissingManifestResourceException(string message); // 0x00873E60-0x00873E94
		protected MissingManifestResourceException(SerializationInfo info, StreamingContext context); // 0x00876844-0x0087684C
	}

	[Serializable]
	[ComVisible] // 0x004B3738-0x004B374C
	public class MissingSatelliteAssemblyException : SystemException // TypeDefIndex: 429
	{
		// Fields
		private string _cultureName; // 0x88
	
		// Constructors
		public MissingSatelliteAssemblyException(); // 0x0087684C-0x008768C0
		public MissingSatelliteAssemblyException(string message, string cultureName); // 0x00876770-0x008767B0
		protected MissingSatelliteAssemblyException(SerializationInfo info, StreamingContext context); // 0x008768C0-0x008768C8
	}

	[AttributeUsage] // 0x004B374C-0x004B3798
	[ComVisible] // 0x004B374C-0x004B3798
	public sealed class NeutralResourcesLanguageAttribute : Attribute // TypeDefIndex: 430
	{
		// Fields
		private string _culture; // 0x10
		private UltimateResourceFallbackLocation _fallbackLoc; // 0x18
	
		// Properties
		public string CultureName { get; } // 0x0087696C-0x00876974 
		public UltimateResourceFallbackLocation Location { get; } // 0x00876974-0x0087697C 
	
		// Constructors
		public NeutralResourcesLanguageAttribute(string cultureName); // 0x008768C8-0x0087696C
	}

	internal class ResourceFallbackManager : IEnumerable<CultureInfo> // TypeDefIndex: 431
	{
		// Fields
		private CultureInfo m_startingCulture; // 0x10
		private CultureInfo m_neutralResourcesCulture; // 0x18
		private bool m_useParents; // 0x20
	
		// Nested types
		[CompilerGenerated] // 0x004B3798-0x004B37A8
		private sealed class _GetEnumerator_d__5 : IEnumerator<CultureInfo> // TypeDefIndex: 432
		{
			// Fields
			private int __1__state; // 0x10
			private CultureInfo __2__current; // 0x18
			public ResourceFallbackManager __4__this; // 0x20
			private CultureInfo _currentCulture_5__1; // 0x28
			private bool _reachedNeutralResourcesCulture_5__2; // 0x30
	
			// Properties
			CultureInfo IEnumerator<System.Globalization.CultureInfo>.Current { [DebuggerHidden] /* 0x004BBA34-0x004BBA44 */ get; } // 0x00876CB4-0x00876CBC 
			object IEnumerator.Current { [DebuggerHidden] /* 0x004BBA54-0x004BBA64 */ get; } // 0x00876D20-0x00876D4C 
	
			// Constructors
			[DebuggerHidden] // 0x004BBA14-0x004BBA24
			public _GetEnumerator_d__5(int __1__state); // 0x00876A98-0x00876AC4
	
			// Methods
			[DebuggerHidden] // 0x004BBA24-0x004BBA34
			void IDisposable.Dispose(); // 0x00876AC4-0x00876AC8
			private bool MoveNext(); // 0x00876AC8-0x00876CB4
			[DebuggerHidden] // 0x004BBA44-0x004BBA54
			void IEnumerator.Reset(); // 0x00876CBC-0x00876D20
		}
	
		// Constructors
		internal ResourceFallbackManager(CultureInfo startingCulture, CultureInfo neutralResourcesCulture, bool useParents); // 0x0087697C-0x00876A20
	
		// Methods
		IEnumerator IEnumerable.GetEnumerator(); // 0x00876A20-0x00876A24
		[IteratorStateMachine] // 0x004BB9B0-0x004BBA14
		public IEnumerator<CultureInfo> GetEnumerator(); // 0x00876A24-0x00876A98
	}

	[Serializable]
	[ComVisible] // 0x004B37A8-0x004B37BC
	public class ResourceManager // TypeDefIndex: 433
	{
		// Fields
		protected string BaseNameField; // 0x10
		[Obsolete] // 0x004B8DE0-0x004B8E18
		protected Hashtable ResourceSets; // 0x18
		[NonSerialized]
		private Dictionary<string, ResourceSet> _resourceSets; // 0x20
		private string moduleDir; // 0x28
		protected Assembly MainAssembly; // 0x30
		private Type _locationInfo; // 0x38
		private Type _userResourceSet; // 0x40
		private CultureInfo _neutralResourcesCulture; // 0x48
		[NonSerialized]
		private CultureNameResourceSetPair _lastUsedResourceCache; // 0x50
		private bool _ignoreCase; // 0x58
		private bool UseManifest; // 0x59
		[System.Runtime.Serialization.OptionalField] // 0x004B8E18-0x004B8E50
		private bool UseSatelliteAssem; // 0x5A
		[System.Runtime.Serialization.OptionalField] // 0x004B8E50-0x004B8E60
		private UltimateResourceFallbackLocation _fallbackLoc; // 0x5C
		[System.Runtime.Serialization.OptionalField] // 0x004B8E60-0x004B8E70
		private System.Version _satelliteContractVersion; // 0x60
		[System.Runtime.Serialization.OptionalField] // 0x004B8E70-0x004B8E80
		private bool _lookedForSatelliteContractVersion; // 0x68
		[System.Runtime.Serialization.OptionalField] // 0x004B8E80-0x004B8EB8
		private Assembly _callingAssembly; // 0x70
		[System.Runtime.Serialization.OptionalField] // 0x004B8EB8-0x004B8EF0
		private RuntimeAssembly m_callingAssembly; // 0x78
		[NonSerialized]
		private IResourceGroveler resourceGroveler; // 0x80
		public static readonly int MagicNumber; // 0x00
		public static readonly int HeaderVersionNumber; // 0x04
		private static readonly Type _minResourceSet; // 0x08
		internal static readonly string ResReaderTypeName; // 0x10
		internal static readonly string ResSetTypeName; // 0x18
		internal static readonly string MscorlibName; // 0x20
		internal static readonly int DEBUG; // 0x28
	
		// Properties
		public virtual string BaseName { get; } // 0x0087745C-0x00877464 
		protected UltimateResourceFallbackLocation FallbackLocation { get; } // 0x00877464-0x0087746C 
	
		// Nested types
		internal class CultureNameResourceSetPair // TypeDefIndex: 434
		{
			// Fields
			public string lastCultureName; // 0x10
			public ResourceSet lastResourceSet; // 0x18
	
			// Constructors
			public CultureNameResourceSetPair(); // 0x00876E9C-0x00876EA4
		}
	
		internal class ResourceManagerMediator // TypeDefIndex: 435
		{
			// Fields
			private ResourceManager _rm; // 0x10
	
			// Properties
			internal string ModuleDir { get; } // 0x00874164-0x00874184 
			internal Type LocationInfo { get; } // 0x00873E40-0x00873E60 
			internal Type UserResourceSet { get; } // 0x00874184-0x008741A4 
			internal string BaseNameField { get; } // 0x00873E20-0x00873E40 
			internal CultureInfo NeutralResourcesCulture { get; } // 0x008759C4-0x008759E4 
			internal bool LookedForSatelliteContractVersion { get; set; } // 0x008763B4-0x008763D4 0x00876458-0x0087647C
			internal System.Version SatelliteContractVersion { get; set; } // 0x008764E8-0x00876508 0x00876438-0x00876458
			internal UltimateResourceFallbackLocation FallbackLoc { get; } // 0x008746A0-0x008746C0 
			internal RuntimeAssembly CallingAssembly { get; } // 0x00875FE8-0x00876008 
			internal RuntimeAssembly MainAssembly { get; } // 0x008746C0-0x00874750 
			internal string BaseName { get; } // 0x008767B0-0x008767D0 
	
			// Constructors
			internal ResourceManagerMediator(ResourceManager rm); // 0x00876EA4-0x00876F44
	
			// Methods
			internal string GetResourceFileName(CultureInfo culture); // 0x00873D38-0x00873D58
			internal System.Version ObtainSatelliteContractVersion(Assembly a); // 0x008763D4-0x00876438
		}
	
		// Constructors
		protected ResourceManager(); // 0x00876DE0-0x00876E9C
		public ResourceManager(string baseName, Assembly assembly); // 0x00876F44-0x0087716C
		static ResourceManager(); // 0x0087920C-0x00879368
	
		// Methods
		private void Init(); // 0x00876D58-0x00876DE0
		[OnDeserializing] // 0x004BBA64-0x004BBA74
		private void OnDeserializing(StreamingContext ctx); // 0x00877280-0x00877290
		[OnDeserialized] // 0x004BBA74-0x004BBA84
		private void OnDeserialized(StreamingContext ctx); // 0x00877290-0x008773EC
		[OnSerializing] // 0x004BBA84-0x004BBA94
		private void OnSerializing(StreamingContext ctx); // 0x008773EC-0x0087745C
		private void CommonAssemblyInit(); // 0x00877170-0x00877280
		protected virtual string GetResourceFileName(CultureInfo culture); // 0x0087746C-0x008775A4
		internal ResourceSet GetFirstResourceSet(CultureInfo culture); // 0x008775A4-0x00877948
		public virtual ResourceSet GetResourceSet(CultureInfo culture, bool createIfNotExists, bool tryParents); // 0x00877948-0x00877CD4
		protected virtual ResourceSet InternalGetResourceSet(CultureInfo culture, bool createIfNotExists, bool tryParents); // 0x00877E7C-0x00877EAC
		private ResourceSet InternalGetResourceSet(CultureInfo requestedCulture, bool createIfNotExists, bool tryParents, ref StackCrawlMark stackMark); // 0x00877EAC-0x0087862C
		private static void AddResourceSet(Dictionary<string, ResourceSet> localResourceSets, string cultureName, ref ResourceSet rs); // 0x00877CD4-0x00877E7C
		protected static System.Version GetSatelliteContractVersion(Assembly a); // 0x0087863C-0x00878D74
		internal static bool CompareNames(string asmTypeName1, string typeName2, AssemblyName asmName2); // 0x00876508-0x00876770
		private void SetAppXConfiguration(); // 0x0087716C-0x00877170
		public virtual string GetString(string name, CultureInfo culture); // 0x00878D74-0x0087920C
	}

	internal struct ResourceLocator // TypeDefIndex: 436
	{
		// Fields
		internal object _value; // 0x00
		internal int _dataPos; // 0x08
	
		// Properties
		internal int DataPosition { get; } // 0x00581DFC-0x00581E04 
		internal object Value { get; set; } // 0x00581E04-0x00581E0C 0x00581E0C-0x00581E58
	
		// Constructors
		internal ResourceLocator(int dataPos, object value); // 0x00581DF0-0x00581DFC
	
		// Methods
		internal static bool CanCache(ResourceTypeCode value); // 0x00876D4C-0x00876D58
	}

	[ComVisible] // 0x004B37BC-0x004B37D0
	public sealed class ResourceReader : IResourceReader // TypeDefIndex: 437
	{
		// Fields
		private BinaryReader _store; // 0x10
		internal Dictionary<string, ResourceLocator> _resCache; // 0x18
		private long _nameSectionOffset; // 0x20
		private long _dataSectionOffset; // 0x28
		private int[] _nameHashes; // 0x30
		private unsafe int* _nameHashesPtr; // 0x38
		private int[] _namePositions; // 0x40
		private unsafe int* _namePositionsPtr; // 0x48
		private RuntimeType[] _typeTable; // 0x50
		private int[] _typeNamePositions; // 0x58
		private BinaryFormatter _objFormatter; // 0x60
		private int _numResources; // 0x68
		private UnmanagedMemoryStream _ums; // 0x70
		private int _version; // 0x78
	
		// Nested types
		internal sealed class ResourceEnumerator : IDictionaryEnumerator // TypeDefIndex: 438
		{
			// Fields
			private ResourceReader _reader; // 0x10
			private bool _currentIsValid; // 0x18
			private int _currentName; // 0x1C
			private int _dataPosition; // 0x20
	
			// Properties
			public object Key { get; } // 0x0087CDA4-0x0087CE80 
			public object Current { get; } // 0x0087CE80-0x0087CEEC 
			internal int DataPosition { get; } // 0x0087D228-0x0087D230 
			public DictionaryEntry Entry { get; } // 0x0087CEEC-0x0087D228 
			public object Value { get; } // 0x0087D230-0x0087D308 
	
			// Constructors
			internal ResourceEnumerator(ResourceReader reader); // 0x00879A0C-0x00879A40
	
			// Methods
			public bool MoveNext(); // 0x0087CD44-0x0087CDA4
			public void Reset(); // 0x0087D308-0x0087D3C0
		}
	
		// Constructors
		internal ResourceReader(Stream stream, Dictionary<string, ResourceLocator> resCache); // 0x00879368-0x00879448
	
		// Methods
		public void Close(); // 0x008795BC-0x00879608
		public void Dispose(); // 0x00879654-0x008796A0
		private void Dispose(bool disposing); // 0x00879608-0x00879654
		internal static unsafe int ReadUnalignedI4(int* p); // 0x008796A0-0x008796A8
		private void SkipString(); // 0x008796A8-0x00879784
		private int GetNameHash(int index); // 0x00879784-0x008797DC
		private int GetNamePosition(int index); // 0x008797DC-0x00879940
		IEnumerator IEnumerable.GetEnumerator(); // 0x00879940-0x00879944
		public IDictionaryEnumerator GetEnumerator(); // 0x00879944-0x00879A0C
		internal ResourceEnumerator GetEnumeratorInternal(); // 0x00879A40-0x00879AAC
		internal int FindPosForResource(string name); // 0x00879AAC-0x00879E98
		private bool CompareStringEqualsName(string name); // 0x00879E98-0x0087A0BC
		private string AllocateStringForNameIndex(int index, out int dataOffset); // 0x0087A0BC-0x0087A9E0
		private object GetValueForNameIndex(int index); // 0x0087A9E0-0x0087ACCC
		internal string LoadString(int pos); // 0x0087AF44-0x0087B214
		internal object LoadObject(int pos); // 0x0087B59C-0x0087B5D4
		internal object LoadObject(int pos, out ResourceTypeCode typeCode); // 0x0087B5D4-0x0087B674
		internal object LoadObjectV1(int pos); // 0x0087ACCC-0x0087AE04
		private object _LoadObjectV1(int pos); // 0x0087B674-0x0087BDE4
		internal object LoadObjectV2(int pos, out ResourceTypeCode typeCode); // 0x0087AE04-0x0087AF44
		private object _LoadObjectV2(int pos, out ResourceTypeCode typeCode); // 0x0087BFEC-0x0087C664
		private object DeserializeObject(int typeIndex); // 0x0087BDE4-0x0087BFEC
		private void ReadResources(); // 0x00879448-0x008795BC
		private void _ReadResources(); // 0x0087C664-0x0087CD44
		private RuntimeType FindType(int typeIndex); // 0x0087B214-0x0087B59C
	}

	[Serializable]
	[ComVisible] // 0x004B37D0-0x004B37E4
	public class ResourceSet : IDisposable, IEnumerable // TypeDefIndex: 439
	{
		// Fields
		[NonSerialized]
		protected IResourceReader Reader; // 0x10
		protected Hashtable Table; // 0x18
		private Hashtable _caseInsensitiveTable; // 0x20
	
		// Constructors
		protected ResourceSet(); // 0x0087D3C0-0x0087D3E8
		internal ResourceSet(bool junk); // 0x0087D448-0x0087D450
	
		// Methods
		private void CommonInit(); // 0x0087D3E8-0x0087D448
		protected virtual void Dispose(bool disposing); // 0x0087D450-0x0087D51C
		public void Dispose(); // 0x0087862C-0x0087863C
		[ComVisible] // 0x004BBA94-0x004BBAA8
		public virtual IDictionaryEnumerator GetEnumerator(); // 0x0087D51C-0x0087D520
		IEnumerator IEnumerable.GetEnumerator(); // 0x0087D5CC-0x0087D5D0
		private IDictionaryEnumerator GetEnumeratorHelper(); // 0x0087D520-0x0087D5CC
		public virtual string GetString(string name); // 0x0087D5D0-0x0087D748
		public virtual string GetString(string name, bool ignoreCase); // 0x0087D848-0x0087DA54
		public virtual object GetObject(string name); // 0x0087DD40-0x0087DD44
		public virtual object GetObject(string name, bool ignoreCase); // 0x0087DD44-0x0087DD94
		private object GetObjectInternal(string name); // 0x0087D748-0x0087D848
		private object GetCaseInsensitiveObjectInternal(string name); // 0x0087DA54-0x0087DD40
	}

	[Serializable]
	internal enum ResourceTypeCode // TypeDefIndex: 440
	{
		Null = 0,
		String = 1,
		Boolean = 2,
		Char = 3,
		Byte = 4,
		SByte = 5,
		Int16 = 6,
		UInt16 = 7,
		Int32 = 8,
		UInt32 = 9,
		Int64 = 10,
		UInt64 = 11,
		Single = 12,
		Double = 13,
		Decimal = 14,
		DateTime = 15,
		TimeSpan = 16,
		LastPrimitive = 16,
		ByteArray = 32,
		Stream = 33,
		StartOfUserTypes = 64
	}

	internal sealed class RuntimeResourceSet : ResourceSet, IEnumerable // TypeDefIndex: 441
	{
		// Fields
		internal const int Version = 2; // Metadata: 0x001E0588
		private Dictionary<string, ResourceLocator> _resCache; // 0x28
		private ResourceReader _defaultReader; // 0x30
		private Dictionary<string, ResourceLocator> _caseInsensitiveTable; // 0x38
		private bool _haveReadFromReader; // 0x40
	
		// Constructors
		internal RuntimeResourceSet(string fileName); // 0x008741A4-0x008742AC
		internal RuntimeResourceSet(Stream stream); // 0x00875F10-0x00875FE8
	
		// Methods
		protected override void Dispose(bool disposing); // 0x0087DD94-0x0087DEA8
		public override IDictionaryEnumerator GetEnumerator(); // 0x0087DEA8-0x0087DEAC
		new IEnumerator IEnumerable.GetEnumerator(); // 0x0087DFC4-0x0087DFC8
		private new IDictionaryEnumerator GetEnumeratorHelper(); // 0x0087DEAC-0x0087DFC4
		public override string GetString(string key); // 0x0087DFC8-0x0087E048
		public override string GetString(string key, bool ignoreCase); // 0x0087E97C-0x0087EA00
		public override object GetObject(string key); // 0x0087EA00-0x0087EA0C
		public override object GetObject(string key, bool ignoreCase); // 0x0087EA0C-0x0087EA18
		private object GetObject(string key, bool ignoreCase, bool isString); // 0x0087E048-0x0087E97C
		private object ResolveResourceLocator(ResourceLocator resLocation, string key, Dictionary<string, ResourceLocator> copyOfCache, bool keyInWrongCase); // 0x0087EA18-0x0087EB6C
	}

	[AttributeUsage] // 0x004B37E4-0x004B382C
	[ComVisible] // 0x004B37E4-0x004B382C
	public sealed class SatelliteContractVersionAttribute : Attribute // TypeDefIndex: 442
	{
		// Fields
		private string _version; // 0x10
	
		// Properties
		public string Version { get; } // 0x0087EC0C-0x0087EEAC 
	
		// Constructors
		public SatelliteContractVersionAttribute(string version); // 0x0087EB6C-0x0087EC0C
	}

	[Serializable]
	[ComVisible] // 0x004B382C-0x004B3840
	public enum UltimateResourceFallbackLocation // TypeDefIndex: 443
	{
		MainAssembly = 0,
		Satellite = 1
	}
}

namespace System.Reflection
{
	public static class CustomAttributeExtensions // TypeDefIndex: 444
	{
		// Extension methods
		public static Attribute GetCustomAttribute(this Assembly element, Type attributeType); // 0x00BE4074-0x00BE407C
		public static T GetCustomAttribute<T>(this Assembly element)
			where T : Attribute;
	}

	[Serializable]
	[ComVisible] // 0x004B3850-0x004B3864
	public sealed class AmbiguousMatchException : SystemException // TypeDefIndex: 445
	{
		// Constructors
		public AmbiguousMatchException(); // 0x00BDFC18-0x00BDFC8C
		public AmbiguousMatchException(string message); // 0x00BDFC8C-0x00BDFCC0
		internal AmbiguousMatchException(SerializationInfo info, StreamingContext context); // 0x00BDFCC0-0x00BDFCC8
	}

	[AttributeUsage] // 0x004B3864-0x004B38B0
	[ComVisible] // 0x004B3864-0x004B38B0
	public sealed class AssemblyCopyrightAttribute : Attribute // TypeDefIndex: 446
	{
		// Fields
		private string m_copyright; // 0x10
	
		// Constructors
		public AssemblyCopyrightAttribute(string copyright); // 0x00BE112C-0x00BE1158
	}

	[AttributeUsage] // 0x004B38B0-0x004B38F8
	[ComVisible] // 0x004B38B0-0x004B38F8
	public sealed class AssemblyTrademarkAttribute : Attribute // TypeDefIndex: 447
	{
		// Fields
		private string m_trademark; // 0x10
	
		// Constructors
		public AssemblyTrademarkAttribute(string trademark); // 0x00BE2668-0x00BE2694
	}

	[AttributeUsage] // 0x004B38F8-0x004B3940
	[ComVisible] // 0x004B38F8-0x004B3940
	public sealed class AssemblyProductAttribute : Attribute // TypeDefIndex: 448
	{
		// Fields
		private string m_product; // 0x10
	
		// Constructors
		public AssemblyProductAttribute(string product); // 0x00BE2610-0x00BE263C
	}

	[AttributeUsage] // 0x004B3940-0x004B398C
	[ComVisible] // 0x004B3940-0x004B398C
	public sealed class AssemblyCompanyAttribute : Attribute // TypeDefIndex: 449
	{
		// Fields
		private string m_company; // 0x10
	
		// Constructors
		public AssemblyCompanyAttribute(string company); // 0x00BE10D4-0x00BE1100
	}

	[AttributeUsage] // 0x004B398C-0x004B39D4
	[ComVisible] // 0x004B398C-0x004B39D4
	public sealed class AssemblyDescriptionAttribute : Attribute // TypeDefIndex: 450
	{
		// Fields
		private string m_description; // 0x10
	
		// Constructors
		public AssemblyDescriptionAttribute(string description); // 0x00BE11B4-0x00BE11E0
	}

	[AttributeUsage] // 0x004B39D4-0x004B3A20
	[ComVisible] // 0x004B39D4-0x004B3A20
	public sealed class AssemblyTitleAttribute : Attribute // TypeDefIndex: 451
	{
		// Fields
		private string m_title; // 0x10
	
		// Constructors
		public AssemblyTitleAttribute(string title); // 0x00BE263C-0x00BE2668
	}

	[AttributeUsage] // 0x004B3A20-0x004B3A68
	[ComVisible] // 0x004B3A20-0x004B3A68
	public sealed class AssemblyConfigurationAttribute : Attribute // TypeDefIndex: 452
	{
		// Fields
		private string m_configuration; // 0x10
	
		// Constructors
		public AssemblyConfigurationAttribute(string configuration); // 0x00BE1100-0x00BE112C
	}

	[AttributeUsage] // 0x004B3A68-0x004B3AB4
	[ComVisible] // 0x004B3A68-0x004B3AB4
	public sealed class AssemblyDefaultAliasAttribute : Attribute // TypeDefIndex: 453
	{
		// Fields
		private string m_defaultAlias; // 0x10
	
		// Constructors
		public AssemblyDefaultAliasAttribute(string defaultAlias); // 0x00BE1158-0x00BE1184
	}

	[AttributeUsage] // 0x004B3AB4-0x004B3AFC
	[ComVisible] // 0x004B3AB4-0x004B3AFC
	public sealed class AssemblyInformationalVersionAttribute : Attribute // TypeDefIndex: 454
	{
		// Fields
		private string m_informationalVersion; // 0x10
	
		// Constructors
		public AssemblyInformationalVersionAttribute(string informationalVersion); // 0x00BE1280-0x00BE12AC
	}

	[AttributeUsage] // 0x004B3AFC-0x004B3B44
	[ComVisible] // 0x004B3AFC-0x004B3B44
	public sealed class AssemblyFileVersionAttribute : Attribute // TypeDefIndex: 455
	{
		// Fields
		private string _version; // 0x10
	
		// Constructors
		public AssemblyFileVersionAttribute(string version); // 0x00BE11E0-0x00BE1280
	}

	[AttributeUsage] // 0x004B3B44-0x004B3B8C
	[ComVisible] // 0x004B3B44-0x004B3B8C
	public sealed class AssemblyKeyFileAttribute : Attribute // TypeDefIndex: 456
	{
		// Fields
		private string m_keyFile; // 0x10
	
		// Constructors
		public AssemblyKeyFileAttribute(string keyFile); // 0x00BE12AC-0x00BE12D8
	}

	[AttributeUsage] // 0x004B3B8C-0x004B3BD4
	[ComVisible] // 0x004B3B8C-0x004B3BD4
	public sealed class AssemblyDelaySignAttribute : Attribute // TypeDefIndex: 457
	{
		// Fields
		private bool m_delaySign; // 0x10
	
		// Constructors
		public AssemblyDelaySignAttribute(bool delaySign); // 0x00BE1184-0x00BE11B4
	}

	[Serializable]
	[ComVisible] // 0x004B3BD4-0x004B3C10
	[Flags] // 0x004B3BD4-0x004B3C10
	public enum AssemblyNameFlags // TypeDefIndex: 458
	{
		None = 0,
		PublicKey = 1,
		Retargetable = 256,
		EnableJITcompileOptimizer = 16384,
		EnableJITcompileTracking = 32768
	}

	[Serializable]
	[ComVisible] // 0x004B3C10-0x004B3C24
	public enum AssemblyContentType // TypeDefIndex: 459
	{
		Default = 0,
		WindowsRuntime = 1
	}

	[Serializable]
	[ComVisible] // 0x004B3C24-0x004B3C38
	public enum ProcessorArchitecture // TypeDefIndex: 460
	{
		None = 0,
		MSIL = 1,
		X86 = 2,
		IA64 = 3,
		Amd64 = 4,
		Arm = 5
	}

	[Serializable]
	[ClassInterface] // 0x004B3C38-0x004B3C78
	[ComVisible] // 0x004B3C38-0x004B3C78
	public abstract class Binder // TypeDefIndex: 461
	{
		// Constructors
		protected Binder(); // 0x00BE2694-0x00BE2698
	
		// Methods
		public abstract MethodBase BindToMethod(BindingFlags bindingAttr, MethodBase[] match, ref object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] names, out object state);
		public abstract FieldInfo BindToField(BindingFlags bindingAttr, FieldInfo[] match, object value, CultureInfo culture);
		public abstract MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers);
		public abstract PropertyInfo SelectProperty(BindingFlags bindingAttr, PropertyInfo[] match, Type returnType, Type[] indexes, ParameterModifier[] modifiers);
		public abstract object ChangeType(object value, Type type, CultureInfo culture);
		public abstract void ReorderArgumentArray(ref object[] args, object state);
	}

	[Serializable]
	[ComVisible] // 0x004B3C78-0x004B3CB4
	[Flags] // 0x004B3C78-0x004B3CB4
	public enum BindingFlags // TypeDefIndex: 462
	{
		Default = 0,
		IgnoreCase = 1,
		DeclaredOnly = 2,
		Instance = 4,
		Static = 8,
		Public = 16,
		NonPublic = 32,
		FlattenHierarchy = 64,
		InvokeMethod = 256,
		CreateInstance = 512,
		GetField = 1024,
		SetField = 2048,
		GetProperty = 4096,
		SetProperty = 8192,
		PutDispProperty = 16384,
		PutRefDispProperty = 32768,
		ExactBinding = 65536,
		SuppressChangeType = 131072,
		OptionalParamBinding = 262144,
		IgnoreReturn = 16777216
	}

	[Serializable]
	[ComVisible] // 0x004B3CB4-0x004B3CF0
	[Flags] // 0x004B3CB4-0x004B3CF0
	public enum CallingConventions // TypeDefIndex: 463
	{
		Standard = 1,
		VarArgs = 2,
		Any = 3,
		HasThis = 32,
		ExplicitThis = 64
	}

	[Serializable]
	[AttributeUsage] // 0x004B3CF0-0x004B3D30
	[ComVisible] // 0x004B3CF0-0x004B3D30
	public sealed class DefaultMemberAttribute : Attribute // TypeDefIndex: 464
	{
		// Fields
		private string m_memberName; // 0x10
	
		// Properties
		public string MemberName { get; } // 0x00BE47EC-0x00BE47F4 
	
		// Constructors
		public DefaultMemberAttribute(string memberName); // 0x00BE47C0-0x00BE47EC
	}

	[Serializable]
	[ComVisible] // 0x004B3D30-0x004B3D6C
	[Flags] // 0x004B3D30-0x004B3D6C
	public enum EventAttributes // TypeDefIndex: 465
	{
		None = 0,
		SpecialName = 512,
		ReservedMask = 1024,
		RTSpecialName = 1024
	}

	[Serializable]
	[ComVisible] // 0x004B3D6C-0x004B3DA8
	[Flags] // 0x004B3D6C-0x004B3DA8
	public enum FieldAttributes // TypeDefIndex: 466
	{
		PrivateScope = 0,
		Private = 1,
		FamANDAssem = 2,
		Assembly = 3,
		Family = 4,
		FamORAssem = 5,
		Public = 6,
		FieldAccessMask = 7,
		Static = 16,
		InitOnly = 32,
		Literal = 64,
		NotSerialized = 128,
		HasFieldRVA = 256,
		SpecialName = 512,
		RTSpecialName = 1024,
		HasFieldMarshal = 4096,
		PinvokeImpl = 8192,
		HasDefault = 32768,
		ReservedMask = 38144
	}

	[Flags] // 0x004B3DA8-0x004B3DB8
	public enum GenericParameterAttributes // TypeDefIndex: 467
	{
		None = 0,
		Covariant = 1,
		Contravariant = 2,
		VarianceMask = 3,
		ReferenceTypeConstraint = 4,
		NotNullableValueTypeConstraint = 8,
		DefaultConstructorConstraint = 16,
		SpecialConstraintMask = 28
	}

	[ComVisible] // 0x004B3DB8-0x004B3DCC
	public interface ICustomAttributeProvider // TypeDefIndex: 468
	{
		// Methods
		object[] GetCustomAttributes(Type attributeType, bool inherit);
		bool IsDefined(Type attributeType, bool inherit);
	}

	[Serializable]
	[ComVisible] // 0x004B3DCC-0x004B3DE0
	public class InvalidFilterCriteriaException : ApplicationException // TypeDefIndex: 469
	{
		// Constructors
		public InvalidFilterCriteriaException(); // 0x00BE83F8-0x00BE846C
		public InvalidFilterCriteriaException(string message); // 0x00BE846C-0x00BE84A0
		protected InvalidFilterCriteriaException(SerializationInfo info, StreamingContext context); // 0x00BE84A0-0x00BE84A8
	}

	[ComVisible] // 0x004B3DE0-0x004B3DF4
	public class ManifestResourceInfo // TypeDefIndex: 470
	{
		// Fields
		private Assembly _containingAssembly; // 0x10
		private string _containingFileName; // 0x18
		private ResourceLocation _resourceLocation; // 0x20
	
		// Properties
		public virtual Assembly ReferencedAssembly { get; } // 0x00BE8560-0x00BE8568 
		public virtual string FileName { get; } // 0x00BE8568-0x00BE8570 
		public virtual ResourceLocation ResourceLocation { get; } // 0x00BE8570-0x00BE8578 
	
		// Constructors
		public ManifestResourceInfo(Assembly containingAssembly, string containingFileName, ResourceLocation resourceLocation); // 0x00BE0E58-0x00BE0E64
	}

	[Serializable]
	[ComVisible] // 0x004B3DF4-0x004B3E30
	[Flags] // 0x004B3DF4-0x004B3E30
	public enum ResourceLocation // TypeDefIndex: 471
	{
		Embedded = 1,
		ContainedInAnotherAssembly = 2,
		ContainedInManifestFile = 4
	}

	[Serializable]
	[Flags] // 0x004B3E30-0x004B3E40
	internal enum PInvokeAttributes // TypeDefIndex: 472
	{
		CharSetNotSpec = 0,
		BestFitUseAssem = 0,
		ThrowOnUnmappableCharUseAssem = 0,
		NoMangle = 1,
		CharSetAnsi = 2,
		CharSetUnicode = 4,
		CharSetMask = 6,
		CharSetAuto = 6,
		BestFitEnabled = 16,
		BestFitDisabled = 32,
		BestFitMask = 48,
		SupportsLastError = 64,
		CallConvWinapi = 256,
		CallConvCdecl = 512,
		CallConvStdcall = 768,
		CallConvThiscall = 1024,
		CallConvFastcall = 1280,
		CallConvMask = 1792,
		ThrowOnUnmappableCharEnabled = 4096,
		ThrowOnUnmappableCharDisabled = 8192,
		ThrowOnUnmappableCharMask = 12288,
		MaxValue = 65535
	}

	[Serializable]
	[ComVisible] // 0x004B3E40-0x004B3E54
	public delegate bool MemberFilter(MemberInfo m, object filterCriteria); // TypeDefIndex: 473; 0x00BE8588-0x00BE8974

	[Serializable]
	[ClassInterface] // 0x004B3E54-0x004B3EE0
	[ComDefaultInterface] // 0x004B3E54-0x004B3EE0
	[ComVisible] // 0x004B3E54-0x004B3EE0
	public abstract class MemberInfo : ICustomAttributeProvider, _MemberInfo // TypeDefIndex: 474
	{
		// Properties
		public abstract MemberTypes MemberType { get; }
		public abstract string Name { get; }
		public abstract Type DeclaringType { get; }
		public abstract Type ReflectedType { get; }
		public virtual int MetadataToken { get; } // 0x00BE8A34-0x00BE8A38 
		public virtual Module Module { get; } // 0x00BE8A38-0x00BE8AF0 
	
		// Constructors
		protected MemberInfo(); // 0x00BE7528-0x00BE752C
	
		// Methods
		public abstract object[] GetCustomAttributes(bool inherit);
		public abstract object[] GetCustomAttributes(Type attributeType, bool inherit);
		public abstract bool IsDefined(Type attributeType, bool inherit);
		public virtual IList<CustomAttributeData> GetCustomAttributesData(); // 0x00BE89D0-0x00BE8A34
		public static bool operator ==(MemberInfo left, MemberInfo right); // 0x00BE4194-0x00BE47C0
		public static bool operator !=(MemberInfo left, MemberInfo right); // 0x00BE8D08-0x00BE8D24
		public override bool Equals(object obj); // 0x00BE8D24-0x00BE8D30
		public override int GetHashCode(); // 0x00BE753C-0x00BE7540
	}

	[Serializable]
	internal class MemberInfoSerializationHolder : ISerializable, IObjectReference // TypeDefIndex: 475
	{
		// Fields
		private string m_memberName; // 0x10
		private RuntimeType m_reflectedType; // 0x18
		private string m_signature; // 0x20
		private string m_signature2; // 0x28
		private MemberTypes m_memberType; // 0x30
		private SerializationInfo m_info; // 0x38
	
		// Constructors
		internal MemberInfoSerializationHolder(SerializationInfo info, StreamingContext context); // 0x00BE8FD8-0x00BE9268
	
		// Methods
		public static void GetSerializationInfo(SerializationInfo info, string name, RuntimeType reflectedClass, string signature, MemberTypes type); // 0x00BE8D30-0x00BE8D44
		public static void GetSerializationInfo(SerializationInfo info, string name, RuntimeType reflectedClass, string signature, string signature2, MemberTypes type, Type[] genericArguments); // 0x00BE8D44-0x00BE8FD8
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00BE9268-0x00BE92EC
		public virtual object GetRealObject(StreamingContext context); // 0x00BE92EC-0x00BE9B2C
	}

	[Serializable]
	[ComVisible] // 0x004B3EE0-0x004B3F1C
	[Flags] // 0x004B3EE0-0x004B3F1C
	public enum MemberTypes // TypeDefIndex: 476
	{
		Constructor = 1,
		Event = 2,
		Field = 4,
		Method = 8,
		Property = 16,
		TypeInfo = 32,
		Custom = 64,
		NestedType = 128,
		All = 191
	}

	[Serializable]
	[ComVisible] // 0x004B3F1C-0x004B3F58
	[Flags] // 0x004B3F1C-0x004B3F58
	public enum MethodAttributes // TypeDefIndex: 477
	{
		PrivateScope = 0,
		ReuseSlot = 0,
		Private = 1,
		FamANDAssem = 2,
		Assembly = 3,
		Family = 4,
		FamORAssem = 5,
		Public = 6,
		MemberAccessMask = 7,
		UnmanagedExport = 8,
		Static = 16,
		Final = 32,
		Virtual = 64,
		HideBySig = 128,
		VtableLayoutMask = 256,
		NewSlot = 256,
		CheckAccessOnOverride = 512,
		Abstract = 1024,
		SpecialName = 2048,
		RTSpecialName = 4096,
		PinvokeImpl = 8192,
		HasSecurity = 16384,
		RequireSecObject = 32768,
		ReservedMask = 53248
	}

	[Serializable]
	[ClassInterface] // 0x004B3F58-0x004B3FE4
	[ComDefaultInterface] // 0x004B3F58-0x004B3FE4
	[ComVisible] // 0x004B3F58-0x004B3FE4
	public abstract class MethodBase : MemberInfo, _MethodBase // TypeDefIndex: 478
	{
		// Properties
		public abstract RuntimeMethodHandle MethodHandle { get; }
		public abstract MethodAttributes Attributes { get; }
		public virtual CallingConventions CallingConvention { get; } // 0x00BE9E5C-0x00BE9E64 
		public virtual bool IsGenericMethodDefinition { get; } // 0x00BE9EE8-0x00BE9EF0 
		public virtual bool ContainsGenericParameters { get; } // 0x00BE9EF0-0x00BE9EF8 
		public virtual bool IsGenericMethod { get; } // 0x00BE9EF8-0x00BE9F00 
		public virtual bool IsSecurityCritical { get; } // 0x00BE9F00-0x00BE9F64 
		public bool IsPublic { get; } // 0x00BE9F88-0x00BE9FB4 
		public bool IsStatic { get; } // 0x00BE9FB4-0x00BE9FD8 
		public bool IsVirtual { get; } // 0x00BE9FD8-0x00BE9FFC 
		public bool IsAbstract { get; } // 0x00BE9FFC-0x00BEA020 
		[ComVisible] // 0x004BD47C-0x004BD490
		public bool IsConstructor { get; } // 0x00BEA020-0x00BEA0CC 
	
		// Constructors
		protected MethodBase(); // 0x00BE269C-0x00BE26A0
	
		// Methods
		public static MethodBase GetMethodFromHandle(RuntimeMethodHandle handle); // 0x00BE9C0C-0x00BE9E1C
		public static bool operator ==(MethodBase left, MethodBase right); // 0x00BE8B0C-0x00BE8D08
		public static bool operator !=(MethodBase left, MethodBase right); // 0x00BE8AF0-0x00BE8B0C
		public override bool Equals(object obj); // 0x00BE9E40-0x00BE9E4C
		public override int GetHashCode(); // 0x00BE2768-0x00BE276C
		internal virtual ParameterInfo[] GetParametersNoCopy(); // 0x00BE9E4C-0x00BE9E5C
		public abstract ParameterInfo[] GetParameters();
		public abstract MethodImplAttributes GetMethodImplementationFlags();
		public abstract object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture);
		[ComVisible] // 0x004BBAC8-0x004BBADC
		public virtual Type[] GetGenericArguments(); // 0x00BE9E64-0x00BE9EE8
		[DebuggerHidden] // 0x004BBADC-0x004BBB14
		[DebuggerStepThrough] // 0x004BBADC-0x004BBB14
		public object Invoke(object obj, object[] parameters); // 0x00BE9F64-0x00BE9F88
		public virtual MethodBody GetMethodBody(); // 0x00BEA0CC-0x00BEA130
		internal static string ConstructParameters(Type[] parameterTypes, CallingConventions callingConvention, bool serialization); // 0x00BEA130-0x00BEA320
		internal virtual string FormatNameAndSig(bool serialization); // 0x00BEA320-0x00BEA438
		internal virtual Type[] GetParameterTypes(); // 0x00BEA438-0x00BEA554
		internal virtual ParameterInfo[] GetParametersInternal(); // 0x00BEA554-0x00BEA564
		internal virtual int GetParametersCount(); // 0x00BEA564-0x00BEA590
		internal static MethodBase GetMethodFromHandleNoGenericCheck(RuntimeMethodHandle handle); // 0x00BEA590-0x00BEA5DC
		internal static MethodBase GetMethodFromHandleNoGenericCheck(RuntimeMethodHandle handle, RuntimeTypeHandle reflectedType); // 0x00BEA5E4-0x00BEA5EC
		internal static MethodBody GetMethodBodyInternal(IntPtr handle); // 0x00BEA5EC-0x00BEA5F0
		internal static MethodBody GetMethodBody(IntPtr handle); // 0x00BEA5F0-0x00BEA5F4
		private static MethodBase GetMethodFromHandleInternalType(IntPtr method_handle, IntPtr type_handle); // 0x00BE9E1C-0x00BE9E24
		internal static MethodBase GetMethodFromHandleInternalType_native(IntPtr method_handle, IntPtr type_handle, bool genericCheck); // 0x00BEA5DC-0x00BEA5E4
	}

	[ComVisible] // 0x004B3FE4-0x004B4020
	[Flags] // 0x004B3FE4-0x004B4020
	public enum ExceptionHandlingClauseOptions // TypeDefIndex: 479
	{
		Clause = 0,
		Filter = 1,
		Finally = 2,
		Fault = 4
	}

	[Serializable]
	[ComVisible] // 0x004B4020-0x004B4034
	public enum MethodImplAttributes // TypeDefIndex: 480
	{
		IL = 0,
		Managed = 0,
		Native = 1,
		OPTIL = 2,
		CodeTypeMask = 3,
		Runtime = 3,
		ManagedMask = 4,
		Unmanaged = 4,
		NoInlining = 8,
		ForwardRef = 16,
		Synchronized = 32,
		NoOptimization = 64,
		PreserveSig = 128,
		AggressiveInlining = 256,
		InternalCall = 4096,
		MaxMethodImplVal = 65535
	}

	[Serializable]
	[ClassInterface] // 0x004B4034-0x004B40C0
	[ComDefaultInterface] // 0x004B4034-0x004B40C0
	[ComVisible] // 0x004B4034-0x004B40C0
	public abstract class MethodInfo : MethodBase, _MethodInfo // TypeDefIndex: 481
	{
		// Properties
		public override MemberTypes MemberType { get; } // 0x00BEA614-0x00BEA61C 
		public virtual Type ReturnType { get; } // 0x00BEA61C-0x00BEA680 
	
		// Constructors
		protected MethodInfo(); // 0x00BEA600-0x00BEA604
	
		// Methods
		public static bool operator ==(MethodInfo left, MethodInfo right); // 0x00BE9B2C-0x00BE9C0C
		public static bool operator !=(MethodInfo left, MethodInfo right); // 0x00BE9E24-0x00BE9E40
		public override bool Equals(object obj); // 0x00BEA604-0x00BEA610
		public override int GetHashCode(); // 0x00BEA610-0x00BEA614
		[ComVisible] // 0x004BBB14-0x004BBB28
		public override Type[] GetGenericArguments(); // 0x00BEA680-0x00BEA704
		[ComVisible] // 0x004BBB28-0x004BBB3C
		public virtual MethodInfo GetGenericMethodDefinition(); // 0x00BEA704-0x00BEA788
		public virtual MethodInfo MakeGenericMethod(params /* 0x004BD2D0-0x004BD2E0 */ Type[] typeArguments); // 0x00BEA788-0x00BEA80C
		internal virtual MethodInfo GetBaseMethod(); // 0x00BEA80C-0x00BEA810
	}

	[Serializable]
	[ComVisible] // 0x004B40C0-0x004B40D4
	public sealed class Missing : ISerializable // TypeDefIndex: 482
	{
		// Fields
		public static readonly Missing Value; // 0x00
	
		// Constructors
		private Missing(); // 0x00BEA810-0x00BEA814
		static Missing(); // 0x00BEA8B0-0x00BEA908
	
		// Methods
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00BEA814-0x00BEA8B0
	}

	[Serializable]
	[ComVisible] // 0x004B40D4-0x004B4110
	[Flags] // 0x004B40D4-0x004B4110
	public enum ParameterAttributes // TypeDefIndex: 483
	{
		None = 0,
		In = 1,
		Out = 2,
		Lcid = 4,
		Retval = 8,
		Optional = 16,
		HasDefault = 4096,
		HasFieldMarshal = 8192,
		Reserved3 = 16384,
		Reserved4 = 32768,
		ReservedMask = 61440
	}

	[Serializable]
	[ComVisible] // 0x004B4110-0x004B4160
	[DefaultMember] // 0x004B4110-0x004B4160
	public struct ParameterModifier // TypeDefIndex: 484
	{
		// Fields
		private bool[] _byRef; // 0x00
	}

	[Serializable]
	[CLSCompliant] // 0x004B4160-0x004B41A0
	[ComVisible] // 0x004B4160-0x004B41A0
	public sealed class Pointer : ISerializable // TypeDefIndex: 485
	{
		// Fields
		private unsafe void* _ptr; // 0x10
		private RuntimeType _ptrType; // 0x18
	
		// Constructors
		private Pointer(); // 0x008702E0-0x008702E8
		private Pointer(SerializationInfo info, StreamingContext context); // 0x008702E8-0x00870440
	
		// Methods
		public static unsafe object Box(void* ptr, Type type); // 0x00870440-0x00870608
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00870608-0x008706B4
	}

	[Serializable]
	[ComVisible] // 0x004B41A0-0x004B41DC
	[Flags] // 0x004B41A0-0x004B41DC
	public enum PropertyAttributes // TypeDefIndex: 486
	{
		None = 0,
		SpecialName = 512,
		RTSpecialName = 1024,
		HasDefault = 4096,
		Reserved2 = 8192,
		Reserved3 = 16384,
		Reserved4 = 32768,
		ReservedMask = 62464
	}

	[Serializable]
	[ComVisible] // 0x004B41DC-0x004B41F0
	public sealed class ReflectionTypeLoadException : SystemException, ISerializable // TypeDefIndex: 487
	{
		// Fields
		private Type[] _classes; // 0x88
		private Exception[] _exceptions; // 0x90
	
		// Constructors
		private ReflectionTypeLoadException(); // 0x00870A78-0x00870AEC
		public ReflectionTypeLoadException(Type[] classes, Exception[] exceptions); // 0x00870AEC-0x00870B38
		internal ReflectionTypeLoadException(SerializationInfo info, StreamingContext context); // 0x00870B38-0x00870CA4
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00870CA4-0x00870DEC
	}

	[Serializable]
	[ComVisible] // 0x004B41F0-0x004B4204
	public class TargetException : ApplicationException // TypeDefIndex: 488
	{
		// Constructors
		public TargetException(); // 0x00872754-0x00872788
		public TargetException(string message); // 0x00870FB0-0x00870FE4
		protected TargetException(SerializationInfo info, StreamingContext context); // 0x00872788-0x00872790
	}

	[Serializable]
	[ComVisible] // 0x004B4204-0x004B4218
	public sealed class TargetInvocationException : ApplicationException // TypeDefIndex: 489
	{
		// Constructors
		private TargetInvocationException(); // 0x00872790-0x00872804
		public TargetInvocationException(Exception inner); // 0x00872804-0x00872888
		public TargetInvocationException(string message, Exception inner); // 0x00872888-0x008728BC
		internal TargetInvocationException(SerializationInfo info, StreamingContext context); // 0x008728BC-0x008728C4
	}

	[Serializable]
	[ComVisible] // 0x004B4218-0x004B422C
	public sealed class TargetParameterCountException : ApplicationException // TypeDefIndex: 490
	{
		// Constructors
		public TargetParameterCountException(); // 0x008728C4-0x00872938
		public TargetParameterCountException(string message); // 0x00872938-0x0087296C
		internal TargetParameterCountException(SerializationInfo info, StreamingContext context); // 0x0087296C-0x00872974
	}

	[Serializable]
	[ComVisible] // 0x004B422C-0x004B4268
	[Flags] // 0x004B422C-0x004B4268
	public enum TypeAttributes // TypeDefIndex: 491
	{
		NotPublic = 0,
		AutoLayout = 0,
		Class = 0,
		AnsiClass = 0,
		Public = 1,
		NestedPublic = 2,
		NestedPrivate = 3,
		NestedFamily = 4,
		NestedAssembly = 5,
		NestedFamANDAssem = 6,
		VisibilityMask = 7,
		NestedFamORAssem = 7,
		SequentialLayout = 8,
		ExplicitLayout = 16,
		LayoutMask = 24,
		ClassSemanticsMask = 32,
		Interface = 32,
		Abstract = 128,
		Sealed = 256,
		SpecialName = 1024,
		RTSpecialName = 2048,
		Import = 4096,
		Serializable = 8192,
		WindowsRuntime = 16384,
		UnicodeClass = 65536,
		AutoClass = 131072,
		StringFormatMask = 196608,
		CustomFormatClass = 196608,
		HasSecurity = 262144,
		ReservedMask = 264192,
		BeforeFieldInit = 1048576,
		CustomFormatMask = 12582912
	}

	[Serializable]
	[ComVisible] // 0x004B4268-0x004B427C
	public delegate bool TypeFilter(Type m, object filterCriteria); // TypeDefIndex: 492; 0x00872984-0x00872D70

	[Serializable]
	[ComVisible] // 0x004B427C-0x004B4290
	public abstract class TypeInfo : Type // TypeDefIndex: 493
	{
		// Constructors
		[FriendAccessAllowed] // 0x004BBB3C-0x004BBB4C
		internal TypeInfo(); // 0x00872DCC-0x00872E34
	}

	[Serializable]
	[ClassInterface] // 0x004B4290-0x004B431C
	[ComDefaultInterface] // 0x004B4290-0x004B431C
	[ComVisible] // 0x004B4290-0x004B431C
	public class Assembly : ICustomAttributeProvider, ISerializable, _Assembly // TypeDefIndex: 494
	{
		// Fields
		internal IntPtr _mono_assembly; // 0x10
		private ResolveEventHolder resolve_event_holder; // 0x18
		private object _evidence; // 0x20
		private object _minimum; // 0x28
		private object _optional; // 0x30
		private object _refuse; // 0x38
		private object _granted; // 0x40
		private object _denied; // 0x48
		private bool fromByteArray; // 0x50
		private string assemblyName; // 0x58
	
		// Properties
		public virtual string CodeBase { get; } // 0x00BDFD3C-0x00BDFD44 
		public virtual string FullName { get; } // 0x00BDFD44-0x00BDFD50 
		public virtual string Location { get; } // 0x00BDFD50-0x00BDFDB8 
		[ComVisible] // 0x004BD490-0x004BD4A4
		public virtual bool ReflectionOnly { get; } // 0x00BE0E64-0x00BE0E68 
		[MonoTODO] // 0x004BD4A4-0x004BD4B4
		public bool IsFullyTrusted { get; } // 0x00BE0F90-0x00BE0F98 
	
		// Nested types
		internal class ResolveEventHolder // TypeDefIndex: 495
		{
			// Constructors
			public ResolveEventHolder(); // 0x00BDFD1C-0x00BDFD20
		}
	
		internal class UnmanagedMemoryStreamForModule : UnmanagedMemoryStream // TypeDefIndex: 496
		{
			// Fields
			private Module module; // 0x60
	
			// Constructors
			public unsafe UnmanagedMemoryStreamForModule(byte* pointer, long length, Module module); // 0x00BE02D0-0x00BE02FC
	
			// Methods
			protected override void Dispose(bool disposing); // 0x00BE10BC-0x00BE10D4
		}
	
		// Constructors
		protected Assembly(); // 0x00BDFCC8-0x00BDFD1C
	
		// Methods
		private string get_code_base(bool escaped); // 0x00BDFD20-0x00BDFD28
		private string get_fullname(); // 0x00BDFD28-0x00BDFD2C
		private string get_location(); // 0x00BDFD2C-0x00BDFD30
		internal static string GetAotId(); // 0x00BDFD30-0x00BDFD34
		private string GetCodeBase(bool escaped); // 0x00BDFD34-0x00BDFD3C
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00BDFDB8-0x00BDFE1C
		public virtual bool IsDefined(Type attributeType, bool inherit); // 0x00BDFE1C-0x00BDFE9C
		public virtual object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00BDFE9C-0x00BDFF1C
		internal IntPtr GetManifestResourceInternal(string name, out int size, out Module module); // 0x00BDFF1C-0x00BDFF20
		public virtual Stream GetManifestResourceStream(string name); // 0x00BDFF20-0x00BE0274
		internal Stream GetManifestResourceStream(Type type, string name, bool skipSecurityCheck, ref StackCrawlMark stackMark); // 0x00BE02FC-0x00BE049C
		internal Stream GetManifestResourceStream(string name, ref StackCrawlMark stackMark, bool skipSecurityCheck); // 0x00BE049C-0x00BE04B0
		internal string GetSimpleName(); // 0x00BE04B0-0x00BE04E0
		internal byte[] GetPublicKey(); // 0x00BE04E0-0x00BE0510
		internal System.Version GetVersion(); // 0x00BE0510-0x00BE0540
		private AssemblyNameFlags GetFlags(); // 0x00BE0540-0x00BE0570
		internal virtual Type[] GetTypes(bool exportedOnly); // 0x00BE0570-0x00BE0578
		public virtual Type[] GetTypes(); // 0x00BE0578-0x00BE058C
		public virtual Type GetType(string name); // 0x00BE058C-0x00BE05A4
		internal Type InternalGetType(Module module, string name, bool throwOnError, bool ignoreCase); // 0x00BE05A4-0x00BE05B0
		public virtual AssemblyName GetName(bool copiedName); // 0x00BE05B0-0x00BE0614
		public virtual AssemblyName GetName(); // 0x00BE0614-0x00BE0628
		public override string ToString(); // 0x00BE0628-0x00BE0658
		public static Assembly GetAssembly(Type type); // 0x00BE0658-0x00BE0728
		internal RuntimeAssembly InternalGetSatelliteAssembly(string name, CultureInfo culture, System.Version version, bool throwOnFileNotFound, ref StackCrawlMark stackMark); // 0x00BE0728-0x00BE0B20
		private static Assembly LoadFrom(string assemblyFile, bool refonly); // 0x00BE0C0C-0x00BE0C14
		public static Assembly LoadFrom(string assemblyFile); // 0x00BE0C04-0x00BE0C0C
		public static Assembly Load(string assemblyString); // 0x00BE0C14-0x00BE0C48
		private static Assembly load_with_partial_name(string name, Evidence e); // 0x00BE0C48-0x00BE0C4C
		[Obsolete] // 0x004BBB4C-0x004BBB84
		public static Assembly LoadWithPartialName(string partialName, Evidence securityEvidence); // 0x00BE0C4C-0x00BE0C54
		internal static Assembly LoadWithPartialName(string partialName, Evidence securityEvidence, bool oldBehavior); // 0x00BE0C54-0x00BE0D08
		internal virtual Module[] GetModulesInternal(); // 0x00BE0D08-0x00BE0D0C
		public virtual string[] GetManifestResourceNames(); // 0x00BE0D0C-0x00BE0D10
		public static Assembly GetExecutingAssembly(); // 0x00BE0D10-0x00BE0D58
		public static Assembly GetCallingAssembly(); // 0x00BE0D58-0x00BE0D5C
		private bool GetManifestResourceInfoInternal(string name, ManifestResourceInfo info); // 0x00BE0D5C-0x00BE0D60
		public virtual ManifestResourceInfo GetManifestResourceInfo(string resourceName); // 0x00BE0D60-0x00BE0E58
		public override int GetHashCode(); // 0x00BE0E68-0x00BE0E6C
		public override bool Equals(object o); // 0x00BE0E6C-0x00BE0F28
		private static Exception CreateNIE(); // 0x00BE0F28-0x00BE0F90
		public virtual Type GetType(string name, bool throwOnError, bool ignoreCase); // 0x00BE0F98-0x00BE0FE0
		public virtual Module GetModule(string name); // 0x00BE0FE0-0x00BE1028
		public virtual Module[] GetModules(bool getResourceModules); // 0x00BE1028-0x00BE1070
		public static bool operator ==(Assembly left, Assembly right); // 0x00BE1070-0x00BE10BC
		public static bool operator !=(Assembly left, Assembly right); // 0x00BE0274-0x00BE02D0
	}

	[Serializable]
	[ClassInterface] // 0x004B431C-0x004B43A8
	[ComDefaultInterface] // 0x004B431C-0x004B43A8
	[ComVisible] // 0x004B431C-0x004B43A8
	public sealed class AssemblyName : ICloneable, ISerializable, IDeserializationCallback, _AssemblyName // TypeDefIndex: 497
	{
		// Fields
		private string name; // 0x10
		private string codebase; // 0x18
		private int major; // 0x20
		private int minor; // 0x24
		private int build; // 0x28
		private int revision; // 0x2C
		private CultureInfo cultureinfo; // 0x30
		private AssemblyNameFlags flags; // 0x38
		private AssemblyHashAlgorithm hashalg; // 0x3C
		private StrongNameKeyPair keypair; // 0x40
		private byte[] publicKey; // 0x48
		private byte[] keyToken; // 0x50
		private AssemblyVersionCompatibility versioncompat; // 0x58
		private System.Version version; // 0x60
		private ProcessorArchitecture processor_architecture; // 0x68
		private AssemblyContentType contentType; // 0x6C
	
		// Properties
		public string Name { get; set; } // 0x00BE1B40-0x00BE1B48 0x00BE1B48-0x00BE1B50
		public CultureInfo CultureInfo { get; set; } // 0x00BE1B50-0x00BE1B58 0x00BE1B58-0x00BE1B60
		public AssemblyNameFlags Flags { get; set; } // 0x00BE1B60-0x00BE1B68 0x00BE1B68-0x00BE1B70
		public string FullName { get; } // 0x00BE1B70-0x00BE1EA8 
		public System.Version Version { get; set; } // 0x00BE1F94-0x00BE1F9C 0x00BE0B4C-0x00BE0C04
		private bool IsPublicKeyValid { get; } // 0x00BE20C4-0x00BE215C 
	
		// Constructors
		public AssemblyName(); // 0x00BE0B20-0x00BE0B2C
		public AssemblyName(string assemblyName); // 0x00BE12DC-0x00BE1510
		internal AssemblyName(SerializationInfo si, StreamingContext sc); // 0x00BE17AC-0x00BE1B40
	
		// Methods
		private static bool ParseAssemblyName(IntPtr name, out MonoAssemblyName aname, out bool is_version_definited, out bool is_token_defined); // 0x00BE12D8-0x00BE12DC
		public override string ToString(); // 0x00BE1F9C-0x00BE1FD0
		public byte[] GetPublicKey(); // 0x00BE1FD0-0x00BE1FD8
		public byte[] GetPublicKeyToken(); // 0x00BE1FD8-0x00BE20C4
		private byte[] InternalGetPublicKeyToken(); // 0x00BE1EA8-0x00BE1F94
		private static unsafe void get_public_token(byte* token, byte* pubkey, int len); // 0x00BE21F4-0x00BE21F8
		private byte[] ComputePublicKeyToken(); // 0x00BE215C-0x00BE21F4
		public void SetPublicKey(byte[] publicKey); // 0x00BE0B2C-0x00BE0B4C
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00BE21F8-0x00BE2464
		public object Clone(); // 0x00BE2464-0x00BE253C
		public void OnDeserialization(object sender); // 0x00BE253C-0x00BE2544
		private static unsafe MonoAssemblyName* GetNativeName(IntPtr assembly_ptr); // 0x00BE2544-0x00BE2548
		internal unsafe void FillName(MonoAssemblyName* native, string codeBase, bool addVersion, bool addPublickey, bool defaultToken, bool assemblyRef); // 0x00BE1510-0x00BE17AC
		internal static AssemblyName Create(Assembly assembly, bool fillCodebase); // 0x00BE2548-0x00BE2610
	}

	[Serializable]
	[ClassInterface] // 0x004B43A8-0x004B4434
	[ComDefaultInterface] // 0x004B43A8-0x004B4434
	[ComVisible] // 0x004B43A8-0x004B4434
	public abstract class ConstructorInfo : MethodBase, _ConstructorInfo // TypeDefIndex: 498
	{
		// Fields
		[ComVisible] // 0x004B8F18-0x004B8F2C
		public static readonly string ConstructorName; // 0x00
		[ComVisible] // 0x004B8F2C-0x004B8F40
		public static readonly string TypeConstructorName; // 0x08
	
		// Properties
		[ComVisible] // 0x004BD4B4-0x004BD4C8
		public override MemberTypes MemberType { get; } // 0x00BE26A0-0x00BE26A8 
	
		// Constructors
		protected ConstructorInfo(); // 0x00BE2698-0x00BE269C
		static ConstructorInfo(); // 0x00BE2814-0x00BE2888
	
		// Methods
		[DebuggerHidden] // 0x004BBB84-0x004BBBBC
		[DebuggerStepThrough] // 0x004BBB84-0x004BBBBC
		public object Invoke(object[] parameters); // 0x00BE26A8-0x00BE2758
		public abstract object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture);
		public override bool Equals(object obj); // 0x00BE2758-0x00BE2764
		public override int GetHashCode(); // 0x00BE2764-0x00BE2768
		public static bool operator ==(ConstructorInfo left, ConstructorInfo right); // 0x00BE276C-0x00BE27B8
		public static bool operator !=(ConstructorInfo left, ConstructorInfo right); // 0x00BE27B8-0x00BE2814
	}

	[Serializable]
	[ComVisible] // 0x004B4434-0x004B4448
	public class CustomAttributeData // TypeDefIndex: 499
	{
		// Fields
		private ConstructorInfo ctorInfo; // 0x10
		private IList<CustomAttributeTypedArgument> ctorArgs; // 0x18
		private IList<CustomAttributeNamedArgument> namedArgs; // 0x20
		private LazyCAttrData lazyData; // 0x28
	
		// Properties
		[ComVisible] // 0x004BD4C8-0x004BD4DC
		public virtual ConstructorInfo Constructor { get; } // 0x00BE2A5C-0x00BE2A64 
		[ComVisible] // 0x004BD4DC-0x004BD4F0
		public virtual IList<CustomAttributeTypedArgument> ConstructorArguments { get; } // 0x00BE2A64-0x00BE2A88 
		public virtual IList<CustomAttributeNamedArgument> NamedArguments { get; } // 0x00BE2A88-0x00BE2AAC 
		public Type AttributeType { get; } // 0x00BE2CB4-0x00BE2CD4 
	
		// Nested types
		private class LazyCAttrData // TypeDefIndex: 500
		{
			// Fields
			internal Assembly assembly; // 0x10
			internal IntPtr data; // 0x18
			internal uint data_length; // 0x20
	
			// Constructors
			public LazyCAttrData(); // 0x00BE2930-0x00BE2934
		}
	
		// Constructors
		protected CustomAttributeData(); // 0x00BE2888-0x00BE288C
		internal CustomAttributeData(ConstructorInfo ctorInfo, Assembly assembly, IntPtr data, uint data_length); // 0x00BE288C-0x00BE2930
	
		// Methods
		private static void ResolveArgumentsInternal(ConstructorInfo ctor, Assembly assembly, IntPtr data, uint data_length, out object[] ctorArgs, out object[] namedArgs); // 0x00BE2934-0x00BE2938
		private void ResolveArguments(); // 0x00BE2938-0x00BE2A5C
		public static IList<CustomAttributeData> GetCustomAttributes(Assembly target); // 0x00BE2AAC-0x00BE2B14
		public static IList<CustomAttributeData> GetCustomAttributes(MemberInfo target); // 0x00BE2B14-0x00BE2B7C
		internal static IList<CustomAttributeData> GetCustomAttributesInternal(RuntimeType target); // 0x00BE2B7C-0x00BE2BE4
		public static IList<CustomAttributeData> GetCustomAttributes(Module target); // 0x00BE2BE4-0x00BE2C4C
		public static IList<CustomAttributeData> GetCustomAttributes(ParameterInfo target); // 0x00BE2C4C-0x00BE2CB4
		public override string ToString(); // 0x00BE2CD4-0x00BE34A8
		private static T[] UnboxValues<T>(object[] values);
		public override bool Equals(object obj); // 0x00BE34A8-0x00BE3CD0
		public override int GetHashCode(); // 0x00BE3CD0-0x00BE4074
	}

	[Serializable]
	[ComVisible] // 0x004B4448-0x004B445C
	public class CustomAttributeFormatException : FormatException // TypeDefIndex: 501
	{
		// Constructors
		public CustomAttributeFormatException(); // 0x00BE407C-0x00BE40DC
		public CustomAttributeFormatException(string message); // 0x00BE40DC-0x00BE40E4
		protected CustomAttributeFormatException(SerializationInfo info, StreamingContext context); // 0x00BE40E4-0x00BE4194
	}

	[Serializable]
	[ComVisible] // 0x004B445C-0x004B4470
	public struct CustomAttributeNamedArgument // TypeDefIndex: 502
	{
		// Fields
		private CustomAttributeTypedArgument typedArgument; // 0x00
		private MemberInfo memberInfo; // 0x10
	
		// Properties
		public MemberInfo MemberInfo { get; } // 0x0058DDD0-0x0058DDD8 
		public CustomAttributeTypedArgument TypedValue { get; } // 0x0058DDD8-0x0058DDE4 
	
		// Constructors
		public CustomAttributeNamedArgument(MemberInfo memberInfo, object value); // 0x0058DDC8-0x0058DDD0
	
		// Methods
		public override string ToString(); // 0x0058DDE4-0x0058DDEC
		public override bool Equals(object obj); // 0x0058DDEC-0x0058DDF4
		public override int GetHashCode(); // 0x0058DDF4-0x0058DE40
	}

	[Serializable]
	[ComVisible] // 0x004B4470-0x004B4484
	public struct CustomAttributeTypedArgument // TypeDefIndex: 503
	{
		// Fields
		private Type argumentType; // 0x00
		private object value; // 0x08
	
		// Properties
		public object Value { get; } // 0x0058DE48-0x0058DE50 
	
		// Constructors
		public CustomAttributeTypedArgument(Type argumentType, object value); // 0x0058DE40-0x0058DE48
	
		// Methods
		public override string ToString(); // 0x0058DE50-0x0058DE58
		public override bool Equals(object obj); // 0x0058DE58-0x0058DE60
		public override int GetHashCode(); // 0x0058DE60-0x0058E228
	}

	[Serializable]
	[ClassInterface] // 0x004B4484-0x004B4510
	[ComDefaultInterface] // 0x004B4484-0x004B4510
	[ComVisible] // 0x004B4484-0x004B4510
	public abstract class EventInfo : MemberInfo, _EventInfo // TypeDefIndex: 504
	{
		// Fields
		private AddEventAdapter cached_add_event; // 0x10
	
		// Properties
		public virtual Type EventHandlerType { get; } // 0x00BE74A4-0x00BE751C 
		public override MemberTypes MemberType { get; } // 0x00BE751C-0x00BE7524 
	
		// Nested types
		private delegate void AddEventAdapter(object _this, Delegate dele); // TypeDefIndex: 505; 0x00BE76D8-0x00BE7AB8
	
		// Constructors
		protected EventInfo(); // 0x00BE7524-0x00BE7528
	
		// Methods
		public abstract MethodInfo GetAddMethod(bool nonPublic);
		public abstract MethodInfo GetRaiseMethod(bool nonPublic);
		public abstract MethodInfo GetRemoveMethod(bool nonPublic);
		public override bool Equals(object obj); // 0x00BE752C-0x00BE7538
		public override int GetHashCode(); // 0x00BE7538-0x00BE753C
		public static bool operator ==(EventInfo left, EventInfo right); // 0x00BE7540-0x00BE758C
		public static bool operator !=(EventInfo left, EventInfo right); // 0x00BE758C-0x00BE75E8
		private static EventInfo internal_from_handle_type(IntPtr event_handle, IntPtr type_handle); // 0x00BE75E8-0x00BE75EC
		internal static EventInfo GetEventFromHandle(RuntimeEventHandle handle, RuntimeTypeHandle reflectedType); // 0x00BE75EC-0x00BE76C8
	}

	[ComVisible] // 0x004B4510-0x004B4524
	public class ExceptionHandlingClause // TypeDefIndex: 506
	{
		// Fields
		internal Type catch_type; // 0x10
		internal int filter_offset; // 0x18
		internal ExceptionHandlingClauseOptions flags; // 0x1C
		internal int try_offset; // 0x20
		internal int try_length; // 0x24
		internal int handler_offset; // 0x28
		internal int handler_length; // 0x2C
	
		// Constructors
		protected ExceptionHandlingClause(); // 0x00BE7AF4-0x00BE7AF8
	
		// Methods
		public override string ToString(); // 0x00BE7AF8-0x00BE7D90
	}

	[Serializable]
	[ClassInterface] // 0x004B4524-0x004B45B0
	[ComDefaultInterface] // 0x004B4524-0x004B45B0
	[ComVisible] // 0x004B4524-0x004B45B0
	public abstract class FieldInfo : MemberInfo, _FieldInfo // TypeDefIndex: 507
	{
		// Properties
		public abstract FieldAttributes Attributes { get; }
		public abstract RuntimeFieldHandle FieldHandle { get; }
		public abstract Type FieldType { get; }
		public override MemberTypes MemberType { get; } // 0x00BE7D94-0x00BE7D9C 
		public bool IsLiteral { get; } // 0x00BE7D9C-0x00BE7DC0 
		public bool IsStatic { get; } // 0x00BE7DC0-0x00BE7DE4 
		public bool IsInitOnly { get; } // 0x00BE7DE4-0x00BE7E08 
		public bool IsNotSerialized { get; } // 0x00BE7E08-0x00BE7E2C 
	
		// Constructors
		protected FieldInfo(); // 0x00BE7D90-0x00BE7D94
	
		// Methods
		public abstract object GetValue(object obj);
		public abstract void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture);
		[DebuggerHidden] // 0x004BBBBC-0x004BBBF4
		[DebuggerStepThrough] // 0x004BBBBC-0x004BBBF4
		public void SetValue(object obj, object value); // 0x00BE7E2C-0x00BE7E48
		private static FieldInfo internal_from_handle_type(IntPtr field_handle, IntPtr type_handle); // 0x00BE7E48-0x00BE7E4C
		public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle); // 0x00BE7E4C-0x00BE7EE8
		[ComVisible] // 0x004BBBF4-0x004BBC08
		public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle, RuntimeTypeHandle declaringType); // 0x00BE7EE8-0x00BE7FC4
		internal virtual int GetFieldOffset(); // 0x00BE8010-0x00BE8080
		[CLSCompliant] // 0x004BBC08-0x004BBC1C
		public virtual void SetValueDirect(TypedReference obj, object value); // 0x00BE8080-0x00BE8104
		private MarshalAsAttribute get_marshal_info(); // 0x00BE8104-0x00BE8108
		internal object[] GetPseudoCustomAttributes(); // 0x00BE8108-0x00BE831C
		public virtual object GetRawConstantValue(); // 0x00BE831C-0x00BE838C
		public override bool Equals(object obj); // 0x00BE838C-0x00BE8398
		public override int GetHashCode(); // 0x00BE8398-0x00BE839C
		public static bool operator ==(FieldInfo left, FieldInfo right); // 0x00BE7FC4-0x00BE8010
		public static bool operator !=(FieldInfo left, FieldInfo right); // 0x00BE839C-0x00BE83F8
	}

	[ComVisible] // 0x004B45B0-0x004B45C4
	public class LocalVariableInfo // TypeDefIndex: 508
	{
		// Fields
		internal Type type; // 0x10
		internal bool is_pinned; // 0x18
		internal ushort position; // 0x1A
	
		// Constructors
		protected LocalVariableInfo(); // 0x00BE84A8-0x00BE84AC
	
		// Methods
		public override string ToString(); // 0x00BE84AC-0x00BE8560
	}

	[ComVisible] // 0x004B45C4-0x004B45D8
	public class MethodBody // TypeDefIndex: 509
	{
		// Fields
		private ExceptionHandlingClause[] clauses; // 0x10
		private LocalVariableInfo[] locals; // 0x18
		private byte[] il; // 0x20
		private bool init_locals; // 0x28
		private int sig_token; // 0x2C
		private int max_stack; // 0x30
	
		// Constructors
		protected MethodBody(); // 0x00BEA5F4-0x00BEA5F8
	
		// Methods
		public virtual byte[] GetILAsByteArray(); // 0x00BEA5F8-0x00BEA600
	}

	[Serializable]
	[ClassInterface] // 0x004B45D8-0x004B4664
	[ComDefaultInterface] // 0x004B45D8-0x004B4664
	[ComVisible] // 0x004B45D8-0x004B4664
	public abstract class Module : ISerializable, ICustomAttributeProvider, _Module // TypeDefIndex: 510
	{
		// Fields
		public static readonly TypeFilter FilterTypeName; // 0x00
		public static readonly TypeFilter FilterTypeNameIgnoreCase; // 0x08
		internal IntPtr _impl; // 0x10
		internal Assembly assembly; // 0x18
		internal string fqname; // 0x20
		internal string name; // 0x28
		internal string scopename; // 0x30
		internal bool is_resource; // 0x38
		internal int token; // 0x3C
		private const BindingFlags defaultBindingFlags = BindingFlags.Default | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public; // Metadata: 0x001E08AC
	
		// Properties
		public virtual Assembly Assembly { get; } // 0x00BEAC30-0x00BEAC98 
		public virtual string ScopeName { get; } // 0x00BEAD00-0x00BEAD68 
		public virtual Guid ModuleVersionId { get; } // 0x00BEAD68-0x00BEADD0 
	
		// Constructors
		protected Module(); // 0x00BEA908-0x00BEA90C
		static Module(); // 0x00BEAF08-0x00BEAFBC
	
		// Methods
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00BEA90C-0x00BEA970
		public override string ToString(); // 0x00BEA970-0x00BEA978
		internal virtual Guid GetModuleVersionId(); // 0x00BEA978-0x00BEA9AC
		private static bool filter_by_type_name(Type m, object filterCriteria); // 0x00BEA9B0-0x00BEAAB8
		private static bool filter_by_type_name_ignore_case(Type m, object filterCriteria); // 0x00BEAAB8-0x00BEABD4
		private string GetGuidInternal(); // 0x00BEA9AC-0x00BEA9B0
		public override bool Equals(object o); // 0x00BEABD4-0x00BEABE0
		public override int GetHashCode(); // 0x00BEABE0-0x00BEABE4
		public static bool operator ==(Module left, Module right); // 0x00BEABE4-0x00BEAC30
		private static Exception CreateNIE(); // 0x00BEAC98-0x00BEAD00
		public virtual bool IsResource(); // 0x00BEADD0-0x00BEAE38
		public virtual object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00BEAE38-0x00BEAEA0
		public virtual bool IsDefined(Type attributeType, bool inherit); // 0x00BEAEA0-0x00BEAF08
	}

	internal abstract class RuntimeAssembly : Assembly // TypeDefIndex: 511
	{
		// Constructors
		protected RuntimeAssembly(); // 0x00871354-0x0087135C
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x008711C8-0x0087127C
		internal static RuntimeAssembly LoadWithPartialNameInternal(string partialName, Evidence securityEvidence, ref StackCrawlMark stackMark); // 0x0087127C-0x00871314
		internal static RuntimeAssembly LoadWithPartialNameInternal(AssemblyName an, Evidence securityEvidence, ref StackCrawlMark stackMark); // 0x00871314-0x00871348
		public override AssemblyName GetName(bool copiedName); // 0x00871348-0x00871354
	}

	[Serializable]
	[ClassInterface] // 0x004B4664-0x004B46F0
	[ComDefaultInterface] // 0x004B4664-0x004B46F0
	[ComVisible] // 0x004B4664-0x004B46F0
	internal class MonoAssembly : RuntimeAssembly // TypeDefIndex: 512
	{
		// Constructors
		public MonoAssembly(); // 0x00BEB338-0x00BEB340
	
		// Methods
		public override Type GetType(string name, bool throwOnError, bool ignoreCase); // 0x00BEAFBC-0x00BEB0A8
		public override Module GetModule(string name); // 0x00BEB0A8-0x00BEB200
		public override Module[] GetModules(bool getResourceModules); // 0x00BEB200-0x00BEB338
	}

	internal struct MonoEventInfo // TypeDefIndex: 513
	{
		// Fields
		public Type declaring_type; // 0x00
		public Type reflected_type; // 0x08
		public string name; // 0x10
		public MethodInfo add_method; // 0x18
		public MethodInfo remove_method; // 0x20
		public MethodInfo raise_method; // 0x28
		public EventAttributes attrs; // 0x30
		public MethodInfo[] other_methods; // 0x38
	
		// Methods
		private static void get_event_info(MonoEvent ev, out MonoEventInfo info); // 0x00BEC45C-0x00BEC460
		internal static MonoEventInfo GetEventInfo(MonoEvent ev); // 0x00BEC060-0x00BEC0A8
	}

	internal abstract class RuntimeEventInfo : EventInfo, ISerializable // TypeDefIndex: 514
	{
		// Properties
		internal BindingFlags BindingFlags { get; } // 0x00871720-0x00871728 
		public override Module Module { get; } // 0x00871728-0x0087172C 
		private RuntimeType ReflectedTypeInternal { get; } // 0x008717D8-0x00871864 
	
		// Constructors
		protected RuntimeEventInfo(); // 0x00871928-0x00871930
	
		// Methods
		internal RuntimeType GetDeclaringTypeInternal(); // 0x0087174C-0x008717D8
		internal RuntimeModule GetRuntimeModule(); // 0x0087172C-0x0087174C
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00871864-0x00871928
	}

	[Serializable]
	internal sealed class MonoEvent : RuntimeEventInfo // TypeDefIndex: 515
	{
		// Fields
		private IntPtr klass; // 0x18
		private IntPtr handle; // 0x20
	
		// Properties
		public override Type DeclaringType { get; } // 0x00BEC1C8-0x00BEC1F8 
		public override Type ReflectedType { get; } // 0x00BEC1F8-0x00BEC228 
		public override string Name { get; } // 0x00BEC228-0x00BEC258 
	
		// Constructors
		public MonoEvent(); // 0x00BEC454-0x00BEC45C
	
		// Methods
		public override MethodInfo GetAddMethod(bool nonPublic); // 0x00BEBFD0-0x00BEC060
		public override MethodInfo GetRaiseMethod(bool nonPublic); // 0x00BEC0A8-0x00BEC138
		public override MethodInfo GetRemoveMethod(bool nonPublic); // 0x00BEC138-0x00BEC1C8
		public override string ToString(); // 0x00BEC258-0x00BEC2D8
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00BEC2D8-0x00BEC358
		public override object[] GetCustomAttributes(bool inherit); // 0x00BEC358-0x00BEC3D0
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00BEC3D0-0x00BEC450
		public override IList<CustomAttributeData> GetCustomAttributesData(); // 0x00BEC450-0x00BEC454
	}

	internal abstract class RuntimeFieldInfo : FieldInfo, ISerializable // TypeDefIndex: 516
	{
		// Properties
		internal BindingFlags BindingFlags { get; } // 0x00871930-0x00871938 
		public override Module Module { get; } // 0x00871938-0x0087193C 
		private RuntimeType ReflectedTypeInternal { get; } // 0x008719E8-0x00871A74 
	
		// Constructors
		protected RuntimeFieldInfo(); // 0x008711C0-0x008711C8
	
		// Methods
		internal RuntimeType GetDeclaringTypeInternal(); // 0x0087195C-0x008719E8
		internal RuntimeModule GetRuntimeModule(); // 0x0087193C-0x0087195C
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00871A74-0x00871B4C
	}

	internal abstract class RtFieldInfo : RuntimeFieldInfo // TypeDefIndex: 517
	{
		// Constructors
		protected RtFieldInfo(); // 0x008711B8-0x008711C0
	
		// Methods
		internal object UnsafeGetValue(object obj); // 0x00870DEC-0x00870DF0
		internal void CheckConsistency(object target); // 0x00870DF0-0x00870FB0
		[DebuggerHidden] // 0x004BBC1C-0x004BBC54
		[DebuggerStepThrough] // 0x004BBC1C-0x004BBC54
		internal void UnsafeSetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture); // 0x00870FE4-0x0087104C
		[DebuggerHidden] // 0x004BBC54-0x004BBC8C
		[DebuggerStepThrough] // 0x004BBC54-0x004BBC8C
		public override void SetValueDirect(TypedReference obj, object value); // 0x0087104C-0x008711B8
	}

	[Serializable]
	internal class MonoField : RtFieldInfo // TypeDefIndex: 518
	{
		// Fields
		internal IntPtr klass; // 0x10
		internal RuntimeFieldHandle fhandle; // 0x18
		private string name; // 0x20
		private Type type; // 0x28
		private FieldAttributes attrs; // 0x30
	
		// Properties
		public override FieldAttributes Attributes { get; } // 0x00BEC460-0x00BEC468 
		public override RuntimeFieldHandle FieldHandle { get; } // 0x00BEC468-0x00BEC470 
		public override Type FieldType { get; } // 0x00BEC474-0x00BEC500 
		public override Type ReflectedType { get; } // 0x00BEC508-0x00BEC510 
		public override Type DeclaringType { get; } // 0x00BEC510-0x00BEC518 
		public override string Name { get; } // 0x00BEC518-0x00BEC520 
	
		// Constructors
		public MonoField(); // 0x00BECC68-0x00BECC70
	
		// Methods
		private Type ResolveType(); // 0x00BEC470-0x00BEC474
		private Type GetParentType(bool declaring); // 0x00BEC500-0x00BEC508
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00BEC520-0x00BEC5A0
		public override object[] GetCustomAttributes(bool inherit); // 0x00BEC5A0-0x00BEC618
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00BEC618-0x00BEC698
		internal override int GetFieldOffset(); // 0x00BEC698-0x00BEC69C
		private object GetValueInternal(object obj); // 0x00BEC69C-0x00BEC6A0
		public override object GetValue(object obj); // 0x00BEC6A0-0x00BEC860
		public override string ToString(); // 0x00BEC90C-0x00BEC97C
		private static void SetValueInternal(FieldInfo fi, object obj, object value); // 0x00BEC97C-0x00BEC980
		public override void SetValue(object obj, object val, BindingFlags invokeAttr, Binder binder, CultureInfo culture); // 0x00BEC980-0x00BECC60
		public override object GetRawConstantValue(); // 0x00BECC60-0x00BECC64
		public override IList<CustomAttributeData> GetCustomAttributesData(); // 0x00BECC64-0x00BECC68
		private void CheckGeneric(); // 0x00BEC860-0x00BEC90C
	}

	internal struct MonoMethodInfo // TypeDefIndex: 519
	{
		// Fields
		private Type parent; // 0x00
		private Type ret; // 0x08
		internal MethodAttributes attrs; // 0x10
		internal MethodImplAttributes iattrs; // 0x14
		private CallingConventions callconv; // 0x18
	
		// Methods
		private static void get_method_info(IntPtr handle, out MonoMethodInfo info); // 0x00BED8D8-0x00BED8DC
		private static int get_method_attributes(IntPtr handle); // 0x00BED8DC-0x00BED8E0
		internal static MonoMethodInfo GetMethodInfo(IntPtr handle); // 0x00BED3CC-0x00BED408
		internal static Type GetDeclaringType(IntPtr handle); // 0x00BEBC08-0x00BEBC34
		internal static Type GetReturnType(IntPtr handle); // 0x00BECCB8-0x00BECCE4
		internal static MethodAttributes GetAttributes(IntPtr handle); // 0x00BEBB40-0x00BEBB44
		internal static CallingConventions GetCallingConvention(IntPtr handle); // 0x00BEBB74-0x00BEBBA0
		internal static MethodImplAttributes GetMethodImplementationFlags(IntPtr handle); // 0x00BEB370-0x00BEB39C
		private static ParameterInfo[] get_parameter_info(IntPtr handle, MemberInfo member); // 0x00BED8E0-0x00BED8E4
		internal static ParameterInfo[] GetParametersInfo(IntPtr handle, MemberInfo member); // 0x00BEB3AC-0x00BEB3B0
	}

	internal abstract class RuntimeMethodInfo : MethodInfo, ISerializable // TypeDefIndex: 520
	{
		// Properties
		internal BindingFlags BindingFlags { get; } // 0x00871B4C-0x00871B54 
		public override Module Module { get; } // 0x00871B54-0x00871B58 
		private RuntimeType ReflectedTypeInternal { get; } // 0x00871C14-0x00871CA0 
	
		// Constructors
		protected RuntimeMethodInfo(); // 0x00872080-0x00872088
	
		// Methods
		internal override string FormatNameAndSig(bool serialization); // 0x00871CA0-0x00871DF8
		public override string ToString(); // 0x00871DF8-0x00871E90
		internal RuntimeModule GetRuntimeModule(); // 0x00871B58-0x00871C14
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00871E90-0x00871FDC
		internal string SerializationToString(); // 0x00871FDC-0x00872080
	}

	[Serializable]
	internal class MonoMethod : RuntimeMethodInfo // TypeDefIndex: 521
	{
		// Fields
		internal IntPtr mhandle; // 0x10
		private string name; // 0x18
		private Type reftype; // 0x20
	
		// Properties
		public override Type ReturnType { get; } // 0x00BECC88-0x00BECCB8 
		public override RuntimeMethodHandle MethodHandle { get; } // 0x00BED02C-0x00BED034 
		public override MethodAttributes Attributes { get; } // 0x00BED034-0x00BED03C 
		public override CallingConventions CallingConvention { get; } // 0x00BED03C-0x00BED06C 
		public override Type ReflectedType { get; } // 0x00BED06C-0x00BED074 
		public override Type DeclaringType { get; } // 0x00BED074-0x00BED0A4 
		public override string Name { get; } // 0x00BED0A4-0x00BED0CC 
		public override bool IsGenericMethodDefinition { get; } // 0x00BED7D0-0x00BED7D4 
		public override bool IsGenericMethod { get; } // 0x00BED7D4-0x00BED7D8 
		public override bool ContainsGenericParameters { get; } // 0x00BED7D8-0x00BED8BC 
		public override bool IsSecurityCritical { get; } // 0x00BED8D0-0x00BED8D8 
	
		// Constructors
		internal MonoMethod(); // 0x00BECC70-0x00BECC78
	
		// Methods
		internal static string get_name(MethodBase method); // 0x00BEBC5C-0x00BEBC60
		internal static MonoMethod get_base_method(MonoMethod method, bool definition); // 0x00BECC78-0x00BECC80
		internal override MethodInfo GetBaseMethod(); // 0x00BECC80-0x00BECC88
		public override MethodImplAttributes GetMethodImplementationFlags(); // 0x00BECCE4-0x00BECD14
		public override ParameterInfo[] GetParameters(); // 0x00BECD14-0x00BECDAC
		internal override ParameterInfo[] GetParametersInternal(); // 0x00BECDAC-0x00BECDBC
		internal override int GetParametersCount(); // 0x00BECDBC-0x00BECDE8
		internal object InternalInvoke(object obj, object[] parameters, out Exception exc); // 0x00BECDE8-0x00BECDEC
		[DebuggerHidden] // 0x004BBC8C-0x004BBCC4
		[DebuggerStepThrough] // 0x004BBC8C-0x004BBCC4
		public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x00BECDEC-0x00BED02C
		internal static void ConvertValues(Binder binder, object[] args, ParameterInfo[] pinfo, CultureInfo culture, BindingFlags invokeAttr); // 0x00BEB6DC-0x00BEB994
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00BED0CC-0x00BED14C
		public override object[] GetCustomAttributes(bool inherit); // 0x00BED14C-0x00BED1C4
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00BED1C4-0x00BED244
		internal void GetPInvoke(out PInvokeAttributes flags, out string entryPoint, out string dllName); // 0x00BED244-0x00BED248
		internal object[] GetPseudoCustomAttributes(); // 0x00BED248-0x00BED3CC
		public override MethodInfo MakeGenericMethod(params /* 0x004BD2E0-0x004BD2F0 */ Type[] methodInstantiation); // 0x00BED408-0x00BED734
		private MethodInfo MakeGenericMethod_impl(Type[] types); // 0x00BED734-0x00BED738
		public override Type[] GetGenericArguments(); // 0x00BED738-0x00BED73C
		private MethodInfo GetGenericMethodDefinition_impl(); // 0x00BED73C-0x00BED740
		public override MethodInfo GetGenericMethodDefinition(); // 0x00BED740-0x00BED7D0
		public override MethodBody GetMethodBody(); // 0x00BED8BC-0x00BED8C4
		public override IList<CustomAttributeData> GetCustomAttributesData(); // 0x00BED8C4-0x00BED8C8
		private static int get_core_clr_security_level(); // 0x00BED8C8-0x00BED8D0
	}

	internal abstract class RuntimeConstructorInfo : ConstructorInfo, ISerializable // TypeDefIndex: 522
	{
		// Properties
		public override Module Module { get; } // 0x0087135C-0x00871360 
		internal BindingFlags BindingFlags { get; } // 0x008713F0-0x008713F8 
		private RuntimeType ReflectedTypeInternal { get; } // 0x008713F8-0x00871484 
	
		// Constructors
		protected RuntimeConstructorInfo(); // 0x008716B8-0x00871720
	
		// Methods
		internal RuntimeModule GetRuntimeModule(); // 0x00871360-0x008713F0
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00871484-0x00871588
		internal string SerializationToString(); // 0x00871588-0x0087159C
		internal void SerializationInvoke(object target, SerializationInfo info, StreamingContext context); // 0x0087159C-0x008716B8
	}

	[Serializable]
	internal class MonoCMethod : RuntimeConstructorInfo // TypeDefIndex: 523
	{
		// Fields
		internal IntPtr mhandle; // 0x10
		private string name; // 0x18
		private Type reftype; // 0x20
	
		// Properties
		public override RuntimeMethodHandle MethodHandle { get; } // 0x00BEBB30-0x00BEBB38 
		public override MethodAttributes Attributes { get; } // 0x00BEBB38-0x00BEBB40 
		public override CallingConventions CallingConvention { get; } // 0x00BEBB44-0x00BEBB74 
		public override bool ContainsGenericParameters { get; } // 0x00BEBBA0-0x00BEBBD0 
		public override Type ReflectedType { get; } // 0x00BEBBD0-0x00BEBBD8 
		public override Type DeclaringType { get; } // 0x00BEBBD8-0x00BEBC08 
		public override string Name { get; } // 0x00BEBC34-0x00BEBC5C 
		public override bool IsSecurityCritical { get; } // 0x00BEBFC0-0x00BEBFC8 
	
		// Constructors
		public MonoCMethod(); // 0x00BEBFC8-0x00BEBFD0
	
		// Methods
		public override MethodImplAttributes GetMethodImplementationFlags(); // 0x00BEB340-0x00BEB370
		public override ParameterInfo[] GetParameters(); // 0x00BEB39C-0x00BEB3AC
		internal override ParameterInfo[] GetParametersInternal(); // 0x00BEB3B0-0x00BEB3C0
		internal override int GetParametersCount(); // 0x00BEB3C0-0x00BEB3E8
		internal object InternalInvoke(object obj, object[] parameters, out Exception exc); // 0x00BEB3E8-0x00BEB3EC
		[DebuggerHidden] // 0x004BBCC4-0x004BBCFC
		[DebuggerStepThrough] // 0x004BBCC4-0x004BBCFC
		public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x00BEB3EC-0x00BEB514
		private object DoInvoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x00BEB514-0x00BEB6DC
		public object InternalInvoke(object obj, object[] parameters); // 0x00BEB994-0x00BEBB08
		[DebuggerHidden] // 0x004BBCFC-0x004BBD34
		[DebuggerStepThrough] // 0x004BBCFC-0x004BBD34
		public override object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x00BEBB08-0x00BEBB30
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00BEBC60-0x00BEBCE0
		public override object[] GetCustomAttributes(bool inherit); // 0x00BEBCE0-0x00BEBD58
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00BEBD58-0x00BEBDD8
		public override MethodBody GetMethodBody(); // 0x00BEBDD8-0x00BEBDE0
		public override string ToString(); // 0x00BEBDE0-0x00BEBFB4
		public override IList<CustomAttributeData> GetCustomAttributesData(); // 0x00BEBFB4-0x00BEBFB8
		private static int get_core_clr_security_level(); // 0x00BEBFB8-0x00BEBFC0
	}

	internal abstract class RuntimeModule : Module // TypeDefIndex: 524
	{
		// Constructors
		protected RuntimeModule(); // 0x00872088-0x008720F0
	}

	[Serializable]
	[ClassInterface] // 0x004B46F0-0x004B477C
	[ComDefaultInterface] // 0x004B46F0-0x004B477C
	[ComVisible] // 0x004B46F0-0x004B477C
	internal class MonoModule : RuntimeModule // TypeDefIndex: 525
	{
		// Properties
		public override Assembly Assembly { get; } // 0x00BED8E4-0x00BED8EC 
		public override string ScopeName { get; } // 0x00BED8EC-0x00BED8F4 
		public override Guid ModuleVersionId { get; } // 0x00BED8F4-0x00BED900 
	
		// Constructors
		public MonoModule(); // 0x00BEDB48-0x00BEDB50
	
		// Methods
		public override bool IsResource(); // 0x00BED900-0x00BED908
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00BED908-0x00BED988
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00BED988-0x00BEDA08
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00BEDA08-0x00BEDAC8
		internal RuntimeAssembly GetRuntimeAssembly(); // 0x00BEDAC8-0x00BEDB48
	}

	internal abstract class RuntimeParameterInfo : ParameterInfo // TypeDefIndex: 526
	{
		// Constructors
		protected RuntimeParameterInfo(); // 0x008720F0-0x008720F8
	}

	[Serializable]
	[ClassInterface] // 0x004B477C-0x004B4808
	[ComDefaultInterface] // 0x004B477C-0x004B4808
	[ComVisible] // 0x004B477C-0x004B4808
	internal class MonoParameterInfo : RuntimeParameterInfo // TypeDefIndex: 527
	{
		// Properties
		public override object DefaultValue { get; } // 0x00BEDBEC-0x00BEDE38 
	
		// Constructors
		internal MonoParameterInfo(ParameterInfo pinfo, MemberInfo member); // 0x00BEDB50-0x00BEDBEC
	
		// Methods
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00BEDE38-0x00BEDEB8
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00BEDEB8-0x00BEDF38
	}

	internal struct MonoPropertyInfo // TypeDefIndex: 528
	{
		// Fields
		public Type parent; // 0x00
		public Type declaring_type; // 0x08
		public string name; // 0x10
		public MethodInfo get_method; // 0x18
		public MethodInfo set_method; // 0x20
		public PropertyAttributes attrs; // 0x28
	
		// Methods
		internal static void get_property_info(MonoProperty prop, ref MonoPropertyInfo info, PInfo req_info); // 0x00BEDF80-0x00BEDF84
		internal static Type[] GetTypeModifiers(MonoProperty prop, bool optional); // 0x00BEF05C-0x00BEF064
		internal static object get_default_value(MonoProperty prop); // 0x00BEE720-0x00BEE724
	}

	[Flags] // 0x004B4808-0x004B4818
	internal enum PInfo // TypeDefIndex: 529
	{
		Attributes = 1,
		GetMethod = 2,
		SetMethod = 4,
		ReflectedType = 8,
		DeclaringType = 16,
		Name = 32
	}

	internal abstract class RuntimePropertyInfo : PropertyInfo, ISerializable // TypeDefIndex: 530
	{
		// Properties
		internal BindingFlags BindingFlags { get; } // 0x008720F8-0x00872100 
		public override Module Module { get; } // 0x00872100-0x00872104 
		private RuntimeType ReflectedTypeInternal { get; } // 0x008721B0-0x0087223C 
	
		// Constructors
		protected RuntimePropertyInfo(); // 0x008724A4-0x008724AC
	
		// Methods
		internal RuntimeType GetDeclaringTypeInternal(); // 0x00872124-0x008721B0
		internal RuntimeModule GetRuntimeModule(); // 0x00872104-0x00872124
		public override string ToString(); // 0x0087223C-0x00872244
		private string FormatNameAndSig(bool serialization); // 0x00872244-0x008723A4
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x008723A4-0x0087249C
		internal string SerializationToString(); // 0x0087249C-0x008724A4
	}

	[Serializable]
	internal class MonoProperty : RuntimePropertyInfo // TypeDefIndex: 531
	{
		// Fields
		internal IntPtr klass; // 0x10
		internal IntPtr prop; // 0x18
		private MonoPropertyInfo info; // 0x20
		private PInfo cached; // 0x50
		private GetterAdapter cached_getter; // 0x58
	
		// Properties
		public override PropertyAttributes Attributes { get; } // 0x00BEDF84-0x00BEDFC8 
		public override bool CanRead { get; } // 0x00BEDFC8-0x00BEE01C 
		public override bool CanWrite { get; } // 0x00BEE01C-0x00BEE070 
		public override Type PropertyType { get; } // 0x00BEE070-0x00BEE134 
		public override Type ReflectedType { get; } // 0x00BEE134-0x00BEE178 
		public override Type DeclaringType { get; } // 0x00BEE178-0x00BEE1BC 
		public override string Name { get; } // 0x00BEE1BC-0x00BEE200 
	
		// Nested types
		private delegate object GetterAdapter(object _this); // TypeDefIndex: 532; 0x00BEF0FC-0x00BEF4B8
	
		private delegate R Getter<T, R>(T _this); // TypeDefIndex: 533; 0x00000000-0x00000000
	
		private delegate R StaticGetter<R>(); // TypeDefIndex: 534; 0x00000000-0x00000000
	
		// Constructors
		public MonoProperty(); // 0x00BEF0E4-0x00BEF0EC
	
		// Methods
		private void CachePropertyInfo(PInfo flags); // 0x00BEDF38-0x00BEDF80
		public override MethodInfo[] GetAccessors(bool nonPublic); // 0x00BEE200-0x00BEE3B4
		public override MethodInfo GetGetMethod(bool nonPublic); // 0x00BEE3B4-0x00BEE448
		public override ParameterInfo[] GetIndexParameters(); // 0x00BEE448-0x00BEE618
		public override MethodInfo GetSetMethod(bool nonPublic); // 0x00BEE688-0x00BEE71C
		public override object GetConstantValue(); // 0x00BEE71C-0x00BEE720
		public override object GetRawConstantValue(); // 0x00BEE724-0x00BEE728
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00BEE728-0x00BEE7A4
		public override object[] GetCustomAttributes(bool inherit); // 0x00BEE7A4-0x00BEE810
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00BEE810-0x00BEE88C
		private static object GetterAdapterFrame<T, R>(Getter<T, R> getter, object obj);
		private static object StaticGetterAdapterFrame<R>(StaticGetter<R> getter, object obj);
		private static GetterAdapter CreateGetterDelegate(MethodInfo method); // 0x00BEE88C-0x00BEEB8C
		public override object GetValue(object obj, object[] index); // 0x00BEEB8C-0x00BEEBB0
		public override object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture); // 0x00BEEBB0-0x00BEEDC8
		public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture); // 0x00BEEDC8-0x00BEEFE0
		public override Type[] GetOptionalCustomModifiers(); // 0x00BEEFE0-0x00BEF05C
		public override Type[] GetRequiredCustomModifiers(); // 0x00BEF064-0x00BEF0E0
		public override IList<CustomAttributeData> GetCustomAttributesData(); // 0x00BEF0E0-0x00BEF0E4
	}

	[Serializable]
	[ClassInterface] // 0x004B4818-0x004B48A4
	[ComDefaultInterface] // 0x004B4818-0x004B48A4
	[ComVisible] // 0x004B4818-0x004B48A4
	public class ParameterInfo : ICustomAttributeProvider, IObjectReference, _ParameterInfo // TypeDefIndex: 535
	{
		// Fields
		protected Type ClassImpl; // 0x10
		protected object DefaultValueImpl; // 0x18
		protected MemberInfo MemberImpl; // 0x20
		protected string NameImpl; // 0x28
		protected int PositionImpl; // 0x30
		protected ParameterAttributes AttrsImpl; // 0x34
		internal MarshalAsAttribute marshalAs; // 0x38
	
		// Properties
		public virtual Type ParameterType { get; } // 0x00BEF8F0-0x00BEF8F8 
		public virtual ParameterAttributes Attributes { get; } // 0x00BEF8F8-0x00BEF900 
		public bool IsIn { get; } // 0x00BEF900-0x00BEF920 
		public bool IsOptional { get; } // 0x00BEF920-0x00BEF940 
		public bool IsOut { get; } // 0x00BEF940-0x00BEF960 
		public bool IsRetval { get; } // 0x00BEF6AC-0x00BEF6CC 
		public virtual string Name { get; } // 0x00BEF960-0x00BEF968 
		public virtual int Position { get; } // 0x00BEF968-0x00BEF970 
		public virtual object DefaultValue { get; } // 0x00BEFBC4-0x00BEFC28 
	
		// Constructors
		protected ParameterInfo(); // 0x00BEF4E8-0x00BEF4EC
	
		// Methods
		public override string ToString(); // 0x00BEF4EC-0x00BEF6AC
		internal static void FormatParameters(StringBuilder sb, ParameterInfo[] p, CallingConventions callingConvention, bool serialization); // 0x00BEF6CC-0x00BEF8F0
		internal object[] GetPseudoCustomAttributes(); // 0x00BEF970-0x00BEFBBC
		internal object GetDefaultValueImpl(); // 0x00BEFBBC-0x00BEFBC4
		public virtual object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00BEFC28-0x00BEFC74
		public object GetRealObject(StreamingContext context); // 0x00BEFC74-0x00BEFCD8
		public virtual bool IsDefined(Type attributeType, bool inherit); // 0x00BEFCD8-0x00BF0CE0
		internal static ParameterInfo New(ParameterInfo pinfo, MemberInfo member); // 0x00BEE618-0x00BEE688
	}

	[Serializable]
	[ClassInterface] // 0x004B48A4-0x004B4930
	[ComDefaultInterface] // 0x004B48A4-0x004B4930
	[ComVisible] // 0x004B48A4-0x004B4930
	public abstract class PropertyInfo : MemberInfo, _PropertyInfo // TypeDefIndex: 536
	{
		// Properties
		public abstract PropertyAttributes Attributes { get; }
		public abstract bool CanRead { get; }
		public abstract bool CanWrite { get; }
		public override MemberTypes MemberType { get; } // 0x008706B4-0x008706BC 
		public abstract Type PropertyType { get; }
	
		// Constructors
		protected PropertyInfo(); // 0x008706BC-0x008706C4
	
		// Methods
		public abstract MethodInfo[] GetAccessors(bool nonPublic);
		public MethodInfo GetGetMethod(); // 0x008706C4-0x008706D8
		public abstract MethodInfo GetGetMethod(bool nonPublic);
		public abstract ParameterInfo[] GetIndexParameters();
		public abstract MethodInfo GetSetMethod(bool nonPublic);
		[DebuggerHidden] // 0x004BBD34-0x004BBD6C
		[DebuggerStepThrough] // 0x004BBD34-0x004BBD6C
		public virtual object GetValue(object obj, object[] index); // 0x008706D8-0x008706FC
		public abstract object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture);
		[DebuggerHidden] // 0x004BBD6C-0x004BBDA4
		[DebuggerStepThrough] // 0x004BBD6C-0x004BBDA4
		public virtual void SetValue(object obj, object value, object[] index); // 0x008706FC-0x00870720
		public abstract void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture);
		public virtual Type[] GetOptionalCustomModifiers(); // 0x00870720-0x00870788
		public virtual Type[] GetRequiredCustomModifiers(); // 0x00870788-0x008707F0
		private static NotImplementedException CreateNIE(); // 0x008707F0-0x0087084C
		public virtual object GetConstantValue(); // 0x0087084C-0x00870894
		public virtual object GetRawConstantValue(); // 0x00870894-0x008708DC
		public override bool Equals(object obj); // 0x008708DC-0x008708E8
		public override int GetHashCode(); // 0x008708E8-0x008708F0
		public static bool operator ==(PropertyInfo left, PropertyInfo right); // 0x008708F0-0x0087093C
		public static bool operator !=(PropertyInfo left, PropertyInfo right); // 0x0087093C-0x00870998
		private static PropertyInfo internal_from_handle_type(IntPtr event_handle, IntPtr type_handle); // 0x00870998-0x0087099C
		internal static PropertyInfo GetPropertyFromHandle(RuntimePropertyHandle handle, RuntimeTypeHandle reflectedType); // 0x0087099C-0x00870A78
	}

	[Serializable]
	[ComVisible] // 0x004B4930-0x004B4944
	public class StrongNameKeyPair : ISerializable, IDeserializationCallback // TypeDefIndex: 537
	{
		// Fields
		private byte[] _publicKey; // 0x10
		private string _keyPairContainer; // 0x18
		private bool _keyPairExported; // 0x20
		private byte[] _keyPairArray; // 0x28
	
		// Constructors
		protected StrongNameKeyPair(SerializationInfo info, StreamingContext context); // 0x008724AC-0x00872630
	
		// Methods
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00872630-0x00872750
		void IDeserializationCallback.OnDeserialization(object sender); // 0x00872750-0x00872754
	}
}

namespace System.Reflection.Emit
{
	public class AssemblyBuilder : Assembly // TypeDefIndex: 538
	{
	}

	public abstract class ConstructorBuilder : ConstructorInfo // TypeDefIndex: 539
	{
		// Properties
		public override MethodAttributes Attributes { get; } // 0x00BE47F4-0x00BE4854 
		public override Type DeclaringType { get; } // 0x00BE4854-0x00BE48B4 
		public override string Name { get; } // 0x00BE48B4-0x00BE4914 
		public override RuntimeMethodHandle MethodHandle { get; } // 0x00BE4974-0x00BE49B4 
		public override Type ReflectedType { get; } // 0x00BE49B4-0x00BE49F4 
	
		// Methods
		public override ParameterInfo[] GetParameters(); // 0x00BE4914-0x00BE4974
		public override object[] GetCustomAttributes(bool inherit); // 0x00BE49F4-0x00BE4A34
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00BE4A34-0x00BE4A74
		public override MethodImplAttributes GetMethodImplementationFlags(); // 0x00BE4A74-0x00BE4AB4
		public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x00BE4AB4-0x00BE4AF4
		public override object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x00BE4AF4-0x00BE4B34
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00BE4B34-0x00BE4B74
	}

	public class CustomAttributeBuilder // TypeDefIndex: 540
	{
	}

	public abstract class EnumBuilder : System.Reflection.TypeInfo // TypeDefIndex: 541
	{
		// Properties
		public override Assembly Assembly { get; } // 0x00BE4E34-0x00BE4E94 
		public override string AssemblyQualifiedName { get; } // 0x00BE4E94-0x00BE4EF4 
		public override Type BaseType { get; } // 0x00BE4EF4-0x00BE4F54 
		public override string FullName { get; } // 0x00BE4F54-0x00BE4FB4 
		public override Module Module { get; } // 0x00BE4FB4-0x00BE5014 
		public override string Name { get; } // 0x00BE5014-0x00BE5074 
		public override string Namespace { get; } // 0x00BE5074-0x00BE50D4 
		public override Type UnderlyingSystemType { get; } // 0x00BE5134-0x00BE5174 
	
		// Methods
		public override Type GetElementType(); // 0x00BE50D4-0x00BE5134
		protected override TypeAttributes GetAttributeFlagsImpl(); // 0x00BE5174-0x00BE51B4
		protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00BE51B4-0x00BE51F4
		[ComVisible] // 0x004BBDA4-0x004BBDB8
		public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0x00BE51F4-0x00BE5234
		public override object[] GetCustomAttributes(bool inherit); // 0x00BE5234-0x00BE5274
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00BE5274-0x00BE52B4
		public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x00BE52B4-0x00BE52F4
		public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x00BE52F4-0x00BE5334
		public override FieldInfo[] GetFields(BindingFlags bindingAttr); // 0x00BE5334-0x00BE5374
		public override Type[] GetInterfaces(); // 0x00BE5374-0x00BE53B4
		protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00BE53B4-0x00BE53F4
		public override MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0x00BE53F4-0x00BE5434
		public override Type GetNestedType(string name, BindingFlags bindingAttr); // 0x00BE5434-0x00BE5474
		public override PropertyInfo[] GetProperties(BindingFlags bindingAttr); // 0x00BE5474-0x00BE54B4
		protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x00BE54B4-0x00BE54F4
		protected override bool HasElementTypeImpl(); // 0x00BE54F4-0x00BE5534
		public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters); // 0x00BE5534-0x00BE5574
		protected override bool IsArrayImpl(); // 0x00BE5574-0x00BE55B4
		protected override bool IsByRefImpl(); // 0x00BE55B4-0x00BE55F4
		protected override bool IsCOMObjectImpl(); // 0x00BE55F4-0x00BE5634
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00BE5634-0x00BE5674
		protected override bool IsPointerImpl(); // 0x00BE5674-0x00BE56B4
		protected override bool IsPrimitiveImpl(); // 0x00BE56B4-0x00BE56F4
	}

	public class EventBuilder // TypeDefIndex: 542
	{
	}

	public abstract class FieldBuilder : FieldInfo // TypeDefIndex: 543
	{
		// Properties
		public override FieldAttributes Attributes { get; } // 0x00BE56F4-0x00BE5754 
		public override Type DeclaringType { get; } // 0x00BE5754-0x00BE57B4 
		public override Type FieldType { get; } // 0x00BE57B4-0x00BE5814 
		public override string Name { get; } // 0x00BE5814-0x00BE5874 
		public override RuntimeFieldHandle FieldHandle { get; } // 0x00BE58D4-0x00BE5914 
		public override Type ReflectedType { get; } // 0x00BE5914-0x00BE5954 
	
		// Methods
		public override object GetValue(object obj); // 0x00BE5874-0x00BE58D4
		public override object[] GetCustomAttributes(bool inherit); // 0x00BE5954-0x00BE5994
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00BE5994-0x00BE59D4
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00BE59D4-0x00BE5A14
		public override void SetValue(object obj, object val, BindingFlags invokeAttr, Binder binder, CultureInfo culture); // 0x00BE5A14-0x00BE5A54
	}

	public abstract class GenericTypeParameterBuilder : System.Reflection.TypeInfo // TypeDefIndex: 544
	{
		// Properties
		public override Assembly Assembly { get; } // 0x00BE5A54-0x00BE5AB4 
		public override string AssemblyQualifiedName { get; } // 0x00BE5AB4-0x00BE5B14 
		public override Type BaseType { get; } // 0x00BE5B14-0x00BE5B74 
		public override string FullName { get; } // 0x00BE5B74-0x00BE5BD4 
		public override Module Module { get; } // 0x00BE5BD4-0x00BE5C34 
		public override string Name { get; } // 0x00BE5C34-0x00BE5C94 
		public override string Namespace { get; } // 0x00BE5C94-0x00BE5CF4 
		public override Type UnderlyingSystemType { get; } // 0x00BE5D54-0x00BE5D94 
	
		// Methods
		public override Type GetElementType(); // 0x00BE5CF4-0x00BE5D54
		protected override TypeAttributes GetAttributeFlagsImpl(); // 0x00BE5D94-0x00BE5DD4
		protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00BE5DD4-0x00BE5E14
		[ComVisible] // 0x004BBDB8-0x004BBDCC
		public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0x00BE5E14-0x00BE5E54
		public override object[] GetCustomAttributes(bool inherit); // 0x00BE5E54-0x00BE5E94
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00BE5E94-0x00BE5ED4
		public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x00BE5ED4-0x00BE5F14
		public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x00BE5F14-0x00BE5F54
		public override FieldInfo[] GetFields(BindingFlags bindingAttr); // 0x00BE5F54-0x00BE5F94
		public override Type[] GetInterfaces(); // 0x00BE5F94-0x00BE5FD4
		protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00BE5FD4-0x00BE6014
		public override MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0x00BE6014-0x00BE6054
		public override Type GetNestedType(string name, BindingFlags bindingAttr); // 0x00BE6054-0x00BE6094
		public override PropertyInfo[] GetProperties(BindingFlags bindingAttr); // 0x00BE6094-0x00BE60D4
		protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x00BE60D4-0x00BE6114
		protected override bool HasElementTypeImpl(); // 0x00BE6114-0x00BE6154
		public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters); // 0x00BE6154-0x00BE6194
		protected override bool IsArrayImpl(); // 0x00BE6194-0x00BE61D4
		protected override bool IsByRefImpl(); // 0x00BE61D4-0x00BE6214
		protected override bool IsCOMObjectImpl(); // 0x00BE6214-0x00BE6254
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00BE6254-0x00BE6294
		protected override bool IsPointerImpl(); // 0x00BE6294-0x00BE62D4
		protected override bool IsPrimitiveImpl(); // 0x00BE62D4-0x00BE6314
	}

	public class ILGenerator // TypeDefIndex: 545
	{
	}

	[ClassInterface] // 0x004B4944-0x004B4984
	[ComVisible] // 0x004B4944-0x004B4984
	public sealed class LocalBuilder : LocalVariableInfo // TypeDefIndex: 546
	{
		// Fields
		private string name; // 0x20
		internal ILGenerator ilgen; // 0x28
		private int startOffset; // 0x30
		private int endOffset; // 0x34
	}

	public abstract class MethodBuilder : MethodInfo // TypeDefIndex: 547
	{
		// Properties
		public override MethodAttributes Attributes { get; } // 0x00BE6314-0x00BE6374 
		public override Type DeclaringType { get; } // 0x00BE6374-0x00BE63D4 
		public override string Name { get; } // 0x00BE63D4-0x00BE6434 
		public override RuntimeMethodHandle MethodHandle { get; } // 0x00BE6494-0x00BE64D4 
		public override Type ReflectedType { get; } // 0x00BE64D4-0x00BE6514 
	
		// Methods
		public override ParameterInfo[] GetParameters(); // 0x00BE6434-0x00BE6494
		public override object[] GetCustomAttributes(bool inherit); // 0x00BE6514-0x00BE6554
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00BE6554-0x00BE6594
		public override MethodImplAttributes GetMethodImplementationFlags(); // 0x00BE6594-0x00BE65D4
		public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x00BE65D4-0x00BE6614
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00BE6614-0x00BE6654
	}

	public abstract class ModuleBuilder : Module // TypeDefIndex: 548
	{
	}

	public class ParameterBuilder // TypeDefIndex: 549
	{
	}

	public abstract class PropertyBuilder : PropertyInfo // TypeDefIndex: 550
	{
		// Properties
		public override PropertyAttributes Attributes { get; } // 0x00BE6654-0x00BE66B4 
		public override bool CanRead { get; } // 0x00BE66B4-0x00BE6714 
		public override bool CanWrite { get; } // 0x00BE6714-0x00BE6774 
		public override Type DeclaringType { get; } // 0x00BE6774-0x00BE67D4 
		public override string Name { get; } // 0x00BE67D4-0x00BE6834 
		public override Type PropertyType { get; } // 0x00BE6834-0x00BE6894 
		public override Type ReflectedType { get; } // 0x00BE68F4-0x00BE6934 
	
		// Methods
		public override ParameterInfo[] GetIndexParameters(); // 0x00BE6894-0x00BE68F4
		public override MethodInfo[] GetAccessors(bool nonPublic); // 0x00BE6934-0x00BE6974
		public override object[] GetCustomAttributes(bool inherit); // 0x00BE6974-0x00BE69B4
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00BE69B4-0x00BE69F4
		public override MethodInfo GetGetMethod(bool nonPublic); // 0x00BE69F4-0x00BE6A34
		public override MethodInfo GetSetMethod(bool nonPublic); // 0x00BE6A34-0x00BE6A74
		public override object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture); // 0x00BE6A74-0x00BE6AB4
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00BE6AB4-0x00BE6AF4
		public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture); // 0x00BE6AF4-0x00BE6B34
	}

	public class SignatureHelper // TypeDefIndex: 551
	{
	}

	public abstract class TypeBuilder : System.Reflection.TypeInfo // TypeDefIndex: 552
	{
		// Fields
		public const int UnspecifiedTypeSize = 0; // Metadata: 0x001E08C8
	
		// Properties
		public override Assembly Assembly { get; } // 0x00BE6B34-0x00BE6B94 
		public override string AssemblyQualifiedName { get; } // 0x00BE6B94-0x00BE6BF4 
		public override Type BaseType { get; } // 0x00BE6BF4-0x00BE6C54 
		public override string FullName { get; } // 0x00BE6C54-0x00BE6CB4 
		public override Module Module { get; } // 0x00BE6CB4-0x00BE6D14 
		public override string Name { get; } // 0x00BE6D14-0x00BE6D74 
		public override string Namespace { get; } // 0x00BE6D74-0x00BE6DD4 
		public override Type UnderlyingSystemType { get; } // 0x00BE6E34-0x00BE6E74 
	
		// Methods
		public override Type GetElementType(); // 0x00BE6DD4-0x00BE6E34
		protected override TypeAttributes GetAttributeFlagsImpl(); // 0x00BE6E74-0x00BE6EB4
		protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00BE6EB4-0x00BE6EF4
		[ComVisible] // 0x004BBDCC-0x004BBDE0
		public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0x00BE6EF4-0x00BE6F34
		public override object[] GetCustomAttributes(bool inherit); // 0x00BE6F34-0x00BE6F74
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00BE6F74-0x00BE6FB4
		public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x00BE6FB4-0x00BE6FF4
		public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x00BE6FF4-0x00BE7034
		public override FieldInfo[] GetFields(BindingFlags bindingAttr); // 0x00BE7034-0x00BE7074
		public override Type[] GetInterfaces(); // 0x00BE7074-0x00BE70B4
		protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00BE70B4-0x00BE70F4
		public override MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0x00BE70F4-0x00BE7134
		public override Type GetNestedType(string name, BindingFlags bindingAttr); // 0x00BE7134-0x00BE7174
		public override PropertyInfo[] GetProperties(BindingFlags bindingAttr); // 0x00BE7174-0x00BE71B4
		protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x00BE71B4-0x00BE71F4
		protected override bool HasElementTypeImpl(); // 0x00BE71F4-0x00BE7234
		public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters); // 0x00BE7234-0x00BE7274
		protected override bool IsArrayImpl(); // 0x00BE7274-0x00BE72B4
		protected override bool IsByRefImpl(); // 0x00BE72B4-0x00BE72F4
		protected override bool IsCOMObjectImpl(); // 0x00BE72F4-0x00BE7334
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00BE7334-0x00BE7374
		protected override bool IsPointerImpl(); // 0x00BE7374-0x00BE73B4
		protected override bool IsPrimitiveImpl(); // 0x00BE73B4-0x00BE73F4
	}

	internal abstract class TypeBuilderInstantiation : System.Reflection.TypeInfo // TypeDefIndex: 553
	{
		// Methods
		internal static Type MakeGenericType(Type type, Type[] typeArguments); // 0x00BE73F4-0x00BE7464
	}
}

namespace System.IO
{
	internal static class __Error // TypeDefIndex: 554
	{
		// Methods
		internal static void EndOfFile(); // 0x008F4B90-0x008F4C14
		internal static void FileNotOpen(); // 0x008F4C14-0x008F4C9C
		internal static void StreamIsClosed(); // 0x008F3CB4-0x008F3D3C
		internal static void MemoryStreamNotExpandable(); // 0x008F4C9C-0x008F4D1C
		internal static void ReaderClosed(); // 0x008EE708-0x008EE790
		internal static void ReadNotSupported(); // 0x008EBF00-0x008EBF80
		internal static void WrongAsyncResult(); // 0x008EDA8C-0x008EDB10
		internal static void EndReadCalledTwice(); // 0x008EDB10-0x008EDB94
		internal static void EndWriteCalledTwice(); // 0x008EDB94-0x008EDC18
		internal static string GetDisplayablePath(string path, bool isInvalidPath); // 0x008F4D1C-0x008F4E44
		internal static void WinIOError(int errorCode, string maybeFullPath); // 0x008F4E44-0x008F5420
		internal static void WriteNotSupported(); // 0x008EC958-0x008EC9D8
		internal static void WriterClosed(); // 0x008F0458-0x008F04E0
	}

	[ComVisible] // 0x004B4984-0x004B4998
	public class BinaryReader : IDisposable // TypeDefIndex: 555
	{
		// Fields
		private Stream m_stream; // 0x10
		private byte[] m_buffer; // 0x18
		private Decoder m_decoder; // 0x20
		private byte[] m_charBytes; // 0x28
		private char[] m_singleChar; // 0x30
		private char[] m_charBuffer; // 0x38
		private int m_maxCharsSize; // 0x40
		private bool m_2BytesPerChar; // 0x44
		private bool m_isMemoryStream; // 0x45
		private bool m_leaveOpen; // 0x46
	
		// Properties
		public virtual Stream BaseStream { get; } // 0x00987680-0x00987688 
	
		// Constructors
		public BinaryReader(Stream input); // 0x009873A4-0x0098741C
		public BinaryReader(Stream input, Encoding encoding); // 0x00987678-0x00987680
		public BinaryReader(Stream input, Encoding encoding, bool leaveOpen); // 0x0098741C-0x00987678
	
		// Methods
		public virtual void Close(); // 0x00987688-0x00987698
		protected virtual void Dispose(bool disposing); // 0x00987698-0x009876F0
		public void Dispose(); // 0x009876F0-0x00987700
		public virtual int Read(); // 0x00987700-0x00987730
		public virtual bool ReadBoolean(); // 0x009879BC-0x00987A20
		public virtual byte ReadByte(); // 0x00987A20-0x00987A78
		[CLSCompliant] // 0x004BBDE0-0x004BBDF4
		public virtual sbyte ReadSByte(); // 0x00987A78-0x00987AD4
		public virtual char ReadChar(); // 0x00987AD4-0x00987B04
		public virtual short ReadInt16(); // 0x00987B04-0x00987B70
		[CLSCompliant] // 0x004BBDF4-0x004BBE08
		public virtual ushort ReadUInt16(); // 0x00987B70-0x00987BDC
		public virtual int ReadInt32(); // 0x00987BDC-0x00987CEC
		[CLSCompliant] // 0x004BBE08-0x004BBE1C
		public virtual uint ReadUInt32(); // 0x00987DB4-0x00987E40
		public virtual long ReadInt64(); // 0x00987E40-0x00987F0C
		[CLSCompliant] // 0x004BBE1C-0x004BBE30
		public virtual ulong ReadUInt64(); // 0x00987F0C-0x00987FD8
		public virtual float ReadSingle(); // 0x00987FD8-0x00988014
		public virtual double ReadDouble(); // 0x00988014-0x00988050
		public virtual decimal ReadDecimal(); // 0x00988050-0x009881A0
		public virtual string ReadString(); // 0x009881D4-0x00988460
		private int InternalReadChars(char[] buffer, int index, int count); // 0x0098856C-0x0098885C
		private int InternalReadOneChar(); // 0x00987730-0x009879BC
		public virtual char[] ReadChars(int count); // 0x009888D8-0x00988A3C
		public virtual int Read(byte[] buffer, int index, int count); // 0x00988A3C-0x00988C08
		public virtual byte[] ReadBytes(int count); // 0x00988C08-0x00988DAC
		protected virtual void FillBuffer(int numBytes); // 0x00988DAC-0x00988F2C
		protected internal int Read7BitEncodedInt(); // 0x00988460-0x00988538
	}

	[Serializable]
	[ComVisible] // 0x004B4998-0x004B49AC
	public class BinaryWriter : IDisposable // TypeDefIndex: 556
	{
		// Fields
		public static readonly BinaryWriter Null; // 0x00
		protected Stream OutStream; // 0x10
		private byte[] _buffer; // 0x18
		private Encoding _encoding; // 0x20
		private Encoder _encoder; // 0x28
		[System.Runtime.Serialization.OptionalField] // 0x004B8F40-0x004B8F50
		private bool _leaveOpen; // 0x30
		private byte[] _largeByteBuffer; // 0x38
		private int _maxChars; // 0x40
	
		// Constructors
		protected BinaryWriter(); // 0x00988F2C-0x0098900C
		public BinaryWriter(Stream output); // 0x0098900C-0x0098908C
		public BinaryWriter(Stream output, Encoding encoding); // 0x009891FC-0x00989204
		public BinaryWriter(Stream output, Encoding encoding, bool leaveOpen); // 0x0098908C-0x009891FC
		static BinaryWriter(); // 0x00989E3C-0x00989E9C
	
		// Methods
		protected virtual void Dispose(bool disposing); // 0x00989204-0x00989248
		public void Dispose(); // 0x00989248-0x00989258
		public virtual void Flush(); // 0x00989258-0x0098927C
		public virtual void Write(bool value); // 0x0098927C-0x009892E0
		public virtual void Write(byte value); // 0x009892E0-0x00989304
		public virtual void Write(byte[] buffer); // 0x00989304-0x009893B8
		public virtual void Write(byte[] buffer, int index, int count); // 0x009893B8-0x009893DC
		public virtual void Write(char ch); // 0x009893DC-0x00989518
		public virtual void Write(char[] chars); // 0x00989518-0x009895F8
		public virtual void Write(double value); // 0x009895F8-0x00989644
		public virtual void Write(short value); // 0x00989644-0x009896C0
		[CLSCompliant] // 0x004BBE30-0x004BBE44
		public virtual void Write(ushort value); // 0x009896C0-0x0098973C
		public virtual void Write(int value); // 0x0098973C-0x009897F0
		[CLSCompliant] // 0x004BBE44-0x004BBE58
		public virtual void Write(uint value); // 0x009897F0-0x009898A4
		public virtual void Write(long value); // 0x009898A4-0x009899C8
		[CLSCompliant] // 0x004BBE58-0x004BBE6C
		public virtual void Write(ulong value); // 0x009899C8-0x00989AEC
		public virtual void Write(float value); // 0x00989AEC-0x00989B38
		public virtual void Write(string value); // 0x00989B38-0x00989DDC
		protected void Write7BitEncodedInt(int value); // 0x00989DDC-0x00989E3C
	}

	[ComVisible] // 0x004B49AC-0x004B49C0
	public static class Directory // TypeDefIndex: 557
	{
		// Nested types
		internal sealed class SearchData // TypeDefIndex: 558
		{
			// Fields
			public readonly string fullPath; // 0x10
			public readonly string userPath; // 0x18
			public readonly SearchOption searchOption; // 0x20
	
			// Constructors
			public SearchData(string fullPath, string userPath, SearchOption searchOption); // 0x0098D0C4-0x0098D104
		}
	
		// Methods
		public static string[] GetFiles(string path); // 0x0098AEA8-0x0098AF50
		public static string[] GetFiles(string path, string searchPattern); // 0x0098AF74-0x0098B040
		private static string[] InternalGetFiles(string path, string searchPattern, SearchOption searchOption); // 0x0098AF50-0x0098AF74
		public static string[] GetDirectories(string path); // 0x0098B11C-0x0098B1C4
		public static string[] GetDirectories(string path, string searchPattern); // 0x0098B1E8-0x0098B2B4
		private static string[] InternalGetDirectories(string path, string searchPattern, SearchOption searchOption); // 0x0098B1C4-0x0098B1E8
		internal static string[] InternalGetFileDirectoryNames(string path, string userPathOriginal, string searchPattern, bool includeFiles, bool includeDirs, SearchOption searchOption, bool checkHost); // 0x0098B040-0x0098B11C
		public static DirectoryInfo CreateDirectory(string path); // 0x0098B388-0x0098B590
		private static DirectoryInfo CreateDirectoriesInternal(string path); // 0x0098B680-0x0098B7D8
		public static void Delete(string path); // 0x0098C090-0x0098C298
		private static void RecursiveDelete(string path); // 0x0098C4E4-0x0098C638
		public static void Delete(string path, bool recursive); // 0x0098C898-0x0098C92C
		public static bool Exists(string path); // 0x0098C92C-0x0098CA58
		public static string GetCurrentDirectory(); // 0x0098CB70-0x0098CB88
		internal static string InsecureGetCurrentDirectory(); // 0x0098CB88-0x0098CC30
		public static void SetLastWriteTime(string path, DateTime lastWriteTime); // 0x0098CD38-0x0098CD3C
		public static void SetLastWriteTimeUtc(string path, DateTime lastWriteTimeUtc); // 0x0098CE4C-0x0098CE84
		internal static string GetDemandDir(string fullPath, bool thisDirOnly); // 0x0098CE84-0x0098D0C4
	}

	[Serializable]
	[ComVisible] // 0x004B49C0-0x004B49D4
	public class DirectoryNotFoundException : IOException // TypeDefIndex: 559
	{
		// Constructors
		public DirectoryNotFoundException(); // 0x0098DC60-0x0098DCE8
		public DirectoryNotFoundException(string message); // 0x0098C49C-0x0098C4E4
		protected DirectoryNotFoundException(SerializationInfo info, StreamingContext context); // 0x0098DCE8-0x0098DCF0
	}

	[Serializable]
	[ComVisible] // 0x004B49D4-0x004B49E8
	public class DriveNotFoundException : IOException // TypeDefIndex: 560
	{
		// Constructors
		public DriveNotFoundException(); // 0x0098DCF8-0x0098DD80
		public DriveNotFoundException(string message); // 0x0098DD80-0x0098DDC8
		protected DriveNotFoundException(SerializationInfo info, StreamingContext context); // 0x0098DDC8-0x0098DDD0
	}

	[Serializable]
	[ComVisible] // 0x004B49E8-0x004B49FC
	public class EndOfStreamException : IOException // TypeDefIndex: 561
	{
		// Constructors
		public EndOfStreamException(); // 0x0098DDD0-0x0098DE58
		public EndOfStreamException(string message); // 0x0098DE58-0x0098DEA0
		protected EndOfStreamException(SerializationInfo info, StreamingContext context); // 0x0098DEA0-0x0098DEA8
	}

	[Serializable]
	[ComVisible] // 0x004B49FC-0x004B4A10
	public sealed class FileInfo : FileSystemInfo // TypeDefIndex: 562
	{
		// Fields
		private string _name; // 0x60
	
		// Properties
		public override string Name { get; } // 0x0098EFA8-0x0098EFB0 
		public long Length { get; } // 0x0098EFB0-0x0098F024 
		public override bool Exists { get; } // 0x0098F024-0x0098F118 
	
		// Constructors
		public FileInfo(string fileName); // 0x0098D9F4-0x0098DA98
		private FileInfo(SerializationInfo info, StreamingContext context); // 0x0098EF1C-0x0098EFA8
	
		// Methods
		private void Init(string fileName, bool checkHost); // 0x0098EE24-0x0098EEB0
		private string GetDisplayPath(string originalPath); // 0x0098EF14-0x0098EF1C
		public FileStream OpenRead(); // 0x0098F118-0x0098F190
		public override string ToString(); // 0x0098F1C4-0x0098F1CC
	}

	[Serializable]
	[ComVisible] // 0x004B4A10-0x004B4A24
	public class FileLoadException : IOException // TypeDefIndex: 563
	{
		// Fields
		private string _fileName; // 0x90
		private string _fusionLog; // 0x98
	
		// Properties
		public override string Message { get; } // 0x0098F2A4-0x0098F2D4 
		public string FusionLog { get; } // 0x0098F770-0x0098F778 
	
		// Constructors
		public FileLoadException(); // 0x0098F1CC-0x0098F258
		public FileLoadException(string message); // 0x0098F258-0x0098F2A4
		protected FileLoadException(SerializationInfo info, StreamingContext context); // 0x0098F644-0x0098F770
	
		// Methods
		private void SetMessageField(); // 0x0098F2D4-0x0098F304
		public override string ToString(); // 0x0098F380-0x0098F644
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0098F778-0x0098F920
		internal static string FormatFileLoadExceptionMessage(string fileName, int hResult); // 0x0098F304-0x0098F380
	}

	[Serializable]
	[ComVisible] // 0x004B4A24-0x004B4A38
	public class FileNotFoundException : IOException // TypeDefIndex: 564
	{
		// Fields
		private string _fileName; // 0x90
		private string _fusionLog; // 0x98
	
		// Properties
		public override string Message { get; } // 0x0098FA44-0x0098FA68 
		public string FusionLog { get; } // 0x0098FEDC-0x0098FEE4 
	
		// Constructors
		public FileNotFoundException(); // 0x0098F920-0x0098F9A8
		public FileNotFoundException(string message); // 0x0098F9A8-0x0098F9F0
		public FileNotFoundException(string message, string fileName); // 0x0098F9F0-0x0098FA44
		protected FileNotFoundException(SerializationInfo info, StreamingContext context); // 0x0098FDB0-0x0098FEDC
	
		// Methods
		private void SetMessageField(); // 0x0098FA68-0x0098FAEC
		public override string ToString(); // 0x0098FAEC-0x0098FDB0
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0098FEE4-0x0099008C
	}

	internal static class FileSystemEnumerableFactory // TypeDefIndex: 565
	{
		// Methods
		internal static IEnumerable<string> CreateFileNameIterator(string path, string originalUserPath, string searchPattern, bool includeFiles, bool includeDirs, SearchOption searchOption, bool checkHost); // 0x0098B2B4-0x0098B388
	}

	internal abstract class Iterator<TSource> : IEnumerable<TSource>, IEnumerator<TSource> // TypeDefIndex: 566
	{
		// Fields
		private int threadId;
		internal int state;
		internal TSource current;
	
		// Properties
		public TSource Current { get; }
		object IEnumerator.Current { get; }
	
		// Constructors
		public Iterator();
	
		// Methods
		protected abstract Iterator<TSource> Clone();
		public void Dispose();
		protected virtual void Dispose(bool disposing);
		public IEnumerator<TSource> GetEnumerator();
		public abstract bool MoveNext();
		IEnumerator IEnumerable.GetEnumerator();
		void IEnumerator.Reset();
	}

	internal class FileSystemEnumerableIterator<TSource> : Iterator<TSource> // TypeDefIndex: 567
	{
		// Fields
		private SearchResultHandler<TSource> _resultHandler;
		private List<Directory.SearchData> searchStack;
		private Directory.SearchData searchData;
		private string searchCriteria;
		private SafeFindHandle _hnd;
		private bool needsParentPathDiscoveryDemand;
		private bool empty;
		private string userPath;
		private SearchOption searchOption;
		private string fullPath;
		private string normalizedSearchPath;
		private bool _checkHost;
	
		// Constructors
		internal FileSystemEnumerableIterator(string path, string originalUserPath, string searchPattern, SearchOption searchOption, SearchResultHandler<TSource> resultHandler, bool checkHost);
		private FileSystemEnumerableIterator(string fullPath, string normalizedSearchPath, string searchCriteria, string userPath, SearchOption searchOption, SearchResultHandler<TSource> resultHandler, bool checkHost);
	
		// Methods
		private void CommonInit();
		protected override Iterator<TSource> Clone();
		protected override void Dispose(bool disposing);
		public override bool MoveNext();
		private SearchResult CreateSearchResult(Directory.SearchData localSearchData, Win32Native.WIN32_FIND_DATA findData);
		private void HandleError(int hr, string path);
		private void AddSearchableDirsToStack(Directory.SearchData localSearchData);
		internal void DoDemand(string fullPathToDemand);
		private static string NormalizeSearchPattern(string searchPattern);
		private static string GetNormalizedSearchCriteria(string fullSearchString, string fullPathMod);
		private static string GetFullSearchString(string fullPath, string searchPattern);
	}

	internal abstract class SearchResultHandler<TSource> // TypeDefIndex: 568
	{
		// Constructors
		protected SearchResultHandler();
	
		// Methods
		internal abstract bool IsResultIncluded(SearchResult result);
		internal abstract TSource CreateObject(SearchResult result);
	}

	internal class StringResultHandler : SearchResultHandler<string> // TypeDefIndex: 569
	{
		// Fields
		private bool _includeFiles; // 0x10
		private bool _includeDirs; // 0x11
	
		// Constructors
		internal StringResultHandler(bool includeFiles, bool includeDirs); // 0x008F0F48-0x008F0FBC
	
		// Methods
		internal override bool IsResultIncluded(SearchResult result); // 0x008F0FBC-0x008F1030
		internal override string CreateObject(SearchResult result); // 0x008F1030-0x008F104C
	}

	internal sealed class SearchResult // TypeDefIndex: 570
	{
		// Fields
		private string fullPath; // 0x10
		private string userPath; // 0x18
		private Win32Native.WIN32_FIND_DATA findData; // 0x20
	
		// Properties
		internal string UserPath { get; } // 0x008EBB64-0x008EBB6C 
		internal Win32Native.WIN32_FIND_DATA FindData { get; } // 0x008EBB6C-0x008EBB74 
	
		// Constructors
		internal SearchResult(string fullPath, string userPath, Win32Native.WIN32_FIND_DATA findData); // 0x008EBB24-0x008EBB64
	}

	internal static class FileSystemEnumerableHelpers // TypeDefIndex: 571
	{
		// Methods
		internal static bool IsDir(Win32Native.WIN32_FIND_DATA data); // 0x00994BA0-0x00994C40
		internal static bool IsFile(Win32Native.WIN32_FIND_DATA data); // 0x00994C40-0x00994C60
	}

	[Serializable]
	[ComVisible] // 0x004B4A38-0x004B4A4C
	public abstract class FileSystemInfo : MarshalByRefObject, ISerializable // TypeDefIndex: 572
	{
		// Fields
		internal MonoIOStat _data; // 0x18
		internal int _dataInitialised; // 0x40
		protected string FullPath; // 0x48
		protected string OriginalPath; // 0x50
		private string _displayPath; // 0x58
	
		// Properties
		public virtual string FullName { get; } // 0x00994C60-0x00994C68 
		public abstract string Name { get; }
		public abstract bool Exists { get; }
		[ComVisible] // 0x004BD4F0-0x004BD504
		public DateTime LastWriteTimeUtc { get; set; } // 0x00994C68-0x00994D10 0x00994D10-0x00994D9C
		internal string DisplayPath { get; set; } // 0x00994E84-0x00994E8C 0x00994E8C-0x00994E94
	
		// Constructors
		protected FileSystemInfo(); // 0x0098D10C-0x0098D16C
		protected FileSystemInfo(SerializationInfo info, StreamingContext context); // 0x0098D680-0x0098D7A4
	
		// Methods
		public void Refresh(); // 0x0098D7FC-0x0098D830
		[ComVisible] // 0x004BBE6C-0x004BBE80
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00994D9C-0x00994E84
	}

	[Serializable]
	[ComVisible] // 0x004B4A4C-0x004B4A60
	public class IOException : SystemException // TypeDefIndex: 573
	{
		// Fields
		[NonSerialized]
		private string _maybeFullPath; // 0x88
	
		// Constructors
		public IOException(); // 0x009941CC-0x00994240
		public IOException(string message); // 0x00988538-0x0098856C
		public IOException(string message, int hresult); // 0x00994E94-0x00994EC8
		internal IOException(string message, int hresult, string maybeFullPath); // 0x00994EC8-0x00994F10
		public IOException(string message, Exception innerException); // 0x009881A0-0x009881D4
		protected IOException(SerializationInfo info, StreamingContext context); // 0x0098DCF0-0x0098DCF8
	}

	[Serializable]
	[ComVisible] // 0x004B4A60-0x004B4A74
	public class MemoryStream : Stream // TypeDefIndex: 574
	{
		// Fields
		private byte[] _buffer; // 0x28
		private int _origin; // 0x30
		private int _position; // 0x34
		private int _length; // 0x38
		private int _capacity; // 0x3C
		private bool _expandable; // 0x40
		private bool _writable; // 0x41
		private bool _exposable; // 0x42
		private bool _isOpen; // 0x43
		[NonSerialized]
		private Task<int> _lastReadTask; // 0x48
	
		// Properties
		public override bool CanRead { get; } // 0x00995120-0x00995128 
		public override bool CanSeek { get; } // 0x00995128-0x00995130 
		public override bool CanWrite { get; } // 0x00995130-0x00995138 
		public virtual int Capacity { get; set; } // 0x00995328-0x00995360 0x00995360-0x009954C8
		public override long Length { get; } // 0x009954C8-0x00995504 
		public override long Position { get; set; } // 0x00995504-0x0099553C 0x0099553C-0x00995620
	
		// Constructors
		public MemoryStream(); // 0x00994F10-0x00994F18
		public MemoryStream(int capacity); // 0x00994F18-0x00995018
		public MemoryStream(byte[] buffer); // 0x00995018-0x00995020
		public MemoryStream(byte[] buffer, bool writable); // 0x00995020-0x00995120
	
		// Methods
		private void EnsureWriteable(); // 0x00995138-0x00995164
		protected override void Dispose(bool disposing); // 0x00995164-0x00995180
		private bool EnsureCapacity(int value); // 0x00995180-0x0099527C
		public override void Flush(); // 0x0099527C-0x00995280
		public virtual byte[] GetBuffer(); // 0x00995280-0x00995320
		internal byte[] InternalGetBuffer(); // 0x00995320-0x00995328
		internal int InternalGetPosition(); // 0x0098885C-0x0098888C
		internal int InternalReadInt32(); // 0x00987CEC-0x00987DB4
		internal int InternalEmulateRead(int count); // 0x0098888C-0x009888D8
		public override int Read([In, Out] byte[] buffer, int offset, int count); // 0x00995620-0x0099587C
		public override int ReadByte(); // 0x0099587C-0x009958FC
		public override long Seek(long offset, SeekOrigin loc); // 0x009958FC-0x00995AA0
		public virtual byte[] ToArray(); // 0x00995AA0-0x00995B58
		public override void Write(byte[] buffer, int offset, int count); // 0x00995B58-0x00995E7C
		public override void WriteByte(byte value); // 0x00995E7C-0x00995F74
	}

	[Serializable]
	[ComVisible] // 0x004B4A74-0x004B4A88
	public class PathTooLongException : IOException // TypeDefIndex: 575
	{
		// Constructors
		public PathTooLongException(); // 0x008EB5F4-0x008EB668
		public PathTooLongException(string message); // 0x008EB668-0x008EB69C
		protected PathTooLongException(SerializationInfo info, StreamingContext context); // 0x008EB69C-0x008EB6A4
	}

	internal sealed class PinnedBufferMemoryStream : UnmanagedMemoryStream // TypeDefIndex: 576
	{
		// Fields
		private byte[] _array; // 0x60
		private GCHandle _pinningHandle; // 0x68
	
		// Constructors
		internal PinnedBufferMemoryStream(byte[] array); // 0x008EB6A4-0x008EB784
	
		// Methods
		~PinnedBufferMemoryStream(); // 0x008EBA60-0x008EBADC
		protected override void Dispose(bool disposing); // 0x008EBADC-0x008EBB18
	}

	[Serializable]
	[ComVisible] // 0x004B4A88-0x004B4A9C
	public abstract class Stream : MarshalByRefObject, IDisposable // TypeDefIndex: 577
	{
		// Fields
		public static readonly Stream Null; // 0x00
		[NonSerialized]
		private ReadWriteTask _activeReadWriteTask; // 0x18
		[NonSerialized]
		private SemaphoreSlim _asyncActiveSemaphore; // 0x20
	
		// Properties
		public abstract bool CanRead { get; }
		public abstract bool CanSeek { get; }
		public abstract bool CanWrite { get; }
		public abstract long Length { get; }
		public abstract long Position { get; set; }
	
		// Nested types
		private sealed class ReadWriteTask : Task<int>, ITaskCompletionAction // TypeDefIndex: 578
		{
			// Fields
			internal readonly bool _isRead; // 0x54
			internal Stream _stream; // 0x58
			internal byte[] _buffer; // 0x60
			internal int _offset; // 0x68
			internal int _count; // 0x6C
			private AsyncCallback _callback; // 0x70
			private ExecutionContext _context; // 0x78
			private static ContextCallback s_invokeAsyncCallback; // 0x00
	
			// Constructors
			public ReadWriteTask(bool isRead, Func<object, int> function, object state, Stream stream, byte[] buffer, int offset, int count, AsyncCallback callback); // 0x008EC100-0x008EC264
	
			// Methods
			internal void ClearBeginState(); // 0x008ED330-0x008ED338
			private static void InvokeAsyncCallback(object completedTask); // 0x008ED748-0x008ED7CC
			void ITaskCompletionAction.Invoke(System.Threading.Tasks.Task completingTask); // 0x008ED7CC-0x008ED980
		}
	
		[Serializable]
		private sealed class NullStream : Stream // TypeDefIndex: 579
		{
			// Properties
			public override bool CanRead { get; } // 0x008ED4C4-0x008ED4CC 
			public override bool CanWrite { get; } // 0x008ED4CC-0x008ED4D4 
			public override bool CanSeek { get; } // 0x008ED4D4-0x008ED4DC 
			public override long Length { get; } // 0x008ED4DC-0x008ED4E4 
			public override long Position { get; set; } // 0x008ED4E4-0x008ED4EC 0x008ED4EC-0x008ED4F0
	
			// Constructors
			internal NullStream(); // 0x008ED108-0x008ED170
	
			// Methods
			protected override void Dispose(bool disposing); // 0x008ED4F0-0x008ED4F4
			public override void Flush(); // 0x008ED4F4-0x008ED4F8
			public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state); // 0x008ED4F8-0x008ED568
			public override int EndRead(IAsyncResult asyncResult); // 0x008ED568-0x008ED610
			public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state); // 0x008ED610-0x008ED680
			public override void EndWrite(IAsyncResult asyncResult); // 0x008ED680-0x008ED728
			public override int Read([In, Out] byte[] buffer, int offset, int count); // 0x008ED728-0x008ED730
			public override int ReadByte(); // 0x008ED730-0x008ED738
			public override void Write(byte[] buffer, int offset, int count); // 0x008ED738-0x008ED73C
			public override void WriteByte(byte value); // 0x008ED73C-0x008ED740
			public override long Seek(long offset, SeekOrigin origin); // 0x008ED740-0x008ED748
		}
	
		internal sealed class SynchronousAsyncResult : IAsyncResult // TypeDefIndex: 580
		{
			// Fields
			private readonly object _stateObject; // 0x10
			private readonly bool _isWrite; // 0x18
			private ManualResetEvent _waitHandle; // 0x20
			private ExceptionDispatchInfo _exceptionInfo; // 0x28
			private bool _endXxxCalled; // 0x30
			private int _bytesRead; // 0x34
	
			// Properties
			public WaitHandle AsyncWaitHandle { get; } // 0x008ED980-0x008EDA70 
			public object AsyncState { get; } // 0x008EDA70-0x008EDA78 
	
			// Nested types
			[Serializable]
			[CompilerGenerated] // 0x004B4A9C-0x004B4AAC
			private sealed class __c // TypeDefIndex: 581
			{
				// Fields
				public static readonly __c __9; // 0x00
				public static Func<ManualResetEvent> __9__12_0; // 0x08
	
				// Constructors
				static __c(); // 0x008EDC18-0x008EDC7C
				public __c(); // 0x008EDC7C-0x008EDC84
	
				// Methods
				internal ManualResetEvent _get_AsyncWaitHandle_b__12_0(); // 0x008EDC84-0x008EDCE4
			}
	
			// Constructors
			internal SynchronousAsyncResult(int bytesRead, object asyncStateObject); // 0x008ECEA8-0x008ECEE4
			internal SynchronousAsyncResult(object asyncStateObject); // 0x008ECFC8-0x008ECFFC
			internal SynchronousAsyncResult(Exception ex, object asyncStateObject, bool isWrite); // 0x008ECEE4-0x008ECF38
	
			// Methods
			internal void ThrowIfError(); // 0x008EDA78-0x008EDA8C
			internal static int EndRead(IAsyncResult asyncResult); // 0x008ECF38-0x008ECFC8
			internal static void EndWrite(IAsyncResult asyncResult); // 0x008ECFFC-0x008ED090
		}
	
		[Serializable]
		[CompilerGenerated] // 0x004B4AAC-0x004B4ABC
		private sealed class __c // TypeDefIndex: 582
		{
			// Fields
			public static readonly __c __9; // 0x00
			public static Func<SemaphoreSlim> __9__4_0; // 0x08
			public static Func<object, int> __9__39_0; // 0x10
			public static Func<object, int> __9__46_0; // 0x18
			public static Action<System.Threading.Tasks.Task, object> __9__47_0; // 0x20
	
			// Constructors
			static __c(); // 0x008ED170-0x008ED1D4
			public __c(); // 0x008ED1D4-0x008ED1DC
	
			// Methods
			internal SemaphoreSlim _EnsureAsyncActiveSemaphoreInitialized_b__4_0(); // 0x008ED1DC-0x008ED240
			internal int _BeginReadInternal_b__39_0(object _p0_); // 0x008ED240-0x008ED330
			internal int _BeginWriteInternal_b__46_0(object _p0_); // 0x008ED338-0x008ED42C
			internal void _RunReadWriteTaskWhenReady_b__47_0(System.Threading.Tasks.Task t, object state); // 0x008ED42C-0x008ED4C4
		}
	
		// Constructors
		protected Stream(); // 0x008ED090-0x008ED098
		static Stream(); // 0x008ED0A0-0x008ED108
	
		// Methods
		internal SemaphoreSlim EnsureAsyncActiveSemaphoreInitialized(); // 0x008EBB74-0x008EBC64
		public virtual void Close(); // 0x008EBC64-0x008EBCE4
		public void Dispose(); // 0x008EBCE4-0x008EBCF4
		protected virtual void Dispose(bool disposing); // 0x008EBCF4-0x008EBCF8
		public abstract void Flush();
		public virtual IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state); // 0x008EBCF8-0x008EBD00
		internal IAsyncResult BeginReadInternal(byte[] buffer, int offset, int count, AsyncCallback callback, object state, bool serializeAsynchronously); // 0x008EBD00-0x008EBF00
		public virtual int EndRead(IAsyncResult asyncResult); // 0x008EC4F8-0x008EC718
		public virtual IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state); // 0x008EC750-0x008EC758
		internal IAsyncResult BeginWriteInternal(byte[] buffer, int offset, int count, AsyncCallback callback, object state, bool serializeAsynchronously); // 0x008EC758-0x008EC958
		private void RunReadWriteTaskWhenReady(System.Threading.Tasks.Task asyncWaiter, ReadWriteTask readWriteTask); // 0x008EC264-0x008EC424
		private void RunReadWriteTask(ReadWriteTask readWriteTask); // 0x008EC424-0x008EC4F8
		public virtual void EndWrite(IAsyncResult asyncResult); // 0x008ECB4C-0x008ECD54
		public abstract long Seek(long offset, SeekOrigin origin);
		public abstract int Read([In, Out] byte[] buffer, int offset, int count);
		public virtual int ReadByte(); // 0x008ECD58-0x008ECE04
		public abstract void Write(byte[] buffer, int offset, int count);
		public virtual void WriteByte(byte value); // 0x008ECE04-0x008ECEA8
		internal IAsyncResult BlockingBeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state); // 0x008EBF80-0x008EC100
		internal static int BlockingEndRead(IAsyncResult asyncResult); // 0x008EC718-0x008EC71C
		internal IAsyncResult BlockingBeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state); // 0x008EC9D8-0x008ECB4C
		internal static void BlockingEndWrite(IAsyncResult asyncResult); // 0x008ECD54-0x008ECD58
	}

	[Serializable]
	[ComVisible] // 0x004B4ABC-0x004B4AD0
	public class StreamReader : TextReader // TypeDefIndex: 583
	{
		// Fields
		public static readonly StreamReader Null; // 0x00
		private Stream stream; // 0x18
		private Encoding encoding; // 0x20
		private Decoder decoder; // 0x28
		private byte[] byteBuffer; // 0x30
		private char[] charBuffer; // 0x38
		private byte[] _preamble; // 0x40
		private int charPos; // 0x48
		private int charLen; // 0x4C
		private int byteLen; // 0x50
		private int bytePos; // 0x54
		private int _maxCharsPerBuffer; // 0x58
		private bool _detectEncoding; // 0x5C
		private bool _checkPreamble; // 0x5D
		private bool _isBlocked; // 0x5E
		private bool _closable; // 0x5F
		[NonSerialized]
		private System.Threading.Tasks.Task _asyncReadTask; // 0x60
	
		// Properties
		internal static int DefaultBufferSize { get; } // 0x008EDCE4-0x008EDCEC 
		internal bool LeaveOpen { get; } // 0x008EE658-0x008EE668 
	
		// Nested types
		private class NullStreamReader : StreamReader // TypeDefIndex: 584
		{
			// Constructors
			internal NullStreamReader(); // 0x008EF598-0x008EF638
	
			// Methods
			protected override void Dispose(bool disposing); // 0x008EF638-0x008EF63C
			public override int Peek(); // 0x008EF63C-0x008EF644
			public override int Read(); // 0x008EF644-0x008EF64C
			public override int Read(char[] buffer, int index, int count); // 0x008EF64C-0x008EF654
			public override string ReadLine(); // 0x008EF654-0x008EF65C
			public override string ReadToEnd(); // 0x008EF65C-0x008EF6AC
			internal override int ReadBuffer(); // 0x008EF6AC-0x008EF6B4
		}
	
		// Constructors
		internal StreamReader(); // 0x008EDD98-0x008EDE00
		public StreamReader(Stream stream); // 0x008EDE08-0x008EDE10
		public StreamReader(Stream stream, bool detectEncodingFromByteOrderMarks); // 0x008EDE10-0x008EDEA8
		public StreamReader(Stream stream, Encoding encoding); // 0x008EE068-0x008EE0F0
		public StreamReader(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen); // 0x008EDEA8-0x008EE068
		public StreamReader(string path); // 0x008EE224-0x008EE22C
		public StreamReader(string path, bool detectEncodingFromByteOrderMarks); // 0x008EE22C-0x008EE2C4
		public StreamReader(string path, Encoding encoding); // 0x008EE2D0-0x008EE358
		public StreamReader(string path, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize); // 0x008EE2C4-0x008EE2D0
		internal StreamReader(string path, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool checkHost); // 0x008EE358-0x008EE590
		static StreamReader(); // 0x008EF530-0x008EF598
	
		// Methods
		private void CheckAsyncTaskInProgress(); // 0x008EDCEC-0x008EDD98
		private void Init(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen); // 0x008EE0F0-0x008EE224
		internal void Init(Stream stream); // 0x008EE590-0x008EE5A0
		protected override void Dispose(bool disposing); // 0x008EE5A0-0x008EE658
		public override int Peek(); // 0x008EE66C-0x008EE708
		internal bool DataAvailable(); // 0x008EE790-0x008EE7A0
		public override int Read(); // 0x008EE7A0-0x008EE83C
		public override int Read([In, Out] char[] buffer, int index, int count); // 0x008EE83C-0x008EEA7C
		public override string ReadToEnd(); // 0x008EEC8C-0x008EED68
		private void CompressBuffer(int n); // 0x008EED68-0x008EEDB0
		private void DetectEncoding(); // 0x008EEDB0-0x008EF080
		private bool IsPreamble(); // 0x008EF080-0x008EF198
		internal virtual int ReadBuffer(); // 0x008EF198-0x008EF304
		private int ReadBuffer(char[] userBuffer, int userOffset, int desiredChars, out bool readToUserBuffer); // 0x008EEA7C-0x008EEC8C
		public override string ReadLine(); // 0x008EF304-0x008EF530
	}

	[Serializable]
	[ComVisible] // 0x004B4AD0-0x004B4AE4
	public class StreamWriter : TextWriter // TypeDefIndex: 585
	{
		// Fields
		public static readonly StreamWriter Null; // 0x00
		private Stream stream; // 0x28
		private Encoding encoding; // 0x30
		private Encoder encoder; // 0x38
		private byte[] byteBuffer; // 0x40
		private char[] charBuffer; // 0x48
		private int charPos; // 0x50
		private int charLen; // 0x54
		private bool autoFlush; // 0x58
		private bool haveWrittenPreamble; // 0x59
		private bool closable; // 0x5A
		[NonSerialized]
		private System.Threading.Tasks.Task _asyncWriteTask; // 0x60
		private static Encoding _UTF8NoBOM; // 0x08
	
		// Properties
		internal static Encoding UTF8NoBOM { [FriendAccessAllowed] /* 0x004BBE80-0x004BBE90 */ get; } // 0x008EF760-0x008EF854 
		public virtual bool AutoFlush { set; } // 0x008F04E0-0x008F0534
		internal bool LeaveOpen { get; } // 0x008F02AC-0x008F02BC 
	
		// Constructors
		internal StreamWriter(); // 0x008EF854-0x008EF8BC
		public StreamWriter(Stream stream); // 0x008EF954-0x008EF9D8
		public StreamWriter(Stream stream, Encoding encoding, int bufferSize, bool leaveOpen); // 0x008EF9D8-0x008EFB88
		public StreamWriter(string path); // 0x008EFCC0-0x008EFD48
		public StreamWriter(string path, bool append); // 0x008EFD54-0x008EFDE0
		public StreamWriter(string path, bool append, Encoding encoding); // 0x008EFDE0-0x008EFDF0
		public StreamWriter(string path, bool append, Encoding encoding, int bufferSize); // 0x008EFD48-0x008EFD54
		internal StreamWriter(string path, bool append, Encoding encoding, int bufferSize, bool checkHost); // 0x008EFDF0-0x008EFFE0
		static StreamWriter(); // 0x008F09C8-0x008F0A90
	
		// Methods
		private void CheckAsyncTaskInProgress(); // 0x008EF6B4-0x008EF760
		private void Init(Stream streamArg, Encoding encodingArg, int bufferSize, bool shouldLeaveOpen); // 0x008EFB88-0x008EFCC0
		private static Stream CreateFile(string path, bool append, bool checkHost); // 0x008EFFE0-0x008F00D0
		public override void Close(); // 0x008F00D0-0x008F014C
		protected override void Dispose(bool disposing); // 0x008F014C-0x008F02AC
		public override void Flush(); // 0x008F042C-0x008F0458
		private void Flush(bool flushStream, bool flushEncoder); // 0x008F02BC-0x008F0428
		public override void Write(char value); // 0x008F0534-0x008F05D8
		public override void Write(char[] buffer); // 0x008F05D8-0x008F06B4
		public override void Write(char[] buffer, int index, int count); // 0x008F06B4-0x008F08F0
		public override void Write(string value); // 0x008F08F0-0x008F09C8
	}

	[Serializable]
	[ComVisible] // 0x004B4AE4-0x004B4AF8
	public class StringReader : TextReader // TypeDefIndex: 586
	{
		// Fields
		private string _s; // 0x18
		private int _pos; // 0x20
		private int _length; // 0x24
	
		// Constructors
		public StringReader(string s); // 0x008F0A90-0x008F0B64
	
		// Methods
		protected override void Dispose(bool disposing); // 0x008F0B64-0x008F0B6C
		public override int Peek(); // 0x008F0B6C-0x008F0BB0
		public override int Read(); // 0x008F0BB0-0x008F0BF8
		public override int Read([In, Out] char[] buffer, int index, int count); // 0x008F0BF8-0x008F0DDC
		public override string ReadToEnd(); // 0x008F0DDC-0x008F0E24
		public override string ReadLine(); // 0x008F0E24-0x008F0F48
	}

	[Serializable]
	[ComVisible] // 0x004B4AF8-0x004B4B0C
	public abstract class TextReader : MarshalByRefObject, IDisposable // TypeDefIndex: 587
	{
		// Fields
		[NonSerialized]
		private static Func<object, string> _ReadLineDelegate; // 0x00
		[NonSerialized]
		private static Func<object, int> _ReadDelegate; // 0x08
		public static readonly TextReader Null; // 0x10
	
		// Nested types
		[Serializable]
		private sealed class NullTextReader : TextReader // TypeDefIndex: 588
		{
			// Constructors
			public NullTextReader(); // 0x008F1728-0x008F1790
	
			// Methods
			public override int Read(char[] buffer, int index, int count); // 0x008F1958-0x008F1960
			public override string ReadLine(); // 0x008F1960-0x008F1968
		}
	
		[Serializable]
		internal sealed class SyncTextReader : TextReader // TypeDefIndex: 589
		{
			// Fields
			internal TextReader _in; // 0x18
	
			// Constructors
			internal SyncTextReader(TextReader t); // 0x008F1584-0x008F1600
	
			// Methods
			protected override void Dispose(bool disposing); // 0x008F1968-0x008F1A3C
			public override int Peek(); // 0x008F1A3C-0x008F1A5C
			public override int Read(); // 0x008F1A5C-0x008F1A7C
			public override int Read([In, Out] char[] buffer, int index, int count); // 0x008F1A7C-0x008F1A9C
			public override string ReadLine(); // 0x008F1A9C-0x008F1ABC
			public override string ReadToEnd(); // 0x008F1ABC-0x008F1ADC
		}
	
		[Serializable]
		[CompilerGenerated] // 0x004B4B0C-0x004B4B1C
		private sealed class __c // TypeDefIndex: 590
		{
			// Fields
			public static readonly __c __9; // 0x00
	
			// Constructors
			static __c(); // 0x008F1790-0x008F17F4
			public __c(); // 0x008F17F4-0x008F17FC
	
			// Methods
			internal string _.cctor_b__22_0(object state); // 0x008F17FC-0x008F18B4
			internal int _.cctor_b__22_1(object state); // 0x008F18B4-0x008F1958
		}
	
		// Constructors
		protected TextReader(); // 0x008EDE00-0x008EDE08
		static TextReader(); // 0x008F1600-0x008F1728
	
		// Methods
		public void Dispose(); // 0x008F104C-0x008F10C8
		protected virtual void Dispose(bool disposing); // 0x008EE668-0x008EE66C
		public virtual int Peek(); // 0x008F10C8-0x008F10D0
		public virtual int Read(); // 0x008F10D0-0x008F10D8
		public virtual int Read([In, Out] char[] buffer, int index, int count); // 0x008F10D8-0x008F12E4
		public virtual string ReadToEnd(); // 0x008F12E4-0x008F13C4
		public virtual string ReadLine(); // 0x008F13C4-0x008F14D0
		public static TextReader Synchronized(TextReader reader); // 0x008F14D0-0x008F1584
	}

	[Serializable]
	[ComVisible] // 0x004B4B1C-0x004B4B30
	public abstract class TextWriter : MarshalByRefObject, IDisposable // TypeDefIndex: 591
	{
		// Fields
		public static readonly TextWriter Null; // 0x00
		[NonSerialized]
		private static Action<object> _WriteCharDelegate; // 0x08
		[NonSerialized]
		private static Action<object> _WriteStringDelegate; // 0x10
		[NonSerialized]
		private static Action<object> _WriteCharArrayRangeDelegate; // 0x18
		[NonSerialized]
		private static Action<object> _WriteLineCharDelegate; // 0x20
		[NonSerialized]
		private static Action<object> _WriteLineStringDelegate; // 0x28
		[NonSerialized]
		private static Action<object> _WriteLineCharArrayRangeDelegate; // 0x30
		[NonSerialized]
		private static Action<object> _FlushDelegate; // 0x38
		protected char[] CoreNewLine; // 0x18
		private IFormatProvider InternalFormatProvider; // 0x20
	
		// Properties
		private static string InitialNewLine { get; } // 0x008F1ADC-0x008F1AE4 
		public virtual IFormatProvider FormatProvider { get; } // 0x008F1B70-0x008F1B9C 
	
		// Nested types
		[Serializable]
		private sealed class NullTextWriter : TextWriter // TypeDefIndex: 592
		{
			// Constructors
			internal NullTextWriter(); // 0x008F25B0-0x008F2648
	
			// Methods
			public override void Write(char[] buffer, int index, int count); // 0x008F2B48-0x008F2B4C
			public override void Write(string value); // 0x008F2B4C-0x008F2B50
			public override void WriteLine(); // 0x008F2B50-0x008F2B54
			public override void WriteLine(string value); // 0x008F2B54-0x008F2B58
		}
	
		[Serializable]
		internal sealed class SyncTextWriter : TextWriter, IDisposable // TypeDefIndex: 593
		{
			// Fields
			private TextWriter _out; // 0x28
	
			// Properties
			public override IFormatProvider FormatProvider { get; } // 0x008F2B58-0x008F2B78 
	
			// Constructors
			internal SyncTextWriter(TextWriter t); // 0x008F1D4C-0x008F1DE4
	
			// Methods
			public override void Close(); // 0x008F2B78-0x008F2B98
			protected override void Dispose(bool disposing); // 0x008F2B98-0x008F2C6C
			public override void Flush(); // 0x008F2C6C-0x008F2C8C
			public override void Write(char value); // 0x008F2C8C-0x008F2CAC
			public override void Write(char[] buffer); // 0x008F2CAC-0x008F2CCC
			public override void Write(char[] buffer, int index, int count); // 0x008F2CCC-0x008F2CF0
			public override void Write(string value); // 0x008F2CF0-0x008F2D14
			public override void WriteLine(); // 0x008F2D14-0x008F2D38
			public override void WriteLine(char value); // 0x008F2D38-0x008F2D5C
			public override void WriteLine(char[] buffer, int index, int count); // 0x008F2D5C-0x008F2D80
			public override void WriteLine(string value); // 0x008F2D80-0x008F2DA4
			public override void WriteLine(string format, object arg0); // 0x008F2DA4-0x008F2DC8
			public override void WriteLine(string format, object arg0, object arg1); // 0x008F2DC8-0x008F2DEC
		}
	
		[Serializable]
		[CompilerGenerated] // 0x004B4B30-0x004B4B40
		private sealed class __c // TypeDefIndex: 594
		{
			// Fields
			public static readonly __c __9; // 0x00
	
			// Constructors
			static __c(); // 0x008F2648-0x008F26AC
			public __c(); // 0x008F26AC-0x008F26B4
	
			// Methods
			internal void _.cctor_b__73_0(object state); // 0x008F26B4-0x008F2754
			internal void _.cctor_b__73_1(object state); // 0x008F2754-0x008F27F8
			internal void _.cctor_b__73_2(object state); // 0x008F27F8-0x008F28A0
			internal void _.cctor_b__73_3(object state); // 0x008F28A0-0x008F2944
			internal void _.cctor_b__73_4(object state); // 0x008F2944-0x008F29E8
			internal void _.cctor_b__73_5(object state); // 0x008F29E8-0x008F2A90
			internal void _.cctor_b__73_6(object state); // 0x008F2A90-0x008F2B48
		}
	
		// Constructors
		protected TextWriter(); // 0x008F1AE4-0x008F1B70
		protected TextWriter(IFormatProvider formatProvider); // 0x008EF8BC-0x008EF954
		static TextWriter(); // 0x008F2364-0x008F25B0
	
		// Methods
		public virtual void Close(); // 0x008F1B9C-0x008F1C18
		protected virtual void Dispose(bool disposing); // 0x008F0428-0x008F042C
		public void Dispose(); // 0x008F1C18-0x008F1C94
		public virtual void Flush(); // 0x008F1C94-0x008F1C98
		public static TextWriter Synchronized(TextWriter writer); // 0x008F1C98-0x008F1D4C
		public virtual void Write(char value); // 0x008F1DE4-0x008F1DE8
		public virtual void Write(char[] buffer); // 0x008F1DE8-0x008F1E08
		public virtual void Write(char[] buffer, int index, int count); // 0x008F1E08-0x008F201C
		public virtual void Write(string value); // 0x008F201C-0x008F2064
		public virtual void WriteLine(); // 0x008F2064-0x008F2074
		public virtual void WriteLine(char value); // 0x008F2074-0x008F20AC
		public virtual void WriteLine(char[] buffer, int index, int count); // 0x008F20AC-0x008F20E8
		public virtual void WriteLine(string value); // 0x008F20E8-0x008F229C
		public virtual void WriteLine(string format, object arg0); // 0x008F229C-0x008F22FC
		public virtual void WriteLine(string format, object arg0, object arg1); // 0x008F22FC-0x008F2364
	}

	public class UnmanagedMemoryStream : Stream // TypeDefIndex: 595
	{
		// Fields
		private SafeBuffer _buffer; // 0x28
		private unsafe byte* _mem; // 0x30
		private long _length; // 0x38
		private long _capacity; // 0x40
		private long _position; // 0x48
		private long _offset; // 0x50
		private FileAccess _access; // 0x58
		internal bool _isOpen; // 0x5C
	
		// Properties
		public override bool CanRead { get; } // 0x008F3C5C-0x008F3C78 
		public override bool CanSeek { get; } // 0x008F3C78-0x008F3C80 
		public override bool CanWrite { get; } // 0x008F3C80-0x008F3C9C 
		public override long Length { get; } // 0x008F3D3C-0x008F3D5C 
		public override long Position { get; set; } // 0x008F3D5C-0x008F3D94 0x008F3D94-0x008F3E68
		[CLSCompliant] // 0x004BD504-0x004BD518
		public unsafe byte* PositionPointer { get; } // 0x008F3E68-0x008F3F68 
	
		// Constructors
		protected UnmanagedMemoryStream(); // 0x008EB784-0x008EB7F8
		[CLSCompliant] // 0x004BBE90-0x004BBEA4
		public unsafe UnmanagedMemoryStream(byte* pointer, long length); // 0x008F3B24-0x008F3BB8
		internal unsafe UnmanagedMemoryStream(byte* pointer, long length, long capacity, FileAccess access, bool skipSecurityCheck); // 0x008F3BB8-0x008F3C5C
	
		// Methods
		internal unsafe void Initialize(byte* pointer, long length, long capacity, FileAccess access, bool skipSecurityCheck); // 0x008EB7F8-0x008EBA60
		protected override void Dispose(bool disposing); // 0x008EBB18-0x008EBB24
		public override void Flush(); // 0x008F3C9C-0x008F3CB4
		public override int Read([In, Out] byte[] buffer, int offset, int count); // 0x008F3FD0-0x008F42D4
		public override int ReadByte(); // 0x008F42D4-0x008F4418
		public override long Seek(long offset, SeekOrigin loc); // 0x008F4418-0x008F4578
		public override void Write(byte[] buffer, int offset, int count); // 0x008F4578-0x008F4944
		public override void WriteByte(byte value); // 0x008F4944-0x008F4B90
	}

	internal static class PathInternal // TypeDefIndex: 596
	{
		// Methods
		public static bool IsPartiallyQualified(string path); // 0x008EB560-0x008EB568
		public static bool HasIllegalCharacters(string path, bool checkAdditional); // 0x008EB568-0x008EB5F4
	}

	[Serializable]
	[ComVisible] // 0x004B4B40-0x004B4B54
	public sealed class DirectoryInfo : FileSystemInfo // TypeDefIndex: 597
	{
		// Fields
		private string current; // 0x60
		private string parent; // 0x68
	
		// Properties
		public override bool Exists { get; } // 0x0098D7A4-0x0098D7FC 
		public override string Name { get; } // 0x0098D830-0x0098D838 
		public DirectoryInfo Parent { get; } // 0x0098B8A8-0x0098B924 
	
		// Constructors
		public DirectoryInfo(string path); // 0x0098D104-0x0098D10C
		internal DirectoryInfo(string path, bool simpleOriginalPath); // 0x0098B7D8-0x0098B8A8
		private DirectoryInfo(SerializationInfo info, StreamingContext context); // 0x0098D65C-0x0098D680
	
		// Methods
		private void Initialize(); // 0x0098D3E0-0x0098D65C
		public void Create(); // 0x0098B924-0x0098B92C
		public FileInfo[] GetFiles(); // 0x0098D838-0x0098D888
		public FileInfo[] GetFiles(string searchPattern); // 0x0098D888-0x0098D9F4
		public DirectoryInfo[] GetDirectories(); // 0x0098DA98-0x0098DAE8
		public DirectoryInfo[] GetDirectories(string searchPattern); // 0x0098DAE8-0x0098DC58
		public override string ToString(); // 0x0098DC58-0x0098DC60
		internal void CheckPath(string path); // 0x0098D16C-0x0098D2C4
	}

	[ComVisible] // 0x004B4B54-0x004B4B68
	public static class File // TypeDefIndex: 598
	{
		// Methods
		public static FileStream Create(string path); // 0x0098DEA8-0x0098DEB0
		public static FileStream Create(string path, int bufferSize); // 0x0098DEB0-0x0098DF3C
		public static StreamWriter CreateText(string path); // 0x0098DF60-0x0098DFC8
		public static void Delete(string path); // 0x0098C638-0x0098C898
		public static bool Exists(string path); // 0x0098B590-0x0098B680
		public static FileStream OpenRead(string path); // 0x0098E3F4-0x0098E474
		public static void SetLastWriteTime(string path, DateTime lastWriteTime); // 0x0098CD3C-0x0098CE4C
		public static void SetLastWriteTimeUtc(string path, DateTime lastWriteTimeUtc); // 0x0098E5A8-0x0098E5E0
		public static byte[] ReadAllBytes(string path); // 0x0098E5E0-0x0098E83C
		public static string ReadAllText(string path); // 0x0098E83C-0x0098E97C
		public static void WriteAllBytes(string path, byte[] bytes); // 0x0098E97C-0x0098EAC0
		public static void WriteAllText(string path, string contents); // 0x0098EAC0-0x0098EB40
		public static void WriteAllText(string path, string contents, Encoding encoding); // 0x0098EB40-0x0098EC8C
		internal static int FillAttributeInfo(string path, ref MonoIOStat data, bool tryagain, bool returnErrorOnNotFound); // 0x0098EC8C-0x0098ED98
	}

	[Serializable]
	[ComVisible] // 0x004B4B68-0x004B4BA4
	[Flags] // 0x004B4B68-0x004B4BA4
	public enum FileAccess // TypeDefIndex: 599
	{
		Read = 1,
		Write = 2,
		ReadWrite = 3
	}

	[Serializable]
	[ComVisible] // 0x004B4BA4-0x004B4BE0
	[Flags] // 0x004B4BA4-0x004B4BE0
	public enum FileAttributes // TypeDefIndex: 600
	{
		ReadOnly = 1,
		Hidden = 2,
		System = 4,
		Directory = 16,
		Archive = 32,
		Device = 64,
		Normal = 128,
		Temporary = 256,
		SparseFile = 512,
		ReparsePoint = 1024,
		Compressed = 2048,
		Offline = 4096,
		NotContentIndexed = 8192,
		Encrypted = 16384,
		IntegrityStream = 32768,
		NoScrubData = 131072
	}

	[Serializable]
	[ComVisible] // 0x004B4BE0-0x004B4BF4
	public enum FileMode // TypeDefIndex: 601
	{
		CreateNew = 1,
		Create = 2,
		Open = 3,
		OpenOrCreate = 4,
		Truncate = 5,
		Append = 6
	}

	[Serializable]
	[ComVisible] // 0x004B4BF4-0x004B4C30
	[Flags] // 0x004B4BF4-0x004B4C30
	public enum FileOptions // TypeDefIndex: 602
	{
		WriteThrough = -2147483648,
		None = 0,
		Encrypted = 16384,
		DeleteOnClose = 67108864,
		SequentialScan = 134217728,
		RandomAccess = 268435456,
		Asynchronous = 1073741824
	}

	[Serializable]
	[ComVisible] // 0x004B4C30-0x004B4C6C
	[Flags] // 0x004B4C30-0x004B4C6C
	public enum FileShare // TypeDefIndex: 603
	{
		None = 0,
		Read = 1,
		Write = 2,
		ReadWrite = 3,
		Delete = 4,
		Inheritable = 16
	}

	[ComVisible] // 0x004B4C6C-0x004B4C80
	public class FileStream : Stream // TypeDefIndex: 604
	{
		// Fields
		private static byte[] buf_recycle; // 0x00
		private static readonly object buf_recycle_lock; // 0x08
		private byte[] buf; // 0x28
		private string name; // 0x30
		private SafeFileHandle safeHandle; // 0x38
		private bool isExposed; // 0x40
		private long append_startpos; // 0x48
		private FileAccess access; // 0x50
		private bool owner; // 0x54
		private bool async; // 0x55
		private bool canseek; // 0x56
		private bool anonymous; // 0x57
		private bool buf_dirty; // 0x58
		private int buf_size; // 0x5C
		private int buf_length; // 0x60
		private int buf_offset; // 0x64
		private long buf_start; // 0x68
	
		// Properties
		public override bool CanRead { get; } // 0x00991B14-0x00991B28 
		public override bool CanWrite { get; } // 0x00991B28-0x00991B3C 
		public override bool CanSeek { get; } // 0x00991B3C-0x00991B44 
		public override long Length { get; } // 0x00991B44-0x00991CC0 
		public override long Position { get; set; } // 0x00991DE8-0x00991F70 0x00991F70-0x00992038
	
		// Nested types
		private delegate int ReadDelegate(byte[] buffer, int offset, int count); // TypeDefIndex: 605; 0x009942AC-0x009946BC
	
		private delegate void WriteDelegate(byte[] buffer, int offset, int count); // TypeDefIndex: 606; 0x009946BC-0x00994AC4
	
		// Constructors
		internal FileStream(IntPtr handle, FileAccess access, bool ownsHandle, int bufferSize, bool isAsync, bool isConsoleWrapper); // 0x0099008C-0x00990214
		public FileStream(string path, FileMode mode); // 0x00990514-0x00990554
		public FileStream(string path, FileMode mode, FileAccess access); // 0x00990C38-0x00990C70
		public FileStream(string path, FileMode mode, FileAccess access, FileShare share); // 0x0098E474-0x0098E49C
		public FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize); // 0x0098DF3C-0x0098DF60
		public FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool useAsync); // 0x0098F190-0x0098F1C4
		public FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, FileOptions options); // 0x00990C9C-0x00990CC4
		internal FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, FileOptions options, string msgPath, bool bFromProxy, bool useLongPath = false /* Metadata: 0x001E0964 */, bool checkHost = false /* Metadata: 0x001E0965 */); // 0x00990CC4-0x00990CD4
		internal FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool isAsync, bool anonymous); // 0x00990C70-0x00990C9C
		internal FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool anonymous, FileOptions options); // 0x00990554-0x00990C38
		static FileStream(); // 0x00994240-0x009942AC
	
		// Methods
		private void Init(SafeFileHandle safeHandle, FileAccess access, bool ownsHandle, int bufferSize, bool isAsync, bool isConsoleWrapper); // 0x00990214-0x00990514
		private void ExposeHandle(); // 0x009919B8-0x009919EC
		public override int ReadByte(); // 0x00992204-0x00992378
		public override void WriteByte(byte value); // 0x009924F8-0x00992684
		public override int Read([In, Out] byte[] array, int offset, int count); // 0x00992684-0x009928CC
		private int ReadInternal(byte[] dest, int offset, int count); // 0x009928CC-0x00992974
		public override IAsyncResult BeginRead(byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject); // 0x00992A3C-0x00992C84
		public override int EndRead(IAsyncResult asyncResult); // 0x00992D48-0x00992E98
		public override void Write(byte[] array, int offset, int count); // 0x00992EC4-0x009930E8
		private void WriteInternal(byte[] src, int offset, int count); // 0x009930E8-0x009932C0
		public override IAsyncResult BeginWrite(byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject); // 0x00993474-0x009936F4
		public override void EndWrite(IAsyncResult asyncResult); // 0x00993874-0x009939C8
		public override long Seek(long offset, SeekOrigin origin); // 0x009939D4-0x00993C28
		public override void Flush(); // 0x00993C28-0x00993CC4
		~FileStream(); // 0x00993CC4-0x00993D40
		protected override void Dispose(bool disposing); // 0x00993D40-0x00994090
		private int ReadSegment(byte[] dest, int dest_offset, int count); // 0x00992974-0x00992A3C
		private int WriteSegment(byte[] src, int src_offset, int count); // 0x009933F8-0x00993474
		private void FlushBuffer(); // 0x00992038-0x00992204
		private void FlushBufferIfDirty(); // 0x00991CC0-0x00991CD0
		private void RefillBuffer(); // 0x009924BC-0x009924F8
		private int ReadData(SafeHandle safeHandle, byte[] buf, int offset, int count); // 0x00992378-0x009924BC
		private void InitBuffer(int size, bool isZeroSize); // 0x00991754-0x009919B8
		private string GetSecureFileName(string filename); // 0x009915A0-0x0099163C
		private string GetSecureFileName(string filename, bool full); // 0x00991424-0x009914EC
	}

	internal class FileStreamAsyncResult : IAsyncResult // TypeDefIndex: 607
	{
		// Fields
		private object state; // 0x10
		private ManualResetEvent wh; // 0x18
		private AsyncCallback cb; // 0x20
		public int Count; // 0x28
		public int OriginalCount; // 0x2C
		public int BytesRead; // 0x30
		private AsyncCallback realcb; // 0x38
	
		// Properties
		public object AsyncState { get; } // 0x00994B90-0x00994B98 
		public WaitHandle AsyncWaitHandle { get; } // 0x00994B98-0x00994BA0 
	
		// Constructors
		public FileStreamAsyncResult(AsyncCallback cb, object state); // 0x009936F4-0x009937B0
	
		// Methods
		private static void CBWrapper(IAsyncResult ares); // 0x00994AC4-0x00994B90
	}

	internal enum MonoFileType // TypeDefIndex: 608
	{
		Unknown = 0,
		Disk = 1,
		Char = 2,
		Pipe = 3,
		Remote = 32768
	}

	internal static class MonoIO // TypeDefIndex: 609
	{
		// Fields
		public static readonly IntPtr InvalidHandle; // 0x00
		private static bool dump_handles; // 0x08
	
		// Properties
		public static IntPtr ConsoleOutput { get; } // 0x0099639C-0x009963A0 
		public static IntPtr ConsoleInput { get; } // 0x009963A0-0x009963A4 
		public static IntPtr ConsoleError { get; } // 0x009963A4-0x009963A8 
		public static char VolumeSeparatorChar { get; } // 0x009963A8-0x009963AC 
		public static char DirectorySeparatorChar { get; } // 0x009963AC-0x009963B0 
		public static char AltDirectorySeparatorChar { get; } // 0x009963B0-0x009963B4 
		public static char PathSeparator { get; } // 0x009963B4-0x009963B8 
	
		// Constructors
		static MonoIO(); // 0x009963BC-0x00996440
	
		// Methods
		public static Exception GetException(MonoIOError error); // 0x0098CC34-0x0098CD38
		public static Exception GetException(string path, MonoIOError error); // 0x0098B9B0-0x0098C090
		private static unsafe bool CreateDirectory(char* path, out MonoIOError error); // 0x00995F78-0x00995F7C
		public static bool CreateDirectory(string path, out MonoIOError error); // 0x0098B92C-0x0098B9B0
		private static unsafe bool RemoveDirectory(char* path, out MonoIOError error); // 0x00995F7C-0x00995F80
		public static bool RemoveDirectory(string path, out MonoIOError error); // 0x0098C418-0x0098C49C
		public static string GetCurrentDirectory(out MonoIOError error); // 0x0098CC30-0x0098CC34
		private static unsafe bool DeleteFile(char* path, out MonoIOError error); // 0x00995F80-0x00995F84
		public static bool DeleteFile(string path, out MonoIOError error); // 0x0098C394-0x0098C418
		private static unsafe FileAttributes GetFileAttributes(char* path, out MonoIOError error); // 0x00995F84-0x00995F88
		public static FileAttributes GetFileAttributes(string path, out MonoIOError error); // 0x00995F88-0x0099600C
		private static MonoFileType GetFileType(IntPtr handle, out MonoIOError error); // 0x0099600C-0x00996010
		public static MonoFileType GetFileType(SafeHandle safeHandle, out MonoIOError error); // 0x0099163C-0x00991754
		private static unsafe IntPtr FindFirstFile(char* pathWithPattern, out string fileName, out int fileAttr, out int error); // 0x00996010-0x00996014
		public static IntPtr FindFirstFile(string pathWithPattern, out string fileName, out int fileAttr, out int error); // 0x00996014-0x009960B0
		public static bool FindNextFile(IntPtr hnd, out string fileName, out int fileAttr, out int error); // 0x009960B0-0x009960B4
		public static bool FindCloseFile(IntPtr hnd); // 0x009960B4-0x009960B8
		public static bool Exists(string path, out MonoIOError error); // 0x0098E49C-0x0098E51C
		public static bool ExistsFile(string path, out MonoIOError error); // 0x0098E364-0x0098E3F4
		public static bool ExistsDirectory(string path, out MonoIOError error); // 0x0098CAD0-0x0098CB70
		public static bool ExistsSymlink(string path, out MonoIOError error); // 0x0098C308-0x0098C394
		private static unsafe bool GetFileStat(char* path, out MonoIOStat stat, out MonoIOError error); // 0x009960B8-0x009960BC
		public static bool GetFileStat(string path, out MonoIOStat stat, out MonoIOError error); // 0x0098ED98-0x0098EE24
		private static unsafe IntPtr Open(char* filename, FileMode mode, FileAccess access, FileShare share, FileOptions options, out MonoIOError error); // 0x009960BC-0x009960C0
		public static IntPtr Open(string filename, FileMode mode, FileAccess access, FileShare share, FileOptions options, out MonoIOError error); // 0x009914EC-0x009915A0
		public static bool Close(IntPtr handle, out MonoIOError error); // 0x00994090-0x00994094
		private static int Read(IntPtr handle, byte[] dest, int dest_offset, int count, out MonoIOError error); // 0x009960C0-0x009960C4
		public static int Read(SafeHandle safeHandle, byte[] dest, int dest_offset, int count, out MonoIOError error); // 0x00994094-0x009941CC
		private static int Write(IntPtr handle, in byte[] src, int src_offset, int count, out MonoIOError error); // 0x009960C4-0x009960C8
		public static int Write(SafeHandle safeHandle, byte[] src, int src_offset, int count, out MonoIOError error); // 0x009932C0-0x009933F8
		private static long Seek(IntPtr handle, long offset, SeekOrigin origin, out MonoIOError error); // 0x009960C8-0x009960CC
		public static long Seek(SafeHandle safeHandle, long offset, SeekOrigin origin, out MonoIOError error); // 0x009919EC-0x00991B14
		private static long GetLength(IntPtr handle, out MonoIOError error); // 0x009960CC-0x009960D0
		public static long GetLength(SafeHandle safeHandle, out MonoIOError error); // 0x00991CD0-0x00991DE8
		private static bool SetFileTime(IntPtr handle, long creation_time, long last_access_time, long last_write_time, out MonoIOError error); // 0x009960D0-0x009960D4
		public static bool SetFileTime(SafeHandle safeHandle, long creation_time, long last_access_time, long last_write_time, out MonoIOError error); // 0x009960D4-0x0099620C
		public static bool SetLastWriteTime(string path, DateTime dateTime, out MonoIOError error); // 0x0098E51C-0x0098E5A8
		public static bool SetFileTime(string path, int type, long creation_time, long last_access_time, long last_write_time, DateTime dateTime, out MonoIOError error); // 0x0099620C-0x0099639C
		private static void DumpHandles(); // 0x00995F74-0x00995F78
		public static bool RemapPath(string path, out string newPath); // 0x009963B8-0x009963BC
	}

	internal enum MonoIOError // TypeDefIndex: 610
	{
		ERROR_SUCCESS = 0,
		ERROR_FILE_NOT_FOUND = 2,
		ERROR_PATH_NOT_FOUND = 3,
		ERROR_TOO_MANY_OPEN_FILES = 4,
		ERROR_ACCESS_DENIED = 5,
		ERROR_INVALID_HANDLE = 6,
		ERROR_INVALID_DRIVE = 15,
		ERROR_NOT_SAME_DEVICE = 17,
		ERROR_NO_MORE_FILES = 18,
		ERROR_NOT_READY = 21,
		ERROR_WRITE_FAULT = 29,
		ERROR_READ_FAULT = 30,
		ERROR_GEN_FAILURE = 31,
		ERROR_SHARING_VIOLATION = 32,
		ERROR_LOCK_VIOLATION = 33,
		ERROR_HANDLE_DISK_FULL = 39,
		ERROR_FILE_EXISTS = 80,
		ERROR_CANNOT_MAKE = 82,
		ERROR_INVALID_PARAMETER = 87,
		ERROR_BROKEN_PIPE = 109,
		ERROR_INVALID_NAME = 123,
		ERROR_DIR_NOT_EMPTY = 145,
		ERROR_ALREADY_EXISTS = 183,
		ERROR_FILENAME_EXCED_RANGE = 206,
		ERROR_DIRECTORY = 267,
		ERROR_ENCRYPTION_FAILED = 6000
	}

	internal struct MonoIOStat // TypeDefIndex: 611
	{
		// Fields
		public FileAttributes fileAttributes; // 0x00
		public long Length; // 0x08
		public long CreationTime; // 0x10
		public long LastAccessTime; // 0x18
		public long LastWriteTime; // 0x20
	}

	[ComVisible] // 0x004B4C80-0x004B4C94
	public static class Path // TypeDefIndex: 612
	{
		// Fields
		[Obsolete] // 0x004B8F50-0x004B8F88
		public static readonly char[] InvalidPathChars; // 0x00
		public static readonly char AltDirectorySeparatorChar; // 0x08
		public static readonly char DirectorySeparatorChar; // 0x0A
		public static readonly char PathSeparator; // 0x0C
		internal static readonly string DirectorySeparatorStr; // 0x10
		public static readonly char VolumeSeparatorChar; // 0x18
		internal static readonly char[] PathSeparatorChars; // 0x20
		private static readonly bool dirEqualsVolume; // 0x28
		internal static readonly char[] trimEndCharsWindows; // 0x30
		internal static readonly char[] trimEndCharsUnix; // 0x38
	
		// Properties
		internal static string DirectorySeparatorCharAsString { get; } // 0x00998F08-0x00998F70 
		internal static char[] TrimEndChars { get; } // 0x00998F70-0x00999010 
	
		// Constructors
		static Path(); // 0x009982A0-0x0099845C
	
		// Methods
		public static string Combine(string path1, string path2); // 0x00996440-0x009966D8
		internal static string CleanPath(string s); // 0x009968B0-0x00996DA4
		public static string GetDirectoryName(string path); // 0x0098DFC8-0x0098E364
		public static string GetExtension(string path); // 0x00997234-0x00997364
		public static string GetFileName(string path); // 0x0098D2C4-0x0098D3E0
		public static string GetFullPath(string path); // 0x0098CA58-0x0098CAD0
		internal static string GetFullPathInternal(string path); // 0x0098EEB0-0x0098EF14
		private static extern int GetFullPathName(string path, int numBufferChars, StringBuilder buffer, ref IntPtr lpFilePartOrNull); // 0x00997410-0x00997508
		internal static string GetFullPathName(string path); // 0x00997508-0x009976C4
		internal static string WindowsDriveAdjustment(string path); // 0x009976C4-0x009979B0
		internal static string InsecureGetFullPath(string path); // 0x00990CD4-0x00991424
		internal static bool IsDirectorySeparator(char c); // 0x009979B0-0x00997A54
		public static string GetPathRoot(string path); // 0x00996DA4-0x00997234
		public static bool IsPathRooted(string path); // 0x009966D8-0x009968B0
		public static char[] GetInvalidPathChars(); // 0x00998210-0x009982A0
		private static int findExtension(string path); // 0x00997364-0x00997410
		private static string GetServerAndShare(string path); // 0x0099845C-0x009985DC
		private static bool SameRoot(string root, string path); // 0x009985DC-0x009988FC
		private static string CanonicalizePath(string path); // 0x00997A54-0x00998210
		public static string Combine(params /* 0x004BD2F0-0x004BD300 */ string[] paths); // 0x009988FC-0x00998C14
		public static string Combine(string path1, string path2, string path3); // 0x00998C14-0x00998DAC
		internal static void Validate(string path); // 0x0098C298-0x0098C308
		internal static void Validate(string path, string parameterName); // 0x00998DAC-0x00998F08
		internal static void CheckSearchPattern(string searchPattern); // 0x00999010-0x009991A4
		internal static void CheckInvalidPathChars(string path, bool checkAdditional = false /* Metadata: 0x001E09E2 */); // 0x009991A4-0x0099929C
		internal static string InternalCombine(string path1, string path2); // 0x0099929C-0x0099AAF4
	}

	[Serializable]
	[ComVisible] // 0x004B4C94-0x004B4CA8
	public enum SearchOption // TypeDefIndex: 613
	{
		TopDirectoryOnly = 0,
		AllDirectories = 1
	}

	[Serializable]
	[ComVisible] // 0x004B4CA8-0x004B4CBC
	public enum SeekOrigin // TypeDefIndex: 614
	{
		Begin = 0,
		Current = 1,
		End = 2
	}

	internal class UnexceptionalStreamReader : StreamReader // TypeDefIndex: 615
	{
		// Fields
		private static bool[] newline; // 0x00
		private static char newlineChar; // 0x08
	
		// Constructors
		static UnexceptionalStreamReader(); // 0x008F2DEC-0x008F2E90
		public UnexceptionalStreamReader(Stream stream, Encoding encoding); // 0x008F2E90-0x008F2F0C
	
		// Methods
		public override int Peek(); // 0x008F2F0C-0x008F2FC8
		public override int Read(); // 0x008F2FC8-0x008F3084
		public override int Read([In, Out] char[] dest_buffer, int index, int count); // 0x008F3084-0x008F3304
		private bool CheckEOL(char current); // 0x008F3304-0x008F3500
		public override string ReadLine(); // 0x008F3500-0x008F35BC
		public override string ReadToEnd(); // 0x008F35BC-0x008F3678
	}

	internal class UnexceptionalStreamWriter : StreamWriter // TypeDefIndex: 616
	{
		// Constructors
		public UnexceptionalStreamWriter(Stream stream, Encoding encoding); // 0x008F3678-0x008F36FC
	
		// Methods
		public override void Flush(); // 0x008F36FC-0x008F37C8
		public override void Write(char[] buffer, int index, int count); // 0x008F37C8-0x008F38B4
		public override void Write(char value); // 0x008F38B4-0x008F3984
		public override void Write(char[] value); // 0x008F3984-0x008F3A54
		public override void Write(string value); // 0x008F3A54-0x008F3B24
	}

	internal class CStreamReader : StreamReader // TypeDefIndex: 617
	{
		// Fields
		private TermInfoDriver driver; // 0x68
	
		// Constructors
		public CStreamReader(Stream stream, Encoding encoding); // 0x00989E9C-0x00989F8C
	
		// Methods
		public override int Peek(); // 0x00989F8C-0x0098A04C
		public override int Read(); // 0x0098A04C-0x0098A128
		public override int Read([In, Out] char[] dest, int index, int count); // 0x0098A128-0x0098A2F4
		public override string ReadLine(); // 0x0098A2F4-0x0098A3BC
		public override string ReadToEnd(); // 0x0098A3BC-0x0098A484
	}

	internal class CStreamWriter : StreamWriter // TypeDefIndex: 618
	{
		// Fields
		private TermInfoDriver driver; // 0x68
	
		// Constructors
		public CStreamWriter(Stream stream, Encoding encoding, bool leaveOpen); // 0x0098A484-0x0098A588
	
		// Methods
		public override void Write(char[] buffer, int index, int count); // 0x0098A588-0x0098A908
		public override void Write(char val); // 0x0098A908-0x0098AAD8
		public void InternalWriteString(string val); // 0x0098ABAC-0x0098AC80
		public void InternalWriteChar(char val); // 0x0098AAD8-0x0098ABAC
		public void InternalWriteChars(char[] buffer, int n); // 0x0098AC80-0x0098AD60
		public override void Write(char[] val); // 0x0098AD60-0x0098AD8C
		public override void Write(string val); // 0x0098AD8C-0x0098AEA8
	}
}

namespace System.Globalization
{
	public static class CharUnicodeInfo // TypeDefIndex: 619
	{
		// Fields
		private static ushort[] s_pCategoryLevel1Index; // 0x00
		private static byte[] s_pCategoriesValue; // 0x08
		private static ushort[] s_pNumericLevel1Index; // 0x10
		private static byte[] s_pNumericValues; // 0x18
		private static ushort[] s_pDigitValues; // 0x20
	
		// Nested types
		internal static class Debug // TypeDefIndex: 620
		{
			// Methods
			internal static void Assert(bool condition, string message); // 0x0086CC10-0x0086CC14
		}
	
		// Constructors
		static CharUnicodeInfo(); // 0x0086D1D8-0x0086D324
	
		// Methods
		internal static int InternalConvertToUtf32(string s, int index); // 0x0086CB3C-0x0086CC10
		internal static int InternalConvertToUtf32(string s, int index, out int charLength); // 0x0086CC14-0x0086CD00
		internal static bool IsWhiteSpace(string s, int index); // 0x0086CD00-0x0086CD94
		internal static bool IsWhiteSpace(char c); // 0x0086CE84-0x0086CEF8
		public static UnicodeCategory GetUnicodeCategory(char ch); // 0x0086CEF8-0x0086CF5C
		public static UnicodeCategory GetUnicodeCategory(string s, int index); // 0x0086CD94-0x0086CE84
		internal static UnicodeCategory InternalGetUnicodeCategory(int ch); // 0x0086CF5C-0x0086CFCC
		internal static byte InternalGetCategoryValue(int ch, int offset); // 0x0086D050-0x0086D14C
		internal static UnicodeCategory InternalGetUnicodeCategory(string value, int index); // 0x0086CFCC-0x0086D050
		internal static UnicodeCategory InternalGetUnicodeCategory(string str, int index, out int charLength); // 0x0086D14C-0x0086D1D8
	}

	[Serializable]
	[ComVisible] // 0x004B4CBC-0x004B4CD0
	public abstract class Calendar : ICloneable // TypeDefIndex: 621
	{
		// Fields
		internal int m_currentEraValue; // 0x10
		[System.Runtime.Serialization.OptionalField] // 0x004B8F88-0x004B8FC0
		private bool m_isReadOnly; // 0x14
		internal int twoDigitYearMax; // 0x18
	
		// Properties
		[ComVisible] // 0x004BD518-0x004BD52C
		public virtual DateTime MinSupportedDateTime { get; } // 0x0086AA8C-0x0086AAF4 
		[ComVisible] // 0x004BD52C-0x004BD540
		public virtual DateTime MaxSupportedDateTime { get; } // 0x0086AAF4-0x0086AB5C 
		internal virtual int ID { get; } // 0x0086AB70-0x0086AB78 
		internal virtual int BaseCalendarID { get; } // 0x0086AB78-0x0086AB84 
		internal virtual int CurrentEraValue { get; } // 0x0086AC48-0x0086ACE4 
		public abstract int[] Eras { get; }
		public virtual int TwoDigitYearMax { get; } // 0x0086B0B4-0x0086B0BC 
	
		// Constructors
		protected Calendar(); // 0x0086AB5C-0x0086AB70
	
		// Methods
		[ComVisible] // 0x004BBEA4-0x004BBEB8
		public virtual object Clone(); // 0x0086AB84-0x0086AC3C
		internal void SetReadOnlyState(bool readOnly); // 0x0086AC3C-0x0086AC48
		public abstract int GetDayOfMonth(DateTime time);
		public abstract DayOfWeek GetDayOfWeek(DateTime time);
		public abstract int GetDaysInMonth(int year, int month, int era);
		public abstract int GetEra(DateTime time);
		public abstract int GetMonth(DateTime time);
		public abstract int GetMonthsInYear(int year, int era);
		public abstract int GetYear(DateTime time);
		public virtual bool IsLeapYear(int year); // 0x0086AD98-0x0086ADAC
		public abstract bool IsLeapYear(int year, int era);
		public abstract DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
		internal virtual bool TryToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era, out DateTime result); // 0x0086ADAC-0x0086AF24
		internal virtual bool IsValidYear(int year, int era); // 0x0086AF24-0x0086AFAC
		internal virtual bool IsValidMonth(int year, int month, int era); // 0x0086AFAC-0x0086B028
		internal virtual bool IsValidDay(int year, int month, int day, int era); // 0x0086B028-0x0086B0B4
		public virtual int ToFourDigitYear(int year); // 0x0086B0BC-0x0086B1D4
		internal static int GetSystemTwoDigitYearSetting(int CalID, int defaultYearValue); // 0x0086B1D4-0x0086B238
	}

	internal class CalendarData // TypeDefIndex: 622
	{
		// Fields
		internal const int MAX_CALENDARS = 23; // Metadata: 0x001E09F7
		internal string sNativeName; // 0x10
		internal string[] saShortDates; // 0x18
		internal string[] saYearMonths; // 0x20
		internal string[] saLongDates; // 0x28
		internal string sMonthDay; // 0x30
		internal string[] saEraNames; // 0x38
		internal string[] saAbbrevEraNames; // 0x40
		internal string[] saAbbrevEnglishEraNames; // 0x48
		internal string[] saDayNames; // 0x50
		internal string[] saAbbrevDayNames; // 0x58
		internal string[] saSuperShortDayNames; // 0x60
		internal string[] saMonthNames; // 0x68
		internal string[] saAbbrevMonthNames; // 0x70
		internal string[] saMonthGenitiveNames; // 0x78
		internal string[] saAbbrevMonthGenitiveNames; // 0x80
		internal string[] saLeapYearMonthNames; // 0x88
		internal int iTwoDigitYearMax; // 0x90
		internal int iCurrentEra; // 0x94
		internal bool bUseUserOverrides; // 0x98
		internal static CalendarData Invariant; // 0x00
	
		// Constructors
		private CalendarData(); // 0x0086B240-0x0086B250
		static CalendarData(); // 0x0086B250-0x0086BF04
		internal CalendarData(string localeName, int calendarId, bool bUseUserOverrides); // 0x0086BF04-0x0086C48C
	
		// Methods
		private void InitializeEraNames(string localeName, int calendarId); // 0x0086C4D4-0x0086C850
		private void InitializeAbbreviatedEraNames(string localeName, int calendarId); // 0x0086C850-0x0086CAD0
		internal static CalendarData GetCalendarData(int calendarId); // 0x0086ACE4-0x0086AD98
		private static string CalendarIdToCultureName(int calendarId); // 0x0086CAD0-0x0086CB38
		public static int nativeGetTwoDigitYearMax(int calID); // 0x0086B238-0x0086B240
		private static bool nativeGetCalendarData(CalendarData data, string localeName, int calendarId); // 0x0086C48C-0x0086C4D4
		private bool fill_calendar_data(string localeName, int datetimeIndex); // 0x0086CB38-0x0086CB3C
	}

	[Serializable]
	[ComVisible] // 0x004B4CD0-0x004B4D0C
	[Flags] // 0x004B4CD0-0x004B4D0C
	public enum CompareOptions // TypeDefIndex: 623
	{
		None = 0,
		IgnoreCase = 1,
		IgnoreNonSpace = 2,
		IgnoreSymbols = 4,
		IgnoreKanaType = 8,
		IgnoreWidth = 16,
		OrdinalIgnoreCase = 268435456,
		StringSort = 536870912,
		Ordinal = 1073741824
	}

	[Serializable]
	[ComVisible] // 0x004B4D0C-0x004B4D20
	public class CompareInfo : IDeserializationCallback // TypeDefIndex: 624
	{
		// Fields
		private const CompareOptions ValidIndexMaskOffFlags = CompareOptions.None | CompareOptions.OrdinalIgnoreCase | CompareOptions.StringSort | CompareOptions.Ordinal; // Metadata: 0x001E0A1F
		private const CompareOptions ValidCompareMaskOffFlags = CompareOptions.None | CompareOptions.OrdinalIgnoreCase | CompareOptions.Ordinal; // Metadata: 0x001E0A23
		private const CompareOptions ValidHashCodeOfStringMaskOffFlags = CompareOptions.None | CompareOptions.OrdinalIgnoreCase | CompareOptions.StringSort | CompareOptions.Ordinal; // Metadata: 0x001E0A27
		[System.Runtime.Serialization.OptionalField] // 0x004B8FC0-0x004B8FF8
		private string m_name; // 0x10
		[NonSerialized]
		private string m_sortName; // 0x18
		[System.Runtime.Serialization.OptionalField] // 0x004B8FF8-0x004B9030
		private int win32LCID; // 0x20
		private int culture; // 0x24
		private const int LINGUISTIC_IGNORECASE = 16; // Metadata: 0x001E0A2B
		private const int NORM_IGNORECASE = 1; // Metadata: 0x001E0A2F
		private const int NORM_IGNOREKANATYPE = 65536; // Metadata: 0x001E0A33
		private const int LINGUISTIC_IGNOREDIACRITIC = 32; // Metadata: 0x001E0A37
		private const int NORM_IGNORENONSPACE = 2; // Metadata: 0x001E0A3B
		private const int NORM_IGNORESYMBOLS = 4; // Metadata: 0x001E0A3F
		private const int NORM_IGNOREWIDTH = 131072; // Metadata: 0x001E0A43
		private const int SORT_STRINGSORT = 4096; // Metadata: 0x001E0A47
		private const int COMPARE_OPTIONS_ORDINAL = 1073741824; // Metadata: 0x001E0A4B
		internal const int NORM_LINGUISTIC_CASING = 134217728; // Metadata: 0x001E0A4F
		private const int RESERVED_FIND_ASCII_STRING = 536870912; // Metadata: 0x001E0A53
		private const int SORT_VERSION_WHIDBEY = 4096; // Metadata: 0x001E0A57
		private const int SORT_VERSION_V4 = 393473; // Metadata: 0x001E0A5B
		[System.Runtime.Serialization.OptionalField] // 0x004B9030-0x004B9068
		private SortVersion m_SortVersion; // 0x28
		[NonSerialized]
		private SimpleCollator collator; // 0x30
		private static Dictionary<string, SimpleCollator> collators; // 0x00
		private static bool managedCollation; // 0x08
		private static bool managedCollationChecked; // 0x09
	
		// Properties
		[ComVisible] // 0x004BD540-0x004BD554
		public virtual string Name { get; } // 0x0086D994-0x0086DA1C 
		private static bool UseManagedCollation { get; } // 0x0086E1C0-0x0086E2D4 
	
		// Constructors
		internal CompareInfo(CultureInfo culture); // 0x0086D720-0x0086D764
		internal CompareInfo(); // 0x0086F2A0-0x008702E0
	
		// Methods
		public static CompareInfo GetCompareInfo(string name); // 0x0086D764-0x0086D824
		[OnDeserializing] // 0x004BBEB8-0x004BBEC8
		private void OnDeserializing(StreamingContext ctx); // 0x0086D824-0x0086D82C
		private void OnDeserialized(); // 0x0086D82C-0x0086D8F0
		[OnDeserialized] // 0x004BBEC8-0x004BBED8
		private void OnDeserialized(StreamingContext ctx); // 0x0086D8F0-0x0086D8F4
		[OnSerializing] // 0x004BBED8-0x004BBEE8
		private void OnSerializing(StreamingContext ctx); // 0x0086D8F4-0x0086D990
		void IDeserializationCallback.OnDeserialization(object sender); // 0x0086D990-0x0086D994
		public virtual int Compare(string string1, string string2); // 0x0086DA1C-0x0086DA2C
		public virtual int Compare(string string1, string string2, CompareOptions options); // 0x0086DA2C-0x0086DBA4
		public virtual int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2, CompareOptions options); // 0x0086DC54-0x0086DF4C
		private static int CompareOrdinal(string string1, int offset1, int length1, string string2, int offset2, int length2); // 0x0086DF4C-0x0086DFA0
		public virtual bool IsPrefix(string source, string prefix, CompareOptions options); // 0x0086DFA0-0x0086E1C0
		public virtual bool IsSuffix(string source, string suffix, CompareOptions options); // 0x0086E540-0x0086E75C
		public virtual int IndexOf(string source, string value, int startIndex, int count, CompareOptions options); // 0x0086E75C-0x0086E994
		public virtual int LastIndexOf(string source, string value, int startIndex, int count, CompareOptions options); // 0x0086EA7C-0x0086ED00
		public virtual SortKey GetSortKey(string source, CompareOptions options); // 0x0086ED00-0x0086ED04
		private SortKey CreateSortKey(string source, CompareOptions options); // 0x0086ED04-0x0086EE20
		public override bool Equals(object value); // 0x0086EEF4-0x0086EFCC
		public override int GetHashCode(); // 0x0086EFCC-0x0086EFF8
		internal int GetHashCodeOfString(string source, CompareOptions options); // 0x0086EFF8-0x0086F000
		internal int GetHashCodeOfString(string source, CompareOptions options, bool forceRandomizedHashing, long additionalEntropy); // 0x0086F000-0x0086F134
		public override string ToString(); // 0x0086F134-0x0086F19C
		private SimpleCollator GetCollator(); // 0x0086E2D4-0x0086E540
		private SortKey CreateSortKeyCore(string source, CompareOptions options); // 0x0086EE20-0x0086EEF4
		private int internal_index_switch(string s1, int sindex, int count, string s2, CompareOptions opt, bool first); // 0x0086E994-0x0086EA7C
		private int internal_compare_switch(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options); // 0x0086DBA4-0x0086DC54
		private int internal_compare_managed(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options); // 0x0086F228-0x0086F2A0
		private int internal_index_managed(string s1, int sindex, int count, string s2, CompareOptions opt, bool first); // 0x0086F1A8-0x0086F224
		private void assign_sortkey(object key, string source, CompareOptions options); // 0x0086F19C-0x0086F1A0
		private int internal_compare(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options); // 0x0086F224-0x0086F228
		private int internal_index(string source, int sindex, int count, string value, CompareOptions options, bool first); // 0x0086F1A0-0x0086F1A8
	}

	[Serializable]
	[ComVisible] // 0x004B4D20-0x004B4D34
	public class CultureNotFoundException : ArgumentException, ISerializable // TypeDefIndex: 625
	{
		// Fields
		private string m_invalidCultureName; // 0x90
		private int? m_invalidCultureId; // 0x98
	
		// Properties
		public virtual int? InvalidCultureId { get; } // 0x00B81EE8-0x00B81EF0 
		public virtual string InvalidCultureName { get; } // 0x00B81EF0-0x00B81EF8 
		private static string DefaultMessage { get; } // 0x00B81B90-0x00B81BDC 
		private string FormatedInvalidCultureId { get; } // 0x00B81EF8-0x00B81FFC 
		public override string Message { get; } // 0x00B81FFC-0x00B82120 
	
		// Constructors
		public CultureNotFoundException(); // 0x00B81B64-0x00B81B90
		public CultureNotFoundException(string paramName, string message); // 0x00B7E9CC-0x00B7E9E0
		public CultureNotFoundException(string paramName, string invalidCultureName, string message); // 0x00B81BDC-0x00B81C14
		protected CultureNotFoundException(SerializationInfo info, StreamingContext context); // 0x00B81C14-0x00B81D7C
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00B81D7C-0x00B81EE8
	}

	[Serializable]
	[ComVisible] // 0x004B4D34-0x004B4D70
	[Flags] // 0x004B4D34-0x004B4D70
	public enum CultureTypes // TypeDefIndex: 626
	{
		NeutralCultures = 1,
		SpecificCultures = 2,
		InstalledWin32Cultures = 4,
		AllCultures = 7,
		UserCustomCulture = 8,
		ReplacementCultures = 16,
		WindowsOnlyCultures = 32,
		FrameworkCultures = 64
	}

	[Flags] // 0x004B4D70-0x004B4D80
	internal enum MonthNameStyles // TypeDefIndex: 627
	{
		Regular = 0,
		Genitive = 1,
		LeapYear = 2
	}

	[Flags] // 0x004B4D80-0x004B4D90
	internal enum DateTimeFormatFlags // TypeDefIndex: 628
	{
		NotInitialized = -1,
		None = 0,
		UseGenitiveMonth = 1,
		UseLeapYearMonth = 2,
		UseSpacesInMonthNames = 4,
		UseHebrewRule = 8,
		UseSpacesInDayNames = 16,
		UseDigitPrefixInTokens = 32
	}

	[Serializable]
	[ComVisible] // 0x004B4D90-0x004B4DA4
	public sealed class DateTimeFormatInfo : ICloneable, IFormatProvider // TypeDefIndex: 629
	{
		// Fields
		private static DateTimeFormatInfo invariantInfo; // 0x00
		[NonSerialized]
		private CultureData m_cultureData; // 0x10
		[System.Runtime.Serialization.OptionalField] // 0x004B90D8-0x004B9110
		internal string m_name; // 0x18
		[NonSerialized]
		private string m_langName; // 0x20
		[NonSerialized]
		private CompareInfo m_compareInfo; // 0x28
		[NonSerialized]
		private CultureInfo m_cultureInfo; // 0x30
		internal string amDesignator; // 0x38
		internal string pmDesignator; // 0x40
		[System.Runtime.Serialization.OptionalField] // 0x004B9110-0x004B9148
		internal string dateSeparator; // 0x48
		[System.Runtime.Serialization.OptionalField] // 0x004B9148-0x004B9180
		internal string generalShortTimePattern; // 0x50
		[System.Runtime.Serialization.OptionalField] // 0x004B9180-0x004B91B8
		internal string generalLongTimePattern; // 0x58
		[System.Runtime.Serialization.OptionalField] // 0x004B91B8-0x004B91F0
		internal string timeSeparator; // 0x60
		internal string monthDayPattern; // 0x68
		[System.Runtime.Serialization.OptionalField] // 0x004B91F0-0x004B9228
		internal string dateTimeOffsetPattern; // 0x70
		internal const string rfc1123Pattern = "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'"; // Metadata: 0x001E0AAB
		internal const string sortableDateTimePattern = "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss"; // Metadata: 0x001E0AD2
		internal const string universalSortableDateTimePattern = "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'"; // Metadata: 0x001E0AF3
		internal Calendar calendar; // 0x78
		internal int firstDayOfWeek; // 0x80
		internal int calendarWeekRule; // 0x84
		[NonSerialized]
		[System.Runtime.Serialization.OptionalField] // 0x004B9228-0x004B9260
		internal string fullDateTimePattern; // 0x88
		internal string[] abbreviatedDayNames; // 0x90
		[System.Runtime.Serialization.OptionalField] // 0x004B9260-0x004B9298
		internal string[] m_superShortDayNames; // 0x98
		internal string[] dayNames; // 0xA0
		internal string[] abbreviatedMonthNames; // 0xA8
		internal string[] monthNames; // 0xB0
		[System.Runtime.Serialization.OptionalField] // 0x004B9298-0x004B92D0
		internal string[] genitiveMonthNames; // 0xB8
		[System.Runtime.Serialization.OptionalField] // 0x004B92D0-0x004B9308
		internal string[] m_genitiveAbbreviatedMonthNames; // 0xC0
		[System.Runtime.Serialization.OptionalField] // 0x004B9308-0x004B9340
		internal string[] leapYearMonthNames; // 0xC8
		internal string longDatePattern; // 0xD0
		internal string shortDatePattern; // 0xD8
		internal string yearMonthPattern; // 0xE0
		internal string longTimePattern; // 0xE8
		internal string shortTimePattern; // 0xF0
		[System.Runtime.Serialization.OptionalField] // 0x004B9340-0x004B9378
		private string[] allYearMonthPatterns; // 0xF8
		internal string[] allShortDatePatterns; // 0x100
		internal string[] allLongDatePatterns; // 0x108
		internal string[] allShortTimePatterns; // 0x110
		internal string[] allLongTimePatterns; // 0x118
		internal string[] m_eraNames; // 0x120
		internal string[] m_abbrevEraNames; // 0x128
		internal string[] m_abbrevEnglishEraNames; // 0x130
		internal int[] optionalCalendars; // 0x138
		private const int DEFAULT_ALL_DATETIMES_SIZE = 132; // Metadata: 0x001E0B15
		internal bool m_isReadOnly; // 0x140
		[System.Runtime.Serialization.OptionalField] // 0x004B9378-0x004B93B0
		internal DateTimeFormatFlags formatFlags; // 0x144
		internal static bool preferExistingTokens; // 0x08
		[System.Runtime.Serialization.OptionalField] // 0x004B93B0-0x004B93E8
		private int CultureID; // 0x148
		[System.Runtime.Serialization.OptionalField] // 0x004B93E8-0x004B9420
		private bool m_useUserOverride; // 0x14C
		[System.Runtime.Serialization.OptionalField] // 0x004B9420-0x004B9458
		private bool bUseCalendarInfo; // 0x14D
		[System.Runtime.Serialization.OptionalField] // 0x004B9458-0x004B9490
		private int nDataItem; // 0x150
		[System.Runtime.Serialization.OptionalField] // 0x004B9490-0x004B94C8
		internal bool m_isDefaultCalendar; // 0x154
		[System.Runtime.Serialization.OptionalField] // 0x004B94C8-0x004B9500
		private static Hashtable s_calendarNativeNames; // 0x10
		[System.Runtime.Serialization.OptionalField] // 0x004B9500-0x004B9538
		internal string[] m_dateWords; // 0x158
		[NonSerialized]
		private string m_fullTimeSpanPositivePattern; // 0x160
		[NonSerialized]
		private string m_fullTimeSpanNegativePattern; // 0x168
		internal const DateTimeStyles InvalidDateTimeStyles = DateTimeStyles.None; // Metadata: 0x001E0B19
		[NonSerialized]
		private TokenHashValue[] m_dtfiTokenHash; // 0x170
		private const int TOKEN_HASH_SIZE = 199; // Metadata: 0x001E0B1D
		private const int SECOND_PRIME = 197; // Metadata: 0x001E0B21
		private const string dateSeparatorOrTimeZoneOffset = "-"; // Metadata: 0x001E0B25
		private const string invariantDateSeparator = "/"; // Metadata: 0x001E0B2A
		private const string invariantTimeSeparator = ":"; // Metadata: 0x001E0B2F
		internal const string IgnorablePeriod = "."; // Metadata: 0x001E0B34
		internal const string IgnorableComma = ","; // Metadata: 0x001E0B39
		internal const string CJKYearSuff = "\uFFFD"; // Metadata: 0x001E0B3E
		internal const string CJKMonthSuff = "\uFFFD"; // Metadata: 0x001E0B45
		internal const string CJKDaySuff = "\uFFFD"; // Metadata: 0x001E0B4C
		internal const string KoreanYearSuff = "\uFFFD"; // Metadata: 0x001E0B53
		internal const string KoreanMonthSuff = "\uFFFD"; // Metadata: 0x001E0B5A
		internal const string KoreanDaySuff = "\uFFFD"; // Metadata: 0x001E0B61
		internal const string KoreanHourSuff = "\uFFFD"; // Metadata: 0x001E0B68
		internal const string KoreanMinuteSuff = "\uFFFD"; // Metadata: 0x001E0B6F
		internal const string KoreanSecondSuff = "\uFFFD"; // Metadata: 0x001E0B76
		internal const string CJKHourSuff = "\uFFFD"; // Metadata: 0x001E0B7D
		internal const string ChineseHourSuff = "\uFFFD"; // Metadata: 0x001E0B84
		internal const string CJKMinuteSuff = "\uFFFD"; // Metadata: 0x001E0B8B
		internal const string CJKSecondSuff = "\uFFFD"; // Metadata: 0x001E0B92
		internal const string LocalTimeMark = "T"; // Metadata: 0x001E0B99
		internal const string KoreanLangName = "ko"; // Metadata: 0x001E0B9E
		internal const string JapaneseLangName = "ja"; // Metadata: 0x001E0BA4
		internal const string EnglishLangName = "en"; // Metadata: 0x001E0BAA
		private static DateTimeFormatInfo s_jajpDTFI; // 0x18
		private static DateTimeFormatInfo s_zhtwDTFI; // 0x20
	
		// Properties
		private string CultureName { get; } // 0x00B82128-0x00B82158 
		private CultureInfo Culture { get; } // 0x00B82158-0x00B821EC 
		private string LanguageName { get; } // 0x00B821EC-0x00B8221C 
		public static DateTimeFormatInfo InvariantInfo { get; } // 0x00B83584-0x00B83678 
		public static DateTimeFormatInfo CurrentInfo { get; } // 0x00B83678-0x00B83764 
		public string AMDesignator { get; } // 0x00B839AC-0x00B839B4 
		public Calendar Calendar { get; set; } // 0x00B839B4-0x00B839BC 0x00B8252C-0x00B827A4
		private int[] OptionalCalendars { get; } // 0x00B839BC-0x00B839F4 
		internal string[] EraNames { get; } // 0x00B83A04-0x00B83A60 
		internal string[] AbbreviatedEraNames { get; } // 0x00B83B80-0x00B83BDC 
		internal string[] AbbreviatedEnglishEraNames { get; } // 0x00B83D14-0x00B83D70 
		public string DateSeparator { get; } // 0x00B83D70-0x00B83D78 
		public string FullDateTimePattern { get; } // 0x00B83D78-0x00B83DF4 
		public string LongDatePattern { get; set; } // 0x00B831A0-0x00B831F4 0x00B82ACC-0x00B82BD8
		public string LongTimePattern { get; set; } // 0x00B8314C-0x00B831A0 0x00B82DF0-0x00B82F04
		public string MonthDayPattern { get; } // 0x00B83E94-0x00B83EF0 
		public string PMDesignator { get; } // 0x00B83EF0-0x00B83EF8 
		public string RFC1123Pattern { get; } // 0x00B83EF8-0x00B83F40 
		public string ShortDatePattern { get; set; } // 0x00B83248-0x00B8329C 0x00B82BD8-0x00B82CE8
		public string ShortTimePattern { get; set; } // 0x00B831F4-0x00B83248 0x00B82F04-0x00B83010
		public string SortableDateTimePattern { get; } // 0x00B83FE0-0x00B84028 
		internal string GeneralShortTimePattern { get; } // 0x00B84028-0x00B840A4 
		internal string GeneralLongTimePattern { get; } // 0x00B840A4-0x00B84120 
		internal string DateTimeOffsetPattern { get; } // 0x00B84120-0x00B842A0 
		public string TimeSeparator { get; } // 0x00B842A0-0x00B842A8 
		public string UniversalSortableDateTimePattern { get; } // 0x00B842A8-0x00B842F0 
		public string YearMonthPattern { get; set; } // 0x00B8329C-0x00B832F0 0x00B82CE8-0x00B82DF0
		public string[] AbbreviatedDayNames { get; } // 0x00B8434C-0x00B843D4 
		public string[] DayNames { get; } // 0x00B843D4-0x00B8445C 
		public string[] AbbreviatedMonthNames { get; } // 0x00B8445C-0x00B844E4 
		public string[] MonthNames { get; } // 0x00B844E4-0x00B8456C 
		internal bool HasSpacesInMonthNames { get; } // 0x00B8456C-0x00B84584 
		internal bool HasSpacesInDayNames { get; } // 0x00B846E8-0x00B84700 
		private string[] AllYearMonthPatterns { get; } // 0x00B83500-0x00B83584 
		private string[] AllShortDatePatterns { get; } // 0x00B8347C-0x00B83500 
		private string[] AllShortTimePatterns { get; } // 0x00B833F8-0x00B8347C 
		private string[] AllLongDatePatterns { get; } // 0x00B83374-0x00B833F8 
		private string[] AllLongTimePatterns { get; } // 0x00B832F0-0x00B83374 
		private string[] UnclonedYearMonthPatterns { get; } // 0x00B842F0-0x00B8434C 
		private string[] UnclonedShortDatePatterns { get; } // 0x00B83F40-0x00B83F9C 
		private string[] UnclonedLongDatePatterns { get; } // 0x00B83DF4-0x00B83E50 
		private string[] UnclonedShortTimePatterns { get; } // 0x00B83F9C-0x00B83FE0 
		private string[] UnclonedLongTimePatterns { get; } // 0x00B83E50-0x00B83E94 
		public bool IsReadOnly { get; } // 0x00B85700-0x00B85708 
		internal string FullTimeSpanPositivePattern { get; } // 0x00B85708-0x00B857CC 
		internal string FullTimeSpanNegativePattern { get; } // 0x00B857CC-0x00B8583C 
		internal CompareInfo CompareInfo { get; } // 0x00B8583C-0x00B858AC 
		internal DateTimeFormatFlags FormatFlags { get; } // 0x00B84584-0x00B846E8 
		internal bool HasForceTwoDigitYears { get; } // 0x00B85AC8-0x00B85AFC 
	
		// Constructors
		public DateTimeFormatInfo(); // 0x00B8238C-0x00B82458
		internal DateTimeFormatInfo(CultureData cultureData, Calendar cal); // 0x00B7E39C-0x00B7E3EC
		static DateTimeFormatInfo(); // 0x00B87EA8-0x00B87EF8
	
		// Methods
		private static bool InitPreferExistingTokens(); // 0x00B82120-0x00B82128
		private string[] internalGetAbbreviatedDayOfWeekNames(); // 0x00B8221C-0x00B82278
		private string[] internalGetDayOfWeekNames(); // 0x00B82278-0x00B822D4
		private string[] internalGetAbbreviatedMonthNames(); // 0x00B822D4-0x00B82330
		private string[] internalGetMonthNames(); // 0x00B82330-0x00B8238C
		private void InitializeOverridableProperties(CultureData cultureData, int calendarID); // 0x00B827A4-0x00B828BC
		[OnDeserialized] // 0x004BBEE8-0x004BBEF8
		private void OnDeserialized(StreamingContext ctx); // 0x00B828BC-0x00B82ACC
		[OnSerializing] // 0x004BBEF8-0x004BBF08
		private void OnSerializing(StreamingContext ctx); // 0x00B83010-0x00B8314C
		public static DateTimeFormatInfo GetInstance(IFormatProvider provider); // 0x00B83764-0x00B83910
		public object GetFormat(Type formatType); // 0x00B83910-0x00B839AC
		public object Clone(); // 0x00B7DA98-0x00B7DB78
		public string GetEraName(int era); // 0x00B83A60-0x00B83B80
		public string GetAbbreviatedEraName(int era); // 0x00B83BDC-0x00B83D14
		internal string internalGetMonthName(int month, MonthNameStyles style, bool abbreviated); // 0x00B84700-0x00B848F4
		private string[] internalGetGenitiveMonthNames(bool abbreviated); // 0x00B848F4-0x00B8498C
		internal string[] internalGetLeapYearMonthNames(); // 0x00B8498C-0x00B849E8
		public string GetAbbreviatedDayName(DayOfWeek dayofweek); // 0x00B849E8-0x00B84B70
		private static string[] GetCombinedPatterns(string[] patterns1, string[] patterns2, string connectString); // 0x00B84B70-0x00B84CE8
		public string[] GetAllDateTimePatterns(char format); // 0x00B84CE8-0x00B85040
		public string GetDayName(DayOfWeek dayofweek); // 0x00B85040-0x00B851C8
		public string GetAbbreviatedMonthName(int month); // 0x00B851C8-0x00B85358
		public string GetMonthName(int month); // 0x00B85358-0x00B854E8
		private static string[] GetMergedPatterns(string[] patterns, string defaultPattern); // 0x00B854E8-0x00B85700
		internal static void ValidateStyles(DateTimeStyles style, string parameterName); // 0x00B858AC-0x00B85988
		internal bool YearMonthAdjustment(ref int year, ref int month, bool parsedMonthName); // 0x00B85AFC-0x00B85C24
		internal static DateTimeFormatInfo GetJapaneseCalendarDTFI(); // 0x00B85C24-0x00B85D48
		internal static DateTimeFormatInfo GetTaiwanCalendarDTFI(); // 0x00B85E18-0x00B85F40
		private void ClearTokenHashTable(); // 0x00B839F4-0x00B83A04
		internal TokenHashValue[] CreateTokenHashTable(); // 0x00B85F40-0x00B86C5C
		private void AddMonthNames(TokenHashValue[] temp, string monthPostfix); // 0x00B87350-0x00B87420
		private static bool TryParseHebrewNumber(ref __DTString str, out bool badFormat, out int number); // 0x00B87420-0x00B87578
		private static bool IsHebrewChar(char ch); // 0x00B87880-0x00B87894
		internal bool Tokenize(TokenType TokenMask, out TokenType tokenType, out int tokenValue, ref __DTString str); // 0x00B87894-0x00B87CB8
		private void InsertAtCurrentHashNode(TokenHashValue[] hashTable, string str, char ch, TokenType tokenType, int tokenValue, int pos, int hashcode, int hashProbe); // 0x00B87CB8-0x00B87EA8
		private void InsertHash(TokenHashValue[] hashTable, string str, TokenType tokenType, int tokenValue); // 0x00B86C5C-0x00B8703C
	}

	internal class TokenHashValue // TypeDefIndex: 630
	{
		// Fields
		internal string tokenString; // 0x10
		internal TokenType tokenType; // 0x18
		internal int tokenValue; // 0x1C
	
		// Constructors
		internal TokenHashValue(string tokenString, TokenType tokenType, int tokenValue); // 0x00984268-0x009846C4
	}

	internal enum FORMATFLAGS // TypeDefIndex: 631
	{
		None = 0,
		UseGenitiveMonth = 1,
		UseLeapYearMonth = 2,
		UseSpacesInMonthNames = 4,
		UseHebrewParsing = 8,
		UseSpacesInDayNames = 16,
		UseDigitPrefixInTokens = 32
	}

	internal enum CalendarId : ushort // TypeDefIndex: 632
	{
		GREGORIAN = 1,
		GREGORIAN_US = 2,
		JAPAN = 3,
		TAIWAN = 4,
		KOREA = 5,
		HIJRI = 6,
		THAI = 7,
		HEBREW = 8,
		GREGORIAN_ME_FRENCH = 9,
		GREGORIAN_ARABIC = 10,
		GREGORIAN_XLIT_ENGLISH = 11,
		GREGORIAN_XLIT_FRENCH = 12,
		JULIAN = 13,
		JAPANESELUNISOLAR = 14,
		CHINESELUNISOLAR = 15,
		SAKA = 16,
		LUNAR_ETO_CHN = 17,
		LUNAR_ETO_KOR = 18,
		LUNAR_ETO_ROKUYOU = 19,
		KOREANLUNISOLAR = 20,
		TAIWANLUNISOLAR = 21,
		PERSIAN = 22,
		UMALQURA = 23,
		LAST_CALENDAR = 23
	}

	internal class DateTimeFormatInfoScanner // TypeDefIndex: 633
	{
		// Fields
		internal List<string> m_dateWords; // 0x10
		private static Dictionary<string, string> s_knownWords; // 0x00
		private FoundDatePattern m_ymdFlags; // 0x18
	
		// Properties
		private static Dictionary<string, string> KnownWords { get; } // 0x00B87EF8-0x00B881FC 
	
		// Nested types
		private enum FoundDatePattern // TypeDefIndex: 634
		{
			None = 0,
			FoundYearPatternFlag = 1,
			FoundMonthPatternFlag = 2,
			FoundDayPatternFlag = 4,
			FoundYMDPatternFlag = 7
		}
	
		// Constructors
		public DateTimeFormatInfoScanner(); // 0x00B8703C-0x00B870AC
	
		// Methods
		internal static int SkipWhiteSpacesAndNonLetter(string pattern, int currentIndex); // 0x00B881FC-0x00B88308
		internal void AddDateWordOrPostfix(string formatPostfix, string str); // 0x00B88308-0x00B88500
		internal int AddDateWords(string pattern, int index, string formatPostfix); // 0x00B885EC-0x00B887DC
		internal static int ScanRepeatChar(string pattern, char ch, int index, out int count); // 0x00B887DC-0x00B88860
		internal void AddIgnorableSymbols(string text); // 0x00B88500-0x00B885EC
		internal void ScanDateWord(string pattern); // 0x00B88860-0x00B88AA0
		internal string[] GetDateWordsOfDTFI(DateTimeFormatInfo dtfi); // 0x00B870AC-0x00B87350
		internal static FORMATFLAGS GetFormatFlagGenitiveMonth(string[] monthNames, string[] genitveMonthNames, string[] abbrevMonthNames, string[] genetiveAbbrevMonthNames); // 0x00B85988-0x00B859CC
		internal static FORMATFLAGS GetFormatFlagUseSpaceInMonthNames(string[] monthNames, string[] genitveMonthNames, string[] abbrevMonthNames, string[] genetiveAbbrevMonthNames); // 0x00B859CC-0x00B85A7C
		internal static FORMATFLAGS GetFormatFlagUseSpaceInDayNames(string[] dayNames, string[] abbrevDayNames); // 0x00B85A7C-0x00B85AB8
		internal static FORMATFLAGS GetFormatFlagUseHebrewCalendar(int calID); // 0x00B85AB8-0x00B85AC8
		private static bool EqualStringArrays(string[] array1, string[] array2); // 0x00B88AA0-0x00B88B64
		private static bool ArrayElementsHaveSpace(string[] array); // 0x00B88DD4-0x00B88EEC
		private static bool ArrayElementsBeginWithDigit(string[] array); // 0x00B88B64-0x00B88DD4
	}

	[Serializable]
	[ComVisible] // 0x004B4DA4-0x004B4DE0
	[Flags] // 0x004B4DA4-0x004B4DE0
	public enum DateTimeStyles // TypeDefIndex: 635
	{
		None = 0,
		AllowLeadingWhite = 1,
		AllowTrailingWhite = 2,
		AllowInnerWhite = 4,
		AllowWhiteSpaces = 7,
		NoCurrentDateDefault = 8,
		AdjustToUniversal = 16,
		AssumeLocal = 32,
		AssumeUniversal = 64,
		RoundtripKind = 128
	}

	[Serializable]
	[ComVisible] // 0x004B4DE0-0x004B4DF4
	public class GregorianCalendar : Calendar // TypeDefIndex: 636
	{
		// Fields
		internal GregorianCalendarTypes m_type; // 0x1C
		internal static readonly int[] DaysToMonth365; // 0x00
		internal static readonly int[] DaysToMonth366; // 0x08
		private static Calendar s_defaultInstance; // 0x10
	
		// Properties
		[ComVisible] // 0x004BD554-0x004BD568
		public override DateTime MinSupportedDateTime { get; } // 0x00B8D8C4-0x00B8D92C 
		[ComVisible] // 0x004BD568-0x004BD57C
		public override DateTime MaxSupportedDateTime { get; } // 0x00B8D92C-0x00B8D994 
		internal override int ID { get; } // 0x00B8D99C-0x00B8D9A4 
		public override int[] Eras { get; } // 0x00B8DF7C-0x00B8DFF4 
		public override int TwoDigitYearMax { get; } // 0x00B8E5F4-0x00B8E63C 
	
		// Constructors
		public GregorianCalendar(); // 0x00B8D994-0x00B8D99C
		public GregorianCalendar(GregorianCalendarTypes type); // 0x00B813F4-0x00B81560
		static GregorianCalendar(); // 0x00B8E7A0-0x00B8E854
	
		// Methods
		[OnDeserialized] // 0x004BBF08-0x004BBF18
		private void OnDeserialized(StreamingContext ctx); // 0x00B8D7C0-0x00B8D8C4
		internal static Calendar GetDefaultInstance(); // 0x00B82458-0x00B8252C
		internal virtual int GetDatePart(long ticks, int part); // 0x00B8D9A4-0x00B8DBFC
		public override int GetDayOfMonth(DateTime time); // 0x00B8DBFC-0x00B8DC44
		public override DayOfWeek GetDayOfWeek(DateTime time); // 0x00B8DC44-0x00B8DCB8
		public override int GetDaysInMonth(int year, int month, int era); // 0x00B8DCB8-0x00B8DF74
		public override int GetEra(DateTime time); // 0x00B8DF74-0x00B8DF7C
		public override int GetMonth(DateTime time); // 0x00B8DFF4-0x00B8E03C
		public override int GetMonthsInYear(int year, int era); // 0x00B8E03C-0x00B8E1C0
		public override int GetYear(DateTime time); // 0x00B8E1C0-0x00B8E208
		public override bool IsLeapYear(int year, int era); // 0x00B8E208-0x00B8E3D0
		public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x00B8E3D0-0x00B8E4E8
		internal override bool TryToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era, out DateTime result); // 0x00B8E4E8-0x00B8E5F4
		public override int ToFourDigitYear(int year); // 0x00B8E63C-0x00B8E7A0
	}

	[Serializable]
	internal class EraInfo // TypeDefIndex: 637
	{
		// Fields
		internal int era; // 0x10
		internal long ticks; // 0x18
		internal int yearOffset; // 0x20
		internal int minEraYear; // 0x24
		internal int maxEraYear; // 0x28
		[System.Runtime.Serialization.OptionalField] // 0x004B9538-0x004B9570
		internal string eraName; // 0x30
		[System.Runtime.Serialization.OptionalField] // 0x004B9570-0x004B95A8
		internal string abbrevEraName; // 0x38
		[System.Runtime.Serialization.OptionalField] // 0x004B95A8-0x004B95E0
		internal string englishEraName; // 0x40
	
		// Constructors
		internal EraInfo(int era, int startYear, int startMonth, int startDay, int yearOffset, int minEraYear, int maxEraYear); // 0x00B8D660-0x00B8D700
		internal EraInfo(int era, int startYear, int startMonth, int startDay, int yearOffset, int minEraYear, int maxEraYear, string eraName, string abbrevEraName, string englishEraName); // 0x00B8D700-0x00B8D7C0
	}

	[Serializable]
	internal class GregorianCalendarHelper // TypeDefIndex: 638
	{
		// Fields
		internal static readonly int[] DaysToMonth365; // 0x00
		internal static readonly int[] DaysToMonth366; // 0x08
		[System.Runtime.Serialization.OptionalField] // 0x004B95E0-0x004B9618
		internal int m_maxYear; // 0x10
		[System.Runtime.Serialization.OptionalField] // 0x004B9618-0x004B9650
		internal int m_minYear; // 0x14
		internal Calendar m_Cal; // 0x18
		[System.Runtime.Serialization.OptionalField] // 0x004B9650-0x004B9688
		internal EraInfo[] m_EraInfo; // 0x20
		[System.Runtime.Serialization.OptionalField] // 0x004B9688-0x004B96C0
		internal int[] m_eras; // 0x28
		[System.Runtime.Serialization.OptionalField] // 0x004B96C0-0x004B96F8
		internal DateTime m_minDate; // 0x30
	
		// Properties
		internal int MaxYear { get; } // 0x00B8E854-0x00B8E85C 
		public int[] Eras { get; } // 0x00B8F894-0x00B8F9B0 
	
		// Constructors
		internal GregorianCalendarHelper(Calendar cal, EraInfo[] eraInfo); // 0x00B8E85C-0x00B8E904
		static GregorianCalendarHelper(); // 0x00B8FCB0-0x00B8FD64
	
		// Methods
		internal int GetGregorianYear(int year, int era); // 0x00B8E904-0x00B8EB88
		internal bool IsValidYear(int year, int era); // 0x00B8EB88-0x00B8EC4C
		internal virtual int GetDatePart(long ticks, int part); // 0x00B8EC4C-0x00B8EEB4
		internal static long GetAbsoluteDate(int year, int month, int day); // 0x00B8F08C-0x00B8F2A4
		internal static long DateToTicks(int year, int month, int day); // 0x00B8F2A4-0x00B8F334
		internal static long TimeToTicks(int hour, int minute, int second, int millisecond); // 0x00B8F334-0x00B8F4FC
		internal void CheckTicksRange(long ticks); // 0x00B8EEB4-0x00B8F08C
		public int GetDayOfMonth(DateTime time); // 0x00B8F4FC-0x00B8F540
		public DayOfWeek GetDayOfWeek(DateTime time); // 0x00B8F540-0x00B8F5D4
		public int GetDaysInMonth(int year, int month, int era); // 0x00B8F5D4-0x00B8F788
		public int GetEra(DateTime time); // 0x00B8F788-0x00B8F894
		public int GetMonth(DateTime time); // 0x00B8F9B0-0x00B8F9F4
		public int GetMonthsInYear(int year, int era); // 0x00B8F9F4-0x00B8FA0C
		public int GetYear(DateTime time); // 0x00B8FA0C-0x00B8FB38
		public bool IsLeapYear(int year, int era); // 0x00B8FB38-0x00B8FBA0
		public DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x00B8FBA0-0x00B8FCB0
	}

	[Serializable]
	[ComVisible] // 0x004B4DF4-0x004B4E08
	public enum GregorianCalendarTypes // TypeDefIndex: 639
	{
		Localized = 1,
		USEnglish = 2,
		MiddleEastFrench = 9,
		Arabic = 10,
		TransliteratedEnglish = 11,
		TransliteratedFrench = 12
	}

	internal struct HebrewNumberParsingContext // TypeDefIndex: 640
	{
		// Fields
		internal HebrewNumber.HS state; // 0x00
		internal int result; // 0x04
	
		// Constructors
		public HebrewNumberParsingContext(int result); // 0x0058C184-0x0058C2E0
	}

	internal enum HebrewNumberParsingState // TypeDefIndex: 641
	{
		InvalidHebrewNumber = 0,
		NotHebrewDigit = 1,
		FoundEndOfHebrewNumber = 2,
		ContinueParsing = 3
	}

	internal class HebrewNumber // TypeDefIndex: 642
	{
		// Fields
		private static HebrewValue[] HebrewValues; // 0x00
		private static char maxHebrewNumberCh; // 0x08
		private static readonly HS[][] NumberPasingState; // 0x10
	
		// Nested types
		private enum HebrewToken // TypeDefIndex: 643
		{
			Invalid = -1,
			Digit400 = 0,
			Digit200_300 = 1,
			Digit100 = 2,
			Digit10 = 3,
			Digit1 = 4,
			Digit6_7 = 5,
			Digit7 = 6,
			Digit9 = 7,
			SingleQuote = 8,
			DoubleQuote = 9
		}
	
		private class HebrewValue // TypeDefIndex: 644
		{
			// Fields
			internal HebrewToken token; // 0x10
			internal int value; // 0x14
	
			// Constructors
			internal HebrewValue(HebrewToken token, int value); // 0x00B90D3C-0x00B90D74
		}
	
		internal enum HS // TypeDefIndex: 645
		{
			_err = -1,
			Start = 0,
			S400 = 1,
			S400_400 = 2,
			S400_X00 = 3,
			S400_X0 = 4,
			X00_DQ = 5,
			S400_X00_X0 = 6,
			X0_DQ = 7,
			X = 8,
			X0 = 9,
			X00 = 10,
			S400_DQ = 11,
			S400_400_DQ = 12,
			S400_400_100 = 13,
			S9 = 14,
			X00_S9 = 15,
			S9_DQ = 16,
			END = 100
		}
	
		// Constructors
		static HebrewNumber(); // 0x00B8FFD4-0x00B90D3C
	
		// Methods
		internal static string ToString(int Number); // 0x00B8FD64-0x00B8FFD4
		internal static HebrewNumberParsingState ParseByChar(char ch, ref HebrewNumberParsingContext context); // 0x00B87688-0x00B87880
		internal static bool IsDigit(char ch); // 0x00B87578-0x00B87688
	}

	[Serializable]
	[ComVisible] // 0x004B4E08-0x004B4E1C
	public class JapaneseCalendar : Calendar // TypeDefIndex: 646
	{
		// Fields
		internal static readonly DateTime calendarMinValue; // 0x00
		internal static EraInfo[] japaneseEraInfo; // 0x08
		internal static Calendar s_defaultInstance; // 0x10
		internal GregorianCalendarHelper helper; // 0x20
	
		// Properties
		[ComVisible] // 0x004BD57C-0x004BD590
		public override DateTime MinSupportedDateTime { get; } // 0x00B91F30-0x00B91F98 
		[ComVisible] // 0x004BD590-0x004BD5A4
		public override DateTime MaxSupportedDateTime { get; } // 0x00B91F98-0x00B92000 
		internal override int ID { get; } // 0x00B92504-0x00B9250C 
		public override int[] Eras { get; } // 0x00B92848-0x00B92860 
		public override int TwoDigitYearMax { get; } // 0x00B92BF0-0x00B92C38 
	
		// Constructors
		public JapaneseCalendar(); // 0x00B92358-0x00B92504
		static JapaneseCalendar(); // 0x00B92C38-0x00B93CA8
	
		// Methods
		internal static EraInfo[] GetEraInfo(); // 0x00B92000-0x00B92350
		private static EraInfo[] GetErasFromRegistry(); // 0x00B92350-0x00B92358
		internal static Calendar GetDefaultInstance(); // 0x00B85D48-0x00B85E18
		public override int GetDaysInMonth(int year, int month, int era); // 0x00B9250C-0x00B92524
		public override int GetDayOfMonth(DateTime time); // 0x00B92524-0x00B92574
		public override DayOfWeek GetDayOfWeek(DateTime time); // 0x00B92574-0x00B9258C
		public override int GetMonthsInYear(int year, int era); // 0x00B9258C-0x00B925B0
		public override int GetEra(DateTime time); // 0x00B925B0-0x00B925C8
		public override int GetMonth(DateTime time); // 0x00B925C8-0x00B92618
		public override int GetYear(DateTime time); // 0x00B92618-0x00B92630
		public override bool IsLeapYear(int year, int era); // 0x00B92630-0x00B926A4
		public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x00B926A4-0x00B926C8
		public override int ToFourDigitYear(int year); // 0x00B926C8-0x00B92848
		internal static string[] EraNames(); // 0x00B92860-0x00B92988
		internal static string[] AbbrevEraNames(); // 0x00B92988-0x00B92AB0
		internal static string[] EnglishEraNames(); // 0x00B92AB0-0x00B92BD8
		internal override bool IsValidYear(int year, int era); // 0x00B92BD8-0x00B92BF0
	}

	[Serializable]
	[ComVisible] // 0x004B4E1C-0x004B4E30
	public sealed class NumberFormatInfo : ICloneable, IFormatProvider // TypeDefIndex: 647
	{
		// Fields
		private static NumberFormatInfo invariantInfo; // 0x00
		internal int[] numberGroupSizes; // 0x10
		internal int[] currencyGroupSizes; // 0x18
		internal int[] percentGroupSizes; // 0x20
		internal string positiveSign; // 0x28
		internal string negativeSign; // 0x30
		internal string numberDecimalSeparator; // 0x38
		internal string numberGroupSeparator; // 0x40
		internal string currencyGroupSeparator; // 0x48
		internal string currencyDecimalSeparator; // 0x50
		internal string currencySymbol; // 0x58
		internal string ansiCurrencySymbol; // 0x60
		internal string nanSymbol; // 0x68
		internal string positiveInfinitySymbol; // 0x70
		internal string negativeInfinitySymbol; // 0x78
		internal string percentDecimalSeparator; // 0x80
		internal string percentGroupSeparator; // 0x88
		internal string percentSymbol; // 0x90
		internal string perMilleSymbol; // 0x98
		[System.Runtime.Serialization.OptionalField] // 0x004B96F8-0x004B9730
		internal string[] nativeDigits; // 0xA0
		[System.Runtime.Serialization.OptionalField] // 0x004B9730-0x004B9768
		internal int m_dataItem; // 0xA8
		internal int numberDecimalDigits; // 0xAC
		internal int currencyDecimalDigits; // 0xB0
		internal int currencyPositivePattern; // 0xB4
		internal int currencyNegativePattern; // 0xB8
		internal int numberNegativePattern; // 0xBC
		internal int percentPositivePattern; // 0xC0
		internal int percentNegativePattern; // 0xC4
		internal int percentDecimalDigits; // 0xC8
		[System.Runtime.Serialization.OptionalField] // 0x004B9768-0x004B97A0
		internal int digitSubstitution; // 0xCC
		internal bool isReadOnly; // 0xD0
		[System.Runtime.Serialization.OptionalField] // 0x004B97A0-0x004B97D8
		internal bool m_useUserOverride; // 0xD1
		[System.Runtime.Serialization.OptionalField] // 0x004B97D8-0x004B9810
		internal bool m_isInvariant; // 0xD2
		[System.Runtime.Serialization.OptionalField] // 0x004B9810-0x004B9848
		internal bool validForParseAsNumber; // 0xD3
		[System.Runtime.Serialization.OptionalField] // 0x004B9848-0x004B9880
		internal bool validForParseAsCurrency; // 0xD4
		private const NumberStyles InvalidNumberStyles = NumberStyles.None; // Metadata: 0x001E0CD8
	
		// Properties
		public static NumberFormatInfo InvariantInfo { get; } // 0x0097E5E8-0x0097E698 
		public int CurrencyDecimalDigits { get; } // 0x0097EA6C-0x0097EA74 
		public string CurrencyDecimalSeparator { get; } // 0x0097EA74-0x0097EA7C 
		public bool IsReadOnly { get; } // 0x0097EA7C-0x0097EA84 
		public int[] CurrencyGroupSizes { get; } // 0x0097EA84-0x0097EB08 
		public int[] NumberGroupSizes { get; } // 0x0097EB08-0x0097EB8C 
		public int[] PercentGroupSizes { get; } // 0x0097EB8C-0x0097EC10 
		public string CurrencyGroupSeparator { get; } // 0x0097EC10-0x0097EC18 
		public string CurrencySymbol { get; } // 0x0097EC18-0x0097EC20 
		public static NumberFormatInfo CurrentInfo { get; } // 0x0097E90C-0x0097E9F8 
		public string NaNSymbol { get; } // 0x0097EC20-0x0097EC28 
		public int CurrencyNegativePattern { get; } // 0x0097EC28-0x0097EC30 
		public int NumberNegativePattern { get; } // 0x0097EC30-0x0097EC38 
		public int PercentPositivePattern { get; } // 0x0097EC38-0x0097EC40 
		public int PercentNegativePattern { get; } // 0x0097EC40-0x0097EC48 
		public string NegativeInfinitySymbol { get; } // 0x0097EC48-0x0097EC50 
		public string NegativeSign { get; } // 0x0097EC50-0x0097EC58 
		public int NumberDecimalDigits { get; } // 0x0097EC58-0x0097EC60 
		public string NumberDecimalSeparator { get; } // 0x0097EC60-0x0097EC68 
		public string NumberGroupSeparator { get; } // 0x0097EC68-0x0097EC70 
		public int CurrencyPositivePattern { get; } // 0x0097EC70-0x0097EC78 
		public string PositiveInfinitySymbol { get; } // 0x0097EC78-0x0097EC80 
		public string PositiveSign { get; } // 0x0097EC80-0x0097EC88 
		public int PercentDecimalDigits { get; } // 0x0097EC88-0x0097EC90 
		public string PercentDecimalSeparator { get; } // 0x0097EC90-0x0097EC98 
		public string PercentGroupSeparator { get; } // 0x0097EC98-0x0097ECA0 
		public string PercentSymbol { get; } // 0x0097ECA0-0x0097ECA8 
		public string PerMilleSymbol { get; } // 0x0097ECA8-0x0097ECB0 
	
		// Constructors
		public NumberFormatInfo(); // 0x0097E150-0x0097E158
		internal NumberFormatInfo(CultureData cultureData); // 0x0097E158-0x0097E558
	
		// Methods
		[OnSerializing] // 0x004BBF18-0x004BBF28
		private void OnSerializing(StreamingContext ctx); // 0x0097E558-0x0097E5E0
		[OnDeserializing] // 0x004BBF28-0x004BBF38
		private void OnDeserializing(StreamingContext ctx); // 0x0097E5E0-0x0097E5E4
		[OnDeserialized] // 0x004BBF38-0x004BBF48
		private void OnDeserialized(StreamingContext ctx); // 0x0097E5E4-0x0097E5E8
		public static NumberFormatInfo GetInstance(IFormatProvider formatProvider); // 0x0097E768-0x0097E90C
		public object Clone(); // 0x0097E9F8-0x0097EA6C
		public object GetFormat(Type formatType); // 0x0097ECB0-0x0097ED4C
		public static NumberFormatInfo ReadOnly(NumberFormatInfo nfi); // 0x0097E698-0x0097E768
		internal static void ValidateParseStyleInteger(NumberStyles style); // 0x0097ED4C-0x0097EE44
		internal static void ValidateParseStyleFloatingPoint(NumberStyles style); // 0x0097EE44-0x0097EF30
	}

	[Serializable]
	[ComVisible] // 0x004B4E30-0x004B4E6C
	[Flags] // 0x004B4E30-0x004B4E6C
	public enum NumberStyles // TypeDefIndex: 648
	{
		None = 0,
		AllowLeadingWhite = 1,
		AllowTrailingWhite = 2,
		AllowLeadingSign = 4,
		Integer = 7,
		AllowTrailingSign = 8,
		AllowParentheses = 16,
		AllowDecimalPoint = 32,
		AllowThousands = 64,
		Number = 111,
		AllowExponent = 128,
		Float = 167,
		AllowCurrencySymbol = 256,
		Currency = 383,
		Any = 511,
		AllowHexSpecifier = 512,
		HexNumber = 515
	}

	[Serializable]
	public sealed class SortVersion // TypeDefIndex: 649
	{
		// Fields
		private int m_NlsVersion; // 0x10
		private Guid m_SortId; // 0x14
	
		// Methods
		public override bool Equals(object obj); // 0x0097FCC8-0x0097FD5C
		public bool Equals(SortVersion other); // 0x0097FD78-0x0097FE44
		public override int GetHashCode(); // 0x0097FF10-0x0097FF6C
		public static bool operator ==(SortVersion left, SortVersion right); // 0x0097FE44-0x0097FE64
		public static bool operator !=(SortVersion left, SortVersion right); // 0x0097FD5C-0x0097FD78
	}

	[Serializable]
	[ComVisible] // 0x004B4E6C-0x004B4E80
	public class TaiwanCalendar : Calendar // TypeDefIndex: 650
	{
		// Fields
		internal static EraInfo[] taiwanEraInfo; // 0x00
		internal static Calendar s_defaultInstance; // 0x08
		internal GregorianCalendarHelper helper; // 0x20
		internal static readonly DateTime calendarMinValue; // 0x10
	
		// Properties
		[ComVisible] // 0x004BD5A4-0x004BD5B8
		public override DateTime MinSupportedDateTime { get; } // 0x009801E8-0x00980250 
		[ComVisible] // 0x004BD5B8-0x004BD5CC
		public override DateTime MaxSupportedDateTime { get; } // 0x00980250-0x009802B8 
		internal override int ID { get; } // 0x009802B8-0x009802C0 
		public override int[] Eras { get; } // 0x009803C8-0x009803E4 
		public override int TwoDigitYearMax { get; } // 0x009803E4-0x0098042C 
	
		// Constructors
		public TaiwanCalendar(); // 0x0098003C-0x009801E8
		static TaiwanCalendar(); // 0x009805B0-0x009806D0
	
		// Methods
		internal static Calendar GetDefaultInstance(); // 0x0097FF6C-0x0098003C
		public override int GetDaysInMonth(int year, int month, int era); // 0x009802C0-0x009802DC
		public override int GetDayOfMonth(DateTime time); // 0x009802DC-0x009802F8
		public override DayOfWeek GetDayOfWeek(DateTime time); // 0x009802F8-0x00980314
		public override int GetMonthsInYear(int year, int era); // 0x00980314-0x00980330
		public override int GetEra(DateTime time); // 0x00980330-0x0098034C
		public override int GetMonth(DateTime time); // 0x0098034C-0x00980368
		public override int GetYear(DateTime time); // 0x00980368-0x00980384
		public override bool IsLeapYear(int year, int era); // 0x00980384-0x009803A0
		public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x009803A0-0x009803C8
		public override int ToFourDigitYear(int year); // 0x0098042C-0x009805B0
	}

	[Serializable]
	[ComVisible] // 0x004B4E80-0x004B4E94
	public class TextInfo : ICloneable, IDeserializationCallback // TypeDefIndex: 651
	{
		// Fields
		[System.Runtime.Serialization.OptionalField] // 0x004B9880-0x004B98B8
		private bool m_isReadOnly; // 0x10
		[System.Runtime.Serialization.OptionalField] // 0x004B98B8-0x004B98F0
		private string m_cultureName; // 0x18
		[NonSerialized]
		private CultureData m_cultureData; // 0x20
		[NonSerialized]
		private string m_textInfoName; // 0x28
		[NonSerialized]
		private bool? m_IsAsciiCasingSameAsInvariant; // 0x30
		internal static TextInfo s_Invariant; // 0x00
		[System.Runtime.Serialization.OptionalField] // 0x004B98F0-0x004B9928
		private string customCultureName; // 0x38
		[System.Runtime.Serialization.OptionalField] // 0x004B9928-0x004B9960
		internal bool m_useUserOverride; // 0x40
		[System.Runtime.Serialization.OptionalField] // 0x004B9960-0x004B9998
		internal int m_win32LangID; // 0x44
	
		// Properties
		internal static TextInfo Invariant { get; } // 0x009806D0-0x00980778 
		[ComVisible] // 0x004BD5CC-0x004BD5E0
		public string CultureName { get; } // 0x00980DE4-0x00980DEC 
		private bool IsAsciiCasingSameAsInvariant { get; } // 0x00980F28-0x00981010 
	
		// Constructors
		internal TextInfo(CultureData cultureData); // 0x00980778-0x009807C0
		internal TextInfo(); // 0x00982678-0x009826B8
	
		// Methods
		[OnDeserializing] // 0x004BBF48-0x004BBF58
		private void OnDeserializing(StreamingContext ctx); // 0x009807C0-0x009807C8
		private void OnDeserialized(); // 0x009807C8-0x009808C8
		[OnDeserialized] // 0x004BBF58-0x004BBF68
		private void OnDeserialized(StreamingContext ctx); // 0x009808C8-0x009808CC
		[OnSerializing] // 0x004BBF68-0x004BBF78
		private void OnSerializing(StreamingContext ctx); // 0x009808CC-0x0098095C
		internal static int GetHashCodeOrdinalIgnoreCase(string s); // 0x0098095C-0x00980968
		internal static int GetHashCodeOrdinalIgnoreCase(string s, bool forceRandomizedHashing, long additionalEntropy); // 0x00980968-0x00980998
		internal static int CompareOrdinalIgnoreCase(string str1, string str2); // 0x00980A98-0x00980AD4
		internal static int CompareOrdinalIgnoreCaseEx(string strA, int indexA, string strB, int indexB, int lengthA, int lengthB); // 0x00980C98-0x00980C9C
		internal static int IndexOfStringOrdinalIgnoreCase(string source, string value, int startIndex, int count); // 0x00980C9C-0x00980D4C
		internal static int LastIndexOfStringOrdinalIgnoreCase(string source, string value, int startIndex, int count); // 0x00980D4C-0x00980DE4
		[ComVisible] // 0x004BBF78-0x004BBF8C
		public virtual object Clone(); // 0x00980DEC-0x00980EA4
		internal void SetReadOnlyState(bool readOnly); // 0x00980EA4-0x00980EB0
		public virtual char ToLower(char c); // 0x00980EB0-0x00980F18
		public virtual string ToLower(string str); // 0x00981530-0x009815C8
		private static char ToLowerAsciiInvariant(char c); // 0x00981010-0x0098102C
		public virtual char ToUpper(char c); // 0x009816B8-0x00981720
		public virtual string ToUpper(string str); // 0x00981C68-0x00981D00
		private static char ToUpperAsciiInvariant(char c); // 0x00981720-0x0098173C
		private static bool IsAscii(char c); // 0x00980F18-0x00980F28
		public override bool Equals(object obj); // 0x00981DF0-0x00981EA8
		public override int GetHashCode(); // 0x00981EA8-0x00981EC8
		public override string ToString(); // 0x00981EC8-0x00981F2C
		public string ToTitleCase(string str); // 0x00981F2C-0x009822DC
		private static int AddNonLetter(ref StringBuilder result, ref string input, int inputIndex, int charLen); // 0x00982470-0x00982518
		private int AddTitlecaseLetter(ref StringBuilder result, ref string input, int inputIndex, int charLen); // 0x009822DC-0x00982434
		private static bool IsWordSeparator(UnicodeCategory category); // 0x00982450-0x00982470
		private static bool IsLetterCategory(UnicodeCategory uc); // 0x00982434-0x00982450
		void IDeserializationCallback.OnDeserialization(object sender); // 0x00982518-0x0098251C
		internal int GetCaseInsensitiveHashCode(string str); // 0x0098251C-0x00982524
		internal int GetCaseInsensitiveHashCode(string str, bool forceRandomizedHashing, long additionalEntropy); // 0x00980998-0x00980A98
		private int GetInvariantCaseInsensitiveHashCode(string str); // 0x00982524-0x00982678
		private string ToUpperInternal(string str); // 0x00981D00-0x00981DF0
		private string ToLowerInternal(string str); // 0x009815C8-0x009816B8
		private char ToUpperInternal(char c); // 0x0098173C-0x00981C68
		private char ToLowerInternal(char c); // 0x0098102C-0x00981530
		private static int InternalCompareStringOrdinalIgnoreCase(string strA, int indexA, string strB, int indexB, int lenA, int lenB); // 0x00980AD4-0x00980C98
	}

	internal static class TimeSpanFormat // TypeDefIndex: 652
	{
		// Fields
		internal static readonly FormatLiterals PositiveInvariantFormatLiterals; // 0x00
		internal static readonly FormatLiterals NegativeInvariantFormatLiterals; // 0x28
	
		// Nested types
		internal enum Pattern // TypeDefIndex: 653
		{
			None = 0,
			Minimum = 1,
			Full = 2
		}
	
		internal struct FormatLiterals // TypeDefIndex: 654
		{
			// Fields
			internal string AppCompatLiteral; // 0x00
			internal int dd; // 0x08
			internal int hh; // 0x0C
			internal int mm; // 0x10
			internal int ss; // 0x14
			internal int ff; // 0x18
			private string[] literals; // 0x20
	
			// Properties
			internal string Start { get; } // 0x00586EAC-0x00586EB4 
			internal string DayHourSep { get; } // 0x00586EB4-0x00586EBC 
			internal string HourMinuteSep { get; } // 0x00586EBC-0x00586EC4 
			internal string MinuteSecondSep { get; } // 0x00586EC4-0x00586ECC 
			internal string SecondFractionSep { get; } // 0x00586ECC-0x00586ED4 
			internal string End { get; } // 0x00586ED4-0x00586EDC 
	
			// Methods
			internal static FormatLiterals InitInvariant(bool isNegative); // 0x00984078-0x00984268
			internal void Init(string format, bool useInvariantFieldLengths); // 0x00586EDC-0x00586EE8
		}
	
		// Constructors
		static TimeSpanFormat(); // 0x00983FD4-0x00984078
	
		// Methods
		private static string IntToString(int n, int digits); // 0x00982A90-0x00982AAC
		internal static string Format(TimeSpan value, string format, IFormatProvider formatProvider); // 0x00982AAC-0x00982CFC
		private static string FormatStandard(TimeSpan value, bool isInvariant, string format, Pattern pattern); // 0x00982CFC-0x0098325C
		internal static string FormatCustomized(TimeSpan value, string format, DateTimeFormatInfo dtfi); // 0x0098325C-0x00983FD4
	}

	[Serializable]
	[ComVisible] // 0x004B4E94-0x004B4EA8
	public enum UnicodeCategory // TypeDefIndex: 655
	{
		UppercaseLetter = 0,
		LowercaseLetter = 1,
		TitlecaseLetter = 2,
		ModifierLetter = 3,
		OtherLetter = 4,
		NonSpacingMark = 5,
		SpacingCombiningMark = 6,
		EnclosingMark = 7,
		DecimalDigitNumber = 8,
		LetterNumber = 9,
		OtherNumber = 10,
		SpaceSeparator = 11,
		LineSeparator = 12,
		ParagraphSeparator = 13,
		Control = 14,
		Format = 15,
		Surrogate = 16,
		PrivateUse = 17,
		ConnectorPunctuation = 18,
		DashPunctuation = 19,
		OpenPunctuation = 20,
		ClosePunctuation = 21,
		InitialQuotePunctuation = 22,
		FinalQuotePunctuation = 23,
		OtherPunctuation = 24,
		MathSymbol = 25,
		CurrencySymbol = 26,
		ModifierSymbol = 27,
		OtherSymbol = 28,
		OtherNotAssigned = 29
	}

	[Serializable]
	[ComVisible] // 0x004B4EA8-0x004B4EBC
	public class SortKey // TypeDefIndex: 656
	{
		// Fields
		private readonly string source; // 0x10
		private readonly byte[] key; // 0x18
		private readonly CompareOptions options; // 0x20
		private readonly int lcid; // 0x24
	
		// Properties
		public virtual string OriginalString { get; } // 0x0097F958-0x0097F960 
		public virtual byte[] KeyData { get; } // 0x0097F960-0x0097F968 
	
		// Constructors
		internal SortKey(int lcid, string source, CompareOptions opt); // 0x0097F8CC-0x0097F90C
		internal SortKey(int lcid, string source, byte[] buffer, CompareOptions opt, int lv1Length, int lv2Length, int lv3Length, int kanaSmallLength, int markTypeLength, int katakanaLength, int kanaWidthLength, int identLength); // 0x0097F90C-0x0097F958
		internal SortKey(); // 0x0097FC88-0x0097FCC8
	
		// Methods
		public static int Compare(SortKey sortkey1, SortKey sortkey2); // 0x0097F730-0x0097F8CC
		public override bool Equals(object value); // 0x0097F968-0x0097FA28
		public override int GetHashCode(); // 0x0097FA28-0x0097FAA8
		public override string ToString(); // 0x0097FAA8-0x0097FC88
	}

	internal class CultureData // TypeDefIndex: 657
	{
		// Fields
		private string sAM1159; // 0x10
		private string sPM2359; // 0x18
		private string sTimeSeparator; // 0x20
		private string[] saLongTimes; // 0x28
		private string[] saShortTimes; // 0x30
		private int iFirstDayOfWeek; // 0x38
		private int iFirstWeekOfYear; // 0x3C
		private int[] waCalendars; // 0x40
		private CalendarData[] calendars; // 0x48
		private string sISO639Language; // 0x50
		private readonly string sRealName; // 0x58
		private bool bUseOverrides; // 0x60
		private int calendarId; // 0x64
		private int numberIndex; // 0x68
		private int iDefaultAnsiCodePage; // 0x6C
		private int iDefaultOemCodePage; // 0x70
		private int iDefaultMacCodePage; // 0x74
		private int iDefaultEbcdicCodePage; // 0x78
		private bool isRightToLeft; // 0x7C
		private string sListSeparator; // 0x80
		private static CultureData s_Invariant; // 0x00
	
		// Properties
		public static CultureData Invariant { get; } // 0x00B7BDD0-0x00B7C0D8 
		internal string[] LongTimes { get; } // 0x00B7C44C-0x00B7C470 
		internal string[] ShortTimes { get; } // 0x00B7C470-0x00B7C494 
		internal string SISO639LANGNAME { get; } // 0x00B7C494-0x00B7C49C 
		internal int IFIRSTDAYOFWEEK { get; } // 0x00B7C49C-0x00B7C4A4 
		internal int IFIRSTWEEKOFYEAR { get; } // 0x00B7C4A4-0x00B7C4AC 
		internal string SAM1159 { get; } // 0x00B7C4AC-0x00B7C4B4 
		internal string SPM2359 { get; } // 0x00B7C4B4-0x00B7C4BC 
		internal string TimeSeparator { get; } // 0x00B7C4BC-0x00B7C4C4 
		internal int[] CalendarIds { get; } // 0x00B7C4C4-0x00B7C61C 
		internal bool IsInvariantCulture { get; } // 0x00B7C61C-0x00B7C628 
		internal string CultureName { get; } // 0x00B7C628-0x00B7C630 
		internal string SCOMPAREINFO { get; } // 0x00B7C630-0x00B7C678 
		internal string STEXTINFO { get; } // 0x00B7C678-0x00B7C680 
		internal int ILANGUAGE { get; } // 0x00B7C680-0x00B7C688 
		internal bool UseUserOverride { get; } // 0x00B7C688-0x00B7C690 
	
		// Constructors
		private CultureData(string name); // 0x00B7BDA4-0x00B7BDD0
	
		// Methods
		public static CultureData GetCultureData(string cultureName, bool useUserOverride); // 0x00B7C0D8-0x00B7C1D4
		public static CultureData GetCultureData(string cultureName, bool useUserOverride, int datetimeIndex, int calendarId, int numberIndex, string iso2lang, int ansiCodePage, int oemCodePage, int macCodePage, int ebcdicCodePage, bool rightToLeft, string listSeparator); // 0x00B7C1E0-0x00B7C314
		internal static CultureData GetCultureData(int culture, bool bUseUserOverride); // 0x00B7C318-0x00B7C320
		private void fill_culture_data(int datetimeIndex); // 0x00B7C314-0x00B7C318
		public CalendarData GetCalendar(int calendarId); // 0x00B7C320-0x00B7C44C
		internal string[] EraNames(int calendarId); // 0x00B7C690-0x00B7C6B0
		internal string[] AbbrevEraNames(int calendarId); // 0x00B7C6B0-0x00B7C6D0
		internal string[] AbbreviatedEnglishEraNames(int calendarId); // 0x00B7C6D0-0x00B7C6F0
		internal string[] ShortDates(int calendarId); // 0x00B7C6F0-0x00B7C710
		internal string[] LongDates(int calendarId); // 0x00B7C710-0x00B7C730
		internal string[] YearMonths(int calendarId); // 0x00B7C730-0x00B7C750
		internal string[] DayNames(int calendarId); // 0x00B7C750-0x00B7C770
		internal string[] AbbreviatedDayNames(int calendarId); // 0x00B7C770-0x00B7C790
		internal string[] MonthNames(int calendarId); // 0x00B7C790-0x00B7C7B0
		internal string[] GenitiveMonthNames(int calendarId); // 0x00B7C7B0-0x00B7C7D0
		internal string[] AbbreviatedMonthNames(int calendarId); // 0x00B7C7D0-0x00B7C7F0
		internal string[] AbbreviatedGenitiveMonthNames(int calendarId); // 0x00B7C7F0-0x00B7C810
		internal string[] LeapYearMonthNames(int calendarId); // 0x00B7C810-0x00B7C830
		internal string MonthDay(int calendarId); // 0x00B7C830-0x00B7C850
		internal string DateSeparator(int calendarId); // 0x00B7C850-0x00B7C888
		private static string GetDateSeparator(string format); // 0x00B7C888-0x00B7C8D8
		private static string GetSeparator(string format, string timeParts); // 0x00B7C8D8-0x00B7C9E8
		private static int IndexOfTimePart(string format, int startIndex, string timeParts); // 0x00B7C9E8-0x00B7CAE8
		private static string UnescapeNlsString(string str, int start, int end); // 0x00B7CAE8-0x00B7CCA4
		internal static string[] ReescapeWin32Strings(string[] array); // 0x00B7CCA4-0x00B7CCA8
		internal static string ReescapeWin32String(string str); // 0x00B7CCA8-0x00B7CCAC
		internal void GetNFIValues(NumberFormatInfo nfi); // 0x00B7CCAC-0x00B7CD0C
		private static void fill_number_data(NumberFormatInfo nfi, int numberIndex); // 0x00B7CD0C-0x00B7CD10
	}

	[Serializable]
	internal class CodePageDataItem // TypeDefIndex: 658
	{
		// Fields
		internal int m_dataIndex; // 0x10
		internal int m_uiFamilyCodePage; // 0x14
		internal string m_webName; // 0x18
		internal string m_headerName; // 0x20
		internal string m_bodyName; // 0x28
		internal uint m_flags; // 0x30
		private static readonly char[] sep; // 0x00
	
		// Properties
		public string WebName { get; } // 0x0086D4E4-0x0086D5BC 
		public string HeaderName { get; } // 0x0086D5BC-0x0086D694 
	
		// Constructors
		internal CodePageDataItem(int dataIndex); // 0x0086D324-0x0086D408
		static CodePageDataItem(); // 0x0086D694-0x0086D720
	
		// Methods
		internal static string CreateString(string pStrings, uint index); // 0x0086D408-0x0086D4E4
	}

	internal static class EncodingTable // TypeDefIndex: 659
	{
		// Fields
		internal static InternalEncodingDataItem[] encodingDataPtr; // 0x00
		internal static InternalCodePageDataItem[] codePageDataPtr; // 0x08
		private static int lastEncodingItem; // 0x10
		private static Hashtable hashByName; // 0x18
		private static Hashtable hashByCodePage; // 0x20
	
		// Constructors
		static EncodingTable(); // 0x00B88F84-0x00B8D044
	
		// Methods
		private static int GetNumEncodingItems(); // 0x00B88EEC-0x00B88F64
		private static InternalEncodingDataItem ENC(string name, ushort cp); // 0x00B88F64-0x00B88F6C
		private static InternalCodePageDataItem MapCodePageDataItem(ushort cp, ushort fcp, string names, uint flags); // 0x00B88F6C-0x00B88F84
		private static int internalGetCodePageFromName(string name); // 0x00B8D044-0x00B8D300
		internal static int GetCodePageFromName(string name); // 0x00B8D300-0x00B8D480
		internal static CodePageDataItem GetCodePageDataItem(int codepage); // 0x00B8D480-0x00B8D660
	}

	internal struct InternalEncodingDataItem // TypeDefIndex: 660
	{
		// Fields
		internal string webName; // 0x00
		internal ushort codePage; // 0x08
	}

	internal struct InternalCodePageDataItem // TypeDefIndex: 661
	{
		// Fields
		internal ushort codePage; // 0x00
		internal ushort uiFamilyCodePage; // 0x02
		internal uint flags; // 0x04
		internal string Names; // 0x08
	}

	internal static class TextInfoToUpperData // TypeDefIndex: 662
	{
		// Fields
		public static readonly char[] range_00e0_0586; // 0x00
		public static readonly char[] range_1e01_1ff3; // 0x08
		public static readonly char[] range_2170_2184; // 0x10
		public static readonly char[] range_24d0_24e9; // 0x18
		public static readonly char[] range_2c30_2ce3; // 0x20
		public static readonly char[] range_2d00_2d25; // 0x28
		public static readonly char[] range_a641_a697; // 0x30
		public static readonly char[] range_a723_a78c; // 0x38
	
		// Constructors
		static TextInfoToUpperData(); // 0x009828BC-0x00982A90
	}

	internal static class TextInfoToLowerData // TypeDefIndex: 663
	{
		// Fields
		public static readonly char[] range_00c0_0556; // 0x00
		public static readonly char[] range_10a0_10c5; // 0x08
		public static readonly char[] range_1e00_1ffc; // 0x10
		public static readonly char[] range_2160_216f; // 0x18
		public static readonly char[] range_24b6_24cf; // 0x20
		public static readonly char[] range_2c00_2c2e; // 0x28
		public static readonly char[] range_2c60_2ce2; // 0x30
		public static readonly char[] range_a640_a696; // 0x38
		public static readonly char[] range_a722_a78b; // 0x40
	
		// Constructors
		static TextInfoToLowerData(); // 0x009826B8-0x009828BC
	}

	[Serializable]
	[ComVisible] // 0x004B4EBC-0x004B4ED0
	public class CultureInfo : ICloneable, IFormatProvider // TypeDefIndex: 664
	{
		// Fields
		private static CultureInfo invariant_culture_info; // 0x00
		private static object shared_table_lock; // 0x08
		private static CultureInfo default_current_culture; // 0x10
		private bool m_isReadOnly; // 0x10
		private int cultureID; // 0x14
		[NonSerialized]
		private int parent_lcid; // 0x18
		[NonSerialized]
		private int datetime_index; // 0x1C
		[NonSerialized]
		private int number_index; // 0x20
		[NonSerialized]
		private int default_calendar_type; // 0x24
		private bool m_useUserOverride; // 0x28
		internal NumberFormatInfo numInfo; // 0x30
		internal DateTimeFormatInfo dateTimeInfo; // 0x38
		private TextInfo textInfo; // 0x40
		internal string m_name; // 0x48
		[NonSerialized]
		private string englishname; // 0x50
		[NonSerialized]
		private string nativename; // 0x58
		[NonSerialized]
		private string iso3lang; // 0x60
		[NonSerialized]
		private string iso2lang; // 0x68
		[NonSerialized]
		private string win3lang; // 0x70
		[NonSerialized]
		private string territory; // 0x78
		[NonSerialized]
		private string[] native_calendar_names; // 0x80
		private CompareInfo compareInfo; // 0x88
		[NonSerialized]
		private readonly unsafe void* textinfo_data; // 0x90
		private int m_dataItem; // 0x98
		private Calendar calendar; // 0xA0
		[NonSerialized]
		private CultureInfo parent_culture; // 0xA8
		[NonSerialized]
		private bool constructed; // 0xB0
		[NonSerialized]
		internal byte[] cached_serialized_form; // 0xB8
		[NonSerialized]
		internal CultureData m_cultureData; // 0xC0
		[NonSerialized]
		internal bool m_isInherited; // 0xC8
		internal const int InvariantCultureId = 127; // Metadata: 0x001E0DA4
		private const int CalendarTypeBits = 8; // Metadata: 0x001E0DA8
		private const string MSG_READONLY = "This instance is read only"; // Metadata: 0x001E0DAC
		private static CultureInfo s_DefaultThreadCurrentUICulture; // 0x18
		private static CultureInfo s_DefaultThreadCurrentCulture; // 0x20
		private static Dictionary<int, CultureInfo> shared_by_number; // 0x28
		private static Dictionary<string, CultureInfo> shared_by_name; // 0x30
		internal static readonly bool IsTaiwanSku; // 0x38
	
		// Properties
		public static CultureInfo InvariantCulture { get; } // 0x00B7CD10-0x00B7CD80 
		public static CultureInfo CurrentCulture { get; } // 0x00B7CD80-0x00B7CDA4 
		public static CultureInfo CurrentUICulture { get; } // 0x00B7CDA4-0x00B7CDC8 
		internal string Territory { get; } // 0x00B7D268-0x00B7D270 
		public virtual int LCID { get; } // 0x00B7D270-0x00B7D278 
		public virtual string Name { get; } // 0x00B7D278-0x00B7D280 
		public virtual Calendar Calendar { get; } // 0x00B7D280-0x00B7D314 
		public virtual CultureInfo Parent { get; } // 0x00B7D538-0x00B7D764 
		public virtual TextInfo TextInfo { get; } // 0x00B7D77C-0x00B7D888 
		public virtual CompareInfo CompareInfo { get; } // 0x00B7DF78-0x00B7E0BC 
		public virtual bool IsNeutralCulture { get; } // 0x00B7E0BC-0x00B7E110 
		public virtual NumberFormatInfo NumberFormat { get; set; } // 0x00B7E114-0x00B7E1B8 0x00B7E1B8-0x00B7E2A0
		public virtual DateTimeFormatInfo DateTimeFormat { get; set; } // 0x00B7E2A0-0x00B7E39C 0x00B7E3EC-0x00B7E4D4
		public virtual string EnglishName { get; } // 0x00B7E4D4-0x00B7E510 
		public bool IsReadOnly { get; } // 0x00B7E510-0x00B7E518 
		internal int CalendarType { get; } // 0x00B7DEC4-0x00B7DF64 
		public static CultureInfo DefaultThreadCurrentCulture { get; } // 0x00B81560-0x00B815D0 
		public static CultureInfo DefaultThreadCurrentUICulture { get; } // 0x00B815D0-0x00B81640 
		internal string SortName { get; } // 0x00B81640-0x00B81648 
		internal static CultureInfo UserDefaultUICulture { get; } // 0x00B81648-0x00B816A4 
		internal static CultureInfo UserDefaultCulture { get; } // 0x00B816A4-0x00B81700 
		internal bool HasInvariantCultureName { get; } // 0x00B818B0-0x00B8194C 
	
		// Nested types
		private struct Data // TypeDefIndex: 665
		{
			// Fields
			public int ansi; // 0x00
			public int ebcdic; // 0x04
			public int mac; // 0x08
			public int oem; // 0x0C
			public bool right_to_left; // 0x10
			public byte list_sep; // 0x11
		}
	
		// Constructors
		public CultureInfo(int culture); // 0x00B7D770-0x00B7D77C
		public CultureInfo(int culture, bool useUserOverride); // 0x00B7E744-0x00B7E750
		private CultureInfo(int culture, bool useUserOverride, bool read_only); // 0x00B7E750-0x00B7E9CC
		public CultureInfo(string name); // 0x00B7D764-0x00B7D770
		public CultureInfo(string name, bool useUserOverride); // 0x00B7C1D4-0x00B7C1E0
		private CultureInfo(string name, bool useUserOverride, bool read_only); // 0x00B7E9E0-0x00B7EC2C
		private CultureInfo(); // 0x00B7ECC8-0x00B7ECF4
		static CultureInfo(); // 0x00B81ACC-0x00B81B64
	
		// Methods
		internal static CultureInfo ConstructCurrentCulture(); // 0x00B7CDC8-0x00B7CF60
		internal static CultureInfo ConstructCurrentUICulture(); // 0x00B7D20C-0x00B7D268
		public virtual object Clone(); // 0x00B7D910-0x00B7DA98
		public override bool Equals(object value); // 0x00B7DB78-0x00B7DC3C
		public static CultureInfo[] GetCultures(CultureTypes types); // 0x00B7DC3C-0x00B7DE9C
		private Data GetTextInfoData(); // 0x00B7DEAC-0x00B7DEC4
		public override int GetHashCode(); // 0x00B7DF64-0x00B7DF70
		public override string ToString(); // 0x00B7DF70-0x00B7DF78
		private void CheckNeutral(); // 0x00B7E110-0x00B7E114
		public virtual object GetFormat(Type formatType); // 0x00B7E518-0x00B7E620
		private void Construct(); // 0x00B7D314-0x00B7D340
		private bool construct_internal_locale_from_lcid(int lcid); // 0x00B7E620-0x00B7E624
		private bool construct_internal_locale_from_name(string name); // 0x00B7E624-0x00B7E628
		private static string get_current_locale_name(); // 0x00B7CF60-0x00B7CF64
		private static CultureInfo[] internal_get_cultures(bool neutral, bool specific, bool installed); // 0x00B7DE9C-0x00B7DEAC
		private void ConstructInvariant(bool read_only); // 0x00B7E628-0x00B7E744
		private TextInfo CreateTextInfo(bool readOnly); // 0x00B7D888-0x00B7D910
		private static void insert_into_shared_tables(CultureInfo c); // 0x00B7ECF4-0x00B7EE50
		public static CultureInfo GetCultureInfo(int culture); // 0x00B7EE50-0x00B7F094
		public static CultureInfo GetCultureInfo(string name); // 0x00B7F094-0x00B7F2C8
		internal static CultureInfo CreateCulture(string name, bool reference); // 0x00B7F2C8-0x00B7F350
		public static CultureInfo CreateSpecificCulture(string name); // 0x00B7CF64-0x00B7D20C
		private static CultureInfo CreateSpecificCultureFromNeutral(string name); // 0x00B7F350-0x00B813F4
		private static Calendar CreateCalendar(int calendarType); // 0x00B7D340-0x00B7D538
		private static Exception CreateNotFoundException(string name); // 0x00B7EC2C-0x00B7ECC8
		internal static void CheckDomainSafetyObject(object obj, object container); // 0x00B81700-0x00B818B0
		internal static bool VerifyCultureName(string cultureName, bool throwException); // 0x00B8194C-0x00B81ACC
	}

	public sealed class IdnMapping // TypeDefIndex: 666
	{
		// Fields
		private bool allow_unassigned; // 0x10
		private bool use_std3; // 0x11
		private Punycode puny; // 0x18
	
		// Constructors
		public IdnMapping(); // 0x00B90D74-0x00B90DDC
	
		// Methods
		public override bool Equals(object obj); // 0x00B90DDC-0x00B90E9C
		public override int GetHashCode(); // 0x00B90E9C-0x00B90EAC
		public string GetAscii(string unicode); // 0x00B90EAC-0x00B90F4C
		public string GetAscii(string unicode, int index, int count); // 0x00B90F4C-0x00B91060
		private string Convert(string input, int index, int count, bool toAscii); // 0x00B91060-0x00B91290
		private string ToAscii(string s, int offset); // 0x00B91290-0x00B914DC
		private void VerifyLength(string s, int offset); // 0x00B91A28-0x00B91B28
		private string NamePrep(string s, int offset); // 0x00B916C8-0x00B9182C
		private void VerifyProhibitedCharacters(string s, int offset); // 0x00B91B28-0x00B91D7C
		private void VerifyStd3AsciiRules(string s, int offset); // 0x00B9182C-0x00B91A28
		public string GetUnicode(string ascii); // 0x00B91D7C-0x00B91E1C
		public string GetUnicode(string ascii, int index, int count); // 0x00B91E1C-0x00B91F30
		private string ToUnicode(string s, int offset); // 0x00B914DC-0x00B916C8
	}

	internal class Bootstring // TypeDefIndex: 667
	{
		// Fields
		private readonly char delimiter; // 0x10
		private readonly int base_num; // 0x14
		private readonly int tmin; // 0x18
		private readonly int tmax; // 0x1C
		private readonly int skew; // 0x20
		private readonly int damp; // 0x24
		private readonly int initial_bias; // 0x28
		private readonly int initial_n; // 0x2C
	
		// Constructors
		public Bootstring(char delimiter, int baseNum, int tmin, int tmax, int skew, int damp, int initialBias, int initialN); // 0x0086A2E8-0x0086A360
	
		// Methods
		public string Encode(string s, int offset); // 0x0086A360-0x0086A6C8
		private char EncodeDigit(int d); // 0x0086A6C8-0x0086A6E0
		private int DecodeDigit(char c); // 0x0086A758-0x0086A798
		private int Adapt(int delta, int numPoints, bool firstTime); // 0x0086A6E0-0x0086A758
		public string Decode(string s, int offset); // 0x0086A798-0x0086AA8C
	}

	internal class Punycode : Bootstring // TypeDefIndex: 668
	{
		// Constructors
		public Punycode(); // 0x0097EF30-0x0097EF74
	}

	[Serializable]
	[ComVisible] // 0x004B4ED0-0x004B4EE4
	public class RegionInfo // TypeDefIndex: 669
	{
		// Fields
		private static RegionInfo currentRegion; // 0x00
		private int regionId; // 0x10
		private string iso2Name; // 0x18
		private string iso3Name; // 0x20
		private string win3Name; // 0x28
		private string englishName; // 0x30
		private string nativeName; // 0x38
		private string currencySymbol; // 0x40
		private string isoCurrencySymbol; // 0x48
		private string currencyEnglishName; // 0x50
		private string currencyNativeName; // 0x58
	
		// Properties
		public static RegionInfo CurrentRegion { get; } // 0x0097EF74-0x0097F044 
		[ComVisible] // 0x004BD5E0-0x004BD5F4
		public virtual string CurrencyEnglishName { get; } // 0x0097F4D8-0x0097F4E0 
		public virtual string CurrencySymbol { get; } // 0x0097F4E0-0x0097F4E8 
		[MonoTODO] // 0x004BD5F4-0x004BD62C
		public virtual string DisplayName { get; } // 0x0097F4E8-0x0097F4F0 
		public virtual string EnglishName { get; } // 0x0097F4F0-0x0097F4F8 
		[ComVisible] // 0x004BD62C-0x004BD640
		public virtual int GeoId { get; } // 0x0097F4F8-0x0097F500 
		public virtual bool IsMetric { get; } // 0x0097F500-0x0097F588 
		public virtual string ISOCurrencySymbol { get; } // 0x0097F588-0x0097F590 
		[ComVisible] // 0x004BD640-0x004BD654
		public virtual string NativeName { get; } // 0x0097F590-0x0097F598 
		[ComVisible] // 0x004BD654-0x004BD668
		public virtual string CurrencyNativeName { get; } // 0x0097F598-0x0097F5A0 
		public virtual string Name { get; } // 0x0097F5A0-0x0097F5A8 
		public virtual string ThreeLetterISORegionName { get; } // 0x0097F5A8-0x0097F5B0 
		public virtual string ThreeLetterWindowsRegionName { get; } // 0x0097F5B0-0x0097F5B8 
		public virtual string TwoLetterISORegionName { get; } // 0x0097F5B8-0x0097F5C0 
	
		// Constructors
		public RegionInfo(int culture); // 0x0097F1A0-0x0097F2B4
		public RegionInfo(string name); // 0x0097F388-0x0097F4D4
		private RegionInfo(CultureInfo ci); // 0x0097F044-0x0097F1A0
	
		// Methods
		private bool GetByTerritory(CultureInfo ci); // 0x0097F2B4-0x0097F388
		private bool construct_internal_region_from_name(string name); // 0x0097F4D4-0x0097F4D8
		public override bool Equals(object value); // 0x0097F5C0-0x0097F6A0
		public override int GetHashCode(); // 0x0097F6A0-0x0097F6D0
		public override string ToString(); // 0x0097F6D0-0x0097F6E0
		internal static void ClearCachedData(); // 0x0097F6E0-0x0097F730
	}
}

namespace System.Threading
{
	[ComVisible] // 0x004B4EE4-0x004B4F34
	[DebuggerDisplay] // 0x004B4EE4-0x004B4F34
	public struct CancellationToken // TypeDefIndex: 670
	{
		// Fields
		private CancellationTokenSource m_source; // 0x00
		private static readonly Action<object> s_ActionToActionObjShunt; // 0x00
	
		// Properties
		public static CancellationToken None { get; } // 0x00B537F0-0x00B53830 
		public bool IsCancellationRequested { get; } // 0x0058B620-0x0058B658 
		public bool CanBeCanceled { get; } // 0x0058B658-0x0058B690 
	
		// Constructors
		internal CancellationToken(CancellationTokenSource source); // 0x0058B690-0x0058B698
		static CancellationToken(); // 0x00B54394-0x00B54538
	
		// Methods
		private static void ActionToActionObjShunt(object obj); // 0x00B538C0-0x00B53AAC
		internal CancellationTokenRegistration InternalRegisterWithoutEC(Action<object> callback, object state); // 0x0058B698-0x0058B6A8
		private CancellationTokenRegistration Register(Action<object> callback, object state, bool useSynchronizationContext, bool useExecutionContext); // 0x0058B6A8-0x0058B6B8
		public bool Equals(CancellationToken other); // 0x0058B6B8-0x0058B6C0
		public override bool Equals(object other); // 0x0058B6C0-0x0058B6C8
		public override int GetHashCode(); // 0x0058B6C8-0x0058B6D0
		public static bool operator ==(CancellationToken left, CancellationToken right); // 0x00B54174-0x00B5419C
		public static bool operator !=(CancellationToken left, CancellationToken right); // 0x00B5419C-0x00B5430C
		public void ThrowIfCancellationRequested(); // 0x0058B6D0-0x0058B6D8
		internal void ThrowIfSourceDisposed(); // 0x0058B6D8-0x0058B6E0
		private void ThrowOperationCanceledException(); // 0x0058B6E0-0x0058B734
		private static void ThrowObjectDisposedException(); // 0x00B5430C-0x00B54394
	}

	public struct CancellationTokenRegistration : IEquatable<CancellationTokenRegistration>, IDisposable // TypeDefIndex: 671
	{
		// Fields
		private readonly CancellationCallbackInfo m_callbackInfo; // 0x00
		private readonly SparselyPopulatedArrayAddInfo<CancellationCallbackInfo> m_registrationInfo; // 0x08
	
		// Constructors
		internal CancellationTokenRegistration(CancellationCallbackInfo callbackInfo, SparselyPopulatedArrayAddInfo<CancellationCallbackInfo> registrationInfo); // 0x0058B734-0x0058B740
	
		// Methods
		[FriendAccessAllowed] // 0x004BBF8C-0x004BBF9C
		internal bool TryDeregister(); // 0x0058B740-0x0058B748
		public void Dispose(); // 0x0058B748-0x0058B750
		public override bool Equals(object obj); // 0x0058B750-0x0058B758
		public bool Equals(CancellationTokenRegistration other); // 0x0058B758-0x0058B790
		public override int GetHashCode(); // 0x0058B790-0x0058B7DC
	}

	[ComVisible] // 0x004B4F34-0x004B4F48
	public class CancellationTokenSource : IDisposable // TypeDefIndex: 672
	{
		// Fields
		private static readonly CancellationTokenSource _staticSource_Set; // 0x00
		private static readonly CancellationTokenSource _staticSource_NotCancelable; // 0x08
		private static readonly int s_nLists; // 0x10
		private ManualResetEvent m_kernelEvent; // 0x10
		private SparselyPopulatedArray<CancellationCallbackInfo>[] m_registeredCallbacksLists; // 0x18
		private int m_state; // 0x20
		private int m_threadIDExecutingCallbacks; // 0x24
		private bool m_disposed; // 0x28
		private CancellationTokenRegistration[] m_linkingRegistrations; // 0x30
		private static readonly Action<object> s_LinkedTokenCancelDelegate; // 0x18
		private CancellationCallbackInfo m_executingCallback; // 0x38
		private Timer m_timer; // 0x40
		private static readonly TimerCallback s_timerCallback; // 0x20
	
		// Properties
		public bool IsCancellationRequested { get; } // 0x00B53830-0x00B53890 
		internal bool IsCancellationCompleted { get; } // 0x00B54538-0x00B54560 
		internal bool IsDisposed { get; } // 0x00B54844-0x00B5484C 
		internal int ThreadIDExecutingCallbacks { get; set; } // 0x00B54560-0x00B54584 0x00B5484C-0x00B54874
		public CancellationToken Token { get; } // 0x00B54874-0x00B54898 
		internal bool CanBeCanceled { get; } // 0x00B53890-0x00B538C0 
		internal CancellationCallbackInfo ExecutingCallback { get; } // 0x00B54904-0x00B54928 
	
		// Constructors
		public CancellationTokenSource(); // 0x00B54928-0x00B54968
		private CancellationTokenSource(bool set); // 0x00B54968-0x00B549C0
		static CancellationTokenSource(); // 0x00B55774-0x00B55894
	
		// Methods
		private static void LinkedTokenCancelDelegate(object source); // 0x00B5478C-0x00B5481C
		public void Cancel(); // 0x00B5481C-0x00B54844
		public void Cancel(bool throwOnFirstException); // 0x00B549C0-0x00B549EC
		private static void TimerCallbackLogic(object obj); // 0x00B54B60-0x00B54C98
		public void Dispose(); // 0x00B54C98-0x00B54D14
		protected virtual void Dispose(bool disposing); // 0x00B54D14-0x00B54E08
		internal void ThrowIfDisposed(); // 0x00B54898-0x00B54904
		private static void ThrowObjectDisposedException(); // 0x00B54E08-0x00B54E90
		internal static CancellationTokenSource InternalGetStaticSource(bool set); // 0x00B53FD8-0x00B54174
		internal CancellationTokenRegistration InternalRegister(Action<object> callback, object stateForCallback, SynchronizationContext targetSyncContext, ExecutionContext executionContext); // 0x00B53C4C-0x00B53FD8
		private void NotifyCancellation(bool throwOnFirstException); // 0x00B549EC-0x00B54B60
		private void ExecuteCallbackHandlers(bool throwOnFirstException); // 0x00B54F20-0x00B553EC
		private void CancellationCallbackCoreWork_OnSyncContext(object obj); // 0x00B554DC-0x00B55568
		private void CancellationCallbackCoreWork(CancellationCallbackCoreWorkArguments args); // 0x00B55400-0x00B554DC
		public static CancellationTokenSource CreateLinkedTokenSource(CancellationToken token1, CancellationToken token2); // 0x00B55568-0x00B55774
		internal void WaitForCallbackToComplete(CancellationCallbackInfo callbackInfo); // 0x00B54584-0x00B5478C
	}

	internal struct CancellationCallbackCoreWorkArguments // TypeDefIndex: 673
	{
		// Fields
		internal SparselyPopulatedArrayFragment<CancellationCallbackInfo> m_currArrayFragment; // 0x00
		internal int m_currArrayIndex; // 0x08
	
		// Constructors
		public CancellationCallbackCoreWorkArguments(SparselyPopulatedArrayFragment<CancellationCallbackInfo> currArrayFragment, int currArrayIndex); // 0x0058B5D0-0x0058B620
	}

	internal class CancellationCallbackInfo // TypeDefIndex: 674
	{
		// Fields
		internal readonly Action<object> Callback; // 0x10
		internal readonly object StateForCallback; // 0x18
		internal readonly SynchronizationContext TargetSyncContext; // 0x20
		internal readonly ExecutionContext TargetExecutionContext; // 0x28
		internal readonly CancellationTokenSource CancellationTokenSource; // 0x30
		private static ContextCallback s_executionContextCallback; // 0x00
	
		// Constructors
		internal CancellationCallbackInfo(Action<object> callback, object stateForCallback, SynchronizationContext targetSyncContext, ExecutionContext targetExecutionContext, CancellationTokenSource cancellationTokenSource); // 0x00B5351C-0x00B53570
	
		// Methods
		internal void ExecuteCallback(); // 0x00B53570-0x00B53654
		private static void ExecutionContextCallback(object obj); // 0x00B53758-0x00B537F0
	}

	internal class SparselyPopulatedArray<T> // TypeDefIndex: 675
		where T : class
	{
		// Fields
		private SparselyPopulatedArrayFragment<T> m_tail;
	
		// Properties
		internal SparselyPopulatedArrayFragment<T> Tail { get; }
	
		// Constructors
		internal SparselyPopulatedArray(int initialSize);
	
		// Methods
		internal SparselyPopulatedArrayAddInfo<T> Add(T element);
	}

	internal struct SparselyPopulatedArrayAddInfo<T> // TypeDefIndex: 676
		where T : class
	{
		// Fields
		private SparselyPopulatedArrayFragment<T> m_source;
		private int m_index;
	
		// Properties
		internal SparselyPopulatedArrayFragment<T> Source { get; }
		internal int Index { get; }
	
		// Constructors
		internal SparselyPopulatedArrayAddInfo(SparselyPopulatedArrayFragment<T> source, int index);
	}

	internal class SparselyPopulatedArrayFragment<T> // TypeDefIndex: 677
		where T : class
	{
		// Fields
		internal readonly T[] m_elements;
		internal int m_freeCount;
		internal SparselyPopulatedArrayFragment<T> m_next;
		internal SparselyPopulatedArrayFragment<T> m_prev;
	
		// Properties
		internal T this[int index] { get => default; }
		internal int Length { get; }
		internal SparselyPopulatedArrayFragment<T> Prev { get; }
	
		// Constructors
		internal SparselyPopulatedArrayFragment(int size);
		internal SparselyPopulatedArrayFragment(int size, SparselyPopulatedArrayFragment<T> prev);
	
		// Methods
		internal T SafeAtomicRemove(int index, T expectedElement);
	}

	public static class LazyInitializer // TypeDefIndex: 678
	{
		// Methods
		public static T EnsureInitialized<T>(ref T target, Func<T> valueFactory)
			where T : class;
		private static T EnsureInitializedCore<T>(ref T target, Func<T> valueFactory)
			where T : class;
	}

	[ComVisible] // 0x004B4F80-0x004B4FD0
	[DebuggerDisplay] // 0x004B4F80-0x004B4FD0
	public class ManualResetEventSlim : IDisposable // TypeDefIndex: 679
	{
		// Fields
		private object m_lock; // 0x10
		private ManualResetEvent m_eventObj; // 0x18
		private int m_combinedState; // 0x20
		private static Action<object> s_cancellationTokenCallback; // 0x00
	
		// Properties
		public WaitHandle WaitHandle { get; } // 0x00B57B6C-0x00B57BAC 
		public bool IsSet { get; private set; } // 0x00B57DC0-0x00B57E2C 0x00B57E34-0x00B57E58
		public int SpinCount { get; private set; } // 0x00B57EF8-0x00B57F64 0x00B57F74-0x00B57FB4
		private int Waiters { get; set; } // 0x00B57FB4-0x00B58020 0x00B58020-0x00B58108
	
		// Constructors
		public ManualResetEventSlim(bool initialState); // 0x00B58108-0x00B5813C
		public ManualResetEventSlim(bool initialState, int spinCount); // 0x00B581B0-0x00B582FC
		static ManualResetEventSlim(); // 0x00B58D40-0x00B58DC4
	
		// Methods
		private void Initialize(bool initialState, int spinCount); // 0x00B5813C-0x00B581B0
		private void EnsureLockObjectCreated(); // 0x00B58318-0x00B5839C
		private bool LazyInitializeEvent(); // 0x00B57C4C-0x00B57DC0
		public void Set(); // 0x00B583C4-0x00B583CC
		private void Set(bool duringCancellation); // 0x00B583CC-0x00B58570
		public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken); // 0x00B585F8-0x00B58AC8
		public void Dispose(); // 0x00B58AD0-0x00B58B4C
		protected virtual void Dispose(bool disposing); // 0x00B58B4C-0x00B58C34
		private void ThrowIfDisposed(); // 0x00B57BAC-0x00B57C4C
		private static void CancellationTokenCallback(object obj); // 0x00B58C34-0x00B58D40
		private void UpdateStateAtomically(int newBits, int updateBitsMask); // 0x00B57E58-0x00B57EF8
		private static int ExtractStatePortionAndShiftRight(int state, int mask, int rightBitShiftCount); // 0x00B57F64-0x00B57F74
		private static int ExtractStatePortion(int state, int mask); // 0x00B57E2C-0x00B57E34
	}

	[ComVisible] // 0x004B4FD0-0x004B5020
	[DebuggerDisplay] // 0x004B4FD0-0x004B5020
	public class SemaphoreSlim : IDisposable // TypeDefIndex: 680
	{
		// Fields
		private int m_currentCount; // 0x10
		private readonly int m_maxCount; // 0x14
		private int m_waitCount; // 0x18
		private object m_lockObj; // 0x20
		private ManualResetEvent m_waitHandle; // 0x28
		private TaskNode m_asyncHead; // 0x30
		private TaskNode m_asyncTail; // 0x38
		private static readonly Task<bool> s_trueTask; // 0x00
		private static Action<object> s_cancellationTokenCanceledEventHandler; // 0x08
	
		// Nested types
		private sealed class TaskNode : Task<bool>, IThreadPoolWorkItem // TypeDefIndex: 681
		{
			// Fields
			internal TaskNode Prev; // 0x58
			internal TaskNode Next; // 0x60
	
			// Constructors
			internal TaskNode(); // 0x00B5BB78-0x00B5BBE8
	
			// Methods
			new void IThreadPoolWorkItem.ExecuteWorkItem(); // 0x00B5C8FC-0x00B5C950
			new void IThreadPoolWorkItem.MarkAborted(ThreadAbortException tae); // 0x00B5C950-0x00B5C954
		}
	
		[CompilerGenerated] // 0x004B5020-0x004B5030
		private struct _WaitUntilCountOrTimeoutAsync_d__31 : IAsyncStateMachine // TypeDefIndex: 682
		{
			// Fields
			public int __1__state; // 0x00
			public AsyncTaskMethodBuilder<bool> __t__builder; // 0x08
			public CancellationToken cancellationToken; // 0x20
			public TaskNode asyncWaiter; // 0x28
			public int millisecondsTimeout; // 0x30
			private CancellationTokenSource _cts_5__1; // 0x38
			public SemaphoreSlim __4__this; // 0x40
			private object __7__wrap1; // 0x48
			private ConfiguredTaskAwaitable<System.Threading.Tasks.Task> __u__1; // 0x50
			private ConfiguredTaskAwaitable<bool> __u__2; // 0x60
	
			// Methods
			private void MoveNext(); // 0x0058B94C-0x0058B954
			[DebuggerHidden] // 0x004BC000-0x004BC010
			private void SetStateMachine(IAsyncStateMachine stateMachine); // 0x0058B954-0x0058B95C
		}
	
		// Constructors
		public SemaphoreSlim(int initialCount, int maxCount); // 0x00B5AEC8-0x00B5B088
		static SemaphoreSlim(); // 0x00B5C148-0x00B5C8FC
	
		// Methods
		public void Wait(); // 0x00B5B090-0x00B5B09C
		public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken); // 0x00B5B09C-0x00B5B568
		private bool WaitUntilCountOrTimeout(int millisecondsTimeout, uint startTime, CancellationToken cancellationToken); // 0x00B5B910-0x00B5B9A4
		public System.Threading.Tasks.Task WaitAsync(); // 0x00B5B9A4-0x00B5B9B0
		public Task<bool> WaitAsync(int millisecondsTimeout, CancellationToken cancellationToken); // 0x00B5B628-0x00B5B910
		private TaskNode CreateAndAddAsyncWaiter(); // 0x00B5B9B0-0x00B5BA44
		private bool RemoveAsyncWaiter(TaskNode task); // 0x00B5BBE8-0x00B5BC78
		private async Task<bool> WaitUntilCountOrTimeoutAsync(TaskNode asyncWaiter, int millisecondsTimeout, CancellationToken cancellationToken); // 0x00B5BA44-0x00B5BB78
		public int Release(); // 0x00B5BC78-0x00B5BC80
		public int Release(int releaseCount); // 0x00B5BC80-0x00B5BF5C
		private static void QueueWaiterTask(TaskNode waiterTask); // 0x00B5BF5C-0x00B5BF68
		public void Dispose(); // 0x00B5BF68-0x00B5BFE4
		protected virtual void Dispose(bool disposing); // 0x00B5BFE4-0x00B5C048
		private static void CancellationTokenCanceledEventHandler(object obj); // 0x00B5C048-0x00B5C148
		private void CheckDispose(); // 0x00B5B568-0x00B5B628
		private static string GetResourceString(string str); // 0x00B5B088-0x00B5B090
	}

	[ComVisible] // 0x004B5030-0x004B50CC
	[DebuggerDisplay] // 0x004B5030-0x004B50CC
	[DebuggerTypeProxy] // 0x004B5030-0x004B50CC
	public struct SpinLock // TypeDefIndex: 683
	{
		// Fields
		private int m_owner; // 0x00
		private static int MAXIMUM_WAITERS; // 0x00
	
		// Properties
		public bool IsHeldByCurrentThread { [ReliabilityContract] /* 0x004BC028-0x004BC040 */ get; } // 0x0058B9A8-0x0058B9B0 
		public bool IsThreadOwnerTrackingEnabled { [ReliabilityContract] /* 0x004BC040-0x004BC058 */ get; } // 0x0058B9B0-0x0058B9D8 
	
		// Nested types
		internal class SystemThreading_SpinLockDebugView // TypeDefIndex: 684
		{
		}
	
		// Constructors
		public SpinLock(bool enableThreadOwnerTracking); // 0x0058B95C-0x0058B968
		static SpinLock(); // 0x00B5D35C-0x00B5E3B0
	
		// Methods
		public void Enter(ref bool lockTaken); // 0x0058B968-0x0058B970
		public void TryEnter(int millisecondsTimeout, ref bool lockTaken); // 0x0058B970-0x0058B978
		private void ContinueTryEnter(int millisecondsTimeout, ref bool lockTaken); // 0x0058B978-0x0058B980
		private void DecrementWaiters(); // 0x0058B980-0x0058B988
		private void ContinueTryEnterWithThreadTracking(int millisecondsTimeout, uint startTime, ref bool lockTaken); // 0x0058B988-0x0058B990
		[ReliabilityContract] // 0x004BC010-0x004BC028
		public void Exit(bool useMemoryBarrier); // 0x0058B990-0x0058B99C
		private void ExitSlowPath(bool useMemoryBarrier); // 0x0058B99C-0x0058B9A8
	}

	public struct SpinWait // TypeDefIndex: 685
	{
		// Fields
		private int m_count; // 0x00
	
		// Properties
		public bool NextSpinWillYield { get; } // 0x00584794-0x005847B0 
	
		// Methods
		public void SpinOnce(); // 0x005847B0-0x0058492C
	}

	internal static class PlatformHelper // TypeDefIndex: 686
	{
		// Fields
		private static int s_processorCount; // 0x00
		private static int s_lastProcessorCountRefreshTicks; // 0x04
	
		// Properties
		internal static int ProcessorCount { get; } // 0x00B55894-0x00B55950 
		internal static bool IsSingleProcessor { get; } // 0x00B582FC-0x00B58318 
	}

	internal static class TimeoutHelper // TypeDefIndex: 687
	{
		// Methods
		public static uint GetTime(); // 0x00913D54-0x00913D5C
		public static int UpdateTimeOut(uint startTime, int originalWaitMillisecondsTimeout); // 0x00913D5C-0x00913D9C
	}

	[Serializable]
	[ComVisible] // 0x004B50CC-0x004B50E0
	public class AbandonedMutexException : SystemException // TypeDefIndex: 688
	{
		// Fields
		private int m_MutexIndex; // 0x88
		private Mutex m_Mutex; // 0x90
	
		// Constructors
		public AbandonedMutexException(); // 0x00B53338-0x00B533B4
		public AbandonedMutexException(int location, WaitHandle handle); // 0x00B533B4-0x00B5348C
		protected AbandonedMutexException(SerializationInfo info, StreamingContext context); // 0x00B53500-0x00B5351C
	
		// Methods
		private void SetupException(int location, WaitHandle handle); // 0x00B5348C-0x00B53500
	}

	public sealed class AsyncLocal<T> : IAsyncLocal // TypeDefIndex: 689
	{
		// Fields
		private readonly Action<AsyncLocalValueChangedArgs<T>> m_valueChangedHandler;
	
		// Properties
		public T Value { get; set; }
	
		// Constructors
		public AsyncLocal(Action<AsyncLocalValueChangedArgs<T>> valueChangedHandler);
	
		// Methods
		void IAsyncLocal.OnValueChanged(object previousValueObj, object currentValueObj, bool contextChanged);
	}

	internal interface IAsyncLocal // TypeDefIndex: 690
	{
		// Methods
		void OnValueChanged(object previousValue, object currentValue, bool contextChanged);
	}

	public struct AsyncLocalValueChangedArgs<T> // TypeDefIndex: 691
	{
		// Fields
		[CompilerGenerated] // 0x004B9998-0x004B99A8
		private T _PreviousValue_k__BackingField;
		[CompilerGenerated] // 0x004B99A8-0x004B99B8
		private T _CurrentValue_k__BackingField;
		[CompilerGenerated] // 0x004B99B8-0x004B99C8
		private bool _ThreadContextChanged_k__BackingField;
	
		// Properties
		public T PreviousValue { [CompilerGenerated] /* 0x004BC058-0x004BC068 */ get; [CompilerGenerated] /* 0x004BC068-0x004BC078 */ private set; }
		public T CurrentValue { [CompilerGenerated] /* 0x004BC078-0x004BC088 */ get; [CompilerGenerated] /* 0x004BC088-0x004BC098 */ private set; }
		private bool ThreadContextChanged { [CompilerGenerated] /* 0x004BC098-0x004BC0A8 */ set; }
	
		// Constructors
		internal AsyncLocalValueChangedArgs(T previousValue, T currentValue, bool contextChanged);
	}

	[ComVisible] // 0x004B50E0-0x004B50F4
	public enum EventResetMode // TypeDefIndex: 692
	{
		AutoReset = 0,
		ManualReset = 1
	}

	[ComVisible] // 0x004B50F4-0x004B5108
	public class EventWaitHandle : WaitHandle // TypeDefIndex: 693
	{
		// Constructors
		public EventWaitHandle(bool initialState, EventResetMode mode); // 0x00B55D34-0x00B55D40
		public EventWaitHandle(bool initialState, EventResetMode mode, string name); // 0x00B55D40-0x00B56010
	
		// Methods
		public bool Reset(); // 0x00B5601C-0x00B560A8
		public bool Set(); // 0x00B54E94-0x00B54F20
	}

	[ComVisible] // 0x004B5108-0x004B511C
	public delegate void ContextCallback(object state); // TypeDefIndex: 694; 0x00B55950-0x00B55D04

	internal struct ExecutionContextSwitcher // TypeDefIndex: 695
	{
		// Fields
		internal ExecutionContext.Reader outerEC; // 0x00
		internal bool outerECBelongsToScope; // 0x08
		internal object hecsw; // 0x10
		internal Thread thread; // 0x18
	
		// Methods
		[HandleProcessCorruptedStateExceptions] // 0x004BC0A8-0x004BC0E8
		[ReliabilityContract] // 0x004BC0A8-0x004BC0E8
		internal bool UndoNoThrow(); // 0x0058B8E4-0x0058B8EC
		[ReliabilityContract] // 0x004BC0E8-0x004BC100
		internal void Undo(); // 0x0058B8EC-0x0058B94C
	}

	[Serializable]
	public sealed class ExecutionContext : IDisposable, ISerializable // TypeDefIndex: 696
	{
		// Fields
		private SynchronizationContext _syncContext; // 0x10
		private SynchronizationContext _syncContextNoFlow; // 0x18
		private LogicalCallContext _logicalCallContext; // 0x20
		private IllogicalCallContext _illogicalCallContext; // 0x28
		private Flags _flags; // 0x30
		private Dictionary<IAsyncLocal, object> _localValues; // 0x38
		private List<IAsyncLocal> _localChangeNotifications; // 0x40
		private static readonly ExecutionContext s_dummyDefaultEC; // 0x00
	
		// Properties
		internal bool isNewCapture { get; set; } // 0x00B56230-0x00B56244 0x00B56244-0x00B56260
		internal bool isFlowSuppressed { get; set; } // 0x00B56260-0x00B5626C 0x00B5626C-0x00B56288
		internal static ExecutionContext PreAllocatedDefault { get; } // 0x00B56288-0x00B562F0 
		internal bool IsPreAllocatedDefault { get; } // 0x00B562F0-0x00B562FC 
		internal LogicalCallContext LogicalCallContext { get; set; } // 0x00B56ABC-0x00B56B28 0x00B56B28-0x00B56B30
		internal IllogicalCallContext IllogicalCallContext { get; set; } // 0x00B56B30-0x00B56B9C 0x00B56B9C-0x00B56BA4
		internal SynchronizationContext SynchronizationContext { [ReliabilityContract] /* 0x004BC140-0x004BC158 */ get; [ReliabilityContract] /* 0x004BC158-0x004BC170 */ set; } // 0x00B56BA4-0x00B56BAC 0x00B56BAC-0x00B56BB4
		internal SynchronizationContext SynchronizationContextNoFlow { [ReliabilityContract] /* 0x004BC170-0x004BC188 */ get; [ReliabilityContract] /* 0x004BC188-0x004BC1A0 */ set; } // 0x00B56BB4-0x00B56BBC 0x00B56BBC-0x00B56BC4
	
		// Nested types
		private enum Flags // TypeDefIndex: 697
		{
			None = 0,
			IsNewCapture = 1,
			IsFlowSuppressed = 2,
			IsPreAllocatedDefault = 4
		}
	
		internal struct Reader // TypeDefIndex: 698
		{
			// Fields
			private ExecutionContext m_ec; // 0x00
	
			// Properties
			public bool IsNull { get; } // 0x0058B7EC-0x0058B7FC 
			public bool IsFlowSuppressed { get; } // 0x0058B808-0x0058B824 
			public SynchronizationContext SynchronizationContext { get; } // 0x0058B824-0x0058B83C 
			public SynchronizationContext SynchronizationContextNoFlow { get; } // 0x0058B83C-0x0058B854 
			public LogicalCallContext.Reader LogicalCallContext { get; } // 0x0058B854-0x0058B870 
	
			// Constructors
			public Reader(ExecutionContext ec); // 0x0058B7DC-0x0058B7E4
	
			// Methods
			public ExecutionContext DangerousGetRawExecutionContext(); // 0x0058B7E4-0x0058B7EC
			public bool IsDefaultFTContext(bool ignoreSyncCtx); // 0x0058B7FC-0x0058B808
			public object GetLocalValue(IAsyncLocal local); // 0x0058B870-0x0058B878
			public bool HasSameLocalValues(ExecutionContext other); // 0x0058B878-0x0058B8E4
		}
	
		[Flags] // 0x004B511C-0x004B512C
		internal enum CaptureOptions // TypeDefIndex: 699
		{
			None = 0,
			IgnoreSyncCtx = 1,
			OptimizeDefaultCase = 2
		}
	
		// Constructors
		[ReliabilityContract] // 0x004BC100-0x004BC118
		internal ExecutionContext(); // 0x00B562FC-0x00B56304
		[ReliabilityContract] // 0x004BC118-0x004BC130
		internal ExecutionContext(bool isPreAllocatedDefault); // 0x00B56304-0x00B56338
		private ExecutionContext(SerializationInfo info, StreamingContext context); // 0x00B577A4-0x00B57894
		static ExecutionContext(); // 0x00B57894-0x00B5792C
	
		// Methods
		internal static object GetLocalValue(IAsyncLocal local); // 0x00B56338-0x00B56404
		internal static void SetLocalValue(IAsyncLocal local, object newValue, bool needChangeNotifications); // 0x00B56404-0x00B56630
		[HandleProcessCorruptedStateExceptions] // 0x004BC130-0x004BC140
		internal static void OnAsyncLocalContextChanged(ExecutionContext previous, ExecutionContext current); // 0x00B56630-0x00B56ABC
		public void Dispose(); // 0x00B56BC4-0x00B56BC8
		public static void Run(ExecutionContext executionContext, ContextCallback callback, object state); // 0x00B53664-0x00B53758
		[FriendAccessAllowed] // 0x004BC1A0-0x004BC1B0
		internal static void Run(ExecutionContext executionContext, ContextCallback callback, object state, bool preserveSyncCtx); // 0x00B56BC8-0x00B56C54
		[HandleProcessCorruptedStateExceptions] // 0x004BC1B0-0x004BC1C0
		internal static void RunInternal(ExecutionContext executionContext, ContextCallback callback, object state, bool preserveSyncCtx); // 0x00B56C54-0x00B56E84
		internal static void EstablishCopyOnWriteScope(ref ExecutionContextSwitcher ecsw); // 0x00B571E0-0x00B5734C
		private static void EstablishCopyOnWriteScope(Thread currentThread, bool knownNullWindowsIdentity, ref ExecutionContextSwitcher ecsw); // 0x00B56F08-0x00B56F68
		[HandleProcessCorruptedStateExceptions] // 0x004BC1C0-0x004BC1D0
		internal static ExecutionContextSwitcher SetExecutionContext(ExecutionContext executionContext, bool preserveSyncCtx); // 0x00B56F68-0x00B571E0
		public ExecutionContext CreateCopy(); // 0x00B5734C-0x00B57490
		internal ExecutionContext CreateMutableCopy(); // 0x00B57490-0x00B57598
		public static bool IsFlowSuppressed(); // 0x00B57598-0x00B575CC
		public static ExecutionContext Capture(); // 0x00B575CC-0x00B5762C
		[FriendAccessAllowed] // 0x004BC1D0-0x004BC1E0
		internal static ExecutionContext FastCapture(); // 0x00B5762C-0x00B576A8
		internal static ExecutionContext Capture(ref StackCrawlMark stackMark, CaptureOptions options); // 0x00B53AAC-0x00B53C4C
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00B576A8-0x00B577A4
		internal bool IsDefaultFTContext(bool ignoreSyncCtx); // 0x00B56E84-0x00B56F08
	}

	[Serializable]
	public class LockRecursionException : Exception // TypeDefIndex: 700
	{
		// Constructors
		public LockRecursionException(); // 0x00B579EC-0x00B57A54
		public LockRecursionException(string message); // 0x00B57A54-0x00B57ACC
		protected LockRecursionException(SerializationInfo info, StreamingContext context); // 0x00B57ACC-0x00B57B5C
	}

	[ComVisible] // 0x004B512C-0x004B5140
	public sealed class ManualResetEvent : EventWaitHandle // TypeDefIndex: 701
	{
		// Constructors
		public ManualResetEvent(bool initialState); // 0x00B57B5C-0x00B57B6C
	}

	[ComVisible] // 0x004B5140-0x004B5154
	public static class Monitor // TypeDefIndex: 702
	{
		// Methods
		public static void Enter(object obj); // 0x00B58DC4-0x00B58DC8
		public static void Enter(object obj, ref bool lockTaken); // 0x00B5839C-0x00B583C0
		private static void ThrowLockTakenException(); // 0x00B58DC8-0x00B58E58
		[ReliabilityContract] // 0x004BC1E0-0x004BC1F8
		public static void Exit(object obj); // 0x00B583C0-0x00B583C4
		public static bool Wait(object obj, int millisecondsTimeout, bool exitContext); // 0x00B58E68-0x00B58F04
		public static bool Wait(object obj, int millisecondsTimeout); // 0x00B58AC8-0x00B58AD0
		public static void Pulse(object obj); // 0x00B58FD8-0x00B59060
		public static void PulseAll(object obj); // 0x00B58570-0x00B585F8
		private static bool Monitor_test_synchronised(object obj); // 0x00B59180-0x00B59184
		private static void Monitor_pulse(object obj); // 0x00B59184-0x00B59188
		private static void ObjPulse(object obj); // 0x00B59060-0x00B590F0
		private static void Monitor_pulse_all(object obj); // 0x00B59188-0x00B5918C
		private static void ObjPulseAll(object obj); // 0x00B590F0-0x00B59180
		private static bool Monitor_wait(object obj, int ms); // 0x00B5918C-0x00B59190
		private static bool ObjWait(bool exitContext, int millisecondsTimeout, object obj); // 0x00B58F04-0x00B58FD8
		private static void try_enter_with_atomic_var(object obj, int millisecondsTimeout, ref bool lockTaken); // 0x00B59190-0x00B59194
		private static void ReliableEnterTimeout(object obj, int timeout, ref bool lockTaken); // 0x00B59194-0x00B59268
		private static void ReliableEnter(object obj, ref bool lockTaken); // 0x00B58E58-0x00B58E68
	}

	[ComVisible] // 0x004B5154-0x004B5168
	public delegate void ParameterizedThreadStart(object obj); // TypeDefIndex: 703; 0x00B59FE8-0x00B5A39C

	[Serializable]
	[ComVisible] // 0x004B5168-0x004B51B8
	[TypeForwardedFrom] // 0x004B5168-0x004B51B8
	public class SemaphoreFullException : SystemException // TypeDefIndex: 704
	{
		// Constructors
		public SemaphoreFullException(); // 0x00B5AE60-0x00B5AEC0
		protected SemaphoreFullException(SerializationInfo info, StreamingContext context); // 0x00B5AEC0-0x00B5AEC8
	}

	public delegate void SendOrPostCallback(object state); // TypeDefIndex: 705; 0x00B59940-0x00B59CF4

	public class SynchronizationContext // TypeDefIndex: 706
	{
		// Properties
		public static SynchronizationContext Current { get; } // 0x00905544-0x00905588 
		internal static SynchronizationContext CurrentNoFlow { [FriendAccessAllowed] /* 0x004BC1F8-0x004BC208 */ get; } // 0x009055F0-0x00905634 
	
		// Constructors
		public SynchronizationContext(); // 0x00905338-0x00905340
	
		// Methods
		public virtual void Send(SendOrPostCallback d, object state); // 0x00905340-0x00905364
		public virtual void Post(SendOrPostCallback d, object state); // 0x00905364-0x009053DC
		public static void SetSynchronizationContext(SynchronizationContext syncContext); // 0x0090541C-0x00905450
		private static SynchronizationContext GetThreadLocalContext(); // 0x00905590-0x009055F0
		public virtual SynchronizationContext CreateCopy(); // 0x00905634-0x00905690
	}

	internal class OSSpecificSynchronizationContext : SynchronizationContext // TypeDefIndex: 707
	{
		// Fields
		private object m_OSSynchronizationContext; // 0x10
		private static readonly ConditionalWeakTable<object, OSSpecificSynchronizationContext> s_ContextCache; // 0x00
	
		// Nested types
		private delegate void InvocationEntryDelegate(IntPtr arg); // TypeDefIndex: 708; 0x00B59CF4-0x00B59F38
	
		[AttributeUsage] // 0x004B51B8-0x004B51CC
		private sealed class MonoPInvokeCallbackAttribute : Attribute // TypeDefIndex: 709
		{
			// Constructors
			public MonoPInvokeCallbackAttribute(Type t); // 0x00B59FD0-0x00B59FD8
		}
	
		private class InvocationContext // TypeDefIndex: 710
		{
			// Fields
			private SendOrPostCallback m_Delegate; // 0x10
			private object m_State; // 0x18
	
			// Constructors
			public InvocationContext(SendOrPostCallback d, object state); // 0x00B5979C-0x00B597D4
	
			// Methods
			public void Invoke(); // 0x00B597D8-0x00B597FC
		}
	
		[Serializable]
		[CompilerGenerated] // 0x004B51CC-0x004B51DC
		private sealed class __c // TypeDefIndex: 711
		{
			// Fields
			public static readonly __c __9; // 0x00
			public static ConditionalWeakTable<object, OSSpecificSynchronizationContext> __9__3_0; // 0x08
	
			// Constructors
			static __c(); // 0x00B59870-0x00B598D4
			public __c(); // 0x00B598D4-0x00B598DC
	
			// Methods
			internal OSSpecificSynchronizationContext _Get_b__3_0(object _osContext); // 0x00B598DC-0x00B59940
		}
	
		// Constructors
		private OSSpecificSynchronizationContext(object osContext); // 0x00B59408-0x00B59434
		static OSSpecificSynchronizationContext(); // 0x00B597FC-0x00B59870
	
		// Methods
		public static OSSpecificSynchronizationContext Get(); // 0x00B59434-0x00B5958C
		public override SynchronizationContext CreateCopy(); // 0x00B59590-0x00B595F8
		public override void Send(SendOrPostCallback d, object state); // 0x00B595F8-0x00B5965C
		public override void Post(SendOrPostCallback d, object state); // 0x00B5965C-0x00B5978C
		[MonoPInvokeCallback] // 0x004BC208-0x004BC26C
		private static void InvocationEntry(IntPtr arg); // 0x00B59274-0x00B59408
		private static object GetOSContext(); // 0x00B5958C-0x00B59590
		private static void PostInternal(object osSynchronizationContext, IntPtr callback, IntPtr arg); // 0x00B597D4-0x00B597D8
	}

	[Serializable]
	[ComVisible] // 0x004B51DC-0x004B51F0
	public class SynchronizationLockException : SystemException // TypeDefIndex: 712
	{
		// Constructors
		public SynchronizationLockException(); // 0x00905690-0x00905704
		public SynchronizationLockException(string message); // 0x00905704-0x00905738
		protected SynchronizationLockException(SerializationInfo info, StreamingContext context); // 0x00905738-0x00905740
	}

	internal class ThreadHelper // TypeDefIndex: 713
	{
		// Fields
		private Delegate _start; // 0x10
		private object _startArg; // 0x18
		private ExecutionContext _executionContext; // 0x20
		internal static ContextCallback _ccb; // 0x00
	
		// Constructors
		static ThreadHelper(); // 0x009110AC-0x00911128
		internal ThreadHelper(Delegate start); // 0x00910B40-0x00910B6C
	
		// Methods
		internal void SetExecutionContextHelper(ExecutionContext ec); // 0x00911128-0x00911130
		private static void ThreadStart_Context(object state); // 0x00911130-0x00911218
		internal void ThreadStart(object obj); // 0x00911434-0x00911538
		internal void ThreadStart(); // 0x00911538-0x0091162C
	}

	[ClassInterface] // 0x004B51F0-0x004B527C
	[ComDefaultInterface] // 0x004B51F0-0x004B527C
	[ComVisible] // 0x004B51F0-0x004B527C
	public sealed class Thread : CriticalFinalizerObject, _Thread // TypeDefIndex: 714
	{
		// Fields
		private static LocalDataStoreMgr s_LocalDataStoreMgr; // 0x00
		[ThreadStatic] // 0x004B99C8-0x004B99D8
		private static LocalDataStoreHolder s_LocalDataStore; // 0x80000000
		[ThreadStatic] // 0x004B99D8-0x004B99E8
		internal static CultureInfo m_CurrentCulture; // 0x80000008
		[ThreadStatic] // 0x004B99E8-0x004B99F8
		internal static CultureInfo m_CurrentUICulture; // 0x80000010
		private static AsyncLocal<CultureInfo> s_asyncLocalCurrentCulture; // 0x08
		private static AsyncLocal<CultureInfo> s_asyncLocalCurrentUICulture; // 0x10
		private InternalThread internal_thread; // 0x10
		private object m_ThreadStartArg; // 0x18
		private object pending_exception; // 0x20
		private IPrincipal principal; // 0x28
		private int principal_version; // 0x30
		[ThreadStatic] // 0x004B99F8-0x004B9A08
		private static Thread current_thread; // 0x80000018
		private MulticastDelegate m_Delegate; // 0x38
		private ExecutionContext m_ExecutionContext; // 0x40
		private bool m_ExecutionContextBelongsToOuterScope; // 0x48
	
		// Properties
		internal bool ExecutionContextBelongsToCurrentScope { get; set; } // 0x00910A34-0x00910A44 0x00910A44-0x00910A54
		public CultureInfo CurrentUICulture { get; } // 0x00910BC4-0x00910BC8 
		public CultureInfo CurrentCulture { get; } // 0x00910C80-0x00910C84 
		private InternalThread Internal { get; } // 0x00910D44-0x00910D74 
		public static Context CurrentContext { get; } // 0x00910D74-0x00910D7C 
		public static Thread CurrentThread { [ReliabilityContract] /* 0x004BC2FC-0x004BC314 */ get; } // 0x00905450-0x009054A8 
		internal static int CurrentThreadId { get; } // 0x00910D80-0x00910DB0 
		public bool IsThreadPoolThread { get; } // 0x0090FE40-0x0090FE44 
		internal bool IsThreadPoolThreadInternal { get; } // 0x00910DC0-0x00910E00 
		public bool IsBackground { set; } // 0x009102E0-0x00910334
		public string Name { set; } // 0x00910EA4-0x00910EDC
		public ThreadState ThreadState { get; } // 0x0090C560-0x0090C590 
		public int ManagedThreadId { [ReliabilityContract] /* 0x004BC344-0x004BC35C */ get; } // 0x00910EE8-0x00910F28 
	
		// Constructors
		public Thread(ThreadStart start); // 0x009106C4-0x0091076C
		public Thread(ParameterizedThreadStart start); // 0x00910238-0x009102E0
	
		// Methods
		public void Start(); // 0x0091086C-0x00910894
		public void Start(object parameter); // 0x00910334-0x00910410
		private void Start(ref StackCrawlMark stackMark); // 0x00910894-0x00910994
		[ReliabilityContract] // 0x004BC26C-0x004BC284
		internal ExecutionContext.Reader GetExecutionContextReader(); // 0x00905588-0x00905590
		[ReliabilityContract] // 0x004BC284-0x004BC29C
		internal ExecutionContext GetMutableExecutionContext(); // 0x009054A8-0x00905544
		[ReliabilityContract] // 0x004BC29C-0x004BC2B4
		internal void SetExecutionContext(ExecutionContext value, bool belongsToCurrentScope); // 0x00910A54-0x00910A68
		[ReliabilityContract] // 0x004BC2B4-0x004BC2CC
		internal void SetExecutionContext(ExecutionContext.Reader value, bool belongsToCurrentScope); // 0x00910A68-0x00910A7C
		private static void SleepInternal(int millisecondsTimeout); // 0x00910A7C-0x00910A80
		public static void Sleep(int millisecondsTimeout); // 0x00905254-0x00905300
		[ReliabilityContract] // 0x004BC2CC-0x004BC2E4
		private static bool YieldInternal(); // 0x00910A80-0x00910A84
		[ReliabilityContract] // 0x004BC2E4-0x004BC2FC
		public static bool Yield(); // 0x00905300-0x00905304
		private void SetStartHelper(Delegate start, int maxStackSize); // 0x0091076C-0x0091086C
		internal CultureInfo GetCurrentUICultureNoAppX(); // 0x00910BC8-0x00910C80
		private CultureInfo GetCurrentCultureNoAppX(); // 0x00910C84-0x00910D3C
		public static void MemoryBarrier(); // 0x00910D3C-0x00910D40
		private void ConstructInternalThread(); // 0x00910D40-0x00910D44
		private static Thread GetCurrentThread(); // 0x00910D7C-0x00910D80
		public static int GetDomainID(); // 0x00910DB0-0x00910DB4
		private IntPtr Thread_internal(MulticastDelegate start); // 0x00910DB4-0x00910DB8
		[ReliabilityContract] // 0x004BC314-0x004BC32C
		~Thread(); // 0x00910DB8-0x00910DC0
		private static void SetName_internal(InternalThread thread, string name); // 0x00910EA0-0x00910EA4
		private static void SpinWait_nop(); // 0x00910EE0-0x00910EE4
		[ReliabilityContract] // 0x004BC32C-0x004BC344
		public static void SpinWait(int iterations); // 0x00905304-0x00905338
		private void StartInternal(IPrincipal principal, ref StackCrawlMark stackMark); // 0x00910994-0x00910A34
		private static void SetState(InternalThread thread, ThreadState set); // 0x00910E98-0x00910E9C
		private static void ClrState(InternalThread thread, ThreadState clr); // 0x00910E9C-0x00910EA0
		private static ThreadState GetState(InternalThread thread); // 0x00910EDC-0x00910EE0
		private static int SystemMaxStackStize(); // 0x00910EE4-0x00910EE8
		private static int GetProcessDefaultStackSize(int maxStackSize); // 0x00910A84-0x00910B40
		private void SetStart(MulticastDelegate start, int maxStackSize); // 0x00910B7C-0x00910BC4
		[ReliabilityContract] // 0x004BC35C-0x004BC374
		public static void BeginCriticalRegion(); // 0x00910F28-0x00910F84
		[ReliabilityContract] // 0x004BC374-0x004BC38C
		public static void EndCriticalRegion(); // 0x00910F84-0x00910FE0
		[ComVisible] // 0x004BC38C-0x004BC3A0
		public override int GetHashCode(); // 0x00910FE0-0x00910FE4
		private ThreadState ValidateThreadState(); // 0x00910E00-0x00910E98
	}

	[Serializable]
	internal enum StackCrawlMark // TypeDefIndex: 715
	{
		LookForMe = 0,
		LookForMyCaller = 1,
		LookForMyCallersCaller = 2,
		LookForThread = 3
	}

	[Serializable]
	[ComVisible] // 0x004B527C-0x004B5290
	public sealed class ThreadAbortException : SystemException // TypeDefIndex: 716
	{
		// Constructors
		private ThreadAbortException(); // 0x00911018-0x009110A4
		internal ThreadAbortException(SerializationInfo info, StreamingContext context); // 0x009110A4-0x009110AC
	}

	[Serializable]
	[ComVisible] // 0x004B5290-0x004B52A4
	public class ThreadInterruptedException : SystemException // TypeDefIndex: 717
	{
		// Constructors
		public ThreadInterruptedException(); // 0x0091162C-0x009116B8
		protected ThreadInterruptedException(SerializationInfo info, StreamingContext context); // 0x009116B8-0x009116C0
	}

	internal interface IThreadPoolWorkItem // TypeDefIndex: 718
	{
		// Methods
		void ExecuteWorkItem();
		void MarkAborted(ThreadAbortException tae);
	}

	[ComVisible] // 0x004B52A4-0x004B52B8
	public delegate void WaitCallback(object state); // TypeDefIndex: 719; 0x00915500-0x009158B4

	[ComVisible] // 0x004B52B8-0x004B52CC
	public delegate void WaitOrTimerCallback(object state, bool timedOut); // TypeDefIndex: 720; 0x00916A94-0x00916E74

	internal static class ThreadPoolGlobals // TypeDefIndex: 721
	{
		// Fields
		public static uint tpQuantum; // 0x00
		public static int processorCount; // 0x04
		public static bool tpHosted; // 0x08
		public static bool vmTpInitialized; // 0x09
		public static bool enableWorkerTracking; // 0x0A
		public static ThreadPoolWorkQueue workQueue; // 0x10
	
		// Constructors
		static ThreadPoolGlobals(); // 0x00911E94-0x00911F34
	}

	internal sealed class ThreadPoolWorkQueue // TypeDefIndex: 722
	{
		// Fields
		internal QueueSegment queueHead; // 0x10
		internal QueueSegment queueTail; // 0x18
		internal static SparseArray<WorkStealingQueue> allThreadQueues; // 0x00
		private int numOutstandingThreadRequests; // 0x20
	
		// Nested types
		internal class SparseArray<T> // TypeDefIndex: 723
			where T : class
		{
			// Fields
			private T[] m_array;
	
			// Properties
			internal T[] Current { get; }
	
			// Constructors
			internal SparseArray(int initialSize);
	
			// Methods
			internal int Add(T e);
			internal void Remove(T e);
		}
	
		internal class WorkStealingQueue // TypeDefIndex: 724
		{
			// Fields
			internal IThreadPoolWorkItem[] m_array; // 0x10
			private int m_mask; // 0x18
			private int m_headIndex; // 0x1C
			private int m_tailIndex; // 0x20
			private SpinLock m_foreignLock; // 0x24
	
			// Constructors
			public WorkStealingQueue(); // 0x00913A10-0x00913AAC
	
			// Methods
			public void LocalPush(IThreadPoolWorkItem obj); // 0x00912294-0x00912710
			public bool LocalFindAndPop(IThreadPoolWorkItem obj); // 0x009127E0-0x00912ABC
			public bool LocalPop(out IThreadPoolWorkItem obj); // 0x00912C98-0x00912F60
			public bool TrySteal(out IThreadPoolWorkItem obj, ref bool missedSteal); // 0x009130B4-0x009130BC
			private bool TrySteal(out IThreadPoolWorkItem obj, ref bool missedSteal, int millisecondsTimeout); // 0x00913774-0x00913A10
		}
	
		internal class QueueSegment // TypeDefIndex: 725
		{
			// Fields
			internal readonly IThreadPoolWorkItem[] nodes; // 0x10
			private int indexes; // 0x18
			public QueueSegment Next; // 0x20
	
			// Constructors
			[ReliabilityContract] // 0x004BC3A0-0x004BC3B8
			public QueueSegment(); // 0x00911FA8-0x0091200C
	
			// Methods
			private void GetIndexes(out int upper, out int lower); // 0x009136BC-0x009136FC
			private bool CompareExchangeIndexes(ref int prevUpper, int newUpper, ref int prevLower, int newLower); // 0x009136FC-0x00913774
			public bool IsUsedUp(); // 0x00913060-0x009130B4
			public bool TryEnqueue(IThreadPoolWorkItem node); // 0x00912710-0x009127E0
			public bool TryDequeue(out IThreadPoolWorkItem node); // 0x00912F60-0x00913060
		}
	
		// Constructors
		public ThreadPoolWorkQueue(); // 0x00911F34-0x00911FA8
		static ThreadPoolWorkQueue(); // 0x00913644-0x009136BC
	
		// Methods
		public ThreadPoolWorkQueueThreadLocals EnsureCurrentThreadHasQueue(); // 0x0091200C-0x00912098
		internal void EnsureThreadRequested(); // 0x0091218C-0x00912244
		internal void MarkThreadRequestSatisfied(); // 0x00912244-0x00912294
		public void Enqueue(IThreadPoolWorkItem callback, bool forceGlobal); // 0x00911CD4-0x00911E00
		internal bool LocalFindAndPop(IThreadPoolWorkItem callback); // 0x00911E00-0x00911E78
		public void Dequeue(ThreadPoolWorkQueueThreadLocals tl, out IThreadPoolWorkItem callback, out bool missedSteal); // 0x00912ABC-0x00912C98
		internal static bool Dispatch(); // 0x009130BC-0x00913644
	}

	internal sealed class ThreadPoolWorkQueueThreadLocals // TypeDefIndex: 726
	{
		// Fields
		[ThreadStatic] // 0x004B9A08-0x004B9A18
		public static ThreadPoolWorkQueueThreadLocals threadLocals; // 0x80000000
		public readonly ThreadPoolWorkQueue workQueue; // 0x10
		public readonly ThreadPoolWorkQueue.WorkStealingQueue workStealingQueue; // 0x18
		public readonly System.Random random; // 0x20
	
		// Constructors
		public ThreadPoolWorkQueueThreadLocals(ThreadPoolWorkQueue tpq); // 0x00912098-0x0091218C
	
		// Methods
		private void CleanUp(); // 0x00913AAC-0x00913B84
		~ThreadPoolWorkQueueThreadLocals(); // 0x00913B84-0x00913C20
	}

	internal static class _ThreadPoolWaitCallback // TypeDefIndex: 727
	{
		// Methods
		internal static bool PerformWaitCallback(); // 0x00916F20-0x00916F7C
	}

	internal sealed class QueueUserWorkItemCallback : IThreadPoolWorkItem // TypeDefIndex: 728
	{
		// Fields
		private WaitCallback callback; // 0x10
		private ExecutionContext context; // 0x18
		private object state; // 0x20
		internal static ContextCallback ccb; // 0x00
	
		// Constructors
		static QueueUserWorkItemCallback(); // 0x00B5A3CC-0x00B5A444
		internal QueueUserWorkItemCallback(WaitCallback waitCallback, object stateObj, bool compressStack, ref StackCrawlMark stackMark); // 0x00B5A444-0x00B5A504
	
		// Methods
		void IThreadPoolWorkItem.ExecuteWorkItem(); // 0x00B5A504-0x00B5A5DC
		void IThreadPoolWorkItem.MarkAborted(ThreadAbortException tae); // 0x00B5A5DC-0x00B5A5E0
		private static void WaitCallback_Context(object state); // 0x00B5A5E0-0x00B5A660
	}

	public static class ThreadPool // TypeDefIndex: 729
	{
		// Methods
		private static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce, ref StackCrawlMark stackMark, bool compressStack); // 0x009116C0-0x0091197C
		public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce); // 0x009119AC-0x00911B14
		public static bool QueueUserWorkItem(WaitCallback callBack, object state); // 0x009053EC-0x0090541C
		public static bool UnsafeQueueUserWorkItem(WaitCallback callBack, object state); // 0x0091197C-0x009119AC
		private static bool QueueUserWorkItemHelper(WaitCallback callBack, object state, ref StackCrawlMark stackMark, bool compressStack); // 0x00911B14-0x00911C28
		internal static void UnsafeQueueCustomWorkItem(IThreadPoolWorkItem workItem, bool forceGlobal); // 0x00905F14-0x00905FA0
		internal static bool TryPopCustomWorkItem(IThreadPoolWorkItem workItem); // 0x009104D8-0x0091059C
		internal static bool RequestWorkerThread(); // 0x00911E78-0x00911E7C
		private static void EnsureVMInitialized(); // 0x00911C28-0x00911CD4
		internal static bool NotifyWorkItemComplete(); // 0x00911E80-0x00911E84
		internal static void ReportThreadStatus(bool isWorking); // 0x00911E84-0x00911E8C
		internal static void NotifyWorkItemProgress(); // 0x009105A8-0x00910640
		internal static void NotifyWorkItemProgressNative(); // 0x00911E8C-0x00911E90
		internal static bool IsThreadPoolHosted(); // 0x00911E90-0x00911E94
		private static void InitializeVMTp(ref bool enableWorkerTracking); // 0x00911E7C-0x00911E80
	}

	[ComVisible] // 0x004B52CC-0x004B52E0
	public delegate void ThreadStart(); // TypeDefIndex: 730; 0x00911218-0x00911434

	[Serializable]
	[ComVisible] // 0x004B52E0-0x004B531C
	[Flags] // 0x004B52E0-0x004B531C
	public enum ThreadState // TypeDefIndex: 731
	{
		Running = 0,
		StopRequested = 1,
		SuspendRequested = 2,
		Background = 4,
		Unstarted = 8,
		Stopped = 16,
		WaitSleepJoin = 32,
		Suspended = 64,
		AbortRequested = 128,
		Aborted = 256
	}

	[Serializable]
	[ComVisible] // 0x004B531C-0x004B5330
	public class ThreadStateException : SystemException // TypeDefIndex: 732
	{
		// Constructors
		public ThreadStateException(); // 0x00913C60-0x00913CD4
		public ThreadStateException(string message); // 0x00910FE4-0x00911018
		protected ThreadStateException(SerializationInfo info, StreamingContext context); // 0x00913CD4-0x00913CDC
	}

	[ComVisible] // 0x004B5330-0x004B5344
	public static class Timeout // TypeDefIndex: 733
	{
		// Fields
		[ComVisible] // 0x004B9A18-0x004B9A2C
		public static readonly TimeSpan InfiniteTimeSpan; // 0x00
	
		// Constructors
		static Timeout(); // 0x00913CDC-0x00913D54
	}

	[ComVisible] // 0x004B5344-0x004B5358
	public abstract class WaitHandle : MarshalByRefObject, IDisposable // TypeDefIndex: 734
	{
		// Fields
		public const int WaitTimeout = 258; // Metadata: 0x001E0E26
		private const int MAX_WAITHANDLES = 64; // Metadata: 0x001E0E2A
		private IntPtr waitHandle; // 0x18
		internal SafeWaitHandle safeWaitHandle; // 0x20
		internal bool hasThreadAffinity; // 0x28
		private const int WAIT_OBJECT_0 = 0; // Metadata: 0x001E0E2E
		private const int WAIT_ABANDONED = 128; // Metadata: 0x001E0E32
		private const int WAIT_FAILED = 2147483647; // Metadata: 0x001E0E36
		private const int ERROR_TOO_MANY_POSTS = 298; // Metadata: 0x001E0E3A
		protected static readonly IntPtr InvalidHandle; // 0x00
		internal const int MaxWaitHandles = 64; // Metadata: 0x001E0E3E
	
		// Properties
		[Obsolete] // 0x004BD668-0x004BD6A0
		public virtual IntPtr Handle { set; } // 0x00915988-0x00915A78
		public SafeWaitHandle SafeWaitHandle { [ReliabilityContract] /* 0x004BC3B8-0x004BC3D0 */ get; } // 0x00915A78-0x00915B34 
	
		// Constructors
		protected WaitHandle(); // 0x009158E4-0x0091590C
		static WaitHandle(); // 0x00916978-0x009169D4
	
		// Methods
		private void Init(); // 0x0091590C-0x00915988
		internal void SetHandleInternal(SafeWaitHandle handle); // 0x00915B34-0x00915B70
		public virtual bool WaitOne(int millisecondsTimeout, bool exitContext); // 0x00915B70-0x00915C34
		public virtual bool WaitOne(TimeSpan timeout, bool exitContext); // 0x00915CC4-0x00915DCC
		public virtual bool WaitOne(); // 0x00915DCC-0x00915DE0
		public virtual bool WaitOne(int millisecondsTimeout); // 0x00915DE0-0x00915DF0
		public virtual bool WaitOne(TimeSpan timeout); // 0x00915DF0-0x00915E00
		private bool WaitOne(long timeout, bool exitContext); // 0x00915C34-0x00915CC4
		internal static bool InternalWaitOne(SafeHandle waitableSafeHandle, long millisecondsTimeout, bool hasThreadAffinity, bool exitContext); // 0x00915E00-0x00915F18
		[ReliabilityContract] // 0x004BC3D0-0x004BC3E8
		public static int WaitAny(WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext); // 0x009160A4-0x009163B0
		[ReliabilityContract] // 0x004BC3E8-0x004BC400
		public static int WaitAny(WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext); // 0x009166F4-0x00916820
		private static void ThrowAbandonedMutexException(); // 0x00916040-0x009160A4
		private static void ThrowAbandonedMutexException(int location, WaitHandle handle); // 0x0091667C-0x009166F4
		public virtual void Close(); // 0x00916820-0x009168A0
		protected virtual void Dispose(bool explicitDisposing); // 0x009168A0-0x009168F0
		public void Dispose(); // 0x009168F0-0x00916970
		private static int WaitMultiple(WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext, bool WaitAll); // 0x009163B0-0x0091667C
		private static int WaitOneNative(SafeHandle waitableSafeHandle, uint millisecondsTimeout, bool hasThreadAffinity, bool exitContext); // 0x00915F18-0x00916040
		private static unsafe int Wait_internal(IntPtr* handles, int numHandles, bool waitAll, int ms); // 0x00916970-0x00916978
	}

	[Serializable]
	[ComVisible] // 0x004B5358-0x004B536C
	public class WaitHandleCannotBeOpenedException : ApplicationException // TypeDefIndex: 735
	{
		// Constructors
		public WaitHandleCannotBeOpenedException(); // 0x009169D4-0x00916A48
		public WaitHandleCannotBeOpenedException(string message); // 0x00916A48-0x00916A7C
		protected WaitHandleCannotBeOpenedException(SerializationInfo info, StreamingContext context); // 0x00916A7C-0x00916A84
	}

	public static class Interlocked // TypeDefIndex: 736
	{
		// Methods
		[ReliabilityContract] // 0x004BC400-0x004BC418
		public static int CompareExchange(ref int location1, int value, int comparand); // 0x00B54E90-0x00B54E94
		[ReliabilityContract] // 0x004BC418-0x004BC430
		internal static int CompareExchange(ref int location1, int value, int comparand, ref bool succeeded); // 0x00B5792C-0x00B57930
		[ReliabilityContract] // 0x004BC430-0x004BC448
		public static object CompareExchange(ref object location1, object value, object comparand); // 0x00B57930-0x00B57934
		public static float CompareExchange(ref float location1, float value, float comparand); // 0x00B57934-0x00B57938
		[ReliabilityContract] // 0x004BC448-0x004BC460
		public static int Decrement(ref int location); // 0x00B57938-0x00B5793C
		[ReliabilityContract] // 0x004BC460-0x004BC478
		public static int Increment(ref int location); // 0x00B5793C-0x00B57940
		[ReliabilityContract] // 0x004BC478-0x004BC490
		public static long Increment(ref long location); // 0x00B57940-0x00B57944
		[ReliabilityContract] // 0x004BC490-0x004BC4A8
		public static int Exchange(ref int location1, int value); // 0x00B553EC-0x00B553F0
		[ReliabilityContract] // 0x004BC4A8-0x004BC4C0
		public static object Exchange(ref object location1, object value); // 0x00B57944-0x00B57948
		public static float Exchange(ref float location1, float value); // 0x00B57948-0x00B5794C
		public static long CompareExchange(ref long location1, long value, long comparand); // 0x00B5794C-0x00B57950
		[ReliabilityContract] // 0x004BC4C0-0x004BC4D8
		public static IntPtr CompareExchange(ref IntPtr location1, IntPtr value, IntPtr comparand); // 0x00B57950-0x00B57954
		public static double CompareExchange(ref double location1, double value, double comparand); // 0x00B57954-0x00B57958
		[ComVisible] // 0x004BC4D8-0x004BC51C
		[ReliabilityContract] // 0x004BC4D8-0x004BC51C
		public static T CompareExchange<T>(ref T location1, T value, T comparand)
			where T : class;
		public static long Exchange(ref long location1, long value); // 0x00B57958-0x00B5795C
		[ReliabilityContract] // 0x004BC51C-0x004BC534
		public static IntPtr Exchange(ref IntPtr location1, IntPtr value); // 0x00B5795C-0x00B57960
		public static double Exchange(ref double location1, double value); // 0x00B57960-0x00B57964
		[ComVisible] // 0x004BC534-0x004BC578
		[ReliabilityContract] // 0x004BC534-0x004BC578
		public static T Exchange<T>(ref T location1, T value)
			where T : class;
		public static long Read(ref long location); // 0x00B57964-0x00B57968
		[ReliabilityContract] // 0x004BC578-0x004BC590
		public static int Add(ref int location1, int value); // 0x00B57968-0x00B5796C
	}

	[ComVisible] // 0x004B536C-0x004B5380
	public sealed class Mutex : WaitHandle // TypeDefIndex: 737
	{
	}

	internal static class NativeEventCalls // TypeDefIndex: 738
	{
		// Methods
		public static IntPtr CreateEvent_internal(bool manual, bool initial, string name, out int errorCode); // 0x00B56010-0x00B5601C
		public static bool SetEvent(SafeWaitHandle handle); // 0x00B5616C-0x00B56230
		private static bool SetEvent_internal(IntPtr handle); // 0x00B59268-0x00B5926C
		public static bool ResetEvent(SafeWaitHandle handle); // 0x00B560A8-0x00B5616C
		private static bool ResetEvent_internal(IntPtr handle); // 0x00B5926C-0x00B59270
		public static void CloseEvent_internal(IntPtr handle); // 0x00B59270-0x00B59274
	}

	[ComVisible] // 0x004B5380-0x004B5394
	public struct NativeOverlapped // TypeDefIndex: 739
	{
		// Fields
		public IntPtr InternalLow; // 0x00
		public IntPtr InternalHigh; // 0x08
		public int OffsetLow; // 0x10
		public int OffsetHigh; // 0x14
		public IntPtr EventHandle; // 0x18
	}

	[ComVisible] // 0x004B5394-0x004B53A8
	public sealed class RegisteredWaitHandle : MarshalByRefObject // TypeDefIndex: 740
	{
		// Fields
		private WaitHandle _waitObject; // 0x18
		private WaitOrTimerCallback _callback; // 0x20
		private object _state; // 0x28
		private WaitHandle _finalEvent; // 0x30
		private ManualResetEvent _cancelEvent; // 0x38
		private TimeSpan _timeout; // 0x40
		private int _callsInProcess; // 0x48
		private bool _executeOnlyOnce; // 0x4C
		private bool _unregistered; // 0x4D
	
		// Constructors
		internal RegisteredWaitHandle(WaitHandle waitObject, WaitOrTimerCallback callback, object state, TimeSpan timeout, bool executeOnlyOnce); // 0x00B5A660-0x00B5A71C
	
		// Methods
		internal void Wait(object state); // 0x00B5A71C-0x00B5ACA8
		private void DoCallBack(object timedOut); // 0x00B5ACA8-0x00B5AE60
	}

	internal sealed class InternalThread : CriticalFinalizerObject // TypeDefIndex: 741
	{
		// Fields
		private int lock_thread_id; // 0x10
		private IntPtr handle; // 0x18
		private IntPtr native_handle; // 0x20
		private IntPtr unused3; // 0x28
		private IntPtr name; // 0x30
		private int name_len; // 0x38
		private ThreadState state; // 0x3C
		private object abort_exc; // 0x40
		private int abort_state_handle; // 0x48
		internal long thread_id; // 0x50
		private IntPtr debugger_thread; // 0x58
		private UIntPtr static_data; // 0x60
		private IntPtr runtime_thread_info; // 0x68
		private object current_appcontext; // 0x70
		private object root_domain_thread; // 0x78
		internal byte[] _serialized_principal; // 0x80
		internal int _serialized_principal_version; // 0x88
		private IntPtr appdomain_refs; // 0x90
		private int interruption_requested; // 0x98
		private IntPtr synch_cs; // 0xA0
		internal bool threadpool_thread; // 0xA8
		private bool thread_interrupt_requested; // 0xA9
		internal int stack_size; // 0xAC
		internal byte apartment_state; // 0xB0
		internal int critical_region_level; // 0xB4
		internal int managed_id; // 0xB8
		private int small_id; // 0xBC
		private IntPtr manage_callback; // 0xC0
		private IntPtr unused4; // 0xC8
		private IntPtr flags; // 0xD0
		private IntPtr thread_pinning_ref; // 0xD8
		private IntPtr abort_protected_block_count; // 0xE0
		private int priority; // 0xE8
		private IntPtr owned_mutex; // 0xF0
		private IntPtr suspended_event; // 0xF8
		private int self_suspended; // 0x100
		private IntPtr unused1; // 0x108
		private IntPtr unused2; // 0x110
		private IntPtr last; // 0x118
	
		// Constructors
		public InternalThread(); // 0x00B579DC-0x00B579EC
	
		// Methods
		private void Thread_free_internal(); // 0x00B5796C-0x00B57970
		[ReliabilityContract] // 0x004BC590-0x004BC5A8
		~InternalThread(); // 0x00B57970-0x00B579DC
	}

	[ComVisible] // 0x004B53A8-0x004B53BC
	public sealed class Timer : MarshalByRefObject, IDisposable // TypeDefIndex: 742
	{
		// Fields
		private static readonly Scheduler scheduler; // 0x00
		private TimerCallback callback; // 0x18
		private object state; // 0x20
		private long due_time_ms; // 0x28
		private long period_ms; // 0x30
		private long next_run; // 0x38
		private bool disposed; // 0x40
	
		// Nested types
		private sealed class TimerComparer : IComparer // TypeDefIndex: 743
		{
			// Constructors
			public TimerComparer(); // 0x00914698-0x009146A0
	
			// Methods
			public int Compare(object x, object y); // 0x009153E4-0x009154AC
		}
	
		private sealed class Scheduler // TypeDefIndex: 744
		{
			// Fields
			private static Scheduler instance; // 0x00
			private SortedList list; // 0x10
			private ManualResetEvent changed; // 0x18
	
			// Properties
			public static Scheduler Instance { get; } // 0x00914630-0x00914698 
	
			// Constructors
			static Scheduler(); // 0x009144B0-0x00914510
			private Scheduler(); // 0x00914510-0x00914630
	
			// Methods
			public void Remove(Timer timer); // 0x0091419C-0x00914264
			public void Change(Timer timer, long new_next_run); // 0x00914268-0x009143F8
			private int FindByDueTime(long nr); // 0x0091483C-0x00914998
			private void Add(Timer timer); // 0x00914700-0x0091483C
			private int InternalRemove(Timer timer); // 0x009146A0-0x00914700
			private static void TimerCB(object o); // 0x00914998-0x00914A14
			private void SchedulerThread(); // 0x00914DC8-0x00915334
			private void ShrinkIfNeeded(List<Timer> list, int initial); // 0x00915334-0x009153E4
		}
	
		// Constructors
		public Timer(TimerCallback callback, object state, int dueTime, int period); // 0x0090D434-0x0090D48C
		public Timer(TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period); // 0x00913E54-0x00913EFC
		static Timer(); // 0x009143F8-0x009144B0
	
		// Methods
		private void Init(TimerCallback callback, object state, long dueTime, long period); // 0x00913D9C-0x00913E54
		public bool Change(TimeSpan dueTime, TimeSpan period); // 0x00914128-0x0091419C
		public void Dispose(); // 0x0090E1BC-0x0090E250
		private bool Change(long dueTime, long period, bool first); // 0x00913EFC-0x00914128
		internal void KeepRootedWhileScheduled(); // 0x0090D48C-0x0090D490
		private static long GetTimeMonotonic(); // 0x00914264-0x00914268
	}

	[ComVisible] // 0x004B53BC-0x004B53D0
	public delegate void TimerCallback(object state); // TypeDefIndex: 745; 0x00914A14-0x00914DC8

	public static class Volatile // TypeDefIndex: 746
	{
		// Methods
		[ReliabilityContract] // 0x004BC5A8-0x004BC5C0
		public static bool Read(ref bool location); // 0x009154DC-0x00915500
		[ReliabilityContract] // 0x004BC5C0-0x004BC5D8
		public static T Read<T>(ref T location)
			where T : class;
		[ReliabilityContract] // 0x004BC5D8-0x004BC5F0
		public static void Write<T>(ref T location, T value)
			where T : class;
	}
}

namespace System.Threading.Tasks
{
	[FriendAccessAllowed] // 0x004B53D0-0x004B53E0
	internal enum CausalityTraceLevel // TypeDefIndex: 747
	{
		Required = 0,
		Important = 1,
		Verbose = 2
	}

	[FriendAccessAllowed] // 0x004B53E0-0x004B53F0
	internal enum AsyncCausalityStatus // TypeDefIndex: 748
	{
		Started = 0,
		Completed = 1,
		Canceled = 2,
		Error = 3
	}

	internal enum CausalityRelation // TypeDefIndex: 749
	{
		AssignDelegate = 0,
		Join = 1,
		Choice = 2,
		Cancel = 3,
		Error = 4
	}

	internal enum CausalitySynchronousWork // TypeDefIndex: 750
	{
		CompletionNotification = 0,
		ProgressNotification = 1,
		Execution = 2
	}

	[FriendAccessAllowed] // 0x004B53F0-0x004B5400
	internal static class AsyncCausalityTracer // TypeDefIndex: 751
	{
		// Properties
		[FriendAccessAllowed] // 0x004BD6A0-0x004BD6B0
		internal static bool LoggingOn { [FriendAccessAllowed] /* 0x004BC5F0-0x004BC600 */ get; } // 0x00905740-0x00905748 
	
		// Methods
		[FriendAccessAllowed] // 0x004BC600-0x004BC610
		internal static void TraceOperationCreation(CausalityTraceLevel traceLevel, int taskId, string operationName, ulong relatedContext); // 0x00905748-0x0090574C
		[FriendAccessAllowed] // 0x004BC610-0x004BC620
		internal static void TraceOperationCompletion(CausalityTraceLevel traceLevel, int taskId, AsyncCausalityStatus status); // 0x0090574C-0x00905750
		internal static void TraceOperationRelation(CausalityTraceLevel traceLevel, int taskId, CausalityRelation relation); // 0x00905750-0x00905754
		internal static void TraceSynchronousWorkStart(CausalityTraceLevel traceLevel, int taskId, CausalitySynchronousWork work); // 0x00905754-0x00905758
		internal static void TraceSynchronousWorkCompletion(CausalityTraceLevel traceLevel, CausalitySynchronousWork work); // 0x00905758-0x0090575C
	}

	[DebuggerDisplay] // 0x004B5400-0x004B5488
	[DebuggerTypeProxy] // 0x004B5400-0x004B5488
	public class Task<TResult> : System.Threading.Tasks.Task // TypeDefIndex: 752
	{
		// Fields
		internal TResult m_result;
		private static readonly TaskFactory<TResult> s_Factory;
		internal static readonly Func<Task<System.Threading.Tasks.Task>, Task<TResult>> TaskWhenAnyCast;
	
		// Properties
		[DebuggerBrowsable] // 0x004BD6B0-0x004BD6C4
		public TResult Result { get; }
		internal TResult ResultOnSuccess { get; }
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x004B5488-0x004B5498
		private sealed class __c // TypeDefIndex: 753
		{
			// Fields
			public static readonly __c<TResult> __9;
	
			// Constructors
			static __c();
			public __c();
	
			// Methods
			internal Task<TResult> _.cctor_b__64_0(Task<System.Threading.Tasks.Task> completed);
		}
	
		// Constructors
		internal Task();
		internal Task(TResult result);
		internal Task(bool canceled, TResult result, TaskCreationOptions creationOptions, CancellationToken ct);
		public Task(Func<object, TResult> function, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions);
		internal Task(Delegate valueSelector, object state, System.Threading.Tasks.Task parent, CancellationToken cancellationToken, TaskCreationOptions creationOptions, InternalTaskOptions internalOptions, TaskScheduler scheduler);
		static Task();
	
		// Methods
		internal bool TrySetResult(TResult result);
		internal TResult GetResultCore(bool waitCompletionNotification);
		internal bool TrySetException(object exceptionObject);
		internal bool TrySetCanceled(CancellationToken tokenToRecord);
		internal bool TrySetCanceled(CancellationToken tokenToRecord, object cancellationException);
		internal override void InnerInvoke();
		public TaskAwaiter<TResult> GetAwaiter();
		public ConfiguredTaskAwaitable<TResult> ConfigureAwait(bool continueOnCapturedContext);
	}

	internal class SystemThreadingTasks_FutureDebugView<TResult> // TypeDefIndex: 754
	{
	}

	public class TaskFactory<TResult> // TypeDefIndex: 755
	{
		// Fields
		private CancellationToken m_defaultCancellationToken;
		private TaskScheduler m_defaultScheduler;
		private TaskCreationOptions m_defaultCreationOptions;
		private TaskContinuationOptions m_defaultContinuationOptions;
	
		// Constructors
		public TaskFactory();
		public TaskFactory(CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions, TaskScheduler scheduler);
	}

	internal class Shared<T> // TypeDefIndex: 756
	{
		// Fields
		internal T Value;
	
		// Constructors
		internal Shared(T value);
	}

	public enum TaskStatus // TypeDefIndex: 757
	{
		Created = 0,
		WaitingForActivation = 1,
		WaitingToRun = 2,
		Running = 3,
		WaitingForChildrenToComplete = 4,
		RanToCompletion = 5,
		Canceled = 6,
		Faulted = 7
	}

	[DebuggerDisplay] // 0x004B5498-0x004B5520
	[DebuggerTypeProxy] // 0x004B5498-0x004B5520
	public class Task : IThreadPoolWorkItem, IAsyncResult, IDisposable // TypeDefIndex: 758
	{
		// Fields
		[ThreadStatic] // 0x004B9A2C-0x004B9A3C
		internal static Task t_currentTask; // 0x80000000
		[ThreadStatic] // 0x004B9A3C-0x004B9A4C
		private static StackGuard t_stackGuard; // 0x80000008
		internal static int s_taskIdCounter; // 0x00
		private static readonly TaskFactory s_factory; // 0x08
		private int m_taskId; // 0x10
		internal object m_action; // 0x18
		internal object m_stateObject; // 0x20
		internal TaskScheduler m_taskScheduler; // 0x28
		internal readonly Task m_parent; // 0x30
		internal int m_stateFlags; // 0x38
		private object m_continuationObject; // 0x40
		private static readonly object s_taskCompletionSentinel; // 0x10
		[FriendAccessAllowed] // 0x004B9A4C-0x004B9A5C
		internal static bool s_asyncDebuggingEnabled; // 0x18
		private static readonly Dictionary<int, Task> s_currentActiveTasks; // 0x20
		private static readonly object s_activeTasksLock; // 0x28
		internal ContingentProperties m_contingentProperties; // 0x48
		private static readonly Action<object> s_taskCancelCallback; // 0x30
		private static readonly Func<ContingentProperties> s_createContingentProperties; // 0x38
		private static Task s_completedTask; // 0x40
		private static readonly Predicate<Task> s_IsExceptionObservedByParentPredicate; // 0x48
		private static ContextCallback s_ecCallback; // 0x50
		private static readonly Predicate<object> s_IsTaskContinuationNullPredicate; // 0x58
	
		// Properties
		internal TaskCreationOptions Options { get; } // 0x0090836C-0x009083D8 
		internal bool IsWaitNotificationEnabledOrNotRanToCompletion { get; } // 0x00908954-0x00908988 
		internal virtual bool ShouldNotifyDebuggerOfWaitCompletion { get; } // 0x00908988-0x009089AC 
		internal bool IsWaitNotificationEnabled { get; } // 0x00908904-0x00908928 
		public int Id { get; } // 0x00906C94-0x00906D2C 
		internal static Task InternalCurrent { get; } // 0x00908A54-0x00908ABC 
		internal static StackGuard CurrentStackGuard { get; } // 0x00908ABC-0x00908B6C 
		public AggregateException Exception { get; } // 0x00908B6C-0x00908BAC 
		public TaskStatus Status { get; } // 0x00908D1C-0x00908D88 
		public bool IsCanceled { get; } // 0x00907040-0x0090706C 
		internal bool IsCancellationRequested { get; } // 0x00908D88-0x00908DDC 
		internal CancellationToken CancellationToken { get; } // 0x00908EB4-0x00908EE4 
		internal bool IsCancellationAcknowledged { get; } // 0x00908EE4-0x00908F08 
		public bool IsCompleted { get; } // 0x00908F08-0x00908F7C 
		internal bool IsRanToCompletion { get; } // 0x0090700C-0x00907040 
		public TaskCreationOptions CreationOptions { get; } // 0x00907F90-0x00907FA8 
		WaitHandle IAsyncResult.AsyncWaitHandle { get; } // 0x00908F8C-0x00909044 
		public object AsyncState { get; } // 0x0090914C-0x00909154 
		internal TaskScheduler ExecutingTaskScheduler { get; } // 0x00909154-0x0090915C 
		public static Task CompletedTask { get; } // 0x0090915C-0x00909208 
		internal ManualResetEventSlim CompletedEvent { get; } // 0x00909044-0x0090914C 
		internal bool IsSelfReplicatingRoot { get; } // 0x009089C0-0x009089E4 
		internal bool IsChildReplica { get; } // 0x00909208-0x00909220 
		internal bool ExceptionRecorded { get; } // 0x00909220-0x0090927C 
		public bool IsFaulted { get; } // 0x00908BAC-0x00908BD0 
		internal ExecutionContext CapturedContext { get; set; } // 0x009092A4-0x00909374 0x00905A48-0x00905AC4
		internal bool IsExceptionObservedByParent { get; } // 0x0090A0A8-0x0090A0CC 
		internal bool IsDelegateInvoked { get; } // 0x0090A0CC-0x0090A0F0 
		internal virtual object SavedStateForNextReplica { get; } // 0x0090B188-0x0090B190 
		internal virtual object SavedStateFromPreviousReplica { set; } // 0x0090B190-0x0090B194
		internal virtual Task HandedOverChildReplica { get; set; } // 0x0090B194-0x0090B19C 0x0090B19C-0x0090B1A0
	
		// Nested types
		internal class ContingentProperties // TypeDefIndex: 759
		{
			// Fields
			internal ExecutionContext m_capturedContext; // 0x10
			internal ManualResetEventSlim m_completionEvent; // 0x18
			internal TaskExceptionHolder m_exceptionsHolder; // 0x20
			internal CancellationToken m_cancellationToken; // 0x28
			internal Shared<CancellationTokenRegistration> m_cancellationRegistration; // 0x30
			internal int m_internalCancellationRequested; // 0x38
			internal int m_completionCountdown; // 0x3C
			internal List<Task> m_exceptionalChildren; // 0x40
	
			// Constructors
			public ContingentProperties(); // 0x00907DA4-0x00907DD4
	
			// Methods
			internal void SetCompleted(); // 0x0090A514-0x0090A54C
			internal void DeregisterCancellationCallback(); // 0x0090A54C-0x0090A614
		}
	
		private sealed class SetOnInvokeMres : ManualResetEventSlim, ITaskCompletionAction // TypeDefIndex: 760
		{
			// Constructors
			internal SetOnInvokeMres(); // 0x0090C2DC-0x0090C34C
	
			// Methods
			public void Invoke(Task completingTask); // 0x0090E250-0x0090E258
		}
	
		private sealed class DelayPromise : Task<VoidTaskResult> // TypeDefIndex: 761
		{
			// Fields
			internal readonly CancellationToken Token; // 0x58
			internal CancellationTokenRegistration Registration; // 0x60
			internal Timer Timer; // 0x78
	
			// Constructors
			internal DelayPromise(CancellationToken token); // 0x0090D348-0x0090D424
	
			// Methods
			internal void Complete(); // 0x0090DBB8-0x0090DCCC
		}
	
		[CompilerGenerated] // 0x004B5520-0x004B5530
		private sealed class __c__DisplayClass178_0 // TypeDefIndex: 762
		{
			// Fields
			public Task root; // 0x10
			public bool replicasAreQuitting; // 0x18
			public Action<object> taskReplicaDelegate; // 0x20
			public TaskCreationOptions creationOptionsForReplicas; // 0x28
			public InternalTaskOptions internalOptionsForReplicas; // 0x2C
	
			// Constructors
			public __c__DisplayClass178_0(); // 0x0090B1A0-0x0090B1A8
	
			// Methods
			internal void _ExecuteSelfReplicating_b__0(object _p0_); // 0x0090DDF0-0x0090E1BC
		}
	
		[Serializable]
		[CompilerGenerated] // 0x004B5530-0x004B5540
		private sealed class __c // TypeDefIndex: 763
		{
			// Fields
			public static readonly __c __9; // 0x00
			public static Action<object> __9__276_0; // 0x08
			public static TimerCallback __9__276_1; // 0x10
	
			// Constructors
			static __c(); // 0x0090DAD0-0x0090DB34
			public __c(); // 0x0090DB34-0x0090DB3C
	
			// Methods
			internal void _Delay_b__276_0(object state); // 0x0090DB3C-0x0090DBB8
			internal void _Delay_b__276_1(object state); // 0x0090DCCC-0x0090DD48
			internal ContingentProperties _.cctor_b__295_0(); // 0x0090DD48-0x0090DDB4
			internal bool _.cctor_b__295_1(Task t); // 0x0090DDB4-0x0090DDE4
			internal bool _.cctor_b__295_2(object tc); // 0x0090DDE4-0x0090DDF0
		}
	
		// Constructors
		internal Task(bool canceled, TaskCreationOptions creationOptions, CancellationToken ct); // 0x00907CD0-0x00907DA4
		internal Task(); // 0x00907DD4-0x00907E08
		internal Task(Delegate action, object state, Task parent, CancellationToken cancellationToken, TaskCreationOptions creationOptions, InternalTaskOptions internalOptions, TaskScheduler scheduler); // 0x0090594C-0x00905A48
		static Task(); // 0x0090D880-0x0090DABC
	
		// Methods
		[FriendAccessAllowed] // 0x004BC620-0x004BC630
		internal static bool AddToActiveTasks(Task task); // 0x00906D2C-0x00906E7C
		[FriendAccessAllowed] // 0x004BC630-0x004BC640
		internal static void RemoveFromActiveTasks(int taskId); // 0x00907BA8-0x00907CD0
		internal void TaskConstructorCore(object action, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions, InternalTaskOptions internalOptions, TaskScheduler scheduler); // 0x00907E08-0x00907F90
		private void AssignCancellationToken(CancellationToken cancellationToken, Task antecedent, TaskContinuation continuation); // 0x00908048-0x0090831C
		private static void TaskCancelCallback(object o); // 0x00908428-0x009084F8
		internal void PossiblyCaptureContext(ref StackCrawlMark stackMark); // 0x009069E0-0x00906A64
		internal static TaskCreationOptions OptionsMethod(int flags); // 0x0090874C-0x00908754
		internal bool AtomicStateUpdate(int newBits, int illegalBits); // 0x00908754-0x009087E4
		internal bool AtomicStateUpdate(int newBits, int illegalBits, ref int oldFlags); // 0x009087E4-0x00908884
		internal void SetNotificationForWaitCompletion(bool enabled); // 0x00908884-0x00908904
		internal bool NotifyDebuggerOfWaitCompletionIfNecessary(); // 0x00906B30-0x00906B84
		private void NotifyDebuggerOfWaitCompletion(); // 0x00908928-0x00908954
		internal bool MarkStarted(); // 0x009089AC-0x009089B8
		internal bool FireTaskScheduledIfNeeded(TaskScheduler ts); // 0x009089B8-0x009089C0
		internal void AddNewChild(); // 0x00907FA8-0x00908048
		internal void DisregardChild(); // 0x009083D8-0x00908428
		internal static int NewId(); // 0x009089E4-0x00908A54
		internal static Task InternalCurrentIfAttached(TaskCreationOptions creationOptions); // 0x0090692C-0x009069E0
		internal ContingentProperties EnsureContingentPropertiesInitialized(bool needsProtection); // 0x0090831C-0x0090836C
		private ContingentProperties EnsureContingentPropertiesInitializedCore(bool needsProtection); // 0x00908DDC-0x00908EB4
		private static bool IsCompletedMethod(int flags); // 0x00908F7C-0x00908F8C
		private static ExecutionContext CopyExecutionContext(ExecutionContext capturedContext); // 0x00909374-0x0090944C
		public void Dispose(); // 0x0090944C-0x009094C8
		protected virtual void Dispose(bool disposing); // 0x009094C8-0x009095E0
		internal void ScheduleAndStart(bool needsProtection); // 0x00907208-0x0090742C
		internal void AddException(object exceptionObject); // 0x00909600-0x00909608
		internal void AddException(object exceptionObject, bool representsCancellation); // 0x00909944-0x00909AD0
		private AggregateException GetExceptions(bool includeTaskCanceledExceptions); // 0x00908BD0-0x00908D1C
		internal ReadOnlyCollection<ExceptionDispatchInfo> GetExceptionDispatchInfos(); // 0x00909DA4-0x00909E74
		internal ExceptionDispatchInfo GetCancellationExceptionDispatchInfo(); // 0x00909EF4-0x00909F30
		internal void ThrowIfExceptional(bool includeTaskCanceledExceptions); // 0x00909F30-0x00909FB0
		internal void UpdateExceptionObservedStatus(); // 0x00909FB0-0x0090A0A8
		internal void Finish(bool bUserDelegateExecuted); // 0x00909724-0x009098B0
		internal void FinishStageTwo(); // 0x0090A0F0-0x0090A2E8
		internal void FinishStageThree(); // 0x0090A614-0x0090A668
		internal void ProcessChildCompletion(Task childTask); // 0x0090A668-0x0090A7F0
		internal void AddExceptionsFromChildren(); // 0x0090A2E8-0x0090A514
		internal void FinishThreadAbortedTask(bool bTAEAddedToExceptionHolder, bool delegateRan); // 0x00909608-0x0090968C
		private void Execute(); // 0x0090AD54-0x0090AED4
		internal virtual bool ShouldReplicate(); // 0x0090B0C8-0x0090B0D0
		internal virtual Task CreateReplicaTask(Action<object> taskReplicaDelegate, object stateObject, Task parentTask, TaskScheduler taskScheduler, TaskCreationOptions creationOptionsForReplica, InternalTaskOptions internalOptionsForReplica); // 0x0090B0D0-0x0090B188
		private static void ExecuteSelfReplicating(Task root); // 0x0090AED4-0x0090AFB8
		void IThreadPoolWorkItem.ExecuteWorkItem(); // 0x0090B1A8-0x0090B1B0
		void IThreadPoolWorkItem.MarkAborted(ThreadAbortException tae); // 0x0090B2F0-0x0090B33C
		internal bool ExecuteEntry(bool bPreventDoubleExecution); // 0x0090B1B0-0x0090B2F0
		private void ExecuteWithThreadLocal(ref Task currentTaskSlot); // 0x0090B33C-0x0090B520
		private static void ExecutionContextCallback(object obj); // 0x0090B618-0x0090B69C
		internal virtual void InnerInvoke(); // 0x0090B69C-0x0090B73C
		internal void InnerInvokeWithArg(Task childTask); // 0x0090B73C-0x0090B76C
		private void HandleException(Exception unhandledException); // 0x0090AFB8-0x0090B0C8
		internal void SetContinuationForAwait(Action continuationAction, bool continueOnCapturedContext, bool flowExecutionContext, ref StackCrawlMark stackMark); // 0x0090B79C-0x0090B9EC
		private bool WrappedTryRunInline(); // 0x0090BAB8-0x0090BBE4
		internal bool InternalWait(int millisecondsTimeout, CancellationToken cancellationToken); // 0x0090BDB0-0x0090C030
		private bool SpinThenBlockingWait(int millisecondsTimeout, CancellationToken cancellationToken); // 0x0090C030-0x0090C200
		private bool SpinWait(int millisecondsTimeout); // 0x0090C200-0x0090C2DC
		internal bool InternalCancel(bool bCancelNonExecutingOnly); // 0x0090742C-0x00907660
		internal void RecordInternalCancellationRequest(); // 0x0090C434-0x0090C480
		internal void RecordInternalCancellationRequest(CancellationToken tokenToRecord); // 0x0090C480-0x0090C520
		internal void RecordInternalCancellationRequest(CancellationToken tokenToRecord, object cancellationException); // 0x0090C520-0x0090C560
		internal void CancellationCleanupLogic(); // 0x0090B520-0x0090B618
		private void SetCancellationAcknowledged(); // 0x0090B76C-0x0090B79C
		internal void FinishContinuations(); // 0x0090A7F0-0x0090AD54
		private void LogFinishCompletionNotification(); // 0x0090C590-0x0090C594
		public Task ContinueWith(Action<Task> continuationAction); // 0x0090C594-0x0090C628
		private Task ContinueWith(Action<Task> continuationAction, TaskScheduler scheduler, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, ref StackCrawlMark stackMark); // 0x0090C6EC-0x0090C848
		public Task ContinueWith(Action<Task, object> continuationAction, object state, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler); // 0x0090CAB8-0x0090CAF4
		private Task ContinueWith(Action<Task, object> continuationAction, object state, TaskScheduler scheduler, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, ref StackCrawlMark stackMark); // 0x0090CAF4-0x0090CC5C
		internal static void CreationOptionsFromContinuationOptions(TaskContinuationOptions continuationOptions, out TaskCreationOptions creationOptions, out InternalTaskOptions internalOptions); // 0x0090C848-0x0090C98C
		internal void ContinueWithCore(Task continuationTask, TaskScheduler scheduler, CancellationToken cancellationToken, TaskContinuationOptions options); // 0x0090C98C-0x0090CAB8
		internal void AddCompletionAction(ITaskCompletionAction action); // 0x0090CC5C-0x0090CC64
		private void AddCompletionAction(ITaskCompletionAction action, bool addBeforeOthers); // 0x0090C34C-0x0090C434
		private bool AddTaskContinuationComplex(object tc, bool addBeforeOthers); // 0x0090CC64-0x0090CF90
		private bool AddTaskContinuation(object tc, bool addBeforeOthers); // 0x0090BA24-0x0090BAB8
		internal void RemoveContinuation(object continuationObject); // 0x009084F8-0x0090874C
		[FriendAccessAllowed] // 0x004BC640-0x004BC650
		internal static Task FromCancellation(CancellationToken cancellationToken); // 0x0090CF90-0x0090D054
		[FriendAccessAllowed] // 0x004BC650-0x004BC660
		internal static Task<TResult> FromCancellation<TResult>(CancellationToken cancellationToken);
		public static Task Delay(int millisecondsDelay, CancellationToken cancellationToken); // 0x0090D054-0x0090D348
		public static Task<Task> WhenAny(params /* 0x004BD300-0x004BD310 */ Task[] tasks); // 0x0090D490-0x0090D638
	}

	internal sealed class CompletionActionInvoker : IThreadPoolWorkItem // TypeDefIndex: 764
	{
		// Fields
		private readonly ITaskCompletionAction m_action; // 0x10
		private readonly System.Threading.Tasks.Task m_completingTask; // 0x18
	
		// Constructors
		internal CompletionActionInvoker(ITaskCompletionAction action, System.Threading.Tasks.Task completingTask); // 0x00906764-0x0090679C
	
		// Methods
		public void ExecuteWorkItem(); // 0x0090679C-0x00906858
		public void MarkAborted(ThreadAbortException tae); // 0x00906858-0x0090685C
	}

	internal class SystemThreadingTasks_TaskDebugView // TypeDefIndex: 765
	{
	}

	[Serializable]
	[Flags] // 0x004B5540-0x004B5550
	public enum TaskCreationOptions // TypeDefIndex: 766
	{
		None = 0,
		PreferFairness = 1,
		LongRunning = 2,
		AttachedToParent = 4,
		DenyChildAttach = 8,
		HideScheduler = 16,
		RunContinuationsAsynchronously = 64
	}

	[Serializable]
	[Flags] // 0x004B5550-0x004B5560
	internal enum InternalTaskOptions // TypeDefIndex: 767
	{
		None = 0,
		ChildReplica = 256,
		ContinuationTask = 512,
		PromiseTask = 1024,
		SelfReplicating = 2048,
		LazyCancellation = 4096,
		QueuedByRuntime = 8192,
		DoNotDispose = 16384,
		InternalOptionsMask = 65280
	}

	[Serializable]
	[Flags] // 0x004B5560-0x004B5570
	public enum TaskContinuationOptions // TypeDefIndex: 768
	{
		None = 0,
		PreferFairness = 1,
		LongRunning = 2,
		AttachedToParent = 4,
		DenyChildAttach = 8,
		HideScheduler = 16,
		LazyCancellation = 32,
		RunContinuationsAsynchronously = 64,
		NotOnRanToCompletion = 65536,
		NotOnFaulted = 131072,
		OnlyOnCanceled = 196608,
		NotOnCanceled = 262144,
		OnlyOnFaulted = 327680,
		OnlyOnRanToCompletion = 393216,
		ExecuteSynchronously = 524288
	}

	internal class StackGuard // TypeDefIndex: 769
	{
		// Fields
		private int m_inliningDepth; // 0x10
	
		// Constructors
		public StackGuard(); // 0x00906BB8-0x00906BC0
	
		// Methods
		internal bool TryBeginInliningScope(); // 0x00906B84-0x00906B9C
		internal void EndInliningScope(); // 0x00906BA4-0x00906BB8
		private bool CheckForSufficientStack(); // 0x00906B9C-0x00906BA4
	}

	internal struct VoidTaskResult // TypeDefIndex: 770
	{
	}

	internal interface ITaskCompletionAction // TypeDefIndex: 771
	{
		// Methods
		void Invoke(System.Threading.Tasks.Task completingTask);
	}

	[Serializable]
	public class TaskCanceledException : OperationCanceledException // TypeDefIndex: 772
	{
		// Fields
		[NonSerialized]
		private System.Threading.Tasks.Task m_canceledTask; // 0x90
	
		// Constructors
		public TaskCanceledException(); // 0x0090E258-0x0090E2B8
		public TaskCanceledException(System.Threading.Tasks.Task task); // 0x00909B58-0x00909BFC
		protected TaskCanceledException(SerializationInfo info, StreamingContext context); // 0x0090E2B8-0x0090E2C0
	}

	internal sealed class ContinuationTaskFromTask : System.Threading.Tasks.Task // TypeDefIndex: 773
	{
		// Fields
		private System.Threading.Tasks.Task m_antecedent; // 0x50
	
		// Constructors
		public ContinuationTaskFromTask(System.Threading.Tasks.Task antecedent, Delegate action, object state, TaskCreationOptions creationOptions, InternalTaskOptions internalOptions, ref StackCrawlMark stackMark); // 0x0090685C-0x0090692C
	
		// Methods
		internal override void InnerInvoke(); // 0x00906A64-0x00906B30
	}

	internal abstract class TaskContinuation // TypeDefIndex: 774
	{
		// Constructors
		protected TaskContinuation(); // 0x00905800-0x00905808
	
		// Methods
		internal abstract void Run(System.Threading.Tasks.Task completedTask, bool bCanInlineContinuationTask);
		protected static void InlineIfPossibleOrElseQueue(System.Threading.Tasks.Task task, bool needsProtection); // 0x0090706C-0x00907208
	}

	internal class StandardTaskContinuation : TaskContinuation // TypeDefIndex: 775
	{
		// Fields
		internal readonly System.Threading.Tasks.Task m_task; // 0x10
		internal readonly TaskContinuationOptions m_options; // 0x18
		private readonly TaskScheduler m_taskScheduler; // 0x20
	
		// Constructors
		internal StandardTaskContinuation(System.Threading.Tasks.Task task, TaskContinuationOptions options, TaskScheduler scheduler); // 0x00906BC0-0x00906C94
	
		// Methods
		internal override void Run(System.Threading.Tasks.Task completedTask, bool bCanInlineContinuationTask); // 0x00906E7C-0x0090700C
	}

	internal sealed class SynchronizationContextAwaitTaskContinuation : AwaitTaskContinuation // TypeDefIndex: 776
	{
		// Fields
		private static readonly SendOrPostCallback s_postCallback; // 0x00
		private static ContextCallback s_postActionCallback; // 0x08
		private readonly SynchronizationContext m_syncContext; // 0x20
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x004B5570-0x004B5580
		private sealed class __c // TypeDefIndex: 777
		{
			// Fields
			public static readonly __c __9; // 0x00
	
			// Constructors
			static __c(); // 0x00907ABC-0x00907B20
			public __c(); // 0x00907B20-0x00907B28
	
			// Methods
			internal void _.cctor_b__7_0(object state); // 0x00907B28-0x00907BA8
		}
	
		// Constructors
		internal SynchronizationContextAwaitTaskContinuation(SynchronizationContext context, Action action, bool flowExecutionContext, ref StackCrawlMark stackMark); // 0x00907660-0x00907698
		static SynchronizationContextAwaitTaskContinuation(); // 0x00907A14-0x00907ABC
	
		// Methods
		internal sealed override void Run(System.Threading.Tasks.Task task, bool canInlineContinuationTask); // 0x00907698-0x009078A0
		private static void PostAction(object state); // 0x009078A0-0x00907954
		private static ContextCallback GetPostActionCallback(); // 0x00907954-0x00907A14
	}

	internal sealed class TaskSchedulerAwaitTaskContinuation : AwaitTaskContinuation // TypeDefIndex: 778
	{
		// Fields
		private readonly TaskScheduler m_scheduler; // 0x20
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x004B5580-0x004B5590
		private sealed class __c // TypeDefIndex: 779
		{
			// Fields
			public static readonly __c __9; // 0x00
			public static Action<object> __9__2_0; // 0x08
	
			// Constructors
			static __c(); // 0x0090FE44-0x0090FEA8
			public __c(); // 0x0090FEA8-0x0090FEB0
	
			// Methods
			internal void _Run_b__2_0(object state); // 0x0090FEB0-0x0090FFB8
		}
	
		// Constructors
		internal TaskSchedulerAwaitTaskContinuation(TaskScheduler scheduler, Action action, bool flowExecutionContext, ref StackCrawlMark stackMark); // 0x0090B9EC-0x0090BA24
	
		// Methods
		internal sealed override void Run(System.Threading.Tasks.Task ignored, bool canInlineContinuationTask); // 0x0090FBC8-0x0090FE40
	}

	internal class AwaitTaskContinuation : TaskContinuation, IThreadPoolWorkItem // TypeDefIndex: 780
	{
		// Fields
		private readonly ExecutionContext m_capturedContext; // 0x10
		protected readonly Action m_action; // 0x18
		private static ContextCallback s_invokeActionCallback; // 0x00
	
		// Properties
		internal static bool IsValidLocationForInlining { get; } // 0x00905BE4-0x00905D30 
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x004B5590-0x004B55A0
		private sealed class __c // TypeDefIndex: 781
		{
			// Fields
			public static readonly __c __9; // 0x00
			public static WaitCallback __9__17_0; // 0x08
	
			// Constructors
			static __c(); // 0x00906678-0x009066DC
			public __c(); // 0x009066DC-0x009066E4
	
			// Methods
			internal void _ThrowAsyncIfNecessary_b__17_0(object s); // 0x009066E4-0x00906764
		}
	
		// Constructors
		internal AwaitTaskContinuation(Action action, bool flowExecutionContext, ref StackCrawlMark stackMark); // 0x0090575C-0x00905800
		internal AwaitTaskContinuation(Action action, bool flowExecutionContext); // 0x00905808-0x00905898
	
		// Methods
		protected System.Threading.Tasks.Task CreateTask(Action<object> action, object state, TaskScheduler scheduler); // 0x00905898-0x0090594C
		internal override void Run(System.Threading.Tasks.Task task, bool canInlineContinuationTask); // 0x00905AC4-0x00905BE4
		private void ExecuteWorkItemHelper(); // 0x00906060-0x009061DC
		void IThreadPoolWorkItem.ExecuteWorkItem(); // 0x009061DC-0x00906204
		void IThreadPoolWorkItem.MarkAborted(ThreadAbortException tae); // 0x00906204-0x00906208
		private static void InvokeAction(object state); // 0x00906208-0x00906288
		protected static ContextCallback GetInvokeActionCallback(); // 0x00906288-0x00906318
		protected void RunCallback(ContextCallback callback, object state, ref System.Threading.Tasks.Task currentTask); // 0x00905D30-0x00905F14
		internal static void RunOrScheduleAction(Action action, bool allowInlining, ref System.Threading.Tasks.Task currentTask); // 0x0090645C-0x00906610
		internal static void UnsafeScheduleAction(Action action, System.Threading.Tasks.Task task); // 0x00906610-0x00906678
		protected static void ThrowAsyncIfNecessary(Exception exc); // 0x00906318-0x0090645C
	}

	internal class TaskExceptionHolder // TypeDefIndex: 782
	{
		// Fields
		private static readonly bool s_failFastOnUnobservedException; // 0x00
		private static bool s_domainUnloadStarted; // 0x01
		private static EventHandler s_adUnloadEventHandler; // 0x08
		private readonly System.Threading.Tasks.Task m_task; // 0x10
		private List<ExceptionDispatchInfo> m_faultExceptions; // 0x18
		private ExceptionDispatchInfo m_cancellationException; // 0x20
		private bool m_isHandled; // 0x28
	
		// Properties
		internal bool ContainsFaultList { get; } // 0x0090927C-0x009092A4 
	
		// Constructors
		internal TaskExceptionHolder(System.Threading.Tasks.Task task); // 0x00909AD0-0x00909B4C
		static TaskExceptionHolder(); // 0x0090F2E4-0x0090F340
	
		// Methods
		private static bool ShouldFailFastOnUnobservedException(); // 0x0090E3E8-0x0090E3F0
		private static void EnsureADUnloadCallbackRegistered(); // 0x0090E2C0-0x0090E3E8
		private static void AppDomainUnloadCallback(object sender, EventArgs e); // 0x0090E3F0-0x0090E460
		~TaskExceptionHolder(); // 0x0090E460-0x0090EAA0
		internal void Add(object exceptionObject, bool representsCancellation); // 0x00909B4C-0x00909B58
		private void SetCancellationException(object exceptionObject); // 0x0090EC50-0x0090ED0C
		private void AddFaultException(object exceptionObject); // 0x0090ED0C-0x0090F25C
		private void MarkAsUnhandled(); // 0x0090F25C-0x0090F2DC
		internal void MarkAsHandled(bool calledFromFinalizer); // 0x009098B0-0x00909944
		internal AggregateException CreateExceptionObject(bool calledFromFinalizer, Exception includeThisException); // 0x00909BFC-0x00909DA4
		internal ReadOnlyCollection<ExceptionDispatchInfo> GetExceptionDispatchInfos(); // 0x00909E74-0x00909EF4
		internal ExceptionDispatchInfo GetCancellationExceptionDispatchInfo(); // 0x0090F2DC-0x0090F2E4
	}

	public class TaskFactory // TypeDefIndex: 783
	{
		// Fields
		private CancellationToken m_defaultCancellationToken; // 0x10
		private TaskScheduler m_defaultScheduler; // 0x18
		private TaskCreationOptions m_defaultCreationOptions; // 0x20
		private TaskContinuationOptions m_defaultContinuationOptions; // 0x24
	
		// Nested types
		internal sealed class CompleteOnInvokePromise : Task<System.Threading.Tasks.Task>, ITaskCompletionAction // TypeDefIndex: 784
		{
			// Fields
			private IList<System.Threading.Tasks.Task> _tasks; // 0x58
			private int m_firstTaskAlreadyCompleted; // 0x60
	
			// Constructors
			public CompleteOnInvokePromise(IList<System.Threading.Tasks.Task> tasks); // 0x0090F53C-0x0090F618
	
			// Methods
			public void Invoke(System.Threading.Tasks.Task completingTask); // 0x0090F618-0x0090F820
		}
	
		// Constructors
		public TaskFactory(); // 0x0090DABC-0x0090DAD0
		public TaskFactory(CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions, TaskScheduler scheduler); // 0x0090F340-0x0090F39C
	
		// Methods
		internal static void CheckCreationOptions(TaskCreationOptions creationOptions); // 0x0090F4B0-0x0090F53C
		internal static Task<System.Threading.Tasks.Task> CommonCWAnyLogic(IList<System.Threading.Tasks.Task> tasks); // 0x0090D638-0x0090D880
		internal static void CheckMultiTaskContinuationOptions(TaskContinuationOptions continuationOptions); // 0x0090F39C-0x0090F4B0
	}

	[DebuggerDisplay] // 0x004B55A0-0x004B5628
	[DebuggerTypeProxy] // 0x004B55A0-0x004B5628
	public abstract class TaskScheduler // TypeDefIndex: 785
	{
		// Fields
		private static ConditionalWeakTable<TaskScheduler, object> s_activeTaskSchedulers; // 0x00
		private static readonly TaskScheduler s_defaultTaskScheduler; // 0x08
		internal static int s_taskSchedulerIdCounter; // 0x10
		private int m_taskSchedulerId; // 0x10
		private static EventHandler<UnobservedTaskExceptionEventArgs> _unobservedTaskException; // 0x18
		private static readonly object _unobservedTaskExceptionLockObject; // 0x20
	
		// Properties
		internal virtual bool RequiresAtomicStartTransition { get; } // 0x0090F82C-0x0090F834 
		public static TaskScheduler Default { get; } // 0x0090F9B0-0x0090FA18 
		public static TaskScheduler Current { get; } // 0x0090C628-0x0090C6EC 
		internal static TaskScheduler InternalCurrent { get; } // 0x00905FA0-0x00906060 
		public int Id { get; } // 0x0090FA18-0x0090FACC 
	
		// Nested types
		internal sealed class SystemThreadingTasks_TaskSchedulerDebugView // TypeDefIndex: 786
		{
		}
	
		// Constructors
		protected TaskScheduler(); // 0x0090F834-0x0090F8BC
		static TaskScheduler(); // 0x0090FACC-0x0090FB5C
	
		// Methods
		protected internal abstract void QueueTask(System.Threading.Tasks.Task task);
		protected abstract bool TryExecuteTaskInline(System.Threading.Tasks.Task task, bool taskWasPreviouslyQueued);
		internal bool TryRunInline(System.Threading.Tasks.Task task, bool taskWasPreviouslyQueued); // 0x0090BBE4-0x0090BDB0
		protected internal virtual bool TryDequeue(System.Threading.Tasks.Task task); // 0x0090F820-0x0090F828
		internal virtual void NotifyWorkItemProgress(); // 0x0090F828-0x0090F82C
		internal void InternalQueueTask(System.Threading.Tasks.Task task); // 0x009095E0-0x00909600
		private void AddToActiveTaskSchedulers(); // 0x0090F8BC-0x0090F9B0
		internal static void PublishUnobservedTaskException(object sender, UnobservedTaskExceptionEventArgs ueea); // 0x0090EB1C-0x0090EC50
	}

	public class UnobservedTaskExceptionEventArgs : EventArgs // TypeDefIndex: 787
	{
		// Fields
		private AggregateException m_exception; // 0x10
		internal bool m_observed; // 0x18
	
		// Constructors
		public UnobservedTaskExceptionEventArgs(AggregateException exception); // 0x0090EAA0-0x0090EB1C
	}

	[Serializable]
	public class TaskSchedulerException : Exception // TypeDefIndex: 788
	{
		// Constructors
		public TaskSchedulerException(); // 0x0090FFB8-0x00910040
		public TaskSchedulerException(Exception innerException); // 0x0090968C-0x00909724
		protected TaskSchedulerException(SerializationInfo info, StreamingContext context); // 0x00910040-0x009100D0
	}

	internal sealed class ThreadPoolTaskScheduler : TaskScheduler // TypeDefIndex: 789
	{
		// Fields
		private static readonly ParameterizedThreadStart s_longRunningThreadWork; // 0x00
	
		// Properties
		internal override bool RequiresAtomicStartTransition { get; } // 0x00910640-0x00910648 
	
		// Constructors
		internal ThreadPoolTaskScheduler(); // 0x0090FB5C-0x0090FBC8
		static ThreadPoolTaskScheduler(); // 0x00910648-0x009106C4
	
		// Methods
		private static void LongRunningThreadWork(object obj); // 0x009100D0-0x00910158
		protected internal override void QueueTask(System.Threading.Tasks.Task task); // 0x00910158-0x00910238
		protected override bool TryExecuteTaskInline(System.Threading.Tasks.Task task, bool taskWasPreviouslyQueued); // 0x00910410-0x009104D8
		protected internal override bool TryDequeue(System.Threading.Tasks.Task task); // 0x0091059C-0x009105A4
		internal override void NotifyWorkItemProgress(); // 0x009105A4-0x009105A8
	}
}

namespace System.Security
{
	[AttributeUsage] // 0x004B5628-0x004B565C
	public sealed class SecurityCriticalAttribute : Attribute // TypeDefIndex: 790
	{
		// Constructors
		public SecurityCriticalAttribute(); // 0x00B02E1C-0x00B02E24
	}

	[Serializable]
	[ComVisible] // 0x004B565C-0x004B5670
	public sealed class SecurityElement // TypeDefIndex: 791
	{
		// Fields
		private string text; // 0x10
		private string tag; // 0x18
		private ArrayList attributes; // 0x20
		private ArrayList children; // 0x28
		private static readonly char[] invalid_tag_chars; // 0x00
		private static readonly char[] invalid_text_chars; // 0x08
		private static readonly char[] invalid_attr_name_chars; // 0x10
		private static readonly char[] invalid_attr_value_chars; // 0x18
		private static readonly char[] invalid_chars; // 0x20
	
		// Properties
		public Hashtable Attributes { get; } // 0x00B03220-0x00B034F8 
		public ArrayList Children { get; } // 0x00B034F8-0x00B03500 
		public string Tag { get; } // 0x00B03500-0x00B03508 
		public string Text { get; set; } // 0x00B03508-0x00B03510 0x00B03110-0x00B03220
	
		// Nested types
		internal class SecurityAttribute // TypeDefIndex: 792
		{
			// Fields
			private string _name; // 0x10
			private string _value; // 0x18
	
			// Properties
			public string Name { get; } // 0x00B04B58-0x00B04B60 
			public string Value { get; } // 0x00B04B60-0x00B04B68 
	
			// Constructors
			public SecurityAttribute(string name, string value); // 0x00B03C28-0x00B03D88
		}
	
		// Constructors
		public SecurityElement(string tag); // 0x00B02E24-0x00B02E2C
		public SecurityElement(string tag, string text); // 0x00B02E2C-0x00B02F6C
		static SecurityElement(); // 0x00B049FC-0x00B04B58
	
		// Methods
		public void AddAttribute(string name, string value); // 0x00B036E0-0x00B03868
		public void AddChild(SecurityElement child); // 0x00B03D88-0x00B03E60
		public static string Escape(string str); // 0x00B03E60-0x00B04044
		private static string Unescape(string str); // 0x00B035A0-0x00B036E0
		public static SecurityElement FromString(string xml); // 0x00B040E8-0x00B042D4
		public static bool IsValidAttributeName(string name); // 0x00B042DC-0x00B0436C
		public static bool IsValidAttributeValue(string value); // 0x00B0436C-0x00B043FC
		public static bool IsValidTag(string tag); // 0x00B02F6C-0x00B02FFC
		public static bool IsValidText(string text); // 0x00B03510-0x00B035A0
		public override string ToString(); // 0x00B043FC-0x00B04490
		private void ToXml(ref StringBuilder s, int level); // 0x00B04490-0x00B049F8
		internal SecurityAttribute GetAttribute(string name); // 0x00B03868-0x00B03B38
	}

	[Serializable]
	[ComVisible] // 0x004B5670-0x004B5684
	public class SecurityException : SystemException // TypeDefIndex: 793
	{
		// Fields
		private string permissionState; // 0x88
	
		// Constructors
		public SecurityException(); // 0x00B04B68-0x00B04BD4
		public SecurityException(string message); // 0x00B04BD4-0x00B04C00
		protected SecurityException(SerializationInfo info, StreamingContext context); // 0x00B04C00-0x00B04D00
		public SecurityException(string message, Exception inner); // 0x00B04D00-0x00B04D2C
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00B04DC0-0x00B04ED8
		public override string ToString(); // 0x00B04ED8-0x00B04EE0
	}

	[ComVisible] // 0x004B5684-0x004B5698
	public static class SecurityManager // TypeDefIndex: 794
	{
		// Methods
		internal static bool CheckElevatedPermissions(); // 0x00B04EE0-0x00B04EE8
		internal static void EnsureElevatedPermissions(); // 0x00B04EE8-0x00B04EEC
	}

	[Serializable]
	[ComVisible] // 0x004B5698-0x004B56AC
	public sealed class XmlSyntaxException : SystemException // TypeDefIndex: 795
	{
		// Constructors
		public XmlSyntaxException(); // 0x00B04EEC-0x00B04EF0
		public XmlSyntaxException(string message); // 0x00B042D4-0x00B042D8
		public XmlSyntaxException(string message, Exception inner); // 0x00B042D8-0x00B042DC
		internal XmlSyntaxException(SerializationInfo info, StreamingContext context); // 0x00B04F8C-0x00B04F90
	}
}

namespace System.Security.Policy
{
	[Serializable]
	[ComVisible] // 0x004B56AC-0x004B56FC
	[MonoTODO] // 0x004B56AC-0x004B56FC
	public sealed class Evidence : ICollection // TypeDefIndex: 796
	{
		// Fields
		private bool _locked; // 0x10
		private ArrayList hostEvidenceList; // 0x18
		private ArrayList assemblyEvidenceList; // 0x20
	
		// Properties
		[Obsolete] // 0x004BD6C4-0x004BD6D4
		public int Count { get; } // 0x00B028AC-0x00B0290C 
	
		// Nested types
		private class EvidenceEnumerator : IEnumerator // TypeDefIndex: 797
		{
			// Fields
			private IEnumerator currentEnum; // 0x10
			private IEnumerator hostEnum; // 0x18
			private IEnumerator assemblyEnum; // 0x20
	
			// Properties
			public object Current { get; } // 0x00B02D64-0x00B02E1C 
	
			// Constructors
			public EvidenceEnumerator(IEnumerator hostenum, IEnumerator assemblyenum); // 0x00B02A8C-0x00B02AC8
	
			// Methods
			public bool MoveNext(); // 0x00B02AC8-0x00B02C14
			public void Reset(); // 0x00B02C14-0x00B02D64
		}
	
		// Constructors
		public Evidence(); // 0x00B028A4-0x00B028AC
	
		// Methods
		[Obsolete] // 0x004BC660-0x004BC670
		public void CopyTo(Array array, int index); // 0x00B0290C-0x00B029D4
		[Obsolete] // 0x004BC670-0x004BC680
		public IEnumerator GetEnumerator(); // 0x00B029D4-0x00B02A8C
	}
}

namespace System.Security.Principal
{
	[ComVisible] // 0x004B56FC-0x004B5710
	public interface IPrincipal // TypeDefIndex: 798
	{
	}
}

namespace System.Security.Cryptography
{
	[Serializable]
	[ComVisible] // 0x004B5710-0x004B5724
	public enum CipherMode // TypeDefIndex: 799
	{
		CBC = 1,
		ECB = 2,
		OFB = 3,
		CFB = 4,
		CTS = 5
	}

	[Serializable]
	[ComVisible] // 0x004B5724-0x004B5738
	public enum PaddingMode // TypeDefIndex: 800
	{
		None = 1,
		PKCS7 = 2,
		Zeros = 3,
		ANSIX923 = 4,
		ISO10126 = 5
	}

	[ComVisible] // 0x004B5738-0x004B574C
	public sealed class KeySizes // TypeDefIndex: 801
	{
		// Fields
		private int m_minSize; // 0x10
		private int m_maxSize; // 0x14
		private int m_skipSize; // 0x18
	
		// Properties
		public int MinSize { get; } // 0x00AFBDFC-0x00AFBE04 
		public int MaxSize { get; } // 0x00AFBE04-0x00AFBE0C 
		public int SkipSize { get; } // 0x00AFBE0C-0x00AFBE14 
	
		// Constructors
		public KeySizes(int minSize, int maxSize, int skipSize); // 0x00AFBE14-0x00AFBE54
	}

	[Serializable]
	[ComVisible] // 0x004B574C-0x004B5760
	public class CryptographicException : SystemException // TypeDefIndex: 802
	{
		// Constructors
		public CryptographicException(); // 0x00AFB784-0x00AFB7F4
		public CryptographicException(string message); // 0x00AFB880-0x00AFB8B0
		protected CryptographicException(SerializationInfo info, StreamingContext context); // 0x00AFB8B0-0x00AFB8B4
	}

	[Serializable]
	[ComVisible] // 0x004B5760-0x004B5774
	public class CryptographicUnexpectedOperationException : CryptographicException // TypeDefIndex: 803
	{
		// Constructors
		public CryptographicUnexpectedOperationException(); // 0x00AFB944-0x00AFB974
		public CryptographicUnexpectedOperationException(string message); // 0x00AFB974-0x00AFB9BC
		protected CryptographicUnexpectedOperationException(SerializationInfo info, StreamingContext context); // 0x00AFB9BC-0x00AFB9C0
	}

	[ComVisible] // 0x004B5774-0x004B5788
	public abstract class HashAlgorithm : ICryptoTransform // TypeDefIndex: 804
	{
		// Fields
		protected int HashSizeValue; // 0x10
		protected internal byte[] HashValue; // 0x18
		protected int State; // 0x20
		private bool m_bDisposed; // 0x24
	
		// Constructors
		protected HashAlgorithm(); // 0x00AFB9C0-0x00AFB9C8
	
		// Methods
		public byte[] ComputeHash(byte[] buffer); // 0x00AFB9C8-0x00AFBB08
		public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x00AFBB08-0x00AFBD3C
		public void Dispose(); // 0x00AFBD3C-0x00AFBDB8
		protected virtual void Dispose(bool disposing); // 0x00AFBDB8-0x00AFBDFC
		public abstract void Initialize();
		protected abstract void HashCore(byte[] array, int ibStart, int cbSize);
		protected abstract byte[] HashFinal();
	}

	[ComVisible] // 0x004B5788-0x004B579C
	public interface ICryptoTransform : IDisposable // TypeDefIndex: 805
	{
		// Methods
		byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
	}

	[ComVisible] // 0x004B579C-0x004B57B0
	public abstract class MD5 : HashAlgorithm // TypeDefIndex: 806
	{
		// Constructors
		protected MD5(); // 0x00AFBE54-0x00AFBE80
	
		// Methods
		public static MD5 Create(); // 0x00AFBE80-0x00AFBED8
	}

	[ComVisible] // 0x004B57B0-0x004B57C4
	public abstract class RandomNumberGenerator : IDisposable // TypeDefIndex: 807
	{
		// Constructors
		protected RandomNumberGenerator(); // 0x00AFD408-0x00AFD410
	
		// Methods
		public static RandomNumberGenerator Create(); // 0x00AFD754-0x00AFD7AC
		public void Dispose(); // 0x00AFD7AC-0x00AFD828
		protected virtual void Dispose(bool disposing); // 0x00AFD750-0x00AFD754
		public abstract void GetBytes(byte[] data);
	}

	[ComVisible] // 0x004B57C4-0x004B57D8
	public abstract class Rijndael : SymmetricAlgorithm // TypeDefIndex: 808
	{
		// Fields
		private static KeySizes[] s_legalBlockSizes; // 0x00
		private static KeySizes[] s_legalKeySizes; // 0x08
	
		// Constructors
		protected Rijndael(); // 0x00AFD828-0x00AFD8CC
		static Rijndael(); // 0x00AFD8FC-0x00AFDA60
	}

	[ComVisible] // 0x004B57D8-0x004B57EC
	public sealed class RijndaelManaged : Rijndael // TypeDefIndex: 809
	{
		// Constructors
		public RijndaelManaged(); // 0x00AFDA60-0x00AFDB28
	
		// Methods
		public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV); // 0x00AFDB28-0x00AFDB40
		public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV); // 0x00AFDC40-0x00AFDC58
		public override void GenerateKey(); // 0x00AFDC58-0x00AFDC90
		public override void GenerateIV(); // 0x00AFDD08-0x00AFDD40
		private ICryptoTransform NewEncryptor(byte[] rgbKey, CipherMode mode, byte[] rgbIV, int feedbackSize, RijndaelManagedTransformMode encryptMode); // 0x00AFDB40-0x00AFDC40
	}

	[Serializable]
	internal enum RijndaelManagedTransformMode // TypeDefIndex: 810
	{
		Encrypt = 0,
		Decrypt = 1
	}

	[ComVisible] // 0x004B57EC-0x004B5800
	public sealed class RijndaelManagedTransform : ICryptoTransform // TypeDefIndex: 811
	{
		// Fields
		private CipherMode m_cipherMode; // 0x10
		private PaddingMode m_paddingValue; // 0x14
		private RijndaelManagedTransformMode m_transformMode; // 0x18
		private int m_blockSizeBits; // 0x1C
		private int m_blockSizeBytes; // 0x20
		private int m_inputBlockSize; // 0x24
		private int m_outputBlockSize; // 0x28
		private int[] m_encryptKeyExpansion; // 0x30
		private int[] m_decryptKeyExpansion; // 0x38
		private int m_Nr; // 0x40
		private int m_Nb; // 0x44
		private int m_Nk; // 0x48
		private int[] m_encryptindex; // 0x50
		private int[] m_decryptindex; // 0x58
		private int[] m_IV; // 0x60
		private int[] m_lastBlockBuffer; // 0x68
		private byte[] m_depadBuffer; // 0x70
		private byte[] m_shiftRegister; // 0x78
		private static readonly byte[] s_Sbox; // 0x00
		private static readonly int[] s_Rcon; // 0x08
		private static readonly int[] s_T; // 0x10
		private static readonly int[] s_TF; // 0x18
		private static readonly int[] s_iT; // 0x20
		private static readonly int[] s_iTF; // 0x28
	
		// Properties
		public int InputBlockSize { get; } // 0x00AFE9B4-0x00AFE9BC 
	
		// Constructors
		internal RijndaelManagedTransform(byte[] rgbKey, CipherMode mode, byte[] rgbIV, int blockSize, int feedbackSize, PaddingMode PaddingValue, RijndaelManagedTransformMode transformMode); // 0x00AFDD40-0x00AFE364
		static RijndaelManagedTransform(); // 0x00B0078C-0x00B00908
	
		// Methods
		public void Dispose(); // 0x00AFE8E4-0x00AFE8EC
		private void Dispose(bool disposing); // 0x00AFE8EC-0x00AFE9B4
		public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x00AFE9BC-0x00AFEC90
		public void Reset(); // 0x00AFF7BC-0x00AFF834
		private int EncryptData(byte[] inputBuffer, int inputOffset, int inputCount, ref byte[] outputBuffer, int outputOffset, PaddingMode paddingMode, bool fLast); // 0x00AFEC90-0x00AFF7BC
		private int DecryptData(byte[] inputBuffer, int inputOffset, int inputCount, ref byte[] outputBuffer, int outputOffset, PaddingMode paddingMode, bool fLast); // 0x00AFF834-0x00B00284
		private unsafe void Enc(int* encryptindex, int* encryptKeyExpansion, int* T, int* TF, int* work, int* temp); // 0x00B00318-0x00B004B8
		private unsafe void Dec(int* decryptindex, int* decryptKeyExpansion, int* iT, int* iTF, int* work, int* temp); // 0x00B004B8-0x00B0066C
		private void GenerateKeyExpansion(byte[] rgbKey); // 0x00AFE364-0x00AFE8E4
		private static int rot1(int val); // 0x00B00784-0x00B0078C
		private static int rot2(int val); // 0x00B0077C-0x00B00784
		private static int rot3(int val); // 0x00B0066C-0x00B00674
		private static int SubWord(int a); // 0x00B00674-0x00B00758
		private static int MulX(int x); // 0x00B00758-0x00B0077C
	}

	[ComVisible] // 0x004B5800-0x004B5814
	public abstract class SHA1 : HashAlgorithm // TypeDefIndex: 812
	{
		// Constructors
		protected SHA1(); // 0x00B00908-0x00B00934
	
		// Methods
		public static SHA1 Create(); // 0x00B00934-0x00B0098C
	}

	[ComVisible] // 0x004B5814-0x004B5828
	public abstract class SymmetricAlgorithm : IDisposable // TypeDefIndex: 813
	{
		// Fields
		protected int BlockSizeValue; // 0x10
		protected int FeedbackSizeValue; // 0x14
		protected byte[] IVValue; // 0x18
		protected byte[] KeyValue; // 0x20
		protected KeySizes[] LegalBlockSizesValue; // 0x28
		protected KeySizes[] LegalKeySizesValue; // 0x30
		protected int KeySizeValue; // 0x38
		protected CipherMode ModeValue; // 0x3C
		protected PaddingMode PaddingValue; // 0x40
	
		// Properties
		public virtual byte[] IV { get; set; } // 0x00B021A8-0x00B02248 0x00B02248-0x00B02388
		public virtual byte[] Key { get; set; } // 0x00B02388-0x00B02428 0x00B02428-0x00B02568
		public virtual KeySizes[] LegalKeySizes { get; } // 0x00B02620-0x00B026A4 
		public virtual CipherMode Mode { set; } // 0x00B026A4-0x00B02750
		public virtual PaddingMode Padding { set; } // 0x00B02750-0x00B027FC
	
		// Constructors
		protected SymmetricAlgorithm(); // 0x00AFD8CC-0x00AFD8FC
	
		// Methods
		public void Dispose(); // 0x00B020D4-0x00B02150
		protected virtual void Dispose(bool disposing); // 0x00B02150-0x00B021A8
		public bool ValidKeySize(int bitLength); // 0x00B02568-0x00B02620
		public virtual ICryptoTransform CreateEncryptor(); // 0x00B027FC-0x00B02850
		public abstract ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV);
		public virtual ICryptoTransform CreateDecryptor(); // 0x00B02850-0x00B028A4
		public abstract ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV);
		public abstract void GenerateKey();
		public abstract void GenerateIV();
	}

	internal static class Utils // TypeDefIndex: 814
	{
		// Fields
		private static RNGCryptoServiceProvider _rng; // 0x00
	
		// Properties
		internal static RNGCryptoServiceProvider StaticRandomNumberGenerator { get; } // 0x00B00284-0x00B00318 
	
		// Methods
		internal static byte[] GenerateRandom(int keySize); // 0x00AFDC90-0x00AFDD08
	}

	[ComVisible] // 0x004B5828-0x004B583C
	public class CryptoConfig // TypeDefIndex: 815
	{
		// Properties
		[MonoLimitation] // 0x004BD6D4-0x004BD70C
		public static bool AllowOnlyFipsAlgorithms { get; } // 0x00A04984-0x00A0598C 
	
		// Methods
		public static byte[] EncodeOID(string str); // 0x00A043A8-0x00A047C8
		private static byte[] EncodeLongNumber(long x); // 0x00A047C8-0x00A04984
	}

	[ComVisible] // 0x004B583C-0x004B5850
	public sealed class MD5CryptoServiceProvider : MD5 // TypeDefIndex: 816
	{
		// Fields
		private uint[] _H; // 0x28
		private uint[] buff; // 0x30
		private ulong count; // 0x38
		private byte[] _ProcessingBuffer; // 0x40
		private int _ProcessingBufferCount; // 0x48
		private static readonly uint[] K; // 0x00
	
		// Constructors
		public MD5CryptoServiceProvider(); // 0x00AFBED8-0x00AFBF78
		static MD5CryptoServiceProvider(); // 0x00AFD298-0x00AFD314
	
		// Methods
		~MD5CryptoServiceProvider(); // 0x00AFBF78-0x00AFBFF0
		protected override void Dispose(bool disposing); // 0x00AFBFF0-0x00AFC080
		protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x00AFC080-0x00AFC184
		protected override byte[] HashFinal(); // 0x00AFCE44-0x00AFCF3C
		public override void Initialize(); // 0x00AFD0E8-0x00AFD194
		private void ProcessBlock(byte[] inputBuffer, int inputOffset); // 0x00AFC184-0x00AFCE44
		private void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x00AFCF3C-0x00AFD0E8
		internal void AddLength(ulong length, byte[] buffer, int position); // 0x00AFD194-0x00AFD298
	}

	public sealed class RNGCryptoServiceProvider : RandomNumberGenerator // TypeDefIndex: 817
	{
		// Fields
		private static object _lock; // 0x00
		private IntPtr _handle; // 0x10
	
		// Constructors
		static RNGCryptoServiceProvider(); // 0x00AFD314-0x00AFD388
		public RNGCryptoServiceProvider(); // 0x00AFD38C-0x00AFD408
	
		// Methods
		private void Check(); // 0x00AFD414-0x00AFD4B8
		private static bool RngOpen(); // 0x00AFD388-0x00AFD38C
		private static IntPtr RngInitialize(byte[] seed); // 0x00AFD410-0x00AFD414
		private static IntPtr RngGetBytes(IntPtr handle, byte[] data); // 0x00AFD4B8-0x00AFD4BC
		private static void RngClose(IntPtr handle); // 0x00AFD4BC-0x00AFD4C0
		public override void GetBytes(byte[] data); // 0x00AFD4C0-0x00AFD678
		~RNGCryptoServiceProvider(); // 0x00AFD678-0x00AFD74C
		protected override void Dispose(bool disposing); // 0x00AFD74C-0x00AFD750
	}

	internal class SHA1Internal // TypeDefIndex: 818
	{
		// Fields
		private uint[] _H; // 0x10
		private ulong count; // 0x18
		private byte[] _ProcessingBuffer; // 0x20
		private int _ProcessingBufferCount; // 0x28
		private uint[] buff; // 0x30
	
		// Constructors
		public SHA1Internal(); // 0x00B009FC-0x00B00A8C
	
		// Methods
		public void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x00B00B6C-0x00B00C70
		public byte[] HashFinal(); // 0x00B00C90-0x00B00D8C
		public void Initialize(); // 0x00B00DA4-0x00B00E70
		private void ProcessBlock(byte[] inputBuffer, uint inputOffset); // 0x00B00E70-0x00B01434
		private static void InitialiseBuff(uint[] buff, byte[] input, uint inputOffset); // 0x00B015E4-0x00B01CD8
		private static void FillBuff(uint[] buff); // 0x00B01CD8-0x00B01FD0
		private void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x00B01434-0x00B015E4
		internal void AddLength(ulong length, byte[] buffer, int position); // 0x00B01FD0-0x00B020D4
	}

	[ComVisible] // 0x004B5850-0x004B5864
	public sealed class SHA1CryptoServiceProvider : SHA1 // TypeDefIndex: 819
	{
		// Fields
		private SHA1Internal sha; // 0x28
	
		// Constructors
		public SHA1CryptoServiceProvider(); // 0x00B0098C-0x00B009FC
	
		// Methods
		~SHA1CryptoServiceProvider(); // 0x00B00A8C-0x00B00B04
		protected override void Dispose(bool disposing); // 0x00B00B04-0x00B00B48
		protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x00B00B48-0x00B00B6C
		protected override byte[] HashFinal(); // 0x00B00C70-0x00B00C90
		public override void Initialize(); // 0x00B00D8C-0x00B00DA4
	}
}

namespace System.Runtime.Versioning
{
	internal static class BinaryCompatibility // TypeDefIndex: 820
	{
		// Fields
		public static readonly bool TargetsAtLeast_Desktop_V4_5; // 0x00
		public static readonly bool TargetsAtLeast_Desktop_V4_5_1; // 0x01
	
		// Constructors
		static BinaryCompatibility(); // 0x009F8A78-0x009F8F10
	}
}

namespace System.Runtime.Serialization
{
	[Serializable]
	internal delegate void DeserializationEventHandler(object sender); // TypeDefIndex: 821; 0x00924980-0x00924D34

	[Serializable]
	internal delegate void SerializationEventHandler(StreamingContext context); // TypeDefIndex: 822; 0x009F3B98-0x009F3DF4

	[ComVisible] // 0x004B5864-0x004B5878
	public class FormatterConverter : IFormatterConverter // TypeDefIndex: 823
	{
		// Constructors
		public FormatterConverter(); // 0x00924F6C-0x00924F74
	
		// Methods
		public object Convert(object value, Type type); // 0x00924F74-0x00925064
		public bool ToBoolean(object value); // 0x00925064-0x00925144
		public int ToInt32(object value); // 0x00925144-0x00925224
		public long ToInt64(object value); // 0x00925224-0x00925304
		public float ToSingle(object value); // 0x00925304-0x009253E4
		public string ToString(object value); // 0x009253E4-0x009254C4
	}

	[ComVisible] // 0x004B5878-0x004B588C
	public static class FormatterServices // TypeDefIndex: 824
	{
		// Fields
		internal static ConcurrentDictionary<MemberHolder, MemberInfo[]> m_MemberInfoTable; // 0x00
		private static bool unsafeTypeForwardersIsEnabled; // 0x08
		private static bool unsafeTypeForwardersIsEnabledInitialized; // 0x09
		private static readonly Type[] advancedTypes; // 0x10
		private static Binder s_binder; // 0x18
	
		// Nested types
		[CompilerGenerated] // 0x004B588C-0x004B589C
		private sealed class __c__DisplayClass9_0 // TypeDefIndex: 825
		{
			// Fields
			public Type type; // 0x10
	
			// Constructors
			public __c__DisplayClass9_0(); // 0x00926460-0x00926468
	
			// Methods
			internal MemberInfo[] _GetSerializableMembers_b__0(MemberHolder _); // 0x00927760-0x00927810
		}
	
		// Constructors
		static FormatterServices(); // 0x009254C4-0x0092561C
	
		// Methods
		private static MemberInfo[] GetSerializableMembers(RuntimeType type); // 0x0092561C-0x009257C8
		private static bool CheckSerializable(RuntimeType type); // 0x009257C8-0x009257E8
		private static MemberInfo[] InternalGetSerializableMembers(RuntimeType type); // 0x009257E8-0x00925EB0
		private static bool GetParentTypes(RuntimeType parentType, out RuntimeType[] parentTypes, out int parentTypeCount); // 0x00925EB0-0x009261F8
		public static MemberInfo[] GetSerializableMembers(Type type, StreamingContext context); // 0x009261F8-0x00926460
		public static object GetUninitializedObject(Type type); // 0x00926468-0x00926634
		private static object nativeGetUninitializedObject(RuntimeType type); // 0x00926634-0x0092663C
		private static bool GetEnableUnsafeTypeForwarders(); // 0x0092663C-0x00926644
		internal static bool UnsafeTypeForwardersIsEnabled(); // 0x00926644-0x0092670C
		internal static void SerializationSetValue(MemberInfo fi, object target, object value); // 0x0092670C-0x009268EC
		public static object PopulateObjectMembers(object obj, MemberInfo[] members, object[] data); // 0x009268EC-0x00926BF4
		public static object[] GetObjectData(object obj, MemberInfo[] members); // 0x00926BF4-0x00926F40
		public static Type GetTypeFromAssembly(Assembly assem, string name); // 0x00926F40-0x00927008
		internal static Assembly LoadAssemblyFromString(string assemblyName); // 0x00927008-0x00927010
		internal static Assembly LoadAssemblyFromStringNoThrow(string assemblyName); // 0x00927010-0x009270F0
		internal static string GetClrAssemblyName(Type type, out bool hasTypeForwardedFrom); // 0x009270F0-0x00927268
		internal static string GetClrTypeFullName(Type type); // 0x00927268-0x00927310
		private static string GetClrTypeFullNameForArray(Type type); // 0x00927310-0x0092750C
		private static string GetClrTypeFullNameForNonArrayTypes(Type type); // 0x0092750C-0x00927760
	}

	internal sealed class SurrogateForCyclicalReference // TypeDefIndex: 826
	{
	}

	[ComVisible] // 0x004B589C-0x004B58B0
	public interface IDeserializationCallback // TypeDefIndex: 827
	{
		// Methods
		void OnDeserialization(object sender);
	}

	[CLSCompliant] // 0x004B58B0-0x004B58F0
	[ComVisible] // 0x004B58B0-0x004B58F0
	public interface IFormatterConverter // TypeDefIndex: 828
	{
		// Methods
		object Convert(object value, Type type);
		bool ToBoolean(object value);
		int ToInt32(object value);
		long ToInt64(object value);
		float ToSingle(object value);
		string ToString(object value);
	}

	[ComVisible] // 0x004B58F0-0x004B5904
	public interface IObjectReference // TypeDefIndex: 829
	{
		// Methods
		object GetRealObject(StreamingContext context);
	}

	[ComVisible] // 0x004B5904-0x004B5918
	public interface ISerializable // TypeDefIndex: 830
	{
		// Methods
		void GetObjectData(SerializationInfo info, StreamingContext context);
	}

	[ComVisible] // 0x004B5918-0x004B592C
	public interface ISerializationSurrogate // TypeDefIndex: 831
	{
		// Methods
		void GetObjectData(object obj, SerializationInfo info, StreamingContext context);
		object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector);
	}

	[ComVisible] // 0x004B592C-0x004B5940
	public interface ISurrogateSelector // TypeDefIndex: 832
	{
		// Methods
		ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector selector);
	}

	[Serializable]
	internal class MemberHolder // TypeDefIndex: 833
	{
		// Fields
		internal Type memberType; // 0x10
		internal StreamingContext context; // 0x18
	
		// Constructors
		internal MemberHolder(Type type, StreamingContext ctx); // 0x009EF36C-0x009EF3AC
	
		// Methods
		public override int GetHashCode(); // 0x009EF3AC-0x009EF3CC
		public override bool Equals(object obj); // 0x009EF3CC-0x009EF47C
	}

	[Serializable]
	[ComVisible] // 0x004B5940-0x004B5954
	public class ObjectIDGenerator // TypeDefIndex: 834
	{
		// Fields
		internal int m_currentCount; // 0x10
		internal int m_currentSize; // 0x14
		internal long[] m_ids; // 0x18
		internal object[] m_objs; // 0x20
		private static readonly int[] sizes; // 0x00
	
		// Constructors
		public ObjectIDGenerator(); // 0x009F0B08-0x009F0BE8
		static ObjectIDGenerator(); // 0x009F127C-0x009F12F8
	
		// Methods
		private int FindElement(object obj, out bool found); // 0x009F0BE8-0x009F0CC8
		public virtual long GetId(object obj, out bool firstTime); // 0x009F0CC8-0x009F0E98
		public virtual long HasId(object obj, out bool firstTime); // 0x009F115C-0x009F127C
		private void Rehash(); // 0x009F0E98-0x009F115C
	}

	[ComVisible] // 0x004B5954-0x004B5968
	public class ObjectManager // TypeDefIndex: 835
	{
		// Fields
		private DeserializationEventHandler m_onDeserializationHandler; // 0x10
		private SerializationEventHandler m_onDeserializedHandler; // 0x18
		internal ObjectHolder[] m_objects; // 0x20
		internal object m_topObject; // 0x28
		internal ObjectHolderList m_specialFixupObjects; // 0x30
		internal long m_fixupCount; // 0x38
		internal ISurrogateSelector m_selector; // 0x40
		internal StreamingContext m_context; // 0x48
	
		// Properties
		internal object TopObject { get; set; } // 0x009F1390-0x009F1398 0x009F1388-0x009F1390
		internal ObjectHolderList SpecialFixupObjects { get; } // 0x009F1398-0x009F1404 
	
		// Constructors
		internal ObjectManager(ISurrogateSelector selector, StreamingContext context, bool checkSecurity, bool isCrossAppDomain); // 0x009F12F8-0x009F1380
	
		// Methods
		private bool CanCallGetType(object obj); // 0x009F1380-0x009F1388
		internal ObjectHolder FindObjectHolder(long objectID); // 0x009F1404-0x009F1470
		internal ObjectHolder FindOrCreateObjectHolder(long objectID); // 0x009EFB1C-0x009EFBC8
		private void AddObjectHolder(ObjectHolder holder); // 0x009F1470-0x009F15BC
		private bool GetCompletionInfo(FixupHolder fixup, out ObjectHolder holder, out object member, bool bThrowIfMissing); // 0x009F15BC-0x009F1890
		private void FixupSpecialObject(ObjectHolder holder); // 0x009F1890-0x009F1AFC
		private bool ResolveObjectReference(ObjectHolder holder); // 0x009F23BC-0x009F2664
		private bool DoValueTypeFixup(FieldInfo memberToFix, ObjectHolder holder, object value); // 0x009F1D7C-0x009F22DC
		internal void CompleteObject(ObjectHolder holder, bool bObjectFullyComplete); // 0x009F0088-0x009F06DC
		private void DoNewlyRegisteredObjectFixups(ObjectHolder holder); // 0x009F22DC-0x009F23BC
		public virtual object GetObject(long objectID); // 0x009F2758-0x009F2844
		internal void RegisterString(string obj, long objectID, SerializationInfo info, long idOfContainingObj, MemberInfo member); // 0x009F2844-0x009F2938
		public void RegisterObject(object obj, long objectID, SerializationInfo info, long idOfContainingObj, MemberInfo member, int[] arrayIndex); // 0x009F2938-0x009F2EA4
		internal void CompleteISerializableObject(object obj, SerializationInfo info, StreamingContext context); // 0x009F1AFC-0x009F1D7C
		internal static RuntimeConstructorInfo GetConstructor(RuntimeType t); // 0x009F2EA4-0x009F2FF0
		public virtual void DoFixups(); // 0x009F31F0-0x009F34FC
		private void RegisterFixup(FixupHolder fixup, long objectToBeFixed, long objectRequired); // 0x009F34FC-0x009F3614
		public virtual void RecordFixup(long objectToBeFixed, MemberInfo member, long objectRequired); // 0x009F3614-0x009F3898
		public virtual void RecordDelayedFixup(long objectToBeFixed, string memberName, long objectRequired); // 0x009F3898-0x009F39F4
		public virtual void RecordArrayElementFixup(long arrayToBeFixed, int[] indices, long objectRequired); // 0x009F39F4-0x009F3B50
		public virtual void RaiseDeserializationEvent(); // 0x009F3B50-0x009F3B98
		internal virtual void AddOnDeserialization(DeserializationEventHandler handler); // 0x009F3DF4-0x009F3E74
		internal virtual void AddOnDeserialized(object obj); // 0x009F3E74-0x009F3F1C
		internal virtual void RaiseOnDeserializedEvent(object obj); // 0x009F43C4-0x009F4464
		public void RaiseOnDeserializingEvent(object obj); // 0x009F46A4-0x009F4744
	}

	internal sealed class ObjectHolder // TypeDefIndex: 836
	{
		// Fields
		private object m_object; // 0x10
		internal long m_id; // 0x18
		private int m_missingElementsRemaining; // 0x20
		private int m_missingDecendents; // 0x24
		internal SerializationInfo m_serInfo; // 0x28
		internal ISerializationSurrogate m_surrogate; // 0x30
		internal FixupHolderList m_missingElements; // 0x38
		internal LongList m_dependentObjects; // 0x40
		internal ObjectHolder m_next; // 0x48
		internal int m_flags; // 0x50
		private bool m_markForFixupWhenAvailable; // 0x54
		private ValueTypeFixupInfo m_valueFixup; // 0x58
		private TypeLoadExceptionHolder m_typeLoad; // 0x60
		private bool m_reachable; // 0x68
	
		// Properties
		internal bool IsIncompleteObjectReference { get; set; } // 0x009EFED0-0x009EFEDC 0x009EFEDC-0x009EFEF8
		internal bool RequiresDelayedFixup { get; } // 0x009EFEF8-0x009EFF08 
		internal bool RequiresValueTypeFixup { get; } // 0x009EF9AC-0x009EF9B8 
		internal bool ValueTypeFixupPerformed { get; set; } // 0x009EFF08-0x009EFF40 0x009EFF40-0x009EFF54
		internal bool HasISerializable { get; } // 0x009EFF54-0x009EFF60 
		internal bool HasSurrogate { get; } // 0x009EFF60-0x009EFF6C 
		internal bool CanSurrogatedObjectValueChange { get; } // 0x009EFF6C-0x009F0018 
		internal bool CanObjectValueChange { get; } // 0x009F0018-0x009F0038 
		internal int DirectlyDependentObjects { get; } // 0x009F0038-0x009F0040 
		internal int TotalDependentObjects { get; } // 0x009F0040-0x009F004C 
		internal bool Reachable { get; set; } // 0x009F004C-0x009F0054 0x009F0054-0x009F0060
		internal bool TypeLoadExceptionReachable { get; } // 0x009F0060-0x009F0070 
		internal TypeLoadExceptionHolder TypeLoadException { get; set; } // 0x009F0070-0x009F0078 0x009F0078-0x009F0080
		internal object ObjectValue { get; } // 0x009F0080-0x009F0088 
		internal SerializationInfo SerializationInfo { get; set; } // 0x009F06DC-0x009F06E4 0x009F06E4-0x009F06EC
		internal ISerializationSurrogate Surrogate { get; } // 0x009F06EC-0x009F06F4 
		internal LongList DependentObjects { get; set; } // 0x009F06F4-0x009F06FC 0x009F06FC-0x009F0704
		internal bool RequiresSerInfoFixup { get; set; } // 0x009F0704-0x009F0720 0x009F0720-0x009F073C
		internal ValueTypeFixupInfo ValueFixup { get; } // 0x009F073C-0x009F0744 
		internal bool CompletelyFixed { get; } // 0x009F0744-0x009F0768 
		internal long ContainerID { get; } // 0x009EFB04-0x009EFB1C 
	
		// Constructors
		internal ObjectHolder(long objID); // 0x009EF47C-0x009EF4B8
		internal ObjectHolder(object obj, long objID, SerializationInfo info, ISerializationSurrogate surrogate, long idOfContainingObj, FieldInfo field, int[] arrayIndex); // 0x009EF5A4-0x009EF760
		internal ObjectHolder(string obj, long objID, SerializationInfo info, ISerializationSurrogate surrogate, long idOfContainingObj, FieldInfo field, int[] arrayIndex); // 0x009EF4B8-0x009EF5A4
	
		// Methods
		private void IncrementDescendentFixups(int amount); // 0x009EF974-0x009EF984
		internal void DecrementFixupsRemaining(ObjectManager manager); // 0x009EF984-0x009EF9AC
		internal void RemoveDependency(long id); // 0x009EFA24-0x009EFA3C
		internal void AddFixup(FixupHolder fixup, ObjectManager manager); // 0x009EFA3C-0x009EFB04
		private void UpdateDescendentDependencyChain(int amount, ObjectManager manager); // 0x009EF9B8-0x009EFA24
		internal void AddDependency(long dependentObject); // 0x009EFBC8-0x009EFC50
		internal void UpdateData(object obj, SerializationInfo info, ISerializationSurrogate surrogate, long idOfContainer, FieldInfo field, int[] arrayIndex, ObjectManager manager); // 0x009EFC50-0x009EFDF0
		internal void MarkForCompletionWhenAvailable(); // 0x009EFEC4-0x009EFED0
		internal void SetFlags(); // 0x009EF8C0-0x009EF974
		internal void SetObjectValue(object obj, ObjectManager manager); // 0x009EFDF0-0x009EFEC4
	}

	[Serializable]
	internal class FixupHolder // TypeDefIndex: 837
	{
		// Fields
		internal long m_id; // 0x10
		internal object m_fixupInfo; // 0x18
		internal int m_fixupType; // 0x20
	
		// Constructors
		internal FixupHolder(long id, object fixupInfo, int fixupType); // 0x00924D64-0x00924DA4
	}

	[Serializable]
	internal class FixupHolderList // TypeDefIndex: 838
	{
		// Fields
		internal FixupHolder[] m_values; // 0x10
		internal int m_count; // 0x18
	
		// Constructors
		internal FixupHolderList(); // 0x00924DA4-0x00924DAC
		internal FixupHolderList(int startingSize); // 0x00924DAC-0x00924E20
	
		// Methods
		internal virtual void Add(FixupHolder fixup); // 0x00924E20-0x00924ED8
		private void EnlargeArray(); // 0x00924ED8-0x00924F6C
	}

	[Serializable]
	internal class LongList // TypeDefIndex: 839
	{
		// Fields
		private long[] m_values; // 0x10
		private int m_count; // 0x18
		private int m_totalItems; // 0x1C
		private int m_currentItem; // 0x20
	
		// Properties
		internal int Count { get; } // 0x009EF1FC-0x009EF204 
		internal long Current { get; } // 0x009EF280-0x009EF2C8 
	
		// Constructors
		internal LongList(); // 0x009EF058-0x009EF060
		internal LongList(int startingSize); // 0x009EF060-0x009EF0D4
	
		// Methods
		internal void Add(long value); // 0x009EF0D4-0x009EF168
		internal void StartEnumeration(); // 0x009EF204-0x009EF210
		internal bool MoveNext(); // 0x009EF210-0x009EF280
		internal bool RemoveElement(long value); // 0x009EF2C8-0x009EF36C
		private void EnlargeArray(); // 0x009EF168-0x009EF1FC
	}

	internal class ObjectHolderList // TypeDefIndex: 840
	{
		// Fields
		internal ObjectHolder[] m_values; // 0x10
		internal int m_count; // 0x18
	
		// Properties
		internal int Version { get; } // 0x009F09EC-0x009F09F4 
		internal int Count { get; } // 0x009F09F4-0x009F09FC 
	
		// Constructors
		internal ObjectHolderList(); // 0x009F0768-0x009F0770
		internal ObjectHolderList(int startingSize); // 0x009F0770-0x009F07E4
	
		// Methods
		internal virtual void Add(ObjectHolder value); // 0x009F07E4-0x009F089C
		internal ObjectHolderListEnumerator GetFixupEnumerator(); // 0x009F0930-0x009F0994
		private void EnlargeArray(); // 0x009F089C-0x009F0930
	}

	internal class ObjectHolderListEnumerator // TypeDefIndex: 841
	{
		// Fields
		private bool m_isFixupEnumerator; // 0x10
		private ObjectHolderList m_list; // 0x18
		private int m_startingVersion; // 0x20
		private int m_currPos; // 0x24
	
		// Properties
		internal ObjectHolder Current { get; } // 0x009F0AB8-0x009F0B08 
	
		// Constructors
		internal ObjectHolderListEnumerator(ObjectHolderList list, bool isFixupEnumerator); // 0x009F0994-0x009F09EC
	
		// Methods
		internal bool MoveNext(); // 0x009F09FC-0x009F0AB8
	}

	internal class TypeLoadExceptionHolder // TypeDefIndex: 842
	{
		// Fields
		private string m_typeName; // 0x10
	
		// Properties
		internal string TypeName { get; } // 0x009F8A58-0x009F8A60 
	
		// Constructors
		internal TypeLoadExceptionHolder(string typeName); // 0x009F8A2C-0x009F8A58
	}

	public sealed class SafeSerializationEventArgs : EventArgs // TypeDefIndex: 843
	{
		// Fields
		private StreamingContext m_streamingContext; // 0x10
		private List<object> m_serializedStates; // 0x20
	
		// Properties
		internal IList<object> SerializedStates { get; } // 0x009F4B00-0x009F4B08 
	
		// Constructors
		internal SafeSerializationEventArgs(StreamingContext streamingContext); // 0x009F4A58-0x009F4B00
	}

	public interface ISafeSerializationData // TypeDefIndex: 844
	{
		// Methods
		void CompleteDeserialization(object deserialized);
	}

	[Serializable]
	internal sealed class SafeSerializationManager : IObjectReference, ISerializable // TypeDefIndex: 845
	{
		// Fields
		private IList<object> m_serializedStates; // 0x10
		private SerializationInfo m_savedSerializationInfo; // 0x18
		private object m_realObject; // 0x20
		private RuntimeType m_realType; // 0x28
		[CompilerGenerated] // 0x004B9A5C-0x004B9A6C
		private EventHandler<SafeSerializationEventArgs> SerializeObjectState; // 0x30
	
		// Properties
		internal bool IsActive { get; } // 0x009F4FF0-0x009F5000 
	
		// Constructors
		internal SafeSerializationManager(); // 0x009F4B08-0x009F4B10
		private SafeSerializationManager(SerializationInfo info, StreamingContext context); // 0x009F4B10-0x009F4CBC
	
		// Methods
		internal void CompleteSerialization(object serializedObject, SerializationInfo info, StreamingContext context); // 0x009F5000-0x009F5168
		internal void CompleteDeserialization(object deserializedObject); // 0x009F5394-0x009F56CC
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x009F56CC-0x009F5778
		object IObjectReference.GetRealObject(StreamingContext context); // 0x009F5778-0x009F5A18
		[OnDeserialized] // 0x004BC680-0x004BC690
		private void OnDeserialized(StreamingContext context); // 0x009F5A18-0x009F5AC4
	}

	[AttributeUsage] // 0x004B5968-0x004B59B4
	[ComVisible] // 0x004B5968-0x004B59B4
	public sealed class OptionalFieldAttribute : Attribute // TypeDefIndex: 846
	{
		// Fields
		private int versionAdded; // 0x10
	
		// Properties
		public int VersionAdded { set; } // 0x009F49AC-0x009F4A58
	
		// Constructors
		public OptionalFieldAttribute(); // 0x009F499C-0x009F49AC
	}

	[AttributeUsage] // 0x004B59B4-0x004B5A00
	[ComVisible] // 0x004B59B4-0x004B5A00
	public sealed class OnSerializingAttribute : Attribute // TypeDefIndex: 847
	{
		// Constructors
		public OnSerializingAttribute(); // 0x009F4994-0x009F499C
	}

	[AttributeUsage] // 0x004B5A00-0x004B5A48
	[ComVisible] // 0x004B5A00-0x004B5A48
	public sealed class OnSerializedAttribute : Attribute // TypeDefIndex: 848
	{
	}

	[AttributeUsage] // 0x004B5A48-0x004B5A94
	[ComVisible] // 0x004B5A48-0x004B5A94
	public sealed class OnDeserializingAttribute : Attribute // TypeDefIndex: 849
	{
		// Constructors
		public OnDeserializingAttribute(); // 0x009F498C-0x009F4994
	}

	[AttributeUsage] // 0x004B5A94-0x004B5AE0
	[ComVisible] // 0x004B5A94-0x004B5AE0
	public sealed class OnDeserializedAttribute : Attribute // TypeDefIndex: 850
	{
		// Constructors
		public OnDeserializedAttribute(); // 0x009F4984-0x009F498C
	}

	[Serializable]
	[ComVisible] // 0x004B5AE0-0x004B5AF4
	public abstract class SerializationBinder // TypeDefIndex: 851
	{
		// Constructors
		protected SerializationBinder(); // 0x009F5AD0-0x009F5AF4
	
		// Methods
		public virtual void BindToName(Type serializedType, out string assemblyName, out string typeName); // 0x009F5AC4-0x009F5AD0
		public abstract Type BindToType(string assemblyName, string typeName);
	}

	internal class SerializationEvents // TypeDefIndex: 852
	{
		// Fields
		private List<MethodInfo> m_OnSerializingMethods; // 0x10
		private List<MethodInfo> m_OnSerializedMethods; // 0x18
		private List<MethodInfo> m_OnDeserializingMethods; // 0x20
		private List<MethodInfo> m_OnDeserializedMethods; // 0x28
	
		// Properties
		internal bool HasOnSerializingEvents { get; } // 0x009F5E94-0x009F5EB4 
	
		// Constructors
		internal SerializationEvents(Type t); // 0x009F5D88-0x009F5E94
	
		// Methods
		private List<MethodInfo> GetMethodsWithAttribute(Type attribute, Type t); // 0x009F5B9C-0x009F5D88
		internal void InvokeOnSerializing(object obj, StreamingContext context); // 0x009F5EB4-0x009F60F4
		internal void InvokeOnDeserializing(object obj, StreamingContext context); // 0x009F4744-0x009F4984
		internal void InvokeOnDeserialized(object obj, StreamingContext context); // 0x009F4464-0x009F46A4
		internal SerializationEventHandler AddOnSerialized(object obj, SerializationEventHandler handler); // 0x009F60F4-0x009F6304
		internal SerializationEventHandler AddOnDeserialized(object obj, SerializationEventHandler handler); // 0x009F41B4-0x009F43C4
	}

	internal static class SerializationEventsCache // TypeDefIndex: 853
	{
		// Fields
		private static Hashtable cache; // 0x00
	
		// Constructors
		static SerializationEventsCache(); // 0x009F6304-0x009F6370
	
		// Methods
		internal static SerializationEvents GetSerializationEventsForType(Type t); // 0x009F3F1C-0x009F41B4
	}

	[Serializable]
	[ComVisible] // 0x004B5AF4-0x004B5B08
	public class SerializationException : SystemException // TypeDefIndex: 854
	{
		// Fields
		private static string _nullMessage; // 0x00
	
		// Constructors
		public SerializationException(); // 0x009F6370-0x009F63F8
		public SerializationException(string message); // 0x009EF024-0x009EF058
		public SerializationException(string message, Exception innerException); // 0x009F2FF0-0x009F3024
		protected SerializationException(SerializationInfo info, StreamingContext context); // 0x009F63F8-0x009F6400
		static SerializationException(); // 0x009F6400-0x009F6464
	}

	internal sealed class SerializationFieldInfo : FieldInfo // TypeDefIndex: 855
	{
		// Fields
		private RuntimeFieldInfo m_field; // 0x10
		private string m_serializationName; // 0x18
	
		// Properties
		public override Module Module { get; } // 0x009F6464-0x009F6488 
		public override int MetadataToken { get; } // 0x009F6488-0x009F64AC 
		public override string Name { get; } // 0x009F6548-0x009F6550 
		public override Type DeclaringType { get; } // 0x009F6550-0x009F6570 
		public override Type ReflectedType { get; } // 0x009F6570-0x009F6590 
		public override Type FieldType { get; } // 0x009F65FC-0x009F6620 
		internal RuntimeFieldInfo FieldInfo { get; } // 0x009F6898-0x009F68A0 
		public override RuntimeFieldHandle FieldHandle { get; } // 0x009F68A0-0x009F68C4 
		public override FieldAttributes Attributes { get; } // 0x009F68C4-0x009F68E8 
	
		// Constructors
		internal SerializationFieldInfo(RuntimeFieldInfo field, string namePrefix); // 0x009F64AC-0x009F6548
	
		// Methods
		public override object[] GetCustomAttributes(bool inherit); // 0x009F6590-0x009F65B4
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x009F65B4-0x009F65D8
		public override bool IsDefined(Type attributeType, bool inherit); // 0x009F65D8-0x009F65FC
		public override object GetValue(object obj); // 0x009F6620-0x009F6644
		internal object InternalGetValue(object obj); // 0x009F6644-0x009F6738
		public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture); // 0x009F6738-0x009F675C
		internal void InternalSetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture); // 0x009F675C-0x009F6898
	}

	[ComVisible] // 0x004B5B08-0x004B5B1C
	public sealed class SerializationInfo // TypeDefIndex: 856
	{
		// Fields
		private const int defaultSize = 4; // Metadata: 0x001E0F4A
		private const string s_mscorlibAssemblySimpleName = "mscorlib"; // Metadata: 0x001E0F4E
		private const string s_mscorlibFileName = "mscorlib.dll"; // Metadata: 0x001E0F5A
		internal string[] m_members; // 0x10
		internal object[] m_data; // 0x18
		internal Type[] m_types; // 0x20
		private Dictionary<string, int> m_nameToIndex; // 0x28
		internal int m_currMember; // 0x30
		internal IFormatterConverter m_converter; // 0x38
		private string m_fullTypeName; // 0x40
		private string m_assemName; // 0x48
		private Type objectType; // 0x50
		private bool isFullTypeNameSetExplicit; // 0x58
		private bool isAssemblyNameSetExplicit; // 0x59
		private bool requireSameTokenInPartialTrust; // 0x5A
	
		// Properties
		public string FullTypeName { get; } // 0x009F6A90-0x009F6A98 
		public string AssemblyName { get; } // 0x009F6A98-0x009F6AA0 
		public int MemberCount { get; } // 0x009F6C5C-0x009F6C64 
		public Type ObjectType { get; } // 0x009F6C64-0x009F6C6C 
		public bool IsFullTypeNameSetExplicit { get; } // 0x009F6C6C-0x009F6C74 
		public bool IsAssemblyNameSetExplicit { get; } // 0x009F6C74-0x009F6C7C 
	
		// Constructors
		[CLSCompliant] // 0x004BC690-0x004BC6A4
		public SerializationInfo(Type type, IFormatterConverter converter); // 0x009F68E8-0x009F68F0
		[CLSCompliant] // 0x004BC6A4-0x004BC6B8
		public SerializationInfo(Type type, IFormatterConverter converter, bool requireSameTokenInPartialTrust); // 0x009F68F0-0x009F6A90
	
		// Methods
		public void SetType(Type type); // 0x009F5238-0x009F5394
		private static bool Compare(byte[] a, byte[] b); // 0x009F6AA4-0x009F6B34
		internal static void DemandForUnsafeAssemblyNameAssignments(string originalAssemblyName, string newAssemblyName); // 0x009F6AA0-0x009F6AA4
		internal static bool IsAssemblyNameAssignmentSafe(string originalAssemblyName, string newAssemblyName); // 0x009F6B34-0x009F6C5C
		public SerializationInfoEnumerator GetEnumerator(); // 0x009F6C7C-0x009F6D10
		private void ExpandArrays(); // 0x009F6D6C-0x009F6E68
		public void AddValue(string name, object value, Type type); // 0x009F5168-0x009F5238
		public void AddValue(string name, object value); // 0x009F704C-0x009F7108
		public void AddValue(string name, bool value); // 0x009F7108-0x009F71CC
		public void AddValue(string name, char value); // 0x009F71CC-0x009F7290
		public void AddValue(string name, byte value); // 0x009F7290-0x009F7354
		public void AddValue(string name, short value); // 0x009F7354-0x009F7418
		public void AddValue(string name, int value); // 0x009F7418-0x009F74DC
		public void AddValue(string name, long value); // 0x009F74DC-0x009F75A0
		[CLSCompliant] // 0x004BC6B8-0x004BC6CC
		public void AddValue(string name, ulong value); // 0x009F75A0-0x009F7664
		public void AddValue(string name, float value); // 0x009F7664-0x009F7728
		public void AddValue(string name, DateTime value); // 0x009F7728-0x009F77EC
		internal void AddValueInternal(string name, object value, Type type); // 0x009F6E68-0x009F704C
		internal void UpdateValue(string name, object value, Type type); // 0x009F2664-0x009F2758
		private int FindElement(string name); // 0x009F77EC-0x009F78B0
		private object GetElement(string name, out Type foundType); // 0x009F78B0-0x009F79FC
		[ComVisible] // 0x004BC6CC-0x004BC6E0
		private object GetElementNoThrow(string name, out Type foundType); // 0x009F79FC-0x009F7A8C
		public object GetValue(string name, Type type); // 0x009F4DEC-0x009F4FF0
		[ComVisible] // 0x004BC6E0-0x004BC6F4
		internal object GetValueNoThrow(string name, Type type); // 0x009F4CBC-0x009F4DE0
		public bool GetBoolean(string name); // 0x009F7A8C-0x009F7C04
		public int GetInt32(string name); // 0x009F7C04-0x009F7D70
		public long GetInt64(string name); // 0x009F7D70-0x009F7EDC
		public float GetSingle(string name); // 0x009F7EDC-0x009F8048
		public string GetString(string name); // 0x009F8048-0x009F81AC
	}

	[ComVisible] // 0x004B5B1C-0x004B5B30
	public struct SerializationEntry // TypeDefIndex: 857
	{
		// Fields
		private Type m_type; // 0x00
		private object m_value; // 0x08
		private string m_name; // 0x10
	
		// Properties
		public object Value { get; } // 0x00588020-0x00588028 
		public string Name { get; } // 0x00588028-0x00588030 
	
		// Constructors
		internal SerializationEntry(string entryName, object entryValue, Type entryType); // 0x00588030-0x005881D8
	}

	[ComVisible] // 0x004B5B30-0x004B5B44
	public sealed class SerializationInfoEnumerator : IEnumerator // TypeDefIndex: 858
	{
		// Fields
		private string[] m_members; // 0x10
		private object[] m_data; // 0x18
		private Type[] m_types; // 0x20
		private int m_numItems; // 0x28
		private int m_currItem; // 0x2C
		private bool m_current; // 0x30
	
		// Properties
		object IEnumerator.Current { get; } // 0x009F81D8-0x009F8308 
		public SerializationEntry Current { get; } // 0x009F8308-0x009F8428 
		public string Name { get; } // 0x009F8438-0x009F850C 
		public object Value { get; } // 0x009F850C-0x009F85E0 
		public Type ObjectType { get; } // 0x009F85E0-0x009F86B4 
	
		// Constructors
		internal SerializationInfoEnumerator(string[] members, object[] info, Type[] types, int numItems); // 0x009F6D10-0x009F6D6C
	
		// Methods
		public bool MoveNext(); // 0x009F81AC-0x009F81D8
		public void Reset(); // 0x009F8428-0x009F8438
	}

	public sealed class SerializationObjectManager // TypeDefIndex: 859
	{
		// Fields
		private Hashtable m_objectSeenTable; // 0x10
		private SerializationEventHandler m_onSerializedHandler; // 0x18
		private StreamingContext m_context; // 0x20
	
		// Constructors
		public SerializationObjectManager(StreamingContext context); // 0x009F86B4-0x009F8754
	
		// Methods
		public void RegisterObject(object obj); // 0x009F8754-0x009F8884
		public void RaiseOnSerializedEvent(); // 0x009F892C-0x009F8A2C
		private void AddOnSerialized(object obj); // 0x009F8884-0x009F892C
	}

	[Serializable]
	[ComVisible] // 0x004B5B44-0x004B5B58
	public struct StreamingContext // TypeDefIndex: 860
	{
		// Fields
		internal object m_additionalContext; // 0x00
		internal StreamingContextStates m_state; // 0x08
	
		// Properties
		public StreamingContextStates State { get; } // 0x00588200-0x00588208 
	
		// Constructors
		public StreamingContext(StreamingContextStates state); // 0x005881D8-0x005881E4
		public StreamingContext(StreamingContextStates state, object additional); // 0x005881E4-0x005881F0
	
		// Methods
		public override bool Equals(object obj); // 0x005881F0-0x005881F8
		public override int GetHashCode(); // 0x005881F8-0x00588200
	}

	[Serializable]
	[ComVisible] // 0x004B5B58-0x004B5B94
	[Flags] // 0x004B5B58-0x004B5B94
	public enum StreamingContextStates // TypeDefIndex: 861
	{
		CrossProcess = 1,
		CrossMachine = 2,
		File = 4,
		Persistence = 8,
		Remoting = 16,
		Other = 32,
		Clone = 64,
		CrossAppDomain = 128,
		All = 255
	}

	internal class ValueTypeFixupInfo // TypeDefIndex: 862
	{
		// Fields
		private long m_containerID; // 0x10
		private FieldInfo m_parentField; // 0x18
		private int[] m_parentIndex; // 0x20
	
		// Properties
		public long ContainerID { get; } // 0x009F8A60-0x009F8A68 
		public FieldInfo ParentField { get; } // 0x009F8A68-0x009F8A70 
		public int[] ParentIndex { get; } // 0x009F8A70-0x009F8A78 
	
		// Constructors
		public ValueTypeFixupInfo(long containerID, FieldInfo member, int[] parentIndex); // 0x009EF760-0x009EF8C0
	}
}

namespace System.Runtime.Serialization.Formatters
{
	[Serializable]
	[ComVisible] // 0x004B5B94-0x004B5BA8
	public enum FormatterTypeStyle // TypeDefIndex: 863
	{
		TypesWhenNeeded = 0,
		TypesAlways = 1,
		XsdString = 2
	}

	[Serializable]
	[ComVisible] // 0x004B5BA8-0x004B5BBC
	public enum FormatterAssemblyStyle // TypeDefIndex: 864
	{
		Simple = 0,
		Full = 1
	}

	[ComVisible] // 0x004B5BBC-0x004B5BD0
	public enum TypeFilterLevel // TypeDefIndex: 865
	{
		Low = 2,
		Full = 3
	}
}

namespace System.Runtime.Serialization.Formatters.Binary
{
	internal static class BinaryConverter // TypeDefIndex: 866
	{
		// Methods
		internal static BinaryTypeEnum GetBinaryTypeInfo(Type type, WriteObjectInfo objectInfo, string typeName, ObjectWriter objectWriter, out object typeInformation, out int assemId); // 0x009285BC-0x009288DC
		internal static BinaryTypeEnum GetParserBinaryTypeInfo(Type type, out object typeInformation); // 0x00928D24-0x00928F34
		internal static void WriteTypeInfo(BinaryTypeEnum binaryTypeEnum, object typeInformation, int assemId, __BinaryWriter sout); // 0x00927B00-0x00927D28
		internal static object ReadTypeInfo(BinaryTypeEnum binaryTypeEnum, __BinaryParser input, out int assemId); // 0x00928130-0x00928330
		internal static void TypeFromInfo(BinaryTypeEnum binaryTypeEnum, object typeInformation, ObjectReader objectReader, BinaryAssemblyInfo assemblyInfo, out InternalPrimitiveTypeE primitiveTypeEnum, out string typeString, out Type type, out bool isVariant); // 0x00929084-0x0092942C
	}

	internal static class IOUtil // TypeDefIndex: 867
	{
		// Methods
		internal static bool FlagTest(MessageEnum flag, MessageEnum target); // 0x0092AD08-0x0092AD14
		internal static void WriteStringWithCode(string value, __BinaryWriter sout); // 0x0092ACA4-0x0092AD08
		internal static void WriteWithCode(Type type, object value, __BinaryWriter sout); // 0x0092AD14-0x0092AE44
	}

	internal sealed class BinaryAssemblyInfo // TypeDefIndex: 868
	{
		// Fields
		internal string assemblyString; // 0x10
		private Assembly assembly; // 0x18
	
		// Constructors
		internal BinaryAssemblyInfo(string assemblyString); // 0x00928428-0x00928454
		internal BinaryAssemblyInfo(string assemblyString, Assembly assembly); // 0x00928454-0x0092848C
	
		// Methods
		internal Assembly GetAssembly(); // 0x0092848C-0x009285BC
	}

	internal sealed class SerializationHeaderRecord // TypeDefIndex: 869
	{
		// Fields
		internal int binaryFormatterMajorVersion; // 0x10
		internal int binaryFormatterMinorVersion; // 0x14
		internal BinaryHeaderEnum binaryHeaderEnum; // 0x18
		internal int topId; // 0x1C
		internal int headerId; // 0x20
		internal int majorVersion; // 0x24
		internal int minorVersion; // 0x28
	
		// Constructors
		internal SerializationHeaderRecord(); // 0x009369F0-0x00936A00
		internal SerializationHeaderRecord(BinaryHeaderEnum binaryHeaderEnum, int topId, int headerId, int majorVersion, int minorVersion); // 0x00936A00-0x00936A5C
	
		// Methods
		public void Write(__BinaryWriter sout); // 0x00936A5C-0x00936ADC
		private static int GetInt32(byte[] buffer, int index); // 0x00936ADC-0x00936B60
		public void Read(__BinaryParser input); // 0x00936B60-0x00936D28
		public void Dump(); // 0x00936D4C-0x00936D50
	}

	internal sealed class BinaryAssembly // TypeDefIndex: 870
	{
		// Fields
		internal int assemId; // 0x10
		internal string assemblyString; // 0x18
	
		// Constructors
		internal BinaryAssembly(); // 0x00928330-0x00928338
	
		// Methods
		internal void Set(int assemId, string assemblyString); // 0x00928338-0x00928344
		public void Write(__BinaryWriter sout); // 0x00928344-0x0092839C
		public void Read(__BinaryParser input); // 0x0092839C-0x00928400
		public void Dump(); // 0x00928424-0x00928428
	}

	internal sealed class BinaryCrossAppDomainAssembly // TypeDefIndex: 871
	{
		// Fields
		internal int assemId; // 0x10
		internal int assemblyIndex; // 0x14
	
		// Constructors
		internal BinaryCrossAppDomainAssembly(); // 0x009298BC-0x009298C4
	
		// Methods
		public void Read(__BinaryParser input); // 0x009298C4-0x00929928
		public void Dump(); // 0x00929928-0x0092992C
	}

	internal sealed class BinaryObject // TypeDefIndex: 872
	{
		// Fields
		internal int objectId; // 0x10
		internal int mapId; // 0x14
	
		// Constructors
		internal BinaryObject(); // 0x0092B064-0x0092B06C
	
		// Methods
		internal void Set(int objectId, int mapId); // 0x0092B06C-0x0092B074
		public void Write(__BinaryWriter sout); // 0x0092B074-0x0092B0CC
		public void Read(__BinaryParser input); // 0x0092B0CC-0x0092B130
		public void Dump(); // 0x0092B130-0x0092B134
	}

	internal sealed class BinaryMethodCall // TypeDefIndex: 873
	{
		// Fields
		private string methodName; // 0x10
		private string typeName; // 0x18
		private object[] args; // 0x20
		private object callContext; // 0x28
		private Type[] argTypes; // 0x30
		private bool bArgsPrimitive; // 0x38
		private MessageEnum messageEnum; // 0x3C
	
		// Constructors
		public BinaryMethodCall(); // 0x0092AE48-0x0092AE58
	
		// Methods
		internal void Write(__BinaryWriter sout); // 0x0092AB54-0x0092ACA4
		internal void Dump(); // 0x0092AE44-0x0092AE48
	}

	internal sealed class BinaryMethodReturn // TypeDefIndex: 874
	{
		// Fields
		private object returnValue; // 0x10
		private object[] args; // 0x18
		private object callContext; // 0x20
		private Type[] argTypes; // 0x28
		private bool bArgsPrimitive; // 0x30
		private MessageEnum messageEnum; // 0x34
		private Type returnType; // 0x38
		private static object instanceOfVoid; // 0x00
	
		// Constructors
		static BinaryMethodReturn(); // 0x0092AE58-0x0092AF00
		internal BinaryMethodReturn(); // 0x0092AF00-0x0092AF10
	
		// Methods
		public void Write(__BinaryWriter sout); // 0x0092AF10-0x0092B060
		public void Dump(); // 0x0092B060-0x0092B064
	}

	internal sealed class BinaryObjectString // TypeDefIndex: 875
	{
		// Fields
		internal int objectId; // 0x10
		internal string value; // 0x18
	
		// Constructors
		internal BinaryObjectString(); // 0x0092B134-0x0092B13C
	
		// Methods
		internal void Set(int objectId, string value); // 0x0092B13C-0x0092B148
		public void Write(__BinaryWriter sout); // 0x0092B148-0x0092B1A0
		public void Read(__BinaryParser input); // 0x0092B1A0-0x0092B204
		public void Dump(); // 0x0092B204-0x0092B208
	}

	internal sealed class BinaryCrossAppDomainString // TypeDefIndex: 876
	{
		// Fields
		internal int objectId; // 0x10
		internal int value; // 0x14
	
		// Constructors
		internal BinaryCrossAppDomainString(); // 0x0092997C-0x00929984
	
		// Methods
		public void Read(__BinaryParser input); // 0x00929984-0x009299E8
		public void Dump(); // 0x009299E8-0x009299EC
	}

	internal sealed class BinaryCrossAppDomainMap // TypeDefIndex: 877
	{
		// Fields
		internal int crossAppDomainArrayIndex; // 0x10
	
		// Constructors
		internal BinaryCrossAppDomainMap(); // 0x0092992C-0x00929934
	
		// Methods
		public void Read(__BinaryParser input); // 0x00929934-0x00929978
		public void Dump(); // 0x00929978-0x0092997C
	}

	internal sealed class MemberPrimitiveTyped // TypeDefIndex: 878
	{
		// Fields
		internal InternalPrimitiveTypeE primitiveTypeEnum; // 0x10
		internal object value; // 0x18
	
		// Constructors
		internal MemberPrimitiveTyped(); // 0x0092D75C-0x0092D764
	
		// Methods
		internal void Set(InternalPrimitiveTypeE primitiveTypeEnum, object value); // 0x0092D764-0x0092D770
		public void Write(__BinaryWriter sout); // 0x0092D770-0x0092D7CC
		public void Read(__BinaryParser input); // 0x0092D7CC-0x0092D820
		public void Dump(); // 0x0092DBA0-0x0092DBA4
	}

	internal sealed class BinaryObjectWithMap // TypeDefIndex: 879
	{
		// Fields
		internal BinaryHeaderEnum binaryHeaderEnum; // 0x10
		internal int objectId; // 0x14
		internal string name; // 0x18
		internal int numMembers; // 0x20
		internal string[] memberNames; // 0x28
		internal int assemId; // 0x30
	
		// Constructors
		internal BinaryObjectWithMap(); // 0x0092B208-0x0092B210
		internal BinaryObjectWithMap(BinaryHeaderEnum binaryHeaderEnum); // 0x0092B210-0x0092B23C
	
		// Methods
		internal void Set(int objectId, string name, int numMembers, string[] memberNames, int assemId); // 0x0092B23C-0x0092B260
		public void Write(__BinaryWriter sout); // 0x0092B260-0x0092B350
		public void Read(__BinaryParser input); // 0x0092B350-0x0092B4E4
		public void Dump(); // 0x0092B4E4-0x0092B4E8
	}

	internal sealed class BinaryObjectWithMapTyped // TypeDefIndex: 880
	{
		// Fields
		internal BinaryHeaderEnum binaryHeaderEnum; // 0x10
		internal int objectId; // 0x14
		internal string name; // 0x18
		internal int numMembers; // 0x20
		internal string[] memberNames; // 0x28
		internal BinaryTypeEnum[] binaryTypeEnumA; // 0x30
		internal object[] typeInformationA; // 0x38
		internal int[] memberAssemIds; // 0x40
		internal int assemId; // 0x48
	
		// Constructors
		internal BinaryObjectWithMapTyped(); // 0x0092B4E8-0x0092B4F0
		internal BinaryObjectWithMapTyped(BinaryHeaderEnum binaryHeaderEnum); // 0x0092B4F0-0x0092B51C
	
		// Methods
		internal void Set(int objectId, string name, int numMembers, string[] memberNames, BinaryTypeEnum[] binaryTypeEnumA, object[] typeInformationA, int[] memberAssemIds, int assemId); // 0x0092B51C-0x0092B548
		public void Write(__BinaryWriter sout); // 0x0092B548-0x0092B6F8
		public void Read(__BinaryParser input); // 0x0092B6F8-0x0092B9DC
	}

	internal sealed class BinaryArray // TypeDefIndex: 881
	{
		// Fields
		internal int objectId; // 0x10
		internal int rank; // 0x14
		internal int[] lengthA; // 0x18
		internal int[] lowerBoundA; // 0x20
		internal BinaryTypeEnum binaryTypeEnum; // 0x28
		internal object typeInformation; // 0x30
		internal int assemId; // 0x38
		private BinaryHeaderEnum binaryHeaderEnum; // 0x3C
		internal BinaryArrayTypeEnum binaryArrayTypeEnum; // 0x40
	
		// Constructors
		internal BinaryArray(); // 0x00927810-0x00927818
		internal BinaryArray(BinaryHeaderEnum binaryHeaderEnum); // 0x00927818-0x00927844
	
		// Methods
		internal void Set(int objectId, int rank, int[] lengthA, int[] lowerBoundA, BinaryTypeEnum binaryTypeEnum, object typeInformation, BinaryArrayTypeEnum binaryArrayTypeEnum, int assemId); // 0x00927844-0x00927898
		public void Write(__BinaryWriter sout); // 0x00927898-0x00927B00
		public void Read(__BinaryParser input); // 0x00927D28-0x009280EC
	}

	internal sealed class MemberPrimitiveUnTyped // TypeDefIndex: 882
	{
		// Fields
		internal InternalPrimitiveTypeE typeInformation; // 0x10
		internal object value; // 0x18
	
		// Constructors
		internal MemberPrimitiveUnTyped(); // 0x0092DBA4-0x0092DBAC
	
		// Methods
		internal void Set(InternalPrimitiveTypeE typeInformation, object value); // 0x0092DBAC-0x0092DBB8
		internal void Set(InternalPrimitiveTypeE typeInformation); // 0x0092DBB8-0x0092DBC0
		public void Write(__BinaryWriter sout); // 0x0092DBC0-0x0092DBEC
		public void Read(__BinaryParser input); // 0x0092DBEC-0x0092DC28
		public void Dump(); // 0x0092DC28-0x0092DC2C
	}

	internal sealed class MemberReference // TypeDefIndex: 883
	{
		// Fields
		internal int idRef; // 0x10
	
		// Constructors
		internal MemberReference(); // 0x0092DC2C-0x0092DC34
	
		// Methods
		internal void Set(int idRef); // 0x0092DC34-0x0092DC3C
		public void Write(__BinaryWriter sout); // 0x0092DC3C-0x0092DC84
		public void Read(__BinaryParser input); // 0x0092DC84-0x0092DCC8
		public void Dump(); // 0x0092DCC8-0x0092DCCC
	}

	internal sealed class ObjectNull // TypeDefIndex: 884
	{
		// Fields
		internal int nullCount; // 0x10
	
		// Constructors
		internal ObjectNull(); // 0x0092EEC0-0x0092EEC8
	
		// Methods
		internal void SetNullCount(int nullCount); // 0x0092EEC8-0x0092EED0
		public void Write(__BinaryWriter sout); // 0x0092EED0-0x0092EF60
		public void Read(__BinaryParser input, BinaryHeaderEnum binaryHeaderEnum); // 0x0092EF60-0x0092EFE4
		public void Dump(); // 0x0092EFE4-0x0092EFE8
	}

	internal sealed class MessageEnd // TypeDefIndex: 885
	{
		// Constructors
		internal MessageEnd(); // 0x0092DCCC-0x0092DCD4
	
		// Methods
		public void Write(__BinaryWriter sout); // 0x0092DCD4-0x0092DCFC
		public void Read(__BinaryParser input); // 0x0092DCFC-0x0092DD00
		public void Dump(); // 0x0092DD00-0x0092DD04
		public void Dump(Stream sout); // 0x0092DD04-0x0092DD08
	}

	internal sealed class ObjectMap // TypeDefIndex: 886
	{
		// Fields
		internal string objectName; // 0x10
		internal Type objectType; // 0x18
		internal BinaryTypeEnum[] binaryTypeEnumA; // 0x20
		internal object[] typeInformationA; // 0x28
		internal Type[] memberTypes; // 0x30
		internal string[] memberNames; // 0x38
		internal ReadObjectInfo objectInfo; // 0x40
		internal bool isInitObjectInfo; // 0x48
		internal ObjectReader objectReader; // 0x50
		internal int objectId; // 0x58
		internal BinaryAssemblyInfo assemblyInfo; // 0x60
	
		// Constructors
		internal ObjectMap(string objectName, Type objectType, string[] memberNames, ObjectReader objectReader, int objectId, BinaryAssemblyInfo assemblyInfo); // 0x0092DF90-0x0092E154
		internal ObjectMap(string objectName, string[] memberNames, BinaryTypeEnum[] binaryTypeEnumA, object[] typeInformationA, int[] memberAssemIds, ObjectReader objectReader, int objectId, BinaryAssemblyInfo assemblyInfo, SizedArray assemIdToAssemblyTable); // 0x0092E6E4-0x0092E9C4
	
		// Methods
		internal ReadObjectInfo CreateObjectInfo(ref SerializationInfo si, ref object[] memberData); // 0x0092EA90-0x0092EAE8
		internal static ObjectMap Create(string name, Type objectType, string[] memberNames, ObjectReader objectReader, int objectId, BinaryAssemblyInfo assemblyInfo); // 0x0092EBBC-0x0092EC5C
		internal static ObjectMap Create(string name, string[] memberNames, BinaryTypeEnum[] binaryTypeEnumA, object[] typeInformationA, int[] memberAssemIds, ObjectReader objectReader, int objectId, BinaryAssemblyInfo assemblyInfo, SizedArray assemIdToAssemblyTable); // 0x0092EC5C-0x0092ED20
	}

	internal sealed class ObjectProgress // TypeDefIndex: 887
	{
		// Fields
		internal static int opRecordIdCount; // 0x00
		internal bool isInitial; // 0x10
		internal int count; // 0x14
		internal BinaryTypeEnum expectedType; // 0x18
		internal object expectedTypeInformation; // 0x20
		internal string name; // 0x28
		internal InternalObjectTypeE objectTypeEnum; // 0x30
		internal InternalMemberTypeE memberTypeEnum; // 0x34
		internal InternalMemberValueE memberValueEnum; // 0x38
		internal Type dtType; // 0x40
		internal int numItems; // 0x48
		internal BinaryTypeEnum binaryTypeEnum; // 0x4C
		internal object typeInformation; // 0x50
		internal int nullCount; // 0x58
		internal int memberLength; // 0x5C
		internal BinaryTypeEnum[] binaryTypeEnumA; // 0x60
		internal object[] typeInformationA; // 0x68
		internal string[] memberNames; // 0x70
		internal Type[] memberTypes; // 0x78
		internal ParseRecord pr; // 0x80
	
		// Constructors
		internal ObjectProgress(); // 0x0092EFE8-0x0092F058
		static ObjectProgress(); // 0x0092F294-0x0092F2E8
	
		// Methods
		internal void Init(); // 0x0092F060-0x0092F0FC
		internal void ArrayCountIncrement(int value); // 0x0092F158-0x0092F168
		internal bool GetNext(out BinaryTypeEnum outBinaryTypeEnum, out object outTypeInformation); // 0x0092F168-0x0092F294
	}

	internal sealed class Converter // TypeDefIndex: 888
	{
		// Fields
		private static int primitiveTypeEnumLength; // 0x00
		private static Type[] typeA; // 0x08
		private static Type[] arrayTypeA; // 0x10
		private static string[] valueA; // 0x18
		private static TypeCode[] typeCodeA; // 0x20
		private static InternalPrimitiveTypeE[] codeA; // 0x28
		internal static Type typeofISerializable; // 0x30
		internal static Type typeofString; // 0x38
		internal static Type typeofConverter; // 0x40
		internal static Type typeofBoolean; // 0x48
		internal static Type typeofByte; // 0x50
		internal static Type typeofChar; // 0x58
		internal static Type typeofDecimal; // 0x60
		internal static Type typeofDouble; // 0x68
		internal static Type typeofInt16; // 0x70
		internal static Type typeofInt32; // 0x78
		internal static Type typeofInt64; // 0x80
		internal static Type typeofSByte; // 0x88
		internal static Type typeofSingle; // 0x90
		internal static Type typeofTimeSpan; // 0x98
		internal static Type typeofDateTime; // 0xA0
		internal static Type typeofUInt16; // 0xA8
		internal static Type typeofUInt32; // 0xB0
		internal static Type typeofUInt64; // 0xB8
		internal static Type typeofObject; // 0xC0
		internal static Type typeofSystemVoid; // 0xC8
		internal static Assembly urtAssembly; // 0xD0
		internal static string urtAssemblyString; // 0xD8
		internal static Type typeofTypeArray; // 0xE0
		internal static Type typeofObjectArray; // 0xE8
		internal static Type typeofStringArray; // 0xF0
		internal static Type typeofBooleanArray; // 0xF8
		internal static Type typeofByteArray; // 0x100
		internal static Type typeofCharArray; // 0x108
		internal static Type typeofDecimalArray; // 0x110
		internal static Type typeofDoubleArray; // 0x118
		internal static Type typeofInt16Array; // 0x120
		internal static Type typeofInt32Array; // 0x128
		internal static Type typeofInt64Array; // 0x130
		internal static Type typeofSByteArray; // 0x138
		internal static Type typeofSingleArray; // 0x140
		internal static Type typeofTimeSpanArray; // 0x148
		internal static Type typeofDateTimeArray; // 0x150
		internal static Type typeofUInt16Array; // 0x158
		internal static Type typeofUInt32Array; // 0x160
		internal static Type typeofUInt64Array; // 0x168
		internal static Type typeofMarshalByRefObject; // 0x170
	
		// Constructors
		static Converter(); // 0x0092CC74-0x0092D210
	
		// Methods
		internal static InternalPrimitiveTypeE ToCode(Type type); // 0x00928F34-0x00929084
		internal static bool IsWriteAsByteArray(InternalPrimitiveTypeE code); // 0x0092BACC-0x0092BAF4
		internal static int TypeLength(InternalPrimitiveTypeE code); // 0x0092BAF4-0x0092BB40
		internal static Type ToArrayType(InternalPrimitiveTypeE code); // 0x0092960C-0x009296FC
		private static void InitTypeA(); // 0x0092BF0C-0x0092C2D8
		private static void InitArrayTypeA(); // 0x0092BB40-0x0092BF0C
		internal static Type ToType(InternalPrimitiveTypeE code); // 0x0092951C-0x0092960C
		internal static Array CreatePrimitiveArray(InternalPrimitiveTypeE code, int length); // 0x0092C2D8-0x0092C368
		internal static bool IsPrimitiveArray(Type type, out object typeInformation); // 0x009288DC-0x00928C30
		private static void InitValueA(); // 0x0092C368-0x0092C734
		internal static string ToComType(InternalPrimitiveTypeE code); // 0x0092942C-0x0092951C
		private static void InitTypeCodeA(); // 0x0092C734-0x0092C8D8
		internal static TypeCode ToTypeCode(InternalPrimitiveTypeE code); // 0x0092C8D8-0x0092C9C8
		private static void InitCodeA(); // 0x0092C9C8-0x0092CB80
		internal static InternalPrimitiveTypeE ToPrimitiveTypeEnum(TypeCode typeCode); // 0x0092B9DC-0x0092BACC
		internal static object FromString(string value, InternalPrimitiveTypeE code); // 0x0092CB80-0x0092CC74
	}

	[Serializable]
	internal enum BinaryHeaderEnum // TypeDefIndex: 889
	{
		SerializedStreamHeader = 0,
		Object = 1,
		ObjectWithMap = 2,
		ObjectWithMapAssemId = 3,
		ObjectWithMapTyped = 4,
		ObjectWithMapTypedAssemId = 5,
		ObjectString = 6,
		Array = 7,
		MemberPrimitiveTyped = 8,
		MemberReference = 9,
		ObjectNull = 10,
		MessageEnd = 11,
		Assembly = 12,
		ObjectNullMultiple256 = 13,
		ObjectNullMultiple = 14,
		ArraySinglePrimitive = 15,
		ArraySingleObject = 16,
		ArraySingleString = 17,
		CrossAppDomainMap = 18,
		CrossAppDomainString = 19,
		CrossAppDomainAssembly = 20,
		MethodCall = 21,
		MethodReturn = 22
	}

	[Serializable]
	internal enum BinaryTypeEnum // TypeDefIndex: 890
	{
		Primitive = 0,
		String = 1,
		Object = 2,
		ObjectUrt = 3,
		ObjectUser = 4,
		ObjectArray = 5,
		StringArray = 6,
		PrimitiveArray = 7
	}

	[Serializable]
	internal enum BinaryArrayTypeEnum // TypeDefIndex: 891
	{
		Single = 0,
		Jagged = 1,
		Rectangular = 2,
		SingleOffset = 3,
		JaggedOffset = 4,
		RectangularOffset = 5
	}

	[Serializable]
	internal enum InternalSerializerTypeE // TypeDefIndex: 892
	{
		Soap = 1,
		Binary = 2
	}

	[Serializable]
	internal enum InternalParseTypeE // TypeDefIndex: 893
	{
		Empty = 0,
		SerializedStreamHeader = 1,
		Object = 2,
		Member = 3,
		ObjectEnd = 4,
		MemberEnd = 5,
		Headers = 6,
		HeadersEnd = 7,
		SerializedStreamHeaderEnd = 8,
		Envelope = 9,
		EnvelopeEnd = 10,
		Body = 11,
		BodyEnd = 12
	}

	[Serializable]
	internal enum InternalObjectTypeE // TypeDefIndex: 894
	{
		Empty = 0,
		Object = 1,
		Array = 2
	}

	[Serializable]
	internal enum InternalObjectPositionE // TypeDefIndex: 895
	{
		Empty = 0,
		Top = 1,
		Child = 2,
		Headers = 3
	}

	[Serializable]
	internal enum InternalArrayTypeE // TypeDefIndex: 896
	{
		Empty = 0,
		Single = 1,
		Jagged = 2,
		Rectangular = 3,
		Base64 = 4
	}

	[Serializable]
	internal enum InternalMemberTypeE // TypeDefIndex: 897
	{
		Empty = 0,
		Header = 1,
		Field = 2,
		Item = 3
	}

	[Serializable]
	internal enum InternalMemberValueE // TypeDefIndex: 898
	{
		Empty = 0,
		InlineValue = 1,
		Nested = 2,
		Reference = 3,
		Null = 4
	}

	[Serializable]
	internal enum InternalPrimitiveTypeE // TypeDefIndex: 899
	{
		Invalid = 0,
		Boolean = 1,
		Byte = 2,
		Char = 3,
		Currency = 4,
		Decimal = 5,
		Double = 6,
		Int16 = 7,
		Int32 = 8,
		Int64 = 9,
		SByte = 10,
		Single = 11,
		TimeSpan = 12,
		DateTime = 13,
		UInt16 = 14,
		UInt32 = 15,
		UInt64 = 16,
		Null = 17,
		String = 18
	}

	[Serializable]
	[Flags] // 0x004B5BD0-0x004B5BE0
	internal enum MessageEnum // TypeDefIndex: 900
	{
		NoArgs = 1,
		ArgsInline = 2,
		ArgsIsArray = 4,
		ArgsInArray = 8,
		NoContext = 16,
		ContextInline = 32,
		ContextInArray = 64,
		MethodSignatureInArray = 128,
		PropertyInArray = 256,
		NoReturnValue = 512,
		ReturnValueVoid = 1024,
		ReturnValueInline = 2048,
		ReturnValueInArray = 4096,
		ExceptionInArray = 8192,
		GenericMethod = 32768
	}

	[Serializable]
	internal enum ValueFixupEnum // TypeDefIndex: 901
	{
		Empty = 0,
		Array = 1,
		Header = 2,
		Member = 3
	}

	[ComVisible] // 0x004B5BE0-0x004B5BF4
	public sealed class BinaryFormatter // TypeDefIndex: 902
	{
		// Fields
		internal ISurrogateSelector m_surrogates; // 0x10
		internal StreamingContext m_context; // 0x18
		internal SerializationBinder m_binder; // 0x28
		internal FormatterTypeStyle m_typeFormat; // 0x30
		internal FormatterAssemblyStyle m_assemblyFormat; // 0x34
		internal TypeFilterLevel m_securityLevel; // 0x38
		internal object[] m_crossAppDomainArray; // 0x40
		private static Dictionary<Type, TypeInformation> typeNameCache; // 0x00
	
		// Properties
		public FormatterAssemblyStyle AssemblyFormat { set; } // 0x009299EC-0x009299F4
		public ISurrogateSelector SurrogateSelector { set; } // 0x009299F4-0x009299FC
	
		// Constructors
		public BinaryFormatter(); // 0x009299FC-0x00929A58
		public BinaryFormatter(ISurrogateSelector selector, StreamingContext context); // 0x00929A58-0x00929AA8
		static BinaryFormatter(); // 0x0092AAE0-0x0092AB54
	
		// Methods
		public object Deserialize(Stream serializationStream); // 0x00929AA8-0x00929AB4
		internal object Deserialize(Stream serializationStream, HeaderHandler handler, bool fCheck); // 0x00929ABC-0x00929CEC
		public object Deserialize(Stream serializationStream, HeaderHandler handler); // 0x00929AB4-0x00929ABC
		public void Serialize(Stream serializationStream, object graph); // 0x0092A24C-0x0092A258
		public void Serialize(Stream serializationStream, object graph, Header[] headers); // 0x0092A258-0x0092A260
		internal void Serialize(Stream serializationStream, object graph, Header[] headers, bool fCheck); // 0x0092A260-0x0092A434
		internal static TypeInformation GetTypeInformation(Type type); // 0x0092A878-0x0092AA9C
	}

	internal sealed class __BinaryWriter // TypeDefIndex: 903
	{
		// Fields
		internal Stream sout; // 0x10
		internal FormatterTypeStyle formatterTypeStyle; // 0x18
		internal Hashtable objectMapTable; // 0x20
		internal ObjectWriter objectWriter; // 0x28
		internal BinaryWriter dataWriter; // 0x30
		internal int m_nestedObjectCount; // 0x38
		private int nullCount; // 0x3C
		internal BinaryMethodCall binaryMethodCall; // 0x40
		internal BinaryMethodReturn binaryMethodReturn; // 0x48
		internal BinaryObject binaryObject; // 0x50
		internal BinaryObjectWithMap binaryObjectWithMap; // 0x58
		internal BinaryObjectWithMapTyped binaryObjectWithMapTyped; // 0x60
		internal BinaryObjectString binaryObjectString; // 0x68
		internal BinaryArray binaryArray; // 0x70
		private byte[] byteBuffer; // 0x78
		private int chunkSize; // 0x80
		internal MemberPrimitiveUnTyped memberPrimitiveUnTyped; // 0x88
		internal MemberPrimitiveTyped memberPrimitiveTyped; // 0x90
		internal ObjectNull objectNull; // 0x98
		internal MemberReference memberReference; // 0xA0
		internal BinaryAssembly binaryAssembly; // 0xA8
	
		// Constructors
		internal __BinaryWriter(Stream sout, ObjectWriter objectWriter, FormatterTypeStyle formatterTypeStyle); // 0x009ECE08-0x009ECEC0
	
		// Methods
		internal void WriteBegin(); // 0x009ECEC0-0x009ECEC4
		internal void WriteEnd(); // 0x009ECEC4-0x009ECEE4
		internal void WriteBoolean(bool value); // 0x009ECEE4-0x009ECF08
		internal void WriteByte(byte value); // 0x009ECF08-0x009ECF28
		private void WriteBytes(byte[] value); // 0x009ECF28-0x009ECF48
		private void WriteBytes(byte[] byteA, int offset, int size); // 0x009ECF48-0x009ECF68
		internal void WriteChar(char value); // 0x009ECF68-0x009ECF88
		internal void WriteChars(char[] value); // 0x009ECF88-0x009ECFA8
		internal void WriteDecimal(decimal value); // 0x009ECFA8-0x009ED054
		internal void WriteSingle(float value); // 0x009ED078-0x009ED09C
		internal void WriteDouble(double value); // 0x009ED09C-0x009ED0C0
		internal void WriteInt16(short value); // 0x009ED0C0-0x009ED0E4
		internal void WriteInt32(int value); // 0x009ED0E4-0x009ED108
		internal void WriteInt64(long value); // 0x009ED108-0x009ED12C
		internal void WriteSByte(sbyte value); // 0x009ED12C-0x009ED14C
		internal void WriteString(string value); // 0x009ED054-0x009ED078
		internal void WriteTimeSpan(TimeSpan value); // 0x009ED14C-0x009ED170
		internal void WriteDateTime(DateTime value); // 0x009ED170-0x009ED194
		internal void WriteUInt16(ushort value); // 0x009ED194-0x009ED1B8
		internal void WriteUInt32(uint value); // 0x009ED1B8-0x009ED1DC
		internal void WriteUInt64(ulong value); // 0x009ED1DC-0x009ED200
		internal void WriteObjectEnd(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo); // 0x009ED200-0x009ED204
		internal void WriteSerializationHeaderEnd(); // 0x009ED204-0x009ED288
		internal void WriteSerializationHeader(int topId, int headerId, int minorVersion, int majorVersion); // 0x009ED288-0x009ED33C
		internal void WriteMethodCall(); // 0x009ED33C-0x009ED3CC
		internal void WriteMethodReturn(); // 0x009ED3CC-0x009ED45C
		internal void WriteObject(System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, int numMembers, string[] memberNames, Type[] memberTypes, WriteObjectInfo[] memberObjectInfos); // 0x009ED45C-0x009ED924
		internal void WriteObjectString(int objectId, string value); // 0x009ED9D4-0x009EDA84
		internal void WriteSingleArray(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayNameInfo, WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, int length, int lowerBound, Array array); // 0x009EDA84-0x009EDD4C
		private void WriteArrayAsBytes(Array array, int typeLength); // 0x009EDD4C-0x009EDF8C
		internal void WriteJaggedArray(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayNameInfo, WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, int length, int lowerBound); // 0x009EDF8C-0x009EE140
		internal void WriteRectangleArray(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayNameInfo, WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, int rank, int[] lengthA, int[] lowerBoundA); // 0x009EE140-0x009EE2CC
		internal void WriteObjectByteArray(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayNameInfo, WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, int length, int lowerBound, byte[] byteA); // 0x009EE2CC-0x009EE338
		internal void WriteMember(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, object value); // 0x009EE338-0x009EE48C
		internal void WriteNullMember(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo); // 0x009EE48C-0x009EE550
		internal void WriteMemberObjectRef(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, int idRef); // 0x009EE550-0x009EE604
		internal void WriteMemberNested(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo); // 0x009EE604-0x009EE630
		internal void WriteMemberString(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, string value); // 0x009EE630-0x009EE680
		internal void WriteItem(System.Runtime.Serialization.Formatters.Binary.NameInfo itemNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, object value); // 0x009EE680-0x009EE6C4
		internal void WriteNullItem(System.Runtime.Serialization.Formatters.Binary.NameInfo itemNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo); // 0x009EE6C4-0x009EE6D4
		internal void WriteDelayedNullItem(); // 0x009EE6D4-0x009EE6E4
		internal void WriteItemEnd(); // 0x009EE6E4-0x009EE6E8
		private void InternalWriteItemNull(); // 0x009ED924-0x009ED9D4
		internal void WriteItemObjectRef(System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo, int idRef); // 0x009EE6E8-0x009EE724
		internal void WriteAssembly(Type type, string assemblyString, int assemId, bool isNew); // 0x009EE724-0x009EE824
		internal void WriteValue(InternalPrimitiveTypeE code, object value); // 0x009EE824-0x009EF024
	}

	internal sealed class ObjectMapInfo // TypeDefIndex: 904
	{
		// Fields
		internal int objectId; // 0x10
		private int numMembers; // 0x14
		private string[] memberNames; // 0x18
		private Type[] memberTypes; // 0x20
	
		// Constructors
		internal ObjectMapInfo(int objectId, int numMembers, string[] memberNames, Type[] memberTypes); // 0x0092ED20-0x0092ED6C
	
		// Methods
		internal bool isCompatible(int numMembers, string[] memberNames, Type[] memberTypes); // 0x0092ED6C-0x0092EEC0
	}

	internal sealed class WriteObjectInfo // TypeDefIndex: 905
	{
		// Fields
		internal int objectInfoId; // 0x10
		internal object obj; // 0x18
		internal Type objectType; // 0x20
		internal bool isSi; // 0x28
		internal bool isNamed; // 0x29
		internal bool isTyped; // 0x2A
		internal bool isArray; // 0x2B
		internal SerializationInfo si; // 0x30
		internal SerObjectInfoCache cache; // 0x38
		internal object[] memberData; // 0x40
		internal ISerializationSurrogate serializationSurrogate; // 0x48
		internal StreamingContext context; // 0x50
		internal SerObjectInfoInit serObjectInfoInit; // 0x60
		internal long objectId; // 0x68
		internal long assemId; // 0x70
		private string binderTypeName; // 0x78
		private string binderAssemblyString; // 0x80
	
		// Constructors
		internal WriteObjectInfo(); // 0x009372DC-0x009372E4
	
		// Methods
		internal void ObjectEnd(); // 0x00933FDC-0x00933FEC
		private void InternalInit(); // 0x00937304-0x00937324
		internal static WriteObjectInfo Serialize(object obj, ISurrogateSelector surrogateSelector, StreamingContext context, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, ObjectWriter objectWriter, SerializationBinder binder); // 0x00933914-0x009339B4
		internal void InitSerialize(object obj, ISurrogateSelector surrogateSelector, StreamingContext context, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, ObjectWriter objectWriter, SerializationBinder binder); // 0x00937404-0x009378F4
		internal static WriteObjectInfo Serialize(Type objectType, ISurrogateSelector surrogateSelector, StreamingContext context, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, SerializationBinder binder); // 0x00934A40-0x00934AD0
		internal void InitSerialize(Type objectType, ISurrogateSelector surrogateSelector, StreamingContext context, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, SerializationBinder binder); // 0x00938140-0x00938414
		private void InitSiWrite(); // 0x00937A0C-0x00937D00
		private static void CheckTypeForwardedFrom(SerObjectInfoCache cache, Type objectType, string binderAssemblyString); // 0x00937D00-0x00937E74
		private void InitNoMembers(); // 0x009378F4-0x009379E4
		private void InitMemberInfo(); // 0x00937E74-0x00938140
		internal string GetTypeFullName(); // 0x00928CF4-0x00928D24
		internal string GetAssemblyString(); // 0x00928CC4-0x00928CF4
		private void InvokeSerializationBinder(SerializationBinder binder); // 0x009379E4-0x00937A0C
		internal Type GetMemberType(MemberInfo objMember); // 0x00938414-0x00938594
		internal void GetMemberInfo(out string[] outMemberNames, out Type[] outMemberTypes, out object[] outMemberData); // 0x00934924-0x00934A14
		private static WriteObjectInfo GetObjectInfo(SerObjectInfoInit serObjectInfoInit); // 0x00937324-0x00937404
		private static void PutObjectInfo(SerObjectInfoInit serObjectInfoInit, WriteObjectInfo objectInfo); // 0x009372E4-0x00937304
	}

	internal sealed class ReadObjectInfo // TypeDefIndex: 906
	{
		// Fields
		internal int objectInfoId; // 0x10
		internal static int readObjectInfoCounter; // 0x00
		internal Type objectType; // 0x18
		internal ObjectManager objectManager; // 0x20
		internal int count; // 0x28
		internal bool isSi; // 0x2C
		internal bool isNamed; // 0x2D
		internal bool isTyped; // 0x2E
		internal bool bSimpleAssembly; // 0x2F
		internal SerObjectInfoCache cache; // 0x30
		internal string[] wireMemberNames; // 0x38
		internal Type[] wireMemberTypes; // 0x40
		private int lastPosition; // 0x48
		internal ISerializationSurrogate serializationSurrogate; // 0x50
		internal StreamingContext context; // 0x58
		internal List<Type> memberTypesList; // 0x68
		internal SerObjectInfoInit serObjectInfoInit; // 0x70
		internal IFormatterConverter formatterConverter; // 0x78
	
		// Constructors
		internal ReadObjectInfo(); // 0x00935FBC-0x00935FC4
	
		// Methods
		internal void ObjectEnd(); // 0x00931A74-0x00931A78
		internal void PrepareForReuse(); // 0x0092EBB4-0x0092EBBC
		internal static ReadObjectInfo Create(Type objectType, ISurrogateSelector surrogateSelector, StreamingContext context, ObjectManager objectManager, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, bool bSimpleAssembly); // 0x0092FE00-0x0092FE98
		internal void Init(Type objectType, ISurrogateSelector surrogateSelector, StreamingContext context, ObjectManager objectManager, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, bool bSimpleAssembly); // 0x00936040-0x0093605C
		internal static ReadObjectInfo Create(Type objectType, string[] memberNames, Type[] memberTypes, ISurrogateSelector surrogateSelector, StreamingContext context, ObjectManager objectManager, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, bool bSimpleAssembly); // 0x0092FE98-0x0092FF44
		internal void Init(Type objectType, string[] memberNames, Type[] memberTypes, ISurrogateSelector surrogateSelector, StreamingContext context, ObjectManager objectManager, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, bool bSimpleAssembly); // 0x00936218-0x00936268
		private void InitReadConstructor(Type objectType, ISurrogateSelector surrogateSelector, StreamingContext context); // 0x0093605C-0x00936218
		private void InitSiRead(); // 0x009362D4-0x00936348
		private void InitNoMembers(); // 0x00936268-0x009362D4
		private void InitMemberInfo(); // 0x00936348-0x00936560
		internal MemberInfo GetMemberInfo(string name); // 0x00932D8C-0x00932F80
		internal Type GetType(string name); // 0x00932904-0x00932A98
		internal void AddValue(string name, object value, ref SerializationInfo si, ref object[] memberData); // 0x00932A98-0x00932B50
		internal void InitDataStore(ref SerializationInfo si, ref object[] memberData); // 0x0092EAE8-0x0092EBB4
		internal void RecordFixup(long objectId, string name, long idRef); // 0x00932B98-0x00932C60
		internal void PopulateObjectMembers(object obj, object[] memberData); // 0x009316CC-0x00931778
		private int Position(string name); // 0x00936780-0x009368C0
		internal Type[] GetMemberTypes(string[] inMemberNames, Type objectType); // 0x0092E188-0x0092E6E4
		internal Type GetMemberType(MemberInfo objMember); // 0x00936600-0x00936780
		private static ReadObjectInfo GetObjectInfo(SerObjectInfoInit serObjectInfoInit); // 0x00935FC4-0x00936040
	}

	internal sealed class SerObjectInfoInit // TypeDefIndex: 907
	{
		// Fields
		internal Hashtable seenBeforeTable; // 0x10
		internal int objectInfoIdCount; // 0x18
		internal SerStack oiPool; // 0x20
	
		// Constructors
		public SerObjectInfoInit(); // 0x0092F3F4-0x0092F48C
	}

	internal sealed class SerObjectInfoCache // TypeDefIndex: 908
	{
		// Fields
		internal string fullTypeName; // 0x10
		internal string assemblyString; // 0x18
		internal bool hasTypeForwardedFrom; // 0x20
		internal MemberInfo[] memberInfos; // 0x28
		internal string[] memberNames; // 0x30
		internal Type[] memberTypes; // 0x38
	
		// Constructors
		internal SerObjectInfoCache(string typeName, string assemblyName, bool hasTypeForwardedFrom); // 0x009368C0-0x00936904
		internal SerObjectInfoCache(Type type); // 0x00936560-0x00936600
	}

	internal sealed class TypeInformation // TypeDefIndex: 909
	{
		// Fields
		private string fullTypeName; // 0x10
		private string assemblyString; // 0x18
		private bool hasTypeForwardedFrom; // 0x20
	
		// Properties
		internal string FullTypeName { get; } // 0x009372C4-0x009372CC 
		internal string AssemblyString { get; } // 0x009372CC-0x009372D4 
		internal bool HasTypeForwardedFrom { get; } // 0x009372D4-0x009372DC 
	
		// Constructors
		internal TypeInformation(string fullTypeName, string assemblyString, bool hasTypeForwardedFrom); // 0x0092AA9C-0x0092AAE0
	}

	internal sealed class ObjectReader // TypeDefIndex: 910
	{
		// Fields
		internal Stream m_stream; // 0x10
		internal ISurrogateSelector m_surrogates; // 0x18
		internal StreamingContext m_context; // 0x20
		internal ObjectManager m_objectManager; // 0x30
		internal InternalFE formatterEnums; // 0x38
		internal SerializationBinder m_binder; // 0x40
		internal long topId; // 0x48
		internal bool bSimpleAssembly; // 0x50
		internal object handlerObject; // 0x58
		internal object m_topObject; // 0x60
		internal Header[] headers; // 0x68
		internal HeaderHandler handler; // 0x70
		internal SerObjectInfoInit serObjectInfoInit; // 0x78
		internal IFormatterConverter m_formatterConverter; // 0x80
		internal SerStack stack; // 0x88
		private SerStack valueFixupStack; // 0x90
		internal object[] crossAppDomainArray; // 0x98
		private bool bFullDeserialization; // 0xA0
		private bool bOldFormatDetected; // 0xA1
		private IntSizedArray valTypeObjectIdTable; // 0xA8
		private NameCache typeCache; // 0xB0
		private string previousAssemblyString; // 0xB8
		private string previousName; // 0xC0
		private Type previousType; // 0xC8
	
		// Properties
		private SerStack ValueFixupStack { get; } // 0x0092F2E8-0x0092F35C 
		internal object TopObject { get; set; } // 0x0092F3D8-0x0092F3E0 0x0092F3E0-0x0092F3F4
	
		// Nested types
		internal class TypeNAssembly // TypeDefIndex: 911
		{
			// Fields
			public Type type; // 0x10
			public string assemblyName; // 0x18
	
			// Constructors
			public TypeNAssembly(); // 0x0093378C-0x00933794
		}
	
		internal sealed class TopLevelAssemblyTypeResolver // TypeDefIndex: 912
		{
			// Fields
			private Assembly m_topLevelAssembly; // 0x10
	
			// Constructors
			public TopLevelAssemblyTypeResolver(Assembly topLevelAssembly); // 0x00933794-0x009337C0
	
			// Methods
			public Type ResolveType(Assembly assembly, string simpleTypeName, bool ignoreCase); // 0x009337C0-0x00933830
		}
	
		// Constructors
		internal ObjectReader(Stream stream, ISurrogateSelector selector, StreamingContext context, InternalFE formatterEnums, SerializationBinder binder); // 0x00929CF4-0x00929E00
	
		// Methods
		internal object Deserialize(HeaderHandler handler, __BinaryParser serParser, bool fCheck); // 0x00929EE4-0x0092A24C
		private bool HasSurrogate(Type t); // 0x0092FA6C-0x0092FB58
		private void CheckSerializable(Type t); // 0x0092FB58-0x0092FCD8
		private void InitFullDeserialization(); // 0x0092FCD8-0x0092FDBC
		internal object CrossAppDomainArray(int index); // 0x0092FDBC-0x0092FE00
		internal ReadObjectInfo CreateReadObjectInfo(Type objectType); // 0x0092E154-0x0092E188
		internal ReadObjectInfo CreateReadObjectInfo(Type objectType, string[] memberNames, Type[] memberTypes); // 0x0092EA4C-0x0092EA90
		internal void Parse(ParseRecord pr); // 0x0092FF44-0x009300F8
		private void ParseError(ParseRecord processing, ParseRecord onStack); // 0x00930C48-0x00930ED8
		private void ParseSerializedStreamHeader(ParseRecord pr); // 0x009300F8-0x00930110
		private void ParseSerializedStreamHeaderEnd(ParseRecord pr); // 0x00930110-0x00930128
		private void ParseObject(ParseRecord pr); // 0x00930128-0x00930434
		private void ParseObjectEnd(ParseRecord pr); // 0x00930434-0x00930668
		private void ParseArray(ParseRecord pr); // 0x00931004-0x00931670
		private void NextRectangleMap(ParseRecord pr); // 0x00931AB8-0x00931B98
		private void ParseArrayMember(ParseRecord pr); // 0x00931B98-0x009323E4
		private void ParseArrayMemberEnd(ParseRecord pr); // 0x009328DC-0x00932904
		private void ParseMember(ParseRecord pr); // 0x00930668-0x00930B6C
		private void ParseMemberEnd(ParseRecord pr); // 0x00930B6C-0x00930C48
		private void ParseString(ParseRecord pr, ParseRecord parentPr); // 0x00932424-0x0093246C
		private void RegisterObject(object obj, ParseRecord pr, ParseRecord objectPr); // 0x009316C4-0x009316CC
		private void RegisterObject(object obj, ParseRecord pr, ParseRecord objectPr, bool bIsString); // 0x00932C60-0x00932D8C
		internal long GetId(long objectId); // 0x00932F80-0x00933070
		internal Type Bind(string assemblyString, string typeString); // 0x00933070-0x009330D8
		internal Type FastBindToType(string assemblyName, string typeName); // 0x009330D8-0x009333BC
		private static Assembly ResolveSimpleAssemblyName(AssemblyName assemblyName); // 0x009333BC-0x00933428
		private static void GetSimplyNamedTypeFromAssembly(Assembly assm, string typeName, ref Type type); // 0x00933428-0x00933644
		internal Type GetType(BinaryAssemblyInfo assemblyInfo, string name); // 0x009296FC-0x009298BC
		private static void CheckTypeForwardedTo(Assembly sourceAssembly, Assembly destAssembly, Type resolvedType); // 0x00933644-0x0093378C
	}

	internal sealed class ObjectWriter // TypeDefIndex: 913
	{
		// Fields
		private Queue m_objectQueue; // 0x10
		private ObjectIDGenerator m_idGenerator; // 0x18
		private int m_currentId; // 0x20
		private ISurrogateSelector m_surrogates; // 0x28
		private StreamingContext m_context; // 0x30
		private __BinaryWriter serWriter; // 0x40
		private SerializationObjectManager m_objectManager; // 0x48
		private long topId; // 0x50
		private string topName; // 0x58
		private Header[] headers; // 0x60
		private InternalFE formatterEnums; // 0x68
		private SerializationBinder m_binder; // 0x70
		private SerObjectInfoInit serObjectInfoInit; // 0x78
		private IFormatterConverter m_formatterConverter; // 0x80
		internal object[] crossAppDomainArray; // 0x88
		private object previousObj; // 0x90
		private long previousId; // 0x98
		private Type previousType; // 0xA0
		private InternalPrimitiveTypeE previousCode; // 0xA8
		private Hashtable assemblyToIdTable; // 0xB0
		private SerStack niPool; // 0xB8
	
		// Properties
		internal SerializationObjectManager ObjectManager { get; } // 0x00934174-0x0093417C 
	
		// Constructors
		internal ObjectWriter(ISurrogateSelector selector, StreamingContext context, InternalFE formatterEnums, SerializationBinder binder); // 0x0092A434-0x0092A510
	
		// Methods
		internal void Serialize(object graph, Header[] inHeaders, __BinaryWriter serWriter, bool fCheck); // 0x0092A510-0x0092A878
		private void Write(WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo); // 0x00933C1C-0x00933FC4
		private void Write(WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, string[] memberNames, Type[] memberTypes, object[] memberData, WriteObjectInfo[] memberObjectInfos); // 0x00934AD0-0x00934D60
		private void WriteMemberSetup(WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, string memberName, Type memberType, object memberData, WriteObjectInfo memberObjectInfo); // 0x00934D8C-0x00934E84
		private void WriteMembers(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberTypeNameInfo, object memberData, WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, WriteObjectInfo memberObjectInfo); // 0x00934EBC-0x00935208
		private void WriteArray(WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, WriteObjectInfo memberObjectInfo); // 0x0093417C-0x00934924
		private void WriteArrayMember(WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, object data); // 0x00935530-0x009357FC
		private void WriteRectangle(WriteObjectInfo objectInfo, int rank, int[] maxA, Array array, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemNameTypeInfo, int[] lowerBoundA); // 0x009357FC-0x00935A50
		private object GetNext(out long objID); // 0x00933FEC-0x00934174
		private long InternalGetId(object obj, bool assignUniqueIdToValueType, Type type, out bool isNew); // 0x00933854-0x00933914
		private long Schedule(object obj, bool assignUniqueIdToValueType, Type type); // 0x00935A50-0x00935A5C
		private long Schedule(object obj, bool assignUniqueIdToValueType, Type type, WriteObjectInfo objectInfo); // 0x00935368-0x0093540C
		private bool WriteKnownValueClass(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, object data); // 0x00935428-0x00935530
		private void WriteObjectRef(System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo, long objectId); // 0x0093540C-0x00935428
		private void WriteString(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, object stringObject); // 0x00935A5C-0x00935B68
		private bool CheckForNull(WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, object data); // 0x00935208-0x009352C8
		private void WriteSerializedStreamHeader(long topId, long headerId); // 0x00933830-0x00933854
		private System.Runtime.Serialization.Formatters.Binary.NameInfo TypeToNameInfo(Type type, WriteObjectInfo objectInfo, InternalPrimitiveTypeE code, System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo); // 0x00935B68-0x00935C0C
		private System.Runtime.Serialization.Formatters.Binary.NameInfo TypeToNameInfo(Type type); // 0x00934E84-0x00934EBC
		private System.Runtime.Serialization.Formatters.Binary.NameInfo TypeToNameInfo(WriteObjectInfo objectInfo); // 0x00933BC4-0x00933C1C
		private System.Runtime.Serialization.Formatters.Binary.NameInfo TypeToNameInfo(WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo); // 0x0093530C-0x00935368
		private void TypeToNameInfo(Type type, System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo); // 0x009352C8-0x0093530C
		private System.Runtime.Serialization.Formatters.Binary.NameInfo MemberToNameInfo(string name); // 0x00934D60-0x00934D8C
		internal InternalPrimitiveTypeE ToCode(Type type); // 0x00928C30-0x00928CC4
		private long GetAssemblyId(WriteObjectInfo objectInfo); // 0x009339B4-0x00933BC4
		private Type GetType(object obj); // 0x00934A20-0x00934A40
		private System.Runtime.Serialization.Formatters.Binary.NameInfo GetNameInfo(); // 0x00935C0C-0x00935CD0
		private bool CheckTypeFormat(FormatterTypeStyle test, FormatterTypeStyle want); // 0x00934A14-0x00934A20
		private void PutNameInfo(System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo); // 0x00933FC4-0x00933FDC
	}

	internal sealed class __BinaryParser // TypeDefIndex: 914
	{
		// Fields
		internal ObjectReader objectReader; // 0x10
		internal Stream input; // 0x18
		internal long topId; // 0x20
		internal long headerId; // 0x28
		internal SizedArray objectMapIdTable; // 0x30
		internal SizedArray assemIdToAssemblyTable; // 0x38
		internal SerStack stack; // 0x40
		internal BinaryTypeEnum expectedType; // 0x48
		internal object expectedTypeInformation; // 0x50
		internal ParseRecord PRS; // 0x58
		private BinaryAssemblyInfo systemAssemblyInfo; // 0x60
		private BinaryReader dataReader; // 0x68
		private static Encoding encoding; // 0x00
		private SerStack opPool; // 0x70
		private BinaryObject binaryObject; // 0x78
		private BinaryObjectWithMap bowm; // 0x80
		private BinaryObjectWithMapTyped bowmt; // 0x88
		internal BinaryObjectString objectString; // 0x90
		internal BinaryCrossAppDomainString crossAppDomainString; // 0x98
		internal MemberPrimitiveTyped memberPrimitiveTyped; // 0xA0
		private byte[] byteBuffer; // 0xA8
		internal MemberPrimitiveUnTyped memberPrimitiveUnTyped; // 0xB0
		internal MemberReference memberReference; // 0xB8
		internal ObjectNull objectNull; // 0xC0
		internal static MessageEnd messageEnd; // 0x08
	
		// Properties
		internal BinaryAssemblyInfo SystemAssemblyInfo { get; } // 0x00938594-0x00938638 
		internal SizedArray ObjectMapIdTable { get; } // 0x00938638-0x009386A0 
		internal SizedArray AssemIdToAssemblyTable { get; } // 0x009386A0-0x0093870C 
		internal ParseRecord prs { get; } // 0x0093870C-0x00938778 
	
		// Constructors
		internal __BinaryParser(Stream stream, ObjectReader objectReader); // 0x00929E00-0x00929EE4
		static __BinaryParser(); // 0x0093B83C-0x0093C8B0
	
		// Methods
		internal void Run(); // 0x0092F48C-0x0092FA6C
		internal void ReadBegin(); // 0x00938778-0x0093877C
		internal void ReadEnd(); // 0x0093A4F8-0x0093A4FC
		internal bool ReadBoolean(); // 0x0093A820-0x0093A840
		internal byte ReadByte(); // 0x00928110-0x00928130
		internal byte[] ReadBytes(int length); // 0x00936D28-0x00936D4C
		internal void ReadBytes(byte[] byteA, int offset, int size); // 0x0093A840-0x0093A8C8
		internal char ReadChar(); // 0x0093A8C8-0x0093A8E8
		internal char[] ReadChars(int length); // 0x0093A8E8-0x0093A90C
		internal decimal ReadDecimal(); // 0x0093A90C-0x0093A9CC
		internal float ReadSingle(); // 0x0093A9CC-0x0093A9F0
		internal double ReadDouble(); // 0x0093A9F0-0x0093AA14
		internal short ReadInt16(); // 0x0093AA14-0x0093AA38
		internal int ReadInt32(); // 0x009280EC-0x00928110
		internal long ReadInt64(); // 0x0093AA38-0x0093AA5C
		internal sbyte ReadSByte(); // 0x0093AA5C-0x0093AA7C
		internal string ReadString(); // 0x00928400-0x00928424
		internal TimeSpan ReadTimeSpan(); // 0x0093AA7C-0x0093AAA0
		internal DateTime ReadDateTime(); // 0x0093AAA0-0x0093AB2C
		internal ushort ReadUInt16(); // 0x0093AB2C-0x0093AB50
		internal uint ReadUInt32(); // 0x0093AB50-0x0093AB74
		internal ulong ReadUInt64(); // 0x0093AB74-0x0093AB98
		internal void ReadSerializationHeaderRecord(); // 0x0093877C-0x00938848
		internal void ReadAssembly(BinaryHeaderEnum binaryHeaderEnum); // 0x00938848-0x00938A80
		private void ReadObject(); // 0x00938A80-0x00938DF0
		internal void ReadCrossAppDomainMap(); // 0x00938DF0-0x00938F98
		internal void ReadObjectWithMap(BinaryHeaderEnum binaryHeaderEnum); // 0x00938F98-0x00939044
		private void ReadObjectWithMap(BinaryObjectWithMap record); // 0x0093AC44-0x0093B07C
		internal void ReadObjectWithMapTyped(BinaryHeaderEnum binaryHeaderEnum); // 0x00939044-0x009390E8
		private void ReadObjectWithMapTyped(BinaryObjectWithMapTyped record); // 0x0093B07C-0x0093B4F4
		private void ReadObjectString(BinaryHeaderEnum binaryHeaderEnum); // 0x009390E8-0x00939634
		private void ReadMemberPrimitiveTyped(); // 0x00939C18-0x00939F9C
		private void ReadArray(BinaryHeaderEnum binaryHeaderEnum); // 0x00939634-0x00939C18
		private void ReadArrayAsBytes(ParseRecord pr); // 0x0093B4F4-0x0093B83C
		private void ReadMemberPrimitiveUnTyped(); // 0x0093A4FC-0x0093A790
		private void ReadMemberReference(); // 0x00939F9C-0x0093A184
		private void ReadObjectNull(BinaryHeaderEnum binaryHeaderEnum); // 0x0093A184-0x0093A384
		private void ReadMessageEnd(); // 0x0093A384-0x0093A4F8
		internal object ReadValue(InternalPrimitiveTypeE code); // 0x0092D820-0x0092DBA0
		private ObjectProgress GetOp(); // 0x0093AB98-0x0093AC44
		private void PutOp(ObjectProgress op); // 0x0093A790-0x0093A820
	}

	internal sealed class ParseRecord // TypeDefIndex: 915
	{
		// Fields
		internal static int parseRecordIdCount; // 0x00
		internal InternalParseTypeE PRparseTypeEnum; // 0x10
		internal InternalObjectTypeE PRobjectTypeEnum; // 0x14
		internal InternalArrayTypeE PRarrayTypeEnum; // 0x18
		internal InternalMemberTypeE PRmemberTypeEnum; // 0x1C
		internal InternalMemberValueE PRmemberValueEnum; // 0x20
		internal InternalObjectPositionE PRobjectPositionEnum; // 0x24
		internal string PRname; // 0x28
		internal string PRvalue; // 0x30
		internal object PRvarValue; // 0x38
		internal string PRkeyDt; // 0x40
		internal Type PRdtType; // 0x48
		internal InternalPrimitiveTypeE PRdtTypeCode; // 0x50
		internal bool PRisEnum; // 0x54
		internal long PRobjectId; // 0x58
		internal long PRidRef; // 0x60
		internal string PRarrayElementTypeString; // 0x68
		internal Type PRarrayElementType; // 0x70
		internal bool PRisArrayVariant; // 0x78
		internal InternalPrimitiveTypeE PRarrayElementTypeCode; // 0x7C
		internal int PRrank; // 0x80
		internal int[] PRlengthA; // 0x88
		internal int[] PRpositionA; // 0x90
		internal int[] PRlowerBoundA; // 0x98
		internal int[] PRupperBoundA; // 0xA0
		internal int[] PRindexMap; // 0xA8
		internal int PRmemberIndex; // 0xB0
		internal int PRlinearlength; // 0xB4
		internal int[] PRrectangularMap; // 0xB8
		internal bool PRisLowerBound; // 0xC0
		internal long PRtopId; // 0xC8
		internal long PRheaderId; // 0xD0
		internal ReadObjectInfo PRobjectInfo; // 0xD8
		internal bool PRisValueTypeFixup; // 0xE0
		internal object PRnewObj; // 0xE8
		internal object[] PRobjectA; // 0xF0
		internal PrimitiveArray PRprimitiveArray; // 0xF8
		internal bool PRisRegistered; // 0x100
		internal object[] PRmemberData; // 0x108
		internal SerializationInfo PRsi; // 0x110
		internal int PRnullCount; // 0x118
	
		// Constructors
		internal ParseRecord(); // 0x0092F058-0x0092F060
		static ParseRecord(); // 0x00935CE0-0x00935D34
	
		// Methods
		internal void Init(); // 0x0092F0FC-0x0092F158
	}

	internal sealed class SerStack // TypeDefIndex: 916
	{
		// Fields
		internal object[] objects; // 0x10
		internal string stackId; // 0x18
		internal int top; // 0x20
	
		// Constructors
		internal SerStack(string stackId); // 0x0092F35C-0x0092F3D8
	
		// Methods
		internal void Push(object obj); // 0x00930ED8-0x00930F94
		internal object Pop(); // 0x00930F94-0x00931004
		internal void IncreaseCapacity(); // 0x00936904-0x00936998
		internal object Peek(); // 0x00931670-0x009316C4
		internal object PeekPeek(); // 0x00936998-0x009369F0
		internal bool IsEmpty(); // 0x00935CD0-0x00935CE0
	}

	[Serializable]
	internal sealed class SizedArray : ICloneable // TypeDefIndex: 917
	{
		// Fields
		internal object[] objects; // 0x10
		internal object[] negObjects; // 0x18
	
		// Properties
		internal object this[int index] { get => default; set {} } // 0x0092E9C4-0x0092EA4C 0x00936F74-0x0093708C
	
		// Constructors
		internal SizedArray(); // 0x00936D50-0x00936DC4
		internal SizedArray(int length); // 0x00936DC4-0x00936E44
		private SizedArray(SizedArray sizedArray); // 0x00936E44-0x00936F14
	
		// Methods
		public object Clone(); // 0x00936F14-0x00936F74
		internal void IncreaseCapacity(int index); // 0x0093708C-0x009372C4
	}

	[Serializable]
	internal sealed class IntSizedArray : ICloneable // TypeDefIndex: 918
	{
		// Fields
		internal int[] objects; // 0x10
		internal int[] negObjects; // 0x18
	
		// Properties
		internal int this[int index] { get => default; set {} } // 0x0092D3D0-0x0092D45C 0x0092D45C-0x0092D524
	
		// Constructors
		public IntSizedArray(); // 0x0092D210-0x0092D280
		private IntSizedArray(IntSizedArray sizedArray); // 0x0092D280-0x0092D370
	
		// Methods
		public object Clone(); // 0x0092D370-0x0092D3D0
		internal void IncreaseCapacity(int index); // 0x0092D524-0x0092D75C
	}

	internal sealed class NameCache // TypeDefIndex: 919
	{
		// Fields
		private static ConcurrentDictionary<string, object> ht; // 0x00
		private string name; // 0x10
	
		// Constructors
		public NameCache(); // 0x0092DE48-0x0092DE50
		static NameCache(); // 0x0092DE50-0x0092DEC4
	
		// Methods
		internal object GetCachedValue(string name); // 0x0092DD08-0x0092DDB4
		internal void SetCachedValue(object value); // 0x0092DDB4-0x0092DE48
	}

	internal sealed class ValueFixup // TypeDefIndex: 920
	{
		// Fields
		internal ValueFixupEnum valueFixupEnum; // 0x10
		internal Array arrayObj; // 0x18
		internal int[] indexMap; // 0x20
		internal object header; // 0x28
		internal object memberObject; // 0x30
		internal static MemberInfo valueInfo; // 0x00
		internal ReadObjectInfo objectInfo; // 0x38
		internal string memberName; // 0x40
	
		// Constructors
		internal ValueFixup(Array arrayObj, int[] indexMap); // 0x009323E4-0x00932424
		internal ValueFixup(object memberObject, string memberName, ReadObjectInfo objectInfo); // 0x00932B50-0x00932B98
	
		// Methods
		internal void Fixup(ParseRecord record, ParseRecord parent); // 0x00931778-0x00931A74
	}

	internal sealed class InternalFE // TypeDefIndex: 921
	{
		// Fields
		internal FormatterTypeStyle FEtypeFormat; // 0x10
		internal FormatterAssemblyStyle FEassemblyFormat; // 0x14
		internal TypeFilterLevel FEsecurityLevel; // 0x18
		internal InternalSerializerTypeE FEserializerTypeEnum; // 0x1C
	
		// Constructors
		public InternalFE(); // 0x00929CEC-0x00929CF4
	}

	internal sealed class NameInfo // TypeDefIndex: 922
	{
		// Fields
		internal string NIFullName; // 0x10
		internal long NIobjectId; // 0x18
		internal long NIassemId; // 0x20
		internal InternalPrimitiveTypeE NIprimitiveTypeEnum; // 0x28
		internal Type NItype; // 0x30
		internal bool NIisSealed; // 0x38
		internal bool NIisArray; // 0x39
		internal bool NIisArrayItem; // 0x3A
		internal bool NItransmitTypeOnObject; // 0x3B
		internal bool NItransmitTypeOnMember; // 0x3C
		internal bool NIisParentTypeOnObject; // 0x3D
		internal InternalArrayTypeE NIarrayEnum; // 0x40
		private bool NIsealedStatusChecked; // 0x44
	
		// Properties
		public bool IsSealed { get; } // 0x0092DEEC-0x0092DF44 
		public string NIname { get; set; } // 0x0092DF44-0x0092DF88 0x0092DF88-0x0092DF90
	
		// Constructors
		internal NameInfo(); // 0x0092DEC4-0x0092DECC
	
		// Methods
		internal void Init(); // 0x0092DECC-0x0092DEEC
	}

	internal sealed class PrimitiveArray // TypeDefIndex: 923
	{
		// Fields
		private InternalPrimitiveTypeE code; // 0x10
		private bool[] booleanA; // 0x18
		private char[] charA; // 0x20
		private double[] doubleA; // 0x28
		private short[] int16A; // 0x30
		private int[] int32A; // 0x38
		private long[] int64A; // 0x40
		private sbyte[] sbyteA; // 0x48
		private float[] singleA; // 0x50
		private ushort[] uint16A; // 0x58
		private uint[] uint32A; // 0x60
		private ulong[] uint64A; // 0x68
	
		// Constructors
		internal PrimitiveArray(InternalPrimitiveTypeE code, Array array); // 0x00931A78-0x00931AB8
	
		// Methods
		internal void Init(InternalPrimitiveTypeE code, Array array); // 0x00935D34-0x00935FBC
		internal void SetValue(string value, int index); // 0x0093246C-0x009328DC
	}
}

namespace System.Runtime.Remoting
{
	[Serializable]
	internal class ChannelInfo : IChannelInfo // TypeDefIndex: 924
	{
		// Fields
		private object[] channelData; // 0x10
	
		// Properties
		public object[] ChannelData { get; } // 0x008853CC-0x008853D4 
	
		// Constructors
		public ChannelInfo(); // 0x00884EAC-0x00884F20
		public ChannelInfo(object remoteChannelData); // 0x00885314-0x008853CC
	}

	[ComVisible] // 0x004B5C64-0x004B5C78
	public class ActivatedClientTypeEntry : TypeEntry // TypeDefIndex: 925
	{
		// Fields
		private string applicationUrl; // 0x20
		private Type obj_type; // 0x28
	
		// Properties
		public string ApplicationUrl { get; } // 0x00882380-0x00882388 
		public IContextAttribute[] ContextAttributes { get; } // 0x00882388-0x00882390 
		public Type ObjectType { get; } // 0x00882390-0x00882398 
	
		// Constructors
		public ActivatedClientTypeEntry(string typeName, string assemblyName, string appUrl); // 0x00882244-0x00882380
	
		// Methods
		public override string ToString(); // 0x00882398-0x008823AC
	}

	[ComVisible] // 0x004B5C78-0x004B5C8C
	public class ActivatedServiceTypeEntry : TypeEntry // TypeDefIndex: 926
	{
		// Fields
		private Type obj_type; // 0x20
	
		// Properties
		public Type ObjectType { get; } // 0x008824D8-0x008824E0 
	
		// Constructors
		public ActivatedServiceTypeEntry(string typeName, string assemblyName); // 0x008823AC-0x008824D8
	
		// Methods
		public override string ToString(); // 0x008824E0-0x008824F0
	}

	[Serializable]
	internal class EnvoyInfo : IEnvoyInfo // TypeDefIndex: 927
	{
		// Fields
		private IMessageSink envoySinks; // 0x10
	
		// Properties
		public IMessageSink EnvoySinks { get; } // 0x00A7094C-0x00A70954 
	
		// Constructors
		public EnvoyInfo(IMessageSink sinks); // 0x00A70920-0x00A7094C
	}

	[ComVisible] // 0x004B5C8C-0x004B5CA0
	public interface IChannelInfo // TypeDefIndex: 928
	{
		// Properties
		object[] ChannelData { get; }
	}

	[ComVisible] // 0x004B5CA0-0x004B5CB4
	public interface IEnvoyInfo // TypeDefIndex: 929
	{
		// Properties
		IMessageSink EnvoySinks { get; }
	}

	[ComVisible] // 0x004B5CB4-0x004B5CC8
	public interface IRemotingTypeInfo // TypeDefIndex: 930
	{
		// Properties
		string TypeName { get; }
	
		// Methods
		bool CanCastTo(Type fromType, object o);
	}

	internal abstract class Identity // TypeDefIndex: 931
	{
		// Fields
		protected string _objectUri; // 0x10
		protected IMessageSink _channelSink; // 0x18
		protected IMessageSink _envoySink; // 0x20
		private DynamicPropertyCollection _clientDynamicProperties; // 0x28
		private DynamicPropertyCollection _serverDynamicProperties; // 0x30
		protected ObjRef _objRef; // 0x38
		private bool _disposed; // 0x40
	
		// Properties
		public IMessageSink ChannelSink { get; set; } // 0x00A709EC-0x00A709F4 0x00A709F4-0x00A709FC
		public IMessageSink EnvoySink { get; } // 0x00A709FC-0x00A70A04 
		public string ObjectUri { get; set; } // 0x00A70A04-0x00A70A0C 0x00A70A0C-0x00A70A14
		public bool IsConnected { get; } // 0x00A70A14-0x00A70A24 
		public bool Disposed { get; set; } // 0x00A70A24-0x00A70A2C 0x00A70A2C-0x00A70A38
		public DynamicPropertyCollection ClientDynamicProperties { get; } // 0x00A6CEB8-0x00A6CF20 
		public bool HasServerDynamicSinks { get; } // 0x00A70A38-0x00A70A7C 
	
		// Constructors
		public Identity(string objectUri); // 0x00A709C0-0x00A709EC
	
		// Methods
		public abstract ObjRef CreateObjRef(Type requestedType);
		public void NotifyClientDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async); // 0x00A70A7C-0x00A70B10
		public void NotifyServerDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async); // 0x00A70B10-0x00A70BA4
	}

	internal class ClientIdentity : Identity // TypeDefIndex: 932
	{
		// Fields
		private WeakReference _proxyReference; // 0x48
	
		// Properties
		public MarshalByRefObject ClientProxy { get; set; } // 0x00889478-0x0088950C 0x0088950C-0x0088957C
		public string TargetUri { get; } // 0x00889584-0x008895A4 
	
		// Constructors
		public ClientIdentity(string objectUri, ObjRef objRef); // 0x0088935C-0x00889478
	
		// Methods
		public override ObjRef CreateObjRef(Type requestedType); // 0x0088957C-0x00889584
	}

	[ComVisible] // 0x004B5CC8-0x004B5CDC
	public class InternalRemotingServices // TypeDefIndex: 933
	{
		// Fields
		private static Hashtable _soapAttributes; // 0x00
	
		// Constructors
		static InternalRemotingServices(); // 0x00A710B4-0x00A71120
	
		// Methods
		public static SoapAttribute GetCachedSoapAttribute(object reflectionObject); // 0x00A70BA4-0x00A71094
	}

	[Serializable]
	[ComVisible] // 0x004B5CDC-0x004B5CF0
	public class ObjRef : IObjectReference, ISerializable // TypeDefIndex: 934
	{
		// Fields
		private IChannelInfo channel_info; // 0x10
		private string uri; // 0x18
		private IRemotingTypeInfo typeInfo; // 0x20
		private IEnvoyInfo envoyInfo; // 0x28
		private int flags; // 0x30
		private Type _serverType; // 0x38
		private static int MarshalledObjectRef; // 0x00
		private static int WellKnowObjectRef; // 0x04
	
		// Properties
		internal bool IsReferenceToWellKnow { get; } // 0x00A82EB0-0x00A82F28 
		public virtual IChannelInfo ChannelInfo { [ReliabilityContract] /* 0x004BC6F4-0x004BC70C */ get; } // 0x00A82F28-0x00A82F30 
		public virtual IEnvoyInfo EnvoyInfo { get; set; } // 0x00A82F30-0x00A82F38 0x00A82F38-0x00A82F40
		public virtual IRemotingTypeInfo TypeInfo { get; set; } // 0x00A82F40-0x00A82F48 0x00A82F48-0x00A82F50
		public virtual string URI { get; set; } // 0x00A82F50-0x00A82F58 0x00A82F58-0x00A82F60
		internal Type ServerType { get; } // 0x00A83190-0x00A832D4 
	
		// Constructors
		public ObjRef(); // 0x00A828D4-0x00A828FC
		internal ObjRef(string uri, IChannelInfo cinfo); // 0x00A8295C-0x00A82994
		internal ObjRef(Type type, string url, object remoteChannelData); // 0x00A82994-0x00A82A84
		protected ObjRef(SerializationInfo info, StreamingContext context); // 0x00A82A84-0x00A82EB0
		static ObjRef(); // 0x00A832D4-0x00A83338
	
		// Methods
		internal ObjRef DeserializeInTheCurrentDomain(int domainId, byte[] tInfo); // 0x00A757F4-0x00A75910
		internal byte[] SerializeType(); // 0x00A769A0-0x00A76A44
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00A82F60-0x00A830D4
		public virtual object GetRealObject(StreamingContext context); // 0x00A830D4-0x00A83190
		internal void UpdateChannelInfo(); // 0x00A828FC-0x00A8295C
	}

	[ComVisible] // 0x004B5CF0-0x004B5D04
	public static class RemotingConfiguration // TypeDefIndex: 935
	{
		// Fields
		private static string applicationID; // 0x00
		private static string applicationName; // 0x08
		private static string processGuid; // 0x10
		private static bool defaultConfigRead; // 0x18
		private static bool defaultDelayedConfigRead; // 0x19
		private static string _errorMode; // 0x20
		private static Hashtable wellKnownClientEntries; // 0x28
		private static Hashtable activatedClientEntries; // 0x30
		private static Hashtable wellKnownServiceEntries; // 0x38
		private static Hashtable activatedServiceEntries; // 0x40
		private static Hashtable channelTemplates; // 0x48
		private static Hashtable clientProviderTemplates; // 0x50
		private static Hashtable serverProviderTemplates; // 0x58
	
		// Properties
		public static string ApplicationName { get; set; } // 0x00A86CD0-0x00A86D38 0x00A86D38-0x00A86DA4
		public static string ProcessId { get; } // 0x00A86DA4-0x00A86E6C 
	
		// Constructors
		static RemotingConfiguration(); // 0x00A891DC-0x00A89340
	
		// Methods
		internal static void LoadDefaultDelayedChannels(); // 0x00A86E6C-0x00A871A8
		public static ActivatedClientTypeEntry IsRemotelyActivatedClientType(Type svrType); // 0x00A871A8-0x00A87328
		public static WellKnownClientTypeEntry IsWellKnownClientType(Type svrType); // 0x00A87328-0x00A874A8
		public static void RegisterActivatedClientType(ActivatedClientTypeEntry entry); // 0x00A874A8-0x00A8771C
		public static void RegisterActivatedServiceType(ActivatedServiceTypeEntry entry); // 0x00A8771C-0x00A87858
		public static void RegisterWellKnownClientType(WellKnownClientTypeEntry entry); // 0x00A87858-0x00A87ACC
		public static void RegisterWellKnownServiceType(WellKnownServiceTypeEntry entry); // 0x00A87ACC-0x00A87C4C
		internal static void RegisterChannelTemplate(ChannelData channel); // 0x00A87D74-0x00A87E04
		internal static void RegisterClientProviderTemplate(ProviderData prov); // 0x00A87E04-0x00A87E94
		internal static void RegisterServerProviderTemplate(ProviderData prov); // 0x00A87E94-0x00A87F24
		internal static void RegisterChannels(ArrayList channels, bool onlyDelayed); // 0x00A87F24-0x00A88B04
		internal static void RegisterTypes(ArrayList types); // 0x00A88B04-0x00A88FA8
		public static bool CustomErrorsEnabled(bool isLocalRequest); // 0x00A88FA8-0x00A89074
		internal static void SetCustomErrorsMode(string mode); // 0x00A89074-0x00A891DC
	}

	internal class ConfigHandler : SmallXmlParser.IContentHandler // TypeDefIndex: 936
	{
		// Fields
		private ArrayList typeEntries; // 0x10
		private ArrayList channelInstances; // 0x18
		private ChannelData currentChannel; // 0x20
		private Stack currentProviderData; // 0x28
		private string currentClientUrl; // 0x30
		private string appName; // 0x38
		private string currentXmlPath; // 0x40
		private bool onlyDelayedChannels; // 0x48
	
		// Constructors
		public ConfigHandler(bool onlyDelayedChannels); // 0x008895A4-0x0088964C
	
		// Methods
		private void ValidatePath(string element, params /* 0x004BD310-0x004BD320 */ string[] paths); // 0x0088964C-0x00889758
		private bool CheckPath(string path); // 0x00889758-0x00889840
		public void OnStartParsing(SmallXmlParser parser); // 0x00889840-0x00889844
		public void OnProcessingInstruction(string name, string text); // 0x00889844-0x00889848
		public void OnIgnorableWhitespace(string s); // 0x00889848-0x0088984C
		public void OnStartElement(string name, SmallXmlParser.IAttrList attrs); // 0x0088984C-0x008899F0
		public void ParseElement(string name, SmallXmlParser.IAttrList attrs); // 0x008899F0-0x0088A94C
		public void OnEndElement(string name); // 0x0088C2D8-0x0088C364
		private void ReadCustomProviderData(string name, SmallXmlParser.IAttrList attrs); // 0x0088A94C-0x0088ACCC
		private void ReadLifetine(SmallXmlParser.IAttrList attrs); // 0x0088ACCC-0x0088B2A0
		private TimeSpan ParseTime(string s); // 0x0088C364-0x0088C73C
		private void ReadChannel(SmallXmlParser.IAttrList attrs, bool isTemplate); // 0x0088B2A0-0x0088B648
		private ProviderData ReadProvider(string name, SmallXmlParser.IAttrList attrs, bool isTemplate); // 0x0088B648-0x0088BA00
		private void ReadClientActivated(SmallXmlParser.IAttrList attrs); // 0x0088BC98-0x0088BDC8
		private void ReadServiceActivated(SmallXmlParser.IAttrList attrs); // 0x0088BDC8-0x0088BE90
		private void ReadClientWellKnown(SmallXmlParser.IAttrList attrs); // 0x0088BA00-0x0088BAE8
		private void ReadServiceWellKnown(SmallXmlParser.IAttrList attrs); // 0x0088BAE8-0x0088BC98
		private void ReadInteropXml(SmallXmlParser.IAttrList attrs, bool isElement); // 0x0088BE90-0x0088C06C
		private void ReadPreload(SmallXmlParser.IAttrList attrs); // 0x0088C06C-0x0088C2D8
		private string GetNotNull(SmallXmlParser.IAttrList attrs, string name); // 0x0088C73C-0x0088C884
		private string ExtractAssembly(ref string type); // 0x0088C884-0x0088C95C
		public void OnChars(string ch); // 0x0088C95C-0x0088C960
		public void OnEndParsing(SmallXmlParser parser); // 0x0088C960-0x0088DA88
	}

	internal class ChannelData // TypeDefIndex: 937
	{
		// Fields
		internal string Ref; // 0x10
		internal string Type; // 0x18
		internal string Id; // 0x20
		internal string DelayLoadAsClientChannel; // 0x28
		private ArrayList _serverProviders; // 0x30
		private ArrayList _clientProviders; // 0x38
		private Hashtable _customProperties; // 0x40
	
		// Properties
		internal ArrayList ServerProviders { get; } // 0x00884458-0x008844C4 
		public ArrayList ClientProviders { get; } // 0x008844C4-0x00884530 
		public Hashtable CustomProperties { get; } // 0x00884530-0x0088459C 
	
		// Constructors
		public ChannelData(); // 0x00884E04-0x00884EAC
	
		// Methods
		public void CopyFrom(ChannelData other); // 0x0088459C-0x00884E04
	}

	internal class ProviderData // TypeDefIndex: 938
	{
		// Fields
		internal string Ref; // 0x10
		internal string Type; // 0x18
		internal string Id; // 0x20
		internal Hashtable CustomProperties; // 0x28
		internal IList CustomData; // 0x30
	
		// Constructors
		public ProviderData(); // 0x00A70958-0x00A709C0
	
		// Methods
		public void CopyFrom(ProviderData other); // 0x00A83338-0x00A83988
	}

	internal class FormatterData : ProviderData // TypeDefIndex: 939
	{
		// Constructors
		public FormatterData(); // 0x00A70954-0x00A70958
	}

	[Serializable]
	[ComVisible] // 0x004B5D04-0x004B5D18
	public class RemotingException : SystemException // TypeDefIndex: 940
	{
		// Constructors
		public RemotingException(); // 0x00A89340-0x00A89348
		public RemotingException(string message); // 0x00A6ED50-0x00A6ED58
		protected RemotingException(SerializationInfo info, StreamingContext context); // 0x00A89348-0x00A89350
		public RemotingException(string message, Exception InnerException); // 0x00A89350-0x00A89358
	}

	[ComVisible] // 0x004B5D18-0x004B5D2C
	public static class RemotingServices // TypeDefIndex: 941
	{
		// Fields
		private static Hashtable uri_hash; // 0x00
		private static BinaryFormatter _serializationFormatter; // 0x08
		private static BinaryFormatter _deserializationFormatter; // 0x10
		private static string app_id; // 0x18
		private static readonly object app_id_lock; // 0x20
		private static int next_id; // 0x28
		private static readonly MethodInfo FieldSetterMethod; // 0x30
		private static readonly MethodInfo FieldGetterMethod; // 0x38
	
		// Nested types
		[Serializable]
		private class CACD // TypeDefIndex: 942
		{
			// Fields
			public object d; // 0x10
			public object c; // 0x18
	
			// Constructors
			public CACD(); // 0x00921698-0x009216A0
		}
	
		// Constructors
		static RemotingServices(); // 0x00A89358-0x00A895A0
	
		// Methods
		internal static object InternalExecute(MethodBase method, object obj, object[] parameters, out object[] out_args); // 0x00A89600-0x00A89604
		internal static MethodBase GetVirtualMethod(Type type, MethodBase method); // 0x00A7D808-0x00A7D80C
		public static bool IsTransparentProxy(object proxy); // 0x00A6CE00-0x00A6CE64
		internal static IMethodReturnMessage InternalExecuteMessage(MarshalByRefObject target, IMethodCallMessage reqMsg); // 0x00A81554-0x00A82004
		[ComVisible] // 0x004BC70C-0x004BC720
		public static object Connect(Type classToProxy, string url); // 0x00A89604-0x00A8969C
		[ComVisible] // 0x004BC720-0x004BC734
		public static object Connect(Type classToProxy, string url, object data); // 0x00A89720-0x00A897BC
		public static Type GetServerTypeForUri(string URI); // 0x00A7D3A4-0x00A7D468
		public static object Unmarshal(ObjRef objectRef); // 0x00A75910-0x00A75978
		public static object Unmarshal(ObjRef objectRef, bool fRefine); // 0x00A897BC-0x00A89A34
		public static ObjRef Marshal(MarshalByRefObject Obj); // 0x00A751D8-0x00A75244
		public static ObjRef Marshal(MarshalByRefObject Obj, string ObjURI, Type RequestedType); // 0x00A89A34-0x00A89A88
		private static string NewUri(); // 0x00A89A88-0x00A89E14
		[ReliabilityContract] // 0x004BC734-0x004BC74C
		public static RealProxy GetRealProxy(object proxy); // 0x00A6CE64-0x00A6CEB8
		public static MethodBase GetMethodBaseFromMethodMessage(IMethodMessage msg); // 0x00A7D80C-0x00A7DAE0
		internal static MethodBase GetMethodBaseFromName(Type type, string methodName, Type[] signature); // 0x00A7D614-0x00A7D808
		private static MethodBase FindInterfaceMethod(Type type, string methodName, Type[] signature); // 0x00A8A14C-0x00A8A2AC
		public static void GetObjectData(object obj, SerializationInfo info, StreamingContext context); // 0x00A7FF5C-0x00A80080
		public static bool IsOneWay(MethodBase method); // 0x00A7FB6C-0x00A7FC04
		internal static object CreateClientProxy(ActivatedClientTypeEntry entry, object[] activationAttributes); // 0x00A8A2AC-0x00A8A414
		internal static object CreateClientProxy(Type objectType, string url, object[] activationAttributes); // 0x00A8A414-0x00A8A548
		internal static object CreateClientProxy(WellKnownClientTypeEntry entry); // 0x00A8A63C-0x00A8A6BC
		internal static object CreateClientProxyForContextBound(Type type, object[] activationAttributes); // 0x00A8A6BC-0x00A8A838
		internal static Identity GetIdentityForUri(string uri); // 0x00A852C4-0x00A85510
		private static string RemoveAppNameFromUri(string uri); // 0x00A8A8BC-0x00A8A9D0
		internal static ClientIdentity GetOrCreateClientIdentity(ObjRef objRef, Type proxyType, out object clientProxy); // 0x00A8A9D0-0x00A8AEBC
		private static IMessageSink GetClientChannelSinkChain(string url, object channelData, out string objectUri); // 0x00A8A548-0x00A8A63C
		internal static ClientActivatedIdentity CreateContextBoundObjectIdentity(Type objectType); // 0x00A8AEBC-0x00A8AFA4
		internal static ClientActivatedIdentity CreateClientActivatedServerIdentity(MarshalByRefObject realObject, Type objectType, string objectUri); // 0x00A8A00C-0x00A8A14C
		internal static ServerIdentity CreateWellKnownServerIdentity(Type objectType, string objectUri, WellKnownObjectMode mode); // 0x00A87C4C-0x00A87D74
		private static void RegisterServerIdentity(ServerIdentity identity); // 0x00A89E14-0x00A8A00C
		internal static object GetProxyForRemoteObject(ObjRef objref, Type classToProxy); // 0x00A83B48-0x00A83C4C
		internal static object GetRemoteObject(ObjRef objRef, Type proxyType); // 0x00A8969C-0x00A89720
		internal static byte[] SerializeCallData(object obj); // 0x00A8AFA4-0x00A8B0EC
		internal static object DeserializeCallData(byte[] array); // 0x00A8B0EC-0x00A8B244
		internal static byte[] SerializeExceptionData(Exception ex); // 0x00A8B244-0x00A8B308
		private static void RegisterInternalChannels(); // 0x00A895A0-0x00A89600
		internal static void DisposeIdentity(Identity ident); // 0x00A86324-0x00A86520
		internal static Identity GetMessageTargetIdentity(IMessage msg); // 0x00A6F6E4-0x00A6FA04
		internal static void SetMessageTargetIdentity(IMessage msg, Identity ident); // 0x00A8B308-0x00A8C430
		internal static bool UpdateOutArgObject(ParameterInfo pi, object local, object remote); // 0x00A85510-0x00A856AC
		private static string GetNormalizedUri(string uri); // 0x00A8A838-0x00A8A8BC
	}

	internal abstract class ServerIdentity : Identity // TypeDefIndex: 943
	{
		// Fields
		protected Type _objectType; // 0x48
		protected MarshalByRefObject _serverObject; // 0x50
		protected IMessageSink _serverSink; // 0x58
		protected Context _context; // 0x60
		protected Lease _lease; // 0x68
	
		// Properties
		public Type ObjectType { get; } // 0x009216DC-0x009216E4 
		public Lease Lease { get; } // 0x00921F28-0x00921F30 
		public Context Context { get; set; } // 0x00921F30-0x00921F38 0x00921F38-0x00921F40
	
		// Constructors
		public ServerIdentity(string objectUri, Context context, Type objectType); // 0x009216A0-0x009216DC
	
		// Methods
		public void StartTrackingLifetime(ILease lease); // 0x009216E4-0x00921864
		public virtual void OnLifetimeExpired(); // 0x00921864-0x00921868
		public override ObjRef CreateObjRef(Type requestedType); // 0x009218F4-0x00921A7C
		public void AttachServerObject(MarshalByRefObject serverObject, Context context); // 0x00921E0C-0x00921F28
		public abstract IMessage SyncObjectProcessMessage(IMessage msg);
		public abstract IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink);
		protected void DisposeServerObject(); // 0x00921868-0x009218F4
	}

	internal class ClientActivatedIdentity : ServerIdentity // TypeDefIndex: 944
	{
		// Fields
		private MarshalByRefObject _targetThis; // 0x70
	
		// Constructors
		public ClientActivatedIdentity(string objectUri, Type objectType); // 0x008890D0-0x008890E4
	
		// Methods
		public MarshalByRefObject GetServerObject(); // 0x008890E4-0x008890EC
		public void SetClientProxy(MarshalByRefObject obj); // 0x008890EC-0x008890F4
		public override void OnLifetimeExpired(); // 0x008890F4-0x00889168
		public override IMessage SyncObjectProcessMessage(IMessage msg); // 0x00889168-0x0088925C
		public override IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink); // 0x0088925C-0x0088935C
	}

	internal class SingletonIdentity : ServerIdentity // TypeDefIndex: 945
	{
		// Constructors
		public SingletonIdentity(string objectUri, Context context, Type objectType); // 0x00922CF4-0x00922D30
	
		// Methods
		public MarshalByRefObject GetServerObject(); // 0x00922D30-0x00922EFC
		public override IMessage SyncObjectProcessMessage(IMessage msg); // 0x00922EFC-0x00922FE8
		public override IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink); // 0x00922FE8-0x009230E0
	}

	internal class SingleCallIdentity : ServerIdentity // TypeDefIndex: 946
	{
		// Constructors
		public SingleCallIdentity(string objectUri, Context context, Type objectType); // 0x009228F0-0x0092292C
	
		// Methods
		public override IMessage SyncObjectProcessMessage(IMessage msg); // 0x0092292C-0x00922B40
		public override IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink); // 0x00922B40-0x00922CF4
	}

	internal class DisposerReplySink : IMessageSink // TypeDefIndex: 947
	{
		// Fields
		private IMessageSink _next; // 0x10
		private IDisposable _disposable; // 0x18
	
		// Constructors
		public DisposerReplySink(IMessageSink next, IDisposable disposable); // 0x00A70750-0x00A70788
	
		// Methods
		public IMessage SyncProcessMessage(IMessage msg); // 0x00A70788-0x00A708BC
		public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x00A708BC-0x00A70920
	}

	[ComVisible] // 0x004B5D2C-0x004B5D40
	public class SoapServices // TypeDefIndex: 948
	{
		// Fields
		private static Hashtable _xmlTypes; // 0x00
		private static Hashtable _xmlElements; // 0x08
		private static Hashtable _soapActions; // 0x10
		private static Hashtable _soapActionsMethods; // 0x18
		private static Hashtable _typeInfos; // 0x20
	
		// Properties
		public static string XmlNsForClrTypeWithAssembly { get; } // 0x009230E0-0x00923128 
		public static string XmlNsForClrTypeWithNs { get; } // 0x00923128-0x00923170 
		public static string XmlNsForClrTypeWithNsAndAssembly { get; } // 0x00923170-0x009231B8 
	
		// Nested types
		private class TypeInfo // TypeDefIndex: 949
		{
			// Fields
			public Hashtable Attributes; // 0x10
			public Hashtable Elements; // 0x18
	
			// Constructors
			public TypeInfo(); // 0x00924198-0x009241A0
		}
	
		// Constructors
		static SoapServices(); // 0x009241A0-0x00924294
	
		// Methods
		public static string CodeXmlNamespaceForClrTypeNamespace(string typeNamespace, string assemblyName); // 0x009231B8-0x00923370
		private static string GetNameKey(string name, string namspace); // 0x00923424-0x009234A0
		private static string GetAssemblyName(MethodBase mb); // 0x009234A0-0x009235D8
		public static bool GetXmlElementForInteropType(Type type, out string xmlElement, out string xmlNamespace); // 0x009235D8-0x009236AC
		public static string GetXmlNamespaceForMethodCall(MethodBase mb); // 0x009236AC-0x00923754
		public static string GetXmlNamespaceForMethodResponse(MethodBase mb); // 0x00923754-0x009237FC
		public static bool GetXmlTypeForInteropType(Type type, out string xmlType, out string xmlTypeNamespace); // 0x009237FC-0x009238C8
		public static void PreLoad(Assembly assembly); // 0x009238C8-0x009239A4
		public static void PreLoad(Type type); // 0x009239A4-0x00923EA0
		public static void RegisterInteropXmlElement(string xmlElement, string xmlNamespace, Type type); // 0x0092401C-0x00924198
		public static void RegisterInteropXmlType(string xmlType, string xmlTypeNamespace, Type type); // 0x00923EA0-0x0092401C
		private static string EncodeNs(string ns); // 0x00923370-0x00923424
	}

	[ComVisible] // 0x004B5D40-0x004B5D54
	public class TypeEntry // TypeDefIndex: 950
	{
		// Fields
		private string assembly_name; // 0x10
		private string type_name; // 0x18
	
		// Properties
		public string AssemblyName { get; set; } // 0x0092429C-0x009242A4 0x009242A4-0x009242AC
		public string TypeName { get; set; } // 0x009242AC-0x009242B4 0x009242B4-0x009242BC
	
		// Constructors
		protected TypeEntry(); // 0x00924294-0x0092429C
	}

	[Serializable]
	internal class TypeInfo : IRemotingTypeInfo // TypeDefIndex: 951
	{
		// Fields
		private string serverType; // 0x10
		private string[] serverHierarchy; // 0x18
		private string[] interfacesImplemented; // 0x20
	
		// Properties
		public string TypeName { get; } // 0x009242BC-0x009242C4 
	
		// Constructors
		public TypeInfo(Type type); // 0x00921A7C-0x00921E0C
	
		// Methods
		public bool CanCastTo(Type fromType, object o); // 0x009242C4-0x00924538
	}

	[ComVisible] // 0x004B5D54-0x004B5D68
	public class WellKnownClientTypeEntry : TypeEntry // TypeDefIndex: 952
	{
		// Fields
		private Type obj_type; // 0x20
		private string obj_url; // 0x28
		private string app_url; // 0x30
	
		// Properties
		public string ApplicationUrl { get; } // 0x00924674-0x0092467C 
		public Type ObjectType { get; } // 0x0092467C-0x00924684 
		public string ObjectUrl { get; } // 0x00924684-0x0092468C 
	
		// Constructors
		public WellKnownClientTypeEntry(string typeName, string assemblyName, string objectUrl); // 0x00924538-0x00924674
	
		// Methods
		public override string ToString(); // 0x0092468C-0x009246A8
	}

	[Serializable]
	[ComVisible] // 0x004B5D68-0x004B5D7C
	public enum WellKnownObjectMode // TypeDefIndex: 953
	{
		Singleton = 1,
		SingleCall = 2
	}

	[ComVisible] // 0x004B5D7C-0x004B5D90
	public class WellKnownServiceTypeEntry : TypeEntry // TypeDefIndex: 954
	{
		// Fields
		private Type obj_type; // 0x20
		private string obj_uri; // 0x28
		private WellKnownObjectMode obj_mode; // 0x30
	
		// Properties
		public WellKnownObjectMode Mode { get; } // 0x009247E8-0x009247F0 
		public Type ObjectType { get; } // 0x009247F0-0x009247F8 
		public string ObjectUri { get; } // 0x009247F8-0x00924800 
	
		// Constructors
		public WellKnownServiceTypeEntry(string typeName, string assemblyName, string objectUri, WellKnownObjectMode mode); // 0x009246A8-0x009247E8
	
		// Methods
		public override string ToString(); // 0x00924800-0x00924970
	}
}

namespace System.Runtime.Remoting.Services
{
	[ComVisible] // 0x004B5D90-0x004B5DA4
	public interface ITrackingHandler // TypeDefIndex: 955
	{
		// Methods
		void DisconnectedObject(object obj);
		void MarshaledObject(object obj, ObjRef or);
		void UnmarshaledObject(object obj, ObjRef or);
	}

	[ComVisible] // 0x004B5DA4-0x004B5DB8
	public class TrackingServices // TypeDefIndex: 956
	{
		// Fields
		private static ArrayList _handlers; // 0x00
	
		// Constructors
		static TrackingServices(); // 0x00922884-0x009228F0
	
		// Methods
		internal static void NotifyMarshaledObject(object obj, ObjRef or); // 0x0092224C-0x00922568
		internal static void NotifyUnmarshaledObject(object obj, ObjRef or); // 0x00922568-0x00922884
		internal static void NotifyDisconnectedObject(object obj); // 0x00921F40-0x0092224C
	}
}

namespace System.Runtime.Remoting.Proxies
{
	[AttributeUsage] // 0x004B5DB8-0x004B5DF8
	[ComVisible] // 0x004B5DB8-0x004B5DF8
	public class ProxyAttribute : Attribute // TypeDefIndex: 957
	{
		// Methods
		public virtual MarshalByRefObject CreateInstance(Type serverType); // 0x00A83988-0x00A83A8C
		public virtual RealProxy CreateProxy(ObjRef objRef, Type serverType, object serverObject, Context serverContext); // 0x00A83ADC-0x00A83B48
	}

	internal class TransparentProxy // TypeDefIndex: 958
	{
		// Fields
		public RealProxy _rp; // 0x10
		private RuntimeRemoteClassHandle _class; // 0x18
		private bool _custom_type_info; // 0x20
	
		// Properties
		private bool IsContextBoundObject { get; } // 0x00A866C8-0x00A866E8 
		private Context TargetContext { get; } // 0x00A866E8-0x00A86708 
	
		// Constructors
		public TransparentProxy(); // 0x00A86CC8-0x00A86CD0
	
		// Methods
		internal RuntimeType GetProxyType(); // 0x00A865F4-0x00A866C8
		private bool InCurrentContext(); // 0x00A86708-0x00A86758
		internal object LoadRemoteFieldNew(IntPtr classPtr, IntPtr fieldPtr); // 0x00A86758-0x00A86A10
		internal void StoreRemoteField(IntPtr classPtr, IntPtr fieldPtr, object arg); // 0x00A86A10-0x00A86CC8
	}

	[ComVisible] // 0x004B5DF8-0x004B5E0C
	public abstract class RealProxy // TypeDefIndex: 959
	{
		// Fields
		private Type class_to_proxy; // 0x10
		internal Context _targetContext; // 0x18
		internal MarshalByRefObject _server; // 0x20
		private int _targetDomainId; // 0x28
		internal string _targetUri; // 0x30
		internal Identity _objectIdentity; // 0x38
		private object _objTP; // 0x40
		private object _stubData; // 0x48
	
		// Properties
		internal Identity ObjectIdentity { get; set; } // 0x00A83F80-0x00A83F88 0x00A83F88-0x00A83F90
	
		// Constructors
		protected RealProxy(); // 0x00A83C4C-0x00A83C5C
		protected RealProxy(Type classToProxy); // 0x00A83C5C-0x00A83CB4
		internal RealProxy(Type classToProxy, ClientIdentity identity); // 0x00A83DC8-0x00A83E2C
		protected RealProxy(Type classToProxy, IntPtr stub, object stubData); // 0x00A83CB4-0x00A83DC8
	
		// Methods
		private static Type InternalGetProxyType(object transparentProxy); // 0x00A83E2C-0x00A83E30
		public Type GetProxiedType(); // 0x00A83E30-0x00A83EDC
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00A83EDC-0x00A83F80
		public abstract IMessage Invoke(IMessage msg);
		internal static object PrivateInvoke(RealProxy rp, IMessage msg, out Exception exc, out object[] out_args); // 0x00A83F90-0x00A8485C
		internal virtual object InternalGetTransparentProxy(string className); // 0x00A8502C-0x00A85030
		public virtual object GetTransparentProxy(); // 0x00A85030-0x00A8519C
		protected void AttachServer(MarshalByRefObject s); // 0x00A8519C-0x00A851A4
		internal void SetTargetDomain(int domainId); // 0x00A851A4-0x00A851AC
		internal object GetAppDomainTarget(); // 0x00A851AC-0x00A852C4
		private static object[] ProcessResponse(IMethodReturnMessage mrm, MonoMethodMessage call); // 0x00A84930-0x00A8502C
	}

	internal class RemotingProxy : RealProxy, IRemotingTypeInfo // TypeDefIndex: 960
	{
		// Fields
		private static MethodInfo _cache_GetTypeMethod; // 0x00
		private static MethodInfo _cache_GetHashCodeMethod; // 0x08
		private IMessageSink _sink; // 0x50
		private bool _hasEnvoySink; // 0x58
		private ConstructionCall _ctorCall; // 0x60
	
		// Properties
		public string TypeName { get; } // 0x00A85EDC-0x00A8601C 
	
		// Constructors
		internal RemotingProxy(Type type, ClientIdentity identity); // 0x00A856AC-0x00A856F8
		internal RemotingProxy(Type type, string activationUrl, object[] activationAttributes); // 0x00A83A8C-0x00A83ADC
		static RemotingProxy(); // 0x00A86520-0x00A865F4
	
		// Methods
		public override IMessage Invoke(IMessage request); // 0x00A856F8-0x00A85CB0
		internal void AttachIdentity(Identity identity); // 0x00A85CB0-0x00A85EDC
		internal IMessage ActivateRemoteObject(IMethodMessage request); // 0x00A8485C-0x00A84930
		public bool CanCastTo(Type fromType, object o); // 0x00A8601C-0x00A86234
		~RemotingProxy(); // 0x00A86234-0x00A86324
	}
}

namespace System.Runtime.Remoting.Lifetime
{
	[ComVisible] // 0x004B5E0C-0x004B5E20
	public interface ILease // TypeDefIndex: 961
	{
		// Properties
		TimeSpan CurrentLeaseTime { get; }
		LeaseState CurrentState { get; }
		TimeSpan InitialLeaseTime { set; }
		TimeSpan RenewOnCallTime { get; set; }
		TimeSpan SponsorshipTimeout { set; }
	
		// Methods
		TimeSpan Renew(TimeSpan renewalTime);
	}

	[ComVisible] // 0x004B5E20-0x004B5E34
	public interface ISponsor // TypeDefIndex: 962
	{
		// Methods
		TimeSpan Renewal(ILease lease);
	}

	internal class Lease : MarshalByRefObject, ILease // TypeDefIndex: 963
	{
		// Fields
		private DateTime _leaseExpireTime; // 0x18
		private LeaseState _currentState; // 0x20
		private TimeSpan _initialLeaseTime; // 0x28
		private TimeSpan _renewOnCallTime; // 0x30
		private TimeSpan _sponsorshipTimeout; // 0x38
		private ArrayList _sponsors; // 0x40
		private Queue _renewingSponsors; // 0x48
		private RenewalDelegate _renewalDelegate; // 0x50
	
		// Properties
		public TimeSpan CurrentLeaseTime { get; } // 0x00A712B8-0x00A71330 
		public LeaseState CurrentState { get; } // 0x00A71330-0x00A71338 
		public TimeSpan InitialLeaseTime { set; } // 0x00A71344-0x00A71498
		public TimeSpan RenewOnCallTime { get; set; } // 0x00A71498-0x00A714A0 0x00A714A0-0x00A7157C
		public TimeSpan SponsorshipTimeout { set; } // 0x00A7157C-0x00A71658
	
		// Nested types
		private delegate TimeSpan RenewalDelegate(ILease lease); // TypeDefIndex: 964; 0x00A71E20-0x00A721DC
	
		// Constructors
		public Lease(); // 0x00A71120-0x00A712B8
	
		// Methods
		public void Activate(); // 0x00A71338-0x00A71344
		public TimeSpan Renew(TimeSpan renewalTime); // 0x00A71658-0x00A716F4
		public void Unregister(ISponsor obj); // 0x00A716F4-0x00A71838
		internal void UpdateState(); // 0x00A71838-0x00A719A8
		private void CheckNextSponsor(); // 0x00A719A8-0x00A71BE0
		private void ProcessSponsorResponse(object state, bool timedOut); // 0x00A71C14-0x00A71DF4
	}

	internal class LeaseManager // TypeDefIndex: 965
	{
		// Fields
		private ArrayList _objects; // 0x10
		private Timer _timer; // 0x18
	
		// Constructors
		public LeaseManager(); // 0x00A72788-0x00A727F0
	
		// Methods
		public void SetPollTime(TimeSpan timeSpan); // 0x00A721DC-0x00A722AC
		public void TrackLifetime(ServerIdentity identity); // 0x00A722AC-0x00A723C4
		public void StartManager(); // 0x00A723C4-0x00A72528
		public void StopManager(); // 0x00A72528-0x00A72544
		public void ManageLeases(object state); // 0x00A72544-0x00A72788
	}

	internal class LeaseSink : IMessageSink // TypeDefIndex: 966
	{
		// Fields
		private IMessageSink _nextSink; // 0x10
	
		// Constructors
		public LeaseSink(IMessageSink nextSink); // 0x00A6E380-0x00A6E3AC
	
		// Methods
		public IMessage SyncProcessMessage(IMessage msg); // 0x00A727F0-0x00A728BC
		public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x00A72B84-0x00A72C5C
		private void RenewLease(IMessage msg); // 0x00A728BC-0x00A72B84
	}

	[Serializable]
	[ComVisible] // 0x004B5E34-0x004B5E48
	public enum LeaseState // TypeDefIndex: 967
	{
		Null = 0,
		Initial = 1,
		Active = 2,
		Renewing = 3,
		Expired = 4
	}

	[ComVisible] // 0x004B5E48-0x004B5E5C
	public sealed class LifetimeServices // TypeDefIndex: 968
	{
		// Fields
		private static TimeSpan _leaseManagerPollTime; // 0x00
		private static TimeSpan _leaseTime; // 0x08
		private static TimeSpan _renewOnCallTime; // 0x10
		private static TimeSpan _sponsorshipTimeout; // 0x18
		private static LeaseManager _leaseManager; // 0x20
	
		// Properties
		public static TimeSpan LeaseManagerPollTime { get; set; } // 0x00A72D50-0x00A72DB8 0x00A72DB8-0x00A72E3C
		public static TimeSpan LeaseTime { get; set; } // 0x00A72E3C-0x00A72EA4 0x00A72EA4-0x00A72F10
		public static TimeSpan RenewOnCallTime { get; set; } // 0x00A72F10-0x00A72F78 0x00A72F78-0x00A72FE4
		public static TimeSpan SponsorshipTimeout { get; set; } // 0x00A72FE4-0x00A7304C 0x00A7304C-0x00A730B8
	
		// Constructors
		static LifetimeServices(); // 0x00A72C5C-0x00A72D50
	
		// Methods
		internal static void TrackLifetime(ServerIdentity identity); // 0x00A730B8-0x00A73130
	}
}

namespace System.Runtime.Remoting.Contexts
{
	[ComVisible] // 0x004B5E5C-0x004B5E70
	public class Context // TypeDefIndex: 969
	{
		// Fields
		private int domain_id; // 0x10
		private int context_id; // 0x14
		private UIntPtr static_data; // 0x18
		private UIntPtr data; // 0x20
		[ContextStatic] // 0x004B9A6C-0x004B9A7C
		private static object[] local_slots; // 0x00
		private static IMessageSink default_server_context_sink; // 0x08
		private IMessageSink server_context_sink_chain; // 0x28
		private IMessageSink client_context_sink_chain; // 0x30
		private List<IContextProperty> context_properties; // 0x38
		private static int global_count; // 0x10
		private LocalDataStoreHolder _localDataStore; // 0x40
		private static LocalDataStoreMgr _localDataStoreMgr; // 0x18
		private static DynamicPropertyCollection global_dynamic_properties; // 0x20
		private DynamicPropertyCollection context_dynamic_properties; // 0x48
		private ContextCallbackObject callback_object; // 0x50
	
		// Properties
		public static Context DefaultContext { get; } // 0x00A6C570-0x00A6C578 
		public virtual int ContextID { get; } // 0x00A6C578-0x00A6C580 
		public virtual IContextProperty[] ContextProperties { get; } // 0x00A6C580-0x00A6C5F0 
		internal bool IsDefaultContext { get; } // 0x00A6C5F0-0x00A6C600 
		internal bool NeedsContextSink { get; } // 0x00A6C600-0x00A6C6FC 
		internal static bool HasGlobalDynamicSinks { get; } // 0x00A6D678-0x00A6D738 
		internal bool HasDynamicSinks { get; } // 0x00A6D7CC-0x00A6D810 
		internal bool HasExitSinks { get; } // 0x00A6D810-0x00A6D8CC 
		private LocalDataStore MyLocalStore { get; } // 0x00A6EE9C-0x00A6F014 
	
		// Constructors
		public Context(); // 0x00A6C428-0x00A6C4BC
		static Context(); // 0x00A6F27C-0x00A6F2E8
	
		// Methods
		private static void RegisterContext(Context ctx); // 0x00A6C420-0x00A6C424
		private static void ReleaseContext(Context ctx); // 0x00A6C424-0x00A6C428
		~Context(); // 0x00A6C4BC-0x00A6C570
		public static bool RegisterDynamicProperty(IDynamicProperty prop, ContextBoundObject obj, Context ctx); // 0x00A6C730-0x00A6C7B8
		public static bool UnregisterDynamicProperty(string name, ContextBoundObject obj, Context ctx); // 0x00A6CBFC-0x00A6CC84
		private static DynamicPropertyCollection GetDynamicPropertyCollection(ContextBoundObject obj, Context ctx); // 0x00A6C7B8-0x00A6C938
		internal static void NotifyGlobalDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async); // 0x00A6CF88-0x00A6D0AC
		internal void NotifyDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async); // 0x00A6D738-0x00A6D7CC
		public virtual IContextProperty GetProperty(string name); // 0x00A6DA7C-0x00A6DC08
		public virtual void SetProperty(IContextProperty prop); // 0x00A6DC08-0x00A6DD44
		public virtual void Freeze(); // 0x00A6DD44-0x00A6DEB4
		public override string ToString(); // 0x00A6DEB4-0x00A6DF34
		internal IMessageSink GetServerContextSinkChain(); // 0x00A6DF34-0x00A6E0FC
		internal IMessageSink GetClientContextSinkChain(); // 0x00A6D8CC-0x00A6DA7C
		internal IMessageSink CreateServerObjectSinkChain(MarshalByRefObject obj, bool forceInternalExecute); // 0x00A6E130-0x00A6E2CC
		internal IMessageSink CreateEnvoySink(MarshalByRefObject serverObject); // 0x00A6E3AC-0x00A6E564
		internal static Context SwitchToContext(Context newContext); // 0x00A6E564-0x00A6E56C
		internal static Context CreateNewContext(IConstructionCallMessage msg); // 0x00A6E56C-0x00A6ED50
		public void DoCallBack(CrossContextDelegate deleg); // 0x00A6ED58-0x00A6EE90
		public static LocalDataStoreSlot AllocateDataSlot(); // 0x00A6F014-0x00A6F088
		public static LocalDataStoreSlot AllocateNamedDataSlot(string name); // 0x00A6F088-0x00A6F104
		public static void FreeNamedDataSlot(string name); // 0x00A6F104-0x00A6F180
		public static LocalDataStoreSlot GetNamedDataSlot(string name); // 0x00A6F180-0x00A6F1FC
		public static object GetData(LocalDataStoreSlot slot); // 0x00A6F1FC-0x00A6F238
		public static void SetData(LocalDataStoreSlot slot, object data); // 0x00A6F238-0x00A6F27C
	}

	internal class DynamicPropertyCollection // TypeDefIndex: 970
	{
		// Fields
		private ArrayList _properties; // 0x10
	
		// Properties
		public bool HasProperties { get; } // 0x00A6C6FC-0x00A6C730 
	
		// Nested types
		private class DynamicPropertyReg // TypeDefIndex: 971
		{
			// Fields
			public IDynamicProperty Property; // 0x10
			public IDynamicMessageSink Sink; // 0x18
	
			// Constructors
			public DynamicPropertyReg(); // 0x00A70748-0x00A70750
		}
	
		// Constructors
		public DynamicPropertyCollection(); // 0x00A6CF20-0x00A6CF88
	
		// Methods
		public bool RegisterDynamicProperty(IDynamicProperty prop); // 0x00A6C938-0x00A6CBFC
		public bool UnregisterDynamicProperty(string name); // 0x00A6CC84-0x00A6CE00
		public void NotifyMessage(bool start, IMessage msg, bool client_site, bool async); // 0x00A6D0AC-0x00A6D678
		private int FindProperty(string name); // 0x00A705B0-0x00A70748
	}

	internal class ContextCallbackObject : ContextBoundObject // TypeDefIndex: 972
	{
		// Constructors
		public ContextCallbackObject(); // 0x00A6EE90-0x00A6EE98
	
		// Methods
		public void DoCallBack(CrossContextDelegate deleg); // 0x00A6EE98-0x00A6EE9C
	}

	internal class CrossContextChannel : IMessageSink // TypeDefIndex: 973
	{
		// Nested types
		private class ContextRestoreSink : IMessageSink // TypeDefIndex: 974
		{
			// Fields
			private IMessageSink _next; // 0x10
			private Context _context; // 0x18
			private IMessage _call; // 0x20
	
			// Constructors
			public ContextRestoreSink(IMessageSink next, Context context, IMessage call); // 0x00A6FFBC-0x00A6FFFC
	
			// Methods
			public IMessage SyncProcessMessage(IMessage msg); // 0x00A70004-0x00A702E0
			public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x00A702E0-0x00A70344
		}
	
		// Constructors
		public CrossContextChannel(); // 0x00A6FFFC-0x00A70004
	
		// Methods
		public IMessage SyncProcessMessage(IMessage msg); // 0x00A6F2E8-0x00A6F6E4
		public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x00A6FB58-0x00A6FFBC
	}

	[ComVisible] // 0x004B5E70-0x004B5E84
	public delegate void CrossContextDelegate(); // TypeDefIndex: 975; 0x00A70354-0x00A70570

	[ComVisible] // 0x004B5E84-0x004B5E98
	public interface IContextAttribute // TypeDefIndex: 976
	{
		// Methods
		void GetPropertiesForNewContext(IConstructionCallMessage msg);
		bool IsContextOK(Context ctx, IConstructionCallMessage msg);
	}

	[ComVisible] // 0x004B5E98-0x004B5EAC
	public interface IContextProperty // TypeDefIndex: 977
	{
		// Properties
		string Name { get; }
	
		// Methods
		void Freeze(Context newContext);
		bool IsNewContextOK(Context newCtx);
	}

	[ComVisible] // 0x004B5EAC-0x004B5EC0
	public interface IContributeClientContextSink // TypeDefIndex: 978
	{
		// Methods
		IMessageSink GetClientContextSink(IMessageSink nextSink);
	}

	[ComVisible] // 0x004B5EC0-0x004B5ED4
	public interface IContributeDynamicSink // TypeDefIndex: 979
	{
		// Methods
		IDynamicMessageSink GetDynamicSink();
	}

	[ComVisible] // 0x004B5ED4-0x004B5EE8
	public interface IContributeEnvoySink // TypeDefIndex: 980
	{
		// Methods
		IMessageSink GetEnvoySink(MarshalByRefObject obj, IMessageSink nextSink);
	}

	[ComVisible] // 0x004B5EE8-0x004B5EFC
	public interface IContributeObjectSink // TypeDefIndex: 981
	{
		// Methods
		IMessageSink GetObjectSink(MarshalByRefObject obj, IMessageSink nextSink);
	}

	[ComVisible] // 0x004B5EFC-0x004B5F10
	public interface IContributeServerContextSink // TypeDefIndex: 982
	{
		// Methods
		IMessageSink GetServerContextSink(IMessageSink nextSink);
	}

	[ComVisible] // 0x004B5F10-0x004B5F24
	public interface IDynamicMessageSink // TypeDefIndex: 983
	{
		// Methods
		void ProcessMessageFinish(IMessage replyMsg, bool bCliSide, bool bAsync);
		void ProcessMessageStart(IMessage reqMsg, bool bCliSide, bool bAsync);
	}

	[ComVisible] // 0x004B5F24-0x004B5F38
	public interface IDynamicProperty // TypeDefIndex: 984
	{
		// Properties
		string Name { get; }
	}
}

namespace System.Runtime.Remoting.Channels
{
	[ComVisible] // 0x004B5F38-0x004B5F4C
	public sealed class ChannelServices // TypeDefIndex: 985
	{
		// Fields
		private static ArrayList registeredChannels; // 0x00
		private static ArrayList delayedClientChannels; // 0x08
		private static CrossContextChannel _crossContextSink; // 0x10
		internal static string CrossContextUrl; // 0x18
		private static IList oldStartModeTypes; // 0x20
	
		// Properties
		internal static CrossContextChannel CrossContextChannel { get; } // 0x00885754-0x008857BC 
	
		// Constructors
		static ChannelServices(); // 0x00887E2C-0x00887FA4
	
		// Methods
		internal static IMessageSink CreateClientChannelSinkChain(string url, object remoteChannelData, out string objectUri); // 0x008857BC-0x00885F84
		internal static IMessageSink CreateClientChannelSinkChain(IChannelSender sender, string url, object[] channelDataArray, out string objectUri); // 0x00885F84-0x0088616C
		[Obsolete] // 0x004BC74C-0x004BC784
		public static void RegisterChannel(IChannel chnl); // 0x0088616C-0x008861D4
		public static void RegisterChannel(IChannel chnl, bool ensureSecurity); // 0x008861D4-0x00886A40
		internal static void RegisterChannelConfig(ChannelData channel); // 0x00886A40-0x008875E0
		private static object CreateProvider(ProviderData prov); // 0x008875E0-0x0088791C
		public static IMessage SyncDispatchMessage(IMessage msg); // 0x0088791C-0x008879F4
		private static ReturnMessage CheckIncomingMessage(IMessage msg); // 0x008879F4-0x00887C84
		internal static IMessage CheckReturnMessage(IMessage callMsg, IMessage retMsg); // 0x00887C84-0x00887E24
		private static bool IsLocalCall(IMessage callMsg); // 0x00887E24-0x00887E2C
		internal static object[] GetCurrentChannelInfo(); // 0x00884F20-0x00885314
	}

	[Serializable]
	internal class CrossAppDomainData // TypeDefIndex: 986
	{
		// Fields
		private object _ContextID; // 0x10
		private int _DomainID; // 0x18
		private string _processGuid; // 0x20
	
		// Properties
		internal int DomainID { get; } // 0x008886D8-0x008886E0 
		internal string ProcessID { get; } // 0x008886E0-0x008886E8 
	
		// Constructors
		internal CrossAppDomainData(int domainId); // 0x0088818C-0x00888230
	}

	[Serializable]
	internal class CrossAppDomainChannel : IChannelSender, IChannelReceiver // TypeDefIndex: 987
	{
		// Fields
		private static object s_lock; // 0x00
	
		// Properties
		public virtual string ChannelName { get; } // 0x008880D0-0x00888118 
		public virtual int ChannelPriority { get; } // 0x00888118-0x00888120 
		public virtual object ChannelData { get; } // 0x00888120-0x0088818C 
	
		// Constructors
		public CrossAppDomainChannel(); // 0x008880C8-0x008880D0
		static CrossAppDomainChannel(); // 0x0088866C-0x008886D8
	
		// Methods
		internal static void RegisterCrossAppDomainChannel(); // 0x00887FA4-0x008880C8
		public virtual void StartListening(object data); // 0x00888230-0x00888234
		public virtual IMessageSink CreateMessageSink(string url, object data, out string uri); // 0x00888234-0x0088839C
	}

	[MonoTODO] // 0x004B5F4C-0x004B5F84
	internal class CrossAppDomainSink : IMessageSink // TypeDefIndex: 988
	{
		// Fields
		private static Hashtable s_sinks; // 0x00
		private static MethodInfo processMessageMethod; // 0x08
		private int _domainID; // 0x10
	
		// Properties
		internal int TargetDomainId { get; } // 0x00888714-0x0088871C 
	
		// Nested types
		private struct ProcessMessageRes // TypeDefIndex: 989
		{
			// Fields
			public byte[] arrResponse; // 0x00
			public CADMethodReturnMessage cadMrm; // 0x08
		}
	
		// Constructors
		internal CrossAppDomainSink(int domainID); // 0x008886E8-0x00888714
		static CrossAppDomainSink(); // 0x00888E84-0x00888F54
	
		// Methods
		internal static CrossAppDomainSink GetSink(int domainID); // 0x0088839C-0x0088866C
		private static ProcessMessageRes ProcessMessageInDomain(byte[] arrRequest, CADMethodCallMessage cadMsg); // 0x0088871C-0x0088888C
		public virtual IMessage SyncProcessMessage(IMessage msgRequest); // 0x0088888C-0x00888CB8
		public virtual IMessageCtrl AsyncProcessMessage(IMessage reqMsg, IMessageSink replySink); // 0x00888CB8-0x00888D68
		public void SendAsyncMessage(object data); // 0x00888D68-0x00888E84
		[CompilerGenerated] // 0x004BC784-0x004BC794
		private void _AsyncProcessMessage_b__10_0(object data); // 0x00888F54-0x00889024
	}

	internal class CADSerializer // TypeDefIndex: 990
	{
		// Methods
		internal static IMessage DeserializeMessage(MemoryStream mem, IMethodCallMessage msg); // 0x0088540C-0x00885470
		internal static MemoryStream SerializeMessage(IMessage msg); // 0x00885470-0x0088554C
		internal static object DeserializeObjectSafe(byte[] mem); // 0x0088554C-0x008855E8
		internal static MemoryStream SerializeObject(object obj); // 0x00885678-0x00885754
		internal static object DeserializeObject(MemoryStream mem); // 0x008855E8-0x00885678
	}

	internal class AsyncRequest // TypeDefIndex: 991
	{
		// Fields
		internal IMessageSink ReplySink; // 0x10
		internal IMessage MsgRequest; // 0x18
	
		// Constructors
		public AsyncRequest(IMessage msgRequest, IMessageSink replySink); // 0x008853D4-0x0088540C
	}

	[ComVisible] // 0x004B5F84-0x004B5F98
	public interface IChannel // TypeDefIndex: 992
	{
		// Properties
		string ChannelName { get; }
		int ChannelPriority { get; }
	}

	[ComVisible] // 0x004B5F98-0x004B5FE8
	[DefaultMember] // 0x004B5F98-0x004B5FE8
	public interface IChannelDataStore // TypeDefIndex: 993
	{
	}

	[ComVisible] // 0x004B5FE8-0x004B5FFC
	public interface IChannelReceiver : IChannel // TypeDefIndex: 994
	{
		// Properties
		object ChannelData { get; }
	
		// Methods
		void StartListening(object data);
	}

	[ComVisible] // 0x004B5FFC-0x004B6010
	public interface IChannelSender : IChannel // TypeDefIndex: 995
	{
		// Methods
		IMessageSink CreateMessageSink(string url, object remoteChannelData, out string objectURI);
	}

	[ComVisible] // 0x004B6010-0x004B6024
	public interface IClientChannelSinkProvider // TypeDefIndex: 996
	{
		// Properties
		IClientChannelSinkProvider Next { set; }
	}

	public interface ISecurableChannel // TypeDefIndex: 997
	{
		// Properties
		bool IsSecured { set; }
	}

	[ComVisible] // 0x004B6024-0x004B6038
	public interface IServerChannelSinkProvider // TypeDefIndex: 998
	{
		// Properties
		IServerChannelSinkProvider Next { set; }
	}

	[ComVisible] // 0x004B6038-0x004B604C
	public class SinkProviderData // TypeDefIndex: 999
	{
		// Fields
		private string sinkName; // 0x10
		private ArrayList children; // 0x18
		private Hashtable properties; // 0x20
	
		// Properties
		public IList Children { get; } // 0x008890C0-0x008890C8 
		public IDictionary Properties { get; } // 0x008890C8-0x008890D0 
	
		// Constructors
		public SinkProviderData(string name); // 0x00889024-0x008890C0
	}
}

namespace System.Runtime.Remoting.Activation
{
	internal class ActivationServices // TypeDefIndex: 1000
	{
		// Fields
		private static IActivator _constructionActivator; // 0x00
	
		// Properties
		private static IActivator ConstructionActivator { get; } // 0x008824F0-0x00882578 
	
		// Methods
		public static IMessage Activate(RemotingProxy proxy, ConstructionCall ctorCall); // 0x00882580-0x008827B4
		public static IMessage RemoteActivate(IConstructionCallMessage ctorCall); // 0x008827B4-0x00882994
		public static ConstructionCall CreateConstructionCall(Type type, string activationUrl, object[] activationAttributes); // 0x00882994-0x008832D0
		public static IMessage CreateInstanceFromMessage(IConstructionCallMessage ctorCall); // 0x00883334-0x0088373C
		public static object CreateProxyForType(Type type); // 0x00883740-0x008838B8
		public static object AllocateUninitializedClassInstance(Type type); // 0x0088373C-0x00883740
		public static void EnableProxyActivation(Type type, bool enable); // 0x008838B8-0x008838C0
	}

	internal class AppDomainLevelActivator : IActivator // TypeDefIndex: 1001
	{
		// Fields
		private string _activationUrl; // 0x10
		private IActivator _next; // 0x18
	
		// Properties
		public IActivator NextActivator { get; } // 0x008838C0-0x008838C8 
	
		// Constructors
		public AppDomainLevelActivator(string activationUrl, IActivator next); // 0x008832D0-0x00883308
	
		// Methods
		public IConstructionReturnMessage Activate(IConstructionCallMessage ctorCall); // 0x008838C8-0x00883DB0
	}

	[Serializable]
	internal class ConstructionLevelActivator : IActivator // TypeDefIndex: 1002
	{
		// Properties
		public IActivator NextActivator { get; } // 0x00883DB0-0x00883DB8 
	
		// Constructors
		public ConstructionLevelActivator(); // 0x00882578-0x00882580
	
		// Methods
		public IConstructionReturnMessage Activate(IConstructionCallMessage msg); // 0x00883DB8-0x00883EB4
	}

	[Serializable]
	internal class ContextLevelActivator : IActivator // TypeDefIndex: 1003
	{
		// Fields
		private IActivator m_NextActivator; // 0x10
	
		// Properties
		public IActivator NextActivator { get; } // 0x00883EB4-0x00883EBC 
	
		// Constructors
		public ContextLevelActivator(IActivator next); // 0x00883308-0x00883334
	
		// Methods
		public IConstructionReturnMessage Activate(IConstructionCallMessage ctorCall); // 0x00883EBC-0x008841D4
	}

	[ComVisible] // 0x004B604C-0x004B6060
	public interface IActivator // TypeDefIndex: 1004
	{
		// Properties
		IActivator NextActivator { get; }
	
		// Methods
		IConstructionReturnMessage Activate(IConstructionCallMessage msg);
	}

	[ComVisible] // 0x004B6060-0x004B6074
	public interface IConstructionCallMessage : IMethodCallMessage // TypeDefIndex: 1005
	{
		// Properties
		Type ActivationType { get; }
		string ActivationTypeName { get; }
		IActivator Activator { get; set; }
		object[] CallSiteActivationAttributes { get; }
		IList ContextProperties { get; }
	}

	[ComVisible] // 0x004B6074-0x004B6088
	public interface IConstructionReturnMessage : IMethodReturnMessage // TypeDefIndex: 1006
	{
	}

	internal class RemoteActivator : MarshalByRefObject // TypeDefIndex: 1007
	{
		// Methods
		public override object InitializeLifetimeService(); // 0x008841D4-0x00884458
	}
}

namespace System.Runtime.Remoting.Metadata
{
	[ComVisible] // 0x004B6088-0x004B609C
	public class SoapAttribute : Attribute // TypeDefIndex: 1008
	{
		// Fields
		private bool _useAttribute; // 0x10
		protected string ProtXmlNamespace; // 0x18
		protected object ReflectInfo; // 0x20
	
		// Properties
		public virtual bool UseAttribute { get; } // 0x00A823FC-0x00A82404 
		public virtual string XmlNamespace { get; } // 0x00A82404-0x00A8240C 
	
		// Constructors
		public SoapAttribute(); // 0x00A823F4-0x00A823FC
	
		// Methods
		internal virtual void SetReflectionObject(object reflectionObject); // 0x00A8240C-0x00A82414
	}

	[AttributeUsage] // 0x004B609C-0x004B60DC
	[ComVisible] // 0x004B609C-0x004B60DC
	public sealed class SoapFieldAttribute : SoapAttribute // TypeDefIndex: 1009
	{
		// Fields
		private string _elementName; // 0x28
		private bool _isElement; // 0x30
	
		// Properties
		public string XmlElementName { get; } // 0x00A82414-0x00A8241C 
	
		// Constructors
		public SoapFieldAttribute(); // 0x00A7109C-0x00A710A4
	
		// Methods
		public bool IsInteropXmlElement(); // 0x00A8241C-0x00A82424
		internal override void SetReflectionObject(object reflectionObject); // 0x00A82424-0x00A824D8
	}

	[AttributeUsage] // 0x004B60DC-0x004B611C
	[ComVisible] // 0x004B60DC-0x004B611C
	public sealed class SoapMethodAttribute : SoapAttribute // TypeDefIndex: 1010
	{
		// Fields
		private string _responseElement; // 0x28
		private string _responseNamespace; // 0x30
		private string _returnElement; // 0x38
		private string _soapAction; // 0x40
		private bool _useAttribute; // 0x48
		private string _namespace; // 0x50
	
		// Properties
		public override bool UseAttribute { get; } // 0x00A824D8-0x00A824E0 
		public override string XmlNamespace { get; } // 0x00A824E0-0x00A824E8 
	
		// Constructors
		public SoapMethodAttribute(); // 0x00A710A4-0x00A710AC
	
		// Methods
		internal override void SetReflectionObject(object reflectionObject); // 0x00A824E8-0x00A826A4
	}

	[AttributeUsage] // 0x004B611C-0x004B615C
	[ComVisible] // 0x004B611C-0x004B615C
	public sealed class SoapParameterAttribute : SoapAttribute // TypeDefIndex: 1011
	{
		// Constructors
		public SoapParameterAttribute(); // 0x00A710AC-0x00A710B4
	}

	[AttributeUsage] // 0x004B615C-0x004B619C
	[ComVisible] // 0x004B615C-0x004B619C
	public sealed class SoapTypeAttribute : SoapAttribute // TypeDefIndex: 1012
	{
		// Fields
		private bool _useAttribute; // 0x28
		private string _xmlElementName; // 0x30
		private string _xmlNamespace; // 0x38
		private string _xmlTypeName; // 0x40
		private string _xmlTypeNamespace; // 0x48
		private bool _isType; // 0x50
		private bool _isElement; // 0x51
	
		// Properties
		public override bool UseAttribute { get; } // 0x00A826A4-0x00A826AC 
		public string XmlElementName { get; } // 0x00A826AC-0x00A826B4 
		public override string XmlNamespace { get; } // 0x00A826B4-0x00A826BC 
		public string XmlTypeName { get; } // 0x00A826BC-0x00A826C4 
		public string XmlTypeNamespace { get; } // 0x00A826C4-0x00A826CC 
		internal bool IsInteropXmlElement { get; } // 0x00A826CC-0x00A826D4 
		internal bool IsInteropXmlType { get; } // 0x00A826D4-0x00A826DC 
	
		// Constructors
		public SoapTypeAttribute(); // 0x00A71094-0x00A7109C
	
		// Methods
		internal override void SetReflectionObject(object reflectionObject); // 0x00A826DC-0x00A828D4
	}
}

namespace System.Runtime.Remoting.Messaging
{
	[Serializable]
	[ComVisible] // 0x004B619C-0x004B61B0
	public sealed class CallContext // TypeDefIndex: 1013
	{
		// Constructors
		private CallContext(); // 0x00A76A44-0x00A76A4C
	
		// Methods
		internal static object SetCurrentCallContext(LogicalCallContext ctx); // 0x00A76A4C-0x00A76A54
		internal static LogicalCallContext SetLogicalCallContext(LogicalCallContext callCtx); // 0x00A76A54-0x00A76AA0
	}

	internal class IllogicalCallContext // TypeDefIndex: 1014
	{
		// Fields
		private Hashtable m_Datastore; // 0x10
		private object m_HostContext; // 0x18
	
		// Properties
		private Hashtable Datastore { get; } // 0x00A79C3C-0x00A79CA8 
		internal object HostContext { get; set; } // 0x00A79CA8-0x00A79CB0 0x00A79CB0-0x00A79CB8
		internal bool HasUserData { get; } // 0x00A79CB8-0x00A79CE8 
	
		// Constructors
		public IllogicalCallContext(); // 0x00A79F44-0x00A79F4C
	
		// Methods
		public IllogicalCallContext CreateCopy(); // 0x00A79CE8-0x00A79F44
	}

	[Serializable]
	[ComVisible] // 0x004B61B0-0x004B61C4
	public sealed class LogicalCallContext : ISerializable, ICloneable // TypeDefIndex: 1015
	{
		// Fields
		private static Type s_callContextType; // 0x00
		private Hashtable m_Datastore; // 0x10
		private CallContextRemotingData m_RemotingData; // 0x18
		private CallContextSecurityData m_SecurityData; // 0x20
		private object m_HostContext; // 0x28
		private bool m_IsCorrelationMgr; // 0x30
	
		// Properties
		public bool HasInfo { get; } // 0x00A75DE4-0x00A75E48 
		private bool HasUserData { get; } // 0x00A7A570-0x00A7A5A0 
		private Hashtable Datastore { get; } // 0x00A7A1E8-0x00A7A254 
	
		// Nested types
		internal struct Reader // TypeDefIndex: 1016
		{
			// Fields
			private LogicalCallContext m_ctx; // 0x00
	
			// Properties
			public bool IsNull { get; } // 0x00589144-0x00589154 
			public bool HasInfo { get; } // 0x00589154-0x00589164 
	
			// Constructors
			public Reader(LogicalCallContext ctx); // 0x0058913C-0x00589144
	
			// Methods
			public LogicalCallContext Clone(); // 0x00589164-0x00589338
		}
	
		// Constructors
		internal LogicalCallContext(); // 0x00A79F4C-0x00A79F54
		internal LogicalCallContext(SerializationInfo info, StreamingContext context); // 0x00A79F54-0x00A7A1E8
		static LogicalCallContext(); // 0x00A7ADC8-0x00A7AEE8
	
		// Methods
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00A7A254-0x00A7A570
		public object Clone(); // 0x00A7A5A0-0x00A7AB80
		internal void Merge(LogicalCallContext lc); // 0x00A7AB80-0x00A7ADC8
	}

	[Serializable]
	internal class CallContextSecurityData : ICloneable // TypeDefIndex: 1017
	{
		// Fields
		private IPrincipal _principal; // 0x10
	
		// Properties
		internal bool HasInfo { get; } // 0x00A76B3C-0x00A76B4C 
	
		// Constructors
		public CallContextSecurityData(); // 0x00A76BC0-0x00A76BC8
	
		// Methods
		public object Clone(); // 0x00A76B4C-0x00A76BC0
	}

	[Serializable]
	internal class CallContextRemotingData : ICloneable // TypeDefIndex: 1018
	{
		// Fields
		private string _logicalCallID; // 0x10
	
		// Properties
		internal string LogicalCallID { get; set; } // 0x00A76AA0-0x00A76AA8 0x00A76AA8-0x00A76AB0
		internal bool HasInfo { get; } // 0x00A76AB0-0x00A76AC0 
	
		// Constructors
		public CallContextRemotingData(); // 0x00A76B34-0x00A76B3C
	
		// Methods
		public object Clone(); // 0x00A76AC0-0x00A76B34
	}

	internal enum ArgInfoType : byte // TypeDefIndex: 1019
	{
		In = 0,
		Out = 1
	}

	internal class ArgInfo // TypeDefIndex: 1020
	{
		// Fields
		private int[] _paramMap; // 0x10
		private int _inoutArgCount; // 0x18
		private MethodBase _method; // 0x20
	
		// Constructors
		public ArgInfo(MethodBase method, ArgInfoType type); // 0x00A73130-0x00A732F8
	
		// Methods
		public object[] GetInOutArgs(object[] args); // 0x00A732F8-0x00A73410
	}

	[ComVisible] // 0x004B61C4-0x004B61D8
	public class AsyncResult : IAsyncResult, IMessageSink, IThreadPoolWorkItem // TypeDefIndex: 1021
	{
		// Fields
		private object async_state; // 0x10
		private WaitHandle handle; // 0x18
		private object async_delegate; // 0x20
		private IntPtr data; // 0x28
		private object object_data; // 0x30
		private bool sync_completed; // 0x38
		private bool completed; // 0x39
		private bool endinvoke_called; // 0x3A
		private object async_callback; // 0x40
		private ExecutionContext current; // 0x48
		private ExecutionContext original; // 0x50
		private long add_time; // 0x58
		private MonoMethodMessage call_message; // 0x60
		private IMessageCtrl message_ctrl; // 0x68
		private IMessage reply_message; // 0x70
		private WaitCallback orig_cb; // 0x78
		internal static ContextCallback ccb; // 0x00
	
		// Properties
		public virtual object AsyncState { get; } // 0x00A73594-0x00A7359C 
		public virtual WaitHandle AsyncWaitHandle { get; } // 0x00A7359C-0x00A736AC 
		public virtual bool CompletedSynchronously { get; } // 0x00A736AC-0x00A736B4 
		public virtual bool IsCompleted { get; } // 0x00A736B4-0x00A736BC 
		public bool EndInvokeCalled { get; set; } // 0x00A736BC-0x00A736C4 0x00A736C4-0x00A736D0
		public virtual object AsyncDelegate { get; } // 0x00A736D0-0x00A736D8 
		public IMessageSink NextSink { get; } // 0x00A736D8-0x00A736E0 
		internal MonoMethodMessage CallMessage { get; set; } // 0x00A739BC-0x00A739C4 0x00A739C4-0x00A739CC
	
		// Constructors
		internal AsyncResult(); // 0x00A73410-0x00A73418
		internal AsyncResult(WaitCallback cb, object state, bool capture_context); // 0x00A73418-0x00A734F8
		static AsyncResult(); // 0x00A739D8-0x00A73A54
	
		// Methods
		private static void WaitCallback_Context(object state); // 0x00A734F8-0x00A73594
		public virtual IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x00A736E0-0x00A73744
		public virtual IMessage GetReplyMessage(); // 0x00A73744-0x00A7374C
		public virtual void SetMessageCtrl(IMessageCtrl mc); // 0x00A7374C-0x00A73754
		internal void SetCompletedSynchronously(bool completed); // 0x00A73754-0x00A73760
		internal IMessage EndInvoke(); // 0x00A73760-0x00A73868
		public virtual IMessage SyncProcessMessage(IMessage msg); // 0x00A73868-0x00A739BC
		void IThreadPoolWorkItem.ExecuteWorkItem(); // 0x00A739CC-0x00A739D0
		void IThreadPoolWorkItem.MarkAborted(ThreadAbortException tae); // 0x00A739D4-0x00A739D8
		internal object Invoke(); // 0x00A739D0-0x00A739D4
		[CompilerGenerated] // 0x004BC794-0x004BC7A4
		private void _.ctor_b__17_0(object _p0_); // 0x00A73A54-0x00A73B04
	}

	internal class CADArgHolder // TypeDefIndex: 1022
	{
		// Fields
		public int index; // 0x10
	
		// Constructors
		public CADArgHolder(int i); // 0x00A73B04-0x00A73B30
	}

	internal class CADObjRef // TypeDefIndex: 1023
	{
		// Fields
		internal ObjRef objref; // 0x10
		internal int SourceDomain; // 0x18
		internal byte[] TypeInfo; // 0x20
	
		// Constructors
		public CADObjRef(ObjRef o, int sourceDomain); // 0x00A75244-0x00A75298
	}

	[Serializable]
	internal class CADMethodRef // TypeDefIndex: 1024
	{
		// Fields
		private bool ctor; // 0x10
		private string typeName; // 0x18
		private string methodName; // 0x20
		private string[] param_names; // 0x28
		private string[] generic_arg_names; // 0x30
	
		// Constructors
		public CADMethodRef(IMethodMessage msg); // 0x00A73BCC-0x00A73EB8
	
		// Methods
		private Type[] GetTypes(string[] typeArray); // 0x00A76278-0x00A763C8
		public MethodBase Resolve(); // 0x00A73F6C-0x00A74394
	}

	internal class CADMessageBase // TypeDefIndex: 1025
	{
		// Fields
		protected object[] _args; // 0x10
		protected byte[] _serializedArgs; // 0x18
		protected int _propertyCount; // 0x20
		protected CADArgHolder _callContext; // 0x28
		internal byte[] serializedMethod; // 0x30
	
		// Constructors
		public CADMessageBase(IMethodMessage msg); // 0x00A73B30-0x00A73BCC
	
		// Methods
		internal MethodBase GetMethod(); // 0x00A73EB8-0x00A73F6C
		protected static Type[] GetSignature(MethodBase methodBase, bool load); // 0x00A74394-0x00A7453C
		internal static int MarshalProperties(IDictionary dict, ref ArrayList args); // 0x00A7453C-0x00A74C0C
		internal static void UnmarshalProperties(IDictionary dict, int count, ArrayList args); // 0x00A74DB8-0x00A74EFC
		private static bool IsPossibleToIgnoreMarshal(object obj); // 0x00A74EFC-0x00A75090
		protected object MarshalArgument(object arg, ref ArrayList args); // 0x00A75090-0x00A751D8
		protected object UnmarshalArgument(object arg, ArrayList args); // 0x00A75298-0x00A757F4
		internal object[] MarshalArguments(object[] arguments, ref ArrayList args); // 0x00A75978-0x00A75A8C
		internal object[] UnmarshalArguments(object[] arguments, ArrayList args); // 0x00A75A8C-0x00A75BA0
		protected void SaveLogicalCallContext(IMethodMessage msg, ref ArrayList serializeList); // 0x00A75BA0-0x00A75DE4
		internal LogicalCallContext GetLogicalCallContext(ArrayList args); // 0x00A75E48-0x00A75EE4
	}

	internal class CADMethodCallMessage : CADMessageBase // TypeDefIndex: 1026
	{
		// Fields
		private string _uri; // 0x38
	
		// Properties
		internal string Uri { get; } // 0x00A75EE4-0x00A75EEC 
		internal int PropertiesCount { get; } // 0x00A76270-0x00A76278 
	
		// Constructors
		internal CADMethodCallMessage(IMethodCallMessage callMsg); // 0x00A75F70-0x00A7617C
	
		// Methods
		internal static CADMethodCallMessage Create(IMessage callMsg); // 0x00A75EEC-0x00A75F70
		internal ArrayList GetArguments(); // 0x00A7617C-0x00A7625C
		internal object[] GetArgs(ArrayList args); // 0x00A7625C-0x00A76270
	}

	internal class CADMethodReturnMessage : CADMessageBase // TypeDefIndex: 1027
	{
		// Fields
		private object _returnValue; // 0x38
		private CADArgHolder _exception; // 0x40
		private Type[] _sig; // 0x48
	
		// Properties
		internal int PropertiesCount { get; } // 0x00A76998-0x00A769A0 
	
		// Constructors
		internal CADMethodReturnMessage(IMethodReturnMessage retMsg); // 0x00A7644C-0x00A767D8
	
		// Methods
		internal static CADMethodReturnMessage Create(IMessage callMsg); // 0x00A763C8-0x00A7644C
		internal ArrayList GetArguments(); // 0x00A767D8-0x00A768B8
		internal object[] GetArgs(ArrayList args); // 0x00A768B8-0x00A768CC
		internal object GetReturnValue(ArrayList args); // 0x00A768CC-0x00A768E0
		internal Exception GetException(ArrayList args); // 0x00A768E0-0x00A76998
	}

	internal class ClientContextTerminatorSink : IMessageSink // TypeDefIndex: 1028
	{
		// Fields
		private Context _context; // 0x10
	
		// Constructors
		public ClientContextTerminatorSink(Context ctx); // 0x00A6E104-0x00A6E130
	
		// Methods
		public IMessage SyncProcessMessage(IMessage msg); // 0x00A76D7C-0x00A76F60
		public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x00A76F60-0x00A771B4
	}

	internal class ClientContextReplySink : IMessageSink // TypeDefIndex: 1029
	{
		// Fields
		private IMessageSink _replySink; // 0x10
		private Context _context; // 0x18
	
		// Constructors
		public ClientContextReplySink(Context ctx, IMessageSink replySink); // 0x00A76BC8-0x00A76C00
	
		// Methods
		public IMessage SyncProcessMessage(IMessage msg); // 0x00A76C00-0x00A76D18
		public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x00A76D18-0x00A76D7C
	}

	[Serializable]
	[CLSCompliant] // 0x004B61D8-0x004B6218
	[ComVisible] // 0x004B61D8-0x004B6218
	public class ConstructionCall : MethodCall, IConstructionCallMessage // TypeDefIndex: 1030
	{
		// Fields
		private IActivator _activator; // 0x68
		private object[] _activationAttributes; // 0x70
		private IList _contextProperties; // 0x78
		private Type _activationType; // 0x80
		private string _activationTypeName; // 0x88
		private bool _isContextOk; // 0x90
		[NonSerialized]
		private RemotingProxy _sourceProxy; // 0x98
	
		// Properties
		internal bool IsContextOk { get; set; } // 0x00A77408-0x00A77410 0x00A77410-0x00A7741C
		public Type ActivationType { get; } // 0x00A7741C-0x00A774E4 
		public string ActivationTypeName { get; } // 0x00A774E4-0x00A774EC 
		public IActivator Activator { get; set; } // 0x00A774EC-0x00A774F4 0x00A774F4-0x00A774FC
		public object[] CallSiteActivationAttributes { get; } // 0x00A774FC-0x00A77504 
		public IList ContextProperties { get; } // 0x00A7750C-0x00A77578 
		public override IDictionary Properties { get; } // 0x00A78000-0x00A7803C 
		internal RemotingProxy SourceProxy { get; set; } // 0x00A78078-0x00A78080 0x00A78080-0x00A78088
	
		// Constructors
		internal ConstructionCall(Type type); // 0x00A771B4-0x00A7720C
		internal ConstructionCall(SerializationInfo info, StreamingContext context); // 0x00A77214-0x00A77218
	
		// Methods
		internal override void InitDictionary(); // 0x00A772B8-0x00A77344
		internal void SetActivationAttributes(object[] attributes); // 0x00A77504-0x00A7750C
		internal override void InitMethodProperty(string key, object value); // 0x00A77578-0x00A77770
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00A77AE0-0x00A77C48
	}

	internal class ConstructionCallDictionary : MessageDictionary // TypeDefIndex: 1031
	{
		// Fields
		public static string[] InternalKeys; // 0x00
	
		// Constructors
		public ConstructionCallDictionary(IConstructionCallMessage message); // 0x00A77344-0x00A773D0
		static ConstructionCallDictionary(); // 0x00A78F24-0x00A791E4
	
		// Methods
		protected override object GetMethodProperty(string key); // 0x00A780B4-0x00A784A4
		protected override void SetMethodProperty(string key, object value); // 0x00A78A64-0x00A78C9C
	}

	[Serializable]
	[CLSCompliant] // 0x004B6218-0x004B6258
	[ComVisible] // 0x004B6218-0x004B6258
	public class ConstructionResponse : MethodResponse, IConstructionReturnMessage // TypeDefIndex: 1032
	{
		// Properties
		public override IDictionary Properties { get; } // 0x00A79470-0x00A79474 
	
		// Constructors
		internal ConstructionResponse(object resultObject, LogicalCallContext callCtx, IMethodCallMessage msg); // 0x00A791E4-0x00A791F0
		internal ConstructionResponse(Exception e, IMethodCallMessage msg); // 0x00A792E0-0x00A792E4
		internal ConstructionResponse(SerializationInfo info, StreamingContext context); // 0x00A793EC-0x00A793F0
	}

	[Serializable]
	internal class EnvoyTerminatorSink : IMessageSink // TypeDefIndex: 1033
	{
		// Fields
		public static EnvoyTerminatorSink Instance; // 0x00
	
		// Constructors
		public EnvoyTerminatorSink(); // 0x00A796AC-0x00A796B4
		static EnvoyTerminatorSink(); // 0x00A796B4-0x00A79718
	
		// Methods
		public IMessage SyncProcessMessage(IMessage msg); // 0x00A79510-0x00A795D4
		public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x00A795D4-0x00A796AC
	}

	[Serializable]
	internal class ErrorMessage : IMethodCallMessage // TypeDefIndex: 1034
	{
		// Fields
		private string _uri; // 0x10
	
		// Properties
		public int ArgCount { get; } // 0x00A79770-0x00A79778 
		public object[] Args { get; } // 0x00A79778-0x00A79780 
		public MethodBase MethodBase { get; } // 0x00A79780-0x00A79788 
		public string MethodName { get; } // 0x00A79788-0x00A797D0 
		public object MethodSignature { get; } // 0x00A797D0-0x00A797D8 
		public virtual IDictionary Properties { get; } // 0x00A797D8-0x00A797E0 
		public string TypeName { get; } // 0x00A797E0-0x00A79828 
		public string Uri { get; } // 0x00A79828-0x00A79830 
		public LogicalCallContext LogicalCallContext { get; } // 0x00A79838-0x00A79840 
	
		// Constructors
		public ErrorMessage(); // 0x00A79718-0x00A79770
	
		// Methods
		public object GetArg(int arg_num); // 0x00A79830-0x00A79838
	}

	[Serializable]
	[ComVisible] // 0x004B6258-0x004B626C
	public class Header // TypeDefIndex: 1035
	{
	}

	[ComVisible] // 0x004B626C-0x004B6280
	public delegate object HeaderHandler(Header[] headers); // TypeDefIndex: 1036; 0x00A79850-0x00A79C0C

	internal interface IInternalMessage // TypeDefIndex: 1037
	{
		// Properties
		Identity TargetIdentity { get; set; }
		string Uri { get; set; }
	}

	[ComVisible] // 0x004B6280-0x004B6294
	public interface IMessage // TypeDefIndex: 1038
	{
		// Properties
		IDictionary Properties { get; }
	}

	[ComVisible] // 0x004B6294-0x004B62A8
	public interface IMessageCtrl // TypeDefIndex: 1039
	{
	}

	[ComVisible] // 0x004B62A8-0x004B62BC
	public interface IMessageSink // TypeDefIndex: 1040
	{
		// Methods
		IMessage SyncProcessMessage(IMessage msg);
		IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink);
	}

	[ComVisible] // 0x004B62BC-0x004B62D0
	public interface IMethodCallMessage : IMethodMessage // TypeDefIndex: 1041
	{
	}

	[ComVisible] // 0x004B62D0-0x004B62E4
	public interface IMethodMessage : IMessage // TypeDefIndex: 1042
	{
		// Properties
		int ArgCount { get; }
		object[] Args { get; }
		LogicalCallContext LogicalCallContext { get; }
		MethodBase MethodBase { get; }
		string MethodName { get; }
		object MethodSignature { get; }
		string TypeName { get; }
		string Uri { get; }
	
		// Methods
		object GetArg(int argNum);
	}

	[ComVisible] // 0x004B62E4-0x004B62F8
	public interface IMethodReturnMessage : IMethodMessage // TypeDefIndex: 1043
	{
		// Properties
		Exception Exception { get; }
		object[] OutArgs { get; }
		object ReturnValue { get; }
	}

	[Serializable]
	[CLSCompliant] // 0x004B62F8-0x004B6338
	[ComVisible] // 0x004B62F8-0x004B6338
	public class MethodCall : IMethodCallMessage, ISerializable, IInternalMessage // TypeDefIndex: 1044
	{
		// Fields
		private string _uri; // 0x10
		private string _typeName; // 0x18
		private string _methodName; // 0x20
		private object[] _args; // 0x28
		private Type[] _methodSignature; // 0x30
		private MethodBase _methodBase; // 0x38
		private LogicalCallContext _callContext; // 0x40
		private Identity _targetIdentity; // 0x48
		private Type[] _genericArguments; // 0x50
		protected IDictionary ExternalProperties; // 0x58
		protected IDictionary InternalProperties; // 0x60
	
		// Properties
		public int ArgCount { get; } // 0x00A7C92C-0x00A7C94C 
		public object[] Args { get; } // 0x00A7C94C-0x00A7C954 
		public LogicalCallContext LogicalCallContext { get; } // 0x00A7C954-0x00A7C9C0 
		public MethodBase MethodBase { get; } // 0x00A7C9C0-0x00A7C9FC 
		public string MethodName { get; } // 0x00A7D0D0-0x00A7D110 
		public object MethodSignature { get; } // 0x00A7D110-0x00A7D25C 
		public virtual IDictionary Properties { get; } // 0x00A7803C-0x00A78078 
		public string TypeName { get; } // 0x00A7D2E8-0x00A7D33C 
		public string Uri { get; set; } // 0x00A7D33C-0x00A7D344 0x00A7D344-0x00A7D34C
		string IInternalMessage.Uri { get; set; } // 0x00A7D34C-0x00A7D354 0x00A7D354-0x00A7D35C
		Identity IInternalMessage.TargetIdentity { get; set; } // 0x00A7DBDC-0x00A7DBE4 0x00A7DBE4-0x00A7DBEC
		private Type[] GenericArguments { get; } // 0x00A7DAE0-0x00A7DB28 
	
		// Constructors
		internal MethodCall(SerializationInfo info, StreamingContext context); // 0x00A77218-0x00A772B8
		internal MethodCall(CADMethodCallMessage msg); // 0x00A7C490-0x00A7C5AC
		internal MethodCall(); // 0x00A7720C-0x00A77214
	
		// Methods
		internal void CopyFrom(IMethodMessage call); // 0x00A7C5AC-0x00A7C92C
		internal virtual void InitMethodProperty(string key, object value); // 0x00A77770-0x00A77AE0
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00A77C48-0x00A78000
		internal virtual void InitDictionary(); // 0x00A7D25C-0x00A7D2E8
		public object GetArg(int argNum); // 0x00A7D35C-0x00A7D3A0
		public virtual void Init(); // 0x00A7D3A0-0x00A7D3A4
		public void ResolveMethod(); // 0x00A7C9FC-0x00A7D0D0
		private Type CastTo(string clientType, Type serverType); // 0x00A7D468-0x00A7D614
		private static string GetTypeNameFromAssemblyQualifiedName(string aqname); // 0x00A7DB28-0x00A7DBDC
	}

	internal class MCMDictionary : MessageDictionary // TypeDefIndex: 1045
	{
		// Fields
		public static string[] InternalKeys; // 0x00
	
		// Constructors
		public MCMDictionary(IMethodMessage message); // 0x00A7AEE8-0x00A7AF74
		static MCMDictionary(); // 0x00A7AF74-0x00A7B130
	}

	[Serializable]
	internal class MessageDictionary : IDictionary // TypeDefIndex: 1046
	{
		// Fields
		private IDictionary _internalProperties; // 0x10
		protected IMethodMessage _message; // 0x18
		private string[] _methodKeys; // 0x20
		private bool _ownProperties; // 0x28
	
		// Properties
		internal IDictionary InternalDictionary { get; } // 0x00A74D1C-0x00A74DB8 
		public string[] MethodKeys { set; } // 0x00A7B130-0x00A7B138
		public object this[object key] { get => default; set {} } // 0x00A7B23C-0x00A7B3A4 0x00A7B3A4-0x00A7B3A8
		public ICollection Keys { get; } // 0x00A7B530-0x00A7B8F0 
		public ICollection Values { get; } // 0x00A7B8F0-0x00A7BC94 
		public int Count { get; } // 0x00A7BC94-0x00A7BD70 
	
		// Nested types
		private class DictionaryEnumerator : IDictionaryEnumerator // TypeDefIndex: 1047
		{
			// Fields
			private MessageDictionary _methodDictionary; // 0x10
			private IDictionaryEnumerator _hashtableEnum; // 0x18
			private int _posMethod; // 0x20
	
			// Properties
			public object Current { get; } // 0x00A7C000-0x00A7C06C 
			public DictionaryEntry Entry { get; } // 0x00A7C06C-0x00A7C1EC 
			public object Key { get; } // 0x00A7C474-0x00A7C478 
			public object Value { get; } // 0x00A7C478-0x00A7C490 
	
			// Constructors
			public DictionaryEnumerator(MessageDictionary methodDictionary); // 0x00A7BEA0-0x00A7BFA0
	
			// Methods
			public bool MoveNext(); // 0x00A7C1EC-0x00A7C3B4
			public void Reset(); // 0x00A7C3B4-0x00A7C474
		}
	
		// Constructors
		public MessageDictionary(IMethodMessage message); // 0x00A78088-0x00A780B4
	
		// Methods
		internal bool HasUserData(); // 0x00A74C0C-0x00A74D1C
		protected virtual IDictionary AllocInternalProperties(); // 0x00A7B138-0x00A7B1A0
		public IDictionary GetInternalProperties(); // 0x00A773D0-0x00A77408
		private bool IsOverridenKey(string key); // 0x00A7B1A0-0x00A7B23C
		protected virtual object GetMethodProperty(string key); // 0x00A784A4-0x00A78A64
		protected virtual void SetMethodProperty(string key, object value); // 0x00A78C9C-0x00A78F24
		public void Add(object key, object value); // 0x00A7B3A8-0x00A7B530
		public void CopyTo(Array array, int index); // 0x00A7BD70-0x00A7BE40
		IEnumerator IEnumerable.GetEnumerator(); // 0x00A7BE40-0x00A7BEA0
		public IDictionaryEnumerator GetEnumerator(); // 0x00A7BFA0-0x00A7C000
	}

	[Serializable]
	[CLSCompliant] // 0x004B6370-0x004B63B0
	[ComVisible] // 0x004B6370-0x004B63B0
	public class MethodResponse : IMethodReturnMessage, ISerializable, IInternalMessage // TypeDefIndex: 1048
	{
		// Fields
		private string _methodName; // 0x10
		private string _uri; // 0x18
		private string _typeName; // 0x20
		private MethodBase _methodBase; // 0x28
		private object _returnValue; // 0x30
		private Exception _exception; // 0x38
		private Type[] _methodSignature; // 0x40
		private ArgInfo _inArgInfo; // 0x48
		private object[] _args; // 0x50
		private object[] _outArgs; // 0x58
		private IMethodCallMessage _callMsg; // 0x60
		private LogicalCallContext _callContext; // 0x68
		private Identity _targetIdentity; // 0x70
		protected IDictionary ExternalProperties; // 0x78
		protected IDictionary InternalProperties; // 0x80
	
		// Properties
		public int ArgCount { get; } // 0x00A7E208-0x00A7E220 
		public object[] Args { get; } // 0x00A7E220-0x00A7E228 
		public Exception Exception { get; } // 0x00A7E228-0x00A7E230 
		public LogicalCallContext LogicalCallContext { get; } // 0x00A7E230-0x00A7E29C 
		public MethodBase MethodBase { get; } // 0x00A7E29C-0x00A7E3B0 
		public string MethodName { get; } // 0x00A7E3B0-0x00A7E478 
		public object MethodSignature { get; } // 0x00A7E540-0x00A7E640 
		public object[] OutArgs { get; } // 0x00A7E640-0x00A7E6F8 
		public virtual IDictionary Properties { get; } // 0x00A79474-0x00A79510 
		public object ReturnValue { get; } // 0x00A7E824-0x00A7E82C 
		public string TypeName { get; } // 0x00A7E478-0x00A7E540 
		public string Uri { get; set; } // 0x00A7E82C-0x00A7E8F4 0x00A7E8F4-0x00A7E8FC
		string IInternalMessage.Uri { get; set; } // 0x00A7E8FC-0x00A7E900 0x00A7E900-0x00A7E908
		Identity IInternalMessage.TargetIdentity { get; set; } // 0x00A7ED18-0x00A7ED20 0x00A7ED20-0x00A7ED28
	
		// Constructors
		internal MethodResponse(Exception e, IMethodCallMessage msg); // 0x00A792E4-0x00A793EC
		internal MethodResponse(object returnValue, object[] outArgs, LogicalCallContext callCtx, IMethodCallMessage msg); // 0x00A791F0-0x00A792E0
		internal MethodResponse(IMethodCallMessage msg, CADMethodReturnMessage retmsg); // 0x00A7DBEC-0x00A7DE44
		internal MethodResponse(SerializationInfo info, StreamingContext context); // 0x00A793F0-0x00A79470
	
		// Methods
		internal void InitMethodProperty(string key, object value); // 0x00A7DE44-0x00A7E208
		public object GetArg(int argNum); // 0x00A7E908-0x00A7E948
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00A7E948-0x00A7ED18
	}

	internal class MethodReturnDictionary : MessageDictionary // TypeDefIndex: 1049
	{
		// Fields
		public static string[] InternalReturnKeys; // 0x00
		public static string[] InternalExceptionKeys; // 0x08
	
		// Constructors
		public MethodReturnDictionary(IMethodReturnMessage message); // 0x00A7E6F8-0x00A7E824
		static MethodReturnDictionary(); // 0x00A7ED28-0x00A7EF68
	}

	[Serializable]
	internal class MonoMethodMessage : IMethodCallMessage, IMethodReturnMessage, IInternalMessage // TypeDefIndex: 1050
	{
		// Fields
		private MonoMethod method; // 0x10
		private object[] args; // 0x18
		private string[] names; // 0x20
		private byte[] arg_types; // 0x28
		public LogicalCallContext ctx; // 0x30
		public object rval; // 0x38
		public Exception exc; // 0x40
		private AsyncResult asyncResult; // 0x48
		private CallType call_type; // 0x50
		private string uri; // 0x58
		private MCMDictionary properties; // 0x60
		private Type[] methodSignature; // 0x68
		private Identity identity; // 0x70
		internal static string CallContextKey; // 0x00
		internal static string UriKey; // 0x08
	
		// Properties
		public IDictionary Properties { get; } // 0x00A7F584-0x00A7F5F0 
		public int ArgCount { get; } // 0x00A7F5F0-0x00A7F634 
		public object[] Args { get; } // 0x00A7F6BC-0x00A7F6C4 
		public LogicalCallContext LogicalCallContext { get; set; } // 0x00A7F6C4-0x00A7F6CC 0x00A7F6CC-0x00A7F6D4
		public MethodBase MethodBase { get; } // 0x00A7F6D4-0x00A7F6DC 
		public string MethodName { get; } // 0x00A7F6DC-0x00A7F764 
		public object MethodSignature { get; } // 0x00A7F764-0x00A7F89C 
		public string TypeName { get; } // 0x00A7F89C-0x00A7F938 
		public string Uri { get; set; } // 0x00A7F938-0x00A7F940 0x00A7F940-0x00A7F948
		public Exception Exception { get; } // 0x00A7F988-0x00A7F990 
		public int OutArgCount { get; } // 0x00A7F990-0x00A7FA10 
		public object[] OutArgs { get; } // 0x00A7FA10-0x00A7FB4C 
		public object ReturnValue { get; } // 0x00A7FB4C-0x00A7FB54 
		Identity IInternalMessage.TargetIdentity { get; set; } // 0x00A7FB54-0x00A7FB5C 0x00A7FB5C-0x00A7FB64
		public AsyncResult AsyncResult { get; } // 0x00A7FB64-0x00A7FB6C 
		internal CallType CallType { get; } // 0x00A7F634-0x00A7F6BC 
	
		// Constructors
		public MonoMethodMessage(MethodBase method, object[] out_args); // 0x00A7F1E8-0x00A7F2B8
		internal MonoMethodMessage(MethodInfo minfo, object[] in_args, object[] out_args); // 0x00A7F2B8-0x00A7F404
		public MonoMethodMessage(Type type, string methodName, object[] in_args); // 0x00A7F4EC-0x00A7F584
		static MonoMethodMessage(); // 0x00A7FCA4-0x00A7FD18
	
		// Methods
		internal void InitMessage(MonoMethod method, object[] out_args); // 0x00A7EF68-0x00A7F1E8
		private static MethodInfo GetMethodInfo(Type type, string methodName); // 0x00A7F404-0x00A7F4EC
		public object GetArg(int arg_num); // 0x00A7F948-0x00A7F988
		public bool NeedsOutProcessing(out int outCount); // 0x00A7FC04-0x00A7FCA4
	}

	internal enum CallType // TypeDefIndex: 1051
	{
		Sync = 0,
		BeginInvoke = 1,
		EndInvoke = 2,
		OneWay = 3
	}

	[AttributeUsage] // 0x004B63B0-0x004B63F0
	[ComVisible] // 0x004B63B0-0x004B63F0
	public class OneWayAttribute : Attribute // TypeDefIndex: 1052
	{
	}

	internal class RemotingSurrogate : ISerializationSurrogate // TypeDefIndex: 1053
	{
		// Constructors
		public RemotingSurrogate(); // 0x00A800E4-0x00A800EC
	
		// Methods
		public virtual void GetObjectData(object obj, SerializationInfo si, StreamingContext sc); // 0x00A7FEC0-0x00A7FF5C
		public virtual object SetObjectData(object obj, SerializationInfo si, StreamingContext sc, ISurrogateSelector selector); // 0x00A80080-0x00A800E4
	}

	internal class ObjRefSurrogate : ISerializationSurrogate // TypeDefIndex: 1054
	{
		// Constructors
		public ObjRefSurrogate(); // 0x00A7FEB8-0x00A7FEC0
	
		// Methods
		public virtual void GetObjectData(object obj, SerializationInfo si, StreamingContext sc); // 0x00A7FD18-0x00A7FE48
		public virtual object SetObjectData(object obj, SerializationInfo si, StreamingContext sc, ISurrogateSelector selector); // 0x00A7FE48-0x00A7FEB8
	}

	[ComVisible] // 0x004B63F0-0x004B6404
	public class RemotingSurrogateSelector : ISurrogateSelector // TypeDefIndex: 1055
	{
		// Fields
		private static Type s_cachedTypeObjRef; // 0x00
		private static ObjRefSurrogate _objRefSurrogate; // 0x08
		private static RemotingSurrogate _objRemotingSurrogate; // 0x10
		private ISurrogateSelector _next; // 0x10
	
		// Constructors
		public RemotingSurrogateSelector(); // 0x00A800EC-0x00A800F4
		static RemotingSurrogateSelector(); // 0x00A802B0-0x00A80388
	
		// Methods
		public virtual ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector ssout); // 0x00A800F4-0x00A802B0
	}

	[ComVisible] // 0x004B6404-0x004B6418
	public class ReturnMessage : IMethodReturnMessage, IInternalMessage // TypeDefIndex: 1056
	{
		// Fields
		private object[] _outArgs; // 0x10
		private object[] _args; // 0x18
		private LogicalCallContext _callCtx; // 0x20
		private object _returnValue; // 0x28
		private string _uri; // 0x30
		private Exception _exception; // 0x38
		private MethodBase _methodBase; // 0x40
		private string _methodName; // 0x48
		private Type[] _methodSignature; // 0x50
		private string _typeName; // 0x58
		private MethodReturnDictionary _properties; // 0x60
		private Identity _targetIdentity; // 0x68
		private ArgInfo _inArgInfo; // 0x70
	
		// Properties
		public int ArgCount { get; } // 0x00A80504-0x00A80524 
		public object[] Args { get; } // 0x00A80524-0x00A8052C 
		public LogicalCallContext LogicalCallContext { get; } // 0x00A8052C-0x00A80598 
		public MethodBase MethodBase { get; } // 0x00A80598-0x00A805A0 
		public string MethodName { get; } // 0x00A805A0-0x00A805FC 
		public object MethodSignature { get; } // 0x00A805FC-0x00A80748 
		public virtual IDictionary Properties { get; } // 0x00A80748-0x00A807B4 
		public string TypeName { get; } // 0x00A807B4-0x00A80824 
		public string Uri { get; set; } // 0x00A80824-0x00A8082C 0x00A8082C-0x00A80834
		string IInternalMessage.Uri { get; set; } // 0x00A80834-0x00A8083C 0x00A8083C-0x00A80844
		public Exception Exception { get; } // 0x00A80888-0x00A80890 
		public object[] OutArgs { get; } // 0x00A80890-0x00A8093C 
		public virtual object ReturnValue { get; } // 0x00A8093C-0x00A80944 
		Identity IInternalMessage.TargetIdentity { get; set; } // 0x00A80944-0x00A8094C 0x00A8094C-0x00A80954
	
		// Constructors
		public ReturnMessage(object ret, object[] outArgs, int outArgsCount, LogicalCallContext callCtx, IMethodCallMessage mcm); // 0x00A80388-0x00A80504
		public ReturnMessage(Exception e, IMethodCallMessage mcm); // 0x00A6FA04-0x00A6FB58
	
		// Methods
		public object GetArg(int argNum); // 0x00A80844-0x00A80888
	}

	internal class ServerContextTerminatorSink : IMessageSink // TypeDefIndex: 1057
	{
		// Constructors
		public ServerContextTerminatorSink(); // 0x00A6E0FC-0x00A6E104
	
		// Methods
		public IMessage SyncProcessMessage(IMessage msg); // 0x00A80954-0x00A80A80
		public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x00A80A80-0x00A80B6C
	}

	internal class ServerObjectTerminatorSink : IMessageSink // TypeDefIndex: 1058
	{
		// Fields
		private IMessageSink _nextSink; // 0x10
	
		// Constructors
		public ServerObjectTerminatorSink(IMessageSink nextSink); // 0x00A6E354-0x00A6E380
	
		// Methods
		public IMessage SyncProcessMessage(IMessage msg); // 0x00A80CEC-0x00A80E5C
		public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x00A80E5C-0x00A81018
	}

	internal class ServerObjectReplySink : IMessageSink // TypeDefIndex: 1059
	{
		// Fields
		private IMessageSink _replySink; // 0x10
		private ServerIdentity _identity; // 0x18
	
		// Constructors
		public ServerObjectReplySink(ServerIdentity identity, IMessageSink replySink); // 0x00A80B6C-0x00A80BA4
	
		// Methods
		public IMessage SyncProcessMessage(IMessage msg); // 0x00A80BA4-0x00A80C88
		public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x00A80C88-0x00A80CEC
	}

	internal class StackBuilderSink : IMessageSink // TypeDefIndex: 1060
	{
		// Fields
		private MarshalByRefObject _target; // 0x10
		private RealProxy _rp; // 0x18
	
		// Constructors
		public StackBuilderSink(MarshalByRefObject obj, bool forceInternalExecute); // 0x00A6E2CC-0x00A6E354
	
		// Methods
		public IMessage SyncProcessMessage(IMessage msg); // 0x00A81018-0x00A810F0
		public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x00A82004-0x00A82118
		private void ExecuteAsyncMessage(object ob); // 0x00A82118-0x00A82324
		private void CheckParameters(IMessage msg); // 0x00A810F0-0x00A81554
		[CompilerGenerated] // 0x004BC7A4-0x004BC7B4
		private void _AsyncProcessMessage_b__4_0(object data); // 0x00A82324-0x00A823F4
	}
}

namespace System.Runtime.ExceptionServices
{
	[AttributeUsage] // 0x004B6418-0x004B644C
	public sealed class HandleProcessCorruptedStateExceptionsAttribute : Attribute // TypeDefIndex: 1061
	{
		// Constructors
		public HandleProcessCorruptedStateExceptionsAttribute(); // 0x00880964-0x0088096C
	}

	public class FirstChanceExceptionEventArgs : EventArgs // TypeDefIndex: 1062
	{
	}

	public sealed class ExceptionDispatchInfo // TypeDefIndex: 1063
	{
		// Fields
		private Exception m_Exception; // 0x10
		private object m_stackTrace; // 0x18
	
		// Properties
		internal object BinaryStackTraceArray { get; } // 0x00880954-0x0088095C 
		public Exception SourceException { get; } // 0x0088095C-0x00880964 
	
		// Constructors
		private ExceptionDispatchInfo(Exception exception); // 0x00880824-0x00880954
	
		// Methods
		public static ExceptionDispatchInfo Capture(Exception source); // 0x0087F4C8-0x0087F58C
		public void Throw(); // 0x0087F748-0x0087F7B4
	}
}

namespace System.Runtime.ConstrainedExecution
{
	[ComVisible] // 0x004B644C-0x004B6460
	public abstract class CriticalFinalizerObject // TypeDefIndex: 1064
	{
		// Constructors
		[ReliabilityContract] // 0x004BC7B4-0x004BC7CC
		protected CriticalFinalizerObject(); // 0x008807DC-0x008807E4
	
		// Methods
		[ReliabilityContract] // 0x004BC7CC-0x004BC7E4
		~CriticalFinalizerObject(); // 0x008807E4-0x008807EC
	}

	[Serializable]
	public enum Consistency // TypeDefIndex: 1065
	{
		MayCorruptProcess = 0,
		MayCorruptAppDomain = 1,
		MayCorruptInstance = 2,
		WillNotCorruptState = 3
	}

	[Serializable]
	public enum Cer // TypeDefIndex: 1066
	{
		None = 0,
		MayFail = 1,
		Success = 2
	}

	[AttributeUsage] // 0x004B6460-0x004B6494
	public sealed class ReliabilityContractAttribute : Attribute // TypeDefIndex: 1067
	{
		// Fields
		private Consistency _consistency; // 0x10
		private Cer _cer; // 0x14
	
		// Constructors
		public ReliabilityContractAttribute(Consistency consistencyGuarantee, Cer cer); // 0x008807EC-0x00880824
	}
}

namespace System.Runtime.CompilerServices
{
	public struct AsyncTaskMethodBuilder<TResult> // TypeDefIndex: 1068
	{
		// Fields
		internal static readonly Task<TResult> s_defaultResultTask;
		private AsyncMethodBuilderCore m_coreState;
		private Task<TResult> m_task;
	
		// Properties
		public Task<TResult> Task { get; }
	
		// Constructors
		static AsyncTaskMethodBuilder();
	
		// Methods
		public static AsyncTaskMethodBuilder<TResult> Create();
		[DebuggerStepThrough] // 0x004BC7E4-0x004BC7F4
		public void Start<TStateMachine>(ref TStateMachine stateMachine)
			where TStateMachine : IAsyncStateMachine;
		public void SetStateMachine(IAsyncStateMachine stateMachine);
		public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)
			where TAwaiter : ICriticalNotifyCompletion
			where TStateMachine : IAsyncStateMachine;
		public void SetResult(TResult result);
		public void SetException(Exception exception);
		private Task<TResult> GetTaskForResult(TResult result);
	}

	internal static class AsyncTaskCache // TypeDefIndex: 1069
	{
		// Fields
		internal static readonly Task<bool> TrueTask; // 0x00
		internal static readonly Task<bool> FalseTask; // 0x08
		internal static readonly Task<int>[] Int32Tasks; // 0x10
	
		// Constructors
		static AsyncTaskCache(); // 0x0087FCB8-0x0087FD44
	
		// Methods
		private static Task<int>[] CreateInt32Tasks(); // 0x0087FBAC-0x0087FCB8
		internal static Task<TResult> CreateCacheableTask<TResult>(TResult result);
	}

	internal struct AsyncMethodBuilderCore // TypeDefIndex: 1070
	{
		// Fields
		internal IAsyncStateMachine m_stateMachine; // 0x00
		internal Action m_defaultContextAction; // 0x08
	
		// Nested types
		internal sealed class MoveNextRunner // TypeDefIndex: 1071
		{
			// Fields
			private readonly ExecutionContext m_context; // 0x10
			internal IAsyncStateMachine m_stateMachine; // 0x18
			private static ContextCallback s_invokeMoveNext; // 0x00
	
			// Constructors
			internal MoveNextRunner(ExecutionContext context, IAsyncStateMachine stateMachine); // 0x0087EEAC-0x0087EF94
	
			// Methods
			internal void Run(); // 0x0087F890-0x0087FA58
			private static void InvokeMoveNext(object stateMachine); // 0x0087FA58-0x0087FB54
		}
	
		private class ContinuationWrapper // TypeDefIndex: 1072
		{
			// Fields
			internal readonly Action m_continuation; // 0x10
			private readonly Action m_invokeAction; // 0x18
			internal readonly System.Threading.Tasks.Task m_innerTask; // 0x20
	
			// Constructors
			internal ContinuationWrapper(Action continuation, Action invokeAction, System.Threading.Tasks.Task innerTask); // 0x0087F58C-0x0087F5DC
	
			// Methods
			internal void Invoke(); // 0x0087F874-0x0087F890
		}
	
		[CompilerGenerated] // 0x004B6494-0x004B64A4
		private sealed class __c__DisplayClass4_0 // TypeDefIndex: 1073
		{
			// Fields
			public System.Threading.Tasks.Task innerTask; // 0x10
			public Action continuation; // 0x18
	
			// Constructors
			public __c__DisplayClass4_0(); // 0x0087EF94-0x0087EF9C
	
			// Methods
			internal void _OutputAsyncCausalityEvents_b__0(); // 0x0087F814-0x0087F874
		}
	
		[Serializable]
		[CompilerGenerated] // 0x004B64A4-0x004B64B4
		private sealed class __c // TypeDefIndex: 1074
		{
			// Fields
			public static readonly __c __9; // 0x00
			public static SendOrPostCallback __9__6_0; // 0x08
			public static WaitCallback __9__6_1; // 0x10
	
			// Constructors
			static __c(); // 0x0087F67C-0x0087F6E0
			public __c(); // 0x0087F6E0-0x0087F6E8
	
			// Methods
			internal void _ThrowAsync_b__6_0(object state); // 0x0087F6E8-0x0087F748
			internal void _ThrowAsync_b__6_1(object state); // 0x0087F7B4-0x0087F814
		}
	
		// Methods
		public void SetStateMachine(IAsyncStateMachine stateMachine); // 0x00581E58-0x00581E60
		internal Action GetCompletionAction(System.Threading.Tasks.Task taskForTracing, ref MoveNextRunner runnerToInitialize); // 0x00581E60-0x00581E68
		private Action OutputAsyncCausalityEvents(System.Threading.Tasks.Task innerTask, Action continuation); // 0x00581E68-0x00581E6C
		internal void PostBoxInitialization(IAsyncStateMachine stateMachine, MoveNextRunner runner, System.Threading.Tasks.Task builtTask); // 0x00581E6C-0x00582094
		internal static void ThrowAsync(Exception exception, SynchronizationContext targetContext); // 0x0087F1EC-0x0087F4C8
		internal static Action CreateContinuationWrapper(Action continuation, Action invokeAction, System.Threading.Tasks.Task innerTask = null); // 0x0087EF9C-0x0087F1EC
		internal static System.Threading.Tasks.Task TryGetContinuationTask(Action action); // 0x0087F5DC-0x0087F67C
	}

	[Serializable]
	[AttributeUsage] // 0x004B64B4-0x004B64E8
	public sealed class AsyncStateMachineAttribute : StateMachineAttribute // TypeDefIndex: 1075
	{
		// Constructors
		public AsyncStateMachineAttribute(Type stateMachineType); // 0x0087FB54-0x0087FB80
	}

	public interface IAsyncStateMachine // TypeDefIndex: 1076
	{
		// Methods
		void MoveNext();
		void SetStateMachine(IAsyncStateMachine stateMachine);
	}

	public interface ICriticalNotifyCompletion // TypeDefIndex: 1077
	{
		// Methods
		void UnsafeOnCompleted(Action continuation);
	}

	[Serializable]
	[AttributeUsage] // 0x004B64E8-0x004B651C
	public sealed class IteratorStateMachineAttribute : StateMachineAttribute // TypeDefIndex: 1078
	{
		// Constructors
		public IteratorStateMachineAttribute(Type stateMachineType); // 0x0087FF7C-0x0087FFA8
	}

	[Serializable]
	[AttributeUsage] // 0x004B651C-0x004B6550
	public sealed class RuntimeCompatibilityAttribute : Attribute // TypeDefIndex: 1079
	{
		// Fields
		private bool m_wrapNonExceptionThrows; // 0x10
	
		// Properties
		public bool WrapNonExceptionThrows { set; } // 0x0087FFB0-0x0087FFBC
	
		// Constructors
		public RuntimeCompatibilityAttribute(); // 0x0087FFA8-0x0087FFB0
	}

	[Serializable]
	public sealed class RuntimeWrappedException : Exception // TypeDefIndex: 1080
	{
		// Fields
		private object m_wrappedException; // 0x88
	
		// Constructors
		private RuntimeWrappedException(object thrownObject); // 0x00880070-0x00880120
		internal RuntimeWrappedException(SerializationInfo info, StreamingContext context); // 0x00880230-0x00880328
		internal RuntimeWrappedException(); // 0x00880328-0x00880368
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00880120-0x00880230
	}

	[Serializable]
	[AttributeUsage] // 0x004B6550-0x004B6584
	public class StateMachineAttribute : Attribute // TypeDefIndex: 1081
	{
		// Fields
		[CompilerGenerated] // 0x004B9A7C-0x004B9A8C
		private Type _StateMachineType_k__BackingField; // 0x10
	
		// Properties
		private Type StateMachineType { [CompilerGenerated] /* 0x004BC7F4-0x004BC804 */ set; } // 0x00880368-0x00880370
	
		// Constructors
		public StateMachineAttribute(Type stateMachineType); // 0x0087FB80-0x0087FBAC
	}

	public struct TaskAwaiter : ICriticalNotifyCompletion // TypeDefIndex: 1082
	{
		// Fields
		private readonly System.Threading.Tasks.Task m_task; // 0x00
	
		// Methods
		public void UnsafeOnCompleted(Action continuation); // 0x00582094-0x005820A4
		internal static void ValidateEnd(System.Threading.Tasks.Task task); // 0x0088045C-0x008804AC
		private static void HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task task); // 0x008804AC-0x00880520
		private static void ThrowForNonSuccess(System.Threading.Tasks.Task task); // 0x00880520-0x00880680
		internal static void OnCompletedInternal(System.Threading.Tasks.Task task, Action continuation, bool continueOnCapturedContext, bool flowExecutionContext); // 0x00880388-0x0088045C
	}

	public struct TaskAwaiter<TResult> : ICriticalNotifyCompletion // TypeDefIndex: 1083
	{
		// Fields
		private readonly Task<TResult> m_task;
	
		// Constructors
		internal TaskAwaiter(Task<TResult> task);
	
		// Methods
		public void UnsafeOnCompleted(Action continuation);
		public TResult GetResult();
	}

	public struct ConfiguredTaskAwaitable<TResult> // TypeDefIndex: 1084
	{
		// Fields
		private readonly ConfiguredTaskAwaiter m_configuredTaskAwaiter;
	
		// Nested types
		public struct ConfiguredTaskAwaiter : ICriticalNotifyCompletion // TypeDefIndex: 1085
		{
			// Fields
			private readonly Task<TResult> m_task;
			private readonly bool m_continueOnCapturedContext;
	
			// Properties
			public bool IsCompleted { get; }
	
			// Constructors
			internal ConfiguredTaskAwaiter(Task<TResult> task, bool continueOnCapturedContext);
	
			// Methods
			public void UnsafeOnCompleted(Action continuation);
			public TResult GetResult();
		}
	
		// Constructors
		internal ConfiguredTaskAwaitable(Task<TResult> task, bool continueOnCapturedContext);
	
		// Methods
		public ConfiguredTaskAwaiter GetAwaiter();
	}

	[AttributeUsage] // 0x004B6584-0x004B65B8
	public sealed class TypeForwardedFromAttribute : Attribute // TypeDefIndex: 1086
	{
		// Fields
		private string assemblyFullName; // 0x10
	
		// Properties
		public string AssemblyFullName { get; } // 0x008807CC-0x008807D4 
	
		// Constructors
		public TypeForwardedFromAttribute(string assemblyFullName); // 0x00880720-0x008807CC
	}

	[Serializable]
	public enum LoadHint // TypeDefIndex: 1087
	{
		Default = 0,
		Always = 1,
		Sometimes = 2
	}

	[Serializable]
	[AttributeUsage] // 0x004B65B8-0x004B65CC
	public sealed class DefaultDependencyAttribute : Attribute // TypeDefIndex: 1088
	{
		// Fields
		private LoadHint loadHint; // 0x10
	
		// Constructors
		public DefaultDependencyAttribute(LoadHint loadHintArgument); // 0x0087FEA4-0x0087FED0
	}

	[Serializable]
	[ComVisible] // 0x004B65CC-0x004B6608
	[Flags] // 0x004B65CC-0x004B6608
	public enum CompilationRelaxations // TypeDefIndex: 1089
	{
		NoStringInterning = 8
	}

	[Serializable]
	[AttributeUsage] // 0x004B6608-0x004B6648
	[ComVisible] // 0x004B6608-0x004B6648
	public class CompilationRelaxationsAttribute : Attribute // TypeDefIndex: 1090
	{
		// Fields
		private int m_relaxations; // 0x10
	
		// Properties
		public int CompilationRelaxations { get; } // 0x0087FD9C-0x0087FDA4 
	
		// Constructors
		public CompilationRelaxationsAttribute(int relaxations); // 0x0087FD44-0x0087FD70
		public CompilationRelaxationsAttribute(CompilationRelaxations relaxations); // 0x0087FD70-0x0087FD9C
	}

	[Serializable]
	[AttributeUsage] // 0x004B6648-0x004B6680
	public sealed class CompilerGeneratedAttribute : Attribute // TypeDefIndex: 1091
	{
		// Constructors
		public CompilerGeneratedAttribute(); // 0x0087FDA4-0x0087FDAC
	}

	[Serializable]
	[AttributeUsage] // 0x004B6680-0x004B66C8
	[ComVisible] // 0x004B6680-0x004B66C8
	public abstract class CustomConstantAttribute : Attribute // TypeDefIndex: 1092
	{
		// Properties
		public abstract object Value { get; }
	
		// Constructors
		protected CustomConstantAttribute(); // 0x0087FDAC-0x0087FDB4
	}

	[Serializable]
	[AttributeUsage] // 0x004B66C8-0x004B6714
	[ComVisible] // 0x004B66C8-0x004B6714
	public sealed class DateTimeConstantAttribute : CustomConstantAttribute // TypeDefIndex: 1093
	{
		// Fields
		private DateTime date; // 0x10
	
		// Properties
		public override object Value { get; } // 0x0087FDB4-0x0087FE18 
	}

	[Serializable]
	[AttributeUsage] // 0x004B6714-0x004B6760
	[ComVisible] // 0x004B6714-0x004B6760
	public sealed class DecimalConstantAttribute : Attribute // TypeDefIndex: 1094
	{
		// Fields
		private decimal dec; // 0x10
	
		// Properties
		public decimal Value { get; } // 0x0087FE98-0x0087FEA4 
	
		// Constructors
		[CLSCompliant] // 0x004BC804-0x004BC818
		public DecimalConstantAttribute(byte scale, byte sign, uint hi, uint mid, uint low); // 0x0087FE18-0x0087FE98
	}

	[AttributeUsage] // 0x004B6760-0x004B6774
	public sealed class ExtensionAttribute : Attribute // TypeDefIndex: 1095
	{
		// Constructors
		public ExtensionAttribute(); // 0x0087FED0-0x0087FED8
	}

	[AttributeUsage] // 0x004B6774-0x004B67A8
	public sealed class FixedBufferAttribute : Attribute // TypeDefIndex: 1096
	{
		// Fields
		private Type elementType; // 0x10
		private int length; // 0x18
	
		// Properties
		public Type ElementType { get; } // 0x0087FF14-0x0087FF1C 
		public int Length { get; } // 0x0087FF1C-0x0087FF24 
	
		// Constructors
		public FixedBufferAttribute(Type elementType, int length); // 0x0087FED8-0x0087FF14
	}

	[AttributeUsage] // 0x004B67A8-0x004B67E0
	public sealed class InternalsVisibleToAttribute : Attribute // TypeDefIndex: 1097
	{
		// Fields
		private string _assemblyName; // 0x10
		private bool _allInternalsVisible; // 0x18
	
		// Properties
		public string AssemblyName { get; } // 0x0087FF60-0x0087FF68 
		public bool AllInternalsVisible { get; set; } // 0x0087FF68-0x0087FF70 0x0087FF70-0x0087FF7C
	
		// Constructors
		public InternalsVisibleToAttribute(string assemblyName); // 0x0087FF2C-0x0087FF60
	}

	[AttributeUsage] // 0x004B67E0-0x004B6828
	[FriendAccessAllowed] // 0x004B67E0-0x004B6828
	internal sealed class FriendAccessAllowedAttribute : Attribute // TypeDefIndex: 1098
	{
		// Constructors
		public FriendAccessAllowedAttribute(); // 0x0087FF24-0x0087FF2C
	}

	[ComVisible] // 0x004B6828-0x004B683C
	public static class IsVolatile // TypeDefIndex: 1099
	{
	}

	[AttributeUsage] // 0x004B683C-0x004B6874
	internal sealed class TypeDependencyAttribute : Attribute // TypeDefIndex: 1100
	{
		// Fields
		private string typeName; // 0x10
	
		// Constructors
		public TypeDependencyAttribute(string typeName); // 0x00880680-0x00880720
	}

	[Serializable]
	[AttributeUsage] // 0x004B6874-0x004B6888
	public sealed class UnsafeValueTypeAttribute : Attribute // TypeDefIndex: 1101
	{
		// Constructors
		public UnsafeValueTypeAttribute(); // 0x008807D4-0x008807DC
	}

	[Serializable]
	[AttributeUsage] // 0x004B6888-0x004B68BC
	public sealed class StringFreezingAttribute : Attribute // TypeDefIndex: 1102
	{
		// Constructors
		public StringFreezingAttribute(); // 0x00880370-0x00880388
	}

	[FriendAccessAllowed] // 0x004B68BC-0x004B68CC
	internal static class JitHelpers // TypeDefIndex: 1103
	{
		// Methods
		internal static T UnsafeCast<T>(object o)
			where T : class;
		internal static int UnsafeEnumCast<T>(T val)
			where T : struct;
		internal static long UnsafeEnumCastLong<T>(T val)
			where T : struct;
	}

	internal struct Ephemeron // TypeDefIndex: 1104
	{
		// Fields
		internal object key; // 0x00
		internal object value; // 0x08
	}

	public sealed class ConditionalWeakTable<TKey, TValue> // TypeDefIndex: 1105
		where TKey : class
		where TValue : class
	{
		// Fields
		private Ephemeron[] data;
		private object _lock;
		private int size;
	
		// Nested types
		public delegate TValue CreateValueCallback(TKey key); // TypeDefIndex: 1106; 0x00000000-0x00000000
	
		// Constructors
		public ConditionalWeakTable();
	
		// Methods
		~ConditionalWeakTable();
		private void RehashWithoutResize();
		private void RecomputeSize();
		private void Rehash();
		public void Add(TKey key, TValue value);
		public bool Remove(TKey key);
		public bool TryGetValue(TKey key, out TValue value);
		public TValue GetValue(TKey key, CreateValueCallback createValueCallback);
	}

	public static class RuntimeHelpers // TypeDefIndex: 1107
	{
		// Properties
		public static int OffsetToStringData { get; } // 0x00880060-0x00880064 
	
		// Methods
		private static void InitializeArray(Array array, IntPtr fldHandle); // 0x0087FFBC-0x0087FFC0
		public static void InitializeArray(Array array, RuntimeFieldHandle fldHandle); // 0x0087FFC0-0x00880060
		public static int GetHashCode(object o); // 0x00880064-0x0088006C
		[MonoTODO] // 0x004BC818-0x004BC86C
		[ReliabilityContract] // 0x004BC818-0x004BC86C
		public static void PrepareConstrainedRegions(); // 0x0088006C-0x00880070
		public static bool IsReferenceOrContainsReferences<T>();
	}
}

namespace System.Runtime.InteropServices
{
	[AttributeUsage] // 0x004B68CC-0x004B6918
	[ComVisible] // 0x004B68CC-0x004B6918
	public sealed class UnmanagedFunctionPointerAttribute : Attribute // TypeDefIndex: 1108
	{
		// Fields
		private CallingConvention m_callingConvention; // 0x10
		public CharSet CharSet; // 0x14
		public bool BestFitMapping; // 0x18
		public bool ThrowOnUnmappableChar; // 0x19
		public bool SetLastError; // 0x1A
	
		// Constructors
		public UnmanagedFunctionPointerAttribute(CallingConvention callingConvention); // 0x00882218-0x00882244
	}

	[AttributeUsage] // 0x004B6918-0x004B6964
	[ComVisible] // 0x004B6918-0x004B6964
	public sealed class DispIdAttribute : Attribute // TypeDefIndex: 1109
	{
		// Fields
		internal int _val; // 0x10
	
		// Constructors
		public DispIdAttribute(int dispId); // 0x00880CF0-0x00880D1C
	}

	[Serializable]
	[ComVisible] // 0x004B6964-0x004B6978
	public enum ComInterfaceType // TypeDefIndex: 1110
	{
		InterfaceIsDual = 0,
		InterfaceIsIUnknown = 1,
		InterfaceIsIDispatch = 2,
		InterfaceIsIInspectable = 3
	}

	[AttributeUsage] // 0x004B6978-0x004B69C0
	[ComVisible] // 0x004B6978-0x004B69C0
	public sealed class InterfaceTypeAttribute : Attribute // TypeDefIndex: 1111
	{
		// Fields
		internal ComInterfaceType _val; // 0x10
	
		// Constructors
		public InterfaceTypeAttribute(ComInterfaceType interfaceType); // 0x008817C4-0x008817F0
	}

	[AttributeUsage] // 0x004B69C0-0x004B6A0C
	[ComVisible] // 0x004B69C0-0x004B6A0C
	public sealed class ComDefaultInterfaceAttribute : Attribute // TypeDefIndex: 1112
	{
		// Fields
		internal Type _val; // 0x10
	
		// Constructors
		public ComDefaultInterfaceAttribute(Type defaultInterface); // 0x00880C60-0x00880C8C
	}

	[Serializable]
	[ComVisible] // 0x004B6A0C-0x004B6A20
	public enum ClassInterfaceType // TypeDefIndex: 1113
	{
		None = 0,
		AutoDispatch = 1,
		AutoDual = 2
	}

	[AttributeUsage] // 0x004B6A20-0x004B6A68
	[ComVisible] // 0x004B6A20-0x004B6A68
	public sealed class ClassInterfaceAttribute : Attribute // TypeDefIndex: 1114
	{
		// Fields
		internal ClassInterfaceType _val; // 0x10
	
		// Constructors
		public ClassInterfaceAttribute(ClassInterfaceType classInterfaceType); // 0x00880BE8-0x00880C14
	}

	[AttributeUsage] // 0x004B6A68-0x004B6AB4
	[ComVisible] // 0x004B6A68-0x004B6AB4
	public sealed class ComVisibleAttribute : Attribute // TypeDefIndex: 1115
	{
		// Fields
		internal bool _val; // 0x10
	
		// Constructors
		public ComVisibleAttribute(bool visibility); // 0x00880C94-0x00880CC4
	}

	[Serializable]
	[ComVisible] // 0x004B6AB4-0x004B6AC8
	public enum VarEnum // TypeDefIndex: 1116
	{
		VT_EMPTY = 0,
		VT_NULL = 1,
		VT_I2 = 2,
		VT_I4 = 3,
		VT_R4 = 4,
		VT_R8 = 5,
		VT_CY = 6,
		VT_DATE = 7,
		VT_BSTR = 8,
		VT_DISPATCH = 9,
		VT_ERROR = 10,
		VT_BOOL = 11,
		VT_VARIANT = 12,
		VT_UNKNOWN = 13,
		VT_DECIMAL = 14,
		VT_I1 = 16,
		VT_UI1 = 17,
		VT_UI2 = 18,
		VT_UI4 = 19,
		VT_I8 = 20,
		VT_UI8 = 21,
		VT_INT = 22,
		VT_UINT = 23,
		VT_VOID = 24,
		VT_HRESULT = 25,
		VT_PTR = 26,
		VT_SAFEARRAY = 27,
		VT_CARRAY = 28,
		VT_USERDEFINED = 29,
		VT_LPSTR = 30,
		VT_LPWSTR = 31,
		VT_RECORD = 36,
		VT_FILETIME = 64,
		VT_BLOB = 65,
		VT_STREAM = 66,
		VT_STORAGE = 67,
		VT_STREAMED_OBJECT = 68,
		VT_STORED_OBJECT = 69,
		VT_BLOB_OBJECT = 70,
		VT_CF = 71,
		VT_CLSID = 72,
		VT_VECTOR = 4096,
		VT_ARRAY = 8192,
		VT_BYREF = 16384
	}

	[Serializable]
	[ComVisible] // 0x004B6AC8-0x004B6ADC
	public enum UnmanagedType // TypeDefIndex: 1117
	{
		Bool = 2,
		I1 = 3,
		U1 = 4,
		I2 = 5,
		U2 = 6,
		I4 = 7,
		U4 = 8,
		I8 = 9,
		U8 = 10,
		R4 = 11,
		R8 = 12,
		Currency = 15,
		BStr = 19,
		LPStr = 20,
		LPWStr = 21,
		LPTStr = 22,
		ByValTStr = 23,
		IUnknown = 25,
		IDispatch = 26,
		Struct = 27,
		Interface = 28,
		SafeArray = 29,
		ByValArray = 30,
		SysInt = 31,
		SysUInt = 32,
		VBByRefStr = 34,
		AnsiBStr = 35,
		TBStr = 36,
		VariantBool = 37,
		FunctionPtr = 38,
		AsAny = 40,
		LPArray = 42,
		LPStruct = 43,
		CustomMarshaler = 44,
		Error = 45,
		IInspectable = 46,
		HString = 47,
		LPUTF8Str = 48
	}

	[AttributeUsage] // 0x004B6ADC-0x004B6B28
	[ComVisible] // 0x004B6ADC-0x004B6B28
	public sealed class ComImportAttribute : Attribute // TypeDefIndex: 1118
	{
		// Constructors
		public ComImportAttribute(); // 0x00880C8C-0x00880C94
	}

	[AttributeUsage] // 0x004B6B28-0x004B6B74
	[ComVisible] // 0x004B6B28-0x004B6B74
	public sealed class GuidAttribute : Attribute // TypeDefIndex: 1119
	{
		// Fields
		internal string _val; // 0x10
	
		// Constructors
		public GuidAttribute(string guid); // 0x00881790-0x008817BC
	}

	[AttributeUsage] // 0x004B6B74-0x004B6BBC
	[ComVisible] // 0x004B6B74-0x004B6BBC
	public sealed class PreserveSigAttribute : Attribute // TypeDefIndex: 1120
	{
		// Constructors
		public PreserveSigAttribute(); // 0x00881B9C-0x00881BA4
	}

	[AttributeUsage] // 0x004B6BBC-0x004B6C04
	[ComVisible] // 0x004B6BBC-0x004B6C04
	public sealed class InAttribute : Attribute // TypeDefIndex: 1121
	{
		// Constructors
		public InAttribute(); // 0x008817BC-0x008817C4
	}

	[AttributeUsage] // 0x004B6C04-0x004B6C50
	[ComVisible] // 0x004B6C04-0x004B6C50
	public sealed class OutAttribute : Attribute // TypeDefIndex: 1122
	{
		// Constructors
		public OutAttribute(); // 0x00881B94-0x00881B9C
	}

	[AttributeUsage] // 0x004B6C50-0x004B6C98
	[ComVisible] // 0x004B6C50-0x004B6C98
	public sealed class OptionalAttribute : Attribute // TypeDefIndex: 1123
	{
		// Constructors
		public OptionalAttribute(); // 0x00881B8C-0x00881B94
	}

	[Flags] // 0x004B6C98-0x004B6CA8
	public enum DllImportSearchPath // TypeDefIndex: 1124
	{
		LegacyBehavior = 0,
		AssemblyDirectory = 2,
		UseDllDirectoryForDependencies = 256,
		ApplicationDirectory = 512,
		UserDirectories = 1024,
		System32 = 2048,
		SafeDirectories = 4096
	}

	[AttributeUsage] // 0x004B6CA8-0x004B6CF4
	[ComVisible] // 0x004B6CA8-0x004B6CF4
	public sealed class DefaultDllImportSearchPathsAttribute : Attribute // TypeDefIndex: 1125
	{
		// Fields
		internal DllImportSearchPath _paths; // 0x10
	
		// Constructors
		public DefaultDllImportSearchPathsAttribute(DllImportSearchPath paths); // 0x00880CC4-0x00880CF0
	}

	[AttributeUsage] // 0x004B6CF4-0x004B6D40
	[ComVisible] // 0x004B6CF4-0x004B6D40
	public sealed class DllImportAttribute : Attribute // TypeDefIndex: 1126
	{
		// Fields
		internal string _val; // 0x10
		public string EntryPoint; // 0x18
		public CharSet CharSet; // 0x20
		public bool SetLastError; // 0x24
		public bool ExactSpelling; // 0x25
		public bool PreserveSig; // 0x26
		public CallingConvention CallingConvention; // 0x28
		public bool BestFitMapping; // 0x2C
		public bool ThrowOnUnmappableChar; // 0x2D
	
		// Properties
		public string Value { get; } // 0x0088100C-0x00881014 
	
		// Constructors
		internal DllImportAttribute(string dllName, string entryPoint, CharSet charSet, bool exactSpelling, bool setLastError, bool preserveSig, CallingConvention callingConvention, bool bestFitMapping, bool throwOnUnmappableChar); // 0x00880F18-0x00880FB4
		public DllImportAttribute(string dllName); // 0x00880FE0-0x0088100C
	
		// Methods
		internal static Attribute GetCustomAttribute(RuntimeMethodInfo method); // 0x00880D1C-0x00880F18
		internal static bool IsDefined(RuntimeMethodInfo method); // 0x00880FB4-0x00880FE0
	}

	[AttributeUsage] // 0x004B6D40-0x004B6D88
	[ComVisible] // 0x004B6D40-0x004B6D88
	public sealed class FieldOffsetAttribute : Attribute // TypeDefIndex: 1127
	{
		// Fields
		internal int _val; // 0x10
	
		// Constructors
		public FieldOffsetAttribute(int offset); // 0x00881240-0x00881300
	}

	[AttributeUsage] // 0x004B6D88-0x004B6DD4
	[ComVisible] // 0x004B6D88-0x004B6DD4
	public sealed class ComCompatibleVersionAttribute : Attribute // TypeDefIndex: 1128
	{
		// Fields
		internal int _major; // 0x10
		internal int _minor; // 0x14
		internal int _build; // 0x18
		internal int _revision; // 0x1C
	
		// Constructors
		public ComCompatibleVersionAttribute(int major, int minor, int build, int revision); // 0x00880C14-0x00880C60
	}

	[Serializable]
	[ComVisible] // 0x004B6DD4-0x004B6DE8
	public enum CallingConvention // TypeDefIndex: 1129
	{
		Winapi = 1,
		Cdecl = 2,
		StdCall = 3,
		ThisCall = 4,
		FastCall = 5
	}

	[Serializable]
	[ComVisible] // 0x004B6DE8-0x004B6DFC
	public enum CharSet // TypeDefIndex: 1130
	{
		None = 1,
		Ansi = 2,
		Unicode = 3,
		Auto = 4
	}

	[Serializable]
	[ComVisible] // 0x004B6DFC-0x004B6E10
	public class COMException : ExternalException // TypeDefIndex: 1131
	{
		// Constructors
		public COMException(); // 0x0088096C-0x008809F4
		protected COMException(SerializationInfo info, StreamingContext context); // 0x00880A28-0x00880A30
	
		// Methods
		public override string ToString(); // 0x00880A38-0x00880BE8
	}

	[Serializable]
	[ComVisible] // 0x004B6E10-0x004B6E24
	public sealed class ErrorWrapper // TypeDefIndex: 1132
	{
		// Fields
		private int m_ErrorCode; // 0x10
	}

	[Serializable]
	[ComVisible] // 0x004B6E24-0x004B6E38
	public class ExternalException : SystemException // TypeDefIndex: 1133
	{
		// Properties
		public virtual int ErrorCode { get; } // 0x00881088-0x00881090 
	
		// Constructors
		public ExternalException(); // 0x00881014-0x00881088
		public ExternalException(string message); // 0x008809F4-0x00880A28
		protected ExternalException(SerializationInfo info, StreamingContext context); // 0x00880A30-0x00880A38
	
		// Methods
		public override string ToString(); // 0x00881090-0x00881240
	}

	[ComVisible] // 0x004B6E38-0x004B6E4C
	public interface ICustomMarshaler // TypeDefIndex: 1134
	{
		// Methods
		object MarshalNativeToManaged(IntPtr pNativeData);
		IntPtr MarshalManagedToNative(object ManagedObj);
		void CleanUpNativeData(IntPtr pNativeData);
		void CleanUpManagedData(object ManagedObj);
		int GetNativeDataSize();
	}

	[Serializable]
	[ComVisible] // 0x004B6E4C-0x004B6E60
	public class MarshalDirectiveException : SystemException // TypeDefIndex: 1135
	{
		// Constructors
		public MarshalDirectiveException(); // 0x00881ADC-0x00881B50
		public MarshalDirectiveException(string message); // 0x00881B50-0x00881B84
		protected MarshalDirectiveException(SerializationInfo info, StreamingContext context); // 0x00881B84-0x00881B8C
	}

	public abstract class SafeHandle : CriticalFinalizerObject, IDisposable // TypeDefIndex: 1136
	{
		// Fields
		protected IntPtr handle; // 0x10
		private int _state; // 0x18
		private bool _ownsHandle; // 0x1C
		private bool _fullyInitialized; // 0x1D
		private const int RefCount_Mask = 2147483644; // Metadata: 0x001E1364
		private const int RefCount_One = 4; // Metadata: 0x001E1368
	
		// Properties
		public bool IsClosed { [ReliabilityContract] /* 0x004BC8B4-0x004BC8CC */ get; } // 0x00881EFC-0x00881F08 
		public abstract bool IsInvalid { [ReliabilityContract] /* 0x004BC8CC-0x004BC8E4 */ get; }
	
		// Constructors
		[ReliabilityContract] // 0x004BC86C-0x004BC884
		protected SafeHandle(IntPtr invalidHandleValue, bool ownsHandle); // 0x00881DCC-0x00881E74
	
		// Methods
		~SafeHandle(); // 0x00881E74-0x00881EEC
		[ReliabilityContract] // 0x004BC884-0x004BC89C
		protected void SetHandle(IntPtr handle); // 0x00881EEC-0x00881EF4
		[ReliabilityContract] // 0x004BC89C-0x004BC8B4
		public IntPtr DangerousGetHandle(); // 0x00881EF4-0x00881EFC
		[ReliabilityContract] // 0x004BC8E4-0x004BC8FC
		public void Close(); // 0x00881F08-0x00881F18
		[ReliabilityContract] // 0x004BC8FC-0x004BC914
		public void Dispose(); // 0x00881F18-0x00881F28
		[ReliabilityContract] // 0x004BC914-0x004BC92C
		protected virtual void Dispose(bool disposing); // 0x00881F28-0x00881F44
		[ReliabilityContract] // 0x004BC92C-0x004BC944
		protected abstract bool ReleaseHandle();
		[ReliabilityContract] // 0x004BC944-0x004BC95C
		public void SetHandleAsInvalid(); // 0x00882008-0x0088209C
		[ReliabilityContract] // 0x004BC95C-0x004BC974
		public void DangerousAddRef(ref bool success); // 0x00881C58-0x00881D40
		[ReliabilityContract] // 0x004BC974-0x004BC98C
		public void DangerousRelease(); // 0x00881DC4-0x00881DCC
		private void InternalDispose(); // 0x00881F44-0x00881FF4
		private void InternalFinalize(); // 0x00881FF4-0x00882008
		private void DangerousReleaseInternal(bool dispose); // 0x0088209C-0x00882218
	}

	[ComVisible] // 0x004B6E60-0x004B6EB0
	[MonoTODO] // 0x004B6E60-0x004B6EB0
	public struct GCHandle // TypeDefIndex: 1137
	{
		// Fields
		private int handle; // 0x00
	
		// Properties
		public bool IsAllocated { get; } // 0x00582138-0x00582148 
		public object Target { get; set; } // 0x00582148-0x00582150 0x00582150-0x00582184
	
		// Constructors
		private GCHandle(IntPtr h); // 0x005820A4-0x005820D0
		private GCHandle(object obj); // 0x005820D0-0x00582100
		internal GCHandle(object value, GCHandleType type); // 0x00582100-0x00582138
	
		// Methods
		public IntPtr AddrOfPinnedObject(); // 0x00582184-0x0058218C
		public static GCHandle Alloc(object value); // 0x008814F0-0x00881510
		public static GCHandle Alloc(object value, GCHandleType type); // 0x00881510-0x008815E0
		public void Free(); // 0x0058218C-0x00582194
		public static explicit operator IntPtr(GCHandle value); // 0x008815E4-0x008815EC
		public static explicit operator GCHandle(IntPtr value); // 0x008815EC-0x008816D0
		private static bool CheckCurrentDomain(int handle); // 0x008816D0-0x008816D4
		private static object GetTarget(int handle); // 0x008813B0-0x008814EC
		private static int GetTargetHandle(object obj, int handle, GCHandleType type); // 0x00881300-0x008813B0
		private static void FreeHandle(int handle); // 0x008815E0-0x008815E4
		private static IntPtr GetAddrOfPinnedObject(int handle); // 0x008814EC-0x008814F0
		public static bool operator ==(GCHandle a, GCHandle b); // 0x008816D4-0x00881770
		public override bool Equals(object o); // 0x00582194-0x0058219C
		public override int GetHashCode(); // 0x0058219C-0x005822E4
		public static GCHandle FromIntPtr(IntPtr value); // 0x00881770-0x00881788
		public static IntPtr ToIntPtr(GCHandle value); // 0x00881788-0x00881790
	}

	[Serializable]
	[ComVisible] // 0x004B6EB0-0x004B6EC4
	public enum GCHandleType // TypeDefIndex: 1138
	{
		Weak = 0,
		WeakTrackResurrection = 1,
		Normal = 2,
		Pinned = 3
	}

	public static class Marshal // TypeDefIndex: 1139
	{
		// Fields
		public static readonly int SystemMaxDBCSCharSize; // 0x00
		public static readonly int SystemDefaultCharSize; // 0x04
	
		// Constructors
		static Marshal(); // 0x008819FC-0x00881A70
	
		// Methods
		internal static void copy_from_unmanaged(IntPtr source, int startIndex, Array destination, int length); // 0x008817F0-0x008817F4
		public static void Copy(IntPtr source, byte[] destination, int startIndex, int length); // 0x008817F4-0x00881880
		public static void Copy(IntPtr source, char[] destination, int startIndex, int length); // 0x00881880-0x0088190C
		public static void FreeBSTR(IntPtr ptr); // 0x0088190C-0x00881910
		public static int GetHRForException(Exception e); // 0x00881910-0x0088191C
		[ReliabilityContract] // 0x004BC98C-0x004BC9A4
		public static int GetLastWin32Error(); // 0x0088191C-0x00881920
		public static string PtrToStringUni(IntPtr ptr); // 0x00881920-0x00881924
		[ReliabilityContract] // 0x004BC9A4-0x004BC9BC
		private static int ReleaseInternal(IntPtr pUnk); // 0x00881924-0x00881928
		[ReliabilityContract] // 0x004BC9BC-0x004BC9D4
		public static int Release(IntPtr pUnk); // 0x00881928-0x008819EC
		[ComVisible] // 0x004BC9D4-0x004BCA18
		[ReliabilityContract] // 0x004BC9D4-0x004BCA18
		public static void StructureToPtr(object structure, IntPtr ptr, bool fDeleteOld); // 0x008819EC-0x008819F4
		public static void StructureToPtr<T>(T structure, IntPtr ptr, bool fDeleteOld);
		public static IntPtr UnsafeAddrOfPinnedArrayElement(Array arr, int index); // 0x008819F4-0x008819F8
		public static IntPtr UnsafeAddrOfPinnedArrayElement<T>(T[] arr, int index);
		private static IntPtr GetFunctionPointerForDelegateInternal(Delegate d); // 0x008819F8-0x008819FC
		public static IntPtr GetFunctionPointerForDelegate<TDelegate>(TDelegate d);
	}

	[AttributeUsage] // 0x004B6EC4-0x004B6F10
	[ComVisible] // 0x004B6EC4-0x004B6F10
	public sealed class MarshalAsAttribute : Attribute // TypeDefIndex: 1140
	{
		// Fields
		public string MarshalCookie; // 0x10
		[ComVisible] // 0x004B9ADC-0x004B9AF0
		public string MarshalType; // 0x18
		[ComVisible] // 0x004B9AF0-0x004B9B04
		public Type MarshalTypeRef; // 0x20
		public Type SafeArrayUserDefinedSubType; // 0x28
		private UnmanagedType utype; // 0x30
		public UnmanagedType ArraySubType; // 0x34
		public VarEnum SafeArraySubType; // 0x38
		public int SizeConst; // 0x3C
		public int IidParameterIndex; // 0x40
		public short SizeParamIndex; // 0x44
	
		// Methods
		internal MarshalAsAttribute Copy(); // 0x00881A70-0x00881ADC
	}

	public abstract class SafeBuffer : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 1141
	{
		// Fields
		private bool inited; // 0x1E
	
		// Methods
		[CLSCompliant] // 0x004BCA18-0x004BCA5C
		[ReliabilityContract] // 0x004BCA18-0x004BCA5C
		public unsafe void AcquirePointer(ref byte* pointer); // 0x00881BA4-0x00881C58
		[ReliabilityContract] // 0x004BCA5C-0x004BCA74
		public void ReleasePointer(); // 0x00881D40-0x00881DC4
	}

	[CLSCompliant] // 0x004B6F10-0x004B6F88
	[ComVisible] // 0x004B6F10-0x004B6F88
	[Guid] // 0x004B6F10-0x004B6F88
	[InterfaceType] // 0x004B6F10-0x004B6F88
	public interface _Activator // TypeDefIndex: 1142
	{
	}

	[CLSCompliant] // 0x004B6F88-0x004B7000
	[ComVisible] // 0x004B6F88-0x004B7000
	[Guid] // 0x004B6F88-0x004B7000
	[InterfaceType] // 0x004B6F88-0x004B7000
	public interface _Assembly // TypeDefIndex: 1143
	{
	}

	[CLSCompliant] // 0x004B7000-0x004B7078
	[ComVisible] // 0x004B7000-0x004B7078
	[Guid] // 0x004B7000-0x004B7078
	[InterfaceType] // 0x004B7000-0x004B7078
	public interface _AssemblyName // TypeDefIndex: 1144
	{
	}

	[CLSCompliant] // 0x004B7078-0x004B70F0
	[ComVisible] // 0x004B7078-0x004B70F0
	[Guid] // 0x004B7078-0x004B70F0
	[InterfaceType] // 0x004B7078-0x004B70F0
	public interface _ConstructorInfo // TypeDefIndex: 1145
	{
	}

	[CLSCompliant] // 0x004B70F0-0x004B7168
	[ComVisible] // 0x004B70F0-0x004B7168
	[Guid] // 0x004B70F0-0x004B7168
	[InterfaceType] // 0x004B70F0-0x004B7168
	public interface _EventInfo // TypeDefIndex: 1146
	{
	}

	[CLSCompliant] // 0x004B7168-0x004B71E0
	[ComVisible] // 0x004B7168-0x004B71E0
	[Guid] // 0x004B7168-0x004B71E0
	[InterfaceType] // 0x004B7168-0x004B71E0
	public interface _Exception // TypeDefIndex: 1147
	{
	}

	[CLSCompliant] // 0x004B71E0-0x004B7258
	[ComVisible] // 0x004B71E0-0x004B7258
	[Guid] // 0x004B71E0-0x004B7258
	[InterfaceType] // 0x004B71E0-0x004B7258
	public interface _FieldInfo // TypeDefIndex: 1148
	{
	}

	[CLSCompliant] // 0x004B7258-0x004B72D0
	[ComVisible] // 0x004B7258-0x004B72D0
	[Guid] // 0x004B7258-0x004B72D0
	[InterfaceType] // 0x004B7258-0x004B72D0
	public interface _MemberInfo // TypeDefIndex: 1149
	{
	}

	[CLSCompliant] // 0x004B72D0-0x004B7348
	[ComVisible] // 0x004B72D0-0x004B7348
	[Guid] // 0x004B72D0-0x004B7348
	[InterfaceType] // 0x004B72D0-0x004B7348
	public interface _MethodBase // TypeDefIndex: 1150
	{
	}

	[CLSCompliant] // 0x004B7348-0x004B73C0
	[ComVisible] // 0x004B7348-0x004B73C0
	[Guid] // 0x004B7348-0x004B73C0
	[InterfaceType] // 0x004B7348-0x004B73C0
	public interface _MethodInfo // TypeDefIndex: 1151
	{
	}

	[CLSCompliant] // 0x004B73C0-0x004B7438
	[ComVisible] // 0x004B73C0-0x004B7438
	[Guid] // 0x004B73C0-0x004B7438
	[InterfaceType] // 0x004B73C0-0x004B7438
	public interface _Module // TypeDefIndex: 1152
	{
	}

	[CLSCompliant] // 0x004B7438-0x004B74B0
	[ComVisible] // 0x004B7438-0x004B74B0
	[Guid] // 0x004B7438-0x004B74B0
	[InterfaceType] // 0x004B7438-0x004B74B0
	public interface _ParameterInfo // TypeDefIndex: 1153
	{
	}

	[CLSCompliant] // 0x004B74B0-0x004B7528
	[ComVisible] // 0x004B74B0-0x004B7528
	[Guid] // 0x004B74B0-0x004B7528
	[InterfaceType] // 0x004B74B0-0x004B7528
	public interface _PropertyInfo // TypeDefIndex: 1154
	{
	}

	[CLSCompliant] // 0x004B7528-0x004B75A0
	[ComVisible] // 0x004B7528-0x004B75A0
	[Guid] // 0x004B7528-0x004B75A0
	[InterfaceType] // 0x004B7528-0x004B75A0
	public interface _Thread // TypeDefIndex: 1155
	{
	}

	[CLSCompliant] // 0x004B75A0-0x004B7618
	[ComVisible] // 0x004B75A0-0x004B7618
	[Guid] // 0x004B75A0-0x004B7618
	[InterfaceType] // 0x004B75A0-0x004B7618
	public interface _Type // TypeDefIndex: 1156
	{
	}
}

namespace System.Collections
{
	[Serializable]
	public struct DictionaryEntry // TypeDefIndex: 1157
	{
		// Fields
		private object _key; // 0x00
		private object _value; // 0x08
	
		// Properties
		public object Key { get; } // 0x0058E9B8-0x0058E9C0 
		public object Value { get; } // 0x0058E9C0-0x0058EC28 
	
		// Constructors
		public DictionaryEntry(object key, object value); // 0x0058E9B0-0x0058E9B8
	}

	internal sealed class LowLevelComparer : IComparer // TypeDefIndex: 1158
	{
		// Fields
		internal static readonly LowLevelComparer Default; // 0x00
	
		// Constructors
		private LowLevelComparer(); // 0x00C1E98C-0x00C1E994
		static LowLevelComparer(); // 0x00C1EB50-0x00C1EBB4
	
		// Methods
		public int Compare(object a, object b); // 0x00C1E994-0x00C1EB50
	}

	[Serializable]
	[ComVisible] // 0x004B7618-0x004B76D8
	[DebuggerDisplay] // 0x004B7618-0x004B76D8
	[DebuggerTypeProxy] // 0x004B7618-0x004B76D8
	public class ArrayList : IList, ICloneable // TypeDefIndex: 1159
	{
		// Fields
		private object[] _items; // 0x10
		private int _size; // 0x18
		private int _version; // 0x1C
		[NonSerialized]
		private object _syncRoot; // 0x20
		private static readonly object[] emptyArray; // 0x00
	
		// Properties
		public virtual int Capacity { set; } // 0x00C17AF4-0x00C17C1C
		public virtual int Count { get; } // 0x00C17C1C-0x00C17C24 
		public virtual bool IsReadOnly { get; } // 0x00C17C24-0x00C17C2C 
		public virtual object SyncRoot { get; } // 0x00C17C2C-0x00C17CA4 
		public virtual object this[int index] { get => default; set {} } // 0x00C17CA4-0x00C17D94 0x00C17D94-0x00C17EB4
	
		// Nested types
		[Serializable]
		private sealed class ArrayListEnumeratorSimple : IEnumerator, ICloneable // TypeDefIndex: 1160
		{
			// Fields
			private ArrayList list; // 0x10
			private int index; // 0x18
			private int version; // 0x1C
			private object currentElement; // 0x20
			[NonSerialized]
			private bool isArrayList; // 0x28
			private static object dummyObject; // 0x00
	
			// Properties
			public object Current { get; } // 0x00C18D70-0x00C18E60 
	
			// Constructors
			internal ArrayListEnumeratorSimple(ArrayList list); // 0x00C182D0-0x00C183DC
			static ArrayListEnumeratorSimple(); // 0x00C18F4C-0x00C18FB8
	
			// Methods
			public object Clone(); // 0x00C18B5C-0x00C18B64
			public bool MoveNext(); // 0x00C18B64-0x00C18D70
			public void Reset(); // 0x00C18E60-0x00C18F4C
		}
	
		internal class ArrayListDebugView // TypeDefIndex: 1161
		{
		}
	
		// Constructors
		public ArrayList(); // 0x00C17794-0x00C17810
		public ArrayList(int capacity); // 0x00C17810-0x00C17958
		public ArrayList(ICollection c); // 0x00C17958-0x00C17AF4
		static ArrayList(); // 0x00C18AE0-0x00C18B5C
	
		// Methods
		public virtual int Add(object value); // 0x00C17EB4-0x00C17F68
		public virtual void AddRange(ICollection c); // 0x00C17FC4-0x00C17FE4
		public virtual void Clear(); // 0x00C17FE4-0x00C18028
		public virtual object Clone(); // 0x00C18028-0x00C180C8
		public virtual bool Contains(object item); // 0x00C180C8-0x00C181A4
		public virtual void CopyTo(Array array, int arrayIndex); // 0x00C181A4-0x00C18270
		private void EnsureCapacity(int min); // 0x00C17F68-0x00C17FC4
		public virtual IEnumerator GetEnumerator(); // 0x00C18270-0x00C182D0
		public virtual int IndexOf(object value); // 0x00C183DC-0x00C183F0
		public virtual void Insert(int index, object value); // 0x00C183F0-0x00C18554
		public virtual void InsertRange(int index, ICollection c); // 0x00C18554-0x00C187C0
		public virtual void Remove(object obj); // 0x00C187C0-0x00C18814
		public virtual void RemoveAt(int index); // 0x00C18814-0x00C18938
		public virtual object[] ToArray(); // 0x00C18938-0x00C189B0
		public virtual Array ToArray(Type type); // 0x00C189B0-0x00C18AE0
	}

	[Serializable]
	[ComVisible] // 0x004B76D8-0x004B76EC
	public class CaseInsensitiveComparer : IComparer // TypeDefIndex: 1162
	{
		// Fields
		private CompareInfo m_compareInfo; // 0x10
	
		// Properties
		public static CaseInsensitiveComparer Default { get; } // 0x00C190F4-0x00C19180 
	
		// Constructors
		public CaseInsensitiveComparer(); // 0x00C18FB8-0x00C19044
		public CaseInsensitiveComparer(CultureInfo culture); // 0x00C19044-0x00C190F4
	
		// Methods
		public int Compare(object a, object b); // 0x00C19180-0x00C1927C
	}

	[Serializable]
	[ComVisible] // 0x004B76EC-0x004B773C
	[Obsolete] // 0x004B76EC-0x004B773C
	public class CaseInsensitiveHashCodeProvider : IHashCodeProvider // TypeDefIndex: 1163
	{
		// Fields
		private TextInfo m_text; // 0x10
	
		// Properties
		public static CaseInsensitiveHashCodeProvider Default { get; } // 0x00C195D8-0x00C19664 
	
		// Constructors
		public CaseInsensitiveHashCodeProvider(); // 0x00C1949C-0x00C19528
		public CaseInsensitiveHashCodeProvider(CultureInfo culture); // 0x00C19528-0x00C195D8
	
		// Methods
		public int GetHashCode(object obj); // 0x00C19664-0x00C19738
	}

	[Serializable]
	[ComVisible] // 0x004B773C-0x004B7750
	public sealed class Comparer : IComparer, ISerializable // TypeDefIndex: 1164
	{
		// Fields
		private CompareInfo m_compareInfo; // 0x10
		public static readonly Comparer Default; // 0x00
		public static readonly Comparer DefaultInvariant; // 0x08
	
		// Constructors
		private Comparer(); // 0x00C19738-0x00C19760
		public Comparer(CultureInfo culture); // 0x00C19760-0x00C19810
		private Comparer(SerializationInfo info, StreamingContext context); // 0x00C19810-0x00C19970
		static Comparer(); // 0x00C19A2C-0x00C19AF8
	
		// Methods
		public int Compare(object a, object b); // 0x00C1927C-0x00C1949C
		public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00C19970-0x00C19A2C
	}

	[Serializable]
	internal class CompatibleComparer : IEqualityComparer // TypeDefIndex: 1165
	{
		// Fields
		private IComparer _comparer; // 0x10
		private IHashCodeProvider _hcp; // 0x18
	
		// Properties
		internal IComparer Comparer { get; } // 0x00C19E40-0x00C19E48 
		internal IHashCodeProvider HashCodeProvider { get; } // 0x00C19E48-0x00C19E50 
	
		// Constructors
		internal CompatibleComparer(IComparer comparer, IHashCodeProvider hashCodeProvider); // 0x00C19AF8-0x00C19B30
	
		// Methods
		public int Compare(object a, object b); // 0x00C19B30-0x00C19D08
		public new bool Equals(object a, object b); // 0x00C19D08-0x00C19D24
		public int GetHashCode(object obj); // 0x00C19D24-0x00C19E40
	}

	[Serializable]
	[ComVisible] // 0x004B7750-0x004B7810
	[DebuggerDisplay] // 0x004B7750-0x004B7810
	[DebuggerTypeProxy] // 0x004B7750-0x004B7810
	public class Hashtable : IDictionary, ISerializable, IDeserializationCallback, ICloneable // TypeDefIndex: 1166
	{
		// Fields
		internal const int HashPrime = 101; // Metadata: 0x001E137C
		private const int InitialSize = 3; // Metadata: 0x001E1380
		private const string LoadFactorName = "LoadFactor"; // Metadata: 0x001E1384
		private const string VersionName = "Version"; // Metadata: 0x001E1392
		private const string ComparerName = "Comparer"; // Metadata: 0x001E139D
		private const string HashCodeProviderName = "HashCodeProvider"; // Metadata: 0x001E13A9
		private const string HashSizeName = "HashSize"; // Metadata: 0x001E13BD
		private const string KeysName = "Keys"; // Metadata: 0x001E13C9
		private const string ValuesName = "Values"; // Metadata: 0x001E13D1
		private const string KeyComparerName = "KeyComparer"; // Metadata: 0x001E13DB
		private bucket[] buckets; // 0x10
		private int count; // 0x18
		private int occupancy; // 0x1C
		private int loadsize; // 0x20
		private float loadFactor; // 0x24
		private int version; // 0x28
		private bool isWriterInProgress; // 0x2C
		private ICollection keys; // 0x30
		private ICollection values; // 0x38
		private IEqualityComparer _keycomparer; // 0x40
		private object _syncRoot; // 0x48
	
		// Properties
		public virtual object this[object key] { get => default; set {} } // 0x00C1BE1C-0x00C1C068 0x00C1C068-0x00C1C070
		public virtual ICollection Keys { get; } // 0x00C1C6B4-0x00C1C724 
		public virtual object SyncRoot { get; } // 0x00C1C9C0-0x00C1CA38 
		public virtual int Count { get; } // 0x00C1CA38-0x00C1CA40 
	
		// Nested types
		private struct bucket // TypeDefIndex: 1167
		{
			// Fields
			public object key; // 0x00
			public object val; // 0x08
			public int hash_coll; // 0x10
		}
	
		[Serializable]
		private class KeyCollection : ICollection // TypeDefIndex: 1168
		{
			// Fields
			private Hashtable _hashtable; // 0x10
	
			// Properties
			public virtual int Count { get; } // 0x00C1DE5C-0x00C1DE7C 
	
			// Constructors
			internal KeyCollection(Hashtable hashtable); // 0x00C1C724-0x00C1C750
	
			// Methods
			public virtual void CopyTo(Array array, int arrayIndex); // 0x00C1DC6C-0x00C1DDF4
			public virtual IEnumerator GetEnumerator(); // 0x00C1DDF4-0x00C1DE5C
		}
	
		[Serializable]
		private class SyncHashtable : Hashtable, IEnumerable // TypeDefIndex: 1169
		{
			// Fields
			protected Hashtable _table; // 0x50
	
			// Properties
			public override int Count { get; } // 0x00C1E154-0x00C1E178 
			public override object this[object key] { get => default; set {} } // 0x00C1E178-0x00C1E19C 0x00C1E19C-0x00C1E284
			public override object SyncRoot { get; } // 0x00C1E284-0x00C1E2A8 
			public override ICollection Keys { get; } // 0x00C1E7CC-0x00C1E8B0 
	
			// Constructors
			internal SyncHashtable(Hashtable table); // 0x00C1CAE8-0x00C1CB14
			internal SyncHashtable(SerializationInfo info, StreamingContext context); // 0x00C1DE7C-0x00C1DFCC
	
			// Methods
			public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00C1DFCC-0x00C1E154
			public override void Add(object key, object value); // 0x00C1E2A8-0x00C1E390
			public override void Clear(); // 0x00C1E390-0x00C1E460
			public override bool Contains(object key); // 0x00C1E460-0x00C1E484
			public override bool ContainsKey(object key); // 0x00C1E484-0x00C1E550
			public override void CopyTo(Array array, int arrayIndex); // 0x00C1E550-0x00C1E638
			public override object Clone(); // 0x00C1E638-0x00C1E784
			new IEnumerator IEnumerable.GetEnumerator(); // 0x00C1E784-0x00C1E7A8
			public override IDictionaryEnumerator GetEnumerator(); // 0x00C1E7A8-0x00C1E7CC
			public override void Remove(object key); // 0x00C1E8B0-0x00C1E988
			public override void OnDeserialization(object sender); // 0x00C1E988-0x00C1E98C
		}
	
		[Serializable]
		private class HashtableEnumerator : IDictionaryEnumerator, ICloneable // TypeDefIndex: 1170
		{
			// Fields
			private Hashtable hashtable; // 0x10
			private int bucket; // 0x18
			private int version; // 0x1C
			private bool current; // 0x20
			private int getObjectRetType; // 0x24
			private object currentKey; // 0x28
			private object currentValue; // 0x30
	
			// Properties
			public virtual object Key { get; } // 0x00C1D774-0x00C1D814 
			public virtual DictionaryEntry Entry { get; } // 0x00C1D968-0x00C1DA08 
			public virtual object Current { get; } // 0x00C1DA08-0x00C1DAEC 
			public virtual object Value { get; } // 0x00C1DAEC-0x00C1DB8C 
	
			// Constructors
			internal HashtableEnumerator(Hashtable hashtable, int getObjRetType); // 0x00C1C3E8-0x00C1C450
	
			// Methods
			public object Clone(); // 0x00C1D76C-0x00C1D774
			public virtual bool MoveNext(); // 0x00C1D814-0x00C1D968
			public virtual void Reset(); // 0x00C1DB8C-0x00C1DC6C
		}
	
		internal class HashtableDebugView // TypeDefIndex: 1171
		{
		}
	
		// Constructors
		internal Hashtable(bool trash); // 0x00C1ABE0-0x00C1ABE8
		public Hashtable(); // 0x00C1515C-0x00C15168
		public Hashtable(int capacity); // 0x00C1AE98-0x00C1AEA0
		public Hashtable(int capacity, float loadFactor); // 0x00C1ABE8-0x00C1AE98
		[Obsolete] // 0x004BCA74-0x004BCAAC
		public Hashtable(int capacity, float loadFactor, IHashCodeProvider hcp, IComparer comparer); // 0x00C1AEA0-0x00C1AF4C
		public Hashtable(int capacity, float loadFactor, IEqualityComparer equalityComparer); // 0x00C1AF4C-0x00C1AF74
		[Obsolete] // 0x004BCAAC-0x004BCAE4
		public Hashtable(IHashCodeProvider hcp, IComparer comparer); // 0x00C1AF74-0x00C1AF90
		public Hashtable(IEqualityComparer equalityComparer); // 0x00C1AF90-0x00C1AFC0
		public Hashtable(int capacity, IEqualityComparer equalityComparer); // 0x00C1AFC0-0x00C1AFEC
		protected Hashtable(SerializationInfo info, StreamingContext context); // 0x00C1AFEC-0x00C1B084
	
		// Methods
		private uint InitHash(object key, int hashsize, out uint seed, out uint incr); // 0x00C1B084-0x00C1B0E4
		public virtual void Add(object key, object value); // 0x00C1B0E4-0x00C1B0EC
		[ReliabilityContract] // 0x004BCAE4-0x004BCAFC
		public virtual void Clear(); // 0x00C1B5F0-0x00C1B6EC
		public virtual object Clone(); // 0x00C1B71C-0x00C1B850
		public virtual bool Contains(object key); // 0x00C1B850-0x00C1B860
		public virtual bool ContainsKey(object key); // 0x00C1B860-0x00C1BA0C
		private void CopyKeys(Array array, int arrayIndex); // 0x00C1BA0C-0x00C1BABC
		private void CopyEntries(Array array, int arrayIndex); // 0x00C1BABC-0x00C1BBC8
		public virtual void CopyTo(Array array, int arrayIndex); // 0x00C1BBC8-0x00C1BD60
		private void CopyValues(Array array, int arrayIndex); // 0x00C1BD60-0x00C1BE1C
		private void expand(); // 0x00C1C070-0x00C1C0F4
		private void rehash(); // 0x00C1C26C-0x00C1C290
		private void UpdateVersion(); // 0x00C1B6EC-0x00C1B71C
		[ReliabilityContract] // 0x004BCAFC-0x004BCB14
		private void rehash(int newsize, bool forceNewHashCode); // 0x00C1C0F4-0x00C1C26C
		IEnumerator IEnumerable.GetEnumerator(); // 0x00C1C384-0x00C1C3E8
		public virtual IDictionaryEnumerator GetEnumerator(); // 0x00C1C450-0x00C1C4B4
		protected virtual int GetHash(object key); // 0x00C1C4B4-0x00C1C59C
		protected virtual bool KeyEquals(object item, object key); // 0x00C1C59C-0x00C1C6B4
		[ReliabilityContract] // 0x004BCB14-0x004BCB2C
		private void Insert(object key, object nvalue, bool add); // 0x00C1B0EC-0x00C1B5F0
		private void putEntry(bucket[] newBuckets, object key, object nvalue, int hashcode); // 0x00C1C290-0x00C1C384
		[ReliabilityContract] // 0x004BCB2C-0x004BCB44
		public virtual void Remove(object key); // 0x00C1C750-0x00C1C9C0
		public static Hashtable Synchronized(Hashtable table); // 0x00C1CA40-0x00C1CAE8
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00C1CB14-0x00C1D008
		public virtual void OnDeserialization(object sender); // 0x00C1D008-0x00C1D76C
	}

	[FriendAccessAllowed] // 0x004B7848-0x004B7858
	internal static class HashHelpers // TypeDefIndex: 1172
	{
		// Fields
		public static readonly int[] primes; // 0x00
		private static ConditionalWeakTable<object, SerializationInfo> s_SerializationInfoTable; // 0x08
	
		// Properties
		internal static ConditionalWeakTable<object, SerializationInfo> SerializationInfoTable { get; } // 0x00C1A764-0x00C1A848 
	
		// Constructors
		static HashHelpers(); // 0x00C1AB64-0x00C1ABE0
	
		// Methods
		[ReliabilityContract] // 0x004BCB44-0x004BCB5C
		public static bool IsPrime(int candidate); // 0x00C1A848-0x00C1A904
		[ReliabilityContract] // 0x004BCB5C-0x004BCB74
		public static int GetPrime(int min); // 0x00C1A904-0x00C1AAD0
		public static int ExpandPrime(int oldSize); // 0x00C1AAD0-0x00C1AB64
	}

	[ComVisible] // 0x004B7858-0x004B786C
	public interface ICollection : IEnumerable // TypeDefIndex: 1173
	{
		// Properties
		int Count { get; }
	
		// Methods
		void CopyTo(Array array, int index);
	}

	[ComVisible] // 0x004B786C-0x004B7880
	public interface IComparer // TypeDefIndex: 1174
	{
		// Methods
		int Compare(object x, object y);
	}

	[ComVisible] // 0x004B7880-0x004B78D0
	public interface IDictionary : ICollection // TypeDefIndex: 1175
	{
		// Properties
		object this[object key] { get => default; set {} }
		ICollection Keys { get; }
	
		// Methods
		IDictionaryEnumerator GetEnumerator();
	}

	[ComVisible] // 0x004B78D0-0x004B78E4
	public interface IDictionaryEnumerator : IEnumerator // TypeDefIndex: 1176
	{
		// Properties
		object Key { get; }
		object Value { get; }
		DictionaryEntry Entry { get; }
	}

	[ComVisible] // 0x004B78E4-0x004B7934
	[Guid] // 0x004B78E4-0x004B7934
	public interface IEnumerable // TypeDefIndex: 1177
	{
		// Methods
		[DispId] // 0x004BCB74-0x004BCB88
		IEnumerator GetEnumerator();
	}

	[ComVisible] // 0x004B7934-0x004B7984
	[Guid] // 0x004B7934-0x004B7984
	public interface IEnumerator // TypeDefIndex: 1178
	{
		// Properties
		object Current { get; }
	
		// Methods
		bool MoveNext();
		void Reset();
	}

	[ComVisible] // 0x004B7984-0x004B7998
	public interface IEqualityComparer // TypeDefIndex: 1179
	{
		// Methods
		bool Equals(object x, object y);
		int GetHashCode(object obj);
	}

	[ComVisible] // 0x004B7998-0x004B79E8
	[Obsolete] // 0x004B7998-0x004B79E8
	public interface IHashCodeProvider // TypeDefIndex: 1180
	{
		// Methods
		int GetHashCode(object obj);
	}

	[ComVisible] // 0x004B79E8-0x004B7A38
	public interface IList : ICollection // TypeDefIndex: 1181
	{
		// Properties
		object this[int index] { get => default; set {} }
		bool IsReadOnly { get; }
	
		// Methods
		int Add(object value);
		bool Contains(object value);
		void Clear();
		int IndexOf(object value);
		void Insert(int index, object value);
		void Remove(object value);
		void RemoveAt(int index);
	}

	public interface IStructuralComparable // TypeDefIndex: 1182
	{
		// Methods
		int CompareTo(object other, IComparer comparer);
	}

	public interface IStructuralEquatable // TypeDefIndex: 1183
	{
		// Methods
		bool Equals(object other, IEqualityComparer comparer);
		int GetHashCode(IEqualityComparer comparer);
	}

	[Serializable]
	[ComVisible] // 0x004B7A38-0x004B7AD4
	[DebuggerDisplay] // 0x004B7A38-0x004B7AD4
	[DebuggerTypeProxy] // 0x004B7A38-0x004B7AD4
	public class Queue : ICollection, ICloneable // TypeDefIndex: 1184
	{
		// Fields
		private object[] _array; // 0x10
		private int _head; // 0x18
		private int _tail; // 0x1C
		private int _size; // 0x20
		private int _growFactor; // 0x24
		private int _version; // 0x28
	
		// Properties
		public virtual int Count { get; } // 0x00C1F040-0x00C1F048 
	
		// Nested types
		[Serializable]
		private class QueueEnumerator : IEnumerator, ICloneable // TypeDefIndex: 1185
		{
			// Fields
			private Queue _q; // 0x10
			private int _index; // 0x18
			private int _version; // 0x1C
			private object currentElement; // 0x20
	
			// Properties
			public virtual object Current { get; } // 0x00C1F948-0x00C1FA10 
	
			// Constructors
			internal QueueEnumerator(Queue q); // 0x00C1F590-0x00C1F5E8
	
			// Methods
			public object Clone(); // 0x00C1F838-0x00C1F840
			public virtual bool MoveNext(); // 0x00C1F840-0x00C1F948
			public virtual void Reset(); // 0x00C1FA10-0x00C1FADC
		}
	
		internal class QueueDebugView // TypeDefIndex: 1186
		{
		}
	
		// Constructors
		public Queue(); // 0x00C1EBB4-0x00C1EBC0
		public Queue(int capacity); // 0x00C1EDA4-0x00C1EDAC
		public Queue(int capacity, float growFactor); // 0x00C1EBC0-0x00C1EDA4
		public Queue(ICollection col); // 0x00C1EDAC-0x00C1F040
	
		// Methods
		public virtual object Clone(); // 0x00C1F048-0x00C1F130
		public virtual void CopyTo(Array array, int index); // 0x00C1F130-0x00C1F318
		public virtual void Enqueue(object obj); // 0x00C1F318-0x00C1F424
		public virtual IEnumerator GetEnumerator(); // 0x00C1F530-0x00C1F590
		public virtual object Dequeue(); // 0x00C1F5E8-0x00C1F704
		public virtual object Peek(); // 0x00C1F704-0x00C1F7E4
		internal object GetElement(int i); // 0x00C1F7E4-0x00C1F838
		private void SetCapacity(int capacity); // 0x00C1F424-0x00C1F530
	}

	[Serializable]
	[ComVisible] // 0x004B7AD4-0x004B7B94
	[DebuggerDisplay] // 0x004B7AD4-0x004B7B94
	[DebuggerTypeProxy] // 0x004B7AD4-0x004B7B94
	public class SortedList : IDictionary, ICloneable // TypeDefIndex: 1187
	{
		// Fields
		private object[] keys; // 0x10
		private object[] values; // 0x18
		private int _size; // 0x20
		private int version; // 0x24
		private IComparer comparer; // 0x28
		private KeyList keyList; // 0x30
		private static object[] emptyArray; // 0x00
	
		// Properties
		public virtual int Capacity { get; set; } // 0x00C20068-0x00C20088 0x00C20088-0x00C2021C
		public virtual int Count { get; } // 0x00C2021C-0x00C20224 
		public virtual ICollection Keys { get; } // 0x00C20224-0x00C20234 
		public virtual object this[object key] { get => default; set {} } // 0x00C209C0-0x00C20A2C 0x00C20A2C-0x00C20B80
	
		// Nested types
		[Serializable]
		private class SortedListEnumerator : IDictionaryEnumerator, ICloneable // TypeDefIndex: 1188
		{
			// Fields
			private SortedList sortedList; // 0x10
			private object key; // 0x18
			private object value; // 0x20
			private int index; // 0x28
			private int startIndex; // 0x2C
			private int endIndex; // 0x30
			private int version; // 0x34
			private bool current; // 0x38
			private int getObjectRetType; // 0x3C
	
			// Properties
			public virtual object Key { get; } // 0x00C21460-0x00C2152C 
			public virtual DictionaryEntry Entry { get; } // 0x00C2165C-0x00C21728 
			public virtual object Current { get; } // 0x00C21728-0x00C2180C 
			public virtual object Value { get; } // 0x00C2180C-0x00C218D8 
	
			// Constructors
			internal SortedListEnumerator(SortedList sortedList, int index, int count, int getObjRetType); // 0x00C2073C-0x00C207AC
	
			// Methods
			public object Clone(); // 0x00C21458-0x00C21460
			public virtual bool MoveNext(); // 0x00C2152C-0x00C2165C
			public virtual void Reset(); // 0x00C218D8-0x00C2199C
		}
	
		[Serializable]
		private class KeyList : IList // TypeDefIndex: 1189
		{
			// Fields
			private SortedList sortedList; // 0x10
	
			// Properties
			public virtual int Count { get; } // 0x00C20E44-0x00C20E64 
			public virtual bool IsReadOnly { get; } // 0x00C20E64-0x00C20E6C 
			public virtual object this[int index] { get => default; set {} } // 0x00C21108-0x00C2112C 0x00C2112C-0x00C211B0
	
			// Constructors
			internal KeyList(SortedList sortedList); // 0x00C20994-0x00C209C0
	
			// Methods
			public virtual int Add(object key); // 0x00C20E6C-0x00C20EF0
			public virtual void Clear(); // 0x00C20EF0-0x00C20F74
			public virtual bool Contains(object key); // 0x00C20F74-0x00C20F98
			public virtual void CopyTo(Array array, int arrayIndex); // 0x00C20F98-0x00C21084
			public virtual void Insert(int index, object value); // 0x00C21084-0x00C21108
			public virtual IEnumerator GetEnumerator(); // 0x00C211B0-0x00C21250
			public virtual int IndexOf(object key); // 0x00C21250-0x00C21350
			public virtual void Remove(object key); // 0x00C21350-0x00C213D4
			public virtual void RemoveAt(int index); // 0x00C213D4-0x00C21458
		}
	
		internal class SortedListDebugView // TypeDefIndex: 1190
		{
		}
	
		// Constructors
		public SortedList(); // 0x00C1FADC-0x00C1FB04
		public SortedList(int initialCapacity); // 0x00C1FBDC-0x00C1FD10
		public SortedList(IComparer comparer); // 0x00C1FD10-0x00C1FD48
		public SortedList(IComparer comparer, int capacity); // 0x00C1FD48-0x00C1FD80
		static SortedList(); // 0x00C20DC8-0x00C20E44
	
		// Methods
		private void Init(); // 0x00C1FB04-0x00C1FBDC
		public virtual void Add(object key, object value); // 0x00C1FD80-0x00C1FF30
		public virtual object Clone(); // 0x00C20234-0x00C202F4
		public virtual bool Contains(object key); // 0x00C202F4-0x00C2031C
		public virtual void CopyTo(Array array, int arrayIndex); // 0x00C2031C-0x00C20574
		private void EnsureCapacity(int min); // 0x00C20574-0x00C205C4
		public virtual object GetByIndex(int index); // 0x00C205C4-0x00C206C4
		IEnumerator IEnumerable.GetEnumerator(); // 0x00C206C4-0x00C2073C
		public virtual IDictionaryEnumerator GetEnumerator(); // 0x00C207AC-0x00C20824
		public virtual object GetKey(int index); // 0x00C20824-0x00C20924
		public virtual IList GetKeyList(); // 0x00C20924-0x00C20994
		public virtual int IndexOfKey(object key); // 0x00C20B80-0x00C20C50
		private void Insert(int index, object key, object value); // 0x00C1FF30-0x00C20068
		public virtual void RemoveAt(int index); // 0x00C20C50-0x00C20DC8
	}

	[Serializable]
	[ComVisible] // 0x004B7BCC-0x004B7C68
	[DebuggerDisplay] // 0x004B7BCC-0x004B7C68
	[DebuggerTypeProxy] // 0x004B7BCC-0x004B7C68
	public class Stack : ICollection, ICloneable // TypeDefIndex: 1191
	{
		// Fields
		private object[] _array; // 0x10
		private int _size; // 0x18
		private int _version; // 0x1C
	
		// Properties
		public virtual int Count { get; } // 0x00C21ADC-0x00C21AE4 
	
		// Nested types
		[Serializable]
		private class StackEnumerator : IEnumerator, ICloneable // TypeDefIndex: 1192
		{
			// Fields
			private Stack _stack; // 0x10
			private int _index; // 0x18
			private int _version; // 0x1C
			private object currentElement; // 0x20
	
			// Properties
			public virtual object Current { get; } // 0x00AB56C8-0x00AB5780 
	
			// Constructors
			internal StackEnumerator(Stack stack); // 0x00AB554C-0x00AB5594
	
			// Methods
			public object Clone(); // 0x00AB5594-0x00AB559C
			public virtual bool MoveNext(); // 0x00AB559C-0x00AB56C8
			public virtual void Reset(); // 0x00AB5780-0x00AB5840
		}
	
		internal class StackDebugView // TypeDefIndex: 1193
		{
		}
	
		// Constructors
		public Stack(); // 0x00C2199C-0x00C21A00
		public Stack(int initialCapacity); // 0x00C21A00-0x00C21ADC
	
		// Methods
		public virtual void Clear(); // 0x00C21AE4-0x00C21B1C
		public virtual object Clone(); // 0x00C21B1C-0x00C21BBC
		public virtual void CopyTo(Array array, int index); // 0x00C21BBC-0x00C21E5C
		public virtual IEnumerator GetEnumerator(); // 0x00C21E5C-0x00C21EC0
		public virtual object Peek(); // 0x00C21EC0-0x00C21F94
		public virtual object Pop(); // 0x00C21F94-0x00C22078
		public virtual void Push(object obj); // 0x00C22078-0x00C2318C
	}
}

namespace System.Collections.ObjectModel
{
	[Serializable]
	[ComVisible] // 0x004B7C68-0x004B7D28
	[DebuggerDisplay] // 0x004B7C68-0x004B7D28
	[DebuggerTypeProxy] // 0x004B7C68-0x004B7D28
	public class ReadOnlyCollection<T> : IList<T>, IList, IReadOnlyList<T> // TypeDefIndex: 1194
	{
		// Fields
		private IList<T> list;
	
		// Properties
		public int Count { get; }
		public T this[int index] { get => default; }
		bool ICollection<T>.IsReadOnly { get; }
		T IList<T>.this[int index] { get => default; set {} }
		bool IList.IsReadOnly { get; }
		object IList.this[int index] { get => default; set {} }
	
		// Constructors
		public ReadOnlyCollection(IList<T> list);
	
		// Methods
		public bool Contains(T value);
		public void CopyTo(T[] array, int index);
		public IEnumerator<T> GetEnumerator();
		public int IndexOf(T value);
		void ICollection<T>.Add(T value);
		void ICollection<T>.Clear();
		void IList<T>.Insert(int index, T value);
		bool ICollection<T>.Remove(T value);
		void IList<T>.RemoveAt(int index);
		IEnumerator IEnumerable.GetEnumerator();
		void ICollection.CopyTo(Array array, int index);
		int IList.Add(object value);
		void IList.Clear();
		private static bool IsCompatibleObject(object value);
		bool IList.Contains(object value);
		int IList.IndexOf(object value);
		void IList.Insert(int index, object value);
		void IList.Remove(object value);
		void IList.RemoveAt(int index);
	}
}

namespace System.Collections.Concurrent
{
	[EventSource] // 0x004B7D28-0x004B7D74
	internal sealed class CDSCollectionETWBCLProvider : EventSource // TypeDefIndex: 1195
	{
		// Fields
		public static CDSCollectionETWBCLProvider Log; // 0x00
	
		// Constructors
		private CDSCollectionETWBCLProvider(); // 0x00C19E50-0x00C19EB8
		static CDSCollectionETWBCLProvider(); // 0x00C19F08-0x00C19F80
	
		// Methods
		[Event] // 0x004BCB88-0x004BCBC0
		public void ConcurrentDictionary_AcquiringAllLocks(int numOfBuckets); // 0x00C19EB8-0x00C19F08
	}

	[Serializable]
	[DebuggerDisplay] // 0x004B7D74-0x004B7E20
	[DebuggerTypeProxy] // 0x004B7D74-0x004B7E20
	public class ConcurrentDictionary<TKey, TValue> : IDictionary<TKey, TValue>, IDictionary, IReadOnlyDictionary<TKey, TValue> // TypeDefIndex: 1196
	{
		// Fields
		private Tables _tables;
		private IEqualityComparer<TKey> _comparer;
		private readonly bool _growLockArray;
		private int _budget;
		private static readonly bool s_isValueWriteAtomic;
	
		// Properties
		public TValue this[TKey key] { get => default; set {} }
		public int Count { get; }
		public bool IsEmpty { get; }
		public ICollection<TKey> Keys { get; }
		bool ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
		ICollection IDictionary.Keys { get; }
		object IDictionary.this[object key] { get => default; set {} }
		private static int DefaultConcurrencyLevel { get; }
	
		// Nested types
		private sealed class Tables // TypeDefIndex: 1197
		{
			// Fields
			internal readonly Node<TKey, TValue>[] _buckets;
			internal readonly object[] _locks;
			internal int[] _countPerLock;
	
			// Constructors
			internal Tables(Node<TKey, TValue>[] buckets, object[] locks, int[] countPerLock);
		}
	
		[Serializable]
		private sealed class Node // TypeDefIndex: 1198
		{
			// Fields
			internal readonly TKey _key;
			internal TValue _value;
			internal Node<TKey, TValue> _next;
			internal readonly int _hashcode;
	
			// Constructors
			internal Node(TKey key, TValue value, int hashcode, Node<TKey, TValue> next);
		}
	
		[Serializable]
		private sealed class DictionaryEnumerator : IDictionaryEnumerator // TypeDefIndex: 1199
		{
			// Fields
			private IEnumerator<KeyValuePair<TKey, TValue>> _enumerator;
	
			// Properties
			public DictionaryEntry Entry { get; }
			public object Key { get; }
			public object Value { get; }
			public object Current { get; }
	
			// Constructors
			internal DictionaryEnumerator(ConcurrentDictionary<TKey, TValue> dictionary);
	
			// Methods
			public bool MoveNext();
			public void Reset();
		}
	
		[CompilerGenerated] // 0x004B7E20-0x004B7E30
		private sealed class _GetEnumerator_d__32 : IEnumerator<KeyValuePair<TKey, TValue>> // TypeDefIndex: 1200
		{
			// Fields
			private int __1__state;
			private KeyValuePair<TKey, TValue> __2__current;
			public ConcurrentDictionary<TKey, TValue> __4__this;
			private Node<TKey, TValue>[] _buckets_5__1;
			private Node<TKey, TValue> _current_5__2;
			private int _i_5__3;
	
			// Properties
			KeyValuePair<TKey, TValue> IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Current { [DebuggerHidden] /* 0x004BCC44-0x004BCC54 */ get; }
			object IEnumerator.Current { [DebuggerHidden] /* 0x004BCC64-0x004BCC74 */ get; }
	
			// Constructors
			[DebuggerHidden] // 0x004BCC24-0x004BCC34
			public _GetEnumerator_d__32(int __1__state);
	
			// Methods
			[DebuggerHidden] // 0x004BCC34-0x004BCC44
			void IDisposable.Dispose();
			private bool MoveNext();
			[DebuggerHidden] // 0x004BCC54-0x004BCC64
			void IEnumerator.Reset();
		}
	
		// Constructors
		public ConcurrentDictionary();
		internal ConcurrentDictionary(int concurrencyLevel, int capacity, bool growLockArray, IEqualityComparer<TKey> comparer);
		static ConcurrentDictionary();
	
		// Methods
		private static bool IsValueWriteAtomic();
		public bool TryAdd(TKey key, TValue value);
		public bool ContainsKey(TKey key);
		public bool TryRemove(TKey key, out TValue value);
		private bool TryRemoveInternal(TKey key, out TValue value, bool matchValue, TValue oldValue);
		public bool TryGetValue(TKey key, out TValue value);
		private bool TryGetValueInternal(TKey key, int hashcode, out TValue value);
		public void Clear();
		void ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[] array, int index);
		public KeyValuePair<TKey, TValue>[] ToArray();
		private void CopyToPairs(KeyValuePair<TKey, TValue>[] array, int index);
		private void CopyToEntries(DictionaryEntry[] array, int index);
		private void CopyToObjects(object[] array, int index);
		[IteratorStateMachine] // 0x004BCBC0-0x004BCC24
		public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator();
		private bool TryAddInternal(TKey key, int hashcode, TValue value, bool updateIfExists, bool acquireLock, out TValue resultingValue);
		private static void ThrowKeyNotFoundException();
		private static void ThrowKeyNullException();
		private int GetCountInternal();
		public TValue GetOrAdd(TKey key, Func<TKey, TValue> valueFactory);
		void IDictionary<TKey, TValue>.Add(TKey key, TValue value);
		void ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue> keyValuePair);
		bool ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue> keyValuePair);
		bool ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue> keyValuePair);
		IEnumerator IEnumerable.GetEnumerator();
		IDictionaryEnumerator IDictionary.GetEnumerator();
		void ICollection.CopyTo(Array array, int index);
		private void GrowTable(Tables tables);
		private static int GetBucket(int hashcode, int bucketCount);
		private static void GetBucketAndLockNo(int hashcode, out int bucketNo, out int lockNo, int bucketCount, int lockCount);
		private void AcquireAllLocks(ref int locksAcquired);
		private void AcquireLocks(int fromInclusive, int toExclusive, ref int locksAcquired);
		private void ReleaseLocks(int fromInclusive, int toExclusive);
		private ReadOnlyCollection<TKey> GetKeys();
	}

	internal sealed class IDictionaryDebugView<K, V> // TypeDefIndex: 1201
	{
	}
}

namespace System.Collections.Generic
{
	public static class CollectionExtensions // TypeDefIndex: 1202
	{
		// Extension methods
		public static TValue GetValueOrDefault<TKey, TValue>(this IReadOnlyDictionary<TKey, TValue> dictionary, TKey key);
		public static TValue GetValueOrDefault<TKey, TValue>(this IReadOnlyDictionary<TKey, TValue> dictionary, TKey key, TValue defaultValue);
	}

	public static class KeyValuePair // TypeDefIndex: 1203
	{
		// Methods
		internal static string PairToString(object key, object value); // 0x00C1A564-0x00C1A630
	}

	[Serializable]
	public struct KeyValuePair<TKey, TValue> // TypeDefIndex: 1204
	{
		// Fields
		private TKey key;
		private TValue value;
	
		// Properties
		public TKey Key { get; }
		public TValue Value { get; }
	
		// Constructors
		public KeyValuePair(TKey key, TValue value);
	
		// Methods
		public override string ToString();
	}

	internal static class IntrospectiveSortUtilities // TypeDefIndex: 1205
	{
		// Methods
		internal static int FloorLog2(int n); // 0x00C0DEE0-0x00C0E040
		internal static void ThrowOrIgnoreBadComparer(object comparer); // 0x00C0E040-0x00C0F844
	}

	internal class ArraySortHelper<T> // TypeDefIndex: 1206
	{
		// Methods
		public static void Sort(T[] keys, int index, int length, IComparer<T> comparer);
		public static int BinarySearch(T[] array, int index, int length, T value, IComparer<T> comparer);
		internal static void Sort(T[] keys, int index, int length, Comparison<T> comparer);
		internal static int InternalBinarySearch(T[] array, int index, int length, T value, IComparer<T> comparer);
		private static void SwapIfGreater(T[] keys, Comparison<T> comparer, int a, int b);
		private static void Swap(T[] a, int i, int j);
		internal static void IntrospectiveSort(T[] keys, int left, int length, Comparison<T> comparer);
		private static void IntroSort(T[] keys, int lo, int hi, int depthLimit, Comparison<T> comparer);
		private static int PickPivotAndPartition(T[] keys, int lo, int hi, Comparison<T> comparer);
		private static void Heapsort(T[] keys, int lo, int hi, Comparison<T> comparer);
		private static void DownHeap(T[] keys, int i, int n, int lo, Comparison<T> comparer);
		private static void InsertionSort(T[] keys, int lo, int hi, Comparison<T> comparer);
	}

	internal class ArraySortHelper<TKey, TValue> // TypeDefIndex: 1207
	{
		// Fields
		private static ArraySortHelper<TKey, TValue> s_defaultArraySortHelper;
	
		// Properties
		public static ArraySortHelper<TKey, TValue> Default { get; }
	
		// Constructors
		public ArraySortHelper();
	
		// Methods
		private static ArraySortHelper<TKey, TValue> CreateArraySortHelper();
		public void Sort(TKey[] keys, TValue[] values, int index, int length, IComparer<TKey> comparer);
		private static void SwapIfGreaterWithItems(TKey[] keys, TValue[] values, IComparer<TKey> comparer, int a, int b);
		private static void Swap(TKey[] keys, TValue[] values, int i, int j);
		internal static void IntrospectiveSort(TKey[] keys, TValue[] values, int left, int length, IComparer<TKey> comparer);
		private static void IntroSort(TKey[] keys, TValue[] values, int lo, int hi, int depthLimit, IComparer<TKey> comparer);
		private static int PickPivotAndPartition(TKey[] keys, TValue[] values, int lo, int hi, IComparer<TKey> comparer);
		private static void Heapsort(TKey[] keys, TValue[] values, int lo, int hi, IComparer<TKey> comparer);
		private static void DownHeap(TKey[] keys, TValue[] values, int i, int n, int lo, IComparer<TKey> comparer);
		private static void InsertionSort(TKey[] keys, TValue[] values, int lo, int hi, IComparer<TKey> comparer);
	}

	internal enum InsertionBehavior : byte // TypeDefIndex: 1208
	{
		None = 0,
		OverwriteExisting = 1,
		ThrowOnExisting = 2
	}

	[Serializable]
	[DebuggerDisplay] // 0x004B7E40-0x004B7EEC
	[DebuggerTypeProxy] // 0x004B7E40-0x004B7EEC
	public class Dictionary<TKey, TValue> : IDictionary<TKey, TValue>, IDictionary, IReadOnlyDictionary<TKey, TValue>, ISerializable, IDeserializationCallback // TypeDefIndex: 1209
	{
		// Fields
		private int[] buckets;
		private Entry[] entries;
		private int count;
		private int version;
		private int freeList;
		private int freeCount;
		private IEqualityComparer<TKey> comparer;
		private KeyCollection keys;
		private ValueCollection values;
		private object _syncRoot;
		private const string VersionName = "Version"; // Metadata: 0x001E13ED
		private const string HashSizeName = "HashSize"; // Metadata: 0x001E13F8
		private const string KeyValuePairsName = "KeyValuePairs"; // Metadata: 0x001E1404
		private const string ComparerName = "Comparer"; // Metadata: 0x001E1415
	
		// Properties
		public int Count { get; }
		public KeyCollection Keys { get; }
		ICollection<TKey> IDictionary<TKey,TValue>.Keys { get; }
		public ValueCollection Values { get; }
		public TValue this[TKey key] { get => default; set {} }
		bool ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
		ICollection IDictionary.Keys { get; }
		object IDictionary.this[object key] { get => default; set {} }
	
		// Nested types
		private struct Entry // TypeDefIndex: 1210
		{
			// Fields
			public int hashCode;
			public int next;
			public TKey key;
			public TValue value;
		}
	
		[Serializable]
		public struct Enumerator : IEnumerator<KeyValuePair<TKey, TValue>>, IDictionaryEnumerator // TypeDefIndex: 1211
		{
			// Fields
			private Dictionary<TKey, TValue> dictionary;
			private int version;
			private int index;
			private KeyValuePair<TKey, TValue> current;
			private int getEnumeratorRetType;
	
			// Properties
			public KeyValuePair<TKey, TValue> Current { get; }
			object IEnumerator.Current { get; }
			DictionaryEntry IDictionaryEnumerator.Entry { get; }
			object IDictionaryEnumerator.Key { get; }
			object IDictionaryEnumerator.Value { get; }
	
			// Constructors
			internal Enumerator(Dictionary<TKey, TValue> dictionary, int getEnumeratorRetType);
	
			// Methods
			public bool MoveNext();
			public void Dispose();
			void IEnumerator.Reset();
		}
	
		[Serializable]
		[DebuggerDisplay] // 0x004B7EEC-0x004B7F74
		[DebuggerTypeProxy] // 0x004B7EEC-0x004B7F74
		public sealed class KeyCollection : ICollection<TKey>, ICollection, IReadOnlyCollection<TKey> // TypeDefIndex: 1212
		{
			// Fields
			private Dictionary<TKey, TValue> dictionary;
	
			// Properties
			public int Count { get; }
			bool ICollection<TKey>.IsReadOnly { get; }
	
			// Nested types
			[Serializable]
			public struct Enumerator : IEnumerator<TKey> // TypeDefIndex: 1213
			{
				// Fields
				private Dictionary<TKey, TValue> dictionary;
				private int index;
				private int version;
				private TKey currentKey;
	
				// Properties
				public TKey Current { get; }
				object IEnumerator.Current { get; }
	
				// Constructors
				internal Enumerator(Dictionary<TKey, TValue> dictionary);
	
				// Methods
				public void Dispose();
				public bool MoveNext();
				void IEnumerator.Reset();
			}
	
			// Constructors
			public KeyCollection(Dictionary<TKey, TValue> dictionary);
	
			// Methods
			public Enumerator GetEnumerator();
			public void CopyTo(TKey[] array, int index);
			void ICollection<TKey>.Add(TKey item);
			void ICollection<TKey>.Clear();
			bool ICollection<TKey>.Contains(TKey item);
			bool ICollection<TKey>.Remove(TKey item);
			IEnumerator<TKey> IEnumerable<TKey>.GetEnumerator();
			IEnumerator IEnumerable.GetEnumerator();
			void ICollection.CopyTo(Array array, int index);
		}
	
		[Serializable]
		[DebuggerDisplay] // 0x004B7F74-0x004B7FFC
		[DebuggerTypeProxy] // 0x004B7F74-0x004B7FFC
		public sealed class ValueCollection : ICollection<TValue>, ICollection, IReadOnlyCollection<TValue> // TypeDefIndex: 1214
		{
			// Fields
			private Dictionary<TKey, TValue> dictionary;
	
			// Properties
			public int Count { get; }
			bool ICollection<TValue>.IsReadOnly { get; }
	
			// Nested types
			[Serializable]
			public struct Enumerator : IEnumerator<TValue> // TypeDefIndex: 1215
			{
				// Fields
				private Dictionary<TKey, TValue> dictionary;
				private int index;
				private int version;
				private TValue currentValue;
	
				// Properties
				public TValue Current { get; }
				object IEnumerator.Current { get; }
	
				// Constructors
				internal Enumerator(Dictionary<TKey, TValue> dictionary);
	
				// Methods
				public void Dispose();
				public bool MoveNext();
				void IEnumerator.Reset();
			}
	
			// Constructors
			public ValueCollection(Dictionary<TKey, TValue> dictionary);
	
			// Methods
			public Enumerator GetEnumerator();
			public void CopyTo(TValue[] array, int index);
			void ICollection<TValue>.Add(TValue item);
			bool ICollection<TValue>.Remove(TValue item);
			void ICollection<TValue>.Clear();
			bool ICollection<TValue>.Contains(TValue item);
			IEnumerator<TValue> IEnumerable<TValue>.GetEnumerator();
			IEnumerator IEnumerable.GetEnumerator();
			void ICollection.CopyTo(Array array, int index);
		}
	
		// Constructors
		public Dictionary();
		public Dictionary(int capacity);
		public Dictionary(IEqualityComparer<TKey> comparer);
		public Dictionary(int capacity, IEqualityComparer<TKey> comparer);
		public Dictionary(IDictionary<TKey, TValue> dictionary);
		public Dictionary(IDictionary<TKey, TValue> dictionary, IEqualityComparer<TKey> comparer);
		protected Dictionary(SerializationInfo info, StreamingContext context);
	
		// Methods
		public void Add(TKey key, TValue value);
		void ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue> keyValuePair);
		bool ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue> keyValuePair);
		bool ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue> keyValuePair);
		public void Clear();
		public bool ContainsKey(TKey key);
		public bool ContainsValue(TValue value);
		private void CopyTo(KeyValuePair<TKey, TValue>[] array, int index);
		public Enumerator GetEnumerator();
		IEnumerator<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator();
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
		private int FindEntry(TKey key);
		private void Initialize(int capacity);
		private bool TryInsert(TKey key, TValue value, InsertionBehavior behavior);
		public virtual void OnDeserialization(object sender);
		private void Resize();
		private void Resize(int newSize, bool forceNewHashCodes);
		public bool Remove(TKey key);
		public bool TryGetValue(TKey key, out TValue value);
		void ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[] array, int index);
		void ICollection.CopyTo(Array array, int index);
		IEnumerator IEnumerable.GetEnumerator();
		private static bool IsCompatibleKey(object key);
		IDictionaryEnumerator IDictionary.GetEnumerator();
	}

	internal class DictionaryHashHelpers // TypeDefIndex: 1216
	{
		// Fields
		[CompilerGenerated] // 0x004B9B04-0x004B9B14
		private static readonly ConditionalWeakTable<object, SerializationInfo> _SerializationInfoTable_k__BackingField; // 0x00
	
		// Properties
		internal static ConditionalWeakTable<object, SerializationInfo> SerializationInfoTable { [CompilerGenerated] /* 0x004BCC94-0x004BCCA4 */ get; } // 0x00C1A2D0-0x00C1A338 
	
		// Constructors
		static DictionaryHashHelpers(); // 0x00C1A338-0x00C1A3AC
	}

	internal sealed class IDictionaryDebugView<K, V> // TypeDefIndex: 1217
	{
	}

	internal sealed class DictionaryKeyCollectionDebugView<TKey, TValue> // TypeDefIndex: 1218
	{
	}

	internal sealed class DictionaryValueCollectionDebugView<TKey, TValue> // TypeDefIndex: 1219
	{
	}

	[Serializable]
	internal sealed class NonRandomizedStringEqualityComparer : EqualityComparer<string> // TypeDefIndex: 1220
	{
		// Constructors
		public NonRandomizedStringEqualityComparer(); // 0x00C1A658-0x00C1A6A8
	
		// Methods
		public sealed override bool Equals(string x, string y); // 0x00C1A630-0x00C1A640
		public sealed override int GetHashCode(string obj); // 0x00C1A640-0x00C1A658
	}

	internal sealed class ObjectEqualityComparer : IEqualityComparer // TypeDefIndex: 1221
	{
		// Fields
		internal static readonly ObjectEqualityComparer Default; // 0x00
	
		// Constructors
		private ObjectEqualityComparer(); // 0x00C1A6A8-0x00C1A6B0
		static ObjectEqualityComparer(); // 0x00C1A700-0x00C1A764
	
		// Methods
		int IEqualityComparer.GetHashCode(object obj); // 0x00C1A6B0-0x00C1A6D0
		bool IEqualityComparer.Equals(object x, object y); // 0x00C1A6D0-0x00C1A700
	}

	[Serializable]
	[TypeDependency] // 0x004B7FFC-0x004B8034
	public abstract class Comparer<T> : IComparer, IComparer<T> // TypeDefIndex: 1222
	{
		// Fields
		private static Comparer<T> defaultComparer;
	
		// Properties
		public static Comparer<T> Default { get; }
	
		// Constructors
		protected Comparer();
	
		// Methods
		private static Comparer<T> CreateComparer();
		public abstract int Compare(T x, T y);
		int IComparer.Compare(object x, object y);
	}

	[Serializable]
	internal class GenericComparer<T> : Comparer<T> // TypeDefIndex: 1223
		where T : IComparable<T>
	{
		// Constructors
		public GenericComparer();
	
		// Methods
		public override int Compare(T x, T y);
		public override bool Equals(object obj);
		public override int GetHashCode();
	}

	[Serializable]
	internal class NullableComparer<T> : Comparer<T?> // TypeDefIndex: 1224
		where T : struct, IComparable<T>
	{
		// Constructors
		public NullableComparer();
	
		// Methods
		public override int Compare(T? x, T? y);
		public override bool Equals(object obj);
		public override int GetHashCode();
	}

	[Serializable]
	internal class ObjectComparer<T> : Comparer<T> // TypeDefIndex: 1225
	{
		// Constructors
		public ObjectComparer();
	
		// Methods
		public override int Compare(T x, T y);
		public override bool Equals(object obj);
		public override int GetHashCode();
	}

	internal sealed class Mscorlib_CollectionDebugView<T> // TypeDefIndex: 1226
	{
	}

	[Serializable]
	[TypeDependency] // 0x004B8034-0x004B806C
	public abstract class EqualityComparer<T> : IEqualityComparer, IEqualityComparer<T> // TypeDefIndex: 1227
	{
		// Fields
		private static EqualityComparer<T> defaultComparer;
	
		// Properties
		public static EqualityComparer<T> Default { get; }
	
		// Constructors
		protected EqualityComparer();
	
		// Methods
		private static EqualityComparer<T> CreateComparer();
		public abstract bool Equals(T x, T y);
		public abstract int GetHashCode(T obj);
		internal virtual int IndexOf(T[] array, T value, int startIndex, int count);
		internal virtual int LastIndexOf(T[] array, T value, int startIndex, int count);
		int IEqualityComparer.GetHashCode(object obj);
		bool IEqualityComparer.Equals(object x, object y);
	}

	[Serializable]
	internal class GenericEqualityComparer<T> : EqualityComparer<T> // TypeDefIndex: 1228
		where T : IEquatable<T>
	{
		// Constructors
		public GenericEqualityComparer();
	
		// Methods
		public override bool Equals(T x, T y);
		public override int GetHashCode(T obj);
		internal override int IndexOf(T[] array, T value, int startIndex, int count);
		internal override int LastIndexOf(T[] array, T value, int startIndex, int count);
		public override bool Equals(object obj);
		public override int GetHashCode();
	}

	[Serializable]
	internal class NullableEqualityComparer<T> : EqualityComparer<T?> // TypeDefIndex: 1229
		where T : struct, IEquatable<T>
	{
		// Constructors
		public NullableEqualityComparer();
	
		// Methods
		public override bool Equals(T? x, T? y);
		public override int GetHashCode(T? obj);
		internal override int IndexOf(T?[] array, T? value, int startIndex, int count);
		internal override int LastIndexOf(T?[] array, T? value, int startIndex, int count);
		public override bool Equals(object obj);
		public override int GetHashCode();
	}

	[Serializable]
	internal class ObjectEqualityComparer<T> : EqualityComparer<T> // TypeDefIndex: 1230
	{
		// Constructors
		public ObjectEqualityComparer();
	
		// Methods
		public override bool Equals(T x, T y);
		public override int GetHashCode(T obj);
		internal override int IndexOf(T[] array, T value, int startIndex, int count);
		internal override int LastIndexOf(T[] array, T value, int startIndex, int count);
		public override bool Equals(object obj);
		public override int GetHashCode();
	}

	[Serializable]
	internal class ByteEqualityComparer : EqualityComparer<byte> // TypeDefIndex: 1231
	{
		// Constructors
		public ByteEqualityComparer(); // 0x00C1A280-0x00C1A2D0
	
		// Methods
		public override bool Equals(byte x, byte y); // 0x00C19F80-0x00C19F90
		public override int GetHashCode(byte b); // 0x00C19F90-0x00C19F98
		internal override int IndexOf(byte[] array, byte value, int startIndex, int count); // 0x00C19F98-0x00C1A15C
		internal override int LastIndexOf(byte[] array, byte value, int startIndex, int count); // 0x00C1A15C-0x00C1A1C8
		public override bool Equals(object obj); // 0x00C1A1C8-0x00C1A248
		public override int GetHashCode(); // 0x00C1A248-0x00C1A280
	}

	[Serializable]
	internal class EnumEqualityComparer<T> : EqualityComparer<T>, ISerializable // TypeDefIndex: 1232
		where T : struct
	{
		// Constructors
		public EnumEqualityComparer();
		protected EnumEqualityComparer(SerializationInfo information, StreamingContext context);
	
		// Methods
		public override bool Equals(T x, T y);
		public override int GetHashCode(T obj);
		public void GetObjectData(SerializationInfo info, StreamingContext context);
		public override bool Equals(object obj);
		public override int GetHashCode();
	}

	[Serializable]
	internal sealed class SByteEnumEqualityComparer<T> : EnumEqualityComparer<T>, ISerializable // TypeDefIndex: 1233
		where T : struct
	{
		// Constructors
		public SByteEnumEqualityComparer();
		public SByteEnumEqualityComparer(SerializationInfo information, StreamingContext context);
	
		// Methods
		public override int GetHashCode(T obj);
	}

	[Serializable]
	internal sealed class ShortEnumEqualityComparer<T> : EnumEqualityComparer<T>, ISerializable // TypeDefIndex: 1234
		where T : struct
	{
		// Constructors
		public ShortEnumEqualityComparer();
		public ShortEnumEqualityComparer(SerializationInfo information, StreamingContext context);
	
		// Methods
		public override int GetHashCode(T obj);
	}

	[Serializable]
	internal sealed class LongEnumEqualityComparer<T> : EqualityComparer<T>, ISerializable // TypeDefIndex: 1235
		where T : struct
	{
		// Constructors
		public LongEnumEqualityComparer();
		public LongEnumEqualityComparer(SerializationInfo information, StreamingContext context);
	
		// Methods
		public override bool Equals(T x, T y);
		public override int GetHashCode(T obj);
		public override bool Equals(object obj);
		public override int GetHashCode();
		public void GetObjectData(SerializationInfo info, StreamingContext context);
	}

	[Serializable]
	internal sealed class InternalStringComparer : EqualityComparer<string> // TypeDefIndex: 1236
	{
		// Constructors
		public InternalStringComparer(); // 0x00C1A464-0x00C1A4B4
	
		// Methods
		public override int GetHashCode(string obj); // 0x00C1A3AC-0x00C1A3CC
		public override bool Equals(string x, string y); // 0x00C1A3CC-0x00C1A3FC
		internal override int IndexOf(string[] array, string value, int startIndex, int count); // 0x00C1A3FC-0x00C1A464
	}

	[TypeDependency] // 0x004B806C-0x004B80A4
	public interface ICollection<T> : IEnumerable<T> // TypeDefIndex: 1237
	{
		// Properties
		int Count { get; }
		bool IsReadOnly { get; }
	
		// Methods
		void Add(T item);
		void Clear();
		bool Contains(T item);
		void CopyTo(T[] array, int arrayIndex);
		bool Remove(T item);
	}

	public interface IComparer<in T> // TypeDefIndex: 1238
	{
		// Methods
		int Compare(T x, T y);
	}

	public interface IDictionary<TKey, TValue> : ICollection<KeyValuePair<TKey, TValue>> // TypeDefIndex: 1239
	{
		// Properties
		TValue this[TKey key] { get => default; set {} }
		ICollection<TKey> Keys { get; }
	
		// Methods
		bool ContainsKey(TKey key);
		void Add(TKey key, TValue value);
		bool TryGetValue(TKey key, out TValue value);
	}

	[TypeDependency] // 0x004B80DC-0x004B8114
	public interface IEnumerable<out T> : IEnumerable // TypeDefIndex: 1240
	{
		// Methods
		IEnumerator<T> GetEnumerator();
	}

	public interface IEnumerator<out T> : IDisposable, IEnumerator // TypeDefIndex: 1241
	{
		// Properties
		T Current { get; }
	}

	public interface IEqualityComparer<in T> // TypeDefIndex: 1242
	{
		// Methods
		bool Equals(T x, T y);
		int GetHashCode(T obj);
	}

	[TypeDependency] // 0x004B8114-0x004B8174
	public interface IList<T> : ICollection<T> // TypeDefIndex: 1243
	{
		// Properties
		T this[int index] { get => default; set {} }
	
		// Methods
		int IndexOf(T item);
		void Insert(int index, T item);
		void RemoveAt(int index);
	}

	[TypeDependency] // 0x004B8174-0x004B81AC
	public interface IReadOnlyCollection<out T> : IEnumerable<T> // TypeDefIndex: 1244
	{
		// Properties
		int Count { get; }
	}

	[DefaultMember] // 0x004B81AC-0x004B81E4
	public interface IReadOnlyDictionary<TKey, TValue> : IReadOnlyCollection<KeyValuePair<TKey, TValue>> // TypeDefIndex: 1245
	{
		// Methods
		bool TryGetValue(TKey key, out TValue value);
	}

	[TypeDependency] // 0x004B81E4-0x004B8244
	public interface IReadOnlyList<out T> : IReadOnlyCollection<T> // TypeDefIndex: 1246
	{
		// Properties
		T this[int index] { get => default; }
	}

	[Serializable]
	[ComVisible] // 0x004B8244-0x004B8258
	public class KeyNotFoundException : SystemException, ISerializable // TypeDefIndex: 1247
	{
		// Constructors
		public KeyNotFoundException(); // 0x00C1A4B4-0x00C1A528
		public KeyNotFoundException(string message); // 0x00C1A528-0x00C1A55C
		protected KeyNotFoundException(SerializationInfo info, StreamingContext context); // 0x00C1A55C-0x00C1A564
	}

	[Serializable]
	[DebuggerDisplay] // 0x004B8258-0x004B8304
	[DebuggerTypeProxy] // 0x004B8258-0x004B8304
	public class List<T> : IList<T>, IList, IReadOnlyList<T> // TypeDefIndex: 1248
	{
		// Fields
		private const int _defaultCapacity = 4; // Metadata: 0x001E1421
		private T[] _items;
		private int _size;
		private int _version;
		[NonSerialized]
		private object _syncRoot;
		private static readonly T[] _emptyArray;
	
		// Properties
		public int Capacity { get; set; }
		public int Count { get; }
		bool ICollection<T>.IsReadOnly { get; }
		bool IList.IsReadOnly { get; }
		public T this[int index] { get => default; set {} }
		object IList.this[int index] { get => default; set {} }
	
		// Nested types
		[Serializable]
		public struct Enumerator : IEnumerator<T> // TypeDefIndex: 1249
		{
			// Fields
			private List<T> list;
			private int index;
			private int version;
			private T current;
	
			// Properties
			public T Current { get; }
			object IEnumerator.Current { get; }
	
			// Constructors
			internal Enumerator(List<T> list);
	
			// Methods
			public void Dispose();
			public bool MoveNext();
			private bool MoveNextRare();
			void IEnumerator.Reset();
		}
	
		// Constructors
		public List();
		public List(int capacity);
		public List(IEnumerable<T> collection);
		static List();
	
		// Methods
		private static bool IsCompatibleObject(object value);
		public void Add(T item);
		int IList.Add(object item);
		public void AddRange(IEnumerable<T> collection);
		public ReadOnlyCollection<T> AsReadOnly();
		public void Clear();
		public bool Contains(T item);
		bool IList.Contains(object item);
		public void CopyTo(T[] array);
		void ICollection.CopyTo(Array array, int arrayIndex);
		public void CopyTo(int index, T[] array, int arrayIndex, int count);
		public void CopyTo(T[] array, int arrayIndex);
		private void EnsureCapacity(int min);
		public bool Exists(Predicate<T> match);
		public T Find(Predicate<T> match);
		public List<T> FindAll(Predicate<T> match);
		public int FindIndex(Predicate<T> match);
		public int FindIndex(int startIndex, int count, Predicate<T> match);
		public Enumerator GetEnumerator();
		IEnumerator<T> IEnumerable<T>.GetEnumerator();
		IEnumerator IEnumerable.GetEnumerator();
		public int IndexOf(T item);
		int IList.IndexOf(object item);
		public void Insert(int index, T item);
		void IList.Insert(int index, object item);
		public void InsertRange(int index, IEnumerable<T> collection);
		public int LastIndexOf(T item);
		public int LastIndexOf(T item, int index, int count);
		public bool Remove(T item);
		void IList.Remove(object item);
		public int RemoveAll(Predicate<T> match);
		public void RemoveAt(int index);
		public void RemoveRange(int index, int count);
		public void Reverse();
		public void Reverse(int index, int count);
		public void Sort();
		public void Sort(IComparer<T> comparer);
		public void Sort(int index, int count, IComparer<T> comparer);
		public void Sort(Comparison<T> comparison);
		public T[] ToArray();
	}
}

namespace System.Diagnostics
{
	[Serializable]
	[AttributeUsage] // 0x004B8304-0x004B8350
	[ComVisible] // 0x004B8304-0x004B8350
	public sealed class ConditionalAttribute : Attribute // TypeDefIndex: 1250
	{
		// Fields
		private string m_conditionString; // 0x10
	
		// Constructors
		public ConditionalAttribute(string conditionString); // 0x0079423C-0x00794268
	}

	[Serializable]
	[AttributeUsage] // 0x004B8350-0x004B839C
	[ComVisible] // 0x004B8350-0x004B839C
	public sealed class DebuggerStepThroughAttribute : Attribute // TypeDefIndex: 1251
	{
		// Constructors
		public DebuggerStepThroughAttribute(); // 0x00794480-0x00794488
	}

	[Serializable]
	[AttributeUsage] // 0x004B839C-0x004B83E8
	[ComVisible] // 0x004B839C-0x004B83E8
	public sealed class DebuggerHiddenAttribute : Attribute // TypeDefIndex: 1252
	{
		// Constructors
		public DebuggerHiddenAttribute(); // 0x00794470-0x00794478
	}

	[Serializable]
	[AttributeUsage] // 0x004B83E8-0x004B8434
	[ComVisible] // 0x004B83E8-0x004B8434
	public sealed class DebuggerNonUserCodeAttribute : Attribute // TypeDefIndex: 1253
	{
		// Constructors
		public DebuggerNonUserCodeAttribute(); // 0x00794478-0x00794480
	}

	[AttributeUsage] // 0x004B8434-0x004B8480
	[ComVisible] // 0x004B8434-0x004B8480
	public sealed class DebuggableAttribute : Attribute // TypeDefIndex: 1254
	{
		// Fields
		private DebuggingModes m_debuggingModes; // 0x10
	
		// Nested types
		[ComVisible] // 0x004B8480-0x004B84BC
		[Flags] // 0x004B8480-0x004B84BC
		public enum DebuggingModes // TypeDefIndex: 1255
		{
			None = 0,
			Default = 1,
			IgnoreSymbolStoreSequencePoints = 2,
			EnableEditAndContinue = 4,
			DisableOptimizations = 256
		}
	
		// Constructors
		public DebuggableAttribute(DebuggingModes modes); // 0x00794268-0x00794294
	}

	[ComVisible] // 0x004B84BC-0x004B84D0
	public enum DebuggerBrowsableState // TypeDefIndex: 1256
	{
		Never = 0,
		Collapsed = 2,
		RootHidden = 3
	}

	[AttributeUsage] // 0x004B84D0-0x004B851C
	[ComVisible] // 0x004B84D0-0x004B851C
	public sealed class DebuggerBrowsableAttribute : Attribute // TypeDefIndex: 1257
	{
		// Fields
		private DebuggerBrowsableState state; // 0x10
	
		// Constructors
		public DebuggerBrowsableAttribute(DebuggerBrowsableState state); // 0x00794358-0x007943FC
	}

	[AttributeUsage] // 0x004B851C-0x004B8568
	[ComVisible] // 0x004B851C-0x004B8568
	public sealed class DebuggerTypeProxyAttribute : Attribute // TypeDefIndex: 1258
	{
		// Fields
		private string typeName; // 0x10
	
		// Constructors
		public DebuggerTypeProxyAttribute(Type type); // 0x00794488-0x00794578
	}

	[AttributeUsage] // 0x004B8568-0x004B85B4
	[ComVisible] // 0x004B8568-0x004B85B4
	public sealed class DebuggerDisplayAttribute : Attribute // TypeDefIndex: 1259
	{
		// Fields
		private string name; // 0x10
		private string value; // 0x18
		private string type; // 0x20
	
		// Constructors
		public DebuggerDisplayAttribute(string value); // 0x007943FC-0x00794470
	}

	[ComVisible] // 0x004B85B4-0x004B8604
	[MonoTODO] // 0x004B85B4-0x004B8604
	public sealed class Debugger // TypeDefIndex: 1260
	{
		// Fields
		public static readonly string DefaultCategory; // 0x00
	
		// Properties
		public static bool IsAttached { get; } // 0x00794294-0x007942F0 
	
		// Constructors
		static Debugger(); // 0x007942FC-0x00794358
	
		// Methods
		private static bool IsAttached_internal(); // 0x007942F0-0x007942F4
		public static void Log(int level, string category, string message); // 0x007942F4-0x007942F8
		public static void NotifyOfCrossThreadDependency(); // 0x007942F8-0x007942FC
	}

	[Serializable]
	[ComVisible] // 0x004B8604-0x004B8654
	[MonoTODO] // 0x004B8604-0x004B8654
	public class StackFrame // TypeDefIndex: 1261
	{
		// Fields
		public const int OFFSET_UNKNOWN = -1; // Metadata: 0x001E1445
		private int ilOffset; // 0x10
		private int nativeOffset; // 0x14
		private long methodAddress; // 0x18
		private uint methodIndex; // 0x20
		private MethodBase methodBase; // 0x28
		private string fileName; // 0x30
		private int lineNumber; // 0x38
		private int columnNumber; // 0x3C
		private string internalMethodName; // 0x40
	
		// Constructors
		public StackFrame(); // 0x00794580-0x007945DC
		public StackFrame(int skipFrames, bool fNeedFileInfo); // 0x007945DC-0x00794648
	
		// Methods
		private static bool get_frame_info(int skip, bool needFileInfo, out MethodBase method, out int iloffset, out int native_offset, out string file, out int line, out int column); // 0x00794578-0x00794580
		public virtual int GetFileLineNumber(); // 0x00794648-0x00794650
		public virtual string GetFileName(); // 0x00794650-0x00794658
		internal string GetSecureFileName(); // 0x00794658-0x00794734
		public virtual int GetILOffset(); // 0x00794734-0x0079473C
		public virtual MethodBase GetMethod(); // 0x0079473C-0x00794744
		public virtual int GetNativeOffset(); // 0x00794744-0x0079474C
		internal long GetMethodAddress(); // 0x0079474C-0x00794754
		internal uint GetMethodIndex(); // 0x00794754-0x0079475C
		internal string GetInternalMethodName(); // 0x0079475C-0x00794764
		public override string ToString(); // 0x00794764-0x0079495C
	}

	[Serializable]
	[ComVisible] // 0x004B8654-0x004B86A4
	[MonoTODO] // 0x004B8654-0x004B86A4
	public class StackTrace // TypeDefIndex: 1262
	{
		// Fields
		public const int METHODS_TO_SKIP = 0; // Metadata: 0x001E1449
		private StackFrame[] frames; // 0x10
		private readonly StackTrace[] captured_traces; // 0x18
		private bool debug_info; // 0x20
		private static bool isAotidSet; // 0x00
		private static string aotid; // 0x08
	
		// Properties
		public virtual int FrameCount { get; } // 0x00794CB4-0x00794CCC 
	
		// Nested types
		internal enum TraceFormat // TypeDefIndex: 1263
		{
			Normal = 0,
			TrailingNewLine = 1,
			NoResourceLookup = 2
		}
	
		// Constructors
		public StackTrace(); // 0x0079495C-0x0079498C
		public StackTrace(bool fNeedFileInfo); // 0x00794B28-0x00794B5C
		public StackTrace(int skipFrames, bool fNeedFileInfo); // 0x00794B5C-0x00794B9C
		public StackTrace(Exception e, bool fNeedFileInfo); // 0x00794BA4-0x00794BB0
		public StackTrace(Exception e, int skipFrames, bool fNeedFileInfo); // 0x00794BB0-0x00794CB4
	
		// Methods
		private void init_frames(int skipFrames, bool fNeedFileInfo); // 0x0079498C-0x00794B28
		private static StackFrame[] get_trace(Exception e, int skipFrames, bool fNeedFileInfo); // 0x00794B9C-0x00794BA4
		public virtual StackFrame GetFrame(int index); // 0x00794CCC-0x00794D44
		private static string GetAotId(); // 0x00794D44-0x00794E18
		private bool AddFrames(StringBuilder sb); // 0x00794E18-0x007952B0
		internal void GetFullNameForStackTrace(StringBuilder sb, MethodBase mi); // 0x007952B0-0x007956E0
		public override string ToString(); // 0x007956E0-0x00795818
		internal string ToString(TraceFormat traceFormat); // 0x00795818-0x00795824
	}
}

namespace System.Diagnostics.Contracts
{
	public static class Contract // TypeDefIndex: 1264
	{
		// Methods
		[ReliabilityContract] // 0x004BCCA4-0x004BCCBC
		public static bool ForAll<T>(IEnumerable<T> collection, Predicate<T> predicate);
	}
}

namespace System.Diagnostics.Tracing
{
	internal sealed class ArrayTypeInfo<ElementType> : TraceLoggingTypeInfo<ElementType[]> // TypeDefIndex: 1265
	{
		// Fields
		private readonly TraceLoggingTypeInfo<ElementType> elementInfo;
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format);
		public override void WriteData(TraceLoggingDataCollector collector, ref ElementType[] value);
		public override object GetData(object value);
	}

	internal struct ConcurrentSet<KeyType, ItemType> // TypeDefIndex: 1266
		where ItemType : ConcurrentSetItem<KeyType, ItemType>
	{
		// Fields
		private ItemType[] items;
	
		// Methods
		public ItemType TryGet(KeyType key);
		public ItemType GetOrAdd(ItemType newItem);
	}

	internal abstract class ConcurrentSetItem<KeyType, ItemType> // TypeDefIndex: 1267
		where ItemType : ConcurrentSetItem<KeyType, ItemType>
	{
		// Constructors
		protected ConcurrentSetItem();
	
		// Methods
		public abstract int Compare(ItemType other);
		public abstract int Compare(KeyType key);
	}

	internal struct DataCollector // TypeDefIndex: 1268
	{
		// Fields
		[ThreadStatic] // 0x004B9B14-0x004B9B24
		internal static DataCollector ThreadInstance; // 0x80000000
		private unsafe byte* scratchEnd; // 0x00
		private unsafe EventSource.EventData* datasEnd; // 0x08
		private unsafe GCHandle* pinsEnd; // 0x10
		private unsafe EventSource.EventData* datasStart; // 0x18
		private unsafe byte* scratch; // 0x20
		private unsafe EventSource.EventData* datas; // 0x28
		private unsafe GCHandle* pins; // 0x30
		private byte[] buffer; // 0x38
		private int bufferPos; // 0x40
		private int bufferNesting; // 0x44
		private bool writingScalars; // 0x48
	
		// Methods
		internal unsafe void Enable(byte* scratch, int scratchSize, EventSource.EventData* datas, int dataCount, GCHandle* pins, int pinCount); // 0x00580EBC-0x00580EE0
		internal void Disable(); // 0x00580EE0-0x00580EF0
		internal unsafe EventSource.EventData* Finish(); // 0x00580EF0-0x00580F18
		internal unsafe void AddScalar(void* value, int size); // 0x00580F18-0x00580F20
		internal void AddBinary(string value, int size); // 0x00580F20-0x00580F28
		internal void AddBinary(Array value, int size); // 0x00580F28-0x00580F34
		internal void AddArray(Array value, int length, int itemSize); // 0x00580F34-0x00580F3C
		internal int BeginBufferedArray(); // 0x00580F3C-0x00580F70
		internal void EndBufferedArray(int bookmark, int count); // 0x00580F70-0x00580F78
		internal void BeginBuffered(); // 0x00580F78-0x00580FA8
		internal void EndBuffered(); // 0x00580FA8-0x00580FB0
		private void EnsureBuffer(); // 0x00580FB0-0x00580FD4
		private void EnsureBuffer(int additionalSize); // 0x00580FD4-0x00580FFC
		private void GrowBuffer(int required); // 0x00580FFC-0x00581004
		private void PinArray(object value, int size); // 0x00581004-0x0058100C
		private void ScalarsBegin(); // 0x0058100C-0x00581014
		private void ScalarsEnd(); // 0x00581014-0x0058101C
	}

	internal struct EmptyStruct // TypeDefIndex: 1269
	{
	}

	internal static class EnumHelper<UnderlyingType> // TypeDefIndex: 1270
	{
		// Fields
		private static readonly MethodInfo IdentityInfo;
	
		// Nested types
		private delegate UnderlyingType Transformer<ValueType>(ValueType value); // TypeDefIndex: 1271; 0x00000000-0x00000000
	
		private static class Caster<ValueType> // TypeDefIndex: 1272
		{
			// Fields
			public static readonly Transformer<UnderlyingType, ValueType> Instance;
	
			// Constructors
			static Caster();
		}
	
		// Constructors
		static EnumHelper();
	
		// Methods
		public static UnderlyingType Cast<ValueType>(ValueType value);
	}

	internal sealed class EnumerableTypeInfo<IterableType, ElementType> : TraceLoggingTypeInfo<IterableType> // TypeDefIndex: 1273
		where IterableType : IEnumerable<ElementType>
	{
		// Fields
		private readonly TraceLoggingTypeInfo<ElementType> elementInfo;
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format);
		public override void WriteData(TraceLoggingDataCollector collector, ref IterableType value);
		public override object GetData(object value);
	}

	[AttributeUsage] // 0x004B86A4-0x004B86D8
	public class EventDataAttribute : Attribute // TypeDefIndex: 1274
	{
		// Fields
		private EventLevel level; // 0x10
		private EventOpcode opcode; // 0x14
		[CompilerGenerated] // 0x004B9B24-0x004B9B34
		private string _Name_k__BackingField; // 0x18
		[CompilerGenerated] // 0x004B9B34-0x004B9B44
		private EventKeywords _Keywords_k__BackingField; // 0x20
		[CompilerGenerated] // 0x004B9B44-0x004B9B54
		private EventTags _Tags_k__BackingField; // 0x28
	
		// Properties
		public string Name { [CompilerGenerated] /* 0x004BCCBC-0x004BCCCC */ get; } // 0x0079A410-0x0079A418 
		internal EventLevel Level { get; } // 0x0079A418-0x0079A420 
		internal EventOpcode Opcode { get; } // 0x0079A420-0x0079A428 
		internal EventKeywords Keywords { [CompilerGenerated] /* 0x004BCCCC-0x004BCCDC */ get; } // 0x0079A428-0x0079A430 
		internal EventTags Tags { [CompilerGenerated] /* 0x004BCCDC-0x004BCCEC */ get; } // 0x0079A430-0x0079A894 
	}

	[Flags] // 0x004B86D8-0x004B86E8
	public enum EventFieldTags // TypeDefIndex: 1275
	{
		None = 0
	}

	[AttributeUsage] // 0x004B86E8-0x004B86FC
	public class EventFieldAttribute : Attribute // TypeDefIndex: 1276
	{
		// Fields
		[CompilerGenerated] // 0x004B9B54-0x004B9B64
		private EventFieldTags _Tags_k__BackingField; // 0x10
		[CompilerGenerated] // 0x004B9B64-0x004B9B74
		private string _Name_k__BackingField; // 0x18
		[CompilerGenerated] // 0x004B9B74-0x004B9B84
		private EventFieldFormat _Format_k__BackingField; // 0x20
	
		// Properties
		public EventFieldTags Tags { [CompilerGenerated] /* 0x004BCCEC-0x004BCCFC */ get; } // 0x0079A8D4-0x0079A8DC 
		internal string Name { [CompilerGenerated] /* 0x004BCCFC-0x004BCD0C */ get; } // 0x0079A8DC-0x0079A8E4 
		public EventFieldFormat Format { [CompilerGenerated] /* 0x004BCD0C-0x004BCD1C */ get; } // 0x0079A8E4-0x0079A8EC 
	}

	public enum EventFieldFormat // TypeDefIndex: 1277
	{
		Default = 0,
		String = 2,
		Boolean = 3,
		Hexadecimal = 4,
		Xml = 11,
		Json = 12,
		HResult = 15
	}

	[AttributeUsage] // 0x004B86FC-0x004B8710
	public class EventIgnoreAttribute : Attribute // TypeDefIndex: 1278
	{
	}

	internal class EventPayload : IDictionary<string, object> // TypeDefIndex: 1279
	{
		// Fields
		private List<string> m_names; // 0x10
		private List<object> m_values; // 0x18
	
		// Properties
		public ICollection<string> Keys { get; } // 0x0079B44C-0x0079B454 
		public object this[string key] { get => default; set {} } // 0x0079B454-0x0079B614 0x0079B614-0x0079B678
		public int Count { get; } // 0x0079B950-0x0079B9A4 
		public bool IsReadOnly { get; } // 0x0079B9A4-0x0079B9AC 
	
		// Nested types
		[CompilerGenerated] // 0x004B8748-0x004B8758
		private sealed class _GetEnumerator_d__17 : IEnumerator<KeyValuePair<string, object>> // TypeDefIndex: 1280
		{
			// Fields
			private int __1__state; // 0x10
			private KeyValuePair<string, object> __2__current; // 0x18
			public EventPayload __4__this; // 0x28
			private int _i_5__1; // 0x30
	
			// Properties
			KeyValuePair<string, object> IEnumerator<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Current { [DebuggerHidden] /* 0x004BCDA0-0x004BCDB0 */ get; } // 0x0079BF30-0x0079BF3C 
			object IEnumerator.Current { [DebuggerHidden] /* 0x004BCDC0-0x004BCDD0 */ get; } // 0x0079BFA0-0x0079C004 
	
			// Constructors
			[DebuggerHidden] // 0x004BCD80-0x004BCD90
			public _GetEnumerator_d__17(int __1__state); // 0x0079BA20-0x0079BA4C
	
			// Methods
			[DebuggerHidden] // 0x004BCD90-0x004BCDA0
			void IDisposable.Dispose(); // 0x0079BD74-0x0079BD78
			private bool MoveNext(); // 0x0079BD78-0x0079BF30
			[DebuggerHidden] // 0x004BCDB0-0x004BCDC0
			void IEnumerator.Reset(); // 0x0079BF3C-0x0079BFA0
		}
	
		// Constructors
		internal EventPayload(List<string> payloadNames, List<object> payloadValues); // 0x0079B414-0x0079B44C
	
		// Methods
		public void Add(string key, object value); // 0x0079B678-0x0079B6DC
		public void Add(KeyValuePair<string, object> payloadEntry); // 0x0079B6DC-0x0079B740
		public void Clear(); // 0x0079B740-0x0079B7A4
		public bool Contains(KeyValuePair<string, object> entry); // 0x0079B7A4-0x0079B7F8
		public bool ContainsKey(string key); // 0x0079B7F8-0x0079B950
		[IteratorStateMachine] // 0x004BCD1C-0x004BCD80
		public IEnumerator<KeyValuePair<string, object>> GetEnumerator(); // 0x0079B9AC-0x0079BA20
		IEnumerator IEnumerable.GetEnumerator(); // 0x0079BA4C-0x0079BAF0
		public void CopyTo(KeyValuePair<string, object>[] payloadEntries, int count); // 0x0079BAF0-0x0079BB54
		public bool Remove(KeyValuePair<string, object> entry); // 0x0079BB54-0x0079BBB8
		public bool TryGetValue(string key, out object value); // 0x0079BBB8-0x0079BD74
	}

	public struct EventSourceOptions // TypeDefIndex: 1281
	{
		// Fields
		internal EventKeywords keywords; // 0x00
		internal EventTags tags; // 0x08
		internal EventActivityOptions activityOptions; // 0x0C
		internal byte level; // 0x10
		internal byte opcode; // 0x11
		internal byte valuesSet; // 0x12
	
		// Properties
		public EventLevel Level { set; } // 0x00581760-0x00581768
		public EventOpcode Opcode { set; } // 0x00581768-0x00581770
		public EventKeywords Keywords { set; } // 0x00581770-0x00581784
	}

	internal class FieldMetadata // TypeDefIndex: 1282
	{
		// Fields
		private readonly string name; // 0x10
		private readonly int nameSize; // 0x18
		private readonly EventFieldTags tags; // 0x1C
		private readonly byte[] custom; // 0x20
		private readonly ushort fixedCount; // 0x28
		private byte inType; // 0x2A
		private byte outType; // 0x2B
	
		// Constructors
		public FieldMetadata(string name, TraceLoggingDataType type, EventFieldTags tags, bool variableCount); // 0x00857BC4-0x00857BEC
		private FieldMetadata(string name, TraceLoggingDataType dataType, EventFieldTags tags, byte countFlags, ushort fixedCount = 0 /* Metadata: 0x001E1479 */, byte[] custom = null); // 0x00857BEC-0x00857DC4
	
		// Methods
		public void IncrementStructFieldCount(); // 0x00857E5C-0x00857F00
		public void Encode(ref int pos, byte[] metadata); // 0x00857F00-0x00858104
	}

	internal sealed class InvokeTypeInfo<ContainerType> : TraceLoggingTypeInfo<ContainerType> // TypeDefIndex: 1283
	{
		// Fields
		private readonly PropertyAnalysis[] properties;
		private readonly PropertyAccessor<ContainerType>[] accessors;
	
		// Constructors
		public InvokeTypeInfo(TypeAnalysis typeAnalysis);
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format);
		public override void WriteData(TraceLoggingDataCollector collector, ref ContainerType value);
		public override object GetData(object value);
		public override void WriteObjectData(TraceLoggingDataCollector collector, object valueObj);
	}

	internal sealed class NameInfo : ConcurrentSetItem<KeyValuePair<string, EventTags>, System.Diagnostics.Tracing.NameInfo> // TypeDefIndex: 1284
	{
		// Fields
		private static int lastIdentity; // 0x00
		internal readonly string name; // 0x10
		internal readonly EventTags tags; // 0x18
		internal readonly int identity; // 0x1C
		internal readonly byte[] nameMetadata; // 0x20
	
		// Constructors
		public NameInfo(string name, EventTags tags, int typeMetadataSize); // 0x0085DDA0-0x0085DEC4
		static NameInfo(); // 0x0085E1A0-0x0085E1F4
	
		// Methods
		internal static void ReserveEventIDsBelow(int eventId); // 0x0085DCC8-0x0085DDA0
		public override int Compare(NameInfo other); // 0x0085E02C-0x0085E050
		public override int Compare(KeyValuePair<string, EventTags> key); // 0x0085E144-0x0085E1A0
		private int Compare(string otherName, EventTags otherTags); // 0x0085E050-0x0085E144
	}

	internal abstract class PropertyAccessor<ContainerType> // TypeDefIndex: 1285
	{
		// Constructors
		protected PropertyAccessor();
	
		// Methods
		public abstract void Write(TraceLoggingDataCollector collector, ref ContainerType value);
		public abstract object GetData(ContainerType value);
		public static PropertyAccessor<ContainerType> Create(PropertyAnalysis property);
	}

	internal class NonGenericProperytWriter<ContainerType> : PropertyAccessor<ContainerType> // TypeDefIndex: 1286
	{
		// Fields
		private readonly TraceLoggingTypeInfo typeInfo;
		private readonly MethodInfo getterInfo;
	
		// Constructors
		public NonGenericProperytWriter(PropertyAnalysis property);
	
		// Methods
		public override void Write(TraceLoggingDataCollector collector, ref ContainerType container);
		public override object GetData(ContainerType container);
	}

	internal class ClassPropertyWriter<ContainerType, ValueType> : PropertyAccessor<ContainerType> // TypeDefIndex: 1287
	{
		// Fields
		private readonly TraceLoggingTypeInfo<ValueType> valueTypeInfo;
		private readonly Getter getter;
	
		// Nested types
		private delegate ValueType Getter(ContainerType container); // TypeDefIndex: 1288; 0x00000000-0x00000000
	
		// Constructors
		public ClassPropertyWriter(PropertyAnalysis property);
	
		// Methods
		public override void Write(TraceLoggingDataCollector collector, ref ContainerType container);
		public override object GetData(ContainerType container);
	}

	internal sealed class PropertyAnalysis // TypeDefIndex: 1289
	{
		// Fields
		internal readonly string name; // 0x10
		internal readonly MethodInfo getterInfo; // 0x18
		internal readonly TraceLoggingTypeInfo typeInfo; // 0x20
		internal readonly EventFieldAttribute fieldAttribute; // 0x28
	
		// Constructors
		public PropertyAnalysis(string name, MethodInfo getterInfo, TraceLoggingTypeInfo typeInfo, EventFieldAttribute fieldAttribute); // 0x0085E1FC-0x0085E248
	}

	internal sealed class NullTypeInfo<DataType> : TraceLoggingTypeInfo<DataType> // TypeDefIndex: 1290
	{
		// Constructors
		public NullTypeInfo();
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format);
		public override void WriteData(TraceLoggingDataCollector collector, ref DataType value);
		public override object GetData(object value);
	}

	internal sealed class BooleanTypeInfo : TraceLoggingTypeInfo<bool> // TypeDefIndex: 1291
	{
		// Constructors
		public BooleanTypeInfo(); // 0x00798520-0x00798570
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x00798454-0x007984F0
		public override void WriteData(TraceLoggingDataCollector collector, ref bool value); // 0x007984F0-0x00798520
	}

	internal sealed class ByteTypeInfo : TraceLoggingTypeInfo<byte> // TypeDefIndex: 1292
	{
		// Constructors
		public ByteTypeInfo(); // 0x007987BC-0x0079880C
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x007986F8-0x00798794
		public override void WriteData(TraceLoggingDataCollector collector, ref byte value); // 0x00798794-0x007987BC
	}

	internal sealed class SByteTypeInfo : TraceLoggingTypeInfo<sbyte> // TypeDefIndex: 1293
	{
		// Constructors
		public SByteTypeInfo(); // 0x0085E57C-0x0085E5EC
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x0085E46C-0x0085E500
		public override void WriteData(TraceLoggingDataCollector collector, ref sbyte value); // 0x0085E500-0x0085E51C
	}

	internal sealed class Int16TypeInfo : TraceLoggingTypeInfo<short> // TypeDefIndex: 1294
	{
		// Constructors
		public Int16TypeInfo(); // 0x008589EC-0x00858A3C
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x008588DC-0x00858970
		public override void WriteData(TraceLoggingDataCollector collector, ref short value); // 0x00858970-0x0085898C
	}

	internal sealed class UInt16TypeInfo : TraceLoggingTypeInfo<ushort> // TypeDefIndex: 1295
	{
		// Constructors
		public UInt16TypeInfo(); // 0x00861AC4-0x00861B14
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x00861A14-0x00861AA8
		public override void WriteData(TraceLoggingDataCollector collector, ref ushort value); // 0x00861AA8-0x00861AC4
	}

	internal sealed class Int32TypeInfo : TraceLoggingTypeInfo<int> // TypeDefIndex: 1296
	{
		// Constructors
		public Int32TypeInfo(); // 0x00858D74-0x00858DC4
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x00858C64-0x00858CF8
		public override void WriteData(TraceLoggingDataCollector collector, ref int value); // 0x00858CF8-0x00858D14
	}

	internal sealed class UInt32TypeInfo : TraceLoggingTypeInfo<uint> // TypeDefIndex: 1297
	{
		// Constructors
		public UInt32TypeInfo(); // 0x00861CC4-0x00861D14
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x00861C14-0x00861CA8
		public override void WriteData(TraceLoggingDataCollector collector, ref uint value); // 0x00861CA8-0x00861CC4
	}

	internal sealed class Int64TypeInfo : TraceLoggingTypeInfo<long> // TypeDefIndex: 1298
	{
		// Constructors
		public Int64TypeInfo(); // 0x008590D4-0x00859124
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x00858FC4-0x00859058
		public override void WriteData(TraceLoggingDataCollector collector, ref long value); // 0x00859058-0x00859074
	}

	internal sealed class UInt64TypeInfo : TraceLoggingTypeInfo<ulong> // TypeDefIndex: 1299
	{
		// Constructors
		public UInt64TypeInfo(); // 0x00861EC4-0x00861F14
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x00861E14-0x00861EA8
		public override void WriteData(TraceLoggingDataCollector collector, ref ulong value); // 0x00861EA8-0x00861EC4
	}

	internal sealed class IntPtrTypeInfo : TraceLoggingTypeInfo<IntPtr> // TypeDefIndex: 1300
	{
		// Constructors
		public IntPtrTypeInfo(); // 0x0085948C-0x008594DC
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x00859364-0x00859400
		public override void WriteData(TraceLoggingDataCollector collector, ref IntPtr value); // 0x00859400-0x0085941C
	}

	internal sealed class UIntPtrTypeInfo : TraceLoggingTypeInfo<UIntPtr> // TypeDefIndex: 1301
	{
		// Constructors
		public UIntPtrTypeInfo(); // 0x008620D4-0x00862124
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x0086201C-0x008620B8
		public override void WriteData(TraceLoggingDataCollector collector, ref UIntPtr value); // 0x008620B8-0x008620D4
	}

	internal sealed class DoubleTypeInfo : TraceLoggingTypeInfo<double> // TypeDefIndex: 1302
	{
		// Constructors
		public DoubleTypeInfo(); // 0x00799A58-0x00799AA8
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x00799998-0x00799A34
		public override void WriteData(TraceLoggingDataCollector collector, ref double value); // 0x00799A34-0x00799A58
	}

	internal sealed class SingleTypeInfo : TraceLoggingTypeInfo<float> // TypeDefIndex: 1303
	{
		// Constructors
		public SingleTypeInfo(); // 0x0085E8F4-0x0085E944
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x0085E7E4-0x0085E878
		public override void WriteData(TraceLoggingDataCollector collector, ref float value); // 0x0085E878-0x0085E894
	}

	internal sealed class CharTypeInfo : TraceLoggingTypeInfo<char> // TypeDefIndex: 1304
	{
		// Constructors
		public CharTypeInfo(); // 0x007989E4-0x00799410
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x00798920-0x007989BC
		public override void WriteData(TraceLoggingDataCollector collector, ref char value); // 0x007989BC-0x007989E4
	}

	internal sealed class BooleanArrayTypeInfo : TraceLoggingTypeInfo<bool[]> // TypeDefIndex: 1305
	{
		// Constructors
		public BooleanArrayTypeInfo(); // 0x00798404-0x00798454
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x00798340-0x007983DC
		public override void WriteData(TraceLoggingDataCollector collector, ref bool[] value); // 0x007983DC-0x00798404
	}

	internal sealed class ByteArrayTypeInfo : TraceLoggingTypeInfo<byte[]> // TypeDefIndex: 1306
	{
		// Constructors
		public ByteArrayTypeInfo(); // 0x007986A8-0x007986F8
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x00798570-0x00798680
		public override void WriteData(TraceLoggingDataCollector collector, ref byte[] value); // 0x00798680-0x007986A8
	}

	internal sealed class SByteArrayTypeInfo : TraceLoggingTypeInfo<sbyte[]> // TypeDefIndex: 1307
	{
		// Constructors
		public SByteArrayTypeInfo(); // 0x0085E41C-0x0085E46C
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x0085E248-0x0085E2DC
		public override void WriteData(TraceLoggingDataCollector collector, ref sbyte[] value); // 0x0085E38C-0x0085E3A8
	}

	internal sealed class Int16ArrayTypeInfo : TraceLoggingTypeInfo<short[]> // TypeDefIndex: 1308
	{
		// Constructors
		public Int16ArrayTypeInfo(); // 0x0085888C-0x008588DC
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x008586CC-0x00858760
		public override void WriteData(TraceLoggingDataCollector collector, ref short[] value); // 0x008587FC-0x00858818
	}

	internal sealed class UInt16ArrayTypeInfo : TraceLoggingTypeInfo<ushort[]> // TypeDefIndex: 1309
	{
		// Constructors
		public UInt16ArrayTypeInfo(); // 0x008619C4-0x00861A14
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x00861914-0x008619A8
		public override void WriteData(TraceLoggingDataCollector collector, ref ushort[] value); // 0x008619A8-0x008619C4
	}

	internal sealed class Int32ArrayTypeInfo : TraceLoggingTypeInfo<int[]> // TypeDefIndex: 1310
	{
		// Constructors
		public Int32ArrayTypeInfo(); // 0x00858C14-0x00858C64
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x00858A3C-0x00858AD0
		public override void WriteData(TraceLoggingDataCollector collector, ref int[] value); // 0x00858B84-0x00858BA0
	}

	internal sealed class UInt32ArrayTypeInfo : TraceLoggingTypeInfo<uint[]> // TypeDefIndex: 1311
	{
		// Constructors
		public UInt32ArrayTypeInfo(); // 0x00861BC4-0x00861C14
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x00861B14-0x00861BA8
		public override void WriteData(TraceLoggingDataCollector collector, ref uint[] value); // 0x00861BA8-0x00861BC4
	}

	internal sealed class Int64ArrayTypeInfo : TraceLoggingTypeInfo<long[]> // TypeDefIndex: 1312
	{
		// Constructors
		public Int64ArrayTypeInfo(); // 0x00858F74-0x00858FC4
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x00858DC4-0x00858E58
		public override void WriteData(TraceLoggingDataCollector collector, ref long[] value); // 0x00858EE4-0x00858F00
	}

	internal sealed class UInt64ArrayTypeInfo : TraceLoggingTypeInfo<ulong[]> // TypeDefIndex: 1313
	{
		// Constructors
		public UInt64ArrayTypeInfo(); // 0x00861DC4-0x00861E14
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x00861D14-0x00861DA8
		public override void WriteData(TraceLoggingDataCollector collector, ref ulong[] value); // 0x00861DA8-0x00861DC4
	}

	internal sealed class IntPtrArrayTypeInfo : TraceLoggingTypeInfo<IntPtr[]> // TypeDefIndex: 1314
	{
		// Constructors
		public IntPtrArrayTypeInfo(); // 0x00859314-0x00859364
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x00859124-0x008591C0
		public override void WriteData(TraceLoggingDataCollector collector, ref IntPtr[] value); // 0x00859264-0x00859280
	}

	internal sealed class UIntPtrArrayTypeInfo : TraceLoggingTypeInfo<UIntPtr[]> // TypeDefIndex: 1315
	{
		// Constructors
		public UIntPtrArrayTypeInfo(); // 0x00861FCC-0x0086201C
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x00861F14-0x00861FB0
		public override void WriteData(TraceLoggingDataCollector collector, ref UIntPtr[] value); // 0x00861FB0-0x00861FCC
	}

	internal sealed class CharArrayTypeInfo : TraceLoggingTypeInfo<char[]> // TypeDefIndex: 1316
	{
		// Constructors
		public CharArrayTypeInfo(); // 0x007988D0-0x00798920
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x0079880C-0x007988A8
		public override void WriteData(TraceLoggingDataCollector collector, ref char[] value); // 0x007988A8-0x007988D0
	}

	internal sealed class DoubleArrayTypeInfo : TraceLoggingTypeInfo<double[]> // TypeDefIndex: 1317
	{
		// Constructors
		public DoubleArrayTypeInfo(); // 0x00799948-0x00799998
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x00799884-0x00799920
		public override void WriteData(TraceLoggingDataCollector collector, ref double[] value); // 0x00799920-0x00799948
	}

	internal sealed class SingleArrayTypeInfo : TraceLoggingTypeInfo<float[]> // TypeDefIndex: 1318
	{
		// Constructors
		public SingleArrayTypeInfo(); // 0x0085E794-0x0085E7E4
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x0085E670-0x0085E704
		public override void WriteData(TraceLoggingDataCollector collector, ref float[] value); // 0x0085E704-0x0085E720
	}

	internal sealed class EnumByteTypeInfo<EnumType> : TraceLoggingTypeInfo<EnumType> // TypeDefIndex: 1319
	{
		// Constructors
		public EnumByteTypeInfo();
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format);
		public override void WriteData(TraceLoggingDataCollector collector, ref EnumType value);
		public override object GetData(object value);
	}

	internal sealed class EnumSByteTypeInfo<EnumType> : TraceLoggingTypeInfo<EnumType> // TypeDefIndex: 1320
	{
		// Constructors
		public EnumSByteTypeInfo();
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format);
		public override void WriteData(TraceLoggingDataCollector collector, ref EnumType value);
		public override object GetData(object value);
	}

	internal sealed class EnumInt16TypeInfo<EnumType> : TraceLoggingTypeInfo<EnumType> // TypeDefIndex: 1321
	{
		// Constructors
		public EnumInt16TypeInfo();
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format);
		public override void WriteData(TraceLoggingDataCollector collector, ref EnumType value);
		public override object GetData(object value);
	}

	internal sealed class EnumUInt16TypeInfo<EnumType> : TraceLoggingTypeInfo<EnumType> // TypeDefIndex: 1322
	{
		// Constructors
		public EnumUInt16TypeInfo();
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format);
		public override void WriteData(TraceLoggingDataCollector collector, ref EnumType value);
		public override object GetData(object value);
	}

	internal sealed class EnumInt32TypeInfo<EnumType> : TraceLoggingTypeInfo<EnumType> // TypeDefIndex: 1323
	{
		// Constructors
		public EnumInt32TypeInfo();
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format);
		public override void WriteData(TraceLoggingDataCollector collector, ref EnumType value);
		public override object GetData(object value);
	}

	internal sealed class EnumUInt32TypeInfo<EnumType> : TraceLoggingTypeInfo<EnumType> // TypeDefIndex: 1324
	{
		// Constructors
		public EnumUInt32TypeInfo();
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format);
		public override void WriteData(TraceLoggingDataCollector collector, ref EnumType value);
		public override object GetData(object value);
	}

	internal sealed class EnumInt64TypeInfo<EnumType> : TraceLoggingTypeInfo<EnumType> // TypeDefIndex: 1325
	{
		// Constructors
		public EnumInt64TypeInfo();
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format);
		public override void WriteData(TraceLoggingDataCollector collector, ref EnumType value);
		public override object GetData(object value);
	}

	internal sealed class EnumUInt64TypeInfo<EnumType> : TraceLoggingTypeInfo<EnumType> // TypeDefIndex: 1326
	{
		// Constructors
		public EnumUInt64TypeInfo();
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format);
		public override void WriteData(TraceLoggingDataCollector collector, ref EnumType value);
		public override object GetData(object value);
	}

	internal sealed class StringTypeInfo : TraceLoggingTypeInfo<string> // TypeDefIndex: 1327
	{
		// Constructors
		public StringTypeInfo(); // 0x0085F3FC-0x0085F44C
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x0085F178-0x0085F204
		public override void WriteData(TraceLoggingDataCollector collector, ref string value); // 0x0085F310-0x0085F32C
		public override object GetData(object value); // 0x0085F3A0-0x0085F3F4
	}

	internal sealed class GuidTypeInfo : TraceLoggingTypeInfo<Guid> // TypeDefIndex: 1328
	{
		// Constructors
		public GuidTypeInfo(); // 0x0085867C-0x008586CC
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x0085843C-0x008584C8
		public override void WriteData(TraceLoggingDataCollector collector, ref Guid value); // 0x008585F8-0x00858614
	}

	internal sealed class GuidArrayTypeInfo : TraceLoggingTypeInfo<Guid[]> // TypeDefIndex: 1329
	{
		// Constructors
		public GuidArrayTypeInfo(); // 0x008583EC-0x0085843C
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x00858168-0x008581F4
		public override void WriteData(TraceLoggingDataCollector collector, ref Guid[] value); // 0x0085835C-0x00858378
	}

	internal sealed class DateTimeTypeInfo : TraceLoggingTypeInfo<DateTime> // TypeDefIndex: 1330
	{
		// Constructors
		public DateTimeTypeInfo(); // 0x007996B8-0x00799708
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x007995BC-0x00799658
		public override void WriteData(TraceLoggingDataCollector collector, ref DateTime value); // 0x00799658-0x007996B8
	}

	internal sealed class DateTimeOffsetTypeInfo : TraceLoggingTypeInfo<DateTimeOffset> // TypeDefIndex: 1331
	{
		// Constructors
		public DateTimeOffsetTypeInfo(); // 0x0079956C-0x007995BC
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x00799410-0x007994EC
		public override void WriteData(TraceLoggingDataCollector collector, ref DateTimeOffset value); // 0x007994EC-0x0079956C
	}

	internal sealed class TimeSpanTypeInfo : TraceLoggingTypeInfo<TimeSpan> // TypeDefIndex: 1332
	{
		// Constructors
		public TimeSpanTypeInfo(); // 0x0085F4F4-0x0085F544
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x0085F44C-0x0085F4D8
		public override void WriteData(TraceLoggingDataCollector collector, ref TimeSpan value); // 0x0085F4D8-0x0085F4F4
	}

	internal sealed class DecimalTypeInfo : TraceLoggingTypeInfo<decimal> // TypeDefIndex: 1333
	{
		// Constructors
		public DecimalTypeInfo(); // 0x00799834-0x00799884
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format); // 0x00799708-0x007997A4
		public override void WriteData(TraceLoggingDataCollector collector, ref decimal value); // 0x007997A4-0x00799834
	}

	internal sealed class KeyValuePairTypeInfo<K, V> : TraceLoggingTypeInfo<KeyValuePair<K, V>> // TypeDefIndex: 1334
	{
		// Fields
		private readonly TraceLoggingTypeInfo<K> keyInfo;
		private readonly TraceLoggingTypeInfo<V> valueInfo;
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format);
		public override void WriteData(TraceLoggingDataCollector collector, ref KeyValuePair<K, V> value);
		public override object GetData(object value);
	}

	internal sealed class NullableTypeInfo<T> : TraceLoggingTypeInfo<T?> // TypeDefIndex: 1335
		where T : struct
	{
		// Fields
		private readonly TraceLoggingTypeInfo<T> valueInfo;
	
		// Methods
		public override void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format);
		public override void WriteData(TraceLoggingDataCollector collector, ref T? value);
	}

	internal static class Statics // TypeDefIndex: 1336
	{
		// Fields
		public static readonly TraceLoggingDataType IntPtrType; // 0x00
		public static readonly TraceLoggingDataType UIntPtrType; // 0x04
		public static readonly TraceLoggingDataType HexIntPtrType; // 0x08
	
		// Constructors
		static Statics(); // 0x0085F0CC-0x0085F178
	
		// Methods
		public static byte[] MetadataForString(string name, int prefixSize, int suffixSize, int additionalSize); // 0x0085DEC4-0x0085E02C
		public static void EncodeTags(int tags, ref int pos, byte[] metadata); // 0x00858104-0x00858168
		public static byte Combine(int settingValue, byte defaultValue); // 0x0085E944-0x0085E950
		public static int Combine(int settingValue1, int settingValue2); // 0x0085E950-0x0085E95C
		public static void CheckName(string name); // 0x00857DC4-0x00857E5C
		public static bool ShouldOverrideFieldName(string fieldName); // 0x0085E95C-0x0085E9A0
		public static TraceLoggingDataType MakeDataType(TraceLoggingDataType baseType, EventFieldFormat format); // 0x008581F4-0x00858200
		public static TraceLoggingDataType Format8(EventFieldFormat format, TraceLoggingDataType native); // 0x0085E2DC-0x0085E38C
		public static TraceLoggingDataType Format16(EventFieldFormat format, TraceLoggingDataType native); // 0x00858760-0x008587FC
		public static TraceLoggingDataType Format32(EventFieldFormat format, TraceLoggingDataType native); // 0x00858AD0-0x00858B84
		public static TraceLoggingDataType Format64(EventFieldFormat format, TraceLoggingDataType native); // 0x00858E58-0x00858EE4
		public static TraceLoggingDataType FormatPtr(EventFieldFormat format, TraceLoggingDataType native); // 0x008591C0-0x00859264
		public static object CreateInstance(Type type, params /* 0x004BD320-0x004BD330 */ object[] parameters); // 0x0085E9A0-0x0085E9A8
		public static bool IsValueType(Type type); // 0x0085E9A8-0x0085E9C0
		public static bool IsEnum(Type type); // 0x0085E9C0-0x0085E9E0
		public static IEnumerable<PropertyInfo> GetProperties(Type type); // 0x0085E9E0-0x0085E9F8
		public static MethodInfo GetGetMethod(PropertyInfo propInfo); // 0x0085E9F8-0x0085EA10
		public static MethodInfo GetDeclaredStaticMethod(Type declaringType, string name); // 0x0085EA10-0x0085EA2C
		public static bool HasCustomAttribute(PropertyInfo propInfo, Type attributeType); // 0x0085EA2C-0x0085EA64
		public static AttributeType GetCustomAttribute<AttributeType>(PropertyInfo propInfo)
			where AttributeType : Attribute;
		public static AttributeType GetCustomAttribute<AttributeType>(Type type)
			where AttributeType : Attribute;
		public static Type[] GetGenericArguments(Type type); // 0x0085EA64-0x0085EA84
		public static Type FindEnumerableElementType(Type type); // 0x0085EA84-0x0085ECC8
		public static bool IsGenericMatch(Type type, object openType); // 0x0085ECC8-0x0085EDD8
		public static Delegate CreateDelegate(Type delegateType, MethodInfo methodInfo); // 0x0085EDD8-0x0085EDE0
		public static TraceLoggingTypeInfo GetTypeInfoInstance(Type dataType, List<Type> recursionCheck); // 0x0085EDE0-0x0085F0CC
		public static TraceLoggingTypeInfo<DataType> CreateDefaultTypeInfo<DataType>(List<Type> recursionCheck);
	}

	internal class TraceLoggingDataCollector // TypeDefIndex: 1337
	{
		// Fields
		internal static readonly TraceLoggingDataCollector Instance; // 0x00
	
		// Constructors
		private TraceLoggingDataCollector(); // 0x0085F744-0x0085F74C
		static TraceLoggingDataCollector(); // 0x0085FF14-0x0085FF78
	
		// Methods
		public int BeginBufferedArray(); // 0x0085F74C-0x0085F79C
		public void EndBufferedArray(int bookmark, int count); // 0x0085F79C-0x0085F804
		public void AddScalar(bool value); // 0x0085F804-0x0085F868
		public void AddScalar(sbyte value); // 0x0085E51C-0x0085E57C
		public void AddScalar(byte value); // 0x0085F868-0x0085F8C8
		public void AddScalar(short value); // 0x0085898C-0x008589EC
		public void AddScalar(ushort value); // 0x0085F8C8-0x0085F928
		public void AddScalar(int value); // 0x00858D14-0x00858D74
		public void AddScalar(uint value); // 0x0085F928-0x0085F988
		public void AddScalar(long value); // 0x00859074-0x008590D4
		public void AddScalar(ulong value); // 0x0085F988-0x0085F9E8
		public void AddScalar(IntPtr value); // 0x0085941C-0x0085948C
		public void AddScalar(UIntPtr value); // 0x0085F9E8-0x0085FA78
		public void AddScalar(float value); // 0x0085E894-0x0085E8F4
		public void AddScalar(double value); // 0x0085FA78-0x0085FAD8
		public void AddScalar(char value); // 0x0085FAD8-0x0085FB38
		public void AddScalar(Guid value); // 0x00858614-0x0085867C
		public void AddBinary(string value); // 0x0085F32C-0x0085F3A0
		public void AddBinary(byte[] value); // 0x0085FB38-0x0085FBA8
		public void AddArray(bool[] value); // 0x0085FBA8-0x0085FC1C
		public void AddArray(sbyte[] value); // 0x0085E3A8-0x0085E41C
		public void AddArray(short[] value); // 0x00858818-0x0085888C
		public void AddArray(ushort[] value); // 0x0085FC1C-0x0085FC90
		public void AddArray(int[] value); // 0x00858BA0-0x00858C14
		public void AddArray(uint[] value); // 0x0085FC90-0x0085FD04
		public void AddArray(long[] value); // 0x00858F00-0x00858F74
		public void AddArray(ulong[] value); // 0x0085FD04-0x0085FD78
		public void AddArray(IntPtr[] value); // 0x00859280-0x00859314
		public void AddArray(UIntPtr[] value); // 0x0085FD78-0x0085FE2C
		public void AddArray(float[] value); // 0x0085E720-0x0085E794
		public void AddArray(double[] value); // 0x0085FE2C-0x0085FEA0
		public void AddArray(char[] value); // 0x0085FEA0-0x0085FF14
		public void AddArray(Guid[] value); // 0x00858378-0x008583EC
	}

	internal enum TraceLoggingDataType // TypeDefIndex: 1338
	{
		Nil = 0,
		Utf16String = 1,
		MbcsString = 2,
		Int8 = 3,
		UInt8 = 4,
		Int16 = 5,
		UInt16 = 6,
		Int32 = 7,
		UInt32 = 8,
		Int64 = 9,
		UInt64 = 10,
		Float = 11,
		Double = 12,
		Boolean32 = 13,
		Binary = 14,
		Guid = 15,
		FileTime = 17,
		SystemTime = 18,
		HexInt32 = 20,
		HexInt64 = 21,
		CountedUtf16String = 22,
		CountedMbcsString = 23,
		Struct = 24,
		Char8 = 516,
		Char16 = 518,
		Boolean8 = 772,
		HexInt8 = 1028,
		HexInt16 = 1030,
		Utf16Xml = 2817,
		MbcsXml = 2818,
		CountedUtf16Xml = 2838,
		CountedMbcsXml = 2839,
		Utf16Json = 3073,
		MbcsJson = 3074,
		CountedUtf16Json = 3094,
		CountedMbcsJson = 3095,
		HResult = 3847
	}

	public class EventSource : IDisposable // TypeDefIndex: 1339
	{
		// Fields
		private byte[] providerMetadata; // 0x10
		private string m_name; // 0x18
		internal int m_id; // 0x20
		private Guid m_guid; // 0x24
		internal EventMetadata[] m_eventData; // 0x38
		private byte[] m_rawManifest; // 0x40
		private EventHandler<EventCommandEventArgs> m_eventCommandExecuted; // 0x48
		private EventSourceSettings m_config; // 0x50
		private bool m_eventSourceEnabled; // 0x54
		internal EventLevel m_level; // 0x58
		internal EventKeywords m_matchAnyKeyword; // 0x60
		internal EventDispatcher m_Dispatchers; // 0x68
		private OverideEventProvider m_provider; // 0x70
		private bool m_completelyInited; // 0x78
		private Exception m_constructionException; // 0x80
		private byte m_outOfBandMessageCount; // 0x88
		private EventCommandEventArgs m_deferredCommands; // 0x90
		private string[] m_traits; // 0x98
		internal static uint s_currentPid; // 0x00
		[ThreadStatic] // 0x004B9B84-0x004B9B94
		private static byte m_EventSourceExceptionRecurenceCount; // 0x80000000
		private SessionMask m_curLiveSessions; // 0xA0
		private EtwSession[] m_etwSessionIdMap; // 0xA8
		private List<EtwSession> m_legacySessions; // 0xB0
		internal long m_keywordTriggers; // 0xB8
		internal SessionMask m_activityFilteringForETWEnabled; // 0xC0
		internal static Action<Guid> s_activityDying; // 0x08
		private ActivityTracker m_activityTracker; // 0xC8
		private static readonly byte[] namespaceBytes; // 0x10
		private static readonly Guid AspNetEventSourceGuid; // 0x18
	
		// Properties
		public string Name { get; } // 0x007A0168-0x007A0170 
		public Guid Guid { get; } // 0x007A0170-0x007A0180 
		public static Guid CurrentThreadActivityId { get; } // 0x007979F4-0x00797A24 
		internal static Guid InternalCurrentThreadActivityId { get; } // 0x007964FC-0x007965EC 
		internal static Guid FallbackActivityId { get; } // 0x007A127C-0x007A1348 
		private bool IsDisposed { get; } // 0x007A8574-0x007A85C4 
		private bool ThrowOnEventWriteErrors { get; } // 0x007A71E8-0x007A71F4 
		private bool SelfDescribingEvents { get; } // 0x007A2FF0-0x007A2FFC 
	
		// Nested types
		protected internal struct EventData // TypeDefIndex: 1340
		{
			// Fields
			internal long m_Ptr; // 0x00
			internal int m_Size; // 0x08
			internal int m_Reserved; // 0x0C
	
			// Properties
			public IntPtr DataPointer { get; set; } // 0x005815CC-0x005815D8 0x005815D8-0x00581604
			public int Size { set; } // 0x00581604-0x0058160C
	
			// Methods
			internal unsafe void SetMetadata(byte* pointer, int size, int reserved); // 0x0058160C-0x00581738
		}
	
		private struct Sha1ForNonSecretPurposes // TypeDefIndex: 1341
		{
			// Fields
			private long length; // 0x00
			private uint[] w; // 0x08
			private int pos; // 0x10
	
			// Methods
			public void Start(); // 0x00581738-0x00581740
			public void Append(byte input); // 0x00581740-0x00581748
			public void Append(byte[] input); // 0x00581748-0x00581750
			public void Finish(byte[] output); // 0x00581750-0x00581758
			private void Drain(); // 0x00581758-0x00581760
			private static uint Rol1(uint input); // 0x0085735C-0x00857364
			private static uint Rol5(uint input); // 0x00857364-0x0085736C
			private static uint Rol30(uint input); // 0x0085736C-0x00857374
		}
	
		private class OverideEventProvider : EventProvider // TypeDefIndex: 1342
		{
			// Fields
			private EventSource m_eventSource; // 0x60
	
			// Constructors
			public OverideEventProvider(EventSource eventSource); // 0x00856BE8-0x00856C64
	
			// Methods
			protected override void OnControllerCommand(ControllerCommand command, IDictionary<string, string> arguments, int perEventSourceSessionId, int etwSessionId); // 0x00856C64-0x0085735C
		}
	
		internal struct EventMetadata // TypeDefIndex: 1343
		{
			// Fields
			public EventDescriptor Descriptor; // 0x00
			public EventTags Tags; // 0x10
			public bool EnabledForAnyListener; // 0x14
			public bool EnabledForETW; // 0x15
			public bool HasRelatedActivityID; // 0x16
			public byte TriggersActivityTracking; // 0x17
			public string Name; // 0x18
			public string Message; // 0x20
			public ParameterInfo[] Parameters; // 0x28
			public TraceLoggingEventTypes TraceLoggingEventTypes; // 0x30
			public EventActivityOptions ActivityOptions; // 0x38
		}
	
		// Constructors
		protected EventSource(); // 0x007A145C-0x007A1468
		protected EventSource(EventSourceSettings settings); // 0x007A1468-0x007A1470
		protected EventSource(EventSourceSettings settings, params /* 0x004BD350-0x004BD360 */ string[] traits); // 0x007A1470-0x007A1540
		static EventSource(); // 0x007AB830-0x007AB8EC
	
		// Methods
		private unsafe void WriteMultiMerge(string eventName, ref EventSourceOptions options, TraceLoggingEventTypes eventTypes, Guid* activityID, Guid* childActivityID, params /* 0x004BD330-0x004BD340 */ object[] values); // 0x0079EE48-0x0079EEC8
		private unsafe void WriteMultiMergeInner(string eventName, ref EventSourceOptions options, TraceLoggingEventTypes eventTypes, Guid* activityID, Guid* childActivityID, params /* 0x004BD340-0x004BD350 */ object[] values); // 0x0079EF00-0x0079F32C
		internal unsafe void WriteMultiMerge(string eventName, ref EventSourceOptions options, TraceLoggingEventTypes eventTypes, Guid* activityID, Guid* childActivityID, EventData* data); // 0x0079F488-0x0079F7E8
		[NonEvent] // 0x004BCDD0-0x004BCE10
		[ReliabilityContract] // 0x004BCDD0-0x004BCE10
		private unsafe void WriteCleanup(GCHandle* pPins, int cPins); // 0x0079F3DC-0x0079F488
		private void InitializeProviderMetadata(); // 0x0079F8E8-0x0079FD3C
		private static int AddValueToMetaData(List<byte> metaData, string value); // 0x0079FD3C-0x007A001C
		private static int HexDigit(char c); // 0x007A001C-0x007A0168
		private System.Diagnostics.Tracing.NameInfo UpdateDescriptor(string name, TraceLoggingEventTypes eventInfo, ref EventSourceOptions options, out EventDescriptor descriptor); // 0x0079F7E8-0x0079F8E8
		public bool IsEnabled(); // 0x007A0180-0x007A0188
		public bool IsEnabled(EventLevel level, EventKeywords keywords); // 0x0079EEC8-0x0079EF00
		public bool IsEnabled(EventLevel level, EventKeywords keywords, EventChannel channel); // 0x007A0188-0x007A01C0
		public static Guid GetGuid(Type eventSourceType); // 0x007A01FC-0x007A0470
		public static string GetName(Type eventSourceType); // 0x007A109C-0x007A1104
		public static void SetCurrentThreadActivityId(Guid activityId); // 0x00797C2C-0x00797E0C
		public override string ToString(); // 0x007A1348-0x007A145C
		protected virtual void OnEventCommand(EventCommandEventArgs command); // 0x007A1C18-0x007A1C1C
		protected void WriteEvent(int eventId, int arg1); // 0x007A1C1C-0x007A1CC8
		protected void WriteEvent(int eventId, string arg1, string arg2); // 0x007A1CE0-0x007A1E30
		protected void WriteEvent(int eventId, string arg1, string arg2, string arg3); // 0x007A1E30-0x007A1FE0
		[CLSCompliant] // 0x004BCE10-0x004BCE24
		protected unsafe void WriteEventCore(int eventId, int eventDataCount, EventData* data); // 0x007A1CC8-0x007A1CE0
		[CLSCompliant] // 0x004BCE24-0x004BCE38
		protected unsafe void WriteEventWithRelatedActivityIdCore(int eventId, Guid* relatedActivityId, int eventDataCount, EventData* data); // 0x007A1FE0-0x007A2D50
		protected void WriteEvent(int eventId, params /* 0x004BD360-0x004BD370 */ object[] args); // 0x007A39D0-0x007A39E0
		public void Dispose(); // 0x0079B318-0x0079B394
		protected virtual void Dispose(bool disposing); // 0x007A482C-0x007A4940
		~EventSource(); // 0x007A4C40-0x007A4CB8
		internal void WriteStringToListener(EventListener listener, string msg, SessionMask m); // 0x007A4CB8-0x007A4E00
		private unsafe void WriteEventRaw(string eventName, ref EventDescriptor eventDescriptor, Guid* activityID, Guid* relatedActivityID, int dataCount, IntPtr data); // 0x0079F32C-0x0079F3DC
		private void Initialize(Guid eventSourceGuid, string eventSourceName, string[] traits); // 0x007A15F8-0x007A1C18
		private static string GetName(Type eventSourceType, EventManifestOptions flags); // 0x007A1104-0x007A127C
		private static Guid GenerateGuidFromName(string name); // 0x007A0F48-0x007A109C
		private unsafe object DecodeObject(int eventId, int parameterId, ref EventData* data); // 0x007A5C58-0x007A6580
		private EventDispatcher GetDispatcher(EventListener listener); // 0x007A6580-0x007A65C0
		private unsafe void WriteEventVarargs(int eventId, Guid* childActivityID, object[] args); // 0x007A39E0-0x007A482C
		private object[] SerializeEventArgs(int eventId, object[] args); // 0x007A6934-0x007A6B2C
		private void LogEventArgsMismatches(ParameterInfo[] infos, object[] args); // 0x007A65C0-0x007A67F8
		private int GetParamLengthIncludingByteArray(ParameterInfo[] parameters); // 0x007A6B2C-0x007A6C54
		private unsafe void WriteToAllListeners(int eventId, Guid* childActivityID, int eventDataCount, EventData* data); // 0x007A3718-0x007A39D0
		private unsafe void WriteToAllListeners(int eventId, Guid* childActivityID, params /* 0x004BD370-0x004BD380 */ object[] args); // 0x007A67F8-0x007A6934
		private unsafe void DispatchToAllListeners(int eventId, Guid* childActivityID, EventWrittenEventArgs eventCallbackArgs); // 0x007A6C54-0x007A6E88
		private void WriteEventString(EventLevel level, long keywords, string msgString); // 0x007A4E00-0x007A51C0
		private void WriteStringToAllListeners(string eventName, string msg); // 0x007A6E88-0x007A70F0
		private unsafe SessionMask GetEtwSessionMask(int eventId, Guid* childActivityID); // 0x007A2D7C-0x007A2FF0
		private bool IsEnabledByDefault(int eventNum, bool enable, EventLevel currentLevel, EventKeywords currentMatchAnyKeyword); // 0x007A70F0-0x007A71E8
		private bool IsEnabledCommon(bool enabled, EventLevel currentLevel, EventKeywords currentMatchAnyKeyword, EventLevel eventLevel, EventKeywords eventKeywords, EventChannel eventChannel); // 0x007A01C0-0x007A01FC
		private void ThrowEventSourceException(string eventName, Exception innerEx = null); // 0x007A2FFC-0x007A3718
		private void ValidateEventOpcodeForTransfer(ref EventMetadata eventData, string eventName); // 0x007A2D50-0x007A2D7C
		internal static EventOpcode GetOpcodeWithDefault(EventOpcode opcode, string eventName); // 0x007A71F4-0x007A7290
		internal void SendCommand(EventListener listener, int perEventSourceSessionId, int etwSessionId, EventCommand command, bool enable, EventLevel level, EventKeywords matchAnyKeyword, IDictionary<string, string> commandArguments); // 0x007A7290-0x007A746C
		internal void DoCommand(EventCommandEventArgs commandArgs); // 0x007A51C0-0x007A5C58
		internal void UpdateEtwSession(int sessionIdBit, int etwSessionId, bool bEnable, string activityFilters, bool participateInSampling); // 0x007A7BFC-0x007A7F14
		internal static bool ParseCommandArgs(IDictionary<string, string> commandArguments, out bool participateInSampling, out string activityFilters, out int sessionIdBit); // 0x007A7964-0x007A7BFC
		internal void UpdateKwdTriggers(bool enable); // 0x007A7FD4-0x007A8074
		internal bool EnableEventForDispatcher(EventDispatcher dispatcher, int eventId, bool value); // 0x007A786C-0x007A7964
		private bool AnyEventEnabled(); // 0x007A7F14-0x007A7FD4
		private void EnsureDescriptorsInitialized(); // 0x007A746C-0x007A786C
		private bool SendManifest(byte[] rawManifest); // 0x007A4940-0x007A4C40
		internal static Attribute GetCustomAttributeHelper(MemberInfo member, Type attributeType, EventManifestOptions flags = EventManifestOptions.None /* Metadata: 0x001E150F */); // 0x007A0470-0x007A0F48
		private static bool AttributeTypeNamesMatch(Type attributeType, Type reflectedAttributeType); // 0x007AA1C0-0x007AA33C
		private static Type GetEventSourceBaseType(Type eventSourceType, bool allowEventSourceOverride, bool reflectionOnly); // 0x007AA33C-0x007AA55C
		private static byte[] CreateManifestAndDescriptors(Type eventSourceType, string eventSourceDllName, EventSource source, EventManifestOptions flags = EventManifestOptions.None /* Metadata: 0x001E1513 */); // 0x007A85C4-0x007AA1C0
		private static bool RemoveFirstArgIfRelatedActivityId(ref ParameterInfo[] args); // 0x007AAB14-0x007AAC94
		private static void AddProviderEnumKind(ManifestBuilder manifest, FieldInfo staticField, string providerEnumKind); // 0x007AA55C-0x007AAB14
		private static void AddEventDescriptor(ref EventMetadata[] eventData, string eventName, EventAttribute eventAttribute, ParameterInfo[] eventParameters, bool hasRelatedActivityID); // 0x007AB30C-0x007AB58C
		private static void TrimEventDescriptors(ref EventMetadata[] eventData); // 0x007AB58C-0x007AB65C
		internal void AddListener(EventListener listener); // 0x0079AF68-0x0079B100
		private static void DebugCheckEvent(ref Dictionary<string, string> eventsByName, EventMetadata[] eventData, MethodInfo method, EventAttribute eventAttribute, ManifestBuilder manifest, EventManifestOptions options); // 0x007AAC94-0x007AB30C
		private static int GetHelperCallFirstArg(MethodInfo method); // 0x007AB65C-0x007AB830
		internal void ReportOutOfBandMessage(string msg, bool flush); // 0x00795EC8-0x00796044
		private EventSourceSettings ValidateSettings(EventSourceSettings settings); // 0x007A1540-0x007A15F8
		private void ReportActivitySamplingInfo(EventListener listener, SessionMask sessions); // 0x007A8074-0x007A8574
	}

	[Flags] // 0x004B8758-0x004B8768
	public enum EventTags // TypeDefIndex: 1344
	{
		None = 0
	}

	internal class TraceLoggingEventTypes // TypeDefIndex: 1345
	{
		// Fields
		internal readonly TraceLoggingTypeInfo[] typeInfos; // 0x10
		internal readonly string name; // 0x18
		internal readonly EventTags tags; // 0x20
		internal readonly byte level; // 0x24
		internal readonly byte opcode; // 0x25
		internal readonly EventKeywords keywords; // 0x28
		internal readonly byte[] typeMetadata; // 0x30
		internal readonly int scratchSize; // 0x38
		internal readonly int dataCount; // 0x3C
		internal readonly int pinCount; // 0x40
		private ConcurrentSet<KeyValuePair<string, EventTags>, System.Diagnostics.Tracing.NameInfo> nameInfos; // 0x48
	
		// Properties
		internal string Name { get; } // 0x0086085C-0x00860864 
		internal EventTags Tags { get; } // 0x00860864-0x0086086C 
	
		// Constructors
		internal TraceLoggingEventTypes(string name, EventTags tags, params /* 0x004BD380-0x004BD390 */ Type[] types); // 0x0085FF78-0x0085FFBC
		internal TraceLoggingEventTypes(string name, EventTags tags, ParameterInfo[] paramInfos); // 0x00860328-0x00860554
		private TraceLoggingEventTypes(EventTags tags, string defaultName, TraceLoggingTypeInfo[] typeInfos); // 0x00860148-0x00860328
	
		// Methods
		internal System.Diagnostics.Tracing.NameInfo GetNameInfo(string name, EventTags tags); // 0x0086086C-0x00860950
		private TraceLoggingTypeInfo[] MakeArray(ParameterInfo[] paramInfos); // 0x00860554-0x008606FC
		private static TraceLoggingTypeInfo[] MakeArray(Type[] types); // 0x0085FFBC-0x00860148
	}

	internal class TraceLoggingMetadataCollector // TypeDefIndex: 1346
	{
		// Fields
		private readonly Impl impl; // 0x10
		private readonly FieldMetadata currentGroup; // 0x18
		private int bufferedArrayFieldCount; // 0x20
		[CompilerGenerated] // 0x004B9B94-0x004B9BA4
		private EventFieldTags _Tags_k__BackingField; // 0x24
	
		// Properties
		internal EventFieldTags Tags { [CompilerGenerated] /* 0x004BCE38-0x004BCE48 */ get; [CompilerGenerated] /* 0x004BCE48-0x004BCE58 */ set; } // 0x00860A10-0x00860A18 0x00860A18-0x00860A20
		internal int ScratchSize { get; } // 0x008607FC-0x0086081C 
		internal int DataCount { get; } // 0x0086081C-0x0086083C 
		internal int PinCount { get; } // 0x0086083C-0x0086085C 
		private bool BeginningBufferedArray { get; } // 0x00860A20-0x00860A30 
	
		// Nested types
		private class Impl // TypeDefIndex: 1347
		{
			// Fields
			internal readonly List<FieldMetadata> fields; // 0x10
			internal short scratchSize; // 0x18
			internal sbyte dataCount; // 0x1A
			internal sbyte pinCount; // 0x1B
			private int bufferNesting; // 0x1C
			private bool scalar; // 0x20
	
			// Constructors
			public Impl(); // 0x00860950-0x008609C0
	
			// Methods
			public void AddScalar(int size); // 0x00860BA0-0x00860C4C
			public void AddNonscalar(); // 0x00860C4C-0x00860CD8
			public void BeginBuffered(); // 0x00860D94-0x00860DCC
			public void EndBuffered(); // 0x00860E80-0x00860E90
			public int Encode(byte[] metadata); // 0x00860E90-0x00860FA8
		}
	
		// Constructors
		internal TraceLoggingMetadataCollector(); // 0x008606FC-0x0086076C
		private TraceLoggingMetadataCollector(TraceLoggingMetadataCollector other, FieldMetadata group); // 0x008609C0-0x00860A10
	
		// Methods
		public TraceLoggingMetadataCollector AddGroup(string name); // 0x00860A30-0x00860B04
		public void AddScalar(string name, TraceLoggingDataType type); // 0x008584C8-0x008585F8
		public void AddBinary(string name, TraceLoggingDataType type); // 0x0085F204-0x0085F310
		public void AddArray(string name, TraceLoggingDataType type); // 0x00858200-0x0085835C
		public void BeginBufferedArray(); // 0x00860CD8-0x00860D94
		public void EndBufferedArray(); // 0x00860DCC-0x00860E80
		internal byte[] GetMetadata(); // 0x0086076C-0x008607FC
		private void AddField(FieldMetadata fieldMetadata); // 0x00860B04-0x00860BA0
	}

	internal abstract class TraceLoggingTypeInfo // TypeDefIndex: 1348
	{
		// Fields
		private readonly string name; // 0x10
		private readonly EventKeywords keywords; // 0x18
		private readonly EventLevel level; // 0x20
		private readonly EventOpcode opcode; // 0x24
		private readonly EventTags tags; // 0x28
		private readonly Type dataType; // 0x30
	
		// Properties
		public string Name { get; } // 0x008611F0-0x008611F8 
		public EventLevel Level { get; } // 0x008611F8-0x00861200 
		public EventOpcode Opcode { get; } // 0x00861200-0x00861208 
		public EventKeywords Keywords { get; } // 0x00861208-0x00861210 
		public EventTags Tags { get; } // 0x00861210-0x00861218 
		internal Type DataType { get; } // 0x00861218-0x00861220 
	
		// Constructors
		internal TraceLoggingTypeInfo(Type dataType); // 0x00860FA8-0x008610A0
		internal TraceLoggingTypeInfo(Type dataType, string name, EventLevel level, EventOpcode opcode, EventKeywords keywords, EventTags tags); // 0x008610A0-0x008611F0
	
		// Methods
		public abstract void WriteMetadata(TraceLoggingMetadataCollector collector, string name, EventFieldFormat format);
		public abstract void WriteObjectData(TraceLoggingDataCollector collector, object value);
		public virtual object GetData(object value); // 0x0085F3F4-0x0085F3FC
	}

	internal abstract class TraceLoggingTypeInfo<DataType> : TraceLoggingTypeInfo // TypeDefIndex: 1349
	{
		// Fields
		private static TraceLoggingTypeInfo<DataType> instance;
	
		// Properties
		public static TraceLoggingTypeInfo<DataType> Instance { get; }
	
		// Constructors
		protected TraceLoggingTypeInfo();
		protected TraceLoggingTypeInfo(string name, EventLevel level, EventOpcode opcode, EventKeywords keywords, EventTags tags);
	
		// Methods
		public abstract void WriteData(TraceLoggingDataCollector collector, ref DataType value);
		public override void WriteObjectData(TraceLoggingDataCollector collector, object value);
		internal static TraceLoggingTypeInfo<DataType> GetInstance(List<Type> recursionCheck);
		private static TraceLoggingTypeInfo<DataType> InitInstance();
	}

	internal sealed class TypeAnalysis // TypeDefIndex: 1350
	{
		// Fields
		internal readonly PropertyAnalysis[] properties; // 0x10
		internal readonly string name; // 0x18
		internal readonly EventKeywords keywords; // 0x20
		internal readonly EventLevel level; // 0x28
		internal readonly EventOpcode opcode; // 0x2C
		internal readonly EventTags tags; // 0x30
	
		// Constructors
		public TypeAnalysis(Type dataType, EventDataAttribute eventAttrib, List<Type> recursionCheck); // 0x00861220-0x00861914
	}

	internal class ActivityTracker // TypeDefIndex: 1351
	{
		// Fields
		private AsyncLocal<ActivityInfo> m_current; // 0x10
		private bool m_checkedForEnable; // 0x18
		private static ActivityTracker s_activityTrackerInstance; // 0x00
		private static long m_nextId; // 0x08
	
		// Properties
		public static ActivityTracker Instance { get; } // 0x00797AB8-0x00797B20 
	
		// Nested types
		private class ActivityInfo // TypeDefIndex: 1352
		{
			// Fields
			internal readonly string m_name; // 0x10
			private readonly long m_uniqueId; // 0x18
			internal readonly Guid m_guid; // 0x20
			internal readonly int m_activityPathGuidOffset; // 0x30
			internal readonly int m_level; // 0x34
			internal readonly EventActivityOptions m_eventOptions; // 0x38
			internal long m_lastChildID; // 0x40
			internal int m_stopped; // 0x48
			internal readonly ActivityInfo m_creator; // 0x50
			internal readonly Guid m_activityIdToRestore; // 0x58
	
			// Properties
			public Guid ActivityId { get; } // 0x00797F1C-0x00797F28 
	
			// Constructors
			public ActivityInfo(string name, long uniqueId, ActivityInfo creator, Guid activityIDToRestore, EventActivityOptions options); // 0x00797A24-0x00797AAC
	
			// Methods
			public static string Path(ActivityInfo activityInfo); // 0x00797F28-0x00797FC8
			public override string ToString(); // 0x00797FC8-0x0079815C
			public static string LiveActivities(ActivityInfo list); // 0x00797640-0x007976D4
			public bool CanBeOrphan(); // 0x00797AAC-0x00797AB8
			private void CreateActivityPathGuid(out Guid idRet, out int activityPathGuidOffset); // 0x00797E84-0x00797F1C
			private unsafe void CreateOverflowGuid(Guid* outPtr); // 0x007982AC-0x00798314
			private static unsafe int AddIdToGuid(Guid* outPtr, int whereToAddId, uint id, bool overflow = false /* Metadata: 0x001E151B */); // 0x0079815C-0x007982AC
			private static unsafe void WriteNibble(ref byte* ptr, byte* endPtr, uint value); // 0x00798314-0x00798340
		}
	
		// Constructors
		public ActivityTracker(); // 0x00797E0C-0x00797E14
		static ActivityTracker(); // 0x00797E14-0x00797E84
	
		// Methods
		public void OnStart(string providerName, string activityName, int task, ref Guid activityId, ref Guid relatedActivityId, EventActivityOptions options); // 0x007970C0-0x00797488
		public void OnStop(string providerName, string activityName, int task, ref Guid activityId); // 0x00797720-0x007979F4
		public void Enable(); // 0x00797488-0x00797538
		private ActivityInfo FindActiveActivity(string name, ActivityInfo startLocation); // 0x007976D4-0x00797720
		private string NormalizeActivityName(string providerName, string activityName, int task); // 0x00797538-0x00797640
		private void ActivityChanging(AsyncLocalValueChangedArgs<ActivityInfo> args); // 0x00797B20-0x00797C2C
	}

	[EventSource] // 0x004B8768-0x004B87A4
	internal class TplEtwProvider : EventSource // TypeDefIndex: 1353
	{
		// Fields
		public static TplEtwProvider Log; // 0x00
	
		// Properties
		public bool Debug { get; } // 0x0085F544-0x0085F554 
	
		// Nested types
		public class Keywords // TypeDefIndex: 1354
		{
			// Fields
			public const EventKeywords Debug = EventKeywords.None; // Metadata: 0x001E151C
		}
	
		// Constructors
		public TplEtwProvider(); // 0x0085F67C-0x0085F6E4
		static TplEtwProvider(); // 0x0085F6E4-0x0085F744
	
		// Methods
		public void DebugFacilityMessage(string Facility, string Message); // 0x0085F554-0x0085F570
		public void DebugFacilityMessage1(string Facility, string Message, string Arg); // 0x0085F570-0x0085F594
		public void SetActivityId(Guid Id); // 0x0085F594-0x0085F67C
	}

	[Flags] // 0x004B87A4-0x004B87B4
	public enum EventActivityOptions // TypeDefIndex: 1355
	{
		None = 0,
		Disable = 2,
		Recursive = 4,
		Detachable = 8
	}

	internal struct EventDescriptor // TypeDefIndex: 1356
	{
		// Fields
		private int m_traceloggingId; // 0x00
		private ushort m_id; // 0x00
		private byte m_version; // 0x02
		private byte m_channel; // 0x03
		private byte m_level; // 0x04
		private byte m_opcode; // 0x05
		private ushort m_task; // 0x06
		private long m_keywords; // 0x08
	
		// Properties
		public int EventId { get; } // 0x0058103C-0x00581044 
		public byte Version { get; } // 0x00581044-0x0058104C 
		public byte Channel { get; } // 0x0058104C-0x00581054 
		public byte Level { get; } // 0x00581054-0x0058105C 
		public byte Opcode { get; } // 0x0058105C-0x00581064 
		public int Task { get; } // 0x00581064-0x0058106C 
		public long Keywords { get; } // 0x0058106C-0x00581074 
	
		// Constructors
		public EventDescriptor(int traceloggingId, byte level, byte opcode, long keywords); // 0x0058101C-0x00581034
		public EventDescriptor(int id, byte version, byte channel, byte level, byte opcode, int task, long keywords); // 0x00581034-0x0058103C
	
		// Methods
		public override bool Equals(object obj); // 0x00581074-0x0058107C
		public override int GetHashCode(); // 0x0058107C-0x005810B4
		public bool Equals(EventDescriptor other); // 0x005810B4-0x00581144
	}

	internal enum ControllerCommand // TypeDefIndex: 1357
	{
		Disable = -3,
		Enable = -2,
		SendManifest = -1,
		Update = 0
	}

	internal class EventProvider : IDisposable // TypeDefIndex: 1358
	{
		// Fields
		private static bool m_setInformationMissing; // 0x00
		private UnsafeNativeMethods.ManifestEtw.EtwEnableCallback m_etwCallback; // 0x10
		private GCHandle m_thisGCHandle; // 0x18
		private long m_regHandle; // 0x20
		private byte m_level; // 0x28
		private long m_anyKeywordMask; // 0x30
		private long m_allKeywordMask; // 0x38
		private List<SessionInfo> m_liveSessions; // 0x40
		private bool m_enabled; // 0x48
		private Guid m_providerId; // 0x4C
		internal bool m_disposed; // 0x5C
		[ThreadStatic] // 0x004B9BA4-0x004B9BB4
		private static WriteEventErrorCode s_returnCode; // 0x80000000
		private static int[] nibblebits; // 0x08
	
		// Properties
		protected EventLevel Level { get; } // 0x0079D124-0x0079D12C 
		protected EventKeywords MatchAnyKeyword { get; } // 0x0079D12C-0x0079D134 
	
		// Nested types
		public struct EventData // TypeDefIndex: 1359
		{
			// Fields
			internal ulong Ptr; // 0x00
			internal uint Size; // 0x08
			internal uint Reserved; // 0x0C
		}
	
		public struct SessionInfo // TypeDefIndex: 1360
		{
			// Fields
			internal int sessionIdBit; // 0x00
			internal int etwSessionId; // 0x04
	
			// Constructors
			internal SessionInfo(int sessionIdBit_, int etwSessionId_); // 0x00581144-0x00581190
		}
	
		public enum WriteEventErrorCode // TypeDefIndex: 1361
		{
			NoError = 0,
			NoFreeBuffers = 1,
			EventTooBig = 2,
			NullInput = 3,
			TooManyArgs = 4,
			Other = 5
		}
	
		[AttributeUsage] // 0x004B87B4-0x004B87C8
		private sealed class MonoPInvokeCallbackAttribute : Attribute // TypeDefIndex: 1362
		{
			// Constructors
			public MonoPInvokeCallbackAttribute(Type t); // 0x0079EE40-0x0079EE48
		}
	
		[CompilerGenerated] // 0x004B87C8-0x004B87D8
		private sealed class __c__DisplayClass44_0 // TypeDefIndex: 1363
		{
			// Fields
			public List<SessionInfo> liveSessionList; // 0x10
	
			// Constructors
			public __c__DisplayClass44_0(); // 0x0079D134-0x0079D13C
	
			// Methods
			internal void _GetSessions_b__0(int etwSessionId, long matchAllKeywords); // 0x0079EDC0-0x0079EE40
		}
	
		// Constructors
		internal EventProvider(); // 0x0079C10C-0x0079C114
		static EventProvider(); // 0x0079ED44-0x0079EDC0
	
		// Methods
		internal void Register(Guid providerGuid); // 0x0079C114-0x0079C2EC
		internal unsafe int SetInformation(UnsafeNativeMethods.ManifestEtw.EVENT_INFO_CLASS eventInfoClass, void* data, int dataSize); // 0x0079C2EC-0x0079C430
		public void Dispose(); // 0x0079C430-0x0079C4AC
		protected virtual void Dispose(bool disposing); // 0x0079C4AC-0x0079C5F4
		~EventProvider(); // 0x0079C638-0x0079C6B0
		private void Deregister(); // 0x0079C5F4-0x0079C638
		[MonoPInvokeCallback] // 0x004BCE58-0x004BCEBC
		private static unsafe void EtwEnableCallBack(in Guid sourceId, in int controlCode, in byte setLevel, in long anyKeyword, in long allKeyword, in UnsafeNativeMethods.ManifestEtw.EVENT_FILTER_DESCRIPTOR* filterData, in void* callbackContext); // 0x0079C004-0x0079C10C
		private unsafe void EtwEnableCallBackImpl(in int controlCode, in byte setLevel, in long anyKeyword, in long allKeyword, in UnsafeNativeMethods.ManifestEtw.EVENT_FILTER_DESCRIPTOR* filterData); // 0x0079C6DC-0x0079CBFC
		protected virtual void OnControllerCommand(ControllerCommand command, IDictionary<string, string> arguments, int sessionId, int etwSessionId); // 0x0079D120-0x0079D124
		private static int FindNull(byte[] buffer, int idx); // 0x0079D0C8-0x0079D120
		private List<Tuple<SessionInfo, bool>> GetSessions(); // 0x0079CBFC-0x0079CFC4
		private static void GetSessionInfoCallback(int etwSessionId, long matchAllKeywords, ref List<SessionInfo> sessionList); // 0x0079D3B4-0x0079D564
		private void GetSessionInfo(Action<int, long> action); // 0x0079D13C-0x0079D318
		private static int IndexOfSessionInList(List<SessionInfo> sessions, int etwSessionId); // 0x0079D318-0x0079D3B4
		private unsafe bool GetDataFromController(int etwSessionId, UnsafeNativeMethods.ManifestEtw.EVENT_FILTER_DESCRIPTOR* filterData, out ControllerCommand command, out byte[] data, out int dataStart); // 0x0079CFC4-0x0079D0C8
		public bool IsEnabled(); // 0x0079D658-0x0079D660
		public bool IsEnabled(byte level, long keywords); // 0x0079D660-0x0079D6A4
		public static WriteEventErrorCode GetLastWriteEventError(); // 0x0079D6A4-0x0079D70C
		private static void SetLastError(int error); // 0x0079D70C-0x0079D7C4
		private static unsafe object EncodeObject(ref object data, ref EventData* dataDescriptor, ref byte* dataBuffer, ref uint totalEventSize); // 0x0079D7C4-0x0079E0B4
		internal unsafe bool WriteEvent(ref EventDescriptor eventDescriptor, Guid* activityID, Guid* childActivityID, params /* 0x004BD390-0x004BD3A0 */ object[] eventPayload); // 0x0079E0B4-0x0079EB94
		protected internal unsafe bool WriteEvent(ref EventDescriptor eventDescriptor, Guid* activityID, Guid* childActivityID, int dataCount, IntPtr data); // 0x0079EB94-0x0079EC6C
		internal unsafe bool WriteEventRaw(ref EventDescriptor eventDescriptor, Guid* activityID, Guid* relatedActivityID, int dataCount, IntPtr data); // 0x0079EC6C-0x0079ED44
		private uint EventUnregister(); // 0x0079C6B0-0x0079C6DC
		private static int bitcount(uint n); // 0x0079D564-0x0079D62C
		private static int bitindex(uint n); // 0x0079D62C-0x0079D658
	}

	[Flags] // 0x004B87D8-0x004B87E8
	public enum EventSourceSettings // TypeDefIndex: 1364
	{
		Default = 0,
		ThrowOnEventWriteErrors = 1,
		EtwManifestEventFormat = 4,
		EtwSelfDescribingEventFormat = 8
	}

	public class EventListener // TypeDefIndex: 1365
	{
		// Fields
		private static readonly object s_EventSourceCreatedLock; // 0x00
		[CompilerGenerated] // 0x004B9BB4-0x004B9BC4
		private EventHandler<EventSourceCreatedEventArgs> _EventSourceCreated; // 0x10
		[CompilerGenerated] // 0x004B9BC4-0x004B9BD4
		private EventHandler<EventWrittenEventArgs> EventWritten; // 0x18
		internal EventListener m_Next; // 0x20
		internal ActivityFilter m_activityFilter; // 0x28
		internal static EventListener s_Listeners; // 0x08
		internal static List<WeakReference> s_EventSources; // 0x10
		private static bool s_CreatingListener; // 0x18
		private static bool s_EventSourceShutdownRegistered; // 0x19
	
		// Properties
		internal static object EventListenersLock { get; } // 0x0079AE84-0x0079AF68 
	
		// Constructors
		static EventListener(); // 0x0079B394-0x0079B414
	
		// Methods
		protected internal virtual void OnEventSourceCreated(EventSource eventSource); // 0x0079A8EC-0x0079A994
		protected internal virtual void OnEventWritten(EventWrittenEventArgs eventData); // 0x0079A994-0x0079AA0C
		internal static void AddEventSource(EventSource newEventSource); // 0x0079AA0C-0x0079AE84
		private static void DisposeOnShutdown(object sender, EventArgs e); // 0x0079B100-0x0079B318
	}

	public class EventCommandEventArgs : EventArgs // TypeDefIndex: 1366
	{
		// Fields
		[CompilerGenerated] // 0x004B9BD4-0x004B9BE4
		private EventCommand _Command_k__BackingField; // 0x10
		[CompilerGenerated] // 0x004B9BE4-0x004B9BF4
		private IDictionary<string, string> _Arguments_k__BackingField; // 0x18
		internal EventSource eventSource; // 0x20
		internal EventDispatcher dispatcher; // 0x28
		internal EventListener listener; // 0x30
		internal int perEventSourceSessionId; // 0x38
		internal int etwSessionId; // 0x3C
		internal bool enable; // 0x40
		internal EventLevel level; // 0x44
		internal EventKeywords matchAnyKeyword; // 0x48
		internal EventCommandEventArgs nextCommand; // 0x50
	
		// Properties
		public EventCommand Command { [CompilerGenerated] /* 0x004BCEBC-0x004BCECC */ get; [CompilerGenerated] /* 0x004BCECC-0x004BCEDC */ internal set; } // 0x0079A320-0x0079A328 0x0079A328-0x0079A330
		public IDictionary<string, string> Arguments { [CompilerGenerated] /* 0x004BCEDC-0x004BCEEC */ get; [CompilerGenerated] /* 0x004BCEEC-0x004BCEFC */ internal set; } // 0x0079A330-0x0079A338 0x0079A338-0x0079A340
	
		// Constructors
		internal EventCommandEventArgs(EventCommand command, IDictionary<string, string> arguments, EventSource eventSource, EventListener listener, int perEventSourceSessionId, int etwSessionId, bool enable, EventLevel level, EventKeywords matchAnyKeyword); // 0x0079A340-0x0079A410
	}

	public class EventSourceCreatedEventArgs : EventArgs // TypeDefIndex: 1367
	{
		// Fields
		[CompilerGenerated] // 0x004B9BF4-0x004B9C04
		private EventSource _EventSource_k__BackingField; // 0x10
	
		// Properties
		internal EventSource EventSource { [CompilerGenerated] /* 0x004BCEFC-0x004BCF0C */ set; } // 0x008573A4-0x008573AC
	
		// Constructors
		public EventSourceCreatedEventArgs(); // 0x008573AC-0x00857414
	}

	public class EventWrittenEventArgs : EventArgs // TypeDefIndex: 1368
	{
		// Fields
		[CompilerGenerated] // 0x004B9C04-0x004B9C14
		private int _EventId_k__BackingField; // 0x10
		[CompilerGenerated] // 0x004B9C14-0x004B9C24
		private Guid _RelatedActivityId_k__BackingField; // 0x14
		[CompilerGenerated] // 0x004B9C24-0x004B9C34
		private ReadOnlyCollection<object> _Payload_k__BackingField; // 0x28
		private string m_message; // 0x30
		private string m_eventName; // 0x38
		private EventSource m_eventSource; // 0x40
		private ReadOnlyCollection<string> m_payloadNames; // 0x48
	
		// Properties
		internal string EventName { set; } // 0x00857B14-0x00857B1C
		internal int EventId { [CompilerGenerated] /* 0x004BCF0C-0x004BCF1C */ set; } // 0x00857B1C-0x00857B24
		internal Guid RelatedActivityId { [CompilerGenerated] /* 0x004BCF1C-0x004BCF2C */ set; } // 0x00857B24-0x00857B30
		internal ReadOnlyCollection<object> Payload { [CompilerGenerated] /* 0x004BCF2C-0x004BCF3C */ set; } // 0x00857B30-0x00857B38
		internal ReadOnlyCollection<string> PayloadNames { set; } // 0x00857B38-0x00857B40
		internal string Message { set; } // 0x00857B40-0x00857B48
	
		// Constructors
		internal EventWrittenEventArgs(EventSource eventSource); // 0x00857B48-0x00857BC4
	}

	[AttributeUsage] // 0x004B87E8-0x004B87FC
	public sealed class EventSourceAttribute : Attribute // TypeDefIndex: 1369
	{
		// Fields
		[CompilerGenerated] // 0x004B9C34-0x004B9C44
		private string _Name_k__BackingField; // 0x10
		[CompilerGenerated] // 0x004B9C44-0x004B9C54
		private string _Guid_k__BackingField; // 0x18
		[CompilerGenerated] // 0x004B9C54-0x004B9C64
		private string _LocalizationResources_k__BackingField; // 0x20
	
		// Properties
		public string Name { [CompilerGenerated] /* 0x004BCF3C-0x004BCF4C */ get; [CompilerGenerated] /* 0x004BCF4C-0x004BCF5C */ set; } // 0x00857374-0x0085737C 0x0085737C-0x00857384
		public string Guid { [CompilerGenerated] /* 0x004BCF5C-0x004BCF6C */ get; [CompilerGenerated] /* 0x004BCF6C-0x004BCF7C */ set; } // 0x00857384-0x0085738C 0x0085738C-0x00857394
		public string LocalizationResources { [CompilerGenerated] /* 0x004BCF7C-0x004BCF8C */ get; } // 0x00857394-0x0085739C 
	
		// Constructors
		public EventSourceAttribute(); // 0x0085739C-0x008573A4
	}

	[AttributeUsage] // 0x004B87FC-0x004B8810
	public sealed class EventAttribute : Attribute // TypeDefIndex: 1370
	{
		// Fields
		[CompilerGenerated] // 0x004B9C64-0x004B9C74
		private int _EventId_k__BackingField; // 0x10
		[CompilerGenerated] // 0x004B9C74-0x004B9C84
		private EventLevel _Level_k__BackingField; // 0x14
		[CompilerGenerated] // 0x004B9C84-0x004B9C94
		private EventKeywords _Keywords_k__BackingField; // 0x18
		[CompilerGenerated] // 0x004B9C94-0x004B9CA4
		private EventTask _Task_k__BackingField; // 0x20
		[CompilerGenerated] // 0x004B9CA4-0x004B9CB4
		private byte _Version_k__BackingField; // 0x24
		[CompilerGenerated] // 0x004B9CB4-0x004B9CC4
		private string _Message_k__BackingField; // 0x28
		[CompilerGenerated] // 0x004B9CC4-0x004B9CD4
		private EventTags _Tags_k__BackingField; // 0x30
		[CompilerGenerated] // 0x004B9CD4-0x004B9CE4
		private EventActivityOptions _ActivityOptions_k__BackingField; // 0x34
		private EventOpcode m_opcode; // 0x38
		private bool m_opcodeSet; // 0x3C
	
		// Properties
		public int EventId { [CompilerGenerated] /* 0x004BCF8C-0x004BCF9C */ get; [CompilerGenerated] /* 0x004BCF9C-0x004BCFAC */ private set; } // 0x0079A298-0x0079A2A0 0x0079A2A0-0x0079A2A8
		public EventLevel Level { [CompilerGenerated] /* 0x004BCFAC-0x004BCFBC */ get; [CompilerGenerated] /* 0x004BCFBC-0x004BCFCC */ set; } // 0x0079A2A8-0x0079A2B0 0x0079A2B0-0x0079A2B8
		public EventKeywords Keywords { [CompilerGenerated] /* 0x004BCFCC-0x004BCFDC */ get; } // 0x0079A2B8-0x0079A2C0 
		public EventOpcode Opcode { get; set; } // 0x0079A2C0-0x0079A2C8 0x0079A2C8-0x0079A2D8
		internal bool IsOpcodeSet { get; } // 0x0079A2D8-0x0079A2E0 
		public EventTask Task { [CompilerGenerated] /* 0x004BCFDC-0x004BCFEC */ get; [CompilerGenerated] /* 0x004BCFEC-0x004BCFFC */ set; } // 0x0079A2E0-0x0079A2E8 0x0079A2E8-0x0079A2F0
		public byte Version { [CompilerGenerated] /* 0x004BCFFC-0x004BD00C */ get; } // 0x0079A2F0-0x0079A2F8 
		public string Message { [CompilerGenerated] /* 0x004BD00C-0x004BD01C */ get; [CompilerGenerated] /* 0x004BD01C-0x004BD02C */ set; } // 0x0079A2F8-0x0079A300 0x0079A300-0x0079A308
		public EventTags Tags { [CompilerGenerated] /* 0x004BD02C-0x004BD03C */ get; } // 0x0079A308-0x0079A310 
		public EventActivityOptions ActivityOptions { [CompilerGenerated] /* 0x004BD03C-0x004BD04C */ get; [CompilerGenerated] /* 0x004BD04C-0x004BD05C */ set; } // 0x0079A310-0x0079A318 0x0079A318-0x0079A320
	
		// Constructors
		public EventAttribute(int eventId); // 0x0079A264-0x0079A298
	}

	[AttributeUsage] // 0x004B8810-0x004B8824
	public sealed class NonEventAttribute : Attribute // TypeDefIndex: 1371
	{
		// Constructors
		public NonEventAttribute(); // 0x0085E1F4-0x0085E1FC
	}

	public enum EventCommand // TypeDefIndex: 1372
	{
		Disable = -3,
		Enable = -2,
		SendManifest = -1,
		Update = 0
	}

	internal sealed class ActivityFilter : IDisposable // TypeDefIndex: 1373
	{
		// Fields
		private ConcurrentDictionary<Guid, int> m_activeActivities; // 0x10
		private ConcurrentDictionary<Guid, Tuple<Guid, int>> m_rootActiveActivities; // 0x18
		private Guid m_providerGuid; // 0x20
		private int m_eventId; // 0x30
		private int m_samplingFreq; // 0x34
		private int m_curSampleCount; // 0x38
		private int m_perEventSourceSessionId; // 0x3C
		private ActivityFilter m_next; // 0x40
		private Action<Guid> m_myActivityDelegate; // 0x48
	
		// Nested types
		[CompilerGenerated] // 0x004B8824-0x004B8834
		private sealed class _GetFilterAsTuple_d__7 : IEnumerable<Tuple<int, int>>, IEnumerator<Tuple<int, int>> // TypeDefIndex: 1374
		{
			// Fields
			private int __1__state; // 0x10
			private Tuple<int, int> __2__current; // 0x18
			private int __l__initialThreadId; // 0x20
			public ActivityFilter __4__this; // 0x28
			private Guid sourceGuid; // 0x30
			public Guid __3__sourceGuid; // 0x40
			private ActivityFilter _af_5__1; // 0x50
	
			// Properties
			Tuple<int, int> IEnumerator<System.Tuple<System.Int32,System.Int32>>.Current { [DebuggerHidden] /* 0x004BD0E0-0x004BD0F0 */ get; } // 0x00796F90-0x00796F98 
			object IEnumerator.Current { [DebuggerHidden] /* 0x004BD100-0x004BD110 */ get; } // 0x00796FFC-0x00797004 
	
			// Constructors
			[DebuggerHidden] // 0x004BD0C0-0x004BD0D0
			public _GetFilterAsTuple_d__7(int __1__state); // 0x00796AC8-0x00796B00
	
			// Methods
			[DebuggerHidden] // 0x004BD0D0-0x004BD0E0
			void IDisposable.Dispose(); // 0x00796E6C-0x00796E70
			private bool MoveNext(); // 0x00796E70-0x00796F90
			[DebuggerHidden] // 0x004BD0F0-0x004BD100
			void IEnumerator.Reset(); // 0x00796F98-0x00796FFC
			[DebuggerHidden] // 0x004BD110-0x004BD120
			IEnumerator<Tuple<int, int>> IEnumerable<Tuple<int, int>>.GetEnumerator(); // 0x00797004-0x007970BC
			[DebuggerHidden] // 0x004BD120-0x004BD130
			IEnumerator IEnumerable.GetEnumerator(); // 0x007970BC-0x007970C0
		}
	
		[CompilerGenerated] // 0x004B8834-0x004B8844
		private sealed class __c__DisplayClass11_0 // TypeDefIndex: 1375
		{
			// Fields
			public ActivityFilter filterList; // 0x10
	
			// Constructors
			public __c__DisplayClass11_0(); // 0x00796D2C-0x00796D34
	
			// Methods
			internal void _GetActivityDyingDelegate_b__0(Guid oldActivity); // 0x00796D3C-0x00796DFC
		}
	
		[CompilerGenerated] // 0x004B8844-0x004B8854
		private sealed class __c__DisplayClass13_0 // TypeDefIndex: 1376
		{
			// Fields
			public int tickNow; // 0x10
	
			// Constructors
			public __c__DisplayClass13_0(); // 0x00796D34-0x00796D3C
	
			// Methods
			internal int _TrimActiveActivityStore_b__0(KeyValuePair<Guid, int> x, KeyValuePair<Guid, int> y); // 0x00796DFC-0x00796E6C
		}
	
		// Constructors
		private ActivityFilter(EventSource source, int perEventSourceSessionId, int eventId, int samplingFreq, ActivityFilter existingFilter = null); // 0x00796B00-0x00796C88
	
		// Methods
		public static void DisableFilter(ref ActivityFilter filterList, EventSource source); // 0x00795824-0x00795A64
		public static void UpdateFilter(ref ActivityFilter filterList, EventSource source, int perEventSourceSessionId, string startEvents); // 0x00795BDC-0x00795EC8
		public static unsafe bool PassesActivityFilter(ActivityFilter filterList, Guid* childActivityID, bool triggeringEvent, EventSource source, int eventId); // 0x00796148-0x007964FC
		public static unsafe void FlowActivityIfNeeded(ActivityFilter filterList, Guid* currentActivityId, Guid* childActivityID); // 0x0079660C-0x0079675C
		public static void UpdateKwdTriggers(ActivityFilter activityFilter, Guid sourceGuid, EventSource source, EventKeywords sessKeywords); // 0x007968D8-0x00796A30
		[IteratorStateMachine] // 0x004BD05C-0x004BD0C0
		public IEnumerable<Tuple<int, int>> GetFilterAsTuple(Guid sourceGuid); // 0x00796A30-0x00796AC8
		public void Dispose(); // 0x00795A64-0x00795B10
		private static void EnsureActivityCleanupDelegate(ActivityFilter filterList); // 0x00795B10-0x00795BDC
		private static Action<Guid> GetActivityDyingDelegate(ActivityFilter filterList); // 0x00796C88-0x00796D2C
		private static bool EnableFilter(ref ActivityFilter filterList, EventSource source, int perEventSourceSessionId, int eventId, int samplingFreq); // 0x00796044-0x00796148
		private static void TrimActiveActivityStore(ConcurrentDictionary<Guid, int> activities); // 0x0079675C-0x007968D8
		private static ConcurrentDictionary<Guid, int> GetActiveActivities(ActivityFilter filterList); // 0x007965EC-0x0079660C
	}

	internal class EtwSession // TypeDefIndex: 1377
	{
		// Fields
		public readonly int m_etwSessionId; // 0x10
		public ActivityFilter m_activityFilter; // 0x18
		private static List<WeakReference<EtwSession>> s_etwSessions; // 0x00
	
		// Nested types
		[CompilerGenerated] // 0x004B8854-0x004B8864
		private sealed class __c__DisplayClass1_0 // TypeDefIndex: 1378
		{
			// Fields
			public EtwSession etwSession; // 0x10
	
			// Constructors
			public __c__DisplayClass1_0(); // 0x0079A064-0x0079A06C
	
			// Methods
			internal bool _RemoveEtwSession_b__0(WeakReference<EtwSession> wrEtwSession); // 0x0079A1C4-0x0079A264
		}
	
		[Serializable]
		[CompilerGenerated] // 0x004B8864-0x004B8874
		private sealed class __c // TypeDefIndex: 1379
		{
			// Fields
			public static readonly __c __9; // 0x00
			public static Predicate<WeakReference<EtwSession>> __9__2_0; // 0x08
	
			// Constructors
			static __c(); // 0x0079A0E0-0x0079A144
			public __c(); // 0x0079A144-0x0079A14C
	
			// Methods
			internal bool _TrimGlobalList_b__2_0(WeakReference<EtwSession> wrEtwSession); // 0x0079A14C-0x0079A1C4
		}
	
		// Constructors
		private EtwSession(int etwSessionId); // 0x00799D88-0x00799DB4
		static EtwSession(); // 0x0079A06C-0x0079A0E0
	
		// Methods
		public static EtwSession GetEtwSession(int etwSessionId, bool bCreateIfNeeded = false /* Metadata: 0x001E157C */); // 0x00799AA8-0x00799D88
		public static void RemoveEtwSession(EtwSession etwSession); // 0x00799F08-0x0079A064
		private static void TrimGlobalList(); // 0x00799DB4-0x00799F08
	}

	internal struct SessionMask // TypeDefIndex: 1380
	{
		// Fields
		private uint m_mask; // 0x00
	
		// Properties
		public static SessionMask All { get; } // 0x0085E5EC-0x0085E5F4 
		public bool this[int perEventSourceSessionId] { get => default; set {} } // 0x005817B0-0x005817D0 0x005817D0-0x005817F8
	
		// Constructors
		public SessionMask(uint mask = 0 /* Metadata: 0x001E157D */); // 0x00581784-0x00581790
	
		// Methods
		public bool IsEqualOrSupersetOf(SessionMask m); // 0x00581790-0x005817A4
		public static SessionMask FromId(int perEventSourceSessionId); // 0x0085E5F4-0x0085E614
		public ulong ToEventKeywords(); // 0x005817A4-0x005817B0
		public static SessionMask FromEventKeywords(ulong m); // 0x0085E614-0x0085E664
		public static explicit operator ulong(SessionMask m); // 0x0085E664-0x0085E66C
		public static explicit operator uint(SessionMask m); // 0x0085E66C-0x0085E670
	}

	internal class EventDispatcher // TypeDefIndex: 1381
	{
		// Fields
		internal readonly EventListener m_Listener; // 0x10
		internal bool[] m_EventEnabled; // 0x18
		internal bool m_activityFilteringEnabled; // 0x20
		internal EventDispatcher m_Next; // 0x28
	
		// Constructors
		internal EventDispatcher(EventDispatcher next, bool[] eventEnabled, EventListener listener); // 0x0079A894-0x0079A8D4
	}

	[Flags] // 0x004B88AC-0x004B88BC
	public enum EventManifestOptions // TypeDefIndex: 1382
	{
		None = 0,
		Strict = 1,
		AllCultures = 2,
		OnlyIfNeededForRegistration = 4,
		AllowEventSourceOverride = 8
	}

	internal class ManifestBuilder // TypeDefIndex: 1383
	{
		// Fields
		private Dictionary<int, string> opcodeTab; // 0x10
		private Dictionary<int, string> taskTab; // 0x18
		private Dictionary<ulong, string> keywordTab; // 0x20
		private Dictionary<string, Type> mapsTab; // 0x28
		private Dictionary<string, string> stringTab; // 0x30
		private StringBuilder sb; // 0x38
		private StringBuilder events; // 0x40
		private StringBuilder templates; // 0x48
		private ResourceManager resources; // 0x50
		private EventManifestOptions flags; // 0x58
		private IList<string> errors; // 0x60
		private Dictionary<string, List<int>> perEventByteArrayArgIndices; // 0x68
		private string eventName; // 0x70
		private int numParams; // 0x78
		private List<int> byteArrArgIndices; // 0x80
	
		// Properties
		public IList<string> Errors { get; } // 0x0085D6B4-0x0085D6BC 
	
		// Nested types
		[CompilerGenerated] // 0x004B88BC-0x004B88CC
		private sealed class __c__DisplayClass22_0 // TypeDefIndex: 1384
		{
			// Fields
			public StringBuilder stringBuilder; // 0x10
			public string eventMessage; // 0x18
			public int writtenSoFar; // 0x20
	
			// Constructors
			public __c__DisplayClass22_0(); // 0x0085DAF4-0x0085DAFC
		}
	
		[CompilerGenerated] // 0x004B88CC-0x004B88DC
		private sealed class __c__DisplayClass22_1 // TypeDefIndex: 1385
		{
			// Fields
			public int i; // 0x10
			public __c__DisplayClass22_0 CS___8__locals1; // 0x18
	
			// Constructors
			public __c__DisplayClass22_1(); // 0x0085DAFC-0x0085DB04
	
			// Methods
			internal void _TranslateToManifestConvention_b__0(char ch, string escape); // 0x0085DC48-0x0085DCC8
		}
	
		// Constructors
		public ManifestBuilder(string providerName, Guid providerGuid, string dllName, ResourceManager resources, EventManifestOptions flags); // 0x008594DC-0x0085982C
	
		// Methods
		public void AddOpcode(string name, int value); // 0x0085982C-0x00859AAC
		public void AddTask(string name, int value); // 0x00859C4C-0x00859F00
		public void AddKeyword(string name, ulong value); // 0x00859F00-0x0085A360
		public void StartEvent(string eventName, EventAttribute eventAttribute); // 0x0085A360-0x0085A630
		public void AddEventParameter(Type type, string name); // 0x0085AE64-0x0085B37C
		public void EndEvent(); // 0x0085B7D0-0x0085B98C
		public byte[] CreateManifest(); // 0x0085C1CC-0x0085C20C
		public void ManifestError(string msg, bool runtimeCritical = false /* Metadata: 0x001E1595 */); // 0x00859B2C-0x00859C4C
		private string CreateManifestString(); // 0x0085C20C-0x0085D6B4
		private void WriteNameAndMessageAttribs(StringBuilder stringBuilder, string elementName, string name); // 0x0085D6BC-0x0085D778
		private void WriteMessageAttrib(StringBuilder stringBuilder, string elementName, string name, string value); // 0x0085A6F8-0x0085A900
		internal string GetLocalizedMessage(string key, CultureInfo ci, bool etwFormat); // 0x0085D930-0x0085DA50
		private static List<CultureInfo> GetSupportedCultures(ResourceManager resources); // 0x0085D778-0x0085D930
		private static string GetLevelName(EventLevel level); // 0x0085A630-0x0085A6F8
		private string GetTaskName(EventTask task, string eventName); // 0x0085AD6C-0x0085AE64
		private string GetOpcodeName(EventOpcode opcode, string eventName); // 0x0085AB6C-0x0085AD6C
		private string GetKeywords(ulong keywords, string eventName); // 0x0085A900-0x0085AB6C
		private string GetTypeName(Type type); // 0x0085B37C-0x0085B700
		private static void UpdateStringBuilder(ref StringBuilder stringBuilder, string eventMessage, int startIndex, int count); // 0x0085DA50-0x0085DAF4
		private string TranslateToManifestConvention(string eventMessage, string evtName); // 0x0085B98C-0x0085C1CC
		private int TranslateIndexToManifestConvention(int idx, string evtName); // 0x0085DB04-0x0085DC48
	}

	internal struct ManifestEnvelope // TypeDefIndex: 1386
	{
		// Fields
		public ManifestFormats Format; // 0x00
		public byte MajorVersion; // 0x01
		public byte MinorVersion; // 0x02
		public byte Magic; // 0x03
		public ushort TotalChunks; // 0x04
		public ushort ChunkNumber; // 0x06
	
		// Nested types
		public enum ManifestFormats : byte // TypeDefIndex: 1387
		{
			SimpleXmlFormat = 1
		}
	}

	[Serializable]
	public class EventSourceException : Exception // TypeDefIndex: 1388
	{
		// Constructors
		public EventSourceException(); // 0x0085741C-0x008574A0
		public EventSourceException(string message, Exception innerException); // 0x008574D8-0x00857564
		protected EventSourceException(SerializationInfo info, StreamingContext context); // 0x008575A8-0x00857634
		internal EventSourceException(Exception innerException); // 0x00857974-0x00857B14
	}

	public enum EventLevel // TypeDefIndex: 1389
	{
		LogAlways = 0,
		Critical = 1,
		Error = 2,
		Warning = 3,
		Informational = 4,
		Verbose = 5
	}

	[FriendAccessAllowed] // 0x004B88DC-0x004B88EC
	public enum EventTask // TypeDefIndex: 1390
	{
		None = 0
	}

	[FriendAccessAllowed] // 0x004B88EC-0x004B88FC
	public enum EventOpcode // TypeDefIndex: 1391
	{
		Info = 0,
		Start = 1,
		Stop = 2,
		DataCollectionStart = 3,
		DataCollectionStop = 4,
		Extension = 5,
		Reply = 6,
		Resume = 7,
		Suspend = 8,
		Send = 9,
		Receive = 240
	}

	[FriendAccessAllowed] // 0x004B88FC-0x004B890C
	public enum EventChannel : byte // TypeDefIndex: 1392
	{
		None = 0,
		Admin = 16,
		Operational = 17,
		Analytic = 18,
		Debug = 19
	}

	[Flags] // 0x004B890C-0x004B891C
	public enum EventKeywords : long // TypeDefIndex: 1393
	{
		All = -1,
		None = 0,
		MicrosoftTelemetry = 562949953421312,
		WdiContext = 562949953421312,
		WdiDiagnostic = 1125899906842624,
		Sqm = 2251799813685248,
		AuditFailure = 4503599627370496,
		CorrelationHint = 4503599627370496,
		AuditSuccess = 9007199254740992,
		EventLogClassic = 36028797018963968
	}
}

[CompilerGenerated] // 0x004B891C-0x004B892C
internal sealed class _PrivateImplementationDetails_ // TypeDefIndex: 1394
{
	// Fields
	internal static readonly __StaticArrayInitTypeSize_72 _0588059ACBD52F7EA2835882F977A9CF72EB9775; // 0x00 // Starts with: 20 00 00 00 1e 00 00 00 - Metadata: 0x001E1634
	internal static readonly __StaticArrayInitTypeSize_84 _0A1ADB22C1D3E1F4B2448EE3F27DF9DE63329C4C; // 0x48 // Starts with: 05 00 00 00 0b 00 00 00 - Metadata: 0x001E167C
	internal static readonly __StaticArrayInitTypeSize_240 _121EC59E23F7559B28D338D562528F6299C2DE22; // 0x9C // Starts with: 37 00 00 00 39 00 00 00 - Metadata: 0x001E16D0
	internal static readonly __StaticArrayInitTypeSize_24 _1730F09044E91DB8371B849EFF5E6D17BDE4AED0; // 0x18C // Starts with: 00 12 00 00 00 28 00 00 - Metadata: 0x001E17C0
	internal static readonly __StaticArrayInitTypeSize_4096 _1AEF3D8DF416A46288C91C724CBF7B154D9E5BF3; // 0x1A4 // Starts with: c6 63 63 a5 f8 7c 7c 84 - Metadata: 0x001E17D8
	internal static readonly __StaticArrayInitTypeSize_16 _1FE6CE411858B3D864679DE2139FB081F08BFACD; // 0x11A4 // Starts with: 00 12 00 00 00 28 00 00 - Metadata: 0x001E27D8
	internal static readonly __StaticArrayInitTypeSize_40 _25420D0055076FA8D3E4DD96BC53AE24DE6E619F; // 0x11B4 // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x001E27E8
	internal static readonly __StaticArrayInitTypeSize_1208 _25CF935D2AE9EDF05DD75BCD47FF84D9255D6F6E; // 0x11DC // Starts with: 00 01 41 00 01 01 61 00 - Metadata: 0x001E2810
	internal static readonly __StaticArrayInitTypeSize_42 _29C1A61550F0E3260E1953D4FAD71C256218EF40; // 0x1694 // Starts with: 60 21 61 21 62 21 63 21 - Metadata: 0x001E2CC8
	internal static readonly __StaticArrayInitTypeSize_12 _2B33BEC8C30DFDC49DAFE20D3BDE19487850D717; // 0x16BE // Starts with: 00 31 00 00 00 4e 00 00 - Metadata: 0x001E2CF2
	internal static readonly __StaticArrayInitTypeSize_36 _2BA840FF6020B8FF623DBCB7188248CF853FAF4F; // 0x16CA // Starts with: 90 00 00 00 20 09 00 00 - Metadata: 0x001E2CFE
	internal static readonly __StaticArrayInitTypeSize_72 _2C840AFA48C27B9C05593E468C1232CA1CC74AFD; // 0x16EE // Starts with: 14 00 00 00 23 00 00 00 - Metadata: 0x001E2D22
	internal static readonly __StaticArrayInitTypeSize_16 _2D1DA5BB407F0C11C3B5116196C0C6374D932B20; // 0x1736 // Starts with: 00 0f 00 00 00 28 00 00 - Metadata: 0x001E2D6A
	internal static readonly __StaticArrayInitTypeSize_72 _2F71D2DA12F3CD0A6A112F5A5A75B4FDC6FE8547; // 0x1746 // Starts with: 14 00 00 00 19 00 00 00 - Metadata: 0x001E2D7A
	internal static readonly __StaticArrayInitTypeSize_72 _34476C29F6F81C989CFCA42F7C06E84C66236834; // 0x178E // Starts with: 14 00 00 00 15 00 00 00 - Metadata: 0x001E2DC2
	internal static readonly __StaticArrayInitTypeSize_2382 _35EED060772F2748D13B745DAEC8CD7BD3B87604; // 0x17D6 // Starts with: c0 00 c1 00 c2 00 c3 00 - Metadata: 0x001E2E0A
	internal static readonly __StaticArrayInitTypeSize_38 _375F9AE9769A3D1DA789E9ACFE81F3A1BB14F0D3; // 0x2124 // Starts with: 64 00 44 00 66 00 46 00 - Metadata: 0x001E3758
	internal static readonly __StaticArrayInitTypeSize_1450 _379C06C9E702D31469C29033F0DD63931EB349F5; // 0x214A // Starts with: 1a 01 28 00 17 00 10 00 - Metadata: 0x001E377E
	internal static readonly __StaticArrayInitTypeSize_10 _399BD13E240F33F808CA7940293D6EC4E6FD5A00; // 0x26F4 // Starts with: 3c 00 3e 00 22 00 27 00 - Metadata: 0x001E3D28
	internal static readonly __StaticArrayInitTypeSize_72 _39C9CE73C7B0619D409EF28344F687C1B5C130FE; // 0x26FE // Starts with: 14 00 00 00 1e 00 00 00 - Metadata: 0x001E3D32
	internal static readonly __StaticArrayInitTypeSize_320 _3C53AFB51FEC23491684C7BEDBC6D4E0F409F851; // 0x2746 // Starts with: ff ff 00 00 01 01 02 02 - Metadata: 0x001E3D7A
	internal static readonly __StaticArrayInitTypeSize_64 _3E4BBF9D0CDD2E34F78AA7A9A3979DCE1F7B02BD; // 0x2886 // Starts with: 00 00 00 00 01 00 00 00 - Metadata: 0x001E3EBA
	internal static readonly __StaticArrayInitTypeSize_12 _3E823444D2DFECF0F90B436B88F02A533CB376F1; // 0x28C6 // Starts with: 00 31 00 00 00 4e 00 00 - Metadata: 0x001E3EFA
	internal static readonly __StaticArrayInitTypeSize_72 _3FE6C283BCF384FD2C8789880DFF59664E2AB4A1; // 0x28D2 // Starts with: 18 00 00 00 19 00 00 00 - Metadata: 0x001E3F06
	internal static readonly __StaticArrayInitTypeSize_1665 _40981BAA39513E58B28DCF0103CC04DE2A0A0444; // 0x291A // Starts with: 1a 01 14 00 1d 00 10 00 - Metadata: 0x001E3F4E
	internal static readonly __StaticArrayInitTypeSize_40 _40E7C49413D261F3F38AD3A870C0AC69C8BDA048; // 0x2F9B // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x001E45CF
	internal static readonly __StaticArrayInitTypeSize_72 _421EC7E82F2967DF6CA8C3605514DC6F29EE5845; // 0x2FC3 // Starts with: 22 00 3c 00 3e 00 7c 00 - Metadata: 0x001E45F7
	internal static readonly __StaticArrayInitTypeSize_120 _46232052BC757E030490D851F265FB47FA100902; // 0x300B // Starts with: 01 00 00 00 02 00 00 00 - Metadata: 0x001E463F
	internal static readonly __StaticArrayInitTypeSize_72 _4858DB4AA76D3933F1CA9E6712D4FDB16903F628; // 0x3083 // Starts with: 25 00 00 00 25 00 00 00 - Metadata: 0x001E46B7
	internal static readonly __StaticArrayInitTypeSize_40 _4F7A8890F332B22B8DE0BD29D36FA7364748D76A; // 0x30CB // Starts with: 01 00 00 00 0a 00 00 00 - Metadata: 0x001E46FF
	internal static readonly __StaticArrayInitTypeSize_72 _536422B321459B242ADED7240B7447E904E083E3; // 0x30F3 // Starts with: 14 00 00 00 20 00 00 00 - Metadata: 0x001E4727
	internal static readonly __StaticArrayInitTypeSize_1080 _5382CEF491F422BFE0D6FC46EFAFF9EF9D4C89F3; // 0x313B // Starts with: 00 00 00 00 00 00 f0 bf - Metadata: 0x001E476F
	internal static readonly __StaticArrayInitTypeSize_3 _57218C316B6921E2CD61027A2387EDC31A2D9471; // 0x3573 // Starts with: ef bb bf ff ff ff ff ff - Metadata: 0x001E4BA7
	internal static readonly __StaticArrayInitTypeSize_40 _57F320D62696EC99727E0FE2045A05F1289CC0C6; // 0x3576 // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x001E4BAA
	internal static readonly __StaticArrayInitTypeSize_212 _594A33A00BC4F785DFD43E3C6C44FBA1242CCAF3; // 0x359E // Starts with: 22 a7 24 a7 24 a7 26 a7 - Metadata: 0x001E4BD2
	internal static readonly __StaticArrayInitTypeSize_36 _5BBDF8058D4235C33F2E8DCF76004031B6187A2F; // 0x3672 // Starts with: e0 06 00 00 00 11 00 00 - Metadata: 0x001E4CA6
	internal static readonly __StaticArrayInitTypeSize_288 _5BCD21C341BE6DDF8FFFAE1A23ABA24DCBB612BF; // 0x3696 // Starts with: 03 00 00 00 07 00 00 00 - Metadata: 0x001E4CCA
	internal static readonly __StaticArrayInitTypeSize_72 _5BFE2819B4778217C56416C7585FF0E56EBACD89; // 0x37B6 // Starts with: 14 00 00 00 17 00 00 00 - Metadata: 0x001E4DEA
	internal static readonly __StaticArrayInitTypeSize_128 _609C0E8D8DA86A09D6013D301C86BA8782C16B8C; // 0x37FE // Starts with: 00 00 00 00 00 00 f0 3f - Metadata: 0x001E4E32
	internal static readonly __StaticArrayInitTypeSize_40 _65E32B4E150FD8D24B93B0D42A17F1DAD146162B; // 0x387E // Starts with: 02 00 00 00 03 00 00 00 - Metadata: 0x001E4EB2
	internal static readonly __StaticArrayInitTypeSize_52 _6770974FEF1E98B9C1864370E2B5B786EB0EA39E; // 0x38A6 // Starts with: d0 24 d1 24 d2 24 d3 24 - Metadata: 0x001E4EDA
	internal static readonly __StaticArrayInitTypeSize_72 _67EEAD805D708D9AA4E14BF747E44CED801744F3; // 0x38DA // Starts with: 1c 00 00 00 1d 00 00 00 - Metadata: 0x001E4F0E
	internal static readonly __StaticArrayInitTypeSize_120 _6C71197D228427B2864C69B357FEF73D8C9D59DF; // 0x3922 // Starts with: f0 02 00 00 80 04 00 00 - Metadata: 0x001E4F56
	internal static readonly __StaticArrayInitTypeSize_16 _6CEE45445AFD150B047A5866FFA76AA651CDB7B7; // 0x399A // Starts with: 48 2c 2d b2 c3 90 47 c8 - Metadata: 0x001E4FCE
	internal static readonly __StaticArrayInitTypeSize_76 _6FC754859E4EC74E447048364B216D825C6F8FE7; // 0x39AA // Starts with: a0 10 a1 10 a2 10 a3 10 - Metadata: 0x001E4FDE
	internal static readonly __StaticArrayInitTypeSize_40 _704939CD172085D1295FCE3F1D92431D685D7AA2; // 0x39F6 // Starts with: 01 00 00 00 0a 00 00 00 - Metadata: 0x001E502A
	internal static readonly __StaticArrayInitTypeSize_24 _7088AAE49F0627B72729078DE6E3182DDCF8ED99; // 0x3A1E // Starts with: 00 00 00 00 00 1e 00 00 - Metadata: 0x001E5052
	internal static readonly __StaticArrayInitTypeSize_72 _7341C933A70EAE383CC50C4B945ADB8E08F06737; // 0x3A36 // Starts with: 21 00 00 00 1f 00 00 00 - Metadata: 0x001E506A
	internal static readonly __StaticArrayInitTypeSize_4096 _7F42F2EDC974BE29B2746957416ED1AEFA605F47; // 0x3A7E // Starts with: 51 f4 a7 50 7e 41 65 53 - Metadata: 0x001E50B2
	internal static readonly __StaticArrayInitTypeSize_40 _7FE820C9CF0F0B90445A71F1D262D22E4F0C4C68; // 0x4A7E // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x001E60B2
	internal static readonly __StaticArrayInitTypeSize_21252 _811A927B7DADD378BE60BBDE794B9277AA9B50EC; // 0x4AA6 // Starts with: 00 11 10 11 20 11 30 11 - Metadata: 0x001E60DA
	internal static readonly __StaticArrayInitTypeSize_36 _81917F1E21F3C22B9F916994547A614FB03E968E; // 0x9DAA // Starts with: 00 00 00 00 00 09 00 00 - Metadata: 0x001EB3DE
	internal static readonly __StaticArrayInitTypeSize_40 _823566DA642D6EA356E15585921F2A4CA23D6760; // 0x9DCE // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x001EB402
	internal static readonly __StaticArrayInitTypeSize_12 _82C2A59850B2E85BCE1A45A479537A384DF6098D; // 0x9DF6 // Starts with: 80 04 00 00 10 14 00 00 - Metadata: 0x001EB42A
	internal static readonly __StaticArrayInitTypeSize_44 _82C383F8E6E4D3D87AEBB986A5D0077E8AD157C4; // 0x9E02 // Starts with: e0 06 00 00 00 12 00 00 - Metadata: 0x001EB436
	internal static readonly __StaticArrayInitTypeSize_40 _871B9CF85DB352BAADF12BAE8F19857683E385AC; // 0x9E2E // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x001EB462
	internal static readonly __StaticArrayInitTypeSize_16 _89A040451C8CC5C8FB268BE44BDD74964C104155; // 0x9E56 // Starts with: 00 00 00 00 00 1e 00 00 - Metadata: 0x001EB48A
	internal static readonly __StaticArrayInitTypeSize_40 _8CAA092E783257106251246FF5C97F88D28517A6; // 0x9E66 // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x001EB49A
	internal static readonly __StaticArrayInitTypeSize_2100 _8D231DD55FE1AD7631BBD0905A17D5EB616C2154; // 0x9E8E // Starts with: 1a 01 1c 00 1d 00 0f 00 - Metadata: 0x001EB4C2
	internal static readonly __StaticArrayInitTypeSize_40 _8E10AC2F34545DFBBF3FCBC06055D797A8C99991; // 0xA6C2 // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x001EBCF6
	internal static readonly __StaticArrayInitTypeSize_256 _8F22C9ECE1331718CBD268A9BBFD2F5E451441E3; // 0xA6EA // Starts with: 63 7c 77 7b f2 6b 6f c5 - Metadata: 0x001EBD1E
	internal static readonly __StaticArrayInitTypeSize_12 _93A63E90605400F34B49F0EB3361D23C89164BDA; // 0xA7EA // Starts with: 00 34 00 00 00 a0 00 00 - Metadata: 0x001EBE1E
	internal static readonly __StaticArrayInitTypeSize_72 _94841DD2F330CCB1089BF413E4FA9B04505152E2; // 0xA7F6 // Starts with: 00 00 00 00 14 00 00 00 - Metadata: 0x001EBE2A
	internal static readonly __StaticArrayInitTypeSize_12 _95264589E48F94B7857CFF398FB72A537E13EEE2; // 0xA83E // Starts with: 00 34 00 00 00 a0 00 00 - Metadata: 0x001EBE72
	internal static readonly __StaticArrayInitTypeSize_72 _95C48758CAE1715783472FB073AB158AB8A0AB2A; // 0xA84A // Starts with: 15 00 00 00 16 00 00 00 - Metadata: 0x001EBE7E
	internal static readonly __StaticArrayInitTypeSize_72 _973417296623D8DC6961B09664E54039E44CA5D8; // 0xA892 // Starts with: 14 00 00 00 15 00 00 00 - Metadata: 0x001EBEC6
	internal static readonly __StaticArrayInitTypeSize_4096 _99E2E88877D14C7DDC4E957A0ED7079CA0E9EB24; // 0xA8DA // Starts with: 52 00 00 00 09 00 00 00 - Metadata: 0x001EBF0E
	internal static readonly __StaticArrayInitTypeSize_40 A0074C15377C0C870B055927403EA9FA7A349D12; // 0xB8DA // Starts with: 64 00 00 00 64 00 00 00 - Metadata: 0x001ECF0E
	internal static readonly __StaticArrayInitTypeSize_130 A1319B706116AB2C6D44483F60A7D0ACEA543396; // 0xB902 // Starts with: 41 00 42 00 43 00 44 00 - Metadata: 0x001ECF36
	internal static readonly long A13AA52274D951A18029131A8DDECF76B569A15D; // 0xB988 // Starts with: 2e 00 02 30 0e ff 61 ff - Metadata: 0x001ECFB8
	internal static readonly __StaticArrayInitTypeSize_212 A5444763673307F6828C748D4B9708CFC02B0959; // 0xB990 // Starts with: 23 a7 23 a7 25 a7 25 a7 - Metadata: 0x001ECFC0
	internal static readonly __StaticArrayInitTypeSize_72 A6732F8E7FC23766AB329B492D6BF82E3B33233F; // 0xBA64 // Starts with: 14 00 00 00 1f 00 00 00 - Metadata: 0x001ED094
	internal static readonly __StaticArrayInitTypeSize_174 A705A106D95282BD15E13EEA6B0AF583FF786D83; // 0xBAAC // Starts with: 40 a6 42 a6 42 a6 44 a6 - Metadata: 0x001ED0DC
	internal static readonly __StaticArrayInitTypeSize_1018 A8A491E4CED49AE0027560476C10D933CE70C8DF; // 0xBB5A // Starts with: 01 1e 01 1e 03 1e 03 1e - Metadata: 0x001ED18A
	internal static readonly __StaticArrayInitTypeSize_72 AC791C4F39504D1184B73478943D0636258DA7B1; // 0xBF54 // Starts with: 17 00 00 00 19 00 00 00 - Metadata: 0x001ED584
	internal static readonly __StaticArrayInitTypeSize_52 AFCD4E1211233E99373A3367B23105A3D624B1F2; // 0xBF9C // Starts with: b6 24 b7 24 b8 24 b9 24 - Metadata: 0x001ED5CC
	internal static readonly __StaticArrayInitTypeSize_40 B472ED77CB3B2A66D49D179F1EE2081B70A6AB61; // 0xBFD0 // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x001ED600
	internal static readonly __StaticArrayInitTypeSize_256 B53A2C6DF21FC88B17AEFC40EB895B8D63210CDF; // 0xBFF8 // Starts with: 0e 0e 0e 0e 0e 0e 0e 0e - Metadata: 0x001ED628
	internal static readonly __StaticArrayInitTypeSize_4096 B6002BBF29B2704922EC3BBF0F9EE40ABF185D6B; // 0xC0F8 // Starts with: 63 00 00 00 7c 00 00 00 - Metadata: 0x001ED728
	internal static readonly __StaticArrayInitTypeSize_998 B881DA88BE0B68D8A6B6B6893822586B8B2CFC45; // 0xD0F8 // Starts with: 00 1e 02 1e 02 1e 04 1e - Metadata: 0x001EE728
	internal static readonly __StaticArrayInitTypeSize_162 B8864ACB9DD69E3D42151513C840AAE270BF21C8; // 0xD4DE // Starts with: 1d 00 0e 0e 0e 10 0e 0f - Metadata: 0x001EEB0E
	internal static readonly __StaticArrayInitTypeSize_360 B8F87834C3597B2EEF22BA6D3A392CC925636401; // 0xD580 // Starts with: 00 2c 01 2c 02 2c 03 2c - Metadata: 0x001EEBB0
	internal static readonly __StaticArrayInitTypeSize_72 B9B670F134A59FB1107AF01A9FE8F8E3980B3093; // 0xD6E8 // Starts with: 14 00 00 00 24 00 00 00 - Metadata: 0x001EED18
	internal static readonly __StaticArrayInitTypeSize_72 BEBC9ECC660A13EFC359BA3383411F698CFF25DB; // 0xD730 // Starts with: 14 00 00 00 16 00 00 00 - Metadata: 0x001EED60
	internal static readonly __StaticArrayInitTypeSize_40 BEE1CFE5DFAA408E14CE4AF4DCD824FA2E42DCB7; // 0xD778 // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x001EEDA8
	internal static readonly __StaticArrayInitTypeSize_6 BF5EB60806ECB74EE484105DD9D6F463BF994867; // 0xD7A0 // Starts with: 22 00 3c 00 3e 00 44 00 - Metadata: 0x001EEDD0
	internal static readonly long C1A1100642BA9685B30A84D97348484E14AA1865; // 0xD7A8 // Starts with: 44 00 48 00 4d 00 53 00 - Metadata: 0x001EEDD6
	internal static readonly __StaticArrayInitTypeSize_16 C6F364A0AD934EFED8909446C215752E565D77C1; // 0xD7B0 // Starts with: 09 00 0a 00 0b 00 0c 00 - Metadata: 0x001EEDDE
	internal static readonly __StaticArrayInitTypeSize_174 CE5835130F5277F63D716FC9115526B0AC68FFAD; // 0xD7C0 // Starts with: 41 a6 41 a6 43 a6 43 a6 - Metadata: 0x001EEDEE
	internal static readonly __StaticArrayInitTypeSize_6 CE93C35B755802BC4B3D180716B048FC61701EF7; // 0xD86E // Starts with: 20 00 3c 00 3e 00 78 a4 - Metadata: 0x001EEE9C
	internal static readonly __StaticArrayInitTypeSize_256 D002CBBE1FF33721AF7C4D1D3ECAD1B7DB5258B7; // 0xD874 // Starts with: 78 a4 6a d7 56 b7 c7 e8 - Metadata: 0x001EEEA2
	internal static readonly __StaticArrayInitTypeSize_32 D117188BE8D4609C0D531C51B0BB911A4219DEBE; // 0xD974 // Starts with: 70 21 71 21 72 21 73 21 - Metadata: 0x001EEFA2
	internal static readonly __StaticArrayInitTypeSize_44 D78D08081C7A5AD6FBA7A8DC86BCD6D7A577C636; // 0xD994 // Starts with: 00 00 00 00 10 09 00 00 - Metadata: 0x001EEFC2
	internal static readonly __StaticArrayInitTypeSize_76 DA19DB47B583EFCF7825D2E39D661D2354F28219; // 0xD9C0 // Starts with: 00 2d 01 2d 02 2d 03 2d - Metadata: 0x001EEFEE
	internal static readonly __StaticArrayInitTypeSize_52 DD3AEFEADB1CD615F3017763F1568179FEE640B0; // 0xDA0C // Starts with: 00 00 00 00 1f 00 00 00 - Metadata: 0x001EF03A
	internal static readonly __StaticArrayInitTypeSize_36 E1827270A5FE1C85F5352A66FD87BA747213D006; // 0xDA40 // Starts with: 00 07 00 00 00 12 00 00 - Metadata: 0x001EF06E
	internal static readonly __StaticArrayInitTypeSize_40 E45BAB43F7D5D038672B3E3431F92E34A7AF2571; // 0xDA64 // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x001EF092
	internal static readonly __StaticArrayInitTypeSize_52 E92B39D8233061927D9ACDE54665E68E7535635A; // 0xDA8C // Starts with: 00 00 00 00 1f 00 00 00 - Metadata: 0x001EF0BA
	internal static readonly __StaticArrayInitTypeSize_12 EA9506959484C55CFE0C139C624DF6060E285866; // 0xDAC0 // Starts with: 80 10 00 00 80 15 00 00 - Metadata: 0x001EF0EE
	internal static readonly __StaticArrayInitTypeSize_262 EB5E9A80A40096AB74D2E226650C7258D7BC5E9D; // 0xDACC // Starts with: 61 2c 61 2c 6b 02 7d 1d - Metadata: 0x001EF0FA
	internal static readonly __StaticArrayInitTypeSize_64 EBF68F411848D603D059DFDEA2321C5A5EA78044; // 0xDBD2 // Starts with: 00 00 00 00 04 00 00 00 - Metadata: 0x001EF200
	internal static readonly __StaticArrayInitTypeSize_72 EC89C317EA2BF49A70EFF5E89C691E34733D7C37; // 0xDC12 // Starts with: 1a 00 00 00 1b 00 00 00 - Metadata: 0x001EF240
	internal static readonly __StaticArrayInitTypeSize_40 F06E829E62F3AFBC045D064E10A4F5DF7C969612; // 0xDC5A // Starts with: ff ff ff ff ff ff ff ff - Metadata: 0x001EF288
	internal static readonly __StaticArrayInitTypeSize_11614 F073AA332018FDA0D572E99448FFF1D6422BD520; // 0xDC82 // Starts with: 00 11 10 11 10 11 10 11 - Metadata: 0x001EF2B0
	internal static readonly __StaticArrayInitTypeSize_120 F34B0E10653402E8F788F8BC3F7CD7090928A429; // 0x109E0 // Starts with: 60 03 00 00 90 04 00 00 - Metadata: 0x001F200E
	internal static readonly __StaticArrayInitTypeSize_72 F37E34BEADB04F34FCC31078A59F49856CA83D5B; // 0x10A58 // Starts with: 15 00 00 00 16 00 00 00 - Metadata: 0x001F2086
	internal static readonly __StaticArrayInitTypeSize_94 F512A9ABF88066AAEB92684F95CC05D8101B462B; // 0x10AA0 // Starts with: 30 2c 31 2c 32 2c 33 2c - Metadata: 0x001F20CE
	internal static readonly __StaticArrayInitTypeSize_12 F8FAABB821300AA500C2CEC6091B3782A7FB44A4; // 0x10AFE // Starts with: 00 34 00 00 00 a5 00 00 - Metadata: 0x001F212C
	internal static readonly __StaticArrayInitTypeSize_2350 FCBD2781A933F0828ED4AAF88FD8B08D76DDD49B; // 0x10B0A // Starts with: e0 00 e1 00 e2 00 e3 00 - Metadata: 0x001F2138

	// Nested types
	private struct __StaticArrayInitTypeSize_3 // TypeDefIndex: 1395
	{
	}

	private struct __StaticArrayInitTypeSize_6 // TypeDefIndex: 1396
	{
	}

	private struct __StaticArrayInitTypeSize_10 // TypeDefIndex: 1397
	{
	}

	private struct __StaticArrayInitTypeSize_12 // TypeDefIndex: 1398
	{
	}

	private struct __StaticArrayInitTypeSize_16 // TypeDefIndex: 1399
	{
	}

	private struct __StaticArrayInitTypeSize_24 // TypeDefIndex: 1400
	{
	}

	private struct __StaticArrayInitTypeSize_32 // TypeDefIndex: 1401
	{
	}

	private struct __StaticArrayInitTypeSize_36 // TypeDefIndex: 1402
	{
	}

	private struct __StaticArrayInitTypeSize_38 // TypeDefIndex: 1403
	{
	}

	private struct __StaticArrayInitTypeSize_40 // TypeDefIndex: 1404
	{
	}

	private struct __StaticArrayInitTypeSize_42 // TypeDefIndex: 1405
	{
	}

	private struct __StaticArrayInitTypeSize_44 // TypeDefIndex: 1406
	{
	}

	private struct __StaticArrayInitTypeSize_52 // TypeDefIndex: 1407
	{
	}

	private struct __StaticArrayInitTypeSize_64 // TypeDefIndex: 1408
	{
	}

	private struct __StaticArrayInitTypeSize_72 // TypeDefIndex: 1409
	{
	}

	private struct __StaticArrayInitTypeSize_76 // TypeDefIndex: 1410
	{
	}

	private struct __StaticArrayInitTypeSize_84 // TypeDefIndex: 1411
	{
	}

	private struct __StaticArrayInitTypeSize_94 // TypeDefIndex: 1412
	{
	}

	private struct __StaticArrayInitTypeSize_120 // TypeDefIndex: 1413
	{
	}

	private struct __StaticArrayInitTypeSize_128 // TypeDefIndex: 1414
	{
	}

	private struct __StaticArrayInitTypeSize_130 // TypeDefIndex: 1415
	{
	}

	private struct __StaticArrayInitTypeSize_162 // TypeDefIndex: 1416
	{
	}

	private struct __StaticArrayInitTypeSize_174 // TypeDefIndex: 1417
	{
	}

	private struct __StaticArrayInitTypeSize_212 // TypeDefIndex: 1418
	{
	}

	private struct __StaticArrayInitTypeSize_240 // TypeDefIndex: 1419
	{
	}

	private struct __StaticArrayInitTypeSize_256 // TypeDefIndex: 1420
	{
	}

	private struct __StaticArrayInitTypeSize_262 // TypeDefIndex: 1421
	{
	}

	private struct __StaticArrayInitTypeSize_288 // TypeDefIndex: 1422
	{
	}

	private struct __StaticArrayInitTypeSize_320 // TypeDefIndex: 1423
	{
	}

	private struct __StaticArrayInitTypeSize_360 // TypeDefIndex: 1424
	{
	}

	private struct __StaticArrayInitTypeSize_998 // TypeDefIndex: 1425
	{
	}

	private struct __StaticArrayInitTypeSize_1018 // TypeDefIndex: 1426
	{
	}

	private struct __StaticArrayInitTypeSize_1080 // TypeDefIndex: 1427
	{
	}

	private struct __StaticArrayInitTypeSize_1208 // TypeDefIndex: 1428
	{
	}

	private struct __StaticArrayInitTypeSize_1450 // TypeDefIndex: 1429
	{
	}

	private struct __StaticArrayInitTypeSize_1665 // TypeDefIndex: 1430
	{
	}

	private struct __StaticArrayInitTypeSize_2100 // TypeDefIndex: 1431
	{
	}

	private struct __StaticArrayInitTypeSize_2350 // TypeDefIndex: 1432
	{
	}

	private struct __StaticArrayInitTypeSize_2382 // TypeDefIndex: 1433
	{
	}

	private struct __StaticArrayInitTypeSize_4096 // TypeDefIndex: 1434
	{
	}

	private struct __StaticArrayInitTypeSize_11614 // TypeDefIndex: 1435
	{
	}

	private struct __StaticArrayInitTypeSize_21252 // TypeDefIndex: 1436
	{
	}

	// Methods
	internal static uint ComputeStringHash(string s); // 0x009D40BC-0x009D413C
}

namespace System.Reflection.Emit
{
	[Serializable]
	[ComVisible] // 0x004B892C-0x004B897C
	[Obsolete] // 0x004B892C-0x004B897C
	public sealed class UnmanagedMarshal // TypeDefIndex: 1437
	{
		// Constructors
		internal UnmanagedMarshal(); // 0x00BE7464-0x00BE74A4
	}

	[ComVisible] // 0x004B897C-0x004B8990
	public sealed class DynamicMethod : MethodInfo // TypeDefIndex: 1438
	{
		// Properties
		public override MethodAttributes Attributes { get; } // 0x00BE4B74-0x00BE4BB4 
		public override Type DeclaringType { get; } // 0x00BE4BB4-0x00BE4BF4 
		public override RuntimeMethodHandle MethodHandle { get; } // 0x00BE4BF4-0x00BE4C34 
		public override string Name { get; } // 0x00BE4C34-0x00BE4C74 
		public override Type ReflectedType { get; } // 0x00BE4C74-0x00BE4CB4 
	
		// Methods
		public override object[] GetCustomAttributes(bool inherit); // 0x00BE4CB4-0x00BE4CF4
		public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00BE4CF4-0x00BE4D34
		public override MethodImplAttributes GetMethodImplementationFlags(); // 0x00BE4D34-0x00BE4D74
		public override ParameterInfo[] GetParameters(); // 0x00BE4D74-0x00BE4DB4
		public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x00BE4DB4-0x00BE4DF4
		public override bool IsDefined(Type attributeType, bool inherit); // 0x00BE4DF4-0x00BE4E34
	}
}

namespace Unity
{
	internal sealed class ThrowStub : ObjectDisposedException // TypeDefIndex: 1439
	{
		// Methods
		public static void ThrowNotSupportedException(); // 0x00E8D804-0x00E8E868
	}
}

namespace System
{
	internal class __Il2CppComObject // TypeDefIndex: 1440
	{
		// Methods
		~__Il2CppComObject(); // 0x00E8D7BC-0x00E8D804
	}

	internal sealed class __Il2CppComDelegate : __Il2CppComObject // TypeDefIndex: 1441
	{
		// Methods
		~__Il2CppComDelegate(); // 0x00E8D7B8-0x00E8D7BC
	}
}

internal static class SR // TypeDefIndex: 1443
{
	// Methods
	internal static string GetString(string name, params /* 0x004BE14C-0x004BE15C */ object[] args); // 0x00BF0D60-0x00BF0DE0
	internal static string GetString(CultureInfo culture, string name, params /* 0x004BE15C-0x004BE16C */ object[] args); // 0x00BF0DE0-0x00BF0DE8
	internal static string GetString(string name); // 0x00BF0DE8-0x00BF0DEC
}

namespace System
{
	internal static class IriHelper // TypeDefIndex: 1444
	{
		// Methods
		internal static bool CheckIriUnicodeRange(char unicode, bool isQuery); // 0x00BF58C4-0x00BF591C
		internal static bool CheckIriUnicodeRange(char highSurr, char lowSurr, ref bool surrogatePair, bool isQuery); // 0x00BF591C-0x00BF5DE0
		internal static bool CheckIsReserved(char ch, UriComponents component); // 0x00BF5DE0-0x00BF5F30
		internal static unsafe string EscapeUnescapeIri(char* pInput, int start, int end, UriComponents component); // 0x00BF5F30-0x00BF66FC
	}

	[Serializable]
	[TypeConverter] // 0x004BDA68-0x004BDACC
	public class Uri : ISerializable // TypeDefIndex: 1445
	{
		// Fields
		public static readonly string UriSchemeFile; // 0x00
		public static readonly string UriSchemeFtp; // 0x08
		public static readonly string UriSchemeGopher; // 0x10
		public static readonly string UriSchemeHttp; // 0x18
		public static readonly string UriSchemeHttps; // 0x20
		internal static readonly string UriSchemeWs; // 0x28
		internal static readonly string UriSchemeWss; // 0x30
		public static readonly string UriSchemeMailto; // 0x38
		public static readonly string UriSchemeNews; // 0x40
		public static readonly string UriSchemeNntp; // 0x48
		public static readonly string UriSchemeNetTcp; // 0x50
		public static readonly string UriSchemeNetPipe; // 0x58
		public static readonly string SchemeDelimiter; // 0x60
		private const int c_Max16BitUtf8SequenceLength = 12; // Metadata: 0x001F2A66
		internal const int c_MaxUriBufferSize = 65520; // Metadata: 0x001F2A6A
		private const int c_MaxUriSchemeName = 1024; // Metadata: 0x001F2A6E
		private string m_String; // 0x10
		private string m_originalUnicodeString; // 0x18
		private UriParser m_Syntax; // 0x20
		private string m_DnsSafeHost; // 0x28
		private Flags m_Flags; // 0x30
		private UriInfo m_Info; // 0x38
		private bool m_iriParsing; // 0x40
		private static bool s_ConfigInitialized; // 0x68
		private static bool s_ConfigInitializing; // 0x69
		private static UriIdnScope s_IdnScope; // 0x6C
		private static bool s_IriParsing; // 0x70
		private static bool useDotNetRelativeOrAbsolute; // 0x71
		private const UriKind DotNetRelativeOrAbsolute = (UriKind) 300; // Metadata: 0x001F2A72
		internal static readonly bool IsWindowsFileSystem; // 0x72
		private static object s_initLock; // 0x78
		private const UriFormat V1ToStringUnescape = (UriFormat) 32767; // Metadata: 0x001F2A76
		internal const char c_DummyChar = '\xffff'; // Metadata: 0x001F2A7A
		internal const char c_EOL = '\xfffe'; // Metadata: 0x001F2A7C
		internal static readonly char[] HexLowerChars; // 0x80
		private static readonly char[] _WSchars; // 0x88
	
		// Properties
		private bool IsImplicitFile { get; } // 0x00F4BB6C-0x00F4BB78 
		private bool IsUncOrDosPath { get; } // 0x00F4BB78-0x00F4BB88 
		private bool IsDosPath { get; } // 0x00F4BB88-0x00F4BB94 
		private bool IsUncPath { get; } // 0x00F4BB94-0x00F4BBA0 
		private Flags HostType { get; } // 0x00F4BBA0-0x00F4BBAC 
		private UriParser Syntax { get; } // 0x00F4BBAC-0x00F4BBB4 
		private bool IsNotAbsoluteUri { get; } // 0x00F4BBB4-0x00F4BBC4 
		private bool AllowIdn { get; } // 0x00F4BC78-0x00F4BD54 
		internal bool UserDrivenParsing { get; } // 0x00F4BE68-0x00F4BE74 
		private ushort SecuredPathIndex { get; } // 0x00F4BE88-0x00F4BEEC 
		public string AbsolutePath { get; } // 0x00F4F3CC-0x00F4F4C0 
		private string PrivateAbsolutePath { get; } // 0x00F4F4C0-0x00F4F57C 
		public string AbsoluteUri { get; } // 0x00F4F584-0x00F4F698 
		public bool IsFile { get; } // 0x00F4F698-0x00F4F76C 
		public bool IsLoopback { get; } // 0x00F4F76C-0x00F4F81C 
		public string PathAndQuery { get; } // 0x00F4F81C-0x00F4F918 
		public bool IsUnc { get; } // 0x00F4F918-0x00F4F9BC 
		private static object InitializeLock { get; } // 0x00F4F9D8-0x00F4FAB8 
		public int Port { get; } // 0x00F4FC70-0x00F4FD68 
		public string Fragment { get; } // 0x00F4FD68-0x00F4FE80 
		public string Scheme { get; } // 0x00F4FE80-0x00F4FF20 
		private bool OriginalStringSwitched { get; } // 0x00F4FF20-0x00F4FF74 
		public string OriginalString { get; } // 0x00F4E6CC-0x00F4E700 
		public string DnsSafeHost { get; } // 0x00F4FF74-0x00F501C4 
		public bool IsAbsoluteUri { get; } // 0x00F4D948-0x00F4D958 
		public bool UserEscaped { get; } // 0x00F502AC-0x00F502B8 
	
		// Nested types
		[Flags] // 0x004BDACC-0x004BDADC
		private enum Flags : ulong // TypeDefIndex: 1446
		{
			Zero = 0,
			HostNotParsed = 0,
			SchemeNotCanonical = 1,
			UserNotCanonical = 2,
			HostNotCanonical = 4,
			PortNotCanonical = 8,
			PathNotCanonical = 16,
			QueryNotCanonical = 32,
			FragmentNotCanonical = 64,
			CannotDisplayCanonical = 127,
			E_UserNotCanonical = 128,
			E_HostNotCanonical = 256,
			E_PortNotCanonical = 512,
			E_PathNotCanonical = 1024,
			E_QueryNotCanonical = 2048,
			E_FragmentNotCanonical = 4096,
			E_CannotDisplayCanonical = 8064,
			ShouldBeCompressed = 8192,
			FirstSlashAbsent = 16384,
			BackslashInPath = 32768,
			IndexMask = 65535,
			IPv6HostType = 65536,
			IPv4HostType = 131072,
			DnsHostType = 196608,
			UncHostType = 262144,
			BasicHostType = 327680,
			UnusedHostType = 393216,
			HostTypeMask = 458752,
			UnknownHostType = 458752,
			UserEscaped = 524288,
			AuthorityFound = 1048576,
			HasUserInfo = 2097152,
			LoopbackHost = 4194304,
			NotDefaultPort = 8388608,
			UserDrivenParsing = 16777216,
			CanonicalDnsHost = 33554432,
			ErrorOrParsingRecursion = 67108864,
			DosPath = 134217728,
			UncPath = 268435456,
			ImplicitFile = 536870912,
			MinimalUriInfoSet = 1073741824,
			AllUriInfoSet = 2147483648,
			IdnHost = 4294967296,
			HasUnicode = 8589934592,
			HostUnicodeNormalized = 17179869184,
			RestUnicodeNormalized = 34359738368,
			UnicodeHost = 68719476736,
			IntranetUri = 137438953472,
			UseOrigUncdStrOffset = 274877906944,
			UserIriCanonical = 549755813888,
			PathIriCanonical = 1099511627776,
			QueryIriCanonical = 2199023255552,
			FragmentIriCanonical = 4398046511104,
			IriCanonical = 8246337208320,
			CompressedSlashes = 17592186044416
		}
	
		private class UriInfo // TypeDefIndex: 1447
		{
			// Fields
			public string Host; // 0x10
			public string ScopeId; // 0x18
			public string String; // 0x20
			public Offset Offset; // 0x28
			public string DnsSafeHost; // 0x38
			public MoreInfo MoreInfo; // 0x40
	
			// Constructors
			public UriInfo(); // 0x00F52BEC-0x00F52BF4
		}
	
		private struct Offset // TypeDefIndex: 1448
		{
			// Fields
			public ushort Scheme; // 0x00
			public ushort User; // 0x02
			public ushort Host; // 0x04
			public ushort PortValue; // 0x06
			public ushort Path; // 0x08
			public ushort Query; // 0x0A
			public ushort Fragment; // 0x0C
			public ushort End; // 0x0E
		}
	
		private class MoreInfo // TypeDefIndex: 1449
		{
			// Fields
			public string Path; // 0x10
			public string Query; // 0x18
			public string Fragment; // 0x20
			public string AbsoluteUri; // 0x28
			public int Hash; // 0x30
			public string RemoteUrl; // 0x38
	
			// Constructors
			public MoreInfo(); // 0x00F4F57C-0x00F4F584
		}
	
		[Flags] // 0x004BDADC-0x004BDAEC
		private enum Check // TypeDefIndex: 1450
		{
			None = 0,
			EscapedCanonical = 1,
			DisplayCanonical = 2,
			DotSlashAttn = 4,
			FoundNonAscii = 8,
			BackslashInPath = 16,
			ReservedFound = 32,
			NotIriCanonical = 64,
			DotSlashEscaped = 128
		}
	
		// Constructors
		public Uri(string uriString); // 0x00F4D53C-0x00F4D5E8
		public Uri(string uriString, UriKind uriKind); // 0x00F4D7B4-0x00F4D864
		public Uri(Uri baseUri, string relativeUri); // 0x00F4D864-0x00F4D948
		public Uri(Uri baseUri, Uri relativeUri); // 0x00F4E124-0x00F4E324
		protected Uri(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x00F4F1E8-0x00F4F2EC
		private Uri(Flags flags, UriParser uriParser, string uri); // 0x00F58F50-0x00F58F94
		static Uri(); // 0x00F58F94-0x00F59280
	
		// Methods
		internal static bool IriParsingStatic(UriParser syntax); // 0x00F4BBC4-0x00F4BC58
		private bool AllowIdnStatic(UriParser syntax, Flags flags); // 0x00F4BD64-0x00F4BE54
		private bool IsIntranet(string schemeHost); // 0x00F4BE60-0x00F4BE68
		private void SetUserDrivenParsing(); // 0x00F4BE74-0x00F4BE88
		private bool NotAny(Flags flags); // 0x00F4BD54-0x00F4BD64
		private bool InFact(Flags flags); // 0x00F4BEEC-0x00F4BEFC
		private static bool StaticNotAny(Flags allFlags, Flags checkFlags); // 0x00F4BE54-0x00F4BE60
		private static bool StaticInFact(Flags allFlags, Flags checkFlags); // 0x00F4BEFC-0x00F4BF08
		private UriInfo EnsureUriInfo(); // 0x00F4BF08-0x00F4BF38
		private void EnsureParseRemaining(); // 0x00F4C4E8-0x00F4C4F8
		private void EnsureHostString(bool allowDnsOptimization); // 0x00F4D0C8-0x00F4D130
		private void CreateUri(Uri baseUri, string relativeUri, bool dontEscape); // 0x00F4D958-0x00F4DAE4
		private static ParsingError GetCombinedString(Uri baseUri, string relativeStr, bool dontEscape, ref string result); // 0x00F4E324-0x00F4E588
		private static UriFormatException GetException(ParsingError err); // 0x00F4F0C4-0x00F4F1E0
		void ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x00F4F2EC-0x00F4F2F0
		protected void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x00F4F2F0-0x00F4F3C8
		private static bool StaticIsFile(UriParser syntax); // 0x00F4F9BC-0x00F4F9D8
		private static void InitializeUriConfig(); // 0x00F4FAB8-0x00F4FC70
		internal static bool IsGenDelim(char ch); // 0x00F502B8-0x00F50304
		public static bool IsHexDigit(char character); // 0x00F50304-0x00F50340
		public static int FromHex(char digit); // 0x00F50340-0x00F5041C
		public override int GetHashCode(); // 0x00F5041C-0x00F50570
		public override string ToString(); // 0x00F50634-0x00F506FC
		public static bool operator ==(Uri uri1, Uri uri2); // 0x00F50910-0x00F50948
		public static bool operator !=(Uri uri1, Uri uri2); // 0x00F4DF98-0x00F4DFE4
		public override bool Equals(object comparand); // 0x00F50948-0x00F50ECC
		private static ParsingError ParseScheme(string uriString, ref Flags flags, ref UriParser syntax); // 0x00F50FA4-0x00F51098
		internal UriFormatException ParseMinimal(); // 0x00F515BC-0x00F5164C
		private ParsingError PrivateParseMinimal(); // 0x00F5164C-0x00F51C90
		private void PrivateParseMinimalIri(string newHost, ushort idx); // 0x00F52B08-0x00F52BEC
		private void CreateUriInfo(Flags cF); // 0x00F4BF38-0x00F4C4E8
		private void CreateHostString(); // 0x00F4D130-0x00F4D53C
		private static string CreateHostStringHelper(string str, ushort idx, ushort end, ref Flags flags, ref string scopeId); // 0x00F53070-0x00F53264
		private void GetHostViaCustomSyntax(); // 0x00F52BF4-0x00F53070
		internal string GetParts(UriComponents uriParts, UriFormat formatAs); // 0x00F4F3C8-0x00F4F3CC
		private string GetEscapedParts(UriComponents uriParts); // 0x00F53E20-0x00F53EF8
		private string GetUnescapedParts(UriComponents uriParts, UriFormat formatAs); // 0x00F5531C-0x00F553F4
		private string ReCreateParts(UriComponents parts, ushort nonCanonical, UriFormat formatAs); // 0x00F544AC-0x00F5531C
		private string GetUriPartsFromUserString(UriComponents uriParts); // 0x00F53EF8-0x00F544AC
		private void ParseRemaining(); // 0x00F4C4F8-0x00F4D0C8
		private static unsafe ushort ParseSchemeCheckImplicitFile(char* uriString, ushort length, ref ParsingError err, ref Flags flags, ref UriParser syntax); // 0x00F51098-0x00F515BC
		private static unsafe bool CheckKnownSchemes(long* lptr, ushort nChars, ref UriParser syntax); // 0x00F55B8C-0x00F56184
		private static unsafe ParsingError CheckSchemeSyntax(char* ptr, ushort length, ref UriParser syntax); // 0x00F4E588-0x00F4E6CC
		private unsafe ushort CheckAuthorityHelper(char* pString, ushort idx, ushort length, ref ParsingError err, ref Flags flags, UriParser syntax, ref string newHost); // 0x00F51D0C-0x00F52B08
		private unsafe void CheckAuthorityHelperHandleDnsIri(char* pString, ushort start, int end, int startInput, bool iriParsing, bool hasUnicode, UriParser syntax, string userInfoString, ref Flags flags, ref bool justNormalized, ref string newHost, ref ParsingError err); // 0x00F5642C-0x00F567B4
		private unsafe void CheckAuthorityHelperHandleAnyHostIri(char* pString, int startInput, int end, bool iriParsing, bool hasUnicode, UriParser syntax, ref Flags flags, ref string newHost, ref ParsingError err); // 0x00F567B4-0x00F56A88
		private void FindEndOfComponent(string input, ref ushort idx, ushort end, char delim); // 0x00F55AD8-0x00F55B38
		private unsafe void FindEndOfComponent(char* str, ref ushort idx, ushort end, char delim); // 0x00F56C18-0x00F56C74
		private unsafe Check CheckCanonical(char* str, ref ushort idx, ushort end, char delim); // 0x00F53264-0x00F53674
		private char[] GetCanonicalPath(char[] dest, ref int pos, UriFormat formatAs); // 0x00F553F4-0x00F55A68
		private static unsafe void UnescapeOnly(char* pch, int start, ref int end, char ch1, char ch2, char ch3); // 0x00F56D44-0x00F56F7C
		private static char[] Compress(char[] dest, ushort start, ref int destLength, UriParser syntax); // 0x00F56F7C-0x00F57454
		internal static int CalculateCaseInsensitiveHashCode(string text); // 0x00F50570-0x00F50634
		private static string CombineUri(Uri basePart, string relativePart, UriFormat uriFormat); // 0x00F4E700-0x00F4F0C4
		private static bool IsLWS(char ch); // 0x00F51C90-0x00F51CD0
		private static bool IsAsciiLetter(char character); // 0x00F51CD8-0x00F51D04
		internal static bool IsAsciiLetterOrDigit(char character); // 0x00F57E90-0x00F57F20
		internal static bool IsBidiControlCharacter(char ch); // 0x00F57F20-0x00F57F68
		internal static unsafe string StripBidiControlCharacter(char* strToClean, int start, int length); // 0x00F56A88-0x00F56C18
		private void CreateThis(string uri, bool dontEscape, UriKind uriKind); // 0x00F4D5E8-0x00F4D7B4
		private void InitializeUri(ParsingError err, UriKind uriKind, out UriFormatException e); // 0x00F57F68-0x00F58468
		private bool CheckForConfigLoad(string data); // 0x00F58468-0x00F58520
		private bool CheckForUnicode(string data); // 0x00F58520-0x00F58650
		private bool CheckForEscapedUnreserved(string data); // 0x00F58650-0x00F5880C
		public static bool TryCreate(string uriString, UriKind uriKind, out Uri result); // 0x00F50ECC-0x00F50FA4
		public string GetComponents(UriComponents components, UriFormat format); // 0x00F53C2C-0x00F53E20
		public static string UnescapeDataString(string stringToUnescape); // 0x00F58DB8-0x00F58F50
		internal string EscapeUnescapeIri(string input, int start, int end, UriComponents component); // 0x00F55B38-0x00F55B8C
		internal static Uri CreateHelper(string uriString, bool dontEscape, UriKind uriKind, ref UriFormatException e); // 0x00F58904-0x00F58B98
		internal static Uri ResolveHelper(Uri baseUri, Uri relativeUri, ref string newUriString, ref bool userEscaped, out UriFormatException e); // 0x00F4DAF0-0x00F4DF98
		private string GetRelativeSerializationString(UriFormat format); // 0x00F58B98-0x00F58DB8
		internal string GetComponentsHelper(UriComponents uriComponents, UriFormat uriFormat); // 0x00F506FC-0x00F50910
		private void CreateThisFromUri(Uri otherUri); // 0x00F4DFE4-0x00F4E118
	}

	[Serializable]
	public class UriFormatException : FormatException, ISerializable // TypeDefIndex: 1451
	{
		// Constructors
		public UriFormatException(); // 0x00F59280-0x00F59288
		public UriFormatException(string textString); // 0x00F4F1E0-0x00F4F1E8
		protected UriFormatException(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x00F59288-0x00F59290
	
		// Methods
		void ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x00F59290-0x00F59298
	}

	public enum UriKind // TypeDefIndex: 1452
	{
		RelativeOrAbsolute = 0,
		Absolute = 1,
		Relative = 2
	}

	[Flags] // 0x004BDAEC-0x004BDAFC
	public enum UriComponents // TypeDefIndex: 1453
	{
		SerializationInfoString = -2147483648,
		Scheme = 1,
		UserInfo = 2,
		Host = 4,
		Port = 8,
		SchemeAndServer = 13,
		Path = 16,
		Query = 32,
		PathAndQuery = 48,
		HttpRequestUrl = 61,
		Fragment = 64,
		AbsoluteUri = 127,
		StrongPort = 128,
		HostAndPort = 132,
		StrongAuthority = 134,
		NormalizedHost = 256,
		KeepDelimiter = 1073741824
	}

	public enum UriFormat // TypeDefIndex: 1454
	{
		UriEscaped = 1,
		Unescaped = 2,
		SafeUnescaped = 3
	}

	public enum UriIdnScope // TypeDefIndex: 1455
	{
		None = 0,
		AllExceptIntranet = 1,
		All = 2
	}

	internal enum ParsingError // TypeDefIndex: 1456
	{
		None = 0,
		BadFormat = 1,
		BadScheme = 2,
		BadAuthority = 3,
		EmptyUriString = 4,
		LastRelativeUriOkErrIndex = 4,
		SchemeLimit = 5,
		SizeLimit = 6,
		MustRootedPath = 7,
		BadHostName = 8,
		NonEmptyHost = 9,
		BadPort = 10,
		BadAuthorityTerminator = 11,
		CannotCreateRelative = 12
	}

	[Flags] // 0x004BDAFC-0x004BDB0C
	internal enum UnescapeMode // TypeDefIndex: 1457
	{
		CopyOnly = 0,
		Escape = 1,
		Unescape = 2,
		EscapeUnescape = 3,
		V1ToStringFlag = 4,
		UnescapeAll = 8,
		UnescapeAllOrThrow = 24
	}

	internal static class UriHelper // TypeDefIndex: 1458
	{
		// Fields
		private static readonly char[] HexUpperChars; // 0x00
	
		// Constructors
		static UriHelper(); // 0x00F59C68-0x00F59CE4
	
		// Methods
		internal static char[] EscapeString(string input, int start, int end, char[] dest, ref int destPos, bool isUriString, char force1, char force2, char rsvd); // 0x00F53674-0x00F53C20
		private static unsafe char[] EnsureDestinationSize(char* pStr, char[] dest, int currentInputPos, short charsToAdd, short minReallocateChars, ref int destPos, int prevInputPos); // 0x00F59298-0x00F593CC
		internal static char[] UnescapeString(string input, int start, int end, char[] dest, ref int destPosition, char rsvd1, char rsvd2, char rsvd3, UnescapeMode unescapeMode, UriParser syntax, bool isQuery); // 0x00F501C4-0x00F502AC
		internal static unsafe char[] UnescapeString(char* pStr, int start, int end, char[] dest, ref int destPosition, char rsvd1, char rsvd2, char rsvd3, UnescapeMode unescapeMode, UriParser syntax, bool isQuery); // 0x00F57454-0x00F57E90
		internal static unsafe void MatchUTF8Sequence(char* pDest, char[] dest, ref int destOffset, char[] unescapedChars, int charCount, byte[] bytes, int byteCount, bool isQuery, bool iriParsing); // 0x00F5976C-0x00F59C68
		internal static void EscapeAsciiChar(char ch, char[] to, ref int pos); // 0x00F593CC-0x00F59518
		internal static char EscapedAscii(char digit, char next); // 0x00F56C74-0x00F56D44
		internal static bool IsNotSafeForUnescape(char ch); // 0x00F596E4-0x00F5976C
		private static bool IsReservedUnreservedOrHash(char c); // 0x00F595E8-0x00F596E4
		internal static bool IsUnreserved(char c); // 0x00F59518-0x00F595E8
		internal static bool Is3986Unreserved(char c); // 0x00F58868-0x00F58904
	}

	public abstract class UriParser // TypeDefIndex: 1459
	{
		// Fields
		private const UriSyntaxFlags SchemeOnlyFlags = UriSyntaxFlags.None | UriSyntaxFlags.MayHavePath; // Metadata: 0x001F2D16
		private static readonly Dictionary<string, UriParser> m_Table; // 0x00
		private static Dictionary<string, UriParser> m_TempTable; // 0x08
		private UriSyntaxFlags m_Flags; // 0x10
		private UriSyntaxFlags m_UpdatableFlags; // 0x14
		private bool m_UpdatableFlagsUsed; // 0x18
		private const UriSyntaxFlags c_UpdatableFlags = UriSyntaxFlags.None | UriSyntaxFlags.UnEscapeDotsAndSlashes; // Metadata: 0x001F2D1A
		private int m_Port; // 0x1C
		private string m_Scheme; // 0x20
		internal const int NoDefaultPort = -1; // Metadata: 0x001F2D1E
		private const int c_InitialTableSize = 25; // Metadata: 0x001F2D22
		internal static UriParser HttpUri; // 0x10
		internal static UriParser HttpsUri; // 0x18
		internal static UriParser WsUri; // 0x20
		internal static UriParser WssUri; // 0x28
		internal static UriParser FtpUri; // 0x30
		internal static UriParser FileUri; // 0x38
		internal static UriParser GopherUri; // 0x40
		internal static UriParser NntpUri; // 0x48
		internal static UriParser NewsUri; // 0x50
		internal static UriParser MailToUri; // 0x58
		internal static UriParser UuidUri; // 0x60
		internal static UriParser TelnetUri; // 0x68
		internal static UriParser LdapUri; // 0x70
		internal static UriParser NetTcpUri; // 0x78
		internal static UriParser NetPipeUri; // 0x80
		internal static UriParser VsMacrosUri; // 0x88
		private static readonly UriQuirksVersion s_QuirksVersion; // 0x90
		private const int c_MaxCapacity = 512; // Metadata: 0x001F2D26
		private const UriSyntaxFlags UnknownV1SyntaxFlags = UriSyntaxFlags.None | UriSyntaxFlags.OptionalAuthority | UriSyntaxFlags.MayHaveUserInfo | UriSyntaxFlags.MayHavePort | UriSyntaxFlags.MayHavePath | UriSyntaxFlags.MayHaveQuery | UriSyntaxFlags.MayHaveFragment | UriSyntaxFlags.AllowEmptyHost | UriSyntaxFlags.AllowUncHost | UriSyntaxFlags.AllowDnsHost | UriSyntaxFlags.AllowIPv4Host | UriSyntaxFlags.AllowIPv6Host | UriSyntaxFlags.AllowAnInternetHost | UriSyntaxFlags.V1_UnknownUri | UriSyntaxFlags.AllowDOSPath | UriSyntaxFlags.PathIsRooted | UriSyntaxFlags.ConvertPathSlashes | UriSyntaxFlags.CompressPath | UriSyntaxFlags.AllowIdn | UriSyntaxFlags.AllowIriParsing; // Metadata: 0x001F2D2A
		private static readonly UriSyntaxFlags HttpSyntaxFlags; // 0x94
		private const UriSyntaxFlags FtpSyntaxFlags = UriSyntaxFlags.None | UriSyntaxFlags.MustHaveAuthority | UriSyntaxFlags.MayHaveUserInfo | UriSyntaxFlags.MayHavePort | UriSyntaxFlags.MayHavePath | UriSyntaxFlags.MayHaveFragment | UriSyntaxFlags.AllowUncHost | UriSyntaxFlags.AllowDnsHost | UriSyntaxFlags.AllowIPv4Host | UriSyntaxFlags.AllowIPv6Host | UriSyntaxFlags.AllowAnInternetHost | UriSyntaxFlags.PathIsRooted | UriSyntaxFlags.ConvertPathSlashes | UriSyntaxFlags.CompressPath | UriSyntaxFlags.CanonicalizeAsFilePath | UriSyntaxFlags.AllowIdn | UriSyntaxFlags.AllowIriParsing; // Metadata: 0x001F2D2E
		private static readonly UriSyntaxFlags FileSyntaxFlags; // 0x98
		private const UriSyntaxFlags VsmacrosSyntaxFlags = UriSyntaxFlags.None | UriSyntaxFlags.MustHaveAuthority | UriSyntaxFlags.MayHavePath | UriSyntaxFlags.MayHaveFragment | UriSyntaxFlags.AllowEmptyHost | UriSyntaxFlags.AllowUncHost | UriSyntaxFlags.AllowDnsHost | UriSyntaxFlags.AllowIPv4Host | UriSyntaxFlags.AllowIPv6Host | UriSyntaxFlags.AllowAnInternetHost | UriSyntaxFlags.FileLikeUri | UriSyntaxFlags.AllowDOSPath | UriSyntaxFlags.ConvertPathSlashes | UriSyntaxFlags.CompressPath | UriSyntaxFlags.CanonicalizeAsFilePath | UriSyntaxFlags.UnEscapeDotsAndSlashes | UriSyntaxFlags.AllowIdn | UriSyntaxFlags.AllowIriParsing; // Metadata: 0x001F2D32
		private const UriSyntaxFlags GopherSyntaxFlags = UriSyntaxFlags.None | UriSyntaxFlags.MustHaveAuthority | UriSyntaxFlags.MayHaveUserInfo | UriSyntaxFlags.MayHavePort | UriSyntaxFlags.MayHavePath | UriSyntaxFlags.MayHaveFragment | UriSyntaxFlags.AllowUncHost | UriSyntaxFlags.AllowDnsHost | UriSyntaxFlags.AllowIPv4Host | UriSyntaxFlags.AllowIPv6Host | UriSyntaxFlags.AllowAnInternetHost | UriSyntaxFlags.PathIsRooted | UriSyntaxFlags.AllowIdn | UriSyntaxFlags.AllowIriParsing; // Metadata: 0x001F2D36
		private const UriSyntaxFlags NewsSyntaxFlags = UriSyntaxFlags.None | UriSyntaxFlags.MayHavePath | UriSyntaxFlags.MayHaveFragment | UriSyntaxFlags.AllowIriParsing; // Metadata: 0x001F2D3A
		private const UriSyntaxFlags NntpSyntaxFlags = UriSyntaxFlags.None | UriSyntaxFlags.MustHaveAuthority | UriSyntaxFlags.MayHaveUserInfo | UriSyntaxFlags.MayHavePort | UriSyntaxFlags.MayHavePath | UriSyntaxFlags.MayHaveFragment | UriSyntaxFlags.AllowUncHost | UriSyntaxFlags.AllowDnsHost | UriSyntaxFlags.AllowIPv4Host | UriSyntaxFlags.AllowIPv6Host | UriSyntaxFlags.AllowAnInternetHost | UriSyntaxFlags.PathIsRooted | UriSyntaxFlags.AllowIdn | UriSyntaxFlags.AllowIriParsing; // Metadata: 0x001F2D3E
		private const UriSyntaxFlags TelnetSyntaxFlags = UriSyntaxFlags.None | UriSyntaxFlags.MustHaveAuthority | UriSyntaxFlags.MayHaveUserInfo | UriSyntaxFlags.MayHavePort | UriSyntaxFlags.MayHavePath | UriSyntaxFlags.MayHaveFragment | UriSyntaxFlags.AllowUncHost | UriSyntaxFlags.AllowDnsHost | UriSyntaxFlags.AllowIPv4Host | UriSyntaxFlags.AllowIPv6Host | UriSyntaxFlags.AllowAnInternetHost | UriSyntaxFlags.PathIsRooted | UriSyntaxFlags.AllowIdn | UriSyntaxFlags.AllowIriParsing; // Metadata: 0x001F2D42
		private const UriSyntaxFlags LdapSyntaxFlags = UriSyntaxFlags.None | UriSyntaxFlags.MustHaveAuthority | UriSyntaxFlags.MayHaveUserInfo | UriSyntaxFlags.MayHavePort | UriSyntaxFlags.MayHavePath | UriSyntaxFlags.MayHaveQuery | UriSyntaxFlags.MayHaveFragment | UriSyntaxFlags.AllowEmptyHost | UriSyntaxFlags.AllowUncHost | UriSyntaxFlags.AllowDnsHost | UriSyntaxFlags.AllowIPv4Host | UriSyntaxFlags.AllowIPv6Host | UriSyntaxFlags.AllowAnInternetHost | UriSyntaxFlags.PathIsRooted | UriSyntaxFlags.AllowIdn | UriSyntaxFlags.AllowIriParsing; // Metadata: 0x001F2D46
		private const UriSyntaxFlags MailtoSyntaxFlags = UriSyntaxFlags.None | UriSyntaxFlags.MayHaveUserInfo | UriSyntaxFlags.MayHavePort | UriSyntaxFlags.MayHavePath | UriSyntaxFlags.MayHaveQuery | UriSyntaxFlags.MayHaveFragment | UriSyntaxFlags.AllowEmptyHost | UriSyntaxFlags.AllowUncHost | UriSyntaxFlags.AllowDnsHost | UriSyntaxFlags.AllowIPv4Host | UriSyntaxFlags.AllowIPv6Host | UriSyntaxFlags.AllowAnInternetHost | UriSyntaxFlags.MailToLikeUri | UriSyntaxFlags.AllowIdn | UriSyntaxFlags.AllowIriParsing; // Metadata: 0x001F2D4A
		private const UriSyntaxFlags NetPipeSyntaxFlags = UriSyntaxFlags.None | UriSyntaxFlags.MustHaveAuthority | UriSyntaxFlags.MayHavePath | UriSyntaxFlags.MayHaveQuery | UriSyntaxFlags.MayHaveFragment | UriSyntaxFlags.AllowDnsHost | UriSyntaxFlags.AllowIPv4Host | UriSyntaxFlags.AllowIPv6Host | UriSyntaxFlags.AllowAnInternetHost | UriSyntaxFlags.PathIsRooted | UriSyntaxFlags.ConvertPathSlashes | UriSyntaxFlags.CompressPath | UriSyntaxFlags.CanonicalizeAsFilePath | UriSyntaxFlags.UnEscapeDotsAndSlashes | UriSyntaxFlags.AllowIdn | UriSyntaxFlags.AllowIriParsing; // Metadata: 0x001F2D4E
		private const UriSyntaxFlags NetTcpSyntaxFlags = UriSyntaxFlags.None | UriSyntaxFlags.MustHaveAuthority | UriSyntaxFlags.MayHavePort | UriSyntaxFlags.MayHavePath | UriSyntaxFlags.MayHaveQuery | UriSyntaxFlags.MayHaveFragment | UriSyntaxFlags.AllowDnsHost | UriSyntaxFlags.AllowIPv4Host | UriSyntaxFlags.AllowIPv6Host | UriSyntaxFlags.AllowAnInternetHost | UriSyntaxFlags.PathIsRooted | UriSyntaxFlags.ConvertPathSlashes | UriSyntaxFlags.CompressPath | UriSyntaxFlags.CanonicalizeAsFilePath | UriSyntaxFlags.UnEscapeDotsAndSlashes | UriSyntaxFlags.AllowIdn | UriSyntaxFlags.AllowIriParsing; // Metadata: 0x001F2D52
	
		// Properties
		internal string SchemeName { get; } // 0x00F59CE4-0x00F59CEC 
		internal int DefaultPort { get; } // 0x00F59CEC-0x00F59CF4 
		internal static bool ShouldUseLegacyV2Quirks { get; } // 0x00F55A68-0x00F55AD8 
		internal UriSyntaxFlags Flags { get; } // 0x00F5A8D8-0x00F5A8E0 
		internal bool IsSimple { get; } // 0x00F4DAE4-0x00F4DAF0 
	
		// Nested types
		private enum UriQuirksVersion // TypeDefIndex: 1460
		{
			V2 = 2,
			V3 = 3
		}
	
		private class BuiltInUriParser : UriParser // TypeDefIndex: 1461
		{
			// Constructors
			internal BuiltInUriParser(string lwrCaseScheme, int defaultPort, UriSyntaxFlags syntaxFlags); // 0x00F5A848-0x00F5A8D8
		}
	
		// Constructors
		static UriParser(); // 0x00F5A16C-0x00F5A848
		internal UriParser(UriSyntaxFlags flags); // 0x00F5A944-0x00F5A9B8
	
		// Methods
		protected virtual UriParser OnNewUri(); // 0x00F59CF4-0x00F59CF8
		protected virtual void InitializeAndValidate(Uri uri, out UriFormatException parsingError); // 0x00F59CF8-0x00F59D2C
		protected virtual string Resolve(Uri baseUri, Uri relativeUri, out UriFormatException parsingError); // 0x00F59D2C-0x00F59F2C
		protected virtual string GetComponents(Uri uri, UriComponents components, UriFormat format); // 0x00F59F2C-0x00F5A16C
		internal bool NotAny(UriSyntaxFlags flags); // 0x00F51D04-0x00F51D0C
		internal bool InFact(UriSyntaxFlags flags); // 0x00F4BC58-0x00F4BC78
		internal bool IsAllSet(UriSyntaxFlags flags); // 0x00F51CD0-0x00F51CD8
		private bool IsFullMatch(UriSyntaxFlags flags, UriSyntaxFlags expected); // 0x00F5A8E0-0x00F5A944
		internal static UriParser FindOrFetchAsUnknownV1Syntax(string lwrCaseScheme); // 0x00F56184-0x00F5642C
		internal UriParser InternalOnNewUri(); // 0x00F5880C-0x00F5885C
		internal void InternalValidate(Uri thisUri, out UriFormatException parsingError); // 0x00F5885C-0x00F58868
		internal string InternalResolve(Uri thisBaseUri, Uri uriLink, out UriFormatException parsingError); // 0x00F4E118-0x00F4E124
		internal string InternalGetComponents(Uri thisUri, UriComponents uriComponents, UriFormat uriFormat); // 0x00F53C20-0x00F53C2C
	}

	internal class DomainNameHelper // TypeDefIndex: 1462
	{
		// Methods
		internal static string ParseCanonicalName(string str, int start, int end, ref bool loopback); // 0x00BF2890-0x00BF2A2C
		internal static unsafe bool IsValid(char* name, ushort pos, ref int returnedEnd, ref bool notCanonical, bool notImplicitFile); // 0x00BF2A2C-0x00BF2BAC
		internal static unsafe bool IsValidByIri(char* name, ushort pos, ref int returnedEnd, ref bool notCanonical, bool notImplicitFile); // 0x00BF2C5C-0x00BF2E48
		internal static unsafe string IdnEquivalent(char* hostname, int start, int end, ref bool allAscii, ref bool atLeastOneValidIdn); // 0x00BF2E48-0x00BF30DC
		internal static unsafe string IdnEquivalent(char* hostname, int start, int end, ref bool allAscii, ref string bidiStrippedHost); // 0x00BF30DC-0x00BF32D4
		private static bool IsIdnAce(string input, int index); // 0x00BF3320-0x00BF33C4
		private static unsafe bool IsIdnAce(char* input, int index); // 0x00BF32D4-0x00BF3320
		internal static unsafe string UnicodeEquivalent(string idnHost, char* hostname, int start, int end); // 0x00BF33C4-0x00BF34EC
		internal static unsafe string UnicodeEquivalent(char* hostname, int start, int end, ref bool allAscii, ref bool atLeastOneValidIdn); // 0x00BF34EC-0x00BF3924
		private static bool IsASCIILetterOrDigit(char character, ref bool notCanonical); // 0x00BF2BAC-0x00BF2BF8
		private static bool IsValidDomainLabelCharacter(char character, ref bool notCanonical); // 0x00BF2BF8-0x00BF2C5C
	}

	internal static class IPv4AddressHelper // TypeDefIndex: 1463
	{
		// Methods
		internal static string ParseCanonicalName(string str, int start, int end, ref bool isLoopback); // 0x00BF3FC0-0x00BF4234
		internal static int ParseHostNumber(string str, int start, int end); // 0x00BF42C4-0x00BF4318
		internal static unsafe bool IsValid(char* name, int start, ref int end, bool allowIPv6, bool notImplicitFile, bool unknownScheme); // 0x00BF43E0-0x00BF4414
		internal static unsafe bool IsValidCanonical(char* name, int start, ref int end, bool allowIPv6, bool notImplicitFile); // 0x00BF4414-0x00BF4550
		internal static unsafe long ParseNonCanonical(char* name, int start, ref int end, bool notImplicitFile); // 0x00BF4550-0x00BF4888
		private static unsafe bool Parse(string name, byte* numbers, int start, int end); // 0x00BF4234-0x00BF42C4
		private static unsafe bool ParseCanonical(string name, byte* numbers, int start, int end); // 0x00BF4318-0x00BF43E0
	}

	internal static class IPv6AddressHelper // TypeDefIndex: 1464
	{
		// Methods
		internal static string ParseCanonicalName(string str, int start, ref bool isLoopback, ref string scopeId); // 0x00BF4888-0x00BF494C
		internal static unsafe string CreateCanonicalName(ushort* numbers); // 0x00BF4E50-0x00BF546C
		private static unsafe KeyValuePair<int, int> FindCompressionRange(ushort* numbers); // 0x00BF546C-0x00BF554C
		private static unsafe bool ShouldHaveIpv4Embedded(ushort* numbers); // 0x00BF554C-0x00BF55DC
		private static unsafe bool InternalIsValid(char* name, int start, ref int end, bool validateStrictAddress); // 0x00BF55DC-0x00BF58B4
		internal static unsafe bool IsValid(char* name, int start, ref int end); // 0x00BF58B4-0x00BF58BC
		internal static unsafe bool IsValidStrict(char* name, int start, ref int end); // 0x00BF58BC-0x00BF58C4
		internal static unsafe bool Parse(string address, ushort* numbers, int start, ref string scopeId); // 0x00BF494C-0x00BF4E50
	}

	internal class UncNameHelper // TypeDefIndex: 1465
	{
		// Methods
		internal static string ParseCanonicalName(string str, int start, int end, ref bool loopback); // 0x00F4B890-0x00F4B898
		internal static unsafe bool IsValid(char* name, ushort start, ref int returnedEnd, bool notImplicitFile); // 0x00F4B898-0x00F4BB6C
	}

	[Flags] // 0x004BDB0C-0x004BDB1C
	internal enum UriSyntaxFlags // TypeDefIndex: 1466
	{
		None = 0,
		MustHaveAuthority = 1,
		OptionalAuthority = 2,
		MayHaveUserInfo = 4,
		MayHavePort = 8,
		MayHavePath = 16,
		MayHaveQuery = 32,
		MayHaveFragment = 64,
		AllowEmptyHost = 128,
		AllowUncHost = 256,
		AllowDnsHost = 512,
		AllowIPv4Host = 1024,
		AllowIPv6Host = 2048,
		AllowAnInternetHost = 3584,
		AllowAnyOtherHost = 4096,
		FileLikeUri = 8192,
		MailToLikeUri = 16384,
		V1_UnknownUri = 65536,
		SimpleUserSyntax = 131072,
		BuiltInSyntax = 262144,
		ParserSchemeOnly = 524288,
		AllowDOSPath = 1048576,
		PathIsRooted = 2097152,
		ConvertPathSlashes = 4194304,
		CompressPath = 8388608,
		CanonicalizeAsFilePath = 16777216,
		UnEscapeDotsAndSlashes = 33554432,
		AllowIdn = 67108864,
		AllowIriParsing = 268435456
	}

	internal enum IOOperation // TypeDefIndex: 1467
	{
		Read = 1,
		Write = 2
	}

	internal delegate void IOAsyncCallback(IOAsyncResult ioares); // TypeDefIndex: 1468; 0x00BF3934-0x00BF3CE8

	internal abstract class IOAsyncResult : IAsyncResult // TypeDefIndex: 1469
	{
		// Fields
		private AsyncCallback async_callback; // 0x10
		private object async_state; // 0x18
		private ManualResetEvent wait_handle; // 0x20
		private bool completed_synchronously; // 0x28
		private bool completed; // 0x29
	
		// Properties
		public AsyncCallback AsyncCallback { get; } // 0x00BF3D50-0x00BF3D58 
		public object AsyncState { get; } // 0x00BF3D58-0x00BF3D60 
		public WaitHandle AsyncWaitHandle { get; } // 0x00BF3D60-0x00BF3E70 
		protected bool CompletedSynchronously { set; } // 0x00BF3E70-0x00BF3E7C
		public bool IsCompleted { get; protected set; } // 0x00BF3E7C-0x00BF3E84 0x00BF3E84-0x00BF3F34
	
		// Constructors
		protected IOAsyncResult(AsyncCallback async_callback, object async_state); // 0x00BF3D18-0x00BF3D50
	
		// Methods
		internal abstract void CompleteDisposed();
	}

	internal class IOSelectorJob : IThreadPoolWorkItem // TypeDefIndex: 1470
	{
		// Fields
		private IOOperation operation; // 0x10
		private IOAsyncCallback callback; // 0x18
		private IOAsyncResult state; // 0x20
	
		// Constructors
		public IOSelectorJob(IOOperation operation, IOAsyncCallback callback, IOAsyncResult state); // 0x00BF3F38-0x00BF3F78
	
		// Methods
		void IThreadPoolWorkItem.ExecuteWorkItem(); // 0x00BF3F78-0x00BF3F9C
		void IThreadPoolWorkItem.MarkAborted(ThreadAbortException tae); // 0x00BF3F9C-0x00BF3FA0
		public void MarkDisposed(); // 0x00BF3FA0-0x00BF3FC0
	}

	internal static class IOSelector // TypeDefIndex: 1471
	{
		// Methods
		public static void Add(IntPtr handle, IOSelectorJob job); // 0x00BF3F34-0x00BF3F38
	}

	public class UriTypeConverter : TypeConverter // TypeDefIndex: 1472
	{
		// Constructors
		public UriTypeConverter(); // 0x00F5A9B8-0x00F5A9C0
	}
}

namespace System.Text.RegularExpressions
{
	[Serializable]
	public class Regex : ISerializable // TypeDefIndex: 1473
	{
		// Fields
		protected internal string pattern; // 0x10
		protected internal RegexRunnerFactory factory; // 0x18
		protected internal RegexOptions roptions; // 0x20
		[NonSerialized]
		private static readonly TimeSpan MaximumMatchTimeout; // 0x00
		[NonSerialized]
		public static readonly TimeSpan InfiniteMatchTimeout; // 0x08
		[System.Runtime.Serialization.OptionalField] // 0x004BE024-0x004BE05C
		protected internal TimeSpan internalMatchTimeout; // 0x28
		[NonSerialized]
		internal static readonly TimeSpan FallbackDefaultMatchTimeout; // 0x10
		[NonSerialized]
		internal static readonly TimeSpan DefaultMatchTimeout; // 0x18
		protected internal Hashtable caps; // 0x30
		protected internal Hashtable capnames; // 0x38
		protected internal string[] capslist; // 0x40
		protected internal int capsize; // 0x48
		internal ExclusiveReference runnerref; // 0x50
		internal SharedReference replref; // 0x58
		internal RegexCode code; // 0x60
		internal bool refsInitialized; // 0x68
		internal static LinkedList<CachedCodeEntry> livecode; // 0x20
		internal static int cacheSize; // 0x28
	
		// Properties
		public RegexOptions Options { get; } // 0x00C287F4-0x00C287FC 
		public TimeSpan MatchTimeout { get; } // 0x00C287FC-0x00C28804 
		public bool RightToLeft { get; } // 0x00C28804-0x00C28810 
	
		// Constructors
		protected Regex(); // 0x00C27364-0x00C273E0
		public Regex(string pattern); // 0x00C273E0-0x00C27468
		public Regex(string pattern, RegexOptions options); // 0x00C27830-0x00C278BC
		private Regex(string pattern, RegexOptions options, TimeSpan matchTimeout, bool useCache); // 0x00C27468-0x00C27830
		protected Regex(SerializationInfo info, StreamingContext context); // 0x00C28358-0x00C284B8
		static Regex(); // 0x00C29294-0x00C293A4
	
		// Methods
		void ISerializable.GetObjectData(SerializationInfo si, StreamingContext context); // 0x00C284B8-0x00C28590
		protected internal static void ValidateMatchTimeout(TimeSpan matchTimeout); // 0x00C278BC-0x00C27A30
		private static TimeSpan InitDefaultMatchTimeout(); // 0x00C28590-0x00C287F4
		public override string ToString(); // 0x00C2881C-0x00C28824
		public bool IsMatch(string input); // 0x00C28824-0x00C288D0
		public bool IsMatch(string input, int startat); // 0x00C288D0-0x00C2898C
		public static Match Match(string input, string pattern); // 0x00C28C68-0x00C28CEC
		public static Match Match(string input, string pattern, RegexOptions options, TimeSpan matchTimeout); // 0x00C28CEC-0x00C28D84
		public Match Match(string input); // 0x00C28D84-0x00C28E30
		public Match Match(string input, int startat); // 0x00C28E30-0x00C28EE0
		protected void InitializeReferences(); // 0x00C27E7C-0x00C27F60
		internal Match Run(bool quick, int prevlen, string input, int beginning, int length, int startat); // 0x00C2898C-0x00C28C68
		private static CachedCodeEntry LookupCachedAndUpdate(string key); // 0x00C27A30-0x00C27C74
		private CachedCodeEntry CacheCode(string key); // 0x00C27F60-0x00C28358
		protected bool UseOptionR(); // 0x00C28810-0x00C2881C
		internal bool UseOptionInvariant(); // 0x00C28EE0-0x00C28EEC
	}

	internal sealed class CachedCodeEntry // TypeDefIndex: 1474
	{
		// Fields
		internal string _key; // 0x10
		internal RegexCode _code; // 0x18
		internal Hashtable _caps; // 0x20
		internal Hashtable _capnames; // 0x28
		internal string[] _capslist; // 0x30
		internal int _capsize; // 0x38
		internal RegexRunnerFactory _factory; // 0x40
		internal ExclusiveReference _runnerref; // 0x48
		internal SharedReference _replref; // 0x50
	
		// Constructors
		internal CachedCodeEntry(string key, Hashtable capnames, string[] capslist, RegexCode code, Hashtable caps, int capsize, ExclusiveReference runner, SharedReference repl); // 0x00C26430-0x00C264A8
	}

	internal sealed class ExclusiveReference // TypeDefIndex: 1475
	{
		// Fields
		private RegexRunner _ref; // 0x10
		private object _obj; // 0x18
		private int _locked; // 0x20
	
		// Constructors
		public ExclusiveReference(); // 0x00C266B0-0x00C266B8
	
		// Methods
		internal object Get(); // 0x00C26550-0x00C265A0
		internal void Release(object obj); // 0x00C265A0-0x00C266B0
	}

	internal sealed class SharedReference // TypeDefIndex: 1476
	{
		// Fields
		private WeakReference _ref; // 0x10
	
		// Constructors
		public SharedReference(); // 0x00F4B824-0x00F4B890
	}

	internal sealed class RegexBoyerMoore // TypeDefIndex: 1477
	{
		// Fields
		internal int[] _positive; // 0x10
		internal int[] _negativeASCII; // 0x18
		internal int[][] _negativeUnicode; // 0x20
		internal string _pattern; // 0x28
		internal int _lowASCII; // 0x30
		internal int _highASCII; // 0x34
		internal bool _rightToLeft; // 0x38
		internal bool _caseInsensitive; // 0x39
		internal CultureInfo _culture; // 0x40
	
		// Constructors
		internal RegexBoyerMoore(string pattern, bool caseInsensitive, bool rightToLeft, CultureInfo culture); // 0x00C293A4-0x00C29894
	
		// Methods
		private bool MatchPattern(string text, int index); // 0x00C29894-0x00C299BC
		internal bool IsMatch(string text, int index, int beglimit, int endlimit); // 0x00C299BC-0x00C29A30
		internal int Scan(string text, int index, int beglimit, int endlimit); // 0x00C29A30-0x00C29D84
		public override string ToString(); // 0x00C29D84-0x00C29D8C
	}

	[Serializable]
	public class Capture // TypeDefIndex: 1478
	{
		// Fields
		internal string _text; // 0x10
		internal int _index; // 0x18
		internal int _length; // 0x1C
	
		// Properties
		public string Value { get; } // 0x00C264E8-0x00C2650C 
	
		// Constructors
		internal Capture(string text, int i, int l); // 0x00C264A8-0x00C264E8
		internal Capture(); // 0x00C26510-0x00C26550
	
		// Methods
		public override string ToString(); // 0x00C2650C-0x00C26510
	}

	internal sealed class RegexCharClass // TypeDefIndex: 1479
	{
		// Fields
		private List<SingleRange> _rangelist; // 0x10
		private StringBuilder _categories; // 0x18
		private bool _canonical; // 0x20
		private bool _negate; // 0x21
		private RegexCharClass _subtractor; // 0x28
		private static readonly string InternalRegexIgnoreCase; // 0x00
		private static readonly string Space; // 0x08
		private static readonly string NotSpace; // 0x10
		private static readonly string Word; // 0x18
		private static readonly string NotWord; // 0x20
		internal static readonly string SpaceClass; // 0x28
		internal static readonly string NotSpaceClass; // 0x30
		internal static readonly string WordClass; // 0x38
		internal static readonly string NotWordClass; // 0x40
		internal static readonly string DigitClass; // 0x48
		internal static readonly string NotDigitClass; // 0x50
		private static Dictionary<string, string> _definedCategories; // 0x58
		private static readonly string[,] _propTable; // 0x60
		private static readonly LowerCaseMapping[] _lcTable; // 0x68
	
		// Properties
		internal bool CanMerge { get; } // 0x00C2E56C-0x00C2E58C 
		internal bool Negate { set; } // 0x00C2E58C-0x00C2E598
	
		// Nested types
		private struct LowerCaseMapping // TypeDefIndex: 1480
		{
			// Fields
			internal char _chMin; // 0x00
			internal char _chMax; // 0x02
			internal int _lcOp; // 0x04
			internal int _data; // 0x08
	
			// Constructors
			internal LowerCaseMapping(char chMin, char chMax, int lcOp, int data); // 0x0058EC28-0x0058EC38
		}
	
		private sealed class SingleRangeComparer : IComparer<SingleRange> // TypeDefIndex: 1481
		{
			// Constructors
			public SingleRangeComparer(); // 0x00C307F4-0x00C307FC
	
			// Methods
			public int Compare(SingleRange x, SingleRange y); // 0x00C307FC-0x00C3083C
		}
	
		private sealed class SingleRange // TypeDefIndex: 1482
		{
			// Fields
			internal char _first; // 0x10
			internal char _last; // 0x12
	
			// Constructors
			internal SingleRange(char first, char last); // 0x00C2EAA4-0x00C2EAE0
		}
	
		// Constructors
		static RegexCharClass(); // 0x00C29D8C-0x00C2E378
		internal RegexCharClass(); // 0x00C2E470-0x00C2E510
		private RegexCharClass(bool negate, List<SingleRange> ranges, StringBuilder categories, RegexCharClass subtraction); // 0x00C2E510-0x00C2E56C
	
		// Methods
		internal void AddChar(char c); // 0x00C2E598-0x00C2E5A0
		internal void AddCharClass(RegexCharClass cc); // 0x00C2E680-0x00C2E7C8
		private void AddSet(string set); // 0x00C2E898-0x00C2EAA4
		internal void AddSubtraction(RegexCharClass sub); // 0x00C2EAE0-0x00C2EAE8
		internal void AddRange(char first, char last); // 0x00C2E5A0-0x00C2E680
		internal void AddCategoryFromName(string categoryName, bool invert, bool caseInsensitive, string pattern); // 0x00C2EAE8-0x00C2ECF8
		private void AddCategory(string category); // 0x00C2F020-0x00C2F03C
		internal void AddLowercase(CultureInfo culture); // 0x00C2F03C-0x00C2F14C
		private void AddLowercaseRange(char chMin, char chMax, CultureInfo culture); // 0x00C2F14C-0x00C2F3B4
		internal void AddWord(bool ecma, bool negate); // 0x00C2F3B4-0x00C2F49C
		internal void AddSpace(bool ecma, bool negate); // 0x00C2F49C-0x00C2F584
		internal void AddDigit(bool ecma, bool negate, string pattern); // 0x00C2F584-0x00C2F634
		internal static char SingletonChar(string set); // 0x00C2F634-0x00C2F650
		internal static bool IsMergeable(string charClass); // 0x00C2F650-0x00C2F704
		internal static bool IsEmpty(string charClass); // 0x00C2F798-0x00C2F864
		internal static bool IsSingleton(string set); // 0x00C2F864-0x00C2F984
		internal static bool IsSingletonInverse(string set); // 0x00C2F984-0x00C2FAA8
		private static bool IsSubtraction(string charClass); // 0x00C2F730-0x00C2F798
		internal static bool IsNegated(string set); // 0x00C2F704-0x00C2F730
		internal static bool IsECMAWordChar(char ch); // 0x00C2FAA8-0x00C2FB18
		internal static bool IsWordChar(char ch); // 0x00C2FB90-0x00C2FC24
		internal static bool CharInClass(char ch, string set); // 0x00C2FB18-0x00C2FB90
		internal static bool CharInClassRecursive(char ch, string set, int start); // 0x00C2FC24-0x00C2FD70
		private static bool CharInClassInternal(char ch, string set, int start, int mySetLength, int myCategoryLength); // 0x00C2FD70-0x00C2FE94
		private static bool CharInCategory(char ch, string set, int start, int mySetLength, int myCategoryLength); // 0x00C2FE94-0x00C30050
		private static bool CharInCategoryGroup(char ch, UnicodeCategory chcategory, string category, ref int i); // 0x00C30050-0x00C30130
		private static string NegateCategory(string category); // 0x00C2E378-0x00C2E470
		internal static RegexCharClass Parse(string charClass); // 0x00C30130-0x00C30198
		private static RegexCharClass ParseRecursive(string charClass, int start); // 0x00C30198-0x00C303DC
		private int RangeCount(); // 0x00C2E7C8-0x00C2E81C
		internal string ToStringClass(); // 0x00C303DC-0x00C305A4
		private SingleRange GetRangeAt(int i); // 0x00C2E81C-0x00C2E898
		private void Canonicalize(); // 0x00C305A4-0x00C307F4
		private static string SetFromProperty(string capname, bool invert, string pattern); // 0x00C2ECF8-0x00C2F020
	}

	internal sealed class RegexCode // TypeDefIndex: 1483
	{
		// Fields
		internal int[] _codes; // 0x10
		internal string[] _strings; // 0x18
		internal int _trackcount; // 0x20
		internal Hashtable _caps; // 0x28
		internal int _capsize; // 0x30
		internal RegexPrefix _fcPrefix; // 0x38
		internal RegexBoyerMoore _bmPrefix; // 0x40
		internal int _anchors; // 0x48
		internal bool _rightToLeft; // 0x4C
	
		// Constructors
		internal RegexCode(int[] codes, List<string> stringlist, int trackcount, Hashtable caps, int capsize, RegexBoyerMoore bmPrefix, RegexPrefix fcPrefix, int anchors, bool rightToLeft); // 0x00C3083C-0x00C30940
	
		// Methods
		internal static bool OpcodeBacktracks(int Op); // 0x00C30940-0x00C30960
	}

	internal sealed class RegexFCD // TypeDefIndex: 1484
	{
		// Fields
		private int[] _intStack; // 0x10
		private int _intDepth; // 0x18
		private RegexFC[] _fcStack; // 0x20
		private int _fcDepth; // 0x28
		private bool _skipAllChildren; // 0x2C
		private bool _skipchild; // 0x2D
		private bool _failed; // 0x2E
	
		// Constructors
		private RegexFCD(); // 0x00C30D90-0x00C30E0C
	
		// Methods
		internal static RegexPrefix FirstChars(RegexTree t); // 0x00C30C64-0x00C30D90
		internal static RegexPrefix Prefix(RegexTree tree); // 0x00C30FC0-0x00C31230
		internal static int Anchors(RegexTree tree); // 0x00C31300-0x00C31468
		private static int AnchorFromType(int type); // 0x00C31468-0x00C314D4
		private void PushInt(int I); // 0x00C314D4-0x00C315BC
		private bool IntIsEmpty(); // 0x00C315BC-0x00C315CC
		private int PopInt(); // 0x00C315CC-0x00C3161C
		private void PushFC(RegexFC fc); // 0x00C3161C-0x00C31728
		private bool FCIsEmpty(); // 0x00C31728-0x00C31738
		private RegexFC PopFC(); // 0x00C31738-0x00C31788
		private RegexFC TopFC(); // 0x00C31788-0x00C317D4
		private RegexFC RegexFCFromRegexTree(RegexTree tree); // 0x00C30E0C-0x00C30F80
		private void SkipChild(); // 0x00C31C50-0x00C31C5C
		private void CalculateFC(int NodeType, RegexNode node, int CurIndex); // 0x00C317D4-0x00C31C50
	}

	internal sealed class RegexFC // TypeDefIndex: 1485
	{
		// Fields
		internal RegexCharClass _cc; // 0x10
		internal bool _nullable; // 0x18
		internal bool _caseInsensitive; // 0x19
	
		// Constructors
		internal RegexFC(bool nullable); // 0x00C30960-0x00C309DC
		internal RegexFC(char ch, bool not, bool nullable, bool caseInsensitive); // 0x00C309DC-0x00C30AD8
		internal RegexFC(string charClass, bool nullable, bool caseInsensitive); // 0x00C30AD8-0x00C30B7C
	
		// Methods
		internal bool AddFC(RegexFC fc, bool concatenate); // 0x00C30B7C-0x00C30C20
		internal string GetFirstChars(CultureInfo culture); // 0x00C30C20-0x00C30C5C
		internal bool IsCaseInsensitive(); // 0x00C30C5C-0x00C30C64
	}

	internal sealed class RegexPrefix // TypeDefIndex: 1486
	{
		// Fields
		internal string _prefix; // 0x10
		internal bool _caseInsensitive; // 0x18
		internal static RegexPrefix _empty; // 0x00
	
		// Properties
		internal string Prefix { get; } // 0x00C3A8B0-0x00C3A8B8 
		internal bool CaseInsensitive { get; } // 0x00C3A8B8-0x00C3A8C0 
		internal static RegexPrefix Empty { get; } // 0x00C3A8C0-0x00C3A928 
	
		// Constructors
		internal RegexPrefix(string prefix, bool ci); // 0x00C30F80-0x00C30FC0
		static RegexPrefix(); // 0x00C3A928-0x00C3A9B0
	}

	[Serializable]
	public class Group : Capture // TypeDefIndex: 1487
	{
		// Fields
		internal static Group _emptygroup; // 0x00
		internal int[] _caps; // 0x20
		internal int _capcount; // 0x28
		[System.Runtime.Serialization.OptionalField] // 0x004BE05C-0x004BE06C
		internal string _name; // 0x30
	
		// Properties
		public bool Success { get; } // 0x00C26778-0x00C26788 
	
		// Constructors
		internal Group(string text, int[] caps, int capcount, string name); // 0x00C266B8-0x00C26778
		static Group(); // 0x00C26788-0x00C26844
		internal Group(); // 0x00C26844-0x00C26884
	}

	internal sealed class RegexInterpreter : RegexRunner // TypeDefIndex: 1488
	{
		// Fields
		internal int runoperator; // 0x80
		internal int[] runcodes; // 0x88
		internal int runcodepos; // 0x90
		internal string[] runstrings; // 0x98
		internal RegexCode runcode; // 0xA0
		internal RegexPrefix runfcPrefix; // 0xA8
		internal RegexBoyerMoore runbmPrefix; // 0xB0
		internal int runanchors; // 0xB8
		internal bool runrtl; // 0xBC
		internal bool runci; // 0xBD
		internal CultureInfo runculture; // 0xC0
	
		// Constructors
		internal RegexInterpreter(RegexCode code, CultureInfo culture); // 0x00C28EEC-0x00C28F5C
	
		// Methods
		protected override void InitTrackCount(); // 0x00C31C64-0x00C31C88
		private void Advance(); // 0x00C31C88-0x00C31C90
		private void Advance(int i); // 0x00C31C90-0x00C31D00
		private void Goto(int newpos); // 0x00C31D20-0x00C31DA8
		private void Textto(int newpos); // 0x00C31DFC-0x00C31E04
		private void Trackto(int newpos); // 0x00C31E04-0x00C31E2C
		private int Textstart(); // 0x00C31E2C-0x00C31E34
		private int Textpos(); // 0x00C31E34-0x00C31E3C
		private int Trackpos(); // 0x00C31E3C-0x00C31E64
		private void TrackPush(); // 0x00C31E64-0x00C31EB8
		private void TrackPush(int I1); // 0x00C31EB8-0x00C31F34
		private void TrackPush(int I1, int I2); // 0x00C31F34-0x00C31FD8
		private void TrackPush(int I1, int I2, int I3); // 0x00C31FD8-0x00C320A4
		private void TrackPush2(int I1); // 0x00C320A4-0x00C32124
		private void TrackPush2(int I1, int I2); // 0x00C32124-0x00C321CC
		private void Backtrack(); // 0x00C321CC-0x00C322A4
		private void SetOperator(int op); // 0x00C31D00-0x00C31D20
		private void TrackPop(); // 0x00C322A4-0x00C322B4
		private void TrackPop(int framesize); // 0x00C322B4-0x00C322C4
		private int TrackPeek(); // 0x00C322C4-0x00C32310
		private int TrackPeek(int i); // 0x00C32310-0x00C32360
		private void StackPush(int I1); // 0x00C32360-0x00C323B0
		private void StackPush(int I1, int I2); // 0x00C323B0-0x00C32428
		private void StackPop(); // 0x00C32428-0x00C32438
		private void StackPop(int framesize); // 0x00C32438-0x00C32448
		private int StackPeek(); // 0x00C32448-0x00C32494
		private int StackPeek(int i); // 0x00C32494-0x00C324E4
		private int Operator(); // 0x00C324E4-0x00C324EC
		private int Operand(int i); // 0x00C324EC-0x00C3253C
		private int Leftchars(); // 0x00C3253C-0x00C3254C
		private int Rightchars(); // 0x00C3254C-0x00C3255C
		private int Bump(); // 0x00C3255C-0x00C32570
		private int Forwardchars(); // 0x00C32570-0x00C3259C
		private char Forwardcharnext(); // 0x00C3259C-0x00C3265C
		private bool Stringmatch(string str); // 0x00C3265C-0x00C32804
		private bool Refmatch(int index, int len); // 0x00C32804-0x00C329BC
		private void Backwardnext(); // 0x00C329BC-0x00C329EC
		private char CharAt(int j); // 0x00C329EC-0x00C32A08
		protected override bool FindFirstChar(); // 0x00C32A08-0x00C32D80
		protected override void Go(); // 0x00C32D80-0x00C33EA8
	}

	[Serializable]
	public class Match : Group // TypeDefIndex: 1489
	{
		// Fields
		internal static Match _empty; // 0x00
		internal Regex _regex; // 0x38
		internal int _textbeg; // 0x40
		internal int _textpos; // 0x44
		internal int _textend; // 0x48
		internal int _textstart; // 0x4C
		internal int[][] _matches; // 0x50
		internal int[] _matchcount; // 0x58
		internal bool _balancing; // 0x60
	
		// Properties
		public static Match Empty { get; } // 0x00C26884-0x00C268EC 
	
		// Constructors
		internal Match(Regex regex, int capcount, string text, int begpos, int len, int startpos); // 0x00C268EC-0x00C26A48
		static Match(); // 0x00C271D0-0x00C27264
		internal Match(); // 0x00C27264-0x00C272A4
	
		// Methods
		internal virtual void Reset(Regex regex, string text, int textbeg, int textend, int textstart); // 0x00C26A48-0x00C26AB4
		internal virtual void AddMatch(int cap, int start, int len); // 0x00C26AB4-0x00C26D14
		internal virtual void BalanceMatch(int cap); // 0x00C26D14-0x00C26E00
		internal virtual void RemoveMatch(int cap); // 0x00C26E00-0x00C26E4C
		internal virtual bool IsMatched(int cap); // 0x00C26E4C-0x00C26EF0
		internal virtual int MatchIndex(int cap); // 0x00C26EF0-0x00C26F90
		internal virtual int MatchLength(int cap); // 0x00C26F90-0x00C27030
		internal virtual void Tidy(int textpos); // 0x00C27030-0x00C271D0
	}

	internal class MatchSparse : Match // TypeDefIndex: 1490
	{
		// Fields
		internal Hashtable _caps; // 0x68
	
		// Constructors
		internal MatchSparse(Regex regex, Hashtable caps, int capcount, string text, int begpos, int len, int startpos); // 0x00C272A4-0x00C27364
	}

	[Serializable]
	public class RegexMatchTimeoutException : TimeoutException, ISerializable // TypeDefIndex: 1491
	{
		// Fields
		private string regexInput; // 0x88
		private string regexPattern; // 0x90
		private TimeSpan matchTimeout; // 0x98
	
		// Constructors
		public RegexMatchTimeoutException(string regexInput, string regexPattern, TimeSpan matchTimeout); // 0x00C34360-0x00C34418
		public RegexMatchTimeoutException(); // 0x00C34424-0x00C344A4
		protected RegexMatchTimeoutException(SerializationInfo info, StreamingContext context); // 0x00C34524-0x00C34634
	
		// Methods
		void ISerializable.GetObjectData(SerializationInfo si, StreamingContext context); // 0x00C34634-0x00C34704
		private new void Init(); // 0x00C344A4-0x00C34524
		private void Init(string input, string pattern, TimeSpan timeout); // 0x00C34418-0x00C34424
	}

	internal sealed class RegexNode // TypeDefIndex: 1492
	{
		// Fields
		internal int _type; // 0x10
		internal List<RegexNode> _children; // 0x18
		internal string _str; // 0x20
		internal char _ch; // 0x28
		internal int _m; // 0x2C
		internal int _n; // 0x30
		internal RegexOptions _options; // 0x34
		internal RegexNode _next; // 0x38
	
		// Constructors
		internal RegexNode(int type, RegexOptions options); // 0x00C34704-0x00C34740
		internal RegexNode(int type, RegexOptions options, char ch); // 0x00C34740-0x00C34784
		internal RegexNode(int type, RegexOptions options, string str); // 0x00C34784-0x00C347C8
		internal RegexNode(int type, RegexOptions options, int m); // 0x00C347C8-0x00C3480C
		internal RegexNode(int type, RegexOptions options, int m, int n); // 0x00C3480C-0x00C3485C
	
		// Methods
		internal bool UseOptionR(); // 0x00C3485C-0x00C34868
		internal RegexNode ReverseLeft(); // 0x00C34868-0x00C348E0
		internal void MakeRep(int type, int min, int max); // 0x00C348E0-0x00C348F8
		internal RegexNode Reduce(); // 0x00C348F8-0x00C34944
		internal RegexNode StripEnation(int emptyType); // 0x00C35378-0x00C35444
		internal RegexNode ReduceGroup(); // 0x00C351FC-0x00C35230
		internal RegexNode ReduceRep(); // 0x00C35068-0x00C351FC
		internal RegexNode ReduceSet(); // 0x00C35230-0x00C35378
		internal RegexNode ReduceAlternation(); // 0x00C34944-0x00C34D14
		internal RegexNode ReduceConcatenation(); // 0x00C34D14-0x00C35068
		internal RegexNode MakeQuantifier(bool lazy, int min, int max); // 0x00C35444-0x00C35570
		internal void AddChild(RegexNode newChild); // 0x00C35570-0x00C35630
		internal RegexNode Child(int i); // 0x00C31284-0x00C31300
		internal int ChildCount(); // 0x00C31230-0x00C31284
		internal int Type(); // 0x00C35630-0x00C35638
	}

	[Flags] // 0x004BDB1C-0x004BDB2C
	public enum RegexOptions // TypeDefIndex: 1493
	{
		None = 0,
		IgnoreCase = 1,
		Multiline = 2,
		ExplicitCapture = 4,
		Compiled = 8,
		Singleline = 16,
		IgnorePatternWhitespace = 32,
		RightToLeft = 64,
		ECMAScript = 256,
		CultureInvariant = 512
	}

	internal sealed class RegexParser // TypeDefIndex: 1494
	{
		// Fields
		internal RegexNode _stack; // 0x10
		internal RegexNode _group; // 0x18
		internal RegexNode _alternation; // 0x20
		internal RegexNode _concatenation; // 0x28
		internal RegexNode _unit; // 0x30
		internal string _pattern; // 0x38
		internal int _currentPos; // 0x40
		internal CultureInfo _culture; // 0x48
		internal int _autocap; // 0x50
		internal int _capcount; // 0x54
		internal int _captop; // 0x58
		internal int _capsize; // 0x5C
		internal Hashtable _caps; // 0x60
		internal Hashtable _capnames; // 0x68
		internal int[] _capnumlist; // 0x70
		internal List<string> _capnamelist; // 0x78
		internal RegexOptions _options; // 0x80
		internal List<RegexOptions> _optionsStack; // 0x88
		internal bool _ignoreNextParen; // 0x90
		internal static readonly byte[] _category; // 0x00
	
		// Constructors
		private RegexParser(CultureInfo culture); // 0x00C35638-0x00C356DC
		static RegexParser(); // 0x00C3A834-0x00C3A8B0
	
		// Methods
		internal static RegexTree Parse(string re, RegexOptions op); // 0x00C27C74-0x00C27E10
		internal void SetPattern(string Re); // 0x00C356DC-0x00C35748
		internal void Reset(RegexOptions topopts); // 0x00C35AA0-0x00C35B30
		internal RegexNode ScanRegex(); // 0x00C35B30-0x00C362D4
		internal RegexCharClass ScanCharClass(bool caseInsensitive); // 0x00C36E6C-0x00C36E78
		internal RegexCharClass ScanCharClass(bool caseInsensitive, bool scanOnly); // 0x00C38750-0x00C38D94
		internal RegexNode ScanGroupOpen(); // 0x00C36F54-0x00C37978
		internal void ScanBlank(); // 0x00C363E4-0x00C366E8
		internal RegexNode ScanBackslash(); // 0x00C37F50-0x00C38448
		internal RegexNode ScanBasicBackslash(); // 0x00C39614-0x00C39C10
		internal string ScanCapname(); // 0x00C390E0-0x00C391A8
		internal char ScanOctal(); // 0x00C39C10-0x00C39CD4
		internal int ScanDecimal(); // 0x00C38608-0x00C38700
		internal char ScanHex(int c); // 0x00C39CD4-0x00C39E28
		internal static int HexDigit(char ch); // 0x00C39E28-0x00C39E60
		internal char ScanControl(); // 0x00C39E60-0x00C39F38
		internal bool IsOnlyTopOption(RegexOptions option); // 0x00C39F38-0x00C39F60
		internal void ScanOptions(); // 0x00C39348-0x00C394C4
		internal char ScanCharEscape(); // 0x00C38F20-0x00C390E0
		internal string ParseProperty(); // 0x00C38DA0-0x00C38F20
		internal int TypeFromCode(char ch); // 0x00C39580-0x00C39614
		internal static RegexOptions OptionFromCode(char ch); // 0x00C39F60-0x00C39FC0
		internal void CountCaptures(); // 0x00C35748-0x00C35AA0
		internal void NoteCaptureSlot(int i, int pos); // 0x00C39FC0-0x00C3A0D4
		internal void NoteCaptureName(string name, int pos); // 0x00C3A130-0x00C3A25C
		internal void AssignNameSlots(); // 0x00C3A25C-0x00C3A814
		internal int CaptureSlotFromName(string capname); // 0x00C392AC-0x00C39348
		internal bool IsCaptureSlot(int i); // 0x00C391EC-0x00C39290
		internal bool IsCaptureName(string capname); // 0x00C39290-0x00C392AC
		internal bool UseOptionN(); // 0x00C391E0-0x00C391EC
		internal bool UseOptionI(); // 0x00C36E60-0x00C36E6C
		internal bool UseOptionM(); // 0x00C38448-0x00C38454
		internal bool UseOptionS(); // 0x00C384CC-0x00C384D8
		internal bool UseOptionX(); // 0x00C366E8-0x00C366F4
		internal bool UseOptionE(); // 0x00C38D94-0x00C38DA0
		internal static bool IsSpecial(char ch); // 0x00C369CC-0x00C36A88
		internal static bool IsStopperX(char ch); // 0x00C36750-0x00C3680C
		internal static bool IsQuantifier(char ch); // 0x00C36A88-0x00C36B44
		internal bool IsTrueQuantifier(); // 0x00C3680C-0x00C369CC
		internal static bool IsSpace(char ch); // 0x00C394C4-0x00C39580
		internal void AddConcatenate(int pos, int cch, bool isReplacement); // 0x00C36B44-0x00C36D84
		internal void PushGroup(); // 0x00C379D8-0x00C37A28
		internal void PopGroup(); // 0x00C37DAC-0x00C37EB4
		internal bool EmptyStack(); // 0x00C37B04-0x00C37B14
		internal void StartGroup(RegexNode openGroup); // 0x00C3633C-0x00C363E4
		internal void AddAlternate(); // 0x00C37A28-0x00C37B04
		internal void AddConcatenate(); // 0x00C385A8-0x00C385DC
		internal void AddConcatenate(bool lazy, int min, int max); // 0x00C38700-0x00C38750
		internal RegexNode Unit(); // 0x00C3A814-0x00C3A81C
		internal void AddUnitOne(char ch); // 0x00C36DA0-0x00C36E60
		internal void AddUnitNotone(char ch); // 0x00C384D8-0x00C38598
		internal void AddUnitSet(string cc); // 0x00C36E78-0x00C36EF8
		internal void AddUnitNode(RegexNode node); // 0x00C3A81C-0x00C3A824
		internal void AddUnitType(int type); // 0x00C38454-0x00C384CC
		internal void AddGroup(); // 0x00C37C2C-0x00C37DAC
		internal void PushOptions(); // 0x00C36EF8-0x00C36F54
		internal void PopOptions(); // 0x00C37EB4-0x00C37F50
		internal bool EmptyOptionsStack(); // 0x00C3A0D4-0x00C3A130
		internal void PopKeepOptions(); // 0x00C37978-0x00C379D8
		internal ArgumentException MakeException(string message); // 0x00C37B14-0x00C37C2C
		internal int Textpos(); // 0x00C3A824-0x00C3A82C
		internal void Textto(int pos); // 0x00C3A82C-0x00C3A834
		internal char MoveRightGetChar(); // 0x00C385DC-0x00C38608
		internal void MoveRight(); // 0x00C366F4-0x00C36704
		internal void MoveRight(int i); // 0x00C391D0-0x00C391E0
		internal void MoveLeft(); // 0x00C38598-0x00C385A8
		internal char CharAt(int i); // 0x00C36D84-0x00C36DA0
		internal char RightChar(); // 0x00C3672C-0x00C36750
		internal char RightChar(int i); // 0x00C391A8-0x00C391D0
		internal int CharsRight(); // 0x00C36704-0x00C3672C
	}

	[EditorBrowsable] // 0x004BDB2C-0x004BDB40
	public abstract class RegexRunner // TypeDefIndex: 1495
	{
		// Fields
		protected internal int runtextbeg; // 0x10
		protected internal int runtextend; // 0x14
		protected internal int runtextstart; // 0x18
		protected internal string runtext; // 0x20
		protected internal int runtextpos; // 0x28
		protected internal int[] runtrack; // 0x30
		protected internal int runtrackpos; // 0x38
		protected internal int[] runstack; // 0x40
		protected internal int runstackpos; // 0x48
		protected internal int[] runcrawl; // 0x50
		protected internal int runcrawlpos; // 0x58
		protected internal int runtrackcount; // 0x5C
		protected internal Match runmatch; // 0x60
		protected internal Regex runregex; // 0x68
		private int timeout; // 0x70
		private bool ignoreTimeout; // 0x74
		private int timeoutOccursAt; // 0x78
		private int timeoutChecksToSkip; // 0x7C
	
		// Constructors
		protected internal RegexRunner(); // 0x00C31C5C-0x00C31C64
	
		// Methods
		protected internal Match Scan(Regex regex, string text, int textbeg, int textend, int textstart, int prevlen, bool quick, TimeSpan timeout); // 0x00C28F5C-0x00C29294
		private void StartTimeoutWatch(); // 0x00C3A9B0-0x00C3A9F0
		protected void CheckTimeout(); // 0x00C33EA8-0x00C33ED0
		private void DoCheckTimeout(); // 0x00C3AC08-0x00C3ACFC
		protected abstract void Go();
		protected abstract bool FindFirstChar();
		protected abstract void InitTrackCount();
		private void InitMatch(); // 0x00C3A9F0-0x00C3ABB8
		private Match TidyMatch(bool quick); // 0x00C3ABB8-0x00C3AC08
		protected void EnsureStorage(); // 0x00C31DA8-0x00C31DFC
		protected bool IsBoundary(int index, int startpos, int endpos); // 0x00C340F0-0x00C34208
		protected bool IsECMABoundary(int index, int startpos, int endpos); // 0x00C34208-0x00C34320
		protected void DoubleTrack(); // 0x00C3ADA8-0x00C3AE54
		protected void DoubleStack(); // 0x00C3ACFC-0x00C3ADA8
		protected void DoubleCrawl(); // 0x00C3AE54-0x00C3AF00
		protected void Crawl(int i); // 0x00C3AF00-0x00C3AF70
		protected int Popcrawl(); // 0x00C3AF70-0x00C3AFC0
		protected int Crawlpos(); // 0x00C340C8-0x00C340F0
		protected void Capture(int capnum, int start, int end); // 0x00C3401C-0x00C34088
		protected void TransferCapture(int capnum, int uncapnum, int start, int end); // 0x00C33EF0-0x00C3401C
		protected void Uncapture(); // 0x00C34088-0x00C340C8
		protected bool IsMatched(int cap); // 0x00C33ED0-0x00C33EF0
		protected int MatchIndex(int cap); // 0x00C34320-0x00C34340
		protected int MatchLength(int cap); // 0x00C34340-0x00C34360
	}

	[EditorBrowsable] // 0x004BDB40-0x004BDB54
	public abstract class RegexRunnerFactory // TypeDefIndex: 1496
	{
		// Methods
		protected internal abstract RegexRunner CreateInstance();
	}

	internal sealed class RegexTree // TypeDefIndex: 1497
	{
		// Fields
		internal RegexNode _root; // 0x10
		internal Hashtable _caps; // 0x18
		internal int[] _capnumlist; // 0x20
		internal Hashtable _capnames; // 0x28
		internal string[] _capslist; // 0x30
		internal RegexOptions _options; // 0x38
		internal int _captop; // 0x3C
	
		// Constructors
		internal RegexTree(RegexNode root, Hashtable caps, int[] capnumlist, int captop, Hashtable capnames, string[] capslist, RegexOptions opts); // 0x00C362D4-0x00C3633C
	}

	internal sealed class RegexWriter // TypeDefIndex: 1498
	{
		// Fields
		internal int[] _intStack; // 0x10
		internal int _depth; // 0x18
		internal int[] _emitted; // 0x20
		internal int _curpos; // 0x28
		internal Dictionary<string, int> _stringhash; // 0x30
		internal List<string> _stringtable; // 0x38
		internal bool _counting; // 0x40
		internal int _count; // 0x44
		internal int _trackcount; // 0x48
		internal Hashtable _caps; // 0x50
	
		// Constructors
		private RegexWriter(); // 0x00C3AFC0-0x00C3B084
	
		// Methods
		internal static RegexCode Write(RegexTree t); // 0x00C27E10-0x00C27E7C
		internal void PushInt(int I); // 0x00C3B408-0x00C3B4F0
		internal bool EmptyStack(); // 0x00C3B4F0-0x00C3B500
		internal int PopInt(); // 0x00C3B500-0x00C3B550
		internal int CurPos(); // 0x00C3B550-0x00C3B558
		internal void PatchJump(int Offset, int jumpDest); // 0x00C3B558-0x00C3B5A0
		internal void Emit(int op); // 0x00C3B5A0-0x00C3B63C
		internal void Emit(int op, int opd1); // 0x00C3B63C-0x00C3B700
		internal void Emit(int op, int opd1, int opd2); // 0x00C3B700-0x00C3B7EC
		internal int StringCode(string str); // 0x00C3B7EC-0x00C3B900
		internal ArgumentException MakeException(string message); // 0x00C3B900-0x00C3B964
		internal int MapCapnum(int capnum); // 0x00C3B964-0x00C3BA20
		internal RegexCode RegexCodeFromRegexTree(RegexTree tree); // 0x00C3B084-0x00C3B408
		internal void EmitFragment(int nodetype, RegexNode node, int CurIndex); // 0x00C3BA20-0x00C3CC54
	}
}

namespace System.ComponentModel
{
	public class ArrayConverter : CollectionConverter // TypeDefIndex: 1499
	{
		// Constructors
		public ArrayConverter(); // 0x00BF0DEC-0x00BF0DF4
	}

	public class BooleanConverter : TypeConverter // TypeDefIndex: 1500
	{
		// Fields
		private static StandardValuesCollection values; // 0x00
	
		// Constructors
		public BooleanConverter(); // 0x00BF0E0C-0x00BF0E14
	}

	public class CollectionConverter : TypeConverter // TypeDefIndex: 1501
	{
		// Constructors
		public CollectionConverter(); // 0x00BF0DF4-0x00BF0DFC
	}

	public class DecimalConverter : BaseNumberConverter // TypeDefIndex: 1502
	{
		// Constructors
		public DecimalConverter(); // 0x00BF0E14-0x00BF0E1C
	}

	[AttributeUsage] // 0x004BDB54-0x004BDB68
	public class DefaultValueAttribute : Attribute // TypeDefIndex: 1503
	{
		// Fields
		private object value; // 0x10
	
		// Properties
		public virtual object Value { get; } // 0x00BF0E74-0x00BF0E7C 
	
		// Constructors
		public DefaultValueAttribute(string value); // 0x00BF0E1C-0x00BF0E48
		public DefaultValueAttribute(object value); // 0x00BF0E48-0x00BF0E74
	
		// Methods
		public override bool Equals(object obj); // 0x00BF0E7C-0x00BF0F94
		public override int GetHashCode(); // 0x00BF0F94-0x00BF0F9C
	}

	public class DoubleConverter : BaseNumberConverter // TypeDefIndex: 1504
	{
		// Constructors
		public DoubleConverter(); // 0x00BF0F9C-0x00BF0FA4
	}

	[AttributeUsage] // 0x004BDB68-0x004BDB7C
	public sealed class EditorBrowsableAttribute : Attribute // TypeDefIndex: 1505
	{
		// Fields
		private EditorBrowsableState browsableState; // 0x10
	
		// Constructors
		public EditorBrowsableAttribute(EditorBrowsableState state); // 0x00BF0FA4-0x00BF0FD0
	
		// Methods
		public override bool Equals(object obj); // 0x00BF0FD0-0x00BF1060
		public override int GetHashCode(); // 0x00BF1060-0x00BF1068
	}

	public enum EditorBrowsableState // TypeDefIndex: 1506
	{
		Always = 0,
		Never = 1,
		Advanced = 2
	}

	public class EnumConverter : TypeConverter // TypeDefIndex: 1507
	{
		// Fields
		private StandardValuesCollection values; // 0x10
		private Type type; // 0x18
	
		// Constructors
		public EnumConverter(Type type); // 0x00BF1068-0x00BF1094
	}

	public class Int16Converter : BaseNumberConverter // TypeDefIndex: 1508
	{
		// Constructors
		public Int16Converter(); // 0x00BF1094-0x00BF109C
	}

	public class Int32Converter : BaseNumberConverter // TypeDefIndex: 1509
	{
		// Constructors
		public Int32Converter(); // 0x00BF109C-0x00BF10A4
	}

	public class Int64Converter : BaseNumberConverter // TypeDefIndex: 1510
	{
		// Constructors
		public Int64Converter(); // 0x00BF10A4-0x00BF10AC
	}

	public class SingleConverter : BaseNumberConverter // TypeDefIndex: 1511
	{
		// Constructors
		public SingleConverter(); // 0x00BF10AC-0x00BF10B4
	}

	public class StringConverter : TypeConverter // TypeDefIndex: 1512
	{
		// Constructors
		public StringConverter(); // 0x00BF10B4-0x00BF10BC
	}

	public class TimeSpanConverter : TypeConverter // TypeDefIndex: 1513
	{
		// Constructors
		public TimeSpanConverter(); // 0x00BF10BC-0x00BF10C4
	}

	[ComVisible] // 0x004BDB7C-0x004BDB90
	public class TypeConverter // TypeDefIndex: 1514
	{
		// Fields
		private const string s_UseCompatibleTypeConverterBehavior = "UseCompatibleTypeConverterBehavior"; // Metadata: 0x001F2E0E
		private static bool useCompatibleTypeConversion; // 0x00
	
		// Nested types
		[DefaultMember] // 0x004BDB90-0x004BDBC8
		public class StandardValuesCollection // TypeDefIndex: 1515
		{
		}
	
		// Constructors
		public TypeConverter(); // 0x00BF0E04-0x00BF0E0C
	}

	[AttributeUsage] // 0x004BDBC8-0x004BDBDC
	public sealed class TypeConverterAttribute : Attribute // TypeDefIndex: 1516
	{
		// Fields
		private string typeName; // 0x10
		public static readonly TypeConverterAttribute Default; // 0x00
	
		// Properties
		public string ConverterTypeName { get; } // 0x00BF1174-0x00BF117C 
	
		// Constructors
		public TypeConverterAttribute(); // 0x00BF10C4-0x00BF1128
		public TypeConverterAttribute(Type type); // 0x00BF1128-0x00BF1174
		static TypeConverterAttribute(); // 0x00BF1234-0x00BF1294
	
		// Methods
		public override bool Equals(object obj); // 0x00BF117C-0x00BF1214
		public override int GetHashCode(); // 0x00BF1214-0x00BF1234
	}

	[Serializable]
	public class Win32Exception : ExternalException, ISerializable // TypeDefIndex: 1517
	{
		// Fields
		private readonly int nativeErrorCode; // 0x88
		private static bool s_ErrorMessagesInitialized; // 0x00
		private static Dictionary<int, string> s_ErrorMessage; // 0x08
	
		// Properties
		public int NativeErrorCode { get; } // 0x00BF1570-0x00BF1578 
	
		// Constructors
		public Win32Exception(); // 0x00BF1294-0x00BF1304
		public Win32Exception(int error); // 0x00BF1304-0x00BF138C
		public Win32Exception(int error, string message); // 0x00BF14A4-0x00BF14D4
		protected Win32Exception(SerializationInfo info, StreamingContext context); // 0x00BF14D4-0x00BF1570
		static Win32Exception(); // 0x00BF2790-0x00BF2810
	
		// Methods
		public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00BF1578-0x00BF1648
		internal static string GetErrorMessage(int error); // 0x00BF138C-0x00BF14A4
		private static void InitializeErrorMessages(); // 0x00BF1648-0x00BF2790
	}

	public abstract class BaseNumberConverter : TypeConverter // TypeDefIndex: 1518
	{
		// Constructors
		protected BaseNumberConverter(); // 0x00BF0DFC-0x00BF0E04
	}
}

namespace System.Security.Cryptography
{
	public enum OidGroup // TypeDefIndex: 1519
	{
		All = 0,
		HashAlgorithm = 1,
		EncryptionAlgorithm = 2,
		PublicKeyAlgorithm = 3,
		SignatureAlgorithm = 4,
		Attribute = 5,
		ExtensionOrAttribute = 6,
		EnhancedKeyUsage = 7,
		Policy = 8,
		Template = 9,
		KeyDerivationFunction = 10
	}

	public sealed class Oid // TypeDefIndex: 1520
	{
		// Fields
		private string m_value; // 0x10
		private string m_friendlyName; // 0x18
		private OidGroup m_group; // 0x20
	
		// Properties
		public string Value { get; set; } // 0x00C07B30-0x00C07B38 0x00C07B38-0x00C07B40
	
		// Constructors
		public Oid(string oid); // 0x00C07A4C-0x00C07A98
		internal Oid(string oid, OidGroup group, bool lookupFriendlyName); // 0x00C07A98-0x00C07AF8
		public Oid(string value, string friendlyName); // 0x00C07AF8-0x00C07B30
		public Oid(Oid oid); // 0x00C0595C-0x00C05A10
	}

	public sealed class OidCollection : ICollection // TypeDefIndex: 1521
	{
		// Fields
		private ArrayList m_list; // 0x10
	
		// Properties
		public Oid this[int index] { get => default; } // 0x00C07BD0-0x00C07C58 
		public int Count { get; } // 0x00C07C58-0x00C07C7C 
	
		// Constructors
		public OidCollection(); // 0x00C07B40-0x00C07BAC
	
		// Methods
		public int Add(Oid oid); // 0x00C07BAC-0x00C07BD0
		IEnumerator IEnumerable.GetEnumerator(); // 0x00C07C7C-0x00C07CE8
		void ICollection.CopyTo(Array array, int index); // 0x00C07D1C-0x00C07F04
	}

	public sealed class OidEnumerator : IEnumerator // TypeDefIndex: 1522
	{
		// Fields
		private OidCollection m_oids; // 0x10
		private int m_current; // 0x18
	
		// Properties
		object IEnumerator.Current { get; } // 0x00C07F04-0x00C07F28 
	
		// Constructors
		internal OidEnumerator(OidCollection oids); // 0x00C07CE8-0x00C07D1C
	
		// Methods
		public bool MoveNext(); // 0x00C07F28-0x00C07F94
		public void Reset(); // 0x00C07F94-0x00C07FA0
	}

	internal static class CAPI // TypeDefIndex: 1523
	{
		// Methods
		public static string CryptFindOIDInfoNameFromKey(string key, OidGroup oidGroup); // 0x00C06A30-0x00C07284
		public static string CryptFindOIDInfoKeyFromName(string name, OidGroup oidGroup); // 0x00C07284-0x00C07A4C
	}

	internal enum AsnDecodeStatus // TypeDefIndex: 1524
	{
		NotDecoded = -1,
		Ok = 0,
		BadAsn = 1,
		BadTag = 2,
		BadLength = 3,
		InformationNotAvailable = 4
	}

	public class AsnEncodedData // TypeDefIndex: 1525
	{
		// Fields
		internal Oid _oid; // 0x10
		internal byte[] _raw; // 0x18
	
		// Properties
		public Oid Oid { set; } // 0x00C058E4-0x00C0595C
		public byte[] RawData { get; set; } // 0x00C05A10-0x00C05A18 0x00C05A18-0x00C05AE8
	
		// Constructors
		protected AsnEncodedData(); // 0x00C058DC-0x00C058E4
	
		// Methods
		public virtual void CopyFrom(AsnEncodedData asnEncodedData); // 0x00C05AE8-0x00C05BDC
		internal virtual string ToString(bool multiLine); // 0x00C05BDC-0x00C05D7C
		internal string Default(bool multiLine); // 0x00C06904-0x00C06A30
		internal string BasicConstraintsExtension(bool multiLine); // 0x00C05D7C-0x00C05E9C
		internal string EnhancedKeyUsageExtension(bool multiLine); // 0x00C05E9C-0x00C05FBC
		internal string KeyUsageExtension(bool multiLine); // 0x00C05FBC-0x00C060DC
		internal string SubjectKeyIdentifierExtension(bool multiLine); // 0x00C060DC-0x00C061FC
		internal string SubjectAltName(bool multiLine); // 0x00C061FC-0x00C065A4
		internal string NetscapeCertType(bool multiLine); // 0x00C065A4-0x00C06904
	}
}

namespace System.Security.Cryptography.X509Certificates
{
	[Flags] // 0x004BDC14-0x004BDC24
	public enum X509KeyUsageFlags // TypeDefIndex: 1526
	{
		None = 0,
		EncipherOnly = 1,
		CrlSign = 2,
		KeyCertSign = 4,
		KeyAgreement = 8,
		DataEncipherment = 16,
		KeyEncipherment = 32,
		NonRepudiation = 64,
		DigitalSignature = 128,
		DecipherOnly = 32768
	}

	public enum X509SubjectKeyIdentifierHashAlgorithm // TypeDefIndex: 1527
	{
		Sha1 = 0,
		ShortSha1 = 1,
		CapiSha1 = 2
	}

	internal class X509Utils // TypeDefIndex: 1528
	{
		// Methods
		internal static string FindOidInfo(uint keyType, string keyValue, OidGroup oidGroup); // 0x00C2628C-0x00C263D4
		internal static string FindOidInfoWithFallback(uint key, string value, OidGroup group); // 0x00C263D4-0x00C26430
	}

	public sealed class PublicKey // TypeDefIndex: 1529
	{
		// Fields
		private AsnEncodedData _keyValue; // 0x10
		private AsnEncodedData _params; // 0x18
		private Oid _oid; // 0x20
		private static byte[] Empty; // 0x00
	
		// Properties
		public AsnEncodedData EncodedKeyValue { get; } // 0x00C07FA0-0x00C07FA8 
		public AsnEncodedData EncodedParameters { get; } // 0x00C07FA8-0x00C07FB0 
		public Oid Oid { get; } // 0x00C07FB0-0x00C07FB8 
	
		// Constructors
		static PublicKey(); // 0x00C07FB8-0x00C0901C
	}

	public sealed class X509BasicConstraintsExtension : X509Extension // TypeDefIndex: 1530
	{
		// Fields
		internal const string oid = "2.5.29.19"; // Metadata: 0x001F2EAC
		internal const string friendlyName = "Basic Constraints"; // Metadata: 0x001F2EB9
		private bool _certificateAuthority; // 0x21
		private bool _hasPathLengthConstraint; // 0x22
		private int _pathLengthConstraint; // 0x24
		private AsnDecodeStatus _status; // 0x28
	
		// Properties
		public bool CertificateAuthority { get; } // 0x00C23760-0x00C237F4 
		public bool HasPathLengthConstraint { get; } // 0x00C237F4-0x00C23888 
		public int PathLengthConstraint { get; } // 0x00C23888-0x00C2391C 
	
		// Constructors
		public X509BasicConstraintsExtension(); // 0x00C2318C-0x00C23210
		public X509BasicConstraintsExtension(AsnEncodedData encodedBasicConstraints, bool critical); // 0x00C23218-0x00C232D4
		public X509BasicConstraintsExtension(bool certificateAuthority, bool hasPathLengthConstraint, int pathLengthConstraint, bool critical); // 0x00C234CC-0x00C235E8
	
		// Methods
		public override void CopyFrom(AsnEncodedData asnEncodedData); // 0x00C2391C-0x00C23AC0
		internal AsnDecodeStatus Decode(byte[] extension); // 0x00C232D4-0x00C234CC
		internal byte[] Encode(); // 0x00C235E8-0x00C23760
		internal override string ToString(bool multiLine); // 0x00C23AC0-0x00C23CD0
	}

	public sealed class X509EnhancedKeyUsageExtension : X509Extension // TypeDefIndex: 1531
	{
		// Fields
		private OidCollection _enhKeyUsage; // 0x28
		private AsnDecodeStatus _status; // 0x30
	
		// Constructors
		public X509EnhancedKeyUsageExtension(AsnEncodedData encodedEnhancedKeyUsages, bool critical); // 0x00C23DE8-0x00C23EA4
	
		// Methods
		public override void CopyFrom(AsnEncodedData asnEncodedData); // 0x00C24110-0x00C242B4
		internal AsnDecodeStatus Decode(byte[] extension); // 0x00C23EA4-0x00C24110
		internal override string ToString(bool multiLine); // 0x00C242B4-0x00C24538
	}

	public class X509Extension : AsnEncodedData // TypeDefIndex: 1532
	{
		// Fields
		private bool _critical; // 0x20
	
		// Properties
		public bool Critical { get; set; } // 0x00C24538-0x00C24540 0x00C24540-0x00C2454C
	
		// Constructors
		protected X509Extension(); // 0x00C23210-0x00C23218
	
		// Methods
		public override void CopyFrom(AsnEncodedData asnEncodedData); // 0x00C2454C-0x00C2467C
		internal string FormatUnkownData(byte[] data); // 0x00C23CD0-0x00C23DE8
	}

	public sealed class X509KeyUsageExtension : X509Extension // TypeDefIndex: 1533
	{
		// Fields
		internal const string oid = "2.5.29.15"; // Metadata: 0x001F2ECE
		internal const string friendlyName = "Key Usage"; // Metadata: 0x001F2EDB
		internal const X509KeyUsageFlags all = X509KeyUsageFlags.None | X509KeyUsageFlags.EncipherOnly | X509KeyUsageFlags.CrlSign | X509KeyUsageFlags.KeyCertSign | X509KeyUsageFlags.KeyAgreement | X509KeyUsageFlags.DataEncipherment | X509KeyUsageFlags.KeyEncipherment | X509KeyUsageFlags.NonRepudiation | X509KeyUsageFlags.DigitalSignature | X509KeyUsageFlags.DecipherOnly; // Metadata: 0x001F2EE8
		private X509KeyUsageFlags _keyUsages; // 0x24
		private AsnDecodeStatus _status; // 0x28
	
		// Properties
		public X509KeyUsageFlags KeyUsages { get; } // 0x00C24BE0-0x00C24C74 
	
		// Constructors
		public X509KeyUsageExtension(); // 0x00C2467C-0x00C24700
		public X509KeyUsageExtension(AsnEncodedData encodedKeyUsage, bool critical); // 0x00C24700-0x00C247BC
		public X509KeyUsageExtension(X509KeyUsageFlags keyUsages, bool critical); // 0x00C2499C-0x00C24A5C
	
		// Methods
		public override void CopyFrom(AsnEncodedData asnEncodedData); // 0x00C24C74-0x00C24E18
		internal X509KeyUsageFlags GetValidFlags(X509KeyUsageFlags flags); // 0x00C24A5C-0x00C24A6C
		internal AsnDecodeStatus Decode(byte[] extension); // 0x00C247BC-0x00C2499C
		internal byte[] Encode(); // 0x00C24A6C-0x00C24BE0
		internal override string ToString(bool multiLine); // 0x00C24E18-0x00C252B8
	}

	public sealed class X509SubjectKeyIdentifierExtension : X509Extension // TypeDefIndex: 1534
	{
		// Fields
		internal const string oid = "2.5.29.14"; // Metadata: 0x001F2EEC
		internal const string friendlyName = "Subject Key Identifier"; // Metadata: 0x001F2EF9
		private byte[] _subjectKeyIdentifier; // 0x28
		private string _ski; // 0x30
		private AsnDecodeStatus _status; // 0x38
	
		// Properties
		public string SubjectKeyIdentifier { get; } // 0x00C25D20-0x00C25DCC 
	
		// Constructors
		public X509SubjectKeyIdentifierExtension(); // 0x00C252B8-0x00C2533C
		public X509SubjectKeyIdentifierExtension(AsnEncodedData encodedSubjectKeyIdentifier, bool critical); // 0x00C2533C-0x00C253F8
		public X509SubjectKeyIdentifierExtension(byte[] subjectKeyIdentifier, bool critical); // 0x00C25578-0x00C256E0
		public X509SubjectKeyIdentifierExtension(string subjectKeyIdentifier, bool critical); // 0x00C25760-0x00C25898
		public X509SubjectKeyIdentifierExtension(PublicKey key, bool critical); // 0x00C259A8-0x00C259B4
		public X509SubjectKeyIdentifierExtension(PublicKey key, X509SubjectKeyIdentifierHashAlgorithm algorithm, bool critical); // 0x00C259B4-0x00C25D20
	
		// Methods
		public override void CopyFrom(AsnEncodedData asnEncodedData); // 0x00C25DCC-0x00C25F70
		internal static byte FromHexChar(char c); // 0x00C25F70-0x00C25FC4
		internal static byte FromHexChars(char c1, char c2); // 0x00C25FC4-0x00C26078
		internal static byte[] FromHex(string hex); // 0x00C25898-0x00C259A8
		internal AsnDecodeStatus Decode(byte[] extension); // 0x00C253F8-0x00C25578
		internal byte[] Encode(); // 0x00C256E0-0x00C25760
		internal override string ToString(bool multiLine); // 0x00C26078-0x00C2628C
	}
}

namespace System.Net
{
	[Serializable]
	public abstract class EndPoint // TypeDefIndex: 1535
	{
		// Properties
		public virtual AddressFamily AddressFamily { get; } // 0x00BF8204-0x00BF824C 
	
		// Constructors
		protected EndPoint(); // 0x00BF83B4-0x00BF83BC
	
		// Methods
		public virtual SocketAddress Serialize(); // 0x00BF82B8-0x00BF8300
		public virtual EndPoint Create(SocketAddress socketAddress); // 0x00BF836C-0x00BF83B4
	}

	[Serializable]
	public class IPAddress // TypeDefIndex: 1536
	{
		// Fields
		public static readonly IPAddress Any; // 0x00
		public static readonly IPAddress Loopback; // 0x08
		public static readonly IPAddress Broadcast; // 0x10
		public static readonly IPAddress None; // 0x18
		internal const long LoopbackMask = 255; // Metadata: 0x001F2F13
		internal long m_Address; // 0x10
		[NonSerialized]
		internal string m_ToString; // 0x18
		public static readonly IPAddress IPv6Any; // 0x20
		public static readonly IPAddress IPv6Loopback; // 0x28
		public static readonly IPAddress IPv6None; // 0x30
		private AddressFamily m_Family; // 0x20
		private ushort[] m_Numbers; // 0x28
		private long m_ScopeId; // 0x30
		private int m_HashCode; // 0x38
		internal const int IPv4AddressBytes = 4; // Metadata: 0x001F2F1B
		internal const int IPv6AddressBytes = 16; // Metadata: 0x001F2F1F
		internal const int NumberOfLabels = 8; // Metadata: 0x001F2F23
	
		// Properties
		public AddressFamily AddressFamily { get; } // 0x00BF8C64-0x00BF8C6C 
		public long ScopeId { get; } // 0x00BF8C6C-0x00BF8CF0 
	
		// Constructors
		public IPAddress(long newAddress); // 0x00BF83BC-0x00BF8480
		public IPAddress(byte[] address, long scopeid); // 0x00BF8480-0x00BF8658
		private IPAddress(ushort[] address, uint scopeid); // 0x00BF8658-0x00BF86E4
		internal IPAddress(int newAddress); // 0x00BF86E4-0x00BF8764
		static IPAddress(); // 0x00BF94BC-0x00BF964C
	
		// Methods
		public static bool TryParse(string ipString, out IPAddress address); // 0x00BF7A88-0x00BF7B10
		public static IPAddress Parse(string ipString); // 0x00BF762C-0x00BF7694
		private static IPAddress InternalParse(string ipString, bool tryParse); // 0x00BF8764-0x00BF8A98
		public byte[] GetAddressBytes(); // 0x00BF8B0C-0x00BF8C64
		public override string ToString(); // 0x00BF8CF0-0x00BF9188
		internal bool Equals(object comparandObj, bool compareScopeId); // 0x00BF9188-0x00BF92CC
		public override bool Equals(object comparand); // 0x00BF92CC-0x00BF92D4
		public override int GetHashCode(); // 0x00BF92D4-0x00BF93D4
		public IPAddress MapToIPv6(); // 0x00BF93D4-0x00BF94BC
	}

	[Serializable]
	public class IPEndPoint : EndPoint // TypeDefIndex: 1537
	{
		// Fields
		private IPAddress m_Address; // 0x10
		private int m_Port; // 0x18
		internal static IPEndPoint Any; // 0x00
		internal static IPEndPoint IPv6Any; // 0x08
	
		// Properties
		public override AddressFamily AddressFamily { get; } // 0x00BF964C-0x00BF966C 
		public IPAddress Address { get; } // 0x00BF9774-0x00BF977C 
		public int Port { get; } // 0x00BF977C-0x00BF9784 
	
		// Constructors
		public IPEndPoint(IPAddress address, int port); // 0x00BF966C-0x00BF9768
		static IPEndPoint(); // 0x00BF9EAC-0x00BF9F78
	
		// Methods
		public override string ToString(); // 0x00BF9784-0x00BF9840
		public override SocketAddress Serialize(); // 0x00BF9840-0x00BF98B4
		public override EndPoint Create(SocketAddress socketAddress); // 0x00BF9924-0x00BF9C7C
		public override bool Equals(object comparand); // 0x00BF9D80-0x00BF9E70
		public override int GetHashCode(); // 0x00BF9E70-0x00BF9EAC
	}

	public class IPHostEntry // TypeDefIndex: 1538
	{
		// Fields
		private string hostName; // 0x10
		private string[] aliases; // 0x18
		private IPAddress[] addressList; // 0x20
		internal bool isTrustedHost; // 0x28
	
		// Properties
		public string HostName { set; } // 0x00BF9F78-0x00BF9F80
		public string[] Aliases { set; } // 0x00BF9F80-0x00BF9F88
		public IPAddress[] AddressList { get; set; } // 0x00BF9F88-0x00BF9F90 0x00BF9F90-0x00BF9F98
	
		// Constructors
		public IPHostEntry(); // 0x00BF761C-0x00BF762C
	}

	internal static class ValidationHelper // TypeDefIndex: 1539
	{
		// Fields
		public static string[] EmptyArray; // 0x00
		internal static readonly char[] InvalidMethodChars; // 0x08
		internal static readonly char[] InvalidParamChars; // 0x10
	
		// Constructors
		static ValidationHelper(); // 0x00C05808-0x00C058DC
	
		// Methods
		public static bool ValidateTcpPort(int port); // 0x00BF9768-0x00BF9774
	}

	internal static class ExceptionHelper // TypeDefIndex: 1540
	{
		// Properties
		internal static NotImplementedException MethodNotImplementedException { get; } // 0x00BF8300-0x00BF836C 
		internal static NotImplementedException PropertyNotImplementedException { get; } // 0x00BF824C-0x00BF82B8 
	}

	public class SocketAddress // TypeDefIndex: 1541
	{
		// Fields
		internal int m_Size; // 0x10
		internal byte[] m_Buffer; // 0x18
		private bool m_changed; // 0x20
		private int m_hash; // 0x24
	
		// Properties
		public AddressFamily Family { get; } // 0x00BF9C7C-0x00BF9CC8 
		public int Size { get; } // 0x00BFA0F0-0x00BFA0F8 
		public byte this[int offset] { get => default; } // 0x00BFA0F8-0x00BFA1BC 
	
		// Constructors
		public SocketAddress(AddressFamily family, int size); // 0x00BFA1BC-0x00BFA2EC
		internal SocketAddress(IPAddress ipAddress); // 0x00BFA2EC-0x00BFA53C
		internal SocketAddress(IPAddress ipaddress, int port); // 0x00BF98B4-0x00BF9924
	
		// Methods
		internal IPAddress GetIPAddress(); // 0x00BFA53C-0x00BFA708
		internal IPEndPoint GetIPEndPoint(); // 0x00BF9CC8-0x00BF9D80
		public override bool Equals(object comparand); // 0x00BFA708-0x00BFA800
		public override int GetHashCode(); // 0x00BFA800-0x00BFA94C
		public override string ToString(); // 0x00BFA94C-0x00BFAC30
	}

	internal static class Logging // TypeDefIndex: 1542
	{
		// Fields
		internal static readonly bool On; // 0x00
	}

	public static class Dns // TypeDefIndex: 1543
	{
		// Nested types
		private delegate IPAddress[] GetHostAddressesCallback(string hostName); // TypeDefIndex: 1544; 0x00BF7E48-0x00BF8204
	
		// Methods
		public static IAsyncResult BeginGetHostAddresses(string hostNameOrAddress, AsyncCallback requestCallback, object state); // 0x00BF6F78-0x00BF70C8
		public static IPAddress[] EndGetHostAddresses(IAsyncResult asyncResult); // 0x00BF70FC-0x00BF7204
		private static bool GetHostByName_internal(string host, out string h_name, out string[] h_aliases, out string[] h_addr_list, int hint); // 0x00BF7210-0x00BF7214
		private static bool GetHostByAddr_internal(string addr, out string h_name, out string[] h_aliases, out string[] h_addr_list, int hint); // 0x00BF7214-0x00BF7218
		private static void Error_11001(string hostName); // 0x00BF7218-0x00BF72A4
		private static IPHostEntry hostent_to_IPHostEntry(string originalHostName, string h_name, string[] h_aliases, string[] h_addrlist); // 0x00BF7328-0x00BF761C
		private static IPHostEntry GetHostByAddressFromString(string address, bool parse); // 0x00BF777C-0x00BF7898
		public static IPHostEntry GetHostEntry(string hostNameOrAddress); // 0x00BF7938-0x00BF7A88
		public static IPHostEntry GetHostEntry(IPAddress address); // 0x00BF7B10-0x00BF7BA8
		public static IPAddress[] GetHostAddresses(string hostNameOrAddress); // 0x00BF7C94-0x00BF7E48
		[Obsolete] // 0x004BE0AC-0x004BE0E4
		public static IPHostEntry GetHostByName(string hostName); // 0x00BF7BA8-0x00BF7C94
	}

	internal struct IPv6AddressFormatter // TypeDefIndex: 1545
	{
		// Fields
		private ushort[] address; // 0x00
		private long scopeId; // 0x08
	
		// Constructors
		public IPv6AddressFormatter(ushort[] addr, long scopeId); // 0x0058E228-0x0058E230
	
		// Methods
		private static ushort SwapUShort(ushort number); // 0x00BF9F98-0x00BFA0F0
		private uint AsIPv4Int(); // 0x0058E230-0x0058E238
		private bool IsIPv4Compatible(); // 0x0058E238-0x0058E240
		private bool IsIPv4Mapped(); // 0x0058E240-0x0058E248
		public override string ToString(); // 0x0058E248-0x0058E2D8
	}
}

namespace System.Net.Sockets
{
	[Serializable]
	public class SocketException : Win32Exception // TypeDefIndex: 1546
	{
		// Fields
		[NonSerialized]
		private EndPoint m_EndPoint; // 0x90
	
		// Properties
		public override int ErrorCode { get; } // 0x00C052A4-0x00C052AC 
		public override string Message { get; } // 0x00C052AC-0x00C05350 
		public SocketError SocketErrorCode { get; } // 0x00C02FD8-0x00C02FE0 
	
		// Constructors
		public SocketException(); // 0x00BFDAC8-0x00BFDB3C
		internal SocketException(int error, string message); // 0x00BF72A4-0x00BF7328
		public SocketException(int errorCode); // 0x00BFD364-0x00BFD3D8
		internal SocketException(SocketError socketError); // 0x00BF8A98-0x00BF8B0C
		protected SocketException(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x00C05218-0x00C052A4
	
		// Methods
		private static int WSAGetLastError_internal(); // 0x00C05214-0x00C05218
	}

	public enum AddressFamily // TypeDefIndex: 1547
	{
		Unknown = -1,
		Unspecified = 0,
		Unix = 1,
		InterNetwork = 2,
		ImpLink = 3,
		Pup = 4,
		Chaos = 5,
		NS = 6,
		Ipx = 6,
		Iso = 7,
		Osi = 7,
		Ecma = 8,
		DataKit = 9,
		Ccitt = 10,
		Sna = 11,
		DecNet = 12,
		DataLink = 13,
		Lat = 14,
		HyperChannel = 15,
		AppleTalk = 16,
		NetBios = 17,
		VoiceView = 18,
		FireFox = 19,
		Banyan = 21,
		Atm = 22,
		InterNetworkV6 = 23,
		Cluster = 24,
		Ieee12844 = 25,
		Irda = 26,
		NetworkDesigners = 28,
		Max = 29
	}

	public enum IPProtectionLevel // TypeDefIndex: 1548
	{
		Unspecified = -1,
		Unrestricted = 10,
		EdgeRestricted = 20,
		Restricted = 30
	}

	public class LingerOption // TypeDefIndex: 1549
	{
		// Fields
		private bool enabled; // 0x10
		private int lingerTime; // 0x14
	
		// Properties
		public bool Enabled { set; } // 0x00BFAC70-0x00BFAC7C
		public int LingerTime { set; } // 0x00BFAC7C-0x00BFAC84
	
		// Constructors
		public LingerOption(bool enable, int seconds); // 0x00BFAC30-0x00BFAC70
	}

	public class MulticastOption // TypeDefIndex: 1550
	{
	}

	public class NetworkStream : Stream // TypeDefIndex: 1551
	{
		// Fields
		private Socket m_StreamSocket; // 0x28
		private bool m_Readable; // 0x30
		private bool m_Writeable; // 0x31
		private bool m_OwnsSocket; // 0x32
		private int m_CloseTimeout; // 0x34
		private bool m_CleanedUp; // 0x38
	
		// Properties
		public override bool CanRead { get; } // 0x00BFAC84-0x00BFAC8C 
		public override bool CanSeek { get; } // 0x00BFAC8C-0x00BFAC94 
		public override bool CanWrite { get; } // 0x00BFAC94-0x00BFAC9C 
		public override long Length { get; } // 0x00BFAC9C-0x00BFAD10 
		public override long Position { get; set; } // 0x00BFAD10-0x00BFAD84 0x00BFAD84-0x00BFADF8
	
		// Methods
		public override long Seek(long offset, SeekOrigin origin); // 0x00BFADF8-0x00BFAE6C
		public override int Read([In, Out] byte[] buffer, int offset, int size); // 0x00BFAE6C-0x00BFB25C
		public override void Write(byte[] buffer, int offset, int size); // 0x00BFB320-0x00BFB710
		protected override void Dispose(bool disposing); // 0x00BFB7D4-0x00BFB854
		~NetworkStream(); // 0x00BFB8F4-0x00BFB970
		public override IAsyncResult BeginRead(byte[] buffer, int offset, int size, AsyncCallback callback, object state); // 0x00BFB970-0x00BFBD78
		public override int EndRead(IAsyncResult asyncResult); // 0x00BFBE5C-0x00BFC184
		public override IAsyncResult BeginWrite(byte[] buffer, int offset, int size, AsyncCallback callback, object state); // 0x00BFC220-0x00BFC628
		public override void EndWrite(IAsyncResult asyncResult); // 0x00BFC70C-0x00BFCA34
		public override void Flush(); // 0x00BFCAD0-0x00BFCAD4
	}

	public enum ProtocolType // TypeDefIndex: 1552
	{
		Unknown = -1,
		IP = 0,
		IPv6HopByHopOptions = 0,
		Unspecified = 0,
		Icmp = 1,
		Igmp = 2,
		Ggp = 3,
		IPv4 = 4,
		Tcp = 6,
		Pup = 12,
		Udp = 17,
		Idp = 22,
		IPv6 = 41,
		IPv6RoutingHeader = 43,
		IPv6FragmentHeader = 44,
		IPSecEncapsulatingSecurityPayload = 50,
		IPSecAuthenticationHeader = 51,
		IcmpV6 = 58,
		IPv6NoNextHeader = 59,
		IPv6DestinationOptions = 60,
		ND = 77,
		Raw = 255,
		Ipx = 1000,
		Spx = 1256,
		SpxII = 1257
	}

	public enum SelectMode // TypeDefIndex: 1553
	{
		SelectRead = 0,
		SelectWrite = 1,
		SelectError = 2
	}

	public class Socket : IDisposable // TypeDefIndex: 1554
	{
		// Fields
		private static object s_InternalSyncObject; // 0x00
		internal static bool s_SupportsIPv4; // 0x08
		internal static bool s_SupportsIPv6; // 0x09
		internal static bool s_OSSupportsIPv6; // 0x0A
		internal static bool s_Initialized; // 0x0B
		private static bool s_LoggingEnabled; // 0x0C
		private bool is_closed; // 0x10
		private bool is_listening; // 0x11
		private bool useOverlappedIO; // 0x12
		private int linger_timeout; // 0x14
		private AddressFamily addressFamily; // 0x18
		private SocketType socketType; // 0x1C
		private ProtocolType protocolType; // 0x20
		internal SafeSocketHandle m_Handle; // 0x28
		internal EndPoint seed_endpoint; // 0x30
		internal SemaphoreSlim ReadSem; // 0x38
		internal SemaphoreSlim WriteSem; // 0x40
		internal bool is_blocking; // 0x48
		internal bool is_bound; // 0x49
		internal bool is_connected; // 0x4A
		private int m_IntCleanedUp; // 0x4C
		internal bool connect_in_progress; // 0x50
		private static AsyncCallback AcceptAsyncCallback; // 0x10
		private static IOAsyncCallback BeginAcceptCallback; // 0x18
		private static IOAsyncCallback BeginAcceptReceiveCallback; // 0x20
		private static AsyncCallback ConnectAsyncCallback; // 0x28
		private static IOAsyncCallback BeginConnectCallback; // 0x30
		private static AsyncCallback DisconnectAsyncCallback; // 0x38
		private static IOAsyncCallback BeginDisconnectCallback; // 0x40
		private static AsyncCallback ReceiveAsyncCallback; // 0x48
		private static IOAsyncCallback BeginReceiveCallback; // 0x50
		private static IOAsyncCallback BeginReceiveGenericCallback; // 0x58
		private static AsyncCallback ReceiveFromAsyncCallback; // 0x60
		private static IOAsyncCallback BeginReceiveFromCallback; // 0x68
		private static AsyncCallback SendAsyncCallback; // 0x70
		private static IOAsyncCallback BeginSendGenericCallback; // 0x78
		private static AsyncCallback SendToAsyncCallback; // 0x80
	
		// Properties
		[Obsolete] // 0x004BE16C-0x004BE1A4
		public static bool SupportsIPv4 { get; } // 0x00BF7708-0x00BF777C 
		public static bool OSSupportsIPv4 { get; } // 0x00BFDD40-0x00BFDDB4 
		[Obsolete] // 0x004BE1A4-0x004BE1DC
		public static bool SupportsIPv6 { get; } // 0x00BF7694-0x00BF7708 
		public static bool OSSupportsIPv6 { get; } // 0x00BFDDB4-0x00BFDE28 
		public IntPtr Handle { get; } // 0x00BFDE28-0x00BFDE48 
		public AddressFamily AddressFamily { get; } // 0x00BFDE48-0x00BFDE50 
		public SocketType SocketType { get; } // 0x00BFDE50-0x00BFDE58 
		public ProtocolType ProtocolType { get; } // 0x00BFDE58-0x00BFDE60 
		public bool DontFragment { set; } // 0x00BFDE60-0x00BFDF0C
		public bool DualMode { get; set; } // 0x00BFE034-0x00BFE110 0x00BFE294-0x00BFE344
		private bool IsDualMode { get; } // 0x00BFE344-0x00BFE35C 
		private static object InternalSyncObject { get; } // 0x00BFF714-0x00BFF7F0 
		internal bool CleanedUp { get; } // 0x00BFF7F0-0x00BFF800 
		public bool Blocking { get; set; } // 0x00BFFBA8-0x00BFFBB0 0x00BFFBB0-0x00BFFC88
		public bool NoDelay { set; } // 0x00BFFB60-0x00BFFBA8
		internal static int FamilyHint { get; } // 0x00BF7898-0x00BF7938 
	
		// Nested types
		private struct WSABUF // TypeDefIndex: 1555
		{
			// Fields
			public int len; // 0x00
			public IntPtr buf; // 0x08
		}
	
		[Serializable]
		[CompilerGenerated] // 0x004BDC5C-0x004BDC6C
		private sealed class __c // TypeDefIndex: 1556
		{
			// Fields
			public static readonly __c __9; // 0x00
			public static IOAsyncCallback __9__241_0; // 0x08
	
			// Constructors
			static __c(); // 0x00C02BBC-0x00C02C20
			public __c(); // 0x00C02C20-0x00C02C28
	
			// Methods
			internal void _BeginSend_b__241_0(IOAsyncResult s); // 0x00C02C28-0x00C02CBC
			internal void _.cctor_b__309_0(IAsyncResult ares); // 0x00C02CBC-0x00C02FD8
			internal void _.cctor_b__309_1(IOAsyncResult ares); // 0x00C02FF0-0x00C03134
			internal void _.cctor_b__309_2(IOAsyncResult ares); // 0x00C0313C-0x00C03378
			internal void _.cctor_b__309_3(IAsyncResult ares); // 0x00C03384-0x00C03640
			internal void _.cctor_b__309_4(IOAsyncResult ares); // 0x00C03640-0x00C0390C
			internal void _.cctor_b__309_5(IAsyncResult ares); // 0x00C03AD8-0x00C03D94
			internal void _.cctor_b__309_6(IOAsyncResult ares); // 0x00C03D94-0x00C03EB4
			internal void _.cctor_b__309_7(IAsyncResult ares); // 0x00C03EB4-0x00C04174
			internal void _.cctor_b__309_8(IOAsyncResult ares); // 0x00C04174-0x00C0435C
			internal void _.cctor_b__309_9(IOAsyncResult ares); // 0x00C0435C-0x00C04484
			internal void _.cctor_b__309_10(IAsyncResult ares); // 0x00C04484-0x00C04748
			internal void _.cctor_b__309_11(IOAsyncResult ares); // 0x00C04748-0x00C048CC
			internal void _.cctor_b__309_12(IAsyncResult ares); // 0x00C048CC-0x00C04B8C
			internal void _.cctor_b__309_13(IOAsyncResult ares); // 0x00C04B8C-0x00C04CB4
			internal void _.cctor_b__309_14(IAsyncResult ares); // 0x00C04CB4-0x00C04F74
		}
	
		[CompilerGenerated] // 0x004BDC6C-0x004BDC7C
		private sealed class __c__DisplayClass242_0 // TypeDefIndex: 1557
		{
			// Fields
			public int sent_so_far; // 0x10
	
			// Constructors
			public __c__DisplayClass242_0(); // 0x00C02288-0x00C02290
	
			// Methods
			internal void _BeginSendCallback_b__0(IOAsyncResult s); // 0x00C04F74-0x00C05018
		}
	
		[CompilerGenerated] // 0x004BDC7C-0x004BDC8C
		private sealed class __c__DisplayClass298_0 // TypeDefIndex: 1558
		{
			// Fields
			public Socket __4__this; // 0x10
			public IOSelectorJob job; // 0x18
			public IntPtr handle; // 0x20
	
			// Constructors
			public __c__DisplayClass298_0(); // 0x00C027C8-0x00C027D0
	
			// Methods
			internal void _QueueIOSelectorJob_b__0(System.Threading.Tasks.Task t); // 0x00C05018-0x00C05068
		}
	
		// Constructors
		public Socket(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType); // 0x00BFD5F0-0x00BFD840
		internal Socket(AddressFamily family, SocketType type, ProtocolType proto, SafeSocketHandle safe_handle); // 0x00BFFA6C-0x00BFFB60
		static Socket(); // 0x00C027D4-0x00C02BBC
	
		// Methods
		public int Send(IList<ArraySegment<byte>> buffers, SocketFlags socketFlags); // 0x00BFE35C-0x00BFE408
		public int Send(byte[] buffer, int offset, int size, SocketFlags socketFlags); // 0x00BFB710-0x00BFB7D4
		public int Receive(byte[] buffer, int offset, int size, SocketFlags socketFlags); // 0x00BFB25C-0x00BFB320
		public int Receive(IList<ArraySegment<byte>> buffers, SocketFlags socketFlags); // 0x00BFEC18-0x00BFECC4
		public void SetIPProtectionLevel(IPProtectionLevel level); // 0x00BFDB3C-0x00BFDC44
		public IAsyncResult BeginSend(byte[] buffer, int offset, int size, SocketFlags socketFlags, AsyncCallback callback, object state); // 0x00BFC628-0x00BFC70C
		public int EndSend(IAsyncResult asyncResult); // 0x00BFCA34-0x00BFCAD0
		public IAsyncResult BeginReceive(byte[] buffer, int offset, int size, SocketFlags socketFlags, AsyncCallback callback, object state); // 0x00BFBD78-0x00BFBE5C
		public int EndReceive(IAsyncResult asyncResult); // 0x00BFC184-0x00BFC220
		internal static void InitializeSockets(); // 0x00BFD840-0x00BFDAC4
		public void Dispose(); // 0x00BFF864-0x00BFF8E0
		~Socket(); // 0x00BFF8E0-0x00BFF958
		internal void InternalShutdown(SocketShutdown how); // 0x00BFB854-0x00BFB8EC
		private void SocketDefaults(); // 0x00BFDC44-0x00BFDD40
		private IntPtr Socket_internal(AddressFamily family, SocketType type, ProtocolType proto, out int error); // 0x00BFDAC4-0x00BFDAC8
		private static void Blocking_internal(SafeSocketHandle safeHandle, bool block, out int error); // 0x00BFFD44-0x00BFFE58
		internal static void Blocking_internal(IntPtr socket, bool block, out int error); // 0x00BFD094-0x00BFD09C
		private static bool Poll_internal(IntPtr socket, SelectMode mode, int timeout, out int error); // 0x00BFFED8-0x00BFFEDC
		public Socket Accept(); // 0x00BFFEDC-0x00C0001C
		internal void Accept(Socket acceptSocket); // 0x00C00134-0x00C00268
		public Socket EndAccept(IAsyncResult asyncResult); // 0x00C00268-0x00C0029C
		public Socket EndAccept(out byte[] buffer, out int bytesTransferred, IAsyncResult asyncResult); // 0x00C0029C-0x00C00368
		private static SafeSocketHandle Accept_internal(SafeSocketHandle safeHandle, out int error, bool blocking); // 0x00C0001C-0x00C00134
		private static IntPtr Accept_internal(IntPtr sock, out int error, bool blocking); // 0x00C0056C-0x00C00574
		public IAsyncResult BeginConnect(string host, int port, AsyncCallback requestCallback, object state); // 0x00C00574-0x00C006EC
		public IAsyncResult BeginConnect(IPAddress[] addresses, int port, AsyncCallback requestCallback, object state); // 0x00C006EC-0x00C008EC
		private static void BeginMConnect(SocketAsyncResult sockares); // 0x00C0093C-0x00C00AE8
		private static void BeginSConnect(SocketAsyncResult sockares); // 0x00C00AE8-0x00C00E94
		public void EndConnect(IAsyncResult asyncResult); // 0x00C010DC-0x00C01180
		private static void Connect_internal(SafeSocketHandle safeHandle, SocketAddress sa, out int error, bool blocking); // 0x00C00F68-0x00C0106C
		private static void Connect_internal(IntPtr sock, SocketAddress sa, out int error, bool blocking); // 0x00C01180-0x00C01188
		public void Disconnect(bool reuseSocket); // 0x00C01188-0x00C0127C
		public void EndDisconnect(IAsyncResult asyncResult); // 0x00C01390-0x00C01434
		private static void Disconnect_internal(SafeSocketHandle safeHandle, bool reuse, out int error); // 0x00C0127C-0x00C01390
		private static void Disconnect_internal(IntPtr sock, bool reuse, out int error); // 0x00C01434-0x00C0143C
		public int Receive(byte[] buffer, int offset, int size, SocketFlags socketFlags, out SocketError errorCode); // 0x00BFEAF4-0x00BFEC18
		[CLSCompliant] // 0x004BE0E4-0x004BE0F8
		public int Receive(IList<ArraySegment<byte>> buffers, SocketFlags socketFlags, out SocketError errorCode); // 0x00BFECC4-0x00BFF21C
		public IAsyncResult BeginReceive(byte[] buffer, int offset, int size, SocketFlags socketFlags, out SocketError errorCode, AsyncCallback callback, object state); // 0x00BFF4D4-0x00BFF638
		public int EndReceive(IAsyncResult asyncResult, out SocketError errorCode); // 0x00BFF638-0x00BFF714
		private static unsafe int Receive_internal(SafeSocketHandle safeHandle, WSABUF* bufarray, int count, SocketFlags flags, out int error, bool blocking); // 0x00C01704-0x00C01818
		private static unsafe int Receive_internal(IntPtr sock, WSABUF* bufarray, int count, SocketFlags flags, out int error, bool blocking); // 0x00C019E4-0x00C019EC
		private static unsafe int Receive_internal(SafeSocketHandle safeHandle, byte* buffer, int count, SocketFlags flags, out int error, bool blocking); // 0x00C015F0-0x00C01704
		private static unsafe int Receive_internal(IntPtr sock, byte* buffer, int count, SocketFlags flags, out int error, bool blocking); // 0x00C019EC-0x00C019F4
		internal int ReceiveFrom(byte[] buffer, int offset, int size, SocketFlags socketFlags, ref EndPoint remoteEP, out SocketError errorCode); // 0x00C019F4-0x00C01B88
		public int EndReceiveFrom(IAsyncResult asyncResult, ref EndPoint endPoint); // 0x00C01CA4-0x00C01DA4
		private static unsafe int ReceiveFrom_internal(SafeSocketHandle safeHandle, byte* buffer, int count, SocketFlags flags, ref SocketAddress sockaddr, out int error, bool blocking); // 0x00C01B88-0x00C01CA4
		private static unsafe int ReceiveFrom_internal(IntPtr sock, byte* buffer, int count, SocketFlags flags, ref SocketAddress sockaddr, out int error, bool blocking); // 0x00C01DA4-0x00C01DAC
		public int Send(byte[] buffer, int offset, int size, SocketFlags socketFlags, out SocketError errorCode); // 0x00BFE998-0x00BFEAF4
		[CLSCompliant] // 0x004BE0F8-0x004BE10C
		public int Send(IList<ArraySegment<byte>> buffers, SocketFlags socketFlags, out SocketError errorCode); // 0x00BFE408-0x00BFE998
		public IAsyncResult BeginSend(byte[] buffer, int offset, int size, SocketFlags socketFlags, out SocketError errorCode, AsyncCallback callback, object state); // 0x00BFF21C-0x00BFF3F8
		private static void BeginSendCallback(SocketAsyncResult sockares, int sent_so_far); // 0x00C01FD4-0x00C02288
		public int EndSend(IAsyncResult asyncResult, out SocketError errorCode); // 0x00BFF3F8-0x00BFF4D4
		private static unsafe int Send_internal(SafeSocketHandle safeHandle, WSABUF* bufarray, int count, SocketFlags flags, out int error, bool blocking); // 0x00C01EC0-0x00C01FD4
		private static unsafe int Send_internal(IntPtr sock, WSABUF* bufarray, int count, SocketFlags flags, out int error, bool blocking); // 0x00C022A0-0x00C022A8
		private static unsafe int Send_internal(SafeSocketHandle safeHandle, byte* buffer, int count, SocketFlags flags, out int error, bool blocking); // 0x00C01DAC-0x00C01EC0
		private static unsafe int Send_internal(IntPtr sock, byte* buffer, int count, SocketFlags flags, out int error, bool blocking); // 0x00C022A8-0x00C022B0
		public int EndSendTo(IAsyncResult asyncResult); // 0x00C022B0-0x00C0235C
		public object GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName); // 0x00BFE110-0x00BFE294
		private static void GetSocketOption_obj_internal(SafeSocketHandle safeHandle, SocketOptionLevel level, SocketOptionName name, out object obj_val, out int error); // 0x00C0235C-0x00C02488
		private static void GetSocketOption_obj_internal(IntPtr socket, SocketOptionLevel level, SocketOptionName name, out object obj_val, out int error); // 0x00C02488-0x00C0248C
		public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, int optionValue); // 0x00BFDF0C-0x00BFE034
		private static void SetSocketOption_internal(SafeSocketHandle safeHandle, SocketOptionLevel level, SocketOptionName name, object obj_val, byte[] byte_val, int int_val, out int error); // 0x00C0248C-0x00C025D0
		private static void SetSocketOption_internal(IntPtr socket, SocketOptionLevel level, SocketOptionName name, object obj_val, byte[] byte_val, int int_val, out int error); // 0x00C025D0-0x00C025D4
		public void Close(); // 0x00C025D4-0x00C025DC
		public void Close(int timeout); // 0x00BFB8EC-0x00BFB8F4
		internal static void Close_internal(IntPtr socket, out int error); // 0x00BFD0A4-0x00BFD0A8
		private static void Shutdown_internal(SafeSocketHandle safeHandle, SocketShutdown how, out int error); // 0x00BFF958-0x00BFFA6C
		internal static void Shutdown_internal(IntPtr socket, SocketShutdown how, out int error); // 0x00BFD09C-0x00BFD0A0
		protected virtual void Dispose(bool disposing); // 0x00C025DC-0x00C0264C
		private void Linger(IntPtr handle); // 0x00C0264C-0x00C027C8
		private void ThrowIfDisposedAndClosed(); // 0x00BFFC88-0x00BFFD44
		private void ThrowIfBufferNull(byte[] buffer); // 0x00C0143C-0x00C014C0
		private void ThrowIfBufferOutOfRange(byte[] buffer, int offset, int size); // 0x00C014C0-0x00C015F0
		private void ThrowIfUdp(); // 0x00BFFE58-0x00BFFED8
		private SocketAsyncResult ValidateEndIAsyncResult(IAsyncResult ares, string methodName, string argName); // 0x00C00368-0x00C004A4
		private void QueueIOSelectorJob(SemaphoreSlim sem, IntPtr handle, IOSelectorJob job); // 0x00C01818-0x00C0195C
		private IPEndPoint RemapIPEndPoint(IPEndPoint input); // 0x00C00EA4-0x00C00F68
		internal static void cancel_blocking_socket_operation(Thread thread); // 0x00BFD0A0-0x00BFD0A4
		private static bool IsProtocolSupported_internal(NetworkInterfaceComponent networkInterface); // 0x00C027D0-0x00C027D4
		private static bool IsProtocolSupported(NetworkInterfaceComponent networkInterface); // 0x00BFF800-0x00BFF864
	}

	public enum SocketError // TypeDefIndex: 1559
	{
		SocketError = -1,
		Success = 0,
		OperationAborted = 995,
		IOPending = 997,
		Interrupted = 10004,
		AccessDenied = 10013,
		Fault = 10014,
		InvalidArgument = 10022,
		TooManyOpenSockets = 10024,
		WouldBlock = 10035,
		InProgress = 10036,
		AlreadyInProgress = 10037,
		NotSocket = 10038,
		DestinationAddressRequired = 10039,
		MessageSize = 10040,
		ProtocolType = 10041,
		ProtocolOption = 10042,
		ProtocolNotSupported = 10043,
		SocketNotSupported = 10044,
		OperationNotSupported = 10045,
		ProtocolFamilyNotSupported = 10046,
		AddressFamilyNotSupported = 10047,
		AddressAlreadyInUse = 10048,
		AddressNotAvailable = 10049,
		NetworkDown = 10050,
		NetworkUnreachable = 10051,
		NetworkReset = 10052,
		ConnectionAborted = 10053,
		ConnectionReset = 10054,
		NoBufferSpaceAvailable = 10055,
		IsConnected = 10056,
		NotConnected = 10057,
		Shutdown = 10058,
		TimedOut = 10060,
		ConnectionRefused = 10061,
		HostDown = 10064,
		HostUnreachable = 10065,
		ProcessLimit = 10067,
		SystemNotReady = 10091,
		VersionNotSupported = 10092,
		NotInitialized = 10093,
		Disconnecting = 10101,
		TypeNotFound = 10109,
		HostNotFound = 11001,
		TryAgain = 11002,
		NoRecovery = 11003,
		NoData = 11004
	}

	[Flags] // 0x004BDC8C-0x004BDC9C
	public enum SocketFlags // TypeDefIndex: 1560
	{
		None = 0,
		OutOfBand = 1,
		Peek = 2,
		DontRoute = 4,
		MaxIOVectorLength = 16,
		Truncated = 256,
		ControlDataTruncated = 512,
		Broadcast = 1024,
		Multicast = 2048,
		Partial = 32768
	}

	public enum SocketOptionLevel // TypeDefIndex: 1561
	{
		IP = 0,
		Tcp = 6,
		Udp = 17,
		IPv6 = 41,
		Socket = 65535
	}

	public enum SocketOptionName // TypeDefIndex: 1562
	{
		DontLinger = -129,
		ExclusiveAddressUse = -5,
		Debug = 1,
		IPOptions = 1,
		NoDelay = 1,
		NoChecksum = 1,
		AcceptConnection = 2,
		HeaderIncluded = 2,
		BsdUrgent = 2,
		Expedited = 2,
		TypeOfService = 3,
		ReuseAddress = 4,
		IpTimeToLive = 4,
		KeepAlive = 8,
		MulticastInterface = 9,
		MulticastTimeToLive = 10,
		MulticastLoopback = 11,
		AddMembership = 12,
		DropMembership = 13,
		DontFragment = 14,
		AddSourceMembership = 15,
		DontRoute = 16,
		DropSourceMembership = 16,
		BlockSource = 17,
		UnblockSource = 18,
		PacketInformation = 19,
		ChecksumCoverage = 20,
		HopLimit = 21,
		IPProtectionLevel = 23,
		IPv6Only = 27,
		Broadcast = 32,
		UseLoopback = 64,
		Linger = 128,
		OutOfBandInline = 256,
		SendBuffer = 4097,
		ReceiveBuffer = 4098,
		SendLowWater = 4099,
		ReceiveLowWater = 4100,
		SendTimeout = 4101,
		ReceiveTimeout = 4102,
		Error = 4103,
		Type = 4104,
		ReuseUnicastPort = 12295,
		UpdateAcceptContext = 28683,
		UpdateConnectContext = 28688,
		MaxConnections = 2147483647
	}

	public enum SocketShutdown // TypeDefIndex: 1563
	{
		Receive = 0,
		Send = 1,
		Both = 2
	}

	public enum SocketType // TypeDefIndex: 1564
	{
		Unknown = -1,
		Stream = 1,
		Dgram = 2,
		Raw = 3,
		Rdm = 4,
		Seqpacket = 5
	}

	public class TcpClient : IDisposable // TypeDefIndex: 1565
	{
		// Fields
		private Socket m_ClientSocket; // 0x10
		private bool m_Active; // 0x18
		private NetworkStream m_DataStream; // 0x20
		private AddressFamily m_Family; // 0x28
		private bool m_CleanedUp; // 0x2C
	
		// Properties
		public Socket Client { get; set; } // 0x00C0552C-0x00C05534 0x00C05534-0x00C0553C
	
		// Constructors
		public TcpClient(); // 0x00C05350-0x00C05398
		public TcpClient(AddressFamily family); // 0x00C05398-0x00C054B4
	
		// Methods
		public IAsyncResult BeginConnect(string host, int port, AsyncCallback requestCallback, object state); // 0x00C0553C-0x00C055B8
		public void EndConnect(IAsyncResult asyncResult); // 0x00C055B8-0x00C05620
		protected virtual void Dispose(bool disposing); // 0x00C05620-0x00C05780
		public void Dispose(); // 0x00C05780-0x00C05790
		~TcpClient(); // 0x00C05790-0x00C05808
		private void initialize(); // 0x00C054B4-0x00C0552C
	}

	internal sealed class SafeSocketHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 1566
	{
		// Fields
		private List<Thread> blocking_threads; // 0x20
		private Dictionary<Thread, StackTrace> threads_stacktraces; // 0x28
		private bool in_cleanup; // 0x30
		private static bool THROW_ON_ABORT_RETRIES; // 0x00
	
		// Constructors
		public SafeSocketHandle(IntPtr preexistingHandle, bool ownsHandle); // 0x00BFCAD4-0x00BFCB90
		static SafeSocketHandle(); // 0x00BFD574-0x00BFD5F0
	
		// Methods
		protected override bool ReleaseHandle(); // 0x00BFCB90-0x00BFD094
		public void RegisterForBlockingSyscall(); // 0x00BFD0A8-0x00BFD364
		public void UnRegisterForBlockingSyscall(); // 0x00BFD3D8-0x00BFD574
	}

	public class SocketAsyncEventArgs : EventArgs // TypeDefIndex: 1567
	{
		// Fields
		private bool disposed; // 0x10
		internal int in_progress; // 0x14
		internal EndPoint remote_ep; // 0x18
		internal Socket current_socket; // 0x20
		[CompilerGenerated] // 0x004BE06C-0x004BE07C
		private Socket _AcceptSocket_k__BackingField; // 0x28
		[CompilerGenerated] // 0x004BE07C-0x004BE08C
		private int _BytesTransferred_k__BackingField; // 0x30
		[CompilerGenerated] // 0x004BE08C-0x004BE09C
		private SocketError _SocketError_k__BackingField; // 0x34
		[CompilerGenerated] // 0x004BE09C-0x004BE0AC
		private EventHandler<SocketAsyncEventArgs> Completed; // 0x38
	
		// Properties
		public Socket AcceptSocket { [CompilerGenerated] /* 0x004BE10C-0x004BE11C */ get; [CompilerGenerated] /* 0x004BE11C-0x004BE12C */ set; } // 0x00C05068-0x00C05070 0x00C05070-0x00C05078
		internal int BytesTransferred { [CompilerGenerated] /* 0x004BE12C-0x004BE13C */ set; } // 0x00C05078-0x00C05080
		public SocketError SocketError { [CompilerGenerated] /* 0x004BE13C-0x004BE14C */ set; } // 0x00C05080-0x00C05088
	
		// Methods
		~SocketAsyncEventArgs(); // 0x00C05088-0x00C05098
		private void Dispose(bool disposing); // 0x00C05098-0x00C050AC
		internal void Complete(); // 0x00C02FE0-0x00C02FF0
		protected virtual void OnCompleted(SocketAsyncEventArgs e); // 0x00C050AC-0x00C05118
	}

	internal sealed class SocketAsyncResult : IOAsyncResult // TypeDefIndex: 1568
	{
		// Fields
		public Socket socket; // 0x30
		public SocketOperation operation; // 0x38
		private Exception DelayedException; // 0x40
		public EndPoint EndPoint; // 0x48
		public byte[] Buffer; // 0x50
		public int Offset; // 0x58
		public int Size; // 0x5C
		public SocketFlags SockFlags; // 0x60
		public Socket AcceptSocket; // 0x68
		public IPAddress[] Addresses; // 0x70
		public int Port; // 0x78
		public IList<ArraySegment<byte>> Buffers; // 0x80
		public bool ReuseSocket; // 0x88
		public int CurrentAddress; // 0x8C
		public Socket AcceptedSocket; // 0x90
		public int Total; // 0x98
		internal int error; // 0x9C
		public int EndCalled; // 0xA0
	
		// Properties
		public IntPtr Handle { get; } // 0x00C01078-0x00C010DC 
		public SocketError ErrorCode { get; } // 0x00C0195C-0x00C019E4 
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x004BDC9C-0x004BDCAC
		private sealed class __c // TypeDefIndex: 1569
		{
			// Fields
			public static readonly __c __9; // 0x00
			public static WaitCallback __9__27_0; // 0x08
	
			// Constructors
			static __c(); // 0x00C0511C-0x00C05180
			public __c(); // 0x00C05180-0x00C05188
	
			// Methods
			internal void _Complete_b__27_0(object state); // 0x00C05188-0x00C05214
		}
	
		// Constructors
		public SocketAsyncResult(Socket socket, AsyncCallback callback, object state, SocketOperation operation); // 0x00C008EC-0x00C0093C
	
		// Methods
		public void CheckIfThrowDelayedException(); // 0x00C004A4-0x00C0056C
		internal override void CompleteDisposed(); // 0x00C05118-0x00C0511C
		public void Complete(); // 0x00C0390C-0x00C03AD8
		public void Complete(bool synch); // 0x00C0106C-0x00C01078
		public void Complete(int total); // 0x00C02298-0x00C022A0
		public void Complete(Exception e, bool synch); // 0x00C00E94-0x00C00EA4
		public void Complete(Exception e); // 0x00C02290-0x00C02298
		public void Complete(Socket s); // 0x00C03134-0x00C0313C
		public void Complete(Socket s, int total); // 0x00C03378-0x00C03384
	}

	internal enum SocketOperation // TypeDefIndex: 1570
	{
		Accept = 0,
		Connect = 1,
		Receive = 2,
		ReceiveFrom = 3,
		Send = 4,
		SendTo = 5,
		RecvJustCallback = 6,
		SendJustCallback = 7,
		Disconnect = 8,
		AcceptReceive = 9,
		ReceiveGeneric = 10,
		SendGeneric = 11
	}
}

namespace System.Net.NetworkInformation
{
	public enum NetworkInterfaceComponent // TypeDefIndex: 1571
	{
		IPv4 = 0,
		IPv6 = 1
	}
}

namespace System.Net.Configuration
{
	internal sealed class SettingsSectionInternal // TypeDefIndex: 1572
	{
		// Fields
		private static readonly SettingsSectionInternal instance; // 0x00
		internal readonly bool HttpListenerUnescapeRequestUrl; // 0x10
		internal readonly IPProtectionLevel IPProtectionLevel; // 0x14
	
		// Properties
		internal static SettingsSectionInternal Section { get; } // 0x00BF6C7C-0x00BF6CE4 
		internal bool Ipv6Enabled { get; } // 0x00BF6CE4-0x00BF6CEC 
	
		// Constructors
		public SettingsSectionInternal(); // 0x00BF6CEC-0x00BF6D04
		static SettingsSectionInternal(); // 0x00BF6D04-0x00BF6D78
	}
}

namespace System.Collections.Generic
{
	internal sealed class ICollectionDebugView<T> // TypeDefIndex: 1573
	{
	}

	[Serializable]
	[DebuggerDisplay] // 0x004BDCAC-0x004BDD34
	[DebuggerTypeProxy] // 0x004BDCAC-0x004BDD34
	public class LinkedList<T> : ICollection<T>, ICollection, IReadOnlyCollection<T>, ISerializable, IDeserializationCallback // TypeDefIndex: 1574
	{
		// Fields
		internal LinkedListNode<T> head;
		internal int count;
		internal int version;
		private SerializationInfo _siInfo;
	
		// Properties
		public int Count { get; }
		public LinkedListNode<T> First { get; }
		bool ICollection<T>.IsReadOnly { get; }
	
		// Nested types
		[Serializable]
		public struct Enumerator : IEnumerator<T>, ISerializable, IDeserializationCallback // TypeDefIndex: 1575
		{
			// Fields
			private LinkedList<T> _list;
			private LinkedListNode<T> _node;
			private int _version;
			private T _current;
			private int _index;
	
			// Properties
			public T Current { get; }
			object IEnumerator.Current { get; }
	
			// Constructors
			internal Enumerator(LinkedList<T> list);
			private Enumerator(SerializationInfo info, StreamingContext context);
	
			// Methods
			public bool MoveNext();
			void IEnumerator.Reset();
			public void Dispose();
			void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
			void IDeserializationCallback.OnDeserialization(object sender);
		}
	
		// Constructors
		public LinkedList();
		protected LinkedList(SerializationInfo info, StreamingContext context);
	
		// Methods
		void ICollection<T>.Add(T value);
		public LinkedListNode<T> AddFirst(T value);
		public void AddFirst(LinkedListNode<T> node);
		public LinkedListNode<T> AddLast(T value);
		public void Clear();
		public bool Contains(T value);
		public void CopyTo(T[] array, int index);
		public LinkedListNode<T> Find(T value);
		public Enumerator GetEnumerator();
		IEnumerator<T> IEnumerable<T>.GetEnumerator();
		public bool Remove(T value);
		public void Remove(LinkedListNode<T> node);
		public void RemoveLast();
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
		public virtual void OnDeserialization(object sender);
		private void InternalInsertNodeBefore(LinkedListNode<T> node, LinkedListNode<T> newNode);
		private void InternalInsertNodeToEmptyList(LinkedListNode<T> newNode);
		internal void InternalRemoveNode(LinkedListNode<T> node);
		internal void ValidateNewNode(LinkedListNode<T> node);
		internal void ValidateNode(LinkedListNode<T> node);
		void ICollection.CopyTo(Array array, int index);
		IEnumerator IEnumerable.GetEnumerator();
	}

	public sealed class LinkedListNode<T> // TypeDefIndex: 1576
	{
		// Fields
		internal LinkedList<T> list;
		internal LinkedListNode<T> next;
		internal LinkedListNode<T> prev;
		internal T item;
	
		// Properties
		public LinkedListNode<T> Next { get; }
		public T Value { get; }
	
		// Constructors
		internal LinkedListNode(LinkedList<T> list, T value);
	
		// Methods
		internal void Invalidate();
	}

	[Serializable]
	[DebuggerDisplay] // 0x004BDD34-0x004BDDBC
	[DebuggerTypeProxy] // 0x004BDD34-0x004BDDBC
	public class Queue<T> : ICollection, IReadOnlyCollection<T> // TypeDefIndex: 1577
	{
		// Fields
		private T[] _array;
		private int _head;
		private int _tail;
		private int _size;
		private int _version;
		[NonSerialized]
		private object _syncRoot;
		private const int MinimumGrow = 4; // Metadata: 0x001F322F
		private const int GrowFactor = 200; // Metadata: 0x001F3233
	
		// Properties
		public int Count { get; }
	
		// Nested types
		[Serializable]
		public struct Enumerator : IEnumerator<T> // TypeDefIndex: 1578
		{
			// Fields
			private readonly Queue<T> _q;
			private readonly int _version;
			private int _index;
			private T _currentElement;
	
			// Properties
			public T Current { get; }
			object IEnumerator.Current { get; }
	
			// Constructors
			internal Enumerator(Queue<T> q);
	
			// Methods
			public void Dispose();
			public bool MoveNext();
			private void ThrowEnumerationNotStartedOrEnded();
			void IEnumerator.Reset();
		}
	
		// Constructors
		public Queue();
	
		// Methods
		public void Clear();
		void ICollection.CopyTo(Array array, int index);
		public void Enqueue(T item);
		IEnumerator<T> IEnumerable<T>.GetEnumerator();
		IEnumerator IEnumerable.GetEnumerator();
		public T Dequeue();
		private void SetCapacity(int capacity);
		private void MoveNext(ref int index);
		private void ThrowForEmptyQueue();
	}

	internal sealed class QueueDebugView<T> // TypeDefIndex: 1579
	{
	}

	[Serializable]
	[DebuggerDisplay] // 0x004BDDBC-0x004BDE44
	[DebuggerTypeProxy] // 0x004BDDBC-0x004BDE44
	public class Stack<T> : ICollection, IReadOnlyCollection<T> // TypeDefIndex: 1580
	{
		// Fields
		private T[] _array;
		private int _size;
		private int _version;
	
		// Properties
		public int Count { get; }
	
		// Nested types
		[Serializable]
		public struct Enumerator : IEnumerator<T> // TypeDefIndex: 1581
		{
			// Fields
			private readonly Stack<T> _stack;
			private readonly int _version;
			private int _index;
			private T _currentElement;
	
			// Properties
			public T Current { get; }
			object IEnumerator.Current { get; }
	
			// Constructors
			internal Enumerator(Stack<T> stack);
	
			// Methods
			public void Dispose();
			public bool MoveNext();
			private void ThrowEnumerationNotStartedOrEnded();
			void IEnumerator.Reset();
		}
	
		// Constructors
		public Stack();
	
		// Methods
		void ICollection.CopyTo(Array array, int arrayIndex);
		IEnumerator<T> IEnumerable<T>.GetEnumerator();
		IEnumerator IEnumerable.GetEnumerator();
		public T Peek();
		public T Pop();
		public void Push(T item);
		private void ThrowForEmptyStack();
	}

	internal sealed class StackDebugView<T> // TypeDefIndex: 1582
	{
	}
}

[CompilerGenerated] // 0x004BDE44-0x004BDE54
internal sealed class _PrivateImplementationDetails_ // TypeDefIndex: 1583
{
	// Fields
	internal static readonly long _03F4297FCC30D0FD5E420E5D26E7FA711167C7EF; // 0x00 // Starts with: 20 00 0d 00 0a 00 09 00 - Metadata: 0x001F3237
	internal static readonly __StaticArrayInitTypeSize_32 _59F5BD34B6C013DEACC784F69C67E95150033A84; // 0x08 // Starts with: 30 00 31 00 32 00 33 00 - Metadata: 0x001F323F
	internal static readonly __StaticArrayInitTypeSize_44 _8E0EF3D67A3EB1863224EE3CACB424BC2F8CFBA3; // 0x28 // Starts with: 28 00 29 00 3c 00 3e 00 - Metadata: 0x001F325F
	internal static readonly __StaticArrayInitTypeSize_32 C02C28AFEBE998F767E4AF43E3BE8F5E9FA11536; // 0x54 // Starts with: 30 00 31 00 32 00 33 00 - Metadata: 0x001F328B
	internal static readonly __StaticArrayInitTypeSize_128 CCEEADA43268372341F81AE0C9208C6856441C04; // 0x74 // Starts with: 00 00 00 00 00 00 00 00 - Metadata: 0x001F32AB
	internal static readonly long E5BC1BAFADE1862DD6E0B9FB632BFAA6C3873A78; // 0xF8 // Starts with: 20 00 0a 00 0d 00 09 00 - Metadata: 0x001F332B

	// Nested types
	private struct __StaticArrayInitTypeSize_32 // TypeDefIndex: 1584
	{
	}

	private struct __StaticArrayInitTypeSize_44 // TypeDefIndex: 1585
	{
	}

	private struct __StaticArrayInitTypeSize_128 // TypeDefIndex: 1586
	{
	}

	// Methods
	internal static uint ComputeStringHash(string s); // 0x00BF0CE0-0x00BF0D60
}

namespace System.Configuration
{
	public interface IConfigurationSectionHandler // TypeDefIndex: 1587
	{
	}
}

namespace System.Net.Configuration
{
	public sealed class BypassElement : ConfigurationElement // TypeDefIndex: 1588
	{
		// Properties
		protected override ConfigurationPropertyCollection Properties { get; } // 0x00BF66FC-0x00BF673C 
	}

	[ConfigurationCollection] // 0x004BDE54-0x004BDEDC
	[DefaultMember] // 0x004BDE54-0x004BDEDC
	public sealed class BypassElementCollection : ConfigurationElementCollection // TypeDefIndex: 1589
	{
		// Constructors
		public BypassElementCollection(); // 0x00BF673C-0x00BF677C
	}

	public sealed class ConnectionManagementElement : ConfigurationElement // TypeDefIndex: 1590
	{
		// Properties
		protected override ConfigurationPropertyCollection Properties { get; } // 0x00BF677C-0x00BF67BC 
	}

	[ConfigurationCollection] // 0x004BDEDC-0x004BDF64
	[DefaultMember] // 0x004BDEDC-0x004BDF64
	public sealed class ConnectionManagementElementCollection : ConfigurationElementCollection // TypeDefIndex: 1591
	{
		// Constructors
		public ConnectionManagementElementCollection(); // 0x00BF67BC-0x00BF67FC
	}

	public sealed class ConnectionManagementSection : ConfigurationSection // TypeDefIndex: 1592
	{
		// Properties
		protected override ConfigurationPropertyCollection Properties { get; } // 0x00BF683C-0x00BF687C 
	
		// Constructors
		public ConnectionManagementSection(); // 0x00BF67FC-0x00BF683C
	}

	public sealed class DefaultProxySection : ConfigurationSection // TypeDefIndex: 1593
	{
		// Properties
		protected override ConfigurationPropertyCollection Properties { get; } // 0x00BF68BC-0x00BF68FC 
	
		// Constructors
		public DefaultProxySection(); // 0x00BF687C-0x00BF68BC
	
		// Methods
		protected override void Reset(ConfigurationElement parentElement); // 0x00BF68FC-0x00BF693C
	}

	public sealed class ProxyElement : ConfigurationElement // TypeDefIndex: 1594
	{
		// Properties
		protected override ConfigurationPropertyCollection Properties { get; } // 0x00BF6B3C-0x00BF6B7C 
	
		// Constructors
		public ProxyElement(); // 0x00BF6AFC-0x00BF6B3C
	}

	public sealed class HttpWebRequestElement : ConfigurationElement // TypeDefIndex: 1595
	{
		// Properties
		protected override ConfigurationPropertyCollection Properties { get; } // 0x00BF697C-0x00BF69BC 
	
		// Constructors
		public HttpWebRequestElement(); // 0x00BF693C-0x00BF697C
	}

	public sealed class Ipv6Element : ConfigurationElement // TypeDefIndex: 1596
	{
		// Properties
		protected override ConfigurationPropertyCollection Properties { get; } // 0x00BF69FC-0x00BF6A3C 
	
		// Constructors
		public Ipv6Element(); // 0x00BF69BC-0x00BF69FC
	}

	public sealed class NetSectionGroup : ConfigurationSectionGroup // TypeDefIndex: 1597
	{
		// Constructors
		public NetSectionGroup(); // 0x00BF6A3C-0x00BF6A7C
	}

	public sealed class SettingsSection : ConfigurationSection // TypeDefIndex: 1598
	{
		// Properties
		protected override ConfigurationPropertyCollection Properties { get; } // 0x00BF6C3C-0x00BF6C7C 
	
		// Constructors
		public SettingsSection(); // 0x00BF6BFC-0x00BF6C3C
	}

	public sealed class PerformanceCountersElement : ConfigurationElement // TypeDefIndex: 1599
	{
		// Properties
		protected override ConfigurationPropertyCollection Properties { get; } // 0x00BF6ABC-0x00BF6AFC 
	
		// Constructors
		public PerformanceCountersElement(); // 0x00BF6A7C-0x00BF6ABC
	}

	public sealed class ServicePointManagerElement : ConfigurationElement // TypeDefIndex: 1600
	{
		// Properties
		protected override ConfigurationPropertyCollection Properties { get; } // 0x00BF6BBC-0x00BF6BFC 
	
		// Constructors
		public ServicePointManagerElement(); // 0x00BF6B7C-0x00BF6BBC
	}

	public sealed class SocketElement : ConfigurationElement // TypeDefIndex: 1601
	{
		// Properties
		protected override ConfigurationPropertyCollection Properties { get; } // 0x00BF6DB8-0x00BF6DF8 
	
		// Constructors
		public SocketElement(); // 0x00BF6D78-0x00BF6DB8
	}

	public sealed class WebProxyScriptElement : ConfigurationElement // TypeDefIndex: 1602
	{
		// Properties
		protected override ConfigurationPropertyCollection Properties { get; } // 0x00BF6E38-0x00BF6E78 
	
		// Constructors
		public WebProxyScriptElement(); // 0x00BF6DF8-0x00BF6E38
	}

	public sealed class WebRequestModulesSection : ConfigurationSection // TypeDefIndex: 1603
	{
		// Properties
		protected override ConfigurationPropertyCollection Properties { get; } // 0x00BF6F38-0x00BF6F78 
	
		// Constructors
		public WebRequestModulesSection(); // 0x00BF6EF8-0x00BF6F38
	}

	[ConfigurationCollection] // 0x004BDF64-0x004BDFEC
	[DefaultMember] // 0x004BDF64-0x004BDFEC
	public sealed class WebRequestModuleElementCollection : ConfigurationElementCollection // TypeDefIndex: 1604
	{
		// Constructors
		public WebRequestModuleElementCollection(); // 0x00BF6EB8-0x00BF6EF8
	}

	public sealed class WebRequestModuleElement : ConfigurationElement // TypeDefIndex: 1605
	{
		// Properties
		protected override ConfigurationPropertyCollection Properties { get; } // 0x00BF6E78-0x00BF6EB8 
	}
}

namespace System.Diagnostics
{
	[Obsolete] // 0x004BDFEC-0x004BE024
	public class DiagnosticsConfigurationHandler : IConfigurationSectionHandler // TypeDefIndex: 1606
	{
		// Constructors
		public DiagnosticsConfigurationHandler(); // 0x00BF2810-0x00BF2850
	
		// Methods
		public virtual object Create(object parent, object configContext, XmlNode section); // 0x00BF2850-0x00BF2890
	}
}

namespace Unity
{
	internal sealed class ThrowStub : ObjectDisposedException // TypeDefIndex: 1607
	{
		// Methods
		public static void ThrowNotSupportedException(); // 0x00F5A9C0-0x00F5BA24
	}
}

namespace Mono.Security
{
	public class ASN1 // TypeDefIndex: 1609
	{
		// Fields
		private byte m_nTag; // 0x10
		private byte[] m_aValue; // 0x18
		private ArrayList elist; // 0x20
	
		// Properties
		public int Count { get; } // 0x00FB10E0-0x00FB10FC 
		public byte Tag { get; } // 0x00FB10FC-0x00FB1104 
		public byte[] Value { get; set; } // 0x00FB1104-0x00FB11A0 0x00FB11A0-0x00FB1230
		public ASN1 this[int index] { get => default; } // 0x00FB1A4C-0x00FB1B8C 
	
		// Constructors
		public ASN1(byte tag); // 0x00FB0DB8-0x00FB0DE8
		public ASN1(byte tag, byte[] data); // 0x00FB0DE8-0x00FB0E24
		public ASN1(byte[] data); // 0x00FB0E24-0x00FB0FB4
	
		// Methods
		public ASN1 Add(ASN1 asn1); // 0x00FB1230-0x00FB12D0
		public virtual byte[] GetBytes(); // 0x00FB12D0-0x00FB1900
		protected void Decode(byte[] asn1, ref int anPos, int anLength); // 0x00FB0FB4-0x00FB10E0
		protected void DecodeTLV(byte[] asn1, ref int pos, out byte tag, out int length, out byte[] content); // 0x00FB1900-0x00FB1A4C
		public override string ToString(); // 0x00FB1B8C-0x00FB1E24
	}

	public static class ASN1Convert // TypeDefIndex: 1610
	{
		// Methods
		public static ASN1 FromInt32(int value); // 0x00FB1E24-0x00FB1FA4
		public static int ToInt32(ASN1 asn1); // 0x00FB1FC8-0x00FB2104
		public static string ToOid(ASN1 asn1); // 0x00FB2104-0x00FB23B0
	}

	internal sealed class BitConverterLE // TypeDefIndex: 1611
	{
		// Methods
		private static unsafe byte[] GetUIntBytes(byte* bytes); // 0x00FB23B0-0x00FB24D0
		internal static byte[] GetBytes(int value); // 0x00FB1FA4-0x00FB1FC8
	}
}

namespace Mono.Security.Cryptography
{
	public sealed class CryptoConvert // TypeDefIndex: 1612
	{
		// Methods
		public static string ToHex(byte[] input); // 0x00FB24D0-0x00FB2610
	}
}

namespace System.Xml
{
	[DebuggerDisplay] // 0x004BE678-0x004BE704
	[DebuggerDisplay] // 0x004BE678-0x004BE704
	[DefaultMember] // 0x004BE678-0x004BE704
	public abstract class XmlReader // TypeDefIndex: 1614
	{
		// Fields
		private static uint IsTextualNodeBitmap; // 0x00
		private static uint CanReadContentAsBitmap; // 0x04
		private static uint HasValueBitmap; // 0x08
	
		// Constructors
		static XmlReader(); // 0x00FB9B5C-0x00FB9BD8
	}

	[DebuggerDisplay] // 0x004BE704-0x004BE764
	[DefaultMember] // 0x004BE704-0x004BE764
	public abstract class XmlNode // TypeDefIndex: 1615
	{
	}
}

namespace System.Configuration
{
	public abstract class ConfigurationSection : ConfigurationElement // TypeDefIndex: 1617
	{
		// Methods
		protected internal virtual void DeserializeSection(XmlReader reader); // 0x00FB6D60-0x00FB6DA0
		protected internal override bool IsModified(); // 0x00FB6DA0-0x00FB6DE0
		protected internal override void ResetModified(); // 0x00FB6DE0-0x00FB6E20
		protected internal virtual string SerializeSection(ConfigurationElement parentElement, string name, ConfigurationSaveMode saveMode); // 0x00FB6E20-0x00FB6E60
	}

	[DefaultMember] // 0x004BEA54-0x004BEA8C
	public abstract class ConfigurationElement // TypeDefIndex: 1618
	{
		// Properties
		protected internal virtual ConfigurationPropertyCollection Properties { get; } // 0x00FB6BA0-0x00FB6BE0 
	
		// Methods
		protected internal virtual bool IsModified(); // 0x00FB6BE0-0x00FB6C20
		protected internal virtual void Reset(ConfigurationElement parentElement); // 0x00FB6C20-0x00FB6C60
		protected internal virtual void ResetModified(); // 0x00FB6C60-0x00FB6CA0
	}

	[DebuggerDisplay] // 0x004BEA8C-0x004BEAC4
	public abstract class ConfigurationElementCollection : ConfigurationElement // TypeDefIndex: 1619
	{
		// Methods
		protected internal override bool IsModified(); // 0x00FB6CA0-0x00FB6CE0
		protected internal override void Reset(ConfigurationElement parentElement); // 0x00FB6CE0-0x00FB6D20
		protected internal override void ResetModified(); // 0x00FB6D20-0x00FB6D60
	}

	public enum ConfigurationSaveMode // TypeDefIndex: 1620
	{
		Modified = 0,
		Minimal = 1,
		Full = 2
	}

	[DefaultMember] // 0x004BEAC4-0x004BEAFC
	public class ConfigurationPropertyCollection // TypeDefIndex: 1621
	{
	}

	[AttributeUsage] // 0x004BEAFC-0x004BEB10
	public sealed class ConfigurationCollectionAttribute : Attribute // TypeDefIndex: 1622
	{
		// Constructors
		public ConfigurationCollectionAttribute(Type itemType); // 0x00FB6B9C-0x00FB6BA0
	}

	public class ConfigurationSectionGroup // TypeDefIndex: 1623
	{
	}

	public sealed class IgnoreSection : ConfigurationSection // TypeDefIndex: 1624
	{
		// Properties
		protected internal override ConfigurationPropertyCollection Properties { get; } // 0x00FB6EA0-0x00FB6EE0 
	
		// Constructors
		public IgnoreSection(); // 0x00FB6E60-0x00FB6EA0
	
		// Methods
		protected internal override void DeserializeSection(XmlReader xmlReader); // 0x00FB6EE0-0x00FB6F20
		protected internal override bool IsModified(); // 0x00FB6F20-0x00FB6F60
		protected internal override void Reset(ConfigurationElement parentSection); // 0x00FB6F60-0x00FB6FA0
		protected internal override void ResetModified(); // 0x00FB6FA0-0x00FB6FE0
		protected internal override string SerializeSection(ConfigurationElement parentSection, string name, ConfigurationSaveMode saveMode); // 0x00FB6FE0-0x00FB7020
	}
}

namespace Unity
{
	internal sealed class ThrowStub : ObjectDisposedException // TypeDefIndex: 1625
	{
		// Methods
		public static void ThrowNotSupportedException(); // 0x00FB7020-0x00FB8084
	}
}

namespace System.Linq
{
	internal static class Error // TypeDefIndex: 1627
	{
		// Methods
		internal static Exception ArgumentNull(string s); // 0x00FB9568-0x00FB95CC
		internal static Exception ArgumentOutOfRange(string s); // 0x00FB95CC-0x00FB9630
		internal static Exception MoreThanOneMatch(); // 0x00FB9630-0x00FB9698
	}

	public static class Enumerable // TypeDefIndex: 1628
	{
		// Nested types
		private abstract class Iterator<TSource> : IEnumerable<TSource>, IEnumerator<TSource> // TypeDefIndex: 1629
		{
			// Fields
			private int threadId;
			internal int state;
			internal TSource current;
	
			// Properties
			public TSource Current { get; }
			object IEnumerator.Current { get; }
	
			// Constructors
			public Iterator();
	
			// Methods
			public abstract Iterator<TSource> Clone();
			public virtual void Dispose();
			public IEnumerator<TSource> GetEnumerator();
			public abstract bool MoveNext();
			public abstract IEnumerable<TSource> Where(Func<TSource, bool> predicate);
			IEnumerator IEnumerable.GetEnumerator();
			void IEnumerator.Reset();
		}
	
		private class WhereEnumerableIterator<TSource> : Iterator<TSource> // TypeDefIndex: 1630
		{
			// Fields
			private IEnumerable<TSource> source;
			private Func<TSource, bool> predicate;
			private IEnumerator<TSource> enumerator;
	
			// Constructors
			public WhereEnumerableIterator(IEnumerable<TSource> source, Func<TSource, bool> predicate);
	
			// Methods
			public override Iterator<TSource> Clone();
			public override void Dispose();
			public override bool MoveNext();
			public override IEnumerable<TSource> Where(Func<TSource, bool> predicate);
		}
	
		private class WhereArrayIterator<TSource> : Iterator<TSource> // TypeDefIndex: 1631
		{
			// Fields
			private TSource[] source;
			private Func<TSource, bool> predicate;
			private int index;
	
			// Constructors
			public WhereArrayIterator(TSource[] source, Func<TSource, bool> predicate);
	
			// Methods
			public override Iterator<TSource> Clone();
			public override bool MoveNext();
			public override IEnumerable<TSource> Where(Func<TSource, bool> predicate);
		}
	
		private class WhereListIterator<TSource> : Iterator<TSource> // TypeDefIndex: 1632
		{
			// Fields
			private List<TSource> source;
			private Func<TSource, bool> predicate;
			private List<TSource> enumerator;
	
			// Constructors
			public WhereListIterator(List<TSource> source, Func<TSource, bool> predicate);
	
			// Methods
			public override Iterator<TSource> Clone();
			public override bool MoveNext();
			public override IEnumerable<TSource> Where(Func<TSource, bool> predicate);
		}
	
		[CompilerGenerated] // 0x004BED44-0x004BED54
		private sealed class __c__DisplayClass6_0<TSource> // TypeDefIndex: 1633
		{
			// Fields
			public Func<TSource, bool> predicate1;
			public Func<TSource, bool> predicate2;
	
			// Constructors
			public __c__DisplayClass6_0();
	
			// Methods
			internal bool _CombinePredicates_b__0(TSource x);
		}
	
		// Methods
		private static Func<TSource, bool> CombinePredicates<TSource>(Func<TSource, bool> predicate1, Func<TSource, bool> predicate2);
	
		// Extension methods
		public static IEnumerable<TSource> Where<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate);
		public static List<TSource> ToList<TSource>(this IEnumerable<TSource> source);
		public static TSource SingleOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate);
		public static TSource ElementAt<TSource>(this IEnumerable<TSource> source, int index);
		public static bool Any<TSource>(this IEnumerable<TSource> source);
		public static bool Any<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate);
		public static int Count<TSource>(this IEnumerable<TSource> source);
	}
}

namespace System.Collections.Generic
{
	[Serializable]
	[DebuggerDisplay] // 0x004BED54-0x004BEDDC
	[DebuggerTypeProxy] // 0x004BED54-0x004BEDDC
	public class HashSet<T> : ICollection<T>, IReadOnlyCollection<T>, ISerializable, IDeserializationCallback // TypeDefIndex: 1634
	{
		// Fields
		private const int Lower31BitMask = 2147483647; // Metadata: 0x001F333F
		private const int StackAllocThreshold = 100; // Metadata: 0x001F3343
		private const int ShrinkThreshold = 3; // Metadata: 0x001F3347
		private const string CapacityName = "Capacity"; // Metadata: 0x001F334B
		private const string ElementsName = "Elements"; // Metadata: 0x001F3357
		private const string ComparerName = "Comparer"; // Metadata: 0x001F3363
		private const string VersionName = "Version"; // Metadata: 0x001F336F
		private int[] _buckets;
		private Slot[] _slots;
		private int _count;
		private int _lastIndex;
		private int _freeList;
		private IEqualityComparer<T> _comparer;
		private int _version;
		private SerializationInfo _siInfo;
	
		// Properties
		public int Count { get; }
		bool ICollection<T>.IsReadOnly { get; }
		public IEqualityComparer<T> Comparer { get; }
	
		// Nested types
		internal struct Slot // TypeDefIndex: 1635
		{
			// Fields
			internal int hashCode;
			internal int next;
			internal T value;
		}
	
		[Serializable]
		public struct Enumerator : IEnumerator<T> // TypeDefIndex: 1636
		{
			// Fields
			private HashSet<T> _set;
			private int _index;
			private int _version;
			private T _current;
	
			// Properties
			public T Current { get; }
			object IEnumerator.Current { get; }
	
			// Constructors
			internal Enumerator(HashSet<T> set);
	
			// Methods
			public void Dispose();
			public bool MoveNext();
			void IEnumerator.Reset();
		}
	
		// Constructors
		public HashSet();
		public HashSet(IEqualityComparer<T> comparer);
		public HashSet(IEnumerable<T> collection);
		public HashSet(IEnumerable<T> collection, IEqualityComparer<T> comparer);
		protected HashSet(SerializationInfo info, StreamingContext context);
	
		// Methods
		private void CopyFrom(HashSet<T> source);
		void ICollection<T>.Add(T item);
		public void Clear();
		public bool Contains(T item);
		public void CopyTo(T[] array, int arrayIndex);
		public bool Remove(T item);
		public Enumerator GetEnumerator();
		IEnumerator<T> IEnumerable<T>.GetEnumerator();
		IEnumerator IEnumerable.GetEnumerator();
		public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
		public virtual void OnDeserialization(object sender);
		public bool Add(T item);
		public void UnionWith(IEnumerable<T> other);
		public void CopyTo(T[] array);
		public void CopyTo(T[] array, int arrayIndex, int count);
		public void TrimExcess();
		private void Initialize(int capacity);
		private void IncreaseCapacity();
		private void SetCapacity(int newSize);
		private bool AddIfNotPresent(T value);
		private void AddValue(int index, int hashCode, T value);
		private static bool AreEqualityComparersEqual(HashSet<T> set1, HashSet<T> set2);
		private int InternalGetHashCode(T item);
	}

	internal sealed class ICollectionDebugView<T> // TypeDefIndex: 1637
	{
	}
}

namespace UnityEngine.Scripting
{
	[AttributeUsage] // 0x004BF084-0x004BF0C8
	[VisibleToOtherModules] // 0x004BF084-0x004BF0C8
	internal class UsedByNativeCodeAttribute : Attribute // TypeDefIndex: 1639
	{
		// Fields
		[CompilerGenerated] // 0x004BF680-0x004BF6BC
		[DebuggerBrowsable] // 0x004BF680-0x004BF6BC
		private string _Name_k__BackingField; // 0x10
	
		// Properties
		public string Name { [CompilerGenerated] /* 0x004BFC98-0x004BFCA8 */ set; } // 0x00FB0D00-0x00FB0D08
	
		// Constructors
		public UsedByNativeCodeAttribute(); // 0x00FB0CCC-0x00FB0CD4
		public UsedByNativeCodeAttribute(string name); // 0x00FB0CD4-0x00FB0D00
	}

	[AttributeUsage] // 0x004BF0C8-0x004BF10C
	[VisibleToOtherModules] // 0x004BF0C8-0x004BF10C
	internal class RequiredByNativeCodeAttribute : Attribute // TypeDefIndex: 1640
	{
		// Fields
		[CompilerGenerated] // 0x004BF6BC-0x004BF6F8
		[DebuggerBrowsable] // 0x004BF6BC-0x004BF6F8
		private string _Name_k__BackingField; // 0x10
		[CompilerGenerated] // 0x004BF6F8-0x004BF734
		[DebuggerBrowsable] // 0x004BF6F8-0x004BF734
		private bool _Optional_k__BackingField; // 0x18
		[CompilerGenerated] // 0x004BF734-0x004BF770
		[DebuggerBrowsable] // 0x004BF734-0x004BF770
		private bool _GenerateProxy_k__BackingField; // 0x19
	
		// Properties
		public string Name { [CompilerGenerated] /* 0x004BFCA8-0x004BFCB8 */ set; } // 0x00FB0CAC-0x00FB0CB4
		public bool Optional { [CompilerGenerated] /* 0x004BFCB8-0x004BFCC8 */ set; } // 0x00FB0CB4-0x00FB0CC0
		public bool GenerateProxy { [CompilerGenerated] /* 0x004BFCC8-0x004BFCD8 */ set; } // 0x00FB0CC0-0x00FB0CCC
	
		// Constructors
		public RequiredByNativeCodeAttribute(); // 0x00FB0C78-0x00FB0C80
		public RequiredByNativeCodeAttribute(string name); // 0x00FB0C80-0x00FB0CAC
	}

	[VisibleToOtherModules] // 0x004BF10C-0x004BF11C
	internal class GeneratedByOldBindingsGeneratorAttribute : Attribute // TypeDefIndex: 1641
	{
		// Constructors
		public GeneratedByOldBindingsGeneratorAttribute(); // 0x00FB0C70-0x00FB0C78
	}
}

namespace UnityEngine
{
	[AttributeUsage] // 0x004BF11C-0x004BF164
	[VisibleToOtherModules] // 0x004BF11C-0x004BF164
	internal sealed class AssetFileNameExtensionAttribute : Attribute // TypeDefIndex: 1642
	{
		// Fields
		[CompilerGenerated] // 0x004BF770-0x004BF7AC
		[DebuggerBrowsable] // 0x004BF770-0x004BF7AC
		private readonly string _preferredExtension_k__BackingField; // 0x10
		[CompilerGenerated] // 0x004BF7AC-0x004BF7E8
		[DebuggerBrowsable] // 0x004BF7AC-0x004BF7E8
		private readonly IEnumerable<string> _otherExtensions_k__BackingField; // 0x18
	
		// Constructors
		public AssetFileNameExtensionAttribute(string preferredExtension, params /* 0x004BFE28-0x004BFE38 */ string[] otherExtensions); // 0x00FB0368-0x00FB03A0
	}

	[AttributeUsage] // 0x004BF164-0x004BF1A0
	[VisibleToOtherModules] // 0x004BF164-0x004BF1A0
	internal class ThreadAndSerializationSafeAttribute : Attribute // TypeDefIndex: 1643
	{
		// Constructors
		public ThreadAndSerializationSafeAttribute(); // 0x00FB0D08-0x00FB0D10
	}

	[AttributeUsage] // 0x004BF1A0-0x004BF1E8
	[VisibleToOtherModules] // 0x004BF1A0-0x004BF1E8
	internal class WritableAttribute : Attribute // TypeDefIndex: 1644
	{
		// Constructors
		public WritableAttribute(); // 0x00FB0DB0-0x00FB0DB8
	}

	[AttributeUsage] // 0x004BF1E8-0x004BF224
	[VisibleToOtherModules] // 0x004BF1E8-0x004BF224
	internal class UnityEngineModuleAssembly : Attribute // TypeDefIndex: 1645
	{
		// Constructors
		public UnityEngineModuleAssembly(); // 0x00FB0D10-0x00FB0D18
	}

	[AttributeUsage] // 0x004BF224-0x004BF268
	[VisibleToOtherModules] // 0x004BF224-0x004BF268
	internal sealed class NativeClassAttribute : Attribute // TypeDefIndex: 1646
	{
		// Fields
		[CompilerGenerated] // 0x004BF7E8-0x004BF824
		[DebuggerBrowsable] // 0x004BF7E8-0x004BF824
		private string _QualifiedNativeName_k__BackingField; // 0x10
		[CompilerGenerated] // 0x004BF824-0x004BF860
		[DebuggerBrowsable] // 0x004BF824-0x004BF860
		private string _Declaration_k__BackingField; // 0x18
	
		// Properties
		private string QualifiedNativeName { [CompilerGenerated] /* 0x004BFCD8-0x004BFCE8 */ set; } // 0x00FB0C60-0x00FB0C68
		private string Declaration { [CompilerGenerated] /* 0x004BFCE8-0x004BFCF8 */ set; } // 0x00FB0C68-0x00FB0C70
	
		// Constructors
		public NativeClassAttribute(string qualifiedCppName); // 0x00FB0BB0-0x00FB0C28
		public NativeClassAttribute(string qualifiedCppName, string declaration); // 0x00FB0C28-0x00FB0C60
	}
}

namespace UnityEngine.Bindings
{
	[AttributeUsage] // 0x004BF268-0x004BF2AC
	[VisibleToOtherModules] // 0x004BF268-0x004BF2AC
	internal class VisibleToOtherModulesAttribute : Attribute // TypeDefIndex: 1647
	{
		// Constructors
		public VisibleToOtherModulesAttribute(); // 0x00FB0BA0-0x00FB0BA8
		public VisibleToOtherModulesAttribute(params /* 0x004BFE38-0x004BFE48 */ string[] modules); // 0x00FB0BA8-0x00FB0BB0
	}

	[AttributeUsage] // 0x004BF2AC-0x004BF2E8
	[VisibleToOtherModules] // 0x004BF2AC-0x004BF2E8
	internal class NativeConditionalAttribute : Attribute // TypeDefIndex: 1648
	{
		// Fields
		[CompilerGenerated] // 0x004BF860-0x004BF89C
		[DebuggerBrowsable] // 0x004BF860-0x004BF89C
		private string _Condition_k__BackingField; // 0x10
		[CompilerGenerated] // 0x004BF89C-0x004BF8D8
		[DebuggerBrowsable] // 0x004BF89C-0x004BF8D8
		private bool _Enabled_k__BackingField; // 0x18
	
		// Properties
		public string Condition { [CompilerGenerated] /* 0x004BFCF8-0x004BFD08 */ set; } // 0x00FB052C-0x00FB0534
		public bool Enabled { [CompilerGenerated] /* 0x004BFD08-0x004BFD18 */ set; } // 0x00FB0534-0x00FB0540
	
		// Constructors
		public NativeConditionalAttribute(string condition); // 0x00FB04B8-0x00FB04EC
		public NativeConditionalAttribute(string condition, bool enabled); // 0x00FB04EC-0x00FB052C
	}

	[AttributeUsage] // 0x004BF2E8-0x004BF334
	[VisibleToOtherModules] // 0x004BF2E8-0x004BF334
	internal class NativeHeaderAttribute : Attribute // TypeDefIndex: 1649
	{
		// Fields
		[CompilerGenerated] // 0x004BF8D8-0x004BF914
		[DebuggerBrowsable] // 0x004BF8D8-0x004BF914
		private string _Header_k__BackingField; // 0x10
	
		// Properties
		public string Header { [CompilerGenerated] /* 0x004BFD18-0x004BFD28 */ set; } // 0x00FB0634-0x00FB063C
	
		// Constructors
		public NativeHeaderAttribute(string header); // 0x00FB0540-0x00FB0634
	}

	[AttributeUsage] // 0x004BF334-0x004BF370
	[VisibleToOtherModules] // 0x004BF334-0x004BF370
	internal class NativeNameAttribute : Attribute // TypeDefIndex: 1650
	{
		// Fields
		[CompilerGenerated] // 0x004BF914-0x004BF950
		[DebuggerBrowsable] // 0x004BF914-0x004BF950
		private string _Name_k__BackingField; // 0x10
	
		// Properties
		public string Name { [CompilerGenerated] /* 0x004BFD28-0x004BFD38 */ set; } // 0x00FB085C-0x00FB0864
	
		// Constructors
		public NativeNameAttribute(string name); // 0x00FB0768-0x00FB085C
	}

	[AttributeUsage] // 0x004BF370-0x004BF3AC
	[VisibleToOtherModules] // 0x004BF370-0x004BF3AC
	internal sealed class NativeWritableSelfAttribute : Attribute // TypeDefIndex: 1651
	{
		// Fields
		[CompilerGenerated] // 0x004BF950-0x004BF98C
		[DebuggerBrowsable] // 0x004BF950-0x004BF98C
		private bool _WritableSelf_k__BackingField; // 0x10
	
		// Properties
		public bool WritableSelf { [CompilerGenerated] /* 0x004BFD38-0x004BFD48 */ set; } // 0x00FB0AE0-0x00FB0AEC
	
		// Constructors
		public NativeWritableSelfAttribute(); // 0x00FB0AB4-0x00FB0AE0
	}

	[AttributeUsage] // 0x004BF3AC-0x004BF3E8
	[VisibleToOtherModules] // 0x004BF3AC-0x004BF3E8
	internal class NativeMethodAttribute : Attribute // TypeDefIndex: 1652
	{
		// Fields
		[CompilerGenerated] // 0x004BF98C-0x004BF9C8
		[DebuggerBrowsable] // 0x004BF98C-0x004BF9C8
		private string _Name_k__BackingField; // 0x10
		[CompilerGenerated] // 0x004BF9C8-0x004BFA04
		[DebuggerBrowsable] // 0x004BF9C8-0x004BFA04
		private bool _IsThreadSafe_k__BackingField; // 0x18
		[CompilerGenerated] // 0x004BFA04-0x004BFA40
		[DebuggerBrowsable] // 0x004BFA04-0x004BFA40
		private bool _IsFreeFunction_k__BackingField; // 0x19
		[CompilerGenerated] // 0x004BFA40-0x004BFA7C
		[DebuggerBrowsable] // 0x004BFA40-0x004BFA7C
		private bool _ThrowsException_k__BackingField; // 0x1A
		[CompilerGenerated] // 0x004BFA7C-0x004BFAB8
		[DebuggerBrowsable] // 0x004BFA7C-0x004BFAB8
		private bool _HasExplicitThis_k__BackingField; // 0x1B
	
		// Properties
		public string Name { [CompilerGenerated] /* 0x004BFD48-0x004BFD58 */ set; } // 0x00FB0730-0x00FB0738
		public bool IsThreadSafe { [CompilerGenerated] /* 0x004BFD58-0x004BFD68 */ set; } // 0x00FB0738-0x00FB0744
		public bool IsFreeFunction { [CompilerGenerated] /* 0x004BFD68-0x004BFD78 */ set; } // 0x00FB0744-0x00FB0750
		public bool ThrowsException { [CompilerGenerated] /* 0x004BFD78-0x004BFD88 */ set; } // 0x00FB0750-0x00FB075C
		public bool HasExplicitThis { [CompilerGenerated] /* 0x004BFD88-0x004BFD98 */ set; } // 0x00FB075C-0x00FB0768
	
		// Constructors
		public NativeMethodAttribute(); // 0x00FB03CC-0x00FB03D4
		public NativeMethodAttribute(string name); // 0x00FB063C-0x00FB0730
		public NativeMethodAttribute(string name, bool isFreeFunction); // 0x00FB03FC-0x00FB0428
		public NativeMethodAttribute(string name, bool isFreeFunction, bool isThreadSafe); // 0x00FB045C-0x00FB049C
	}

	[VisibleToOtherModules] // 0x004BF3E8-0x004BF3F8
	internal enum TargetType // TypeDefIndex: 1653
	{
		Function = 0,
		Field = 1
	}

	[AttributeUsage] // 0x004BF3F8-0x004BF434
	[VisibleToOtherModules] // 0x004BF3F8-0x004BF434
	internal class NativePropertyAttribute : NativeMethodAttribute // TypeDefIndex: 1654
	{
		// Fields
		[CompilerGenerated] // 0x004BFAB8-0x004BFAF4
		[DebuggerBrowsable] // 0x004BFAB8-0x004BFAF4
		private TargetType _TargetType_k__BackingField; // 0x1C
	
		// Properties
		public TargetType TargetType { [CompilerGenerated] /* 0x004BFD98-0x004BFDA8 */ set; } // 0x00FB08D4-0x00FB08DC
	
		// Constructors
		public NativePropertyAttribute(); // 0x00FB0864-0x00FB086C
		public NativePropertyAttribute(string name); // 0x00FB086C-0x00FB0870
		public NativePropertyAttribute(string name, TargetType targetType); // 0x00FB0870-0x00FB0898
		public NativePropertyAttribute(string name, bool isFree, TargetType targetType); // 0x00FB0898-0x00FB08D4
	}

	[VisibleToOtherModules] // 0x004BF434-0x004BF444
	internal enum CodegenOptions // TypeDefIndex: 1655
	{
		Auto = 0,
		Custom = 1,
		Force = 2
	}

	[AttributeUsage] // 0x004BF444-0x004BF480
	[VisibleToOtherModules] // 0x004BF444-0x004BF480
	internal class NativeAsStructAttribute : Attribute // TypeDefIndex: 1656
	{
		// Constructors
		public NativeAsStructAttribute(); // 0x00FB04B0-0x00FB04B8
	}

	[AttributeUsage] // 0x004BF480-0x004BF4BC
	[VisibleToOtherModules] // 0x004BF480-0x004BF4BC
	internal class NativeTypeAttribute : Attribute // TypeDefIndex: 1657
	{
		// Fields
		[CompilerGenerated] // 0x004BFAF4-0x004BFB30
		[DebuggerBrowsable] // 0x004BFAF4-0x004BFB30
		private string _Header_k__BackingField; // 0x10
		[CompilerGenerated] // 0x004BFB30-0x004BFB6C
		[DebuggerBrowsable] // 0x004BFB30-0x004BFB6C
		private string _IntermediateScriptingStructName_k__BackingField; // 0x18
		[CompilerGenerated] // 0x004BFB6C-0x004BFBA8
		[DebuggerBrowsable] // 0x004BFB6C-0x004BFBA8
		private CodegenOptions _CodegenOptions_k__BackingField; // 0x20
	
		// Properties
		public string Header { [CompilerGenerated] /* 0x004BFDA8-0x004BFDB8 */ set; } // 0x00FB0A9C-0x00FB0AA4
		public string IntermediateScriptingStructName { [CompilerGenerated] /* 0x004BFDB8-0x004BFDC8 */ set; } // 0x00FB0AA4-0x00FB0AAC
		public CodegenOptions CodegenOptions { [CompilerGenerated] /* 0x004BFDC8-0x004BFDD8 */ set; } // 0x00FB0AAC-0x00FB0AB4
	
		// Constructors
		public NativeTypeAttribute(); // 0x00FB0914-0x00FB093C
		public NativeTypeAttribute(CodegenOptions codegenOptions); // 0x00FB093C-0x00FB0968
		public NativeTypeAttribute(string header); // 0x00FB0968-0x00FB0A60
		public NativeTypeAttribute(CodegenOptions codegenOptions, string intermediateStructName); // 0x00FB0A60-0x00FB0A9C
	}

	[AttributeUsage] // 0x004BF4BC-0x004BF4F8
	[VisibleToOtherModules] // 0x004BF4BC-0x004BF4F8
	internal class NotNullAttribute : Attribute // TypeDefIndex: 1658
	{
		// Constructors
		public NotNullAttribute(); // 0x00FB0AEC-0x00FB0AF4
	}

	[AttributeUsage] // 0x004BF4F8-0x004BF534
	[VisibleToOtherModules] // 0x004BF4F8-0x004BF534
	internal class UnmarshalledAttribute : Attribute // TypeDefIndex: 1659
	{
		// Constructors
		public UnmarshalledAttribute(); // 0x00FB0B98-0x00FB0BA0
	}

	[AttributeUsage] // 0x004BF534-0x004BF570
	[VisibleToOtherModules] // 0x004BF534-0x004BF570
	internal class FreeFunctionAttribute : NativeMethodAttribute // TypeDefIndex: 1660
	{
		// Constructors
		public FreeFunctionAttribute(); // 0x00FB03A0-0x00FB03CC
		public FreeFunctionAttribute(string name); // 0x00FB03D4-0x00FB03FC
		public FreeFunctionAttribute(string name, bool isThreadSafe); // 0x00FB0428-0x00FB045C
	}

	[AttributeUsage] // 0x004BF570-0x004BF5AC
	[VisibleToOtherModules] // 0x004BF570-0x004BF5AC
	internal class ThreadSafeAttribute : NativeMethodAttribute // TypeDefIndex: 1661
	{
		// Constructors
		public ThreadSafeAttribute(); // 0x00FB0B6C-0x00FB0B98
	}

	[VisibleToOtherModules] // 0x004BF5AC-0x004BF5BC
	internal enum StaticAccessorType // TypeDefIndex: 1662
	{
		Dot = 0,
		Arrow = 1,
		DoubleColon = 2,
		ArrowWithDefaultReturnIfNull = 3
	}

	[AttributeUsage] // 0x004BF5BC-0x004BF5F8
	[VisibleToOtherModules] // 0x004BF5BC-0x004BF5F8
	internal class StaticAccessorAttribute : Attribute // TypeDefIndex: 1663
	{
		// Fields
		[CompilerGenerated] // 0x004BFBA8-0x004BFBE4
		[DebuggerBrowsable] // 0x004BFBA8-0x004BFBE4
		private string _Name_k__BackingField; // 0x10
		[CompilerGenerated] // 0x004BFBE4-0x004BFC20
		[DebuggerBrowsable] // 0x004BFBE4-0x004BFC20
		private StaticAccessorType _Type_k__BackingField; // 0x18
	
		// Properties
		public string Name { [CompilerGenerated] /* 0x004BFDE8-0x004BFDF8 */ set; } // 0x00FB0B5C-0x00FB0B64
		public StaticAccessorType Type { [CompilerGenerated] /* 0x004BFDF8-0x004BFE08 */ set; } // 0x00FB0B64-0x00FB0B6C
	
		// Constructors
		[VisibleToOtherModules] // 0x004BFDD8-0x004BFDE8
		internal StaticAccessorAttribute(string name); // 0x00FB0AF4-0x00FB0B20
		public StaticAccessorAttribute(string name, StaticAccessorType type); // 0x00FB0B20-0x00FB0B5C
	}

	[AttributeUsage] // 0x004BF5F8-0x004BF634
	[VisibleToOtherModules] // 0x004BF5F8-0x004BF634
	internal class NativeThrowsAttribute : Attribute // TypeDefIndex: 1664
	{
		// Fields
		[CompilerGenerated] // 0x004BFC20-0x004BFC5C
		[DebuggerBrowsable] // 0x004BFC20-0x004BFC5C
		private bool _ThrowsException_k__BackingField; // 0x10
	
		// Properties
		public bool ThrowsException { [CompilerGenerated] /* 0x004BFE08-0x004BFE18 */ set; } // 0x00FB0908-0x00FB0914
	
		// Constructors
		public NativeThrowsAttribute(); // 0x00FB08DC-0x00FB0908
	}

	[AttributeUsage] // 0x004BF634-0x004BF670
	[VisibleToOtherModules] // 0x004BF634-0x004BF670
	internal class IgnoreAttribute : Attribute // TypeDefIndex: 1665
	{
		// Fields
		[CompilerGenerated] // 0x004BFC5C-0x004BFC98
		[DebuggerBrowsable] // 0x004BFC5C-0x004BFC98
		private bool _DoesNotContributeToSize_k__BackingField; // 0x10
	
		// Properties
		public bool DoesNotContributeToSize { [CompilerGenerated] /* 0x004BFE18-0x004BFE28 */ set; } // 0x00FB04A4-0x00FB04B0
	
		// Constructors
		public IgnoreAttribute(); // 0x00FB049C-0x00FB04A4
	}
}

namespace UnityEngine
{
	[VisibleToOtherModules] // 0x004BF670-0x004BF680
	internal sealed class UnityString // TypeDefIndex: 1666
	{
		// Methods
		public static string Format(string fmt, params /* 0x004BFE48-0x004BFE58 */ object[] args); // 0x00FB0D18-0x00FB0DB0
	}

	public enum SendMessageOptions // TypeDefIndex: 1668
	{
		RequireReceiver = 0,
		DontRequireReceiver = 1
	}

	public enum Space // TypeDefIndex: 1669
	{
		World = 0,
		Self = 1
	}

	public enum RuntimePlatform // TypeDefIndex: 1670
	{
		OSXEditor = 0,
		OSXPlayer = 1,
		WindowsPlayer = 2,
		OSXWebPlayer = 3,
		OSXDashboardPlayer = 4,
		WindowsWebPlayer = 5,
		WindowsEditor = 7,
		IPhonePlayer = 8,
		PS3 = 9,
		XBOX360 = 10,
		Android = 11,
		NaCl = 12,
		LinuxPlayer = 13,
		FlashPlayer = 15,
		LinuxEditor = 16,
		WebGLPlayer = 17,
		MetroPlayerX86 = 18,
		WSAPlayerX86 = 18,
		MetroPlayerX64 = 19,
		WSAPlayerX64 = 19,
		MetroPlayerARM = 20,
		WSAPlayerARM = 20,
		WP8Player = 21,
		BlackBerryPlayer = 22,
		TizenPlayer = 23,
		PSP2 = 24,
		PS4 = 25,
		PSM = 26,
		XboxOne = 27,
		SamsungTVPlayer = 28,
		WiiU = 30,
		tvOS = 31,
		Switch = 32,
		Lumin = 33,
		BJM = 34
	}

	public enum SystemLanguage // TypeDefIndex: 1671
	{
		Afrikaans = 0,
		Arabic = 1,
		Basque = 2,
		Belarusian = 3,
		Bulgarian = 4,
		Catalan = 5,
		Chinese = 6,
		Czech = 7,
		Danish = 8,
		Dutch = 9,
		English = 10,
		Estonian = 11,
		Faroese = 12,
		Finnish = 13,
		French = 14,
		German = 15,
		Greek = 16,
		Hebrew = 17,
		Hungarian = 18,
		Icelandic = 19,
		Indonesian = 20,
		Italian = 21,
		Japanese = 22,
		Korean = 23,
		Latvian = 24,
		Lithuanian = 25,
		Norwegian = 26,
		Polish = 27,
		Portuguese = 28,
		Romanian = 29,
		Russian = 30,
		SerboCroatian = 31,
		Slovak = 32,
		Slovenian = 33,
		Spanish = 34,
		Swedish = 35,
		Thai = 36,
		Turkish = 37,
		Ukrainian = 38,
		Vietnamese = 39,
		ChineseSimplified = 40,
		ChineseTraditional = 41,
		Unknown = 42
	}

	public enum LogType // TypeDefIndex: 1672
	{
		Error = 0,
		Assert = 1,
		Warning = 2,
		Log = 3,
		Exception = 4
	}

	public enum LogOption // TypeDefIndex: 1673
	{
		None = 0,
		NoStacktrace = 1
	}

	[NativeHeader] // 0x004C1004-0x004C103C
	public struct SortingLayer // TypeDefIndex: 1674
	{
		// Fields
		private int m_Id; // 0x00
	
		// Methods
		[FreeFunction] // 0x004C76A4-0x004C76DC
		public static int GetLayerValueFromID(int id); // 0x00BA42CC-0x00BA430C
	}

	[RequiredByNativeCode] // 0x004C103C-0x004C104C
	public struct Keyframe // TypeDefIndex: 1675
	{
		// Fields
		private float m_Time; // 0x00
		private float m_Value; // 0x04
		private float m_InTangent; // 0x08
		private float m_OutTangent; // 0x0C
		private int m_WeightedMode; // 0x10
		private float m_InWeight; // 0x14
		private float m_OutWeight; // 0x18
	
		// Properties
		public float time { get; } // 0x0058A6C0-0x0058A6C8 
		public float inTangent { set; } // 0x0058A6C8-0x0058A6D0
		public float outTangent { set; } // 0x0058A6D0-0x0058A71C
	
		// Constructors
		public Keyframe(float time, float value); // 0x0058A69C-0x0058A6AC
		public Keyframe(float time, float value, float inTangent, float outTangent); // 0x0058A6AC-0x0058A6C0
	}

	public enum WrapMode // TypeDefIndex: 1676
	{
		Default = 0,
		Once = 1,
		Clamp = 1,
		Loop = 2,
		PingPong = 4,
		ClampForever = 8
	}

	[NativeHeader] // 0x004C104C-0x004C10BC
	[RequiredByNativeCode] // 0x004C104C-0x004C10BC
	public class AnimationCurve : IEquatable<AnimationCurve> // TypeDefIndex: 1677
	{
		// Fields
		internal IntPtr m_Ptr; // 0x10
	
		// Properties
		public Keyframe[] keys { get; set; } // 0x00AD0388-0x00AD03C8 0x00AD0408-0x00AD0458
		public Keyframe this[int index] { get => default; } // 0x00AD06B0-0x00AD074C 
		public int length { [NativeMethod] /* 0x004C78B0-0x004C78F4 */ get; } // 0x00AD07CC-0x00AD080C 
		public WrapMode preWrapMode { [NativeMethod] /* 0x004C7A3C-0x004C7A80 */ set; } // 0x00AD0B6C-0x00AD0BBC
		public WrapMode postWrapMode { [NativeMethod] /* 0x004C7A80-0x004C7AC4 */ set; } // 0x00AD0BBC-0x00AD0C0C
	
		// Constructors
		public AnimationCurve(params /* 0x004CD1C8-0x004CD1D8 */ Keyframe[] keys); // 0x00AD011C-0x00AD0178
		[RequiredByNativeCode] // 0x004C76DC-0x004C76EC
		public AnimationCurve(); // 0x00AD01B8-0x00AD0208
	
		// Methods
		[FreeFunction] // 0x004C76EC-0x004C7730
		private static void Internal_Destroy(IntPtr ptr); // 0x00AD0208-0x00AD0248
		[FreeFunction] // 0x004C7730-0x004C7774
		private static IntPtr Internal_Create(Keyframe[] keys); // 0x00AD0178-0x00AD01B8
		[FreeFunction] // 0x004C7774-0x004C77BC
		private bool Internal_Equals(IntPtr other); // 0x00AD0248-0x00AD0298
		~AnimationCurve(); // 0x00AD0298-0x00AD0338
		[ThreadSafe] // 0x004C77BC-0x004C77CC
		public float Evaluate(float time); // 0x00AD0338-0x00AD0388
		[FreeFunction] // 0x004C77CC-0x004C7814
		public int AddKey(float time, float value); // 0x00AD04A8-0x00AD0500
		public int AddKey(Keyframe key); // 0x00AD0500-0x00AD0560
		[NativeMethod] // 0x004C7814-0x004C7858
		private int AddKey_Internal(Keyframe key); // 0x00AD0560-0x00AD05B0
		[FreeFunction] // 0x004C7858-0x004C78B0
		[NativeThrows] // 0x004C7858-0x004C78B0
		public int MoveKey(int index, Keyframe key); // 0x00AD0600-0x00AD0658
		[FreeFunction] // 0x004C78F4-0x004C793C
		private void SetKeys(Keyframe[] keys); // 0x00AD0458-0x00AD04A8
		[FreeFunction] // 0x004C793C-0x004C7998
		[NativeThrows] // 0x004C793C-0x004C7998
		private Keyframe GetKey(int index); // 0x00AD074C-0x00AD07CC
		[FreeFunction] // 0x004C7998-0x004C79E0
		private Keyframe[] GetKeys(); // 0x00AD03C8-0x00AD0408
		[FreeFunction] // 0x004C79E0-0x004C7A3C
		[NativeThrows] // 0x004C79E0-0x004C7A3C
		public void SmoothTangents(int index, float weight); // 0x00AD0864-0x00AD08C4
		public static AnimationCurve Linear(float timeStart, float valueStart, float timeEnd, float valueEnd); // 0x00AD08C4-0x00AD0A34
		public static AnimationCurve EaseInOut(float timeStart, float valueStart, float timeEnd, float valueEnd); // 0x00AD0A34-0x00AD0B6C
		public override bool Equals(object o); // 0x00AD0C0C-0x00AD0CE8
		public bool Equals(AnimationCurve other); // 0x00AD0CE8-0x00AD0DB8
		public override int GetHashCode(); // 0x00AD0DB8-0x00AD0DC4
		private int AddKey_Internal_Injected(ref Keyframe key); // 0x00AD05B0-0x00AD0600
		private int MoveKey_Injected(int index, ref Keyframe key); // 0x00AD0658-0x00AD06B0
		private void GetKey_Injected(int index, out Keyframe ret); // 0x00AD080C-0x00AD0864
	}

	[NativeHeader] // 0x004C10BC-0x004C135C
	[NativeHeader] // 0x004C10BC-0x004C135C
	[NativeHeader] // 0x004C10BC-0x004C135C
	[NativeHeader] // 0x004C10BC-0x004C135C
	[NativeHeader] // 0x004C10BC-0x004C135C
	[NativeHeader] // 0x004C10BC-0x004C135C
	[NativeHeader] // 0x004C10BC-0x004C135C
	[NativeHeader] // 0x004C10BC-0x004C135C
	[NativeHeader] // 0x004C10BC-0x004C135C
	[NativeHeader] // 0x004C10BC-0x004C135C
	[NativeHeader] // 0x004C10BC-0x004C135C
	[NativeHeader] // 0x004C10BC-0x004C135C
	[NativeHeader] // 0x004C10BC-0x004C135C
	[NativeHeader] // 0x004C10BC-0x004C135C
	[NativeHeader] // 0x004C10BC-0x004C135C
	[NativeHeader] // 0x004C10BC-0x004C135C
	[NativeHeader] // 0x004C10BC-0x004C135C
	[NativeHeader] // 0x004C10BC-0x004C135C
	public class Application // TypeDefIndex: 1678
	{
		// Fields
		[CompilerGenerated] // 0x004C5C30-0x004C5C6C
		[DebuggerBrowsable] // 0x004C5C30-0x004C5C6C
		private static LowMemoryCallback lowMemory; // 0x00
		private static LogCallback s_LogCallbackHandler; // 0x08
		private static LogCallback s_LogCallbackHandlerThreaded; // 0x10
		[CompilerGenerated] // 0x004C5C6C-0x004C5CA8
		[DebuggerBrowsable] // 0x004C5C6C-0x004C5CA8
		private static Action<bool> focusChanged; // 0x18
		[CompilerGenerated] // 0x004C5CA8-0x004C5CE4
		[DebuggerBrowsable] // 0x004C5CA8-0x004C5CE4
		private static Action<string> deepLinkActivated; // 0x20
		[CompilerGenerated] // 0x004C5CE4-0x004C5D20
		[DebuggerBrowsable] // 0x004C5CE4-0x004C5D20
		private static Func<bool> wantsToQuit; // 0x28
		[CompilerGenerated] // 0x004C5D20-0x004C5D5C
		[DebuggerBrowsable] // 0x004C5D20-0x004C5D5C
		private static Action quitting; // 0x30
	
		// Properties
		public static bool isPlaying { [FreeFunction] /* 0x004C7AFC-0x004C7B34 */ get; } // 0x00AD0E40-0x00AD0E74 
		public static RuntimePlatform platform { [FreeFunction] /* 0x004C7B34-0x004C7B78 */ get; } // 0x00AD0E74-0x00AD0EA8 
		public static bool runInBackground { [FreeFunction] /* 0x004C7B78-0x004C7BB0 */ set; } // 0x00AD0EA8-0x00AD0EE8
		public static string dataPath { [FreeFunction] /* 0x004C7BB0-0x004C7BE8 */ get; } // 0x00AD0EE8-0x00AD0F1C 
		[SecurityCritical] // 0x004CDE98-0x004CDEA8
		public static string persistentDataPath { [FreeFunction] /* 0x004C7BE8-0x004C7C20 */ get; } // 0x00AD0F1C-0x00AD0F50 
		public static string version { [FreeFunction] /* 0x004C7C20-0x004C7C58 */ get; } // 0x00AD0F50-0x00AD0F84 
		public static string cloudProjectId { [FreeFunction] /* 0x004C7C58-0x004C7C90 */ get; } // 0x00AD0F84-0x00AD0FB8 
		public static int targetFrameRate { [FreeFunction] /* 0x004C7CC8-0x004C7D00 */ set; } // 0x00AD0FF8-0x00AD1038
		public static SystemLanguage systemLanguage { [FreeFunction] /* 0x004C7D00-0x004C7D38 */ get; } // 0x00AD1038-0x00AD106C 
		public static NetworkReachability internetReachability { [FreeFunction] /* 0x004C7D38-0x004C7D70 */ get; } // 0x00AD106C-0x00AD10A0 
		public static bool isEditor { get; } // 0x00AD17E4-0x00AD17EC 
	
		// Nested types
		public delegate void LowMemoryCallback(); // TypeDefIndex: 1679; 0x00AD1100-0x00AD131C
	
		public delegate void LogCallback(string condition, string stackTrace, LogType type); // TypeDefIndex: 1680; 0x00AD13DC-0x00AD17E4
	
		// Methods
		[FreeFunction] // 0x004C7AC4-0x004C7AFC
		public static void Quit(int exitCode); // 0x00AD0DC4-0x00AD0E04
		public static void Quit(); // 0x00AD0E04-0x00AD0E40
		[FreeFunction] // 0x004C7C90-0x004C7CC8
		public static void OpenURL(string url); // 0x00AD0FB8-0x00AD0FF8
		[RequiredByNativeCode] // 0x004C7D70-0x004C7D80
		private static void CallLowMemory(); // 0x00AD10A0-0x00AD1100
		[RequiredByNativeCode] // 0x004C7D80-0x004C7D90
		private static void CallLogCallback(string logString, string stackTrace, LogType type, bool invokedOnMainThread); // 0x00AD131C-0x00AD13DC
		[RequiredByNativeCode] // 0x004C7D90-0x004C7DA0
		private static bool Internal_ApplicationWantsToQuit(); // 0x00AD17EC-0x00AD19AC
		[RequiredByNativeCode] // 0x004C7DA0-0x004C7DB0
		private static void Internal_ApplicationQuit(); // 0x00AD1A8C-0x00AD1AF0
		[RequiredByNativeCode] // 0x004C7DB0-0x004C7DC0
		internal static void InvokeOnBeforeRender(); // 0x00AD1AF0-0x00AD1B4C
		[RequiredByNativeCode] // 0x004C7DC0-0x004C7DD0
		internal static void InvokeFocusChanged(bool focus); // 0x00AD1CC8-0x00AD1D3C
		[RequiredByNativeCode] // 0x004C7DD0-0x004C7DE0
		internal static void InvokeDeepLinkActivated(string url); // 0x00AD1D3C-0x00AD1DB0
	}

	public enum NetworkReachability // TypeDefIndex: 1681
	{
		NotReachable = 0,
		ReachableViaCarrierDataNetwork = 1,
		ReachableViaLocalAreaNetwork = 2
	}
}

namespace UnityEngine.Assertions
{
	[DebuggerStepThrough] // 0x004C135C-0x004C136C
	public static class Assert // TypeDefIndex: 1682
	{
		// Fields
		[Obsolete] // 0x004C5D5C-0x004C5D94
		public static bool raiseExceptions; // 0x00
	
		// Constructors
		static Assert(); // 0x00AD247C-0x00AD24D0
	
		// Methods
		private static void Fail(string message, string userMessage); // 0x00AD1EBC-0x00AD1FE4
		[Conditional] // 0x004C7DE0-0x004C7E18
		public static void AreEqual<T>(T expected, T actual, string message);
		[Conditional] // 0x004C7E18-0x004C7E50
		public static void AreEqual<T>(T expected, T actual, string message, IEqualityComparer<T> comparer);
		[Conditional] // 0x004C7E50-0x004C7E88
		public static void AreEqual(UnityEngine.Object expected, UnityEngine.Object actual, string message); // 0x00AD2148-0x00AD221C
		[Conditional] // 0x004C7E88-0x004C7EC0
		public static void AreEqual(int expected, int actual); // 0x00AD23E0-0x00AD247C
	}

	public class AssertionException : Exception // TypeDefIndex: 1683
	{
		// Fields
		private string m_UserMessage; // 0x88
	
		// Properties
		public override string Message { get; } // 0x00AD24D0-0x00AD2568 
	
		// Constructors
		public AssertionException(string message, string userMessage); // 0x00AD20C4-0x00AD2148
	}

	internal class AssertionMessageUtil // TypeDefIndex: 1684
	{
		// Methods
		public static string GetMessage(string failureMessage); // 0x00AD2568-0x00AD2654
		public static string GetMessage(string failureMessage, string expected); // 0x00AD2654-0x00AD27A4
		public static string GetEqualityMessage(object actual, object expected, bool expectEqual); // 0x00AD221C-0x00AD23E0
	}
}

namespace UnityEngine
{
	[NativeHeader] // 0x004C136C-0x004C13A4
	internal class BootConfigData // TypeDefIndex: 1685
	{
		// Fields
		private IntPtr m_Ptr; // 0x10
	
		// Constructors
		private BootConfigData(IntPtr nativeHandle); // 0x00AD34CC-0x00AD357C
	
		// Methods
		[RequiredByNativeCode] // 0x004C7EC0-0x004C7ED0
		private static BootConfigData WrapBootConfigData(IntPtr nativeHandle); // 0x00AD357C-0x00AD3C54
	}
}

namespace UnityEngine.Experimental.Rendering
{
	[NativeHeader] // 0x004C13A4-0x004C13DC
	internal class BuiltinRuntimeReflectionSystem : IScriptableRuntimeReflectionSystem // TypeDefIndex: 1686
	{
		// Constructors
		public BuiltinRuntimeReflectionSystem(); // 0x00ADDEA8-0x00ADDEB0
	
		// Methods
		public bool TickRealtimeProbes(); // 0x00ADDEB0-0x00ADDEE4
		public void Dispose(); // 0x00ADDF18-0x00ADDF1C
		private void Dispose(bool disposing); // 0x00ADDF1C-0x00ADDF20
		[StaticAccessor] // 0x004C7ED0-0x004C7F10
		private static bool BuiltinUpdate(); // 0x00ADDEE4-0x00ADDF18
		[RequiredByNativeCode] // 0x004C7F10-0x004C7F20
		private static BuiltinRuntimeReflectionSystem Internal_BuiltinRuntimeReflectionSystem_New(); // 0x00ADDF20-0x00ADDF7C
	}
}

namespace UnityEngine
{
	[NativeHeader] // 0x004C13DC-0x004C154C
	[NativeHeader] // 0x004C13DC-0x004C154C
	[NativeHeader] // 0x004C13DC-0x004C154C
	[NativeHeader] // 0x004C13DC-0x004C154C
	[NativeHeader] // 0x004C13DC-0x004C154C
	[NativeHeader] // 0x004C13DC-0x004C154C
	[NativeHeader] // 0x004C13DC-0x004C154C
	[RequireComponent] // 0x004C13DC-0x004C154C
	[UsedByNativeCode] // 0x004C13DC-0x004C154C
	public sealed class Camera : Behaviour // TypeDefIndex: 1687
	{
		// Fields
		public static CameraCallback onPreCull; // 0x00
		public static CameraCallback onPreRender; // 0x08
		public static CameraCallback onPostRender; // 0x10
	
		// Properties
		[NativeProperty] // 0x004CDEA8-0x004CDEE0
		public float nearClipPlane { get; set; } // 0x00AD4234-0x00AD4274 0x00AD4274-0x00AD42C4
		[NativeProperty] // 0x004CDEE0-0x004CDF18
		public float farClipPlane { get; set; } // 0x00AD42C4-0x00AD4304 0x00AD4304-0x00AD4354
		[NativeProperty] // 0x004CDF18-0x004CDF50
		public float fieldOfView { get; set; } // 0x00AD4354-0x00AD4394 0x00AD4394-0x00AD43E4
		public float orthographicSize { get; set; } // 0x00AD43E4-0x00AD4424 0x00AD4424-0x00AD4474
		public bool orthographic { get; set; } // 0x00AD4474-0x00AD44B4 0x00AD44B4-0x00AD4504
		public TransparencySortMode transparencySortMode { get; set; } // 0x00AD4504-0x00AD4544 0x00AD4544-0x00AD4594
		public float depth { get; set; } // 0x00AD4594-0x00AD45D4 0x00AD45D4-0x00AD4624
		public float aspect { get; } // 0x00AD4624-0x00AD4664 
		public int cullingMask { get; set; } // 0x00AD4664-0x00AD46A4 0x00AD46A4-0x00AD46F4
		public int eventMask { get; set; } // 0x00AD46F4-0x00AD4734 0x00AD4734-0x00AD4784
		public float[] layerCullDistances { set; } // 0x00AD47D4-0x00AD48A0
		public Color backgroundColor { get; set; } // 0x00AD48A0-0x00AD48FC 0x00AD494C-0x00AD49A4
		public CameraClearFlags clearFlags { get; set; } // 0x00AD49F4-0x00AD4A34 0x00AD4A34-0x00AD4A84
		public bool usePhysicalProperties { get; set; } // 0x00AD4A84-0x00AD4AC4 0x00AD4AC4-0x00AD4B14
		public Vector2 sensorSize { get; } // 0x00AD4B14-0x00AD4B6C 
		public Vector2 lensShift { get; set; } // 0x00AD4BBC-0x00AD4C14 0x00AD4C64-0x00AD4CB8
		[NativeProperty] // 0x004CDF50-0x004CDF88
		public Rect rect { get; set; } // 0x00AD4D08-0x00AD4D64 0x00AD4DB4-0x00AD4E0C
		[NativeProperty] // 0x004CDF88-0x004CDFC0
		public Rect pixelRect { get; } // 0x00AD4E5C-0x00AD4EB8 
		public RenderTexture targetTexture { get; } // 0x00AD4F08-0x00AD4F48 
		public int targetDisplay { get; } // 0x00AD4F48-0x00AD4F88 
		public static Camera main { [FreeFunction] /* 0x004C7F64-0x004C7F9C */ get; } // 0x00AD55FC-0x00AD5630 
		public static int allCamerasCount { get; } // 0x00AD56A4-0x00AD56D8 
	
		// Nested types
		public enum MonoOrStereoscopicEye // TypeDefIndex: 1688
		{
			Left = 0,
			Right = 1,
			Mono = 2
		}
	
		public delegate void CameraCallback(Camera cam); // TypeDefIndex: 1689; 0x00AD5838-0x00AD5BEC
	
		// Constructors
		public Camera(); // 0x00AD4230-0x00AD4234
	
		// Methods
		[FreeFunction] // 0x004C7F20-0x004C7F64
		private void SetLayerCullDistances([NotNull] /* 0x004CD1D8-0x004CD1E8 */ float[] d); // 0x00AD4784-0x00AD47D4
		public Vector3 WorldToScreenPoint(Vector3 position, MonoOrStereoscopicEye eye); // 0x00AD4F88-0x00AD5004
		public Vector3 WorldToViewportPoint(Vector3 position, MonoOrStereoscopicEye eye); // 0x00AD506C-0x00AD50E8
		public Vector3 ViewportToWorldPoint(Vector3 position, MonoOrStereoscopicEye eye); // 0x00AD5150-0x00AD51CC
		public Vector3 ScreenToWorldPoint(Vector3 position, MonoOrStereoscopicEye eye); // 0x00AD5234-0x00AD52B0
		public Vector3 WorldToScreenPoint(Vector3 position); // 0x00AD5318-0x00AD5320
		public Vector3 WorldToViewportPoint(Vector3 position); // 0x00AD5320-0x00AD5328
		public Vector3 ViewportToWorldPoint(Vector3 position); // 0x00AD5328-0x00AD5330
		public Vector3 ScreenToWorldPoint(Vector3 position); // 0x00AD5330-0x00AD5338
		public Vector3 ScreenToViewportPoint(Vector3 position); // 0x00AD5338-0x00AD53A4
		private Ray ScreenPointToRay(Vector2 pos, MonoOrStereoscopicEye eye); // 0x00AD53FC-0x00AD5480
		public Ray ScreenPointToRay(Vector3 pos, MonoOrStereoscopicEye eye); // 0x00AD54E8-0x00AD55B8
		public Ray ScreenPointToRay(Vector3 pos); // 0x00AD55B8-0x00AD55FC
		[FreeFunction] // 0x004C7F9C-0x004C7FD4
		private static int GetAllCamerasCount(); // 0x00AD5630-0x00AD5664
		[FreeFunction] // 0x004C7FD4-0x004C800C
		private static int GetAllCamerasImpl([NotNull] /* 0x004CD1E8-0x004CD1F8 */ out Camera[] cam); // 0x00AD5664-0x00AD56A4
		public static int GetAllCameras(Camera[] cameras); // 0x00AD56D8-0x00AD57D0
		[RequiredByNativeCode] // 0x004C800C-0x004C801C
		private static void FireOnPreCull(Camera cam); // 0x00AD57D0-0x00AD5838
		[RequiredByNativeCode] // 0x004C801C-0x004C802C
		private static void FireOnPreRender(Camera cam); // 0x00AD5BEC-0x00AD5C54
		[RequiredByNativeCode] // 0x004C802C-0x004C803C
		private static void FireOnPostRender(Camera cam); // 0x00AD5C54-0x00AD5CBC
		private void get_backgroundColor_Injected(out Color ret); // 0x00AD48FC-0x00AD494C
		private void set_backgroundColor_Injected(ref Color value); // 0x00AD49A4-0x00AD49F4
		private void get_sensorSize_Injected(out Vector2 ret); // 0x00AD4B6C-0x00AD4BBC
		private void get_lensShift_Injected(out Vector2 ret); // 0x00AD4C14-0x00AD4C64
		private void set_lensShift_Injected(ref Vector2 value); // 0x00AD4CB8-0x00AD4D08
		private void get_rect_Injected(out Rect ret); // 0x00AD4D64-0x00AD4DB4
		private void set_rect_Injected(ref Rect value); // 0x00AD4E0C-0x00AD4E5C
		private void get_pixelRect_Injected(out Rect ret); // 0x00AD4EB8-0x00AD4F08
		private void WorldToScreenPoint_Injected(ref Vector3 position, MonoOrStereoscopicEye eye, out Vector3 ret); // 0x00AD5004-0x00AD506C
		private void WorldToViewportPoint_Injected(ref Vector3 position, MonoOrStereoscopicEye eye, out Vector3 ret); // 0x00AD50E8-0x00AD5150
		private void ViewportToWorldPoint_Injected(ref Vector3 position, MonoOrStereoscopicEye eye, out Vector3 ret); // 0x00AD51CC-0x00AD5234
		private void ScreenToWorldPoint_Injected(ref Vector3 position, MonoOrStereoscopicEye eye, out Vector3 ret); // 0x00AD52B0-0x00AD5318
		private void ScreenToViewportPoint_Injected(ref Vector3 position, out Vector3 ret); // 0x00AD53A4-0x00AD53FC
		private void ScreenPointToRay_Injected(ref Vector2 pos, MonoOrStereoscopicEye eye, out Ray ret); // 0x00AD5480-0x00AD54E8
	}

	public struct BoundingSphere // TypeDefIndex: 1690
	{
		// Fields
		public Vector3 position; // 0x00
		public float radius; // 0x0C
	
		// Constructors
		public BoundingSphere(Vector3 pos, float rad); // 0x00589D20-0x00589D2C
	}

	public struct CullingGroupEvent // TypeDefIndex: 1691
	{
		// Fields
		private int m_Index; // 0x00
		private byte m_PrevState; // 0x04
		private byte m_ThisState; // 0x05
	}

	[NativeHeader] // 0x004C154C-0x004C1584
	public class CullingGroup // TypeDefIndex: 1692
	{
		// Fields
		internal IntPtr m_Ptr; // 0x10
		private StateChanged m_OnStateChanged; // 0x18
	
		// Nested types
		public delegate void StateChanged(CullingGroupEvent sphere); // TypeDefIndex: 1693; 0x00AD7EE8-0x00AD812C
	
		// Methods
		~CullingGroup(); // 0x00AD7D68-0x00AD7E34
		[RequiredByNativeCode] // 0x004C803C-0x004C804C
		private static void SendEvents(CullingGroup cullingGroup, IntPtr eventsPtr, int count); // 0x00AD7E74-0x00AD7EE8
		[FreeFunction] // 0x004C804C-0x004C8094
		private void FinalizerFailure(); // 0x00AD7E34-0x00AD7E74
	}
}

namespace UnityEngine.Experimental.Rendering
{
	public interface IScriptableRuntimeReflectionSystem : IDisposable // TypeDefIndex: 1694
	{
		// Methods
		bool TickRealtimeProbes();
	}
}

namespace UnityEngine
{
	[NativeHeader] // 0x004C1584-0x004C15BC
	public sealed class ReflectionProbe : Behaviour // TypeDefIndex: 1695
	{
		// Fields
		[CompilerGenerated] // 0x004C5D94-0x004C5DD0
		[DebuggerBrowsable] // 0x004C5D94-0x004C5DD0
		private static Action<ReflectionProbe, ReflectionProbeEvent> reflectionProbeChanged; // 0x00
		[CompilerGenerated] // 0x004C5DD0-0x004C5E0C
		[DebuggerBrowsable] // 0x004C5DD0-0x004C5E0C
		private static Action<Cubemap> defaultReflectionSet; // 0x08
	
		// Nested types
		public enum ReflectionProbeEvent // TypeDefIndex: 1696
		{
			ReflectionProbeAdded = 0,
			ReflectionProbeRemoved = 1
		}
	
		// Methods
		[RequiredByNativeCode] // 0x004C8094-0x004C80A4
		private static void CallReflectionProbeEvent(ReflectionProbe probe, ReflectionProbeEvent probeEvent); // 0x00B9F51C-0x00B9F5A4
		[RequiredByNativeCode] // 0x004C80A4-0x004C80B4
		private static void CallSetDefaultReflection(Cubemap defaultReflectionCubemap); // 0x00B9F5A4-0x00B9F618
	}
}

namespace UnityEngine.Experimental.Rendering
{
	[NativeHeader] // 0x004C15BC-0x004C1608
	[RequiredByNativeCode] // 0x004C15BC-0x004C1608
	public static class ScriptableRuntimeReflectionSystemSettings // TypeDefIndex: 1697
	{
		// Fields
		private static ScriptableRuntimeReflectionSystemWrapper s_Instance; // 0x00
	
		// Properties
		private static IScriptableRuntimeReflectionSystem Internal_ScriptableRuntimeReflectionSystemSettings_system { [RequiredByNativeCode] /* 0x004C80B4-0x004C80C4 */ set; } // 0x00ADE15C-0x00ADE2D4
		private static ScriptableRuntimeReflectionSystemWrapper Internal_ScriptableRuntimeReflectionSystemSettings_instance { [RequiredByNativeCode] /* 0x004C80C4-0x004C80D4 */ get; } // 0x00ADE2DC-0x00ADE344 
	
		// Constructors
		static ScriptableRuntimeReflectionSystemSettings(); // 0x00ADE378-0x00ADE3E4
	
		// Methods
		[RuntimeInitializeOnLoadMethod] // 0x004C80D4-0x004C8128
		[StaticAccessor] // 0x004C80D4-0x004C8128
		private static void ScriptingDirtyReflectionSystemInstance(); // 0x00ADE344-0x00ADE378
	}

	[RequiredByNativeCode] // 0x004C1608-0x004C1618
	internal class ScriptableRuntimeReflectionSystemWrapper // TypeDefIndex: 1698
	{
		// Fields
		[CompilerGenerated] // 0x004C5E0C-0x004C5E48
		[DebuggerBrowsable] // 0x004C5E0C-0x004C5E48
		private IScriptableRuntimeReflectionSystem _implementation_k__BackingField; // 0x10
	
		// Properties
		internal IScriptableRuntimeReflectionSystem implementation { [CompilerGenerated] /* 0x004C8128-0x004C8138 */ get; [CompilerGenerated] /* 0x004C8138-0x004C8148 */ set; } // 0x00ADE2D4-0x00ADE2DC 0x00ADE3EC-0x00ADE3F4
	
		// Constructors
		public ScriptableRuntimeReflectionSystemWrapper(); // 0x00ADE3E4-0x00ADE3EC
	
		// Methods
		[RequiredByNativeCode] // 0x004C8148-0x004C8158
		private void Internal_ScriptableRuntimeReflectionSystemWrapper_TickRealtimeProbes(out bool result); // 0x00ADE3F4-0x00ADE4C0
	}
}

namespace Unity.Collections
{
	[AttributeUsage] // 0x004C1618-0x004C1654
	[RequiredByNativeCode] // 0x004C1618-0x004C1654
	public sealed class ReadOnlyAttribute : Attribute // TypeDefIndex: 1699
	{
	}

	[AttributeUsage] // 0x004C1654-0x004C1690
	[RequiredByNativeCode] // 0x004C1654-0x004C1690
	public sealed class WriteOnlyAttribute : Attribute // TypeDefIndex: 1700
	{
	}

	[AttributeUsage] // 0x004C1690-0x004C16CC
	[RequiredByNativeCode] // 0x004C1690-0x004C16CC
	public sealed class DeallocateOnJobCompletionAttribute : Attribute // TypeDefIndex: 1701
	{
	}

	[AttributeUsage] // 0x004C16CC-0x004C1708
	[RequiredByNativeCode] // 0x004C16CC-0x004C1708
	public sealed class NativeFixedLengthAttribute : Attribute // TypeDefIndex: 1702
	{
	}

	[AttributeUsage] // 0x004C1708-0x004C1744
	[RequiredByNativeCode] // 0x004C1708-0x004C1744
	public sealed class NativeMatchesParallelForLengthAttribute : Attribute // TypeDefIndex: 1703
	{
	}

	[AttributeUsage] // 0x004C1744-0x004C1780
	[RequiredByNativeCode] // 0x004C1744-0x004C1780
	public sealed class NativeDisableParallelForRestrictionAttribute : Attribute // TypeDefIndex: 1704
	{
	}
}

namespace Unity.Collections.LowLevel.Unsafe
{
	[AttributeUsage] // 0x004C1780-0x004C17BC
	[RequiredByNativeCode] // 0x004C1780-0x004C17BC
	public sealed class NativeContainerAttribute : Attribute // TypeDefIndex: 1705
	{
		// Constructors
		public NativeContainerAttribute(); // 0x00ACFFA8-0x00ACFFB0
	}

	[AttributeUsage] // 0x004C17BC-0x004C17F8
	[RequiredByNativeCode] // 0x004C17BC-0x004C17F8
	public sealed class NativeContainerIsReadOnlyAttribute : Attribute // TypeDefIndex: 1706
	{
	}

	[AttributeUsage] // 0x004C17F8-0x004C1834
	[RequiredByNativeCode] // 0x004C17F8-0x004C1834
	public sealed class NativeContainerIsAtomicWriteOnlyAttribute : Attribute // TypeDefIndex: 1707
	{
	}

	[AttributeUsage] // 0x004C1834-0x004C1870
	[RequiredByNativeCode] // 0x004C1834-0x004C1870
	public sealed class NativeContainerSupportsMinMaxWriteRestrictionAttribute : Attribute // TypeDefIndex: 1708
	{
		// Constructors
		public NativeContainerSupportsMinMaxWriteRestrictionAttribute(); // 0x00ACFFC0-0x00ACFFC8
	}

	[AttributeUsage] // 0x004C1870-0x004C18AC
	[RequiredByNativeCode] // 0x004C1870-0x004C18AC
	public sealed class NativeContainerSupportsDeallocateOnJobCompletionAttribute : Attribute // TypeDefIndex: 1709
	{
		// Constructors
		public NativeContainerSupportsDeallocateOnJobCompletionAttribute(); // 0x00ACFFB0-0x00ACFFB8
	}

	[AttributeUsage] // 0x004C18AC-0x004C18E8
	[RequiredByNativeCode] // 0x004C18AC-0x004C18E8
	public sealed class NativeContainerSupportsDeferredConvertListToArray : Attribute // TypeDefIndex: 1710
	{
		// Constructors
		public NativeContainerSupportsDeferredConvertListToArray(); // 0x00ACFFB8-0x00ACFFC0
	}

	[AttributeUsage] // 0x004C18E8-0x004C1924
	[RequiredByNativeCode] // 0x004C18E8-0x004C1924
	public sealed class NativeSetThreadIndexAttribute : Attribute // TypeDefIndex: 1711
	{
	}

	[AttributeUsage] // 0x004C1924-0x004C1984
	[Obsolete] // 0x004C1924-0x004C1984
	[RequiredByNativeCode] // 0x004C1924-0x004C1984
	public sealed class NativeContainerNeedsThreadIndexAttribute : Attribute // TypeDefIndex: 1712
	{
	}

	[AttributeUsage] // 0x004C1984-0x004C1998
	public class WriteAccessRequiredAttribute : Attribute // TypeDefIndex: 1713
	{
		// Constructors
		public WriteAccessRequiredAttribute(); // 0x00AD0020-0x00AD0028
	}

	[AttributeUsage] // 0x004C1998-0x004C19D4
	[RequiredByNativeCode] // 0x004C1998-0x004C19D4
	public sealed class NativeDisableUnsafePtrRestrictionAttribute : Attribute // TypeDefIndex: 1714
	{
		// Constructors
		public NativeDisableUnsafePtrRestrictionAttribute(); // 0x00ACFFC8-0x00ACFFD0
	}

	[AttributeUsage] // 0x004C19D4-0x004C1A10
	[RequiredByNativeCode] // 0x004C19D4-0x004C1A10
	public sealed class NativeDisableContainerSafetyRestrictionAttribute : Attribute // TypeDefIndex: 1715
	{
	}

	[AttributeUsage] // 0x004C1A10-0x004C1A4C
	[RequiredByNativeCode] // 0x004C1A10-0x004C1A4C
	public sealed class NativeSetClassTypeToNullOnScheduleAttribute : Attribute // TypeDefIndex: 1716
	{
	}
}

namespace Unity.Collections
{
	[UsedByNativeCode] // 0x004C1A4C-0x004C1A5C
	public enum Allocator // TypeDefIndex: 1717
	{
		Invalid = 0,
		None = 1,
		Temp = 2,
		TempJob = 3,
		Persistent = 4,
		AudioKernel = 5
	}
}

namespace UnityEngine
{
	[NativeHeader] // 0x004C1A5C-0x004C1A94
	internal sealed class DebugLogHandler : ILogHandler // TypeDefIndex: 1718
	{
		// Constructors
		public DebugLogHandler(); // 0x00AD92C0-0x00AD92C8
	
		// Methods
		[ThreadAndSerializationSafe] // 0x004C8158-0x004C8168
		internal static void Internal_Log(LogType level, LogOption options, string msg, UnityEngine.Object obj); // 0x00AD9304-0x00AD936C
		[ThreadAndSerializationSafe] // 0x004C8168-0x004C8178
		internal static void Internal_LogException(Exception exception, UnityEngine.Object obj); // 0x00AD936C-0x00AD93BC
		public void LogFormat(LogType logType, UnityEngine.Object context, string format, params /* 0x004CD1F8-0x004CD208 */ object[] args); // 0x00AD93BC-0x00AD9428
		public void LogException(Exception exception, UnityEngine.Object context); // 0x00AD9428-0x00AD94E0
	}

	[NativeHeader] // 0x004C1A94-0x004C1ACC
	public class Debug // TypeDefIndex: 1719
	{
		// Fields
		internal static ILogger s_Logger; // 0x00
	
		// Properties
		public static ILogger unityLogger { get; } // 0x00AD82A8-0x00AD8310 
	
		// Constructors
		static Debug(); // 0x00AD9224-0x00AD92C0
	
		// Methods
		[ExcludeFromDocs] // 0x004C8178-0x004C8188
		public static void DrawLine(Vector3 start, Vector3 end, Color color); // 0x00AD8310-0x00AD83E8
		[FreeFunction] // 0x004C8188-0x004C81C0
		public static void DrawLine(Vector3 start, Vector3 end, [UnityEngine.Internal.DefaultValue] /* 0x004CD208-0x004CD240 */ Color color, [UnityEngine.Internal.DefaultValue] /* 0x004CD240-0x004CD278 */ float duration, [UnityEngine.Internal.DefaultValue] /* 0x004CD278-0x004CD2B0 */ bool depthTest); // 0x00AD83E8-0x00AD84B4
		[FreeFunction] // 0x004C81C0-0x004C81F8
		public static void Break(); // 0x00AD852C-0x00AD8560
		public static void Log(object message); // 0x00AD8560-0x00AD8640
		public static void Log(object message, UnityEngine.Object context); // 0x00AD8640-0x00AD8730
		public static void LogFormat(string format, params /* 0x004CD2B0-0x004CD2C0 */ object[] args); // 0x00AD8730-0x00AD8820
		public static void LogError(object message); // 0x00AD8820-0x00AD8900
		public static void LogError(object message, UnityEngine.Object context); // 0x00AD8900-0x00AD89F0
		public static void LogErrorFormat(string format, params /* 0x004CD2C0-0x004CD2D0 */ object[] args); // 0x00AD89F0-0x00AD8AE0
		public static void LogErrorFormat(UnityEngine.Object context, string format, params /* 0x004CD2D0-0x004CD2E0 */ object[] args); // 0x00AD8AE0-0x00AD8BD4
		public static void LogException(Exception exception); // 0x00AD19AC-0x00AD1A8C
		public static void LogException(Exception exception, UnityEngine.Object context); // 0x00AD8BD4-0x00AD8CC0
		public static void LogWarning(object message); // 0x00AD8CC0-0x00AD8DA0
		public static void LogWarning(object message, UnityEngine.Object context); // 0x00AD8DA0-0x00AD8E90
		public static void LogWarningFormat(string format, params /* 0x004CD2E0-0x004CD2F0 */ object[] args); // 0x00AD8E90-0x00AD8F80
		public static void LogWarningFormat(UnityEngine.Object context, string format, params /* 0x004CD2F0-0x004CD300 */ object[] args); // 0x00AD8F80-0x00AD9074
		[Conditional] // 0x004C81F8-0x004C8230
		public static void LogAssertion(object message); // 0x00AD1FE4-0x00AD20C4
		[RequiredByNativeCode] // 0x004C8230-0x004C8240
		internal static bool CallOverridenDebugHandler(Exception exception, UnityEngine.Object obj); // 0x00AD9074-0x00AD9224
		private static void DrawLine_Injected(ref Vector3 start, ref Vector3 end, [UnityEngine.Internal.DefaultValue] /* 0x004CD300-0x004CD338 */ ref Color color, [UnityEngine.Internal.DefaultValue] /* 0x004CD338-0x004CD370 */ float duration, [UnityEngine.Internal.DefaultValue] /* 0x004CD370-0x004CD3A8 */ bool depthTest); // 0x00AD84B4-0x00AD852C
	}
}

namespace UnityEngine.Experimental.Playables
{
	[NativeHeader] // 0x004C1ACC-0x004C1B88
	[NativeHeader] // 0x004C1ACC-0x004C1B88
	[NativeHeader] // 0x004C1ACC-0x004C1B88
	[RequiredByNativeCode] // 0x004C1ACC-0x004C1B88
	[StaticAccessor] // 0x004C1ACC-0x004C1B88
	public struct CameraPlayable : IPlayable, IEquatable<CameraPlayable> // TypeDefIndex: 1720
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
	
		// Methods
		public PlayableHandle GetHandle(); // 0x0058A53C-0x0058A548
		public bool Equals(CameraPlayable other); // 0x0058A548-0x0058A550
	}
}

namespace UnityEngine
{
	[Serializable]
	[UsedByNativeCode] // 0x004C1B88-0x004C1BC4
	public struct ExposedReference<T> // TypeDefIndex: 1721
		where T : UnityEngine.Object
	{
		// Fields
		[SerializeField] // 0x004C5E48-0x004C5E58
		public PropertyName exposedName;
		[SerializeField] // 0x004C5E58-0x004C5E68
		public UnityEngine.Object defaultValue;
	
		// Methods
		public T Resolve(IExposedPropertyTable resolver);
	}
}

namespace UnityEngine.Playables
{
	public struct FrameData // TypeDefIndex: 1722
	{
		// Fields
		internal ulong m_FrameID; // 0x00
		internal double m_DeltaTime; // 0x08
		internal float m_Weight; // 0x10
		internal float m_EffectiveWeight; // 0x14
		internal double m_EffectiveParentDelay; // 0x18
		internal float m_EffectiveParentSpeed; // 0x20
		internal float m_EffectiveSpeed; // 0x24
		internal Flags m_Flags; // 0x28
		internal PlayableOutput m_Output; // 0x30
	
		// Properties
		public float deltaTime { get; } // 0x0058C36C-0x0058C378 
		public float effectiveSpeed { get; } // 0x0058C378-0x0058C380 
		public EvaluationType evaluationType { get; } // 0x0058C380-0x0058C390 
		public bool seekOccurred { get; } // 0x0058C390-0x0058C39C 
		public bool timeLooped { get; } // 0x0058C39C-0x0058C3A8 
		public bool timeHeld { get; } // 0x0058C3A8-0x0058C3B4 
		public PlayableOutput output { get; } // 0x0058C3B4-0x0058C3C0 
		public PlayState effectivePlayState { get; } // 0x0058C3C0-0x0058C3D8 
	
		// Nested types
		[Flags] // 0x004C1BC4-0x004C1BD4
		internal enum Flags // TypeDefIndex: 1723
		{
			Evaluate = 1,
			SeekOccured = 2,
			Loop = 4,
			Hold = 8,
			EffectivePlayStateDelayed = 16,
			EffectivePlayStatePlaying = 32
		}
	
		public enum EvaluationType // TypeDefIndex: 1724
		{
			Evaluate = 0,
			Playback = 1
		}
	
		// Methods
		private bool HasFlags(Flags flag); // 0x0058C35C-0x0058C36C
	}
}

namespace UnityEngine
{
	public interface IExposedPropertyTable // TypeDefIndex: 1725
	{
		// Methods
		UnityEngine.Object GetReferenceValue(PropertyName id, out bool idValid);
	}
}

namespace UnityEngine.Playables
{
	public interface INotification // TypeDefIndex: 1726
	{
		// Properties
		PropertyName id { get; }
	}

	[RequiredByNativeCode] // 0x004C1BD4-0x004C1BE4
	public interface INotificationReceiver // TypeDefIndex: 1727
	{
		// Methods
		[RequiredByNativeCode] // 0x004C8240-0x004C8250
		void OnNotify(Playable origin, INotification notification, object context);
	}

	public interface IPlayable // TypeDefIndex: 1728
	{
		// Methods
		PlayableHandle GetHandle();
	}

	public interface IPlayableBehaviour // TypeDefIndex: 1729
	{
		// Methods
		[RequiredByNativeCode] // 0x004C8250-0x004C8260
		void OnGraphStart(Playable playable);
		[RequiredByNativeCode] // 0x004C8260-0x004C8270
		void OnGraphStop(Playable playable);
		[RequiredByNativeCode] // 0x004C8270-0x004C8280
		void OnPlayableCreate(Playable playable);
		[RequiredByNativeCode] // 0x004C8280-0x004C8290
		void OnPlayableDestroy(Playable playable);
		[RequiredByNativeCode] // 0x004C8290-0x004C82A0
		void OnBehaviourPlay(Playable playable, FrameData info);
		[RequiredByNativeCode] // 0x004C82A0-0x004C82B0
		void OnBehaviourPause(Playable playable, FrameData info);
		[RequiredByNativeCode] // 0x004C82B0-0x004C82C0
		void PrepareFrame(Playable playable, FrameData info);
		[RequiredByNativeCode] // 0x004C82C0-0x004C82D0
		void ProcessFrame(Playable playable, FrameData info, object playerData);
	}

	public interface IPlayableOutput // TypeDefIndex: 1730
	{
		// Methods
		PlayableOutputHandle GetHandle();
	}
}

namespace UnityEngine.Experimental.Playables
{
	[NativeHeader] // 0x004C1BE4-0x004C1CA0
	[NativeHeader] // 0x004C1BE4-0x004C1CA0
	[NativeHeader] // 0x004C1BE4-0x004C1CA0
	[RequiredByNativeCode] // 0x004C1BE4-0x004C1CA0
	[StaticAccessor] // 0x004C1BE4-0x004C1CA0
	public struct MaterialEffectPlayable : IPlayable, IEquatable<MaterialEffectPlayable> // TypeDefIndex: 1731
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
	
		// Methods
		public PlayableHandle GetHandle(); // 0x0058A550-0x0058A55C
		public bool Equals(MaterialEffectPlayable other); // 0x0058A55C-0x0058A564
	}
}

namespace UnityEngine.Playables
{
	public enum DirectorWrapMode // TypeDefIndex: 1732
	{
		Hold = 0,
		Loop = 1,
		None = 2
	}

	[RequiredByNativeCode] // 0x004C1CA0-0x004C1CB0
	public struct Playable : IPlayable, IEquatable<Playable> // TypeDefIndex: 1733
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
		private static readonly Playable m_NullPlayable; // 0x00
	
		// Properties
		public static Playable Null { get; } // 0x00B96130-0x00B96198 
	
		// Constructors
		[VisibleToOtherModules] // 0x004C82D0-0x004C82E0
		internal Playable(PlayableHandle handle); // 0x0058C3D8-0x0058C3E0
		static Playable(); // 0x00B96444-0x00B964B8
	
		// Methods
		public static Playable Create(PlayableGraph graph, int inputCount = 0 /* Metadata: 0x001F357E */); // 0x00B96198-0x00B963AC
		public PlayableHandle GetHandle(); // 0x0058C3E0-0x0058C3EC
		public bool IsPlayableOfType<T>()
			where T : struct, IPlayable;
		public Type GetPlayableType(); // 0x0058C3EC-0x0058C414
		public bool Equals(Playable other); // 0x0058C414-0x0058C460
	}

	public interface IPlayableAsset // TypeDefIndex: 1734
	{
		// Properties
		double duration { get; }
	
		// Methods
		Playable CreatePlayable(PlayableGraph graph, GameObject owner);
	}

	[Serializable]
	[AssetFileNameExtension] // 0x004C1CB0-0x004C1D3C
	[RequiredByNativeCode] // 0x004C1CB0-0x004C1D3C
	public abstract class PlayableAsset : ScriptableObject, IPlayableAsset // TypeDefIndex: 1735
	{
		// Properties
		public virtual double duration { get; } // 0x00B965B4-0x00B9661C 
		public virtual IEnumerable<PlayableBinding> outputs { get; } // 0x00B9661C-0x00B96684 
	
		// Constructors
		protected PlayableAsset(); // 0x00B96520-0x00B96524
	
		// Methods
		public abstract Playable CreatePlayable(PlayableGraph graph, GameObject owner);
		[RequiredByNativeCode] // 0x004C82E0-0x004C82F0
		internal static void Internal_CreatePlayable(PlayableAsset asset, PlayableGraph graph, GameObject go, IntPtr ptr); // 0x00B96684-0x00B96768
		[RequiredByNativeCode] // 0x004C82F0-0x004C8300
		internal static void Internal_GetPlayableAssetDuration(PlayableAsset asset, IntPtr ptrToDouble); // 0x00B96768-0x00B9679C
	}

	[Serializable]
	[RequiredByNativeCode] // 0x004C1D3C-0x004C1D4C
	public abstract class PlayableBehaviour : IPlayableBehaviour, ICloneable // TypeDefIndex: 1736
	{
		// Constructors
		public PlayableBehaviour(); // 0x00B9679C-0x00B967A4
	
		// Methods
		public virtual void OnGraphStart(Playable playable); // 0x00B967A4-0x00B967A8
		public virtual void OnGraphStop(Playable playable); // 0x00B967A8-0x00B967AC
		public virtual void OnPlayableCreate(Playable playable); // 0x00B967AC-0x00B967B0
		public virtual void OnPlayableDestroy(Playable playable); // 0x00B967B0-0x00B967B4
		[Obsolete] // 0x004C8300-0x004C833C
		public virtual void OnBehaviourDelay(Playable playable, FrameData info); // 0x00B967B4-0x00B967B8
		public virtual void OnBehaviourPlay(Playable playable, FrameData info); // 0x00B967B8-0x00B967BC
		public virtual void OnBehaviourPause(Playable playable, FrameData info); // 0x00B967BC-0x00B967C0
		public virtual void PrepareFrame(Playable playable, FrameData info); // 0x00B967C0-0x00B967C4
		public virtual void ProcessFrame(Playable playable, FrameData info, object playerData); // 0x00B967C4-0x00B967C8
		public virtual object Clone(); // 0x00B967C8-0x00B9686C
	}

	public struct PlayableBinding // TypeDefIndex: 1737
	{
		// Fields
		private string m_StreamName; // 0x00
		private UnityEngine.Object m_SourceObject; // 0x08
		private Type m_SourceBindingType; // 0x10
		private CreateOutputMethod m_CreateOutputMethod; // 0x18
		public static readonly PlayableBinding[] None; // 0x00
		public static readonly double DefaultDuration; // 0x08
	
		// Properties
		public UnityEngine.Object sourceObject { get; } // 0x0058C460-0x0058C468 
	
		// Nested types
		[VisibleToOtherModules] // 0x004C1D4C-0x004C1D5C
		internal delegate PlayableOutput CreateOutputMethod(PlayableGraph graph, string name); // TypeDefIndex: 1738; 0x00B9686C-0x00B96AF4
	
		// Constructors
		static PlayableBinding(); // 0x00B96B68-0x00B96BDC
	
		// Methods
		internal PlayableOutput CreateOutput(PlayableGraph graph); // 0x0058C468-0x0058C4D4
		[VisibleToOtherModules] // 0x004C833C-0x004C834C
		internal static PlayableBinding CreateInternal(string name, UnityEngine.Object sourceObject, Type sourceType, CreateOutputMethod createFunction); // 0x00B96B5C-0x00B96B68
	}

	public enum PlayableTraversalMode // TypeDefIndex: 1739
	{
		Mix = 0,
		Passthrough = 1
	}

	public static class PlayableExtensions // TypeDefIndex: 1740
	{
		// Extension methods
		public static bool IsValid<U>(this U playable)
			where U : struct, IPlayable;
		public static PlayableGraph GetGraph<U>(this U playable)
			where U : struct, IPlayable;
		public static PlayState GetPlayState<U>(this U playable)
			where U : struct, IPlayable;
		public static void Play<U>(this U playable)
			where U : struct, IPlayable;
		public static void Pause<U>(this U playable)
			where U : struct, IPlayable;
		public static void SetSpeed<U>(this U playable, double value)
			where U : struct, IPlayable;
		public static void SetDuration<U>(this U playable, double value)
			where U : struct, IPlayable;
		public static double GetDuration<U>(this U playable)
			where U : struct, IPlayable;
		public static void SetTime<U>(this U playable, double value)
			where U : struct, IPlayable;
		public static double GetTime<U>(this U playable)
			where U : struct, IPlayable;
		public static double GetPreviousTime<U>(this U playable)
			where U : struct, IPlayable;
		public static bool IsDone<U>(this U playable)
			where U : struct, IPlayable;
		public static void SetPropagateSetTime<U>(this U playable, bool value)
			where U : struct, IPlayable;
		public static void SetInputCount<U>(this U playable, int value)
			where U : struct, IPlayable;
		public static int GetInputCount<U>(this U playable)
			where U : struct, IPlayable;
		public static Playable GetInput<U>(this U playable, int inputPort)
			where U : struct, IPlayable;
		public static void SetInputWeight<U>(this U playable, int inputIndex, float weight)
			where U : struct, IPlayable;
		public static void SetInputWeight<U, V>(this U playable, V input, float weight)
			where U : struct, IPlayable
			where V : struct, IPlayable;
		public static float GetInputWeight<U>(this U playable, int inputIndex)
			where U : struct, IPlayable;
		public static void SetTraversalMode<U>(this U playable, PlayableTraversalMode mode)
			where U : struct, IPlayable;
		internal static DirectorWrapMode GetTimeWrapMode<U>(this U playable)
			where U : struct, IPlayable;
		internal static void SetTimeWrapMode<U>(this U playable, DirectorWrapMode value)
			where U : struct, IPlayable;
	}

	[NativeHeader] // 0x004C1D6C-0x004C1E24
	[NativeHeader] // 0x004C1D6C-0x004C1E24
	[NativeHeader] // 0x004C1D6C-0x004C1E24
	[NativeHeader] // 0x004C1D6C-0x004C1E24
	[UsedByNativeCode] // 0x004C1D6C-0x004C1E24
	public struct PlayableGraph // TypeDefIndex: 1741
	{
		// Fields
		internal IntPtr m_Handle; // 0x00
		internal uint m_Version; // 0x08
	
		// Methods
		public Playable GetRootPlayable(int index); // 0x0058C4D4-0x0058C4DC
		public bool Connect<U, V>(U source, int sourceOutputPort, V destination, int destinationInputPort)
			where U : struct, IPlayable
			where V : struct, IPlayable;
		public bool IsValid(); // 0x0058C4DC-0x0058C51C
		[FreeFunction] // 0x004C84AC-0x004C84F0
		public bool IsPlaying(); // 0x0058C51C-0x0058C55C
		[FreeFunction] // 0x004C84F0-0x004C8534
		public IExposedPropertyTable GetResolver(); // 0x0058C55C-0x0058C59C
		[FreeFunction] // 0x004C8534-0x004C8578
		public int GetPlayableCount(); // 0x0058C59C-0x0058C5DC
		[FreeFunction] // 0x004C8578-0x004C85BC
		public int GetRootPlayableCount(); // 0x0058C5DC-0x0058C61C
		[FreeFunction] // 0x004C85BC-0x004C8600
		internal PlayableHandle CreatePlayableHandle(); // 0x0058C61C-0x0058C624
		[FreeFunction] // 0x004C8600-0x004C8644
		internal bool CreateScriptOutputInternal(string name, out PlayableOutputHandle handle); // 0x0058C624-0x0058C67C
		[FreeFunction] // 0x004C8644-0x004C8688
		internal PlayableHandle GetRootPlayableInternal(int index); // 0x0058C67C-0x0058C684
		[FreeFunction] // 0x004C8688-0x004C86CC
		private bool ConnectInternal(PlayableHandle source, int sourceOutputPort, PlayableHandle destination, int destinationInputPort); // 0x0058C684-0x0058C68C
		private static bool IsValid_Injected(ref PlayableGraph _unity_self); // 0x00B96D60-0x00B96DE0
		private static bool IsPlaying_Injected(ref PlayableGraph _unity_self); // 0x00B96DE0-0x00B96E60
		private static IExposedPropertyTable GetResolver_Injected(ref PlayableGraph _unity_self); // 0x00B96E60-0x00B96EE0
		private static int GetPlayableCount_Injected(ref PlayableGraph _unity_self); // 0x00B96EE0-0x00B96F60
		private static int GetRootPlayableCount_Injected(ref PlayableGraph _unity_self); // 0x00B96F60-0x00B96FA0
		private static void CreatePlayableHandle_Injected(ref PlayableGraph _unity_self, out PlayableHandle ret); // 0x00B96FA0-0x00B97048
		private static bool CreateScriptOutputInternal_Injected(ref PlayableGraph _unity_self, string name, out PlayableOutputHandle handle); // 0x00B97048-0x00B970A0
		private static void GetRootPlayableInternal_Injected(ref PlayableGraph _unity_self, int index, out PlayableHandle ret); // 0x00B970A0-0x00B97170
		private static bool ConnectInternal_Injected(ref PlayableGraph _unity_self, ref PlayableHandle source, int sourceOutputPort, ref PlayableHandle destination, int destinationInputPort); // 0x00B97170-0x00B9745C
	}

	public enum PlayState // TypeDefIndex: 1742
	{
		Paused = 0,
		Playing = 1,
		Delayed = 2
	}

	[NativeHeader] // 0x004C1E24-0x004C1EB8
	[NativeHeader] // 0x004C1E24-0x004C1EB8
	[NativeHeader] // 0x004C1E24-0x004C1EB8
	[UsedByNativeCode] // 0x004C1E24-0x004C1EB8
	public struct PlayableHandle : IEquatable<PlayableHandle> // TypeDefIndex: 1743
	{
		// Fields
		internal IntPtr m_Handle; // 0x00
		internal uint m_Version; // 0x08
		private static readonly PlayableHandle m_Null; // 0x00
	
		// Properties
		public static PlayableHandle Null { get; } // 0x00B964B8-0x00B96520 
	
		// Constructors
		static PlayableHandle(); // 0x00B98AEC-0x00B98BD4
	
		// Methods
		internal T GetObject<T>()
			where T : class, IPlayableBehaviour;
		[VisibleToOtherModules] // 0x004C86CC-0x004C86DC
		internal bool IsPlayableOfType<T>();
		internal Playable GetInput(int inputPort); // 0x0058C68C-0x0058C694
		internal bool SetInputWeight(int inputIndex, float weight); // 0x0058C694-0x0058C6E0
		internal float GetInputWeight(int inputIndex); // 0x0058C6E0-0x0058C714
		public static bool operator ==(PlayableHandle x, PlayableHandle y); // 0x00B963AC-0x00B96444
		public override bool Equals(object p); // 0x0058C714-0x0058C71C
		public bool Equals(PlayableHandle other); // 0x0058C71C-0x0058C724
		public override int GetHashCode(); // 0x0058C724-0x0058C760
		internal static bool CompareVersion(PlayableHandle lhs, PlayableHandle rhs); // 0x00B9745C-0x00B9792C
		internal bool CheckInputBounds(int inputIndex); // 0x0058C760-0x0058C780
		internal bool CheckInputBounds(int inputIndex, bool acceptAny); // 0x0058C780-0x0058C7A0
		[VisibleToOtherModules] // 0x004C86DC-0x004C86EC
		internal bool IsValid(); // 0x0058C7A0-0x0058C7A8
		[FreeFunction] // 0x004C86EC-0x004C8744
		[VisibleToOtherModules] // 0x004C86EC-0x004C8744
		internal Type GetPlayableType(); // 0x0058C7A8-0x0058C7B0
		[FreeFunction] // 0x004C8744-0x004C8798
		[VisibleToOtherModules] // 0x004C8744-0x004C8798
		internal void SetScriptInstance(object scriptInstance); // 0x0058C7B0-0x0058C7B8
		[FreeFunction] // 0x004C8798-0x004C87F0
		[VisibleToOtherModules] // 0x004C8798-0x004C87F0
		internal PlayState GetPlayState(); // 0x0058C7B8-0x0058C7C0
		[FreeFunction] // 0x004C87F0-0x004C8848
		[VisibleToOtherModules] // 0x004C87F0-0x004C8848
		internal void Play(); // 0x0058C7C0-0x0058C7C8
		[FreeFunction] // 0x004C8848-0x004C889C
		[VisibleToOtherModules] // 0x004C8848-0x004C889C
		internal void Pause(); // 0x0058C7C8-0x0058C7D0
		[FreeFunction] // 0x004C889C-0x004C88F0
		[VisibleToOtherModules] // 0x004C889C-0x004C88F0
		internal void SetSpeed(double value); // 0x0058C7D0-0x0058C7D8
		[FreeFunction] // 0x004C88F0-0x004C8944
		[VisibleToOtherModules] // 0x004C88F0-0x004C8944
		internal double GetTime(); // 0x0058C7D8-0x0058C7E0
		[FreeFunction] // 0x004C8944-0x004C8998
		[VisibleToOtherModules] // 0x004C8944-0x004C8998
		internal void SetTime(double value); // 0x0058C7E0-0x0058C7E8
		[FreeFunction] // 0x004C8998-0x004C89F0
		[VisibleToOtherModules] // 0x004C8998-0x004C89F0
		internal bool IsDone(); // 0x0058C7E8-0x0058C7F0
		[FreeFunction] // 0x004C89F0-0x004C8A44
		[VisibleToOtherModules] // 0x004C89F0-0x004C8A44
		internal double GetDuration(); // 0x0058C7F0-0x0058C7F8
		[FreeFunction] // 0x004C8A44-0x004C8A9C
		[VisibleToOtherModules] // 0x004C8A44-0x004C8A9C
		internal void SetDuration(double value); // 0x0058C7F8-0x0058C800
		[FreeFunction] // 0x004C8A9C-0x004C8AF4
		[VisibleToOtherModules] // 0x004C8A9C-0x004C8AF4
		internal void SetPropagateSetTime(bool value); // 0x0058C800-0x0058C80C
		[FreeFunction] // 0x004C8AF4-0x004C8B4C
		[VisibleToOtherModules] // 0x004C8AF4-0x004C8B4C
		internal PlayableGraph GetGraph(); // 0x0058C80C-0x0058C814
		[FreeFunction] // 0x004C8B4C-0x004C8BA4
		[VisibleToOtherModules] // 0x004C8B4C-0x004C8BA4
		internal int GetInputCount(); // 0x0058C814-0x0058C81C
		[FreeFunction] // 0x004C8BA4-0x004C8BF8
		[VisibleToOtherModules] // 0x004C8BA4-0x004C8BF8
		internal void SetInputCount(int value); // 0x0058C81C-0x0058C824
		[FreeFunction] // 0x004C8BF8-0x004C8C50
		[VisibleToOtherModules] // 0x004C8BF8-0x004C8C50
		internal void SetInputWeight(PlayableHandle input, float weight); // 0x0058C824-0x0058C82C
		[FreeFunction] // 0x004C8C50-0x004C8CA8
		[VisibleToOtherModules] // 0x004C8C50-0x004C8CA8
		internal double GetPreviousTime(); // 0x0058C82C-0x0058C834
		[FreeFunction] // 0x004C8CA8-0x004C8CFC
		[VisibleToOtherModules] // 0x004C8CA8-0x004C8CFC
		internal void SetTraversalMode(PlayableTraversalMode mode); // 0x0058C834-0x0058C83C
		[FreeFunction] // 0x004C8CFC-0x004C8D50
		[VisibleToOtherModules] // 0x004C8CFC-0x004C8D50
		internal DirectorWrapMode GetTimeWrapMode(); // 0x0058C83C-0x0058C844
		[FreeFunction] // 0x004C8D50-0x004C8DA4
		[VisibleToOtherModules] // 0x004C8D50-0x004C8DA4
		internal void SetTimeWrapMode(DirectorWrapMode mode); // 0x0058C844-0x0058C84C
		[FreeFunction] // 0x004C8DA4-0x004C8DE8
		private object GetScriptInstance(); // 0x0058C84C-0x0058C854
		[FreeFunction] // 0x004C8DE8-0x004C8E2C
		private PlayableHandle GetInputHandle(int index); // 0x0058C854-0x0058C85C
		[FreeFunction] // 0x004C8E2C-0x004C8E70
		private void SetInputWeightFromIndex(int index, float weight); // 0x0058C85C-0x0058C864
		[FreeFunction] // 0x004C8E70-0x004C8EB4
		private float GetInputWeightFromIndex(int index); // 0x0058C864-0x0058C86C
		private static bool IsValid_Injected(ref PlayableHandle _unity_self); // 0x00B9792C-0x00B9796C
		private static Type GetPlayableType_Injected(ref PlayableHandle _unity_self); // 0x00B9796C-0x00B97A40
		private static void SetScriptInstance_Injected(ref PlayableHandle _unity_self, object scriptInstance); // 0x00B97A40-0x00B97B14
		private static PlayState GetPlayState_Injected(ref PlayableHandle _unity_self); // 0x00B97B14-0x00B97BD8
		private static void Play_Injected(ref PlayableHandle _unity_self); // 0x00B97BD8-0x00B97C9C
		private static void Pause_Injected(ref PlayableHandle _unity_self); // 0x00B97C9C-0x00B97D70
		private static void SetSpeed_Injected(ref PlayableHandle _unity_self, double value); // 0x00B97D70-0x00B97E44
		private static double GetTime_Injected(ref PlayableHandle _unity_self); // 0x00B97E44-0x00B97F18
		private static void SetTime_Injected(ref PlayableHandle _unity_self, double value); // 0x00B97F18-0x00B97FEC
		private static bool IsDone_Injected(ref PlayableHandle _unity_self); // 0x00B97FEC-0x00B980B0
		private static double GetDuration_Injected(ref PlayableHandle _unity_self); // 0x00B980B0-0x00B98184
		private static void SetDuration_Injected(ref PlayableHandle _unity_self, double value); // 0x00B98184-0x00B98268
		private static void SetPropagateSetTime_Injected(ref PlayableHandle _unity_self, bool value); // 0x00B98268-0x00B98354
		private static void GetGraph_Injected(ref PlayableHandle _unity_self, out PlayableGraph ret); // 0x00B98354-0x00B983A4
		private static int GetInputCount_Injected(ref PlayableHandle _unity_self); // 0x00B983A4-0x00B98478
		private static void SetInputCount_Injected(ref PlayableHandle _unity_self, int value); // 0x00B98478-0x00B98570
		private static void SetInputWeight_Injected(ref PlayableHandle _unity_self, ref PlayableHandle input, float weight); // 0x00B98570-0x00B98654
		private static double GetPreviousTime_Injected(ref PlayableHandle _unity_self); // 0x00B98654-0x00B98728
		private static void SetTraversalMode_Injected(ref PlayableHandle _unity_self, PlayableTraversalMode mode); // 0x00B98728-0x00B987FC
		private static DirectorWrapMode GetTimeWrapMode_Injected(ref PlayableHandle _unity_self); // 0x00B987FC-0x00B988D0
		private static void SetTimeWrapMode_Injected(ref PlayableHandle _unity_self, DirectorWrapMode mode); // 0x00B988D0-0x00B989A4
		private static object GetScriptInstance_Injected(ref PlayableHandle _unity_self); // 0x00B989A4-0x00B989E4
		private static void GetInputHandle_Injected(ref PlayableHandle _unity_self, int index, out PlayableHandle ret); // 0x00B989E4-0x00B98A3C
		private static void SetInputWeightFromIndex_Injected(ref PlayableHandle _unity_self, int index, float weight); // 0x00B98A3C-0x00B98A9C
		private static float GetInputWeightFromIndex_Injected(ref PlayableHandle _unity_self, int index); // 0x00B98A9C-0x00B98AEC
	}

	[RequiredByNativeCode] // 0x004C1EB8-0x004C1EC8
	public struct PlayableOutput : IPlayableOutput, IEquatable<PlayableOutput> // TypeDefIndex: 1744
	{
		// Fields
		private PlayableOutputHandle m_Handle; // 0x00
		private static readonly PlayableOutput m_NullPlayableOutput; // 0x00
	
		// Properties
		public static PlayableOutput Null { get; } // 0x00B96AF4-0x00B96B5C 
	
		// Constructors
		[VisibleToOtherModules] // 0x004C8EB4-0x004C8EC4
		internal PlayableOutput(PlayableOutputHandle handle); // 0x0058C86C-0x0058C874
		static PlayableOutput(); // 0x00B98C6C-0x00B98CE0
	
		// Methods
		public PlayableOutputHandle GetHandle(); // 0x0058C874-0x0058C880
		public bool IsPlayableOutputOfType<T>()
			where T : struct, IPlayableOutput;
		public bool Equals(PlayableOutput other); // 0x0058C880-0x0058C888
	}

	public static class PlayableOutputExtensions // TypeDefIndex: 1745
	{
		// Extension methods
		public static void SetReferenceObject<U>(this U output, UnityEngine.Object value)
			where U : struct, IPlayableOutput;
		public static void SetUserData<U>(this U output, UnityEngine.Object value)
			where U : struct, IPlayableOutput;
		public static Playable GetSourcePlayable<U>(this U output)
			where U : struct, IPlayableOutput;
		public static void SetSourcePlayable<U, V>(this U output, V value)
			where U : struct, IPlayableOutput
			where V : struct, IPlayable;
		public static int GetSourceOutputPort<U>(this U output)
			where U : struct, IPlayableOutput;
		public static void SetSourceOutputPort<U>(this U output, int value)
			where U : struct, IPlayableOutput;
		public static void SetWeight<U>(this U output, float value)
			where U : struct, IPlayableOutput;
		public static void PushNotification<U>(this U output, Playable origin, INotification notification, object context = null)
			where U : struct, IPlayableOutput;
		public static void AddNotificationReceiver<U>(this U output, INotificationReceiver receiver)
			where U : struct, IPlayableOutput;
	}

	[NativeHeader] // 0x004C1ED8-0x004C1F6C
	[NativeHeader] // 0x004C1ED8-0x004C1F6C
	[NativeHeader] // 0x004C1ED8-0x004C1F6C
	[UsedByNativeCode] // 0x004C1ED8-0x004C1F6C
	public struct PlayableOutputHandle : IEquatable<PlayableOutputHandle> // TypeDefIndex: 1746
	{
		// Fields
		internal IntPtr m_Handle; // 0x00
		internal uint m_Version; // 0x08
		private static readonly PlayableOutputHandle m_Null; // 0x00
	
		// Properties
		public static PlayableOutputHandle Null { get; } // 0x00B98CE0-0x00B98D80 
	
		// Constructors
		static PlayableOutputHandle(); // 0x00B99880-0x00B998D0
	
		// Methods
		[VisibleToOtherModules] // 0x004C8F54-0x004C8F64
		internal bool IsPlayableOutputOfType<T>();
		public override int GetHashCode(); // 0x0058C888-0x0058C8C4
		public static bool operator ==(PlayableOutputHandle lhs, PlayableOutputHandle rhs); // 0x00B98BD4-0x00B98C6C
		public override bool Equals(object p); // 0x0058C8C4-0x0058C8CC
		public bool Equals(PlayableOutputHandle other); // 0x0058C8CC-0x0058C8D4
		internal static bool CompareVersion(PlayableOutputHandle lhs, PlayableOutputHandle rhs); // 0x00B98D80-0x00B98F58
		[VisibleToOtherModules] // 0x004C8F64-0x004C8F74
		internal bool IsValid(); // 0x0058C8D4-0x0058C8DC
		[FreeFunction] // 0x004C8F74-0x004C8FB8
		internal Type GetPlayableOutputType(); // 0x0058C8DC-0x0058C8E4
		[FreeFunction] // 0x004C8FB8-0x004C8FFC
		internal void SetReferenceObject(UnityEngine.Object target); // 0x0058C8E4-0x0058C8EC
		[FreeFunction] // 0x004C8FFC-0x004C9040
		internal void SetUserData([Writable] /* 0x004CD3A8-0x004CD3B8 */ UnityEngine.Object target); // 0x0058C8EC-0x0058C8F4
		[FreeFunction] // 0x004C9040-0x004C9084
		internal PlayableHandle GetSourcePlayable(); // 0x0058C8F4-0x0058C8FC
		[FreeFunction] // 0x004C9084-0x004C90C8
		internal void SetSourcePlayable(PlayableHandle target); // 0x0058C8FC-0x0058C904
		[FreeFunction] // 0x004C90C8-0x004C910C
		internal int GetSourceOutputPort(); // 0x0058C904-0x0058C90C
		[FreeFunction] // 0x004C910C-0x004C9150
		internal void SetSourceOutputPort(int port); // 0x0058C90C-0x0058C914
		[FreeFunction] // 0x004C9150-0x004C9194
		internal void SetWeight(float weight); // 0x0058C914-0x0058C91C
		[FreeFunction] // 0x004C9194-0x004C91D8
		internal void PushNotification(PlayableHandle origin, INotification notification, object context); // 0x0058C91C-0x0058C924
		[FreeFunction] // 0x004C91D8-0x004C921C
		internal void AddNotificationReceiver(INotificationReceiver receiver); // 0x0058C924-0x0058C92C
		private static bool IsValid_Injected(ref PlayableOutputHandle _unity_self); // 0x00B98F58-0x00B9901C
		private static Type GetPlayableOutputType_Injected(ref PlayableOutputHandle _unity_self); // 0x00B9901C-0x00B990F0
		private static void SetReferenceObject_Injected(ref PlayableOutputHandle _unity_self, UnityEngine.Object target); // 0x00B990F0-0x00B991D4
		private static void SetUserData_Injected(ref PlayableOutputHandle _unity_self, [Writable] /* 0x004CD3B8-0x004CD3C8 */ UnityEngine.Object target); // 0x00B991D4-0x00B992C0
		private static void GetSourcePlayable_Injected(ref PlayableOutputHandle _unity_self, out PlayableHandle ret); // 0x00B992C0-0x00B993A8
		private static void SetSourcePlayable_Injected(ref PlayableOutputHandle _unity_self, ref PlayableHandle target); // 0x00B993A8-0x00B9947C
		private static int GetSourceOutputPort_Injected(ref PlayableOutputHandle _unity_self); // 0x00B9947C-0x00B99550
		private static void SetSourceOutputPort_Injected(ref PlayableOutputHandle _unity_self, int port); // 0x00B99550-0x00B99634
		private static void SetWeight_Injected(ref PlayableOutputHandle _unity_self, float weight); // 0x00B99634-0x00B99734
		private static void PushNotification_Injected(ref PlayableOutputHandle _unity_self, ref PlayableHandle origin, INotification notification, object context); // 0x00B99734-0x00B99830
		private static void AddNotificationReceiver_Injected(ref PlayableOutputHandle _unity_self, INotificationReceiver receiver); // 0x00B99830-0x00B99880
	}

	public struct ScriptPlayable<T> : IPlayable, IEquatable<ScriptPlayable<T>> // TypeDefIndex: 1747
		where T : class, IPlayableBehaviour, new()
	{
		// Fields
		private PlayableHandle m_Handle;
		private static readonly ScriptPlayable<T> m_NullPlayable;
	
		// Properties
		public static ScriptPlayable<T> Null { get; }
	
		// Constructors
		internal ScriptPlayable(PlayableHandle handle);
		static ScriptPlayable();
	
		// Methods
		public static ScriptPlayable<T> Create(PlayableGraph graph, int inputCount = 0 /* Metadata: 0x001F3596 */);
		public static ScriptPlayable<T> Create(PlayableGraph graph, T template, int inputCount = 0 /* Metadata: 0x001F359A */);
		private static PlayableHandle CreateHandle(PlayableGraph graph, T template, int inputCount);
		private static object CreateScriptInstance();
		private static object CloneScriptInstance(IPlayableBehaviour source);
		private static object CloneScriptInstanceFromEngineObject(UnityEngine.Object source);
		private static object CloneScriptInstanceFromIClonable(ICloneable source);
		public PlayableHandle GetHandle();
		public T GetBehaviour();
		public static implicit operator Playable(ScriptPlayable<T> playable);
		public static explicit operator ScriptPlayable<T>(Playable playable);
		public bool Equals(ScriptPlayable<T> other);
	}

	public static class ScriptPlayableBinding // TypeDefIndex: 1748
	{
		// Fields
		[CompilerGenerated] // 0x004C5EA4-0x004C5EB4
		private static PlayableBinding.CreateOutputMethod __f__mg_cache0; // 0x00
	
		// Methods
		public static PlayableBinding Create(string name, UnityEngine.Object key, Type type); // 0x00B998D0-0x00B999AC
		private static PlayableOutput CreateScriptOutput(PlayableGraph graph, string name); // 0x00B999AC-0x00B999B0
	}

	[RequiredByNativeCode] // 0x004C1F6C-0x004C1F7C
	public struct ScriptPlayableOutput : IPlayableOutput // TypeDefIndex: 1749
	{
		// Fields
		private PlayableOutputHandle m_Handle; // 0x00
	
		// Properties
		public static ScriptPlayableOutput Null { get; } // 0x00B99AE8-0x00B99B7C 
	
		// Constructors
		internal ScriptPlayableOutput(PlayableOutputHandle handle); // 0x0058C92C-0x0058C934
	
		// Methods
		public static ScriptPlayableOutput Create(PlayableGraph graph, string name); // 0x00B999B0-0x00B99A2C
		public PlayableOutputHandle GetHandle(); // 0x0058C934-0x0058C940
		public static implicit operator PlayableOutput(ScriptPlayableOutput output); // 0x00B99A2C-0x00B99AE8
	}
}

namespace UnityEngine.Experimental.Playables
{
	[NativeHeader] // 0x004C1F7C-0x004C2038
	[NativeHeader] // 0x004C1F7C-0x004C2038
	[NativeHeader] // 0x004C1F7C-0x004C2038
	[RequiredByNativeCode] // 0x004C1F7C-0x004C2038
	[StaticAccessor] // 0x004C1F7C-0x004C2038
	public struct TextureMixerPlayable : IPlayable, IEquatable<TextureMixerPlayable> // TypeDefIndex: 1750
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
	
		// Methods
		public PlayableHandle GetHandle(); // 0x0058A564-0x0058A570
		public bool Equals(TextureMixerPlayable other); // 0x0058A570-0x0058A578
	}

	[NativeHeader] // 0x004C2038-0x004C20F4
	[NativeHeader] // 0x004C2038-0x004C20F4
	[NativeHeader] // 0x004C2038-0x004C20F4
	[RequiredByNativeCode] // 0x004C2038-0x004C20F4
	[StaticAccessor] // 0x004C2038-0x004C20F4
	public struct TexturePlayableOutput : IPlayableOutput // TypeDefIndex: 1751
	{
		// Fields
		private PlayableOutputHandle m_Handle; // 0x00
	
		// Methods
		public PlayableOutputHandle GetHandle(); // 0x0058A578-0x0058A69C
	}
}

namespace UnityEngine.Experimental.GlobalIllumination
{
	public enum LightType : byte // TypeDefIndex: 1752
	{
		Directional = 0,
		Point = 1,
		Spot = 2,
		Rectangle = 3,
		Disc = 4
	}

	public enum LightMode : byte // TypeDefIndex: 1753
	{
		Realtime = 0,
		Mixed = 1,
		Baked = 2,
		Unknown = 3
	}

	public enum FalloffType : byte // TypeDefIndex: 1754
	{
		InverseSquared = 0,
		InverseSquaredNoRangeAttenuation = 1,
		Linear = 2,
		Legacy = 3,
		Undefined = 4
	}

	public struct LinearColor // TypeDefIndex: 1755
	{
		// Fields
		private float m_red; // 0x00
		private float m_green; // 0x04
		private float m_blue; // 0x08
		private float m_intensity; // 0x0C
	
		// Methods
		public static LinearColor Convert(Color color, float intensity); // 0x00ADC51C-0x00ADC608
		public static LinearColor Black(); // 0x00ADDA60-0x00ADDA74
	}

	public struct DirectionalLight // TypeDefIndex: 1756
	{
		// Fields
		public int instanceID; // 0x00
		public bool shadow; // 0x04
		public LightMode mode; // 0x05
		public Vector3 direction; // 0x08
		public LinearColor color; // 0x14
		public LinearColor indirectColor; // 0x24
		public float penumbraWidthRadian; // 0x34
	}

	public struct PointLight // TypeDefIndex: 1757
	{
		// Fields
		public int instanceID; // 0x00
		public bool shadow; // 0x04
		public LightMode mode; // 0x05
		public Vector3 position; // 0x08
		public LinearColor color; // 0x14
		public LinearColor indirectColor; // 0x24
		public float range; // 0x34
		public float sphereRadius; // 0x38
		public FalloffType falloff; // 0x3C
	}

	public struct SpotLight // TypeDefIndex: 1758
	{
		// Fields
		public int instanceID; // 0x00
		public bool shadow; // 0x04
		public LightMode mode; // 0x05
		public Vector3 position; // 0x08
		public Quaternion orientation; // 0x14
		public LinearColor color; // 0x24
		public LinearColor indirectColor; // 0x34
		public float range; // 0x44
		public float sphereRadius; // 0x48
		public float coneAngle; // 0x4C
		public float innerConeAngle; // 0x50
		public FalloffType falloff; // 0x54
	}

	public struct RectangleLight // TypeDefIndex: 1759
	{
		// Fields
		public int instanceID; // 0x00
		public bool shadow; // 0x04
		public LightMode mode; // 0x05
		public Vector3 position; // 0x08
		public Quaternion orientation; // 0x14
		public LinearColor color; // 0x24
		public LinearColor indirectColor; // 0x34
		public float range; // 0x44
		public float width; // 0x48
		public float height; // 0x4C
		public FalloffType falloff; // 0x50
	}

	public struct DiscLight // TypeDefIndex: 1760
	{
		// Fields
		public int instanceID; // 0x00
		public bool shadow; // 0x04
		public LightMode mode; // 0x05
		public Vector3 position; // 0x08
		public Quaternion orientation; // 0x14
		public LinearColor color; // 0x24
		public LinearColor indirectColor; // 0x34
		public float range; // 0x44
		public float radius; // 0x48
		public FalloffType falloff; // 0x4C
	}

	[UsedByNativeCode] // 0x004C20F4-0x004C2104
	public struct LightDataGI // TypeDefIndex: 1761
	{
		// Fields
		public int instanceID; // 0x00
		public LinearColor color; // 0x04
		public LinearColor indirectColor; // 0x14
		public Quaternion orientation; // 0x24
		public Vector3 position; // 0x34
		public float range; // 0x40
		public float coneAngle; // 0x44
		public float innerConeAngle; // 0x48
		public float shape0; // 0x4C
		public float shape1; // 0x50
		public LightType type; // 0x54
		public LightMode mode; // 0x55
		public byte shadow; // 0x56
		public FalloffType falloff; // 0x57
	
		// Methods
		public void Init(ref DirectionalLight light); // 0x0058A164-0x0058A16C
		public void Init(ref PointLight light); // 0x0058A16C-0x0058A174
		public void Init(ref SpotLight light); // 0x0058A174-0x0058A17C
		public void Init(ref RectangleLight light); // 0x0058A17C-0x0058A184
		public void Init(ref DiscLight light); // 0x0058A184-0x0058A18C
		public void InitNoBake(int lightInstanceID); // 0x0058A18C-0x0058A53C
	}

	public static class LightmapperUtils // TypeDefIndex: 1762
	{
		// Methods
		public static LinearColor ExtractIndirect(Light l); // 0x00ADC384-0x00ADC440
		public static float ExtractInnerCone(Light l); // 0x00ADC608-0x00ADC6E0
		public static void Extract(Light l, ref DirectionalLight dir); // 0x00ADC720-0x00ADC858
		public static void Extract(Light l, ref PointLight point); // 0x00ADC898-0x00ADCA04
		public static void Extract(Light l, ref SpotLight spot); // 0x00ADCA44-0x00ADCC2C
		public static void Extract(Light l, ref RectangleLight rect); // 0x00ADCC2C-0x00ADCDD0
		public static void Extract(Light l, ref DiscLight disc); // 0x00ADCDD0-0x00ADCF74
	}

	public static class Lightmapping // TypeDefIndex: 1763
	{
		// Fields
		[RequiredByNativeCode] // 0x004C5EB4-0x004C5EC4
		private static readonly RequestLightsDelegate s_DefaultDelegate; // 0x00
		[RequiredByNativeCode] // 0x004C5EC4-0x004C5ED4
		private static RequestLightsDelegate s_RequestLightsDelegate; // 0x08
	
		// Nested types
		public delegate void RequestLightsDelegate(Light[] requests, NativeArray<LightDataGI> lightsOutput); // TypeDefIndex: 1764; 0x00ADD194-0x00ADD59C
	
		// Constructors
		static Lightmapping(); // 0x00ADD59C-0x00ADD624
	
		// Methods
		[RequiredByNativeCode] // 0x004C921C-0x004C922C
		public static void SetDelegate(RequestLightsDelegate del); // 0x00ADCF74-0x00ADD004
		[RequiredByNativeCode] // 0x004C922C-0x004C923C
		public static RequestLightsDelegate GetDelegate(); // 0x00ADD004-0x00ADD06C
		[RequiredByNativeCode] // 0x004C923C-0x004C924C
		public static void ResetDelegate(); // 0x00ADD06C-0x00ADD0D8
		[RequiredByNativeCode] // 0x004C924C-0x004C925C
		internal static void RequestLights(Light[] lights, IntPtr outLightsPtr, int outLightsCount); // 0x00ADD0D8-0x00ADD194
		[CompilerGenerated] // 0x004C925C-0x004C926C
		private static void _s_DefaultDelegate_m__0(Light[] requests, NativeArray<LightDataGI> lightsOutput); // 0x00ADD634-0x00ADD978
	}
}

namespace UnityEngine
{
	[NativeClass] // 0x004C2104-0x004C221C
	[NativeHeader] // 0x004C2104-0x004C221C
	[NativeHeader] // 0x004C2104-0x004C221C
	[NativeHeader] // 0x004C2104-0x004C221C
	[NativeHeader] // 0x004C2104-0x004C221C
	[NativeType] // 0x004C2104-0x004C221C
	[RequiredByNativeCode] // 0x004C2104-0x004C221C
	public struct Bounds : IEquatable<Bounds> // TypeDefIndex: 1765
	{
		// Fields
		private Vector3 m_Center; // 0x00
		[NativeName] // 0x004C5ED4-0x004C5F0C
		private Vector3 m_Extents; // 0x0C
	
		// Properties
		public Vector3 center { get; set; } // 0x00589D7C-0x00589D88 0x00589D88-0x00589D94
		public Vector3 size { get; set; } // 0x00589D94-0x00589D9C 0x00589D9C-0x00589DA4
		public Vector3 extents { get; set; } // 0x00589DA4-0x00589DB0 0x00589DB0-0x00589DBC
		public Vector3 min { get; set; } // 0x00589DBC-0x00589DC4 0x00589DC4-0x00589DCC
		public Vector3 max { get; set; } // 0x00589DCC-0x00589DD4 0x00589DD4-0x00589DDC
	
		// Constructors
		public Bounds(Vector3 center, Vector3 size); // 0x00589D2C-0x00589D34
	
		// Methods
		public override int GetHashCode(); // 0x00589D34-0x00589D3C
		public override bool Equals(object other); // 0x00589D3C-0x00589D44
		public bool Equals(Bounds other); // 0x00589D44-0x00589D7C
		public static bool operator ==(Bounds lhs, Bounds rhs); // 0x00AD3C54-0x00AD3D70
		public static bool operator !=(Bounds lhs, Bounds rhs); // 0x00AD3D70-0x00AD411C
		public void SetMinMax(Vector3 min, Vector3 max); // 0x00589DDC-0x00589DE4
		public void Encapsulate(Vector3 point); // 0x00589DE4-0x00589DEC
		public void Encapsulate(Bounds bounds); // 0x00589DEC-0x00589E20
		public override string ToString(); // 0x00589E20-0x00589E28
		[NativeMethod] // 0x004C926C-0x004C92B0
		public bool Contains(Vector3 point); // 0x00589E28-0x00589E30
		[FreeFunction] // 0x004C92B0-0x004C92F8
		public Vector3 ClosestPoint(Vector3 point); // 0x00589E30-0x00589E38
		private static bool Contains_Injected(ref Bounds _unity_self, ref Vector3 point); // 0x00AD411C-0x00AD41D8
		private static void ClosestPoint_Injected(ref Bounds _unity_self, ref Vector3 point, out Vector3 ret); // 0x00AD41D8-0x00AD4230
	}

	[UsedByNativeCode] // 0x004C221C-0x004C222C
	public struct Plane // TypeDefIndex: 1766
	{
		// Fields
		internal const int size = 16; // Metadata: 0x001F35AC
		private Vector3 m_Normal; // 0x00
		private float m_Distance; // 0x0C
	
		// Properties
		public Vector3 normal { get; } // 0x0058C308-0x0058C314 
		public float distance { get; } // 0x0058C314-0x0058C31C 
	
		// Constructors
		public Plane(Vector3 inNormal, Vector3 inPoint); // 0x0058C2E0-0x0058C2E8
		public Plane(Vector3 inNormal, float d); // 0x0058C2E8-0x0058C2F0
		public Plane(Vector3 a, Vector3 b, Vector3 c); // 0x0058C2F0-0x0058C308
	
		// Methods
		public bool Raycast(Ray ray, out float enter); // 0x0058C31C-0x0058C354
		public override string ToString(); // 0x0058C354-0x0058C35C
	}

	public struct Ray // TypeDefIndex: 1767
	{
		// Fields
		private Vector3 m_Origin; // 0x00
		private Vector3 m_Direction; // 0x0C
	
		// Properties
		public Vector3 origin { get; set; } // 0x0058CAC4-0x0058CAD0 0x0058CAD0-0x0058CADC
		public Vector3 direction { get; } // 0x0058CADC-0x0058CAE8 
	
		// Constructors
		public Ray(Vector3 origin, Vector3 direction); // 0x0058CABC-0x0058CAC4
	
		// Methods
		public Vector3 GetPoint(float distance); // 0x0058CAE8-0x0058CAF0
		public override string ToString(); // 0x0058CAF0-0x0058CAF8
	}

	[NativeClass] // 0x004C222C-0x004C22BC
	[NativeHeader] // 0x004C222C-0x004C22BC
	[RequiredByNativeCode] // 0x004C222C-0x004C22BC
	public struct Rect : IEquatable<Rect> // TypeDefIndex: 1768
	{
		// Fields
		[NativeName] // 0x004C5F0C-0x004C5F44
		private float m_XMin; // 0x00
		[NativeName] // 0x004C5F44-0x004C5F7C
		private float m_YMin; // 0x04
		[NativeName] // 0x004C5F7C-0x004C5FB4
		private float m_Width; // 0x08
		[NativeName] // 0x004C5FB4-0x004C5FEC
		private float m_Height; // 0x0C
	
		// Properties
		public static Rect zero { [CompilerGenerated] /* 0x004C92F8-0x004C9308 */ get; } // 0x00B9D1F8-0x00B9D478 
		public float x { get; set; } // 0x0058CB1C-0x0058CB24 0x0058CB24-0x0058CB2C
		public float y { get; set; } // 0x0058CB2C-0x0058CB34 0x0058CB34-0x0058CB3C
		public Vector2 position { get; set; } // 0x0058CB3C-0x0058CB6C 0x0058CB6C-0x0058CB74
		public Vector2 center { get; } // 0x0058CB74-0x0058CB7C 
		public Vector2 min { get; } // 0x0058CB7C-0x0058CBAC 
		public Vector2 max { get; } // 0x0058CBAC-0x0058CBE8 
		public float width { get; set; } // 0x0058CBE8-0x0058CBF0 0x0058CBF0-0x0058CBF8
		public float height { get; set; } // 0x0058CBF8-0x0058CC00 0x0058CC00-0x0058CC08
		public Vector2 size { get; } // 0x0058CC08-0x0058CC38 
		public float xMin { get; set; } // 0x0058CC38-0x0058CC40 0x0058CC40-0x0058CC5C
		public float yMin { get; set; } // 0x0058CC5C-0x0058CC64 0x0058CC64-0x0058CC80
		public float xMax { get; set; } // 0x0058CC80-0x0058CC90 0x0058CC90-0x0058CCA0
		public float yMax { get; set; } // 0x0058CCA0-0x0058CCB0 0x0058CCB0-0x0058CCC0
	
		// Constructors
		public Rect(float x, float y, float width, float height); // 0x0058CAF8-0x0058CB04
		public Rect(Vector2 position, Vector2 size); // 0x0058CB04-0x0058CB10
		public Rect(Rect source); // 0x0058CB10-0x0058CB1C
	
		// Methods
		public bool Contains(Vector2 point); // 0x0058CCC0-0x0058CD04
		public bool Contains(Vector3 point); // 0x0058CD04-0x0058CD48
		private static Rect OrderMinMax(Rect rect); // 0x00B9D478-0x00B9D584
		public bool Overlaps(Rect other); // 0x0058CD48-0x0058CD50
		public bool Overlaps(Rect other, bool allowInverse); // 0x0058CD50-0x0058CD5C
		public static bool operator !=(Rect lhs, Rect rhs); // 0x00B9D584-0x00B9D5B4
		public static bool operator ==(Rect lhs, Rect rhs); // 0x00B9D5B4-0x00B9DB7C
		public override int GetHashCode(); // 0x0058CD5C-0x0058CD64
		public override bool Equals(object other); // 0x0058CD64-0x0058CD6C
		public bool Equals(Rect other); // 0x0058CD6C-0x0058CD74
		public override string ToString(); // 0x0058CD74-0x0058CD7C
	}

	[UsedByNativeCode] // 0x004C22BC-0x004C22CC
	public struct RectInt : IEquatable<RectInt> // TypeDefIndex: 1769
	{
		// Fields
		private int m_XMin; // 0x00
		private int m_YMin; // 0x04
		private int m_Width; // 0x08
		private int m_Height; // 0x0C
	
		// Properties
		public int x { get; } // 0x0058CD7C-0x0058CD84 
		public int y { get; } // 0x0058CD84-0x0058CD8C 
		public int width { get; } // 0x0058CD8C-0x0058CD94 
		public int height { get; } // 0x0058CD94-0x0058CD9C 
	
		// Methods
		public override string ToString(); // 0x0058CD9C-0x0058CDA4
		public bool Equals(RectInt other); // 0x0058CDA4-0x0058CF2C
	}

	[Serializable]
	[NativeHeader] // 0x004C22CC-0x004C233C
	[NativeHeader] // 0x004C22CC-0x004C233C
	[UsedByNativeCode] // 0x004C22CC-0x004C233C
	public class RectOffset // TypeDefIndex: 1770
	{
		// Fields
		[NonSerialized]
		[VisibleToOtherModules] // 0x004C5FEC-0x004C6064
		internal IntPtr m_Ptr; // 0x10
		private readonly object m_SourceStyle; // 0x18
	
		// Properties
		[NativeProperty] // 0x004CDFC0-0x004CE000
		public int left { get; } // 0x00B9DF80-0x00B9DFC0 
		[NativeProperty] // 0x004CE000-0x004CE040
		public int right { get; } // 0x00B9DFC0-0x00B9E000 
		[NativeProperty] // 0x004CE040-0x004CE080
		public int top { get; } // 0x00B9E000-0x00B9E040 
		[NativeProperty] // 0x004CE080-0x004CE0C0
		public int bottom { get; } // 0x00B9E040-0x00B9E080 
		public int horizontal { get; } // 0x00B9E0C0-0x00B9E100 
		public int vertical { get; } // 0x00B9E100-0x00B9E140 
	
		// Constructors
		public RectOffset(); // 0x00B9DB7C-0x00B9DBC8
		[VisibleToOtherModules] // 0x004C9308-0x004C9380
		internal RectOffset(object sourceStyle, IntPtr source); // 0x00B9DBFC-0x00B9DC34
	
		// Methods
		~RectOffset(); // 0x00B9DC34-0x00B9DCAC
		public override string ToString(); // 0x00B9DD38-0x00B9DF80
		private void Destroy(); // 0x00B9DCAC-0x00B9DD38
		[ThreadAndSerializationSafe] // 0x004C9380-0x004C9390
		private static IntPtr InternalCreate(); // 0x00B9DBC8-0x00B9DBFC
		[ThreadAndSerializationSafe] // 0x004C9390-0x004C93A0
		private static void InternalDestroy(IntPtr ptr); // 0x00B9E080-0x00B9E0C0
		public Rect Remove(Rect rect); // 0x00B9E140-0x00B9E1A8
		private void Remove_Injected(ref Rect rect, out Rect ret); // 0x00B9E1A8-0x00B9E200
	}

	[NativeHeader] // 0x004C233C-0x004C23A0
	[StaticAccessor] // 0x004C233C-0x004C23A0
	public sealed class Gizmos // TypeDefIndex: 1771
	{
		// Properties
		public static Color color { set; } // 0x00ADF08C-0x00ADF0DC
	
		// Methods
		[NativeThrows] // 0x004C93A0-0x004C93B0
		public static void DrawLine(Vector3 from, Vector3 to); // 0x00ADEE80-0x00ADEEDC
		[NativeThrows] // 0x004C93B0-0x004C93C0
		public static void DrawWireSphere(Vector3 center, float radius); // 0x00ADEF2C-0x00ADEF8C
		[NativeThrows] // 0x004C93C0-0x004C93D0
		public static void DrawSphere(Vector3 center, float radius); // 0x00ADEFDC-0x00ADF03C
		public static void DrawRay(Vector3 from, Vector3 direction); // 0x00ADF11C-0x00ADF1E0
		private static void DrawLine_Injected(ref Vector3 from, ref Vector3 to); // 0x00ADEEDC-0x00ADEF2C
		private static void DrawWireSphere_Injected(ref Vector3 center, float radius); // 0x00ADEF8C-0x00ADEFDC
		private static void DrawSphere_Injected(ref Vector3 center, float radius); // 0x00ADF03C-0x00ADF08C
		private static void set_color_Injected(ref Color value); // 0x00ADF0DC-0x00ADF11C
	}

	internal static class BeforeRenderHelper // TypeDefIndex: 1772
	{
		// Fields
		private static List<OrderBlock> s_OrderBlocks; // 0x00
	
		// Nested types
		private struct OrderBlock // TypeDefIndex: 1773
		{
			// Fields
			internal int order; // 0x00
			internal UnityAction callback; // 0x08
		}
	
		// Constructors
		static BeforeRenderHelper(); // 0x00AD331C-0x00AD3390
	
		// Methods
		public static void Invoke(); // 0x00AD1B4C-0x00AD1CC8
	}

	[NativeHeader] // 0x004C23A0-0x004C23EC
	[UsedByNativeCode] // 0x004C23A0-0x004C23EC
	public class Display // TypeDefIndex: 1774
	{
		// Fields
		internal IntPtr nativeDisplay; // 0x10
		public static Display[] displays; // 0x00
		private static Display _mainDisplay; // 0x08
		[CompilerGenerated] // 0x004C6064-0x004C60A0
		[DebuggerBrowsable] // 0x004C6064-0x004C60A0
		private static DisplaysUpdatedDelegate onDisplaysUpdated; // 0x10
	
		// Properties
		public int renderingWidth { get; } // 0x00AD9554-0x00AD95F8 
		public int renderingHeight { get; } // 0x00AD9650-0x00AD96F4 
		public int systemWidth { get; } // 0x00AD96F4-0x00AD9798 
		public int systemHeight { get; } // 0x00AD97F0-0x00AD9894 
		public static Display main { get; } // 0x00AD99C8-0x00AD9A30 
	
		// Nested types
		public delegate void DisplaysUpdatedDelegate(); // TypeDefIndex: 1775; 0x00AD9C80-0x00AD9E9C
	
		// Constructors
		internal Display(); // 0x00AD94E8-0x00AD9528
		internal Display(IntPtr nativeDisplay); // 0x00AD9528-0x00AD9554
		static Display(); // 0x00AD9E9C-0x00AD9FB0
	
		// Methods
		public static Vector3 RelativeMouseAt(Vector3 inputMouseCoordinates); // 0x00AD9894-0x00AD9960
		[RequiredByNativeCode] // 0x004C93D0-0x004C93E0
		private static void RecreateDisplayList(IntPtr[] nativeDisplay); // 0x00AD9A30-0x00AD9BD8
		[RequiredByNativeCode] // 0x004C93E0-0x004C93F0
		private static void FireDisplaysUpdated(); // 0x00AD9BD8-0x00AD9C80
		[FreeFunction] // 0x004C93F0-0x004C9428
		private static void GetSystemExtImpl(IntPtr nativeDisplay, out int w, out int h); // 0x00AD9798-0x00AD97F0
		[FreeFunction] // 0x004C9428-0x004C9460
		private static void GetRenderingExtImpl(IntPtr nativeDisplay, out int w, out int h); // 0x00AD95F8-0x00AD9650
		[FreeFunction] // 0x004C9460-0x004C9498
		private static int RelativeMouseAtImpl(int x, int y, out int rx, out int ry); // 0x00AD9960-0x00AD99C8
	}

	[NativeHeader] // 0x004C23EC-0x004C2474
	[NativeHeader] // 0x004C23EC-0x004C2474
	[StaticAccessor] // 0x004C23EC-0x004C2474
	public sealed class Screen // TypeDefIndex: 1776
	{
		// Properties
		public static int width { [NativeMethod] /* 0x004C9498-0x004C94DC */ get; } // 0x00BA3A2C-0x00BA3A60 
		public static int height { [NativeMethod] /* 0x004C94DC-0x004C9520 */ get; } // 0x00BA3A60-0x00BA3A94 
		public static float dpi { [NativeName] /* 0x004C9520-0x004C9558 */ get; } // 0x00BA3A94-0x00BA3AC8 
	}

	[NativeHeader] // 0x004C2474-0x004C2564
	[NativeHeader] // 0x004C2474-0x004C2564
	[NativeHeader] // 0x004C2474-0x004C2564
	[NativeHeader] // 0x004C2474-0x004C2564
	[NativeHeader] // 0x004C2474-0x004C2564
	[NativeHeader] // 0x004C2474-0x004C2564
	public class Graphics // TypeDefIndex: 1777
	{
		// Fields
		internal static readonly int kMaxDrawMeshInstanceCount; // 0x00
	
		// Constructors
		static Graphics(); // 0x00ADF7D8-0x00ADF84C
	
		// Methods
		[FreeFunction] // 0x004C9558-0x004C9590
		private static int Internal_GetMaxDrawMeshInstanceCount(); // 0x00ADF604-0x00ADF638
		[FreeFunction] // 0x004C9590-0x004C95C8
		private static void Internal_BlitMaterial5(Texture source, RenderTexture dest, [NotNull] /* 0x004CD3C8-0x004CD3D8 */ Material mat, int pass, bool setRT); // 0x00ADF638-0x00ADF6A8
		public static void Blit(Texture source, RenderTexture dest, Material mat, [UnityEngine.Internal.DefaultValue] /* 0x004CD3D8-0x004CD410 */ int pass); // 0x00ADF6A8-0x00ADF758
		public static void Blit(Texture source, RenderTexture dest, Material mat); // 0x00ADF758-0x00ADF7D8
	}

	[NativeHeader] // 0x004C2564-0x004C2634
	[NativeHeader] // 0x004C2564-0x004C2634
	[NativeHeader] // 0x004C2564-0x004C2634
	[NativeHeader] // 0x004C2564-0x004C2634
	[StaticAccessor] // 0x004C2564-0x004C2634
	public sealed class GL // TypeDefIndex: 1778
	{
		// Methods
		[NativeName] // 0x004C95C8-0x004C9600
		public static void Vertex3(float x, float y, float z); // 0x00ADE4C8-0x00ADE524
		[NativeName] // 0x004C9600-0x004C9638
		private static void ImmediateColor(float r, float g, float b, float a); // 0x00ADE524-0x00ADE588
		public static void Color(Color c); // 0x00ADE588-0x00ADE5EC
		[FreeFunction] // 0x004C9638-0x004C967C
		public static void Begin(int mode); // 0x00ADE5EC-0x00ADE62C
		[FreeFunction] // 0x004C967C-0x004C96B4
		public static void End(); // 0x00ADE62C-0x00ADE660
	}

	[NativeHeader] // 0x004C2634-0x004C2680
	[UsedByNativeCode] // 0x004C2634-0x004C2680
	public sealed class LightmapData // TypeDefIndex: 1779
	{
		// Fields
		internal Texture2D m_Light; // 0x10
		internal Texture2D m_Dir; // 0x18
		internal Texture2D m_ShadowMask; // 0x20
	
		// Properties
		public Texture2D lightmapColor { set; } // 0x00ADFB14-0x00ADFB1C
		public Texture2D lightmapDir { set; } // 0x00ADFB1C-0x00ADFB24
	
		// Constructors
		public LightmapData(); // 0x00ADFB0C-0x00ADFB14
	}

	[NativeHeader] // 0x004C2680-0x004C26E0
	[StaticAccessor] // 0x004C2680-0x004C26E0
	public sealed class LightmapSettings : UnityEngine.Object // TypeDefIndex: 1780
	{
		// Properties
		public static LightmapData[] lightmaps { [FreeFunction] /* 0x004C96B4-0x004C96C4 */ set; } // 0x00ADFB24-0x00ADFB64
		public static LightmapsMode lightmapsMode { [FreeFunction] /* 0x004C96C4-0x004C96F8 */ set; } // 0x00ADFB64-0x00ADFBA4
	}

	[RequiredByNativeCode] // 0x004C26E0-0x004C26F0
	public struct Resolution // TypeDefIndex: 1781
	{
		// Fields
		private int m_Width; // 0x00
		private int m_Height; // 0x04
		private int m_RefreshRate; // 0x08
	
		// Methods
		public override string ToString(); // 0x0058D1AC-0x0058D1F8
	}

	[NativeHeader] // 0x004C26F0-0x004C2778
	[NativeHeader] // 0x004C26F0-0x004C2778
	[StaticAccessor] // 0x004C26F0-0x004C2778
	public sealed class QualitySettings : UnityEngine.Object // TypeDefIndex: 1782
	{
		// Properties
		public static ColorSpace activeColorSpace { [StaticAccessor] /* 0x004C96F8-0x004C975C */ [NativeName] /* 0x004C96F8-0x004C975C */ get; } // 0x00B9B99C-0x00B9B9DC 
	}

	[NativeHeader] // 0x004C2778-0x004C27D8
	[NativeHeader] // 0x004C2778-0x004C27D8
	public sealed class TrailRenderer : Renderer // TypeDefIndex: 1783
	{
	}

	[NativeHeader] // 0x004C27D8-0x004C2894
	[NativeHeader] // 0x004C27D8-0x004C2894
	[RequireComponent] // 0x004C27D8-0x004C2894
	[UsedByNativeCode] // 0x004C27D8-0x004C2894
	public class Renderer : Component // TypeDefIndex: 1784
	{
		// Properties
		public Bounds bounds { [FreeFunction] /* 0x004C975C-0x004C97A0 */ get; } // 0x00BA0D44-0x00BA0DB4 
		public bool enabled { get; set; } // 0x00BA0FCC-0x00BA100C 0x00BA100C-0x00BA105C
		public ShadowCastingMode shadowCastingMode { set; } // 0x00BA105C-0x00BA10AC
		public bool receiveShadows { set; } // 0x00BA10AC-0x00BA10FC
		public int sortingLayerID { get; } // 0x00BA10FC-0x00BA113C 
		public int sortingOrder { get; set; } // 0x00BA113C-0x00BA117C 0x00BA117C-0x00BA11CC
		public int lightmapIndex { get; set; } // 0x00BA1338-0x00BA137C 0x00BA137C-0x00BA13D0
		public Vector4 lightmapScaleOffset { get; set; } // 0x00BA13D0-0x00BA13D8 0x00BA13D8-0x00BA13DC
		public Material[] materials { set; } // 0x00BA141C-0x00BA146C
		public Material material { get; set; } // 0x00BA146C-0x00BA14AC 0x00BA14AC-0x00BA14FC
		public Material sharedMaterial { get; set; } // 0x00BA14FC-0x00BA153C 0x00BA153C-0x00BA158C
		public Material[] sharedMaterials { get; set; } // 0x00BA158C-0x00BA15CC 0x00BA15CC-0x00BA1644
	
		// Methods
		[FreeFunction] // 0x004C97A0-0x004C97E4
		private void SetStaticLightmapST(Vector4 st); // 0x00BA0E04-0x00BA0E5C
		[FreeFunction] // 0x004C97E4-0x004C9828
		private Material GetMaterial(); // 0x00BA0EAC-0x00BA0EEC
		[FreeFunction] // 0x004C9828-0x004C986C
		private Material GetSharedMaterial(); // 0x00BA0EEC-0x00BA0F2C
		[FreeFunction] // 0x004C986C-0x004C98B0
		private void SetMaterial(Material m); // 0x00BA0F2C-0x00BA0F7C
		[FreeFunction] // 0x004C98B0-0x004C98F4
		private void SetMaterialArray([NotNull] /* 0x004CD410-0x004CD420 */ Material[] m); // 0x00BA0F7C-0x00BA0FCC
		[NativeName] // 0x004C98F4-0x004C992C
		private int GetLightmapIndex(LightmapType lt); // 0x00BA11CC-0x00BA121C
		[NativeName] // 0x004C992C-0x004C9964
		private void SetLightmapIndex(int index, LightmapType lt); // 0x00BA121C-0x00BA1274
		[NativeName] // 0x004C9964-0x004C999C
		private Vector4 GetLightmapST(LightmapType lt); // 0x00BA1274-0x00BA12E0
		[NativeName] // 0x004C999C-0x004C99D4
		private Material[] GetSharedMaterialArray(); // 0x00BA13DC-0x00BA141C
		private void get_bounds_Injected(out Bounds ret); // 0x00BA0DB4-0x00BA0E04
		private void SetStaticLightmapST_Injected(ref Vector4 st); // 0x00BA0E5C-0x00BA0EAC
		private void GetLightmapST_Injected(LightmapType lt, out Vector4 ret); // 0x00BA12E0-0x00BA1338
	}

	[NativeHeader] // 0x004C2894-0x004C2940
	[NativeHeader] // 0x004C2894-0x004C2940
	[NativeHeader] // 0x004C2894-0x004C2940
	[StaticAccessor] // 0x004C2894-0x004C2940
	public sealed class RenderSettings : UnityEngine.Object // TypeDefIndex: 1785
	{
		// Properties
		public static Color fogColor { set; } // 0x00B9F618-0x00B9F668
	
		// Methods
		private static void set_fogColor_Injected(ref Color value); // 0x00B9F668-0x00B9F6A8
	}

	[NativeHeader] // 0x004C2940-0x004C2A30
	[NativeHeader] // 0x004C2940-0x004C2A30
	[NativeHeader] // 0x004C2940-0x004C2A30
	[NativeHeader] // 0x004C2940-0x004C2A30
	[NativeHeader] // 0x004C2940-0x004C2A30
	[NativeHeader] // 0x004C2940-0x004C2A30
	public sealed class Shader : UnityEngine.Object // TypeDefIndex: 1786
	{
		// Constructors
		private Shader(); // 0x00BA3F18-0x00BA3F80
	
		// Methods
		[FreeFunction] // 0x004C99D4-0x004C9A0C
		public static Shader Find(string name); // 0x00BA3F80-0x00BA3FC0
		[FreeFunction] // 0x004C9A0C-0x004C9A50
		public static int PropertyToID(string name); // 0x00BA3FC0-0x00BA4000
		[FreeFunction] // 0x004C9A50-0x004C9A88
		private static void SetGlobalFloatImpl(int name, float value); // 0x00BA4000-0x00BA4050
		[FreeFunction] // 0x004C9A88-0x004C9AC0
		private static void SetGlobalVectorImpl(int name, Vector4 value); // 0x00BA4050-0x00BA40A8
		public static void SetGlobalFloat(string name, float value); // 0x00BA40F8-0x00BA4174
		public static void SetGlobalFloat(int nameID, float value); // 0x00BA4174-0x00BA41C4
		public static void SetGlobalColor(int nameID, Color value); // 0x00BA41C4-0x00BA41EC
		private static void SetGlobalVectorImpl_Injected(int name, ref Vector4 value); // 0x00BA40A8-0x00BA40F8
	}

	[NativeHeader] // 0x004C2A30-0x004C2A90
	[NativeHeader] // 0x004C2A30-0x004C2A90
	public class Material : UnityEngine.Object // TypeDefIndex: 1787
	{
		// Properties
		public Shader shader { get; set; } // 0x00AE0A0C-0x00AE0A4C 0x00AE0A4C-0x00AE0A9C
		public Color color { get; set; } // 0x00AE0A9C-0x00AE0AF8 0x00AE0B28-0x00AE0BB4
		public Texture mainTexture { get; set; } // 0x00AE0C14-0x00AE0C64 0x00AE0CC0-0x00AE0D20
		public Vector2 mainTextureOffset { get; set; } // 0x00AE0D84-0x00AE0DE0 0x00AE0E10-0x00AE0E84
		public Vector2 mainTextureScale { set; } // 0x00AE0ECC-0x00AE0F40
		public int renderQueue { [NativeName] /* 0x004C9C04-0x004C9C3C */ get; [NativeName] /* 0x004C9C3C-0x004C9C74 */ set; } // 0x00AE1034-0x00AE1074 0x00AE1074-0x00AE10C4
		public string[] shaderKeywords { get; } // 0x00AE1244-0x00AE1284 
	
		// Constructors
		public Material(Shader shader); // 0x00AE075C-0x00AE07FC
		[RequiredByNativeCode] // 0x004C9AC0-0x004C9AD0
		public Material(Material source); // 0x00AE084C-0x00AE08EC
		[EditorBrowsable] // 0x004C9AD0-0x004C9B24
		[Obsolete] // 0x004C9AD0-0x004C9B24
		public Material(string contents); // 0x00AE093C-0x00AE09CC
	
		// Methods
		[FreeFunction] // 0x004C9B24-0x004C9B5C
		private static void CreateWithShader([Writable] /* 0x004CD420-0x004CD430 */ Material self, [NotNull] /* 0x004CD430-0x004CD440 */ Shader shader); // 0x00AE07FC-0x00AE084C
		[FreeFunction] // 0x004C9B5C-0x004C9B94
		private static void CreateWithMaterial([Writable] /* 0x004CD440-0x004CD450 */ Material self, [NotNull] /* 0x004CD450-0x004CD460 */ Material source); // 0x00AE08EC-0x00AE093C
		[FreeFunction] // 0x004C9B94-0x004C9BCC
		private static void CreateWithString([Writable] /* 0x004CD460-0x004CD470 */ Material self); // 0x00AE09CC-0x00AE0A0C
		[NativeName] // 0x004C9BCC-0x004C9C04
		public bool HasProperty(int nameID); // 0x00AE0F88-0x00AE0FD8
		public bool HasProperty(string name); // 0x00AE0FD8-0x00AE1034
		public void EnableKeyword(string keyword); // 0x00AE10C4-0x00AE1114
		public void DisableKeyword(string keyword); // 0x00AE1114-0x00AE1164
		[FreeFunction] // 0x004C9C74-0x004C9CB8
		public bool SetPass(int pass); // 0x00AE1164-0x00AE11B4
		[FreeFunction] // 0x004C9CB8-0x004C9CFC
		public void CopyPropertiesFromMaterial(Material mat); // 0x00AE11B4-0x00AE1204
		[FreeFunction] // 0x004C9CFC-0x004C9D40
		private string[] GetShaderKeywords(); // 0x00AE1204-0x00AE1244
		[NativeName] // 0x004C9D40-0x004C9D78
		private void SetFloatImpl(int name, float value); // 0x00AE1284-0x00AE12E4
		[NativeName] // 0x004C9D78-0x004C9DB0
		private void SetColorImpl(int name, Color value); // 0x00AE12E4-0x00AE134C
		[NativeName] // 0x004C9DB0-0x004C9DE8
		private void SetTextureImpl(int name, Texture value); // 0x00AE13A4-0x00AE13FC
		[NativeName] // 0x004C9DE8-0x004C9E20
		private float GetFloatImpl(int name); // 0x00AE13FC-0x00AE144C
		[NativeName] // 0x004C9E20-0x004C9E58
		private Color GetColorImpl(int name); // 0x00AE144C-0x00AE14B8
		[NativeName] // 0x004C9E58-0x004C9E90
		private Texture GetTextureImpl(int name); // 0x00AE1510-0x00AE1560
		[NativeName] // 0x004C9E90-0x004C9EC8
		private Vector4 GetTextureScaleAndOffsetImpl(int name); // 0x00AE1560-0x00AE15CC
		[NativeName] // 0x004C9EC8-0x004C9F00
		private void SetTextureOffsetImpl(int name, Vector2 offset); // 0x00AE1624-0x00AE1680
		[NativeName] // 0x004C9F00-0x004C9F38
		private void SetTextureScaleImpl(int name, Vector2 scale); // 0x00AE16D8-0x00AE1734
		public void SetFloat(string name, float value); // 0x00AE178C-0x00AE17F8
		public void SetFloat(int nameID, float value); // 0x00AE17F8-0x00AE1858
		public void SetInt(string name, int value); // 0x00AE1858-0x00AE18C8
		public void SetColor(string name, Color value); // 0x00AE0BB4-0x00AE0C14
		public void SetColor(int nameID, Color value); // 0x00AE18C8-0x00AE18CC
		public void SetVector(string name, Vector4 value); // 0x00AE18CC-0x00AE192C
		public void SetVector(int nameID, Vector4 value); // 0x00AE192C-0x00AE1930
		public void SetTexture(string name, Texture value); // 0x00AE0D20-0x00AE0D84
		public void SetTexture(int nameID, Texture value); // 0x00AE1930-0x00AE1988
		public float GetFloat(string name); // 0x00AE1988-0x00AE19E4
		public Color GetColor(string name); // 0x00AE0AF8-0x00AE0B28
		public Color GetColor(int nameID); // 0x00AE19E4-0x00AE19E8
		public Texture GetTexture(string name); // 0x00AE0C64-0x00AE0CC0
		public void SetTextureOffset(string name, Vector2 value); // 0x00AE0E84-0x00AE0ECC
		public void SetTextureScale(string name, Vector2 value); // 0x00AE0F40-0x00AE0F88
		public Vector2 GetTextureOffset(string name); // 0x00AE0DE0-0x00AE0E10
		public Vector2 GetTextureOffset(int nameID); // 0x00AE19E8-0x00AE1A20
		public Vector2 GetTextureScale(string name); // 0x00AE1A20-0x00AE1A50
		public Vector2 GetTextureScale(int nameID); // 0x00AE1A50-0x00AE1A80
		private void SetColorImpl_Injected(int name, ref Color value); // 0x00AE134C-0x00AE13A4
		private void GetColorImpl_Injected(int name, out Color ret); // 0x00AE14B8-0x00AE1510
		private void GetTextureScaleAndOffsetImpl_Injected(int name, out Vector4 ret); // 0x00AE15CC-0x00AE1624
		private void SetTextureOffsetImpl_Injected(int name, ref Vector2 offset); // 0x00AE1680-0x00AE16D8
		private void SetTextureScaleImpl_Injected(int name, ref Vector2 scale); // 0x00AE1734-0x00AE178C
	}

	[NativeHeader] // 0x004C2A90-0x004C2AC8
	public sealed class Projector : Behaviour // TypeDefIndex: 1788
	{
	}

	[NativeHeader] // 0x004C2AC8-0x004C2B9C
	[NativeHeader] // 0x004C2AC8-0x004C2B9C
	[RequireComponent] // 0x004C2AC8-0x004C2B9C
	[RequireComponent] // 0x004C2AC8-0x004C2B9C
	public sealed class Light : Behaviour // TypeDefIndex: 1789
	{
		// Fields
		private int m_BakedIndex; // 0x18
	
		// Properties
		[NativeProperty] // 0x004CE0C0-0x004CE0F8
		public LightType type { get; } // 0x00ADD978-0x00ADD9B8 
		public float spotAngle { get; } // 0x00ADC6E0-0x00ADC720 
		public Color color { get; set; } // 0x00ADC440-0x00ADC49C 0x00ADFA64-0x00ADFABC
		public float intensity { get; } // 0x00ADC49C-0x00ADC4DC 
		public float bounceIntensity { get; } // 0x00ADC4DC-0x00ADC51C 
		public float range { get; } // 0x00ADCA04-0x00ADCA44 
		public LightShadows shadows { [NativeMethod] /* 0x004C9F38-0x004C9F70 */ get; } // 0x00ADC858-0x00ADC898 
	
		// Methods
		private void get_color_Injected(out Color ret); // 0x00ADFA14-0x00ADFA64
		private void set_color_Injected(ref Color value); // 0x00ADFABC-0x00ADFB0C
	}

	[NativeHeader] // 0x004C2B9C-0x004C2C24
	[RequireComponent] // 0x004C2B9C-0x004C2C24
	public sealed class MeshFilter : Component // TypeDefIndex: 1790
	{
		// Properties
		public Mesh mesh { [NativeName] /* 0x004C9F80-0x004C9FB8 */ get; [NativeName] /* 0x004C9FB8-0x004C9FF0 */ set; } // 0x00AE59B4-0x00AE59F4 0x00AE59F4-0x00AE5A44
	
		// Methods
		[RequiredByNativeCode] // 0x004C9F70-0x004C9F80
		private void DontStripMeshFilter(); // 0x00AE59B0-0x00AE59B4
	}

	public enum TransparencySortMode // TypeDefIndex: 1791
	{
		Default = 0,
		Perspective = 1,
		Orthographic = 2,
		CustomAxis = 3
	}

	public enum LightType // TypeDefIndex: 1792
	{
		Spot = 0,
		Directional = 1,
		Point = 2,
		Area = 3,
		Rectangle = 3,
		Disc = 4
	}

	public enum LightShadows // TypeDefIndex: 1793
	{
		None = 0,
		Hard = 1,
		Soft = 2
	}

	[Flags] // 0x004C2C24-0x004C2C34
	public enum LightmapBakeType // TypeDefIndex: 1794
	{
		Mixed = 1,
		Baked = 2,
		Realtime = 4
	}

	public enum MixedLightingMode // TypeDefIndex: 1795
	{
		IndirectOnly = 0,
		Subtractive = 1,
		Shadowmask = 2
	}

	public enum CameraClearFlags // TypeDefIndex: 1796
	{
		Skybox = 1,
		Color = 2,
		SolidColor = 2,
		Depth = 3,
		Nothing = 4
	}

	public enum MeshTopology // TypeDefIndex: 1797
	{
		Triangles = 0,
		Quads = 2,
		Lines = 3,
		LineStrip = 4,
		Points = 5
	}

	public enum ColorSpace // TypeDefIndex: 1798
	{
		Uninitialized = -1,
		Gamma = 0,
		Linear = 1
	}

	public enum FilterMode // TypeDefIndex: 1799
	{
		Point = 0,
		Bilinear = 1,
		Trilinear = 2
	}

	public enum TextureWrapMode // TypeDefIndex: 1800
	{
		Repeat = 0,
		Clamp = 1,
		Mirror = 2,
		MirrorOnce = 3
	}

	public enum TextureFormat // TypeDefIndex: 1801
	{
		Alpha8 = 1,
		ARGB4444 = 2,
		RGB24 = 3,
		RGBA32 = 4,
		ARGB32 = 5,
		RGB565 = 7,
		R16 = 9,
		DXT1 = 10,
		DXT5 = 12,
		RGBA4444 = 13,
		BGRA32 = 14,
		RHalf = 15,
		RGHalf = 16,
		RGBAHalf = 17,
		RFloat = 18,
		RGFloat = 19,
		RGBAFloat = 20,
		YUY2 = 21,
		RGB9e5Float = 22,
		BC6H = 24,
		BC7 = 25,
		BC4 = 26,
		BC5 = 27,
		DXT1Crunched = 28,
		DXT5Crunched = 29,
		PVRTC_RGB2 = 30,
		PVRTC_RGBA2 = 31,
		PVRTC_RGB4 = 32,
		PVRTC_RGBA4 = 33,
		ETC_RGB4 = 34,
		EAC_R = 41,
		EAC_R_SIGNED = 42,
		EAC_RG = 43,
		EAC_RG_SIGNED = 44,
		ETC2_RGB = 45,
		ETC2_RGBA1 = 46,
		ETC2_RGBA8 = 47,
		ASTC_4x4 = 48,
		ASTC_RGB_4x4 = 48,
		ASTC_5x5 = 49,
		ASTC_RGB_5x5 = 49,
		ASTC_6x6 = 50,
		ASTC_RGB_6x6 = 50,
		ASTC_8x8 = 51,
		ASTC_RGB_8x8 = 51,
		ASTC_10x10 = 52,
		ASTC_RGB_10x10 = 52,
		ASTC_12x12 = 53,
		ASTC_RGB_12x12 = 53,
		ASTC_RGBA_4x4 = 54,
		ASTC_RGBA_5x5 = 55,
		ASTC_RGBA_6x6 = 56,
		ASTC_RGBA_8x8 = 57,
		ASTC_RGBA_10x10 = 58,
		ASTC_RGBA_12x12 = 59,
		ETC_RGB4_3DS = 60,
		ETC_RGBA8_3DS = 61,
		RG16 = 62,
		R8 = 63,
		ETC_RGB4Crunched = 64,
		ETC2_RGBA8Crunched = 65,
		ASTC_HDR_4x4 = 66,
		ASTC_HDR_5x5 = 67,
		ASTC_HDR_6x6 = 68,
		ASTC_HDR_8x8 = 69,
		ASTC_HDR_10x10 = 70,
		ASTC_HDR_12x12 = 71
	}

	public enum RenderTextureFormat // TypeDefIndex: 1802
	{
		ARGB32 = 0,
		Depth = 1,
		ARGBHalf = 2,
		Shadowmap = 3,
		RGB565 = 4,
		ARGB4444 = 5,
		ARGB1555 = 6,
		Default = 7,
		ARGB2101010 = 8,
		DefaultHDR = 9,
		ARGB64 = 10,
		ARGBFloat = 11,
		RGFloat = 12,
		RGHalf = 13,
		RFloat = 14,
		RHalf = 15,
		R8 = 16,
		ARGBInt = 17,
		RGInt = 18,
		RInt = 19,
		BGRA32 = 20,
		RGB111110Float = 22,
		RG32 = 23,
		RGBAUShort = 24,
		RG16 = 25,
		BGRA10101010_XR = 26,
		BGR101010_XR = 27,
		R16 = 28
	}

	public enum VRTextureUsage // TypeDefIndex: 1803
	{
		None = 0,
		OneEye = 1,
		TwoEyes = 2,
		DeviceSpecific = 3
	}

	[Flags] // 0x004C2C34-0x004C2C44
	public enum RenderTextureCreationFlags // TypeDefIndex: 1804
	{
		MipMap = 1,
		AutoGenerateMips = 2,
		SRGB = 4,
		EyeTexture = 8,
		EnableRandomWrite = 16,
		CreatedFromScript = 32,
		AllowVerticalFlip = 128,
		NoResolvedColorSurface = 256,
		DynamicallyScalable = 1024,
		BindMS = 2048
	}

	public enum RenderTextureReadWrite // TypeDefIndex: 1805
	{
		Default = 0,
		Linear = 1,
		sRGB = 2
	}

	[Flags] // 0x004C2C44-0x004C2C54
	public enum RenderTextureMemoryless // TypeDefIndex: 1806
	{
		None = 0,
		Color = 1,
		Depth = 2,
		MSAA = 4
	}
}

namespace UnityEngine.Experimental.Rendering
{
	[Flags] // 0x004C2C54-0x004C2C64
	public enum TextureCreationFlags // TypeDefIndex: 1807
	{
		None = 0,
		MipChain = 1,
		Crunch = 64
	}

	public enum FormatUsage // TypeDefIndex: 1808
	{
		Sample = 0,
		Linear = 1,
		Sparse = 2,
		Render = 4,
		Blend = 5,
		GetPixels = 6,
		SetPixels = 7,
		SetPixels32 = 8,
		ReadPixels = 9,
		LoadStore = 10,
		MSAA2x = 11,
		MSAA4x = 12,
		MSAA8x = 13
	}

	public enum DefaultFormat // TypeDefIndex: 1809
	{
		LDR = 0,
		HDR = 1
	}

	public enum GraphicsFormat // TypeDefIndex: 1810
	{
		None = 0,
		R8_SRGB = 1,
		R8G8_SRGB = 2,
		R8G8B8_SRGB = 3,
		R8G8B8A8_SRGB = 4,
		R8_UNorm = 5,
		R8G8_UNorm = 6,
		R8G8B8_UNorm = 7,
		R8G8B8A8_UNorm = 8,
		R8_SNorm = 9,
		R8G8_SNorm = 10,
		R8G8B8_SNorm = 11,
		R8G8B8A8_SNorm = 12,
		R8_UInt = 13,
		R8G8_UInt = 14,
		R8G8B8_UInt = 15,
		R8G8B8A8_UInt = 16,
		R8_SInt = 17,
		R8G8_SInt = 18,
		R8G8B8_SInt = 19,
		R8G8B8A8_SInt = 20,
		R16_UNorm = 21,
		R16G16_UNorm = 22,
		R16G16B16_UNorm = 23,
		R16G16B16A16_UNorm = 24,
		R16_SNorm = 25,
		R16G16_SNorm = 26,
		R16G16B16_SNorm = 27,
		R16G16B16A16_SNorm = 28,
		R16_UInt = 29,
		R16G16_UInt = 30,
		R16G16B16_UInt = 31,
		R16G16B16A16_UInt = 32,
		R16_SInt = 33,
		R16G16_SInt = 34,
		R16G16B16_SInt = 35,
		R16G16B16A16_SInt = 36,
		R32_UInt = 37,
		R32G32_UInt = 38,
		R32G32B32_UInt = 39,
		R32G32B32A32_UInt = 40,
		R32_SInt = 41,
		R32G32_SInt = 42,
		R32G32B32_SInt = 43,
		R32G32B32A32_SInt = 44,
		R16_SFloat = 45,
		R16G16_SFloat = 46,
		R16G16B16_SFloat = 47,
		R16G16B16A16_SFloat = 48,
		R32_SFloat = 49,
		R32G32_SFloat = 50,
		R32G32B32_SFloat = 51,
		R32G32B32A32_SFloat = 52,
		B8G8R8_SRGB = 56,
		B8G8R8A8_SRGB = 57,
		B8G8R8_UNorm = 58,
		B8G8R8A8_UNorm = 59,
		B8G8R8_SNorm = 60,
		B8G8R8A8_SNorm = 61,
		B8G8R8_UInt = 62,
		B8G8R8A8_UInt = 63,
		B8G8R8_SInt = 64,
		B8G8R8A8_SInt = 65,
		R4G4B4A4_UNormPack16 = 66,
		B4G4R4A4_UNormPack16 = 67,
		R5G6B5_UNormPack16 = 68,
		B5G6R5_UNormPack16 = 69,
		R5G5B5A1_UNormPack16 = 70,
		B5G5R5A1_UNormPack16 = 71,
		A1R5G5B5_UNormPack16 = 72,
		E5B9G9R9_UFloatPack32 = 73,
		B10G11R11_UFloatPack32 = 74,
		A2B10G10R10_UNormPack32 = 75,
		A2B10G10R10_UIntPack32 = 76,
		A2B10G10R10_SIntPack32 = 77,
		A2R10G10B10_UNormPack32 = 78,
		A2R10G10B10_UIntPack32 = 79,
		A2R10G10B10_SIntPack32 = 80,
		A2R10G10B10_XRSRGBPack32 = 81,
		A2R10G10B10_XRUNormPack32 = 82,
		R10G10B10_XRSRGBPack32 = 83,
		R10G10B10_XRUNormPack32 = 84,
		A10R10G10B10_XRSRGBPack32 = 85,
		A10R10G10B10_XRUNormPack32 = 86,
		RGB_DXT1_SRGB = 96,
		RGBA_DXT1_SRGB = 96,
		RGB_DXT1_UNorm = 97,
		RGBA_DXT1_UNorm = 97,
		RGBA_DXT3_SRGB = 98,
		RGBA_DXT3_UNorm = 99,
		RGBA_DXT5_SRGB = 100,
		RGBA_DXT5_UNorm = 101,
		R_BC4_UNorm = 102,
		R_BC4_SNorm = 103,
		RG_BC5_UNorm = 104,
		RG_BC5_SNorm = 105,
		RGB_BC6H_UFloat = 106,
		RGB_BC6H_SFloat = 107,
		RGBA_BC7_SRGB = 108,
		RGBA_BC7_UNorm = 109,
		RGB_PVRTC_2Bpp_SRGB = 110,
		RGB_PVRTC_2Bpp_UNorm = 111,
		RGB_PVRTC_4Bpp_SRGB = 112,
		RGB_PVRTC_4Bpp_UNorm = 113,
		RGBA_PVRTC_2Bpp_SRGB = 114,
		RGBA_PVRTC_2Bpp_UNorm = 115,
		RGBA_PVRTC_4Bpp_SRGB = 116,
		RGBA_PVRTC_4Bpp_UNorm = 117,
		RGB_ETC_UNorm = 118,
		RGB_ETC2_SRGB = 119,
		RGB_ETC2_UNorm = 120,
		RGB_A1_ETC2_SRGB = 121,
		RGB_A1_ETC2_UNorm = 122,
		RGBA_ETC2_SRGB = 123,
		RGBA_ETC2_UNorm = 124,
		R_EAC_UNorm = 125,
		R_EAC_SNorm = 126,
		RG_EAC_UNorm = 127,
		RG_EAC_SNorm = 128,
		RGBA_ASTC4X4_SRGB = 129,
		RGBA_ASTC4X4_UNorm = 130,
		RGBA_ASTC5X5_SRGB = 131,
		RGBA_ASTC5X5_UNorm = 132,
		RGBA_ASTC6X6_SRGB = 133,
		RGBA_ASTC6X6_UNorm = 134,
		RGBA_ASTC8X8_SRGB = 135,
		RGBA_ASTC8X8_UNorm = 136,
		RGBA_ASTC10X10_SRGB = 137,
		RGBA_ASTC10X10_UNorm = 138,
		RGBA_ASTC12X12_SRGB = 139,
		RGBA_ASTC12X12_UNorm = 140
	}
}

namespace UnityEngine
{
	[Flags] // 0x004C2C64-0x004C2C74
	public enum LightmapsMode // TypeDefIndex: 1811
	{
		NonDirectional = 0,
		CombinedDirectional = 1
	}
}

namespace UnityEngine.Rendering
{
	[MovedFrom] // 0x004C2C74-0x004C2CAC
	public enum VertexAttribute // TypeDefIndex: 1812
	{
		Position = 0,
		Normal = 1,
		Tangent = 2,
		Color = 3,
		TexCoord0 = 4,
		TexCoord1 = 5,
		TexCoord2 = 6,
		TexCoord3 = 7,
		TexCoord4 = 8,
		TexCoord5 = 9,
		TexCoord6 = 10,
		TexCoord7 = 11,
		BlendWeight = 12,
		BlendIndices = 13
	}

	public enum CompareFunction // TypeDefIndex: 1813
	{
		Disabled = 0,
		Never = 1,
		Less = 2,
		Equal = 3,
		LessEqual = 4,
		Greater = 5,
		NotEqual = 6,
		GreaterEqual = 7,
		Always = 8
	}

	[Flags] // 0x004C2CAC-0x004C2CBC
	public enum ColorWriteMask // TypeDefIndex: 1814
	{
		Alpha = 1,
		Blue = 2,
		Green = 4,
		Red = 8,
		All = 15
	}

	public enum StencilOp // TypeDefIndex: 1815
	{
		Keep = 0,
		Zero = 1,
		Replace = 2,
		IncrementSaturate = 3,
		DecrementSaturate = 4,
		Invert = 5,
		IncrementWrap = 6,
		DecrementWrap = 7
	}

	public enum ShadowCastingMode // TypeDefIndex: 1816
	{
		Off = 0,
		On = 1,
		TwoSided = 2,
		ShadowsOnly = 3
	}

	public enum ShadowSamplingMode // TypeDefIndex: 1817
	{
		CompareDepths = 0,
		RawDepth = 1,
		None = 2
	}

	public enum TextureDimension // TypeDefIndex: 1818
	{
		Unknown = -1,
		None = 0,
		Any = 1,
		Tex2D = 2,
		Tex3D = 3,
		Cube = 4,
		Tex2DArray = 5,
		CubeArray = 6
	}
}

namespace UnityEngineInternal
{
	internal enum LightmapType // TypeDefIndex: 1819
	{
		NoLightmap = -1,
		StaticLightmap = 0,
		DynamicLightmap = 1
	}
}

namespace UnityEngine.Experimental.Rendering
{
	[NativeHeader] // 0x004C2CBC-0x004C2D1C
	[NativeHeader] // 0x004C2CBC-0x004C2D1C
	public class GraphicsFormatUtility // TypeDefIndex: 1820
	{
		// Methods
		public static GraphicsFormat GetGraphicsFormat(TextureFormat format, bool isSRGB); // 0x00AD768C-0x00AD76DC
		[FreeFunction] // 0x004C9FF0-0x004CA000
		private static GraphicsFormat GetGraphicsFormat_Native_TextureFormat(TextureFormat format, bool isSRGB); // 0x00ADDF7C-0x00ADDFCC
		public static GraphicsFormat GetGraphicsFormat(RenderTextureFormat format, bool isSRGB); // 0x00ADDFCC-0x00ADE01C
		[FreeFunction] // 0x004CA000-0x004CA010
		private static GraphicsFormat GetGraphicsFormat_Native_RenderTextureFormat(RenderTextureFormat format, bool isSRGB); // 0x00ADE01C-0x00ADE06C
		public static GraphicsFormat GetGraphicsFormat(RenderTextureFormat format, RenderTextureReadWrite readWrite); // 0x00ADE06C-0x00ADE0DC
		[FreeFunction] // 0x004CA010-0x004CA020
		public static bool IsSRGBFormat(GraphicsFormat format); // 0x00ADE0DC-0x00ADE11C
		[FreeFunction] // 0x004CA020-0x004CA058
		internal static bool IsCompressedTextureFormat(TextureFormat format); // 0x00ADE11C-0x00ADE15C
		public static bool IsCrunchFormat(TextureFormat format); // 0x00AD76DC-0x00AD7708
	}
}

namespace UnityEngine
{
	[NativeHeader] // 0x004C2D1C-0x004C2D54
	public class SkinnedMeshRenderer : Renderer // TypeDefIndex: 1821
	{
		// Properties
		public Transform rootBone { set; } // 0x00BA41EC-0x00BA423C
		public Transform[] bones { get; set; } // 0x00BA423C-0x00BA427C 0x00BA427C-0x00BA42CC
	}

	[NativeHeader] // 0x004C2D54-0x004C2D8C
	public class MeshRenderer : Renderer // TypeDefIndex: 1822
	{
		// Methods
		[RequiredByNativeCode] // 0x004CA058-0x004CA068
		private void DontStripMeshRenderer(); // 0x00AE5A44-0x00AE5A48
	}
}

namespace UnityEngine.Rendering
{
	[NativeHeader] // 0x004C2D8C-0x004C2DF0
	[StaticAccessor] // 0x004C2D8C-0x004C2DF0
	public sealed class GraphicsSettings : UnityEngine.Object // TypeDefIndex: 1823
	{
		// Properties
		public static bool lightsUseLinearIntensity { get; } // 0x00BA1DF0-0x00BA1FC0 
	}
}

namespace UnityEngine
{
	[NativeHeader] // 0x004C2DF0-0x004C2E3C
	[RequiredByNativeCode] // 0x004C2DF0-0x004C2E3C
	public sealed class Mesh : UnityEngine.Object // TypeDefIndex: 1824
	{
		// Properties
		internal bool canAccess { [NativeMethod] /* 0x004CA28C-0x004CA2C4 */ get; } // 0x00AE4808-0x00AE4848 
		public int vertexCount { [NativeMethod] /* 0x004CA2C4-0x004CA2FC */ get; } // 0x00AE4848-0x00AE4888 
		public int subMeshCount { [NativeMethod] /* 0x004CA2FC-0x004CA338 */ get; } // 0x00AE4888-0x00AE48C8 
		public Vector3[] vertices { get; set; } // 0x00AE4BE0-0x00AE4C34 0x00AE4C34-0x00AE4C98
		public Vector3[] normals { get; set; } // 0x00AE4C98-0x00AE4CEC 0x00AE4CEC-0x00AE4D50
		public Vector4[] tangents { get; set; } // 0x00AE4D50-0x00AE4DA4 0x00AE4DA4-0x00AE4E08
		public Vector2[] uv { get; set; } // 0x00AE4E08-0x00AE4E5C 0x00AE4E5C-0x00AE4EC0
		public Vector2[] uv2 { get; } // 0x00AE4EC0-0x00AE4F14 
		public Vector2[] uv3 { get; } // 0x00AE4F14-0x00AE4F68 
		public Vector2[] uv4 { get; } // 0x00AE4F68-0x00AE4FBC 
		public Color32[] colors32 { get; set; } // 0x00AE4FBC-0x00AE5018 0x00AE5018-0x00AE5084
		public int[] triangles { set; } // 0x00AE5458-0x00AE550C
	
		// Nested types
		internal enum InternalVertexChannelType // TypeDefIndex: 1825
		{
			Float = 0,
			Color = 2
		}
	
		// Constructors
		[RequiredByNativeCode] // 0x004CA068-0x004CA078
		public Mesh(); // 0x00AE4478-0x00AE4508
	
		// Methods
		[FreeFunction] // 0x004CA078-0x004CA0B0
		private static void Internal_Create([Writable] /* 0x004CD470-0x004CD480 */ Mesh mono); // 0x00AE4508-0x00AE4548
		[FreeFunction] // 0x004CA0B0-0x004CA0F4
		private int[] GetTrianglesImpl(int submesh, bool applyBaseVertex); // 0x00AE4548-0x00AE45A0
		[FreeFunction] // 0x004CA0F4-0x004CA138
		private int[] GetIndicesImpl(int submesh, bool applyBaseVertex); // 0x00AE45A0-0x00AE45F8
		[FreeFunction] // 0x004CA138-0x004CA17C
		private void SetIndicesImpl(int submesh, MeshTopology topology, Array indices, int arraySize, bool calculateBounds, int baseVertex); // 0x00AE45F8-0x00AE4680
		[FreeFunction] // 0x004CA17C-0x004CA1C0
		private void PrintErrorCantAccessChannel(VertexAttribute ch); // 0x00AE4680-0x00AE46D0
		[FreeFunction] // 0x004CA1C0-0x004CA204
		internal bool HasChannel(VertexAttribute ch); // 0x00AE46D0-0x00AE4720
		[FreeFunction] // 0x004CA204-0x004CA248
		private void SetArrayForChannelImpl(VertexAttribute channel, InternalVertexChannelType format, int dim, Array values, int arraySize); // 0x00AE4720-0x00AE47A0
		[FreeFunction] // 0x004CA248-0x004CA28C
		private Array GetAllocArrayFromChannelImpl(VertexAttribute channel, InternalVertexChannelType format, int dim); // 0x00AE47A0-0x00AE4808
		[NativeMethod] // 0x004CA338-0x004CA370
		private void ClearImpl(bool keepVertexLayout); // 0x00AE48C8-0x00AE4918
		[NativeMethod] // 0x004CA370-0x004CA3A8
		private void RecalculateBoundsImpl(); // 0x00AE4918-0x00AE4958
		[NativeMethod] // 0x004CA3A8-0x004CA3E0
		private void MarkDynamicImpl(); // 0x00AE4958-0x00AE4998
		internal VertexAttribute GetUVChannel(int uvIndex); // 0x00AE4998-0x00AE4A30
		internal static int DefaultDimensionForChannel(VertexAttribute channel); // 0x00AE4A30-0x00AE4AF4
		private T[] GetAllocArrayFromChannel<T>(VertexAttribute channel, InternalVertexChannelType format, int dim);
		private T[] GetAllocArrayFromChannel<T>(VertexAttribute channel);
		private void SetSizedArrayForChannel(VertexAttribute channel, InternalVertexChannelType format, int dim, Array values, int valuesCount); // 0x00AE4AF4-0x00AE4BE0
		private void SetArrayForChannel<T>(VertexAttribute channel, InternalVertexChannelType format, int dim, T[] values);
		private void SetArrayForChannel<T>(VertexAttribute channel, T[] values);
		private void SetListForChannel<T>(VertexAttribute channel, InternalVertexChannelType format, int dim, List<T> values);
		private void SetListForChannel<T>(VertexAttribute channel, List<T> values);
		public void SetVertices(List<Vector3> inVertices); // 0x00AE5084-0x00AE50E8
		public void SetNormals(List<Vector3> inNormals); // 0x00AE50E8-0x00AE514C
		public void SetTangents(List<Vector4> inTangents); // 0x00AE514C-0x00AE51B0
		public void SetColors(List<Color32> inColors); // 0x00AE51B0-0x00AE521C
		private void SetUvsImpl<T>(int uvIndex, int dim, List<T> uvs);
		public void SetUVs(int channel, List<Vector2> uvs); // 0x00AE521C-0x00AE5288
		private void PrintErrorCantAccessIndices(); // 0x00AE5288-0x00AE531C
		private bool CheckCanAccessSubmesh(int submesh, bool errorAboutTriangles); // 0x00AE531C-0x00AE5448
		private bool CheckCanAccessSubmeshTriangles(int submesh); // 0x00AE5448-0x00AE5450
		private bool CheckCanAccessSubmeshIndices(int submesh); // 0x00AE5450-0x00AE5458
		public int[] GetTriangles(int submesh); // 0x00AE5590-0x00AE5598
		public int[] GetTriangles(int submesh, [UnityEngine.Internal.DefaultValue] /* 0x004CD480-0x004CD4B8 */ bool applyBaseVertex); // 0x00AE5598-0x00AE5648
		public int[] GetIndices(int submesh); // 0x00AE5648-0x00AE5650
		public int[] GetIndices(int submesh, [UnityEngine.Internal.DefaultValue] /* 0x004CD4B8-0x004CD4F0 */ bool applyBaseVertex); // 0x00AE5650-0x00AE5700
		private void SetTrianglesImpl(int submesh, Array triangles, int arraySize, bool calculateBounds, int baseVertex); // 0x00AE550C-0x00AE5590
		public void SetTriangles(List<int> triangles, int submesh); // 0x00AE5700-0x00AE570C
		public void SetTriangles(List<int> triangles, int submesh, [UnityEngine.Internal.DefaultValue] /* 0x004CD4F0-0x004CD528 */ bool calculateBounds, [UnityEngine.Internal.DefaultValue] /* 0x004CD528-0x004CD560 */ int baseVertex); // 0x00AE570C-0x00AE5804
		public void Clear(); // 0x00AE5804-0x00AE5848
		public void RecalculateBounds(); // 0x00AE5848-0x00AE5938
		public void MarkDynamic(); // 0x00AE5938-0x00AE59B0
	}

	[NativeHeader] // 0x004C2E3C-0x004C2EAC
	[NativeHeader] // 0x004C2E3C-0x004C2EAC
	[UsedByNativeCode] // 0x004C2E3C-0x004C2EAC
	public class Texture : UnityEngine.Object // TypeDefIndex: 1826
	{
		// Fields
		public static readonly int GenerateAllMips; // 0x00
	
		// Properties
		public virtual int width { get; set; } // 0x00BA61FC-0x00BA623C 0x00BA623C-0x00BA62A0
		public virtual int height { get; set; } // 0x00BA62A0-0x00BA62E0 0x00BA62E0-0x00BA6344
		public virtual bool isReadable { get; } // 0x00BA6344-0x00BA6384 
		public TextureWrapMode wrapMode { [NativeName] /* 0x004CA3E0-0x004CA418 */ get; set; } // 0x00BA6384-0x00BA63C4 0x00BA63C4-0x00BA6414
		public FilterMode filterMode { set; } // 0x00BA6414-0x00BA6464
		public Vector2 texelSize { [NativeName] /* 0x004CA418-0x004CA450 */ get; } // 0x00BA6464-0x00BA64BC 
	
		// Constructors
		protected Texture(); // 0x00B9F70C-0x00B9F774
		static Texture(); // 0x00BA6714-0x00BA6768
	
		// Methods
		private int GetDataWidth(); // 0x00BA617C-0x00BA61BC
		private int GetDataHeight(); // 0x00BA61BC-0x00BA61FC
		internal bool ValidateFormat(TextureFormat format); // 0x00BA650C-0x00BA6678
		internal bool ValidateFormat(GraphicsFormat format, FormatUsage usage); // 0x00B9FFCC-0x00BA013C
		internal UnityException CreateNonReadableException(Texture t); // 0x00BA6678-0x00BA6714
		private void get_texelSize_Injected(out Vector2 ret); // 0x00BA64BC-0x00BA650C
	}

	[NativeHeader] // 0x004C2EAC-0x004C2F1C
	[NativeHeader] // 0x004C2EAC-0x004C2F1C
	[UsedByNativeCode] // 0x004C2EAC-0x004C2F1C
	public sealed class Texture2D : Texture // TypeDefIndex: 1827
	{
		// Properties
		public TextureFormat format { [NativeName] /* 0x004CA450-0x004CA488 */ get; } // 0x00B9B628-0x00B9B668 
		[StaticAccessor] // 0x004CE0F8-0x004CE134
		public static Texture2D whiteTexture { get; } // 0x00BA6A90-0x00BA6AC4 
		public override bool isReadable { get; } // 0x00BA6B4C-0x00BA6B8C 
	
		// Constructors
		internal Texture2D(int width, int height, TextureFormat textureFormat, int mipCount, bool linear, IntPtr nativeTex); // 0x00BA6768-0x00BA6878
		public Texture2D(int width, int height, TextureFormat textureFormat, bool mipChain); // 0x00BA696C-0x00BA69FC
		public Texture2D(int width, int height); // 0x00BA69FC-0x00BA6A90
	
		// Methods
		[FreeFunction] // 0x004CA488-0x004CA4C0
		private static bool Internal_CreateImpl([Writable] /* 0x004CD560-0x004CD570 */ Texture2D mono, int w, int h, int mipCount, GraphicsFormat format, TextureCreationFlags flags, IntPtr nativeTex); // 0x00BA6AC4-0x00BA6B4C
		private static void Internal_Create([Writable] /* 0x004CD570-0x004CD580 */ Texture2D mono, int w, int h, int mipCount, GraphicsFormat format, TextureCreationFlags flags, IntPtr nativeTex); // 0x00BA6878-0x00BA696C
		[NativeName] // 0x004CA4C0-0x004CA4F8
		private void ApplyImpl(bool updateMipmaps, bool makeNoLongerReadable); // 0x00BA6B8C-0x00BA6BE4
		[NativeName] // 0x004CA4F8-0x004CA530
		private bool ResizeImpl(int width, int height); // 0x00BA6BE4-0x00BA6C3C
		[NativeName] // 0x004CA530-0x004CA568
		private void SetPixelImpl(int image, int x, int y, Color color); // 0x00BA6C3C-0x00BA6CBC
		[NativeName] // 0x004CA568-0x004CA5A0
		private Color GetPixelBilinearImpl(int image, float u, float v); // 0x00BA6D2C-0x00BA6DB0
		[FreeFunction] // 0x004CA5A0-0x004CA5E4
		private void SetPixelsImpl(int x, int y, int w, int h, Color[] pixel, int miplevel, int frame); // 0x00BA6E20-0x00BA6EB8
		[FreeFunction] // 0x004CA5E4-0x004CA628
		public byte[] GetRawTextureData(); // 0x00B9B48C-0x00B9B4CC
		public void SetPixel(int x, int y, Color color); // 0x00BA6EB8-0x00BA6F78
		public void SetPixels(int x, int y, int blockWidth, int blockHeight, Color[] colors, [UnityEngine.Internal.DefaultValue] /* 0x004CD580-0x004CD5B8 */ int miplevel); // 0x00BA6F78-0x00BA7058
		public void SetPixels(Color[] colors); // 0x00BA7058-0x00BA70C0
		public Color GetPixelBilinear(float u, float v); // 0x00BA70C0-0x00BA7150
		public void Apply([UnityEngine.Internal.DefaultValue] /* 0x004CD5B8-0x004CD5F0 */ bool updateMipmaps, [UnityEngine.Internal.DefaultValue] /* 0x004CD5F0-0x004CD628 */ bool makeNoLongerReadable); // 0x00BA7150-0x00BA71FC
		public void Apply(); // 0x00BA71FC-0x00BA7208
		public bool Resize(int width, int height); // 0x00BA7208-0x00BA72B4
		private void SetPixelImpl_Injected(int image, int x, int y, ref Color color); // 0x00BA6CBC-0x00BA6D2C
		private void GetPixelBilinearImpl_Injected(int image, float u, float v, out Color ret); // 0x00BA6DB0-0x00BA6E20
	}

	[ExcludeFromPreset] // 0x004C2F1C-0x004C2F68
	[NativeHeader] // 0x004C2F1C-0x004C2F68
	public sealed class Cubemap : Texture // TypeDefIndex: 1828
	{
		// Properties
		public override bool isReadable { get; } // 0x00AD782C-0x00AD786C 
	
		// Constructors
		public Cubemap(int width, DefaultFormat format, TextureCreationFlags flags); // 0x00AD7208-0x00AD7250
		[RequiredByNativeCode] // 0x004CA628-0x004CA638
		public Cubemap(int width, GraphicsFormat format, TextureCreationFlags flags); // 0x00AD7250-0x00AD733C
		public Cubemap(int width, TextureFormat format, int mipCount); // 0x00AD7428-0x00AD7498
		public Cubemap(int width, GraphicsFormat format, TextureCreationFlags flags, int mipCount); // 0x00AD75BC-0x00AD768C
		internal Cubemap(int width, TextureFormat textureFormat, int mipCount, IntPtr nativeTex); // 0x00AD7498-0x00AD75BC
		internal Cubemap(int width, TextureFormat textureFormat, bool mipChain, IntPtr nativeTex); // 0x00AD7708-0x00AD7728
		public Cubemap(int width, TextureFormat textureFormat, bool mipChain); // 0x00AD7728-0x00AD77AC
	
		// Methods
		[FreeFunction] // 0x004CA638-0x004CA670
		private static bool Internal_CreateImpl([Writable] /* 0x004CD628-0x004CD638 */ Cubemap mono, int ext, int mipCount, GraphicsFormat format, TextureCreationFlags flags, IntPtr nativeTex); // 0x00AD77AC-0x00AD782C
		private static void Internal_Create([Writable] /* 0x004CD638-0x004CD648 */ Cubemap mono, int ext, int mipCount, GraphicsFormat format, TextureCreationFlags flags, IntPtr nativeTex); // 0x00AD733C-0x00AD7428
	}

	[ExcludeFromPreset] // 0x004C2F68-0x004C2FB4
	[NativeHeader] // 0x004C2F68-0x004C2FB4
	public sealed class Texture3D : Texture // TypeDefIndex: 1829
	{
		// Properties
		public override bool isReadable { get; } // 0x00BA7C14-0x00BA7C54 
	
		// Constructors
		public Texture3D(int width, int height, int depth, DefaultFormat format, TextureCreationFlags flags); // 0x00BA77E0-0x00BA7868
		[RequiredByNativeCode] // 0x004CA670-0x004CA680
		public Texture3D(int width, int height, int depth, GraphicsFormat format, TextureCreationFlags flags); // 0x00BA7868-0x00BA7918
		public Texture3D(int width, int height, int depth, GraphicsFormat format, TextureCreationFlags flags, int mipCount); // 0x00BA7918-0x00BA79F8
		public Texture3D(int width, int height, int depth, TextureFormat textureFormat, int mipCount); // 0x00BA7AEC-0x00BA7BF4
		public Texture3D(int width, int height, int depth, TextureFormat textureFormat, bool mipChain); // 0x00BA7BF4-0x00BA7C14
	
		// Methods
		[FreeFunction] // 0x004CA680-0x004CA6B8
		private static bool Internal_CreateImpl([Writable] /* 0x004CD648-0x004CD658 */ Texture3D mono, int w, int h, int d, int mipCount, GraphicsFormat format, TextureCreationFlags flags); // 0x00BA7C54-0x00BA7CDC
		private static void Internal_Create([Writable] /* 0x004CD658-0x004CD668 */ Texture3D mono, int w, int h, int d, int mipCount, GraphicsFormat format, TextureCreationFlags flags); // 0x00BA79F8-0x00BA7AEC
	}

	[NativeHeader] // 0x004C2FB4-0x004C2FEC
	public sealed class Texture2DArray : Texture // TypeDefIndex: 1830
	{
		// Properties
		public override bool isReadable { get; } // 0x00BA7718-0x00BA7758 
	
		// Constructors
		public Texture2DArray(int width, int height, int depth, DefaultFormat format, TextureCreationFlags flags); // 0x00BA72B4-0x00BA733C
		[RequiredByNativeCode] // 0x004CA6B8-0x004CA6C8
		public Texture2DArray(int width, int height, int depth, GraphicsFormat format, TextureCreationFlags flags); // 0x00BA733C-0x00BA73EC
		public Texture2DArray(int width, int height, int depth, GraphicsFormat format, TextureCreationFlags flags, int mipCount); // 0x00BA73EC-0x00BA74CC
		public Texture2DArray(int width, int height, int depth, TextureFormat textureFormat, int mipCount, [UnityEngine.Internal.DefaultValue] /* 0x004CD668-0x004CD6A0 */ bool linear); // 0x00BA75C0-0x00BA76D0
		public Texture2DArray(int width, int height, int depth, TextureFormat textureFormat, bool mipChain, [UnityEngine.Internal.DefaultValue] /* 0x004CD6A0-0x004CD6D8 */ bool linear); // 0x00BA76D0-0x00BA76F4
		public Texture2DArray(int width, int height, int depth, TextureFormat textureFormat, bool mipChain); // 0x00BA76F4-0x00BA7718
	
		// Methods
		[FreeFunction] // 0x004CA6C8-0x004CA700
		private static bool Internal_CreateImpl([Writable] /* 0x004CD6D8-0x004CD6E8 */ Texture2DArray mono, int w, int h, int d, int mipCount, GraphicsFormat format, TextureCreationFlags flags); // 0x00BA7758-0x00BA77E0
		private static void Internal_Create([Writable] /* 0x004CD6E8-0x004CD6F8 */ Texture2DArray mono, int w, int h, int d, int mipCount, GraphicsFormat format, TextureCreationFlags flags); // 0x00BA74CC-0x00BA75C0
	}

	[NativeHeader] // 0x004C2FEC-0x004C3024
	public sealed class CubemapArray : Texture // TypeDefIndex: 1831
	{
		// Properties
		public override bool isReadable { get; } // 0x00AD7CA8-0x00AD7CE8 
	
		// Constructors
		public CubemapArray(int width, int cubemapCount, DefaultFormat format, TextureCreationFlags flags); // 0x00AD786C-0x00AD78BC
		[RequiredByNativeCode] // 0x004CA700-0x004CA710
		public CubemapArray(int width, int cubemapCount, GraphicsFormat format, TextureCreationFlags flags); // 0x00AD78BC-0x00AD795C
		public CubemapArray(int width, int cubemapCount, GraphicsFormat format, TextureCreationFlags flags, int mipCount); // 0x00AD795C-0x00AD7A3C
		public CubemapArray(int width, int cubemapCount, TextureFormat textureFormat, int mipCount, [UnityEngine.Internal.DefaultValue] /* 0x004CD6F8-0x004CD730 */ bool linear); // 0x00AD7B28-0x00AD7C60
		public CubemapArray(int width, int cubemapCount, TextureFormat textureFormat, bool mipChain, [UnityEngine.Internal.DefaultValue] /* 0x004CD730-0x004CD768 */ bool linear); // 0x00AD7C60-0x00AD7C84
		public CubemapArray(int width, int cubemapCount, TextureFormat textureFormat, bool mipChain); // 0x00AD7C84-0x00AD7CA8
	
		// Methods
		[FreeFunction] // 0x004CA710-0x004CA748
		private static bool Internal_CreateImpl([Writable] /* 0x004CD768-0x004CD778 */ CubemapArray mono, int ext, int count, int mipCount, GraphicsFormat format, TextureCreationFlags flags); // 0x00AD7CE8-0x00AD7D68
		private static void Internal_Create([Writable] /* 0x004CD778-0x004CD788 */ CubemapArray mono, int ext, int count, int mipCount, GraphicsFormat format, TextureCreationFlags flags); // 0x00AD7A3C-0x00AD7B28
	}

	[NativeHeader] // 0x004C3024-0x004C30DC
	[NativeHeader] // 0x004C3024-0x004C30DC
	[NativeHeader] // 0x004C3024-0x004C30DC
	[NativeHeader] // 0x004C3024-0x004C30DC
	[UsedByNativeCode] // 0x004C3024-0x004C30DC
	public class RenderTexture : Texture // TypeDefIndex: 1832
	{
		// Properties
		public override int width { get; set; } // 0x00BA0840-0x00BA0880 0x00BA0880-0x00BA08D0
		public override int height { get; set; } // 0x00BA08D0-0x00BA0910 0x00BA0910-0x00BA0960
		[NativeProperty] // 0x004CE134-0x004CE16C
		public GraphicsFormat graphicsFormat { set; } // 0x00BA018C-0x00BA01DC
		public int depth { [FreeFunction] /* 0x004CA830-0x004CA874 */ set; } // 0x00BA013C-0x00BA018C
		public RenderTextureDescriptor descriptor { get; set; } // 0x00B9FCD0-0x00B9FD60 0x00BA04E8-0x00BA057C
	
		// Constructors
		[RequiredByNativeCode] // 0x004CA748-0x004CA758
		protected internal RenderTexture(); // 0x00B9F6A8-0x00B9F70C
		public RenderTexture(RenderTextureDescriptor desc); // 0x00B9F774-0x00B9F87C
		public RenderTexture(RenderTexture textureToCopy); // 0x00B9FB64-0x00B9FCD0
		public RenderTexture(int width, int height, int depth, DefaultFormat format); // 0x00B9FD60-0x00B9FDD8
		public RenderTexture(int width, int height, int depth, GraphicsFormat format); // 0x00B9FE18-0x00B9FFCC
		public RenderTexture(int width, int height, int depth, GraphicsFormat format, int mipCount); // 0x00BA022C-0x00BA04E8
		public RenderTexture(int width, int height, int depth, [UnityEngine.Internal.DefaultValue] /* 0x004CD788-0x004CD7C0 */ RenderTextureFormat format, [UnityEngine.Internal.DefaultValue] /* 0x004CD7C0-0x004CD7F8 */ RenderTextureReadWrite readWrite); // 0x00BA057C-0x00BA05CC
		[ExcludeFromDocs] // 0x004CA758-0x004CA768
		public RenderTexture(int width, int height, int depth, RenderTextureFormat format); // 0x00BA0740-0x00BA0790
		[ExcludeFromDocs] // 0x004CA768-0x004CA778
		public RenderTexture(int width, int height, int depth); // 0x00BA0790-0x00BA07E0
		[ExcludeFromDocs] // 0x004CA778-0x004CA788
		public RenderTexture(int width, int height, int depth, RenderTextureFormat format, int mipCount); // 0x00BA07E0-0x00BA0840
	
		// Methods
		internal void SetSRGBReadWrite(bool srgb); // 0x00BA01DC-0x00BA022C
		[FreeFunction] // 0x004CA788-0x004CA7C0
		private static void Internal_Create([Writable] /* 0x004CD7F8-0x004CD808 */ RenderTexture rt); // 0x00B9FAD4-0x00B9FB14
		[NativeName] // 0x004CA7C0-0x004CA7F8
		private void SetRenderTextureDescriptor(RenderTextureDescriptor desc); // 0x00B9FB14-0x00B9FB64
		[NativeName] // 0x004CA7F8-0x004CA830
		private RenderTextureDescriptor GetDescriptor(); // 0x00BA09B0-0x00BA0A28
		private static void ValidateRenderTextureDesc(RenderTextureDescriptor desc); // 0x00B9F87C-0x00B9FAD4
		internal static GraphicsFormat GetCompatibleFormat(RenderTextureFormat renderTextureFormat, RenderTextureReadWrite readWrite); // 0x00BA05CC-0x00BA0740
		private void SetRenderTextureDescriptor_Injected(ref RenderTextureDescriptor desc); // 0x00BA0960-0x00BA09B0
		private void GetDescriptor_Injected(out RenderTextureDescriptor ret); // 0x00BA0A28-0x00BA0A80
	}

	public struct RenderTextureDescriptor // TypeDefIndex: 1833
	{
		// Fields
		[CompilerGenerated] // 0x004C61B8-0x004C61F4
		[DebuggerBrowsable] // 0x004C61B8-0x004C61F4
		private int _width_k__BackingField; // 0x00
		[CompilerGenerated] // 0x004C61F4-0x004C6230
		[DebuggerBrowsable] // 0x004C61F4-0x004C6230
		private int _height_k__BackingField; // 0x04
		[CompilerGenerated] // 0x004C6230-0x004C626C
		[DebuggerBrowsable] // 0x004C6230-0x004C626C
		private int _msaaSamples_k__BackingField; // 0x08
		[CompilerGenerated] // 0x004C626C-0x004C62A8
		[DebuggerBrowsable] // 0x004C626C-0x004C62A8
		private int _volumeDepth_k__BackingField; // 0x0C
		[CompilerGenerated] // 0x004C62A8-0x004C62E4
		[DebuggerBrowsable] // 0x004C62A8-0x004C62E4
		private int _mipCount_k__BackingField; // 0x10
		private GraphicsFormat _graphicsFormat; // 0x14
		private int _depthBufferBits; // 0x18
		private static int[] depthFormatBits; // 0x00
		[CompilerGenerated] // 0x004C62E4-0x004C6320
		[DebuggerBrowsable] // 0x004C62E4-0x004C6320
		private TextureDimension _dimension_k__BackingField; // 0x1C
		[CompilerGenerated] // 0x004C6320-0x004C635C
		[DebuggerBrowsable] // 0x004C6320-0x004C635C
		private ShadowSamplingMode _shadowSamplingMode_k__BackingField; // 0x20
		[CompilerGenerated] // 0x004C635C-0x004C6398
		[DebuggerBrowsable] // 0x004C635C-0x004C6398
		private VRTextureUsage _vrUsage_k__BackingField; // 0x24
		private RenderTextureCreationFlags _flags; // 0x28
		[CompilerGenerated] // 0x004C6398-0x004C63D4
		[DebuggerBrowsable] // 0x004C6398-0x004C63D4
		private RenderTextureMemoryless _memoryless_k__BackingField; // 0x2C
	
		// Properties
		public int width { [CompilerGenerated] /* 0x004CA874-0x004CA884 */ get; [CompilerGenerated] /* 0x004CA884-0x004CA894 */ set; } // 0x0058CF34-0x0058CF3C 0x0058CF3C-0x0058CF44
		public int height { [CompilerGenerated] /* 0x004CA894-0x004CA8A4 */ get; [CompilerGenerated] /* 0x004CA8A4-0x004CA8B4 */ set; } // 0x0058CF44-0x0058CF4C 0x0058CF4C-0x0058CF54
		public int msaaSamples { [CompilerGenerated] /* 0x004CA8B4-0x004CA8C4 */ get; [CompilerGenerated] /* 0x004CA8C4-0x004CA8D4 */ set; } // 0x0058CF54-0x0058CF5C 0x0058CF5C-0x0058CF64
		public int volumeDepth { [CompilerGenerated] /* 0x004CA8D4-0x004CA8E4 */ get; [CompilerGenerated] /* 0x004CA8E4-0x004CA8F4 */ set; } // 0x0058CF64-0x0058CF6C 0x0058CF6C-0x0058CF74
		public int mipCount { [CompilerGenerated] /* 0x004CA8F4-0x004CA904 */ set; } // 0x0058CF74-0x0058CF7C
		public GraphicsFormat graphicsFormat { get; set; } // 0x0058CF7C-0x0058CF84 0x0058CF84-0x0058CFC8
		public int depthBufferBits { get; set; } // 0x0058CFC8-0x0058CFD0 0x0058CFD0-0x0058CFEC
		public TextureDimension dimension { [CompilerGenerated] /* 0x004CA904-0x004CA914 */ set; } // 0x0058CFEC-0x0058CFF4
		public ShadowSamplingMode shadowSamplingMode { [CompilerGenerated] /* 0x004CA914-0x004CA924 */ set; } // 0x0058CFF4-0x0058CFFC
		public VRTextureUsage vrUsage { [CompilerGenerated] /* 0x004CA924-0x004CA934 */ set; } // 0x0058CFFC-0x0058D004
		public RenderTextureMemoryless memoryless { [CompilerGenerated] /* 0x004CA934-0x004CA944 */ set; } // 0x0058D004-0x0058D00C
	
		// Constructors
		public RenderTextureDescriptor(int width, int height, GraphicsFormat colorFormat, int depthBufferBits, int mipCount); // 0x0058CF2C-0x0058CF34
		static RenderTextureDescriptor(); // 0x00BA0CA4-0x00BA0D44
	
		// Methods
		private void SetOrClearRenderTextureCreationFlag(bool value, RenderTextureCreationFlags flag); // 0x0058D00C-0x0058D06C
	}

	[RequireComponent] // 0x004C30DC-0x004C3140
	public class GUIElement : Behaviour // TypeDefIndex: 1834
	{
		// Constructors
		public GUIElement(); // 0x00ADE660-0x00ADE664
	}

	[Obsolete] // 0x004C3140-0x004C31C8
	[RequireComponent] // 0x004C3140-0x004C31C8
	public class GUILayer : Behaviour // TypeDefIndex: 1835
	{
		// Methods
		public GUIElement HitTest(Vector3 screenPosition); // 0x00ADE664-0x00ADE69C
		private GUIElement HitTest(Vector2 screenPosition); // 0x00ADE69C-0x00ADE6F0
		private GUIElement HitTest_Injected(ref Vector2 screenPosition); // 0x00ADE6F0-0x00ADE740
	}

	public enum CursorLockMode // TypeDefIndex: 1836
	{
		None = 0,
		Locked = 1,
		Confined = 2
	}

	[NativeHeader] // 0x004C31C8-0x004C3200
	public class Cursor // TypeDefIndex: 1837
	{
		// Properties
		public static bool visible { set; } // 0x00AD81D4-0x00AD8214
		public static CursorLockMode lockState { get; set; } // 0x00AD8214-0x00AD8248 0x00AD8248-0x00AD8288
	}

	public enum KeyCode // TypeDefIndex: 1838
	{
		None = 0,
		Backspace = 8,
		Tab = 9,
		Clear = 12,
		Return = 13,
		Pause = 19,
		Escape = 27,
		Space = 32,
		Exclaim = 33,
		DoubleQuote = 34,
		Hash = 35,
		Dollar = 36,
		Percent = 37,
		Ampersand = 38,
		Quote = 39,
		LeftParen = 40,
		RightParen = 41,
		Asterisk = 42,
		Plus = 43,
		Comma = 44,
		Minus = 45,
		Period = 46,
		Slash = 47,
		Alpha0 = 48,
		Alpha1 = 49,
		Alpha2 = 50,
		Alpha3 = 51,
		Alpha4 = 52,
		Alpha5 = 53,
		Alpha6 = 54,
		Alpha7 = 55,
		Alpha8 = 56,
		Alpha9 = 57,
		Colon = 58,
		Semicolon = 59,
		Less = 60,
		Equals = 61,
		Greater = 62,
		Question = 63,
		At = 64,
		LeftBracket = 91,
		Backslash = 92,
		RightBracket = 93,
		Caret = 94,
		Underscore = 95,
		BackQuote = 96,
		A = 97,
		B = 98,
		C = 99,
		D = 100,
		E = 101,
		F = 102,
		G = 103,
		H = 104,
		I = 105,
		J = 106,
		K = 107,
		L = 108,
		M = 109,
		N = 110,
		O = 111,
		P = 112,
		Q = 113,
		R = 114,
		S = 115,
		T = 116,
		U = 117,
		V = 118,
		W = 119,
		X = 120,
		Y = 121,
		Z = 122,
		LeftCurlyBracket = 123,
		Pipe = 124,
		RightCurlyBracket = 125,
		Tilde = 126,
		Delete = 127,
		Keypad0 = 256,
		Keypad1 = 257,
		Keypad2 = 258,
		Keypad3 = 259,
		Keypad4 = 260,
		Keypad5 = 261,
		Keypad6 = 262,
		Keypad7 = 263,
		Keypad8 = 264,
		Keypad9 = 265,
		KeypadPeriod = 266,
		KeypadDivide = 267,
		KeypadMultiply = 268,
		KeypadMinus = 269,
		KeypadPlus = 270,
		KeypadEnter = 271,
		KeypadEquals = 272,
		UpArrow = 273,
		DownArrow = 274,
		RightArrow = 275,
		LeftArrow = 276,
		Insert = 277,
		Home = 278,
		End = 279,
		PageUp = 280,
		PageDown = 281,
		F1 = 282,
		F2 = 283,
		F3 = 284,
		F4 = 285,
		F5 = 286,
		F6 = 287,
		F7 = 288,
		F8 = 289,
		F9 = 290,
		F10 = 291,
		F11 = 292,
		F12 = 293,
		F13 = 294,
		F14 = 295,
		F15 = 296,
		Numlock = 300,
		CapsLock = 301,
		ScrollLock = 302,
		RightShift = 303,
		LeftShift = 304,
		RightControl = 305,
		LeftControl = 306,
		RightAlt = 307,
		LeftAlt = 308,
		RightCommand = 309,
		RightApple = 309,
		LeftCommand = 310,
		LeftApple = 310,
		LeftWindows = 311,
		RightWindows = 312,
		AltGr = 313,
		Help = 315,
		Print = 316,
		SysReq = 317,
		Break = 318,
		Menu = 319,
		Mouse0 = 323,
		Mouse1 = 324,
		Mouse2 = 325,
		Mouse3 = 326,
		Mouse4 = 327,
		Mouse5 = 328,
		Mouse6 = 329,
		JoystickButton0 = 330,
		JoystickButton1 = 331,
		JoystickButton2 = 332,
		JoystickButton3 = 333,
		JoystickButton4 = 334,
		JoystickButton5 = 335,
		JoystickButton6 = 336,
		JoystickButton7 = 337,
		JoystickButton8 = 338,
		JoystickButton9 = 339,
		JoystickButton10 = 340,
		JoystickButton11 = 341,
		JoystickButton12 = 342,
		JoystickButton13 = 343,
		JoystickButton14 = 344,
		JoystickButton15 = 345,
		JoystickButton16 = 346,
		JoystickButton17 = 347,
		JoystickButton18 = 348,
		JoystickButton19 = 349,
		Joystick1Button0 = 350,
		Joystick1Button1 = 351,
		Joystick1Button2 = 352,
		Joystick1Button3 = 353,
		Joystick1Button4 = 354,
		Joystick1Button5 = 355,
		Joystick1Button6 = 356,
		Joystick1Button7 = 357,
		Joystick1Button8 = 358,
		Joystick1Button9 = 359,
		Joystick1Button10 = 360,
		Joystick1Button11 = 361,
		Joystick1Button12 = 362,
		Joystick1Button13 = 363,
		Joystick1Button14 = 364,
		Joystick1Button15 = 365,
		Joystick1Button16 = 366,
		Joystick1Button17 = 367,
		Joystick1Button18 = 368,
		Joystick1Button19 = 369,
		Joystick2Button0 = 370,
		Joystick2Button1 = 371,
		Joystick2Button2 = 372,
		Joystick2Button3 = 373,
		Joystick2Button4 = 374,
		Joystick2Button5 = 375,
		Joystick2Button6 = 376,
		Joystick2Button7 = 377,
		Joystick2Button8 = 378,
		Joystick2Button9 = 379,
		Joystick2Button10 = 380,
		Joystick2Button11 = 381,
		Joystick2Button12 = 382,
		Joystick2Button13 = 383,
		Joystick2Button14 = 384,
		Joystick2Button15 = 385,
		Joystick2Button16 = 386,
		Joystick2Button17 = 387,
		Joystick2Button18 = 388,
		Joystick2Button19 = 389,
		Joystick3Button0 = 390,
		Joystick3Button1 = 391,
		Joystick3Button2 = 392,
		Joystick3Button3 = 393,
		Joystick3Button4 = 394,
		Joystick3Button5 = 395,
		Joystick3Button6 = 396,
		Joystick3Button7 = 397,
		Joystick3Button8 = 398,
		Joystick3Button9 = 399,
		Joystick3Button10 = 400,
		Joystick3Button11 = 401,
		Joystick3Button12 = 402,
		Joystick3Button13 = 403,
		Joystick3Button14 = 404,
		Joystick3Button15 = 405,
		Joystick3Button16 = 406,
		Joystick3Button17 = 407,
		Joystick3Button18 = 408,
		Joystick3Button19 = 409,
		Joystick4Button0 = 410,
		Joystick4Button1 = 411,
		Joystick4Button2 = 412,
		Joystick4Button3 = 413,
		Joystick4Button4 = 414,
		Joystick4Button5 = 415,
		Joystick4Button6 = 416,
		Joystick4Button7 = 417,
		Joystick4Button8 = 418,
		Joystick4Button9 = 419,
		Joystick4Button10 = 420,
		Joystick4Button11 = 421,
		Joystick4Button12 = 422,
		Joystick4Button13 = 423,
		Joystick4Button14 = 424,
		Joystick4Button15 = 425,
		Joystick4Button16 = 426,
		Joystick4Button17 = 427,
		Joystick4Button18 = 428,
		Joystick4Button19 = 429,
		Joystick5Button0 = 430,
		Joystick5Button1 = 431,
		Joystick5Button2 = 432,
		Joystick5Button3 = 433,
		Joystick5Button4 = 434,
		Joystick5Button5 = 435,
		Joystick5Button6 = 436,
		Joystick5Button7 = 437,
		Joystick5Button8 = 438,
		Joystick5Button9 = 439,
		Joystick5Button10 = 440,
		Joystick5Button11 = 441,
		Joystick5Button12 = 442,
		Joystick5Button13 = 443,
		Joystick5Button14 = 444,
		Joystick5Button15 = 445,
		Joystick5Button16 = 446,
		Joystick5Button17 = 447,
		Joystick5Button18 = 448,
		Joystick5Button19 = 449,
		Joystick6Button0 = 450,
		Joystick6Button1 = 451,
		Joystick6Button2 = 452,
		Joystick6Button3 = 453,
		Joystick6Button4 = 454,
		Joystick6Button5 = 455,
		Joystick6Button6 = 456,
		Joystick6Button7 = 457,
		Joystick6Button8 = 458,
		Joystick6Button9 = 459,
		Joystick6Button10 = 460,
		Joystick6Button11 = 461,
		Joystick6Button12 = 462,
		Joystick6Button13 = 463,
		Joystick6Button14 = 464,
		Joystick6Button15 = 465,
		Joystick6Button16 = 466,
		Joystick6Button17 = 467,
		Joystick6Button18 = 468,
		Joystick6Button19 = 469,
		Joystick7Button0 = 470,
		Joystick7Button1 = 471,
		Joystick7Button2 = 472,
		Joystick7Button3 = 473,
		Joystick7Button4 = 474,
		Joystick7Button5 = 475,
		Joystick7Button6 = 476,
		Joystick7Button7 = 477,
		Joystick7Button8 = 478,
		Joystick7Button9 = 479,
		Joystick7Button10 = 480,
		Joystick7Button11 = 481,
		Joystick7Button12 = 482,
		Joystick7Button13 = 483,
		Joystick7Button14 = 484,
		Joystick7Button15 = 485,
		Joystick7Button16 = 486,
		Joystick7Button17 = 487,
		Joystick7Button18 = 488,
		Joystick7Button19 = 489,
		Joystick8Button0 = 490,
		Joystick8Button1 = 491,
		Joystick8Button2 = 492,
		Joystick8Button3 = 493,
		Joystick8Button4 = 494,
		Joystick8Button5 = 495,
		Joystick8Button6 = 496,
		Joystick8Button7 = 497,
		Joystick8Button8 = 498,
		Joystick8Button9 = 499,
		Joystick8Button10 = 500,
		Joystick8Button11 = 501,
		Joystick8Button12 = 502,
		Joystick8Button13 = 503,
		Joystick8Button14 = 504,
		Joystick8Button15 = 505,
		Joystick8Button16 = 506,
		Joystick8Button17 = 507,
		Joystick8Button18 = 508,
		Joystick8Button19 = 509
	}
}

namespace UnityEngine.Internal
{
	[Serializable]
	[AttributeUsage] // 0x004C3200-0x004C3214
	public class DefaultValueAttribute : Attribute // TypeDefIndex: 1839
	{
		// Fields
		private object DefaultValue; // 0x10
	
		// Properties
		public object Value { get; } // 0x00ADF8AC-0x00ADF8B4 
	
		// Constructors
		public DefaultValueAttribute(string value); // 0x00ADF880-0x00ADF8AC
	
		// Methods
		public override bool Equals(object obj); // 0x00ADF8B4-0x00ADF984
		public override int GetHashCode(); // 0x00ADF984-0x00ADF9A8
	}

	[Serializable]
	public class ExcludeFromDocsAttribute : Attribute // TypeDefIndex: 1840
	{
		// Constructors
		public ExcludeFromDocsAttribute(); // 0x00ADF9A8-0x00ADF9C8
	}
}

namespace UnityEngine
{
	public interface ILogHandler // TypeDefIndex: 1841
	{
		// Methods
		void LogFormat(LogType logType, UnityEngine.Object context, string format, params /* 0x004CD808-0x004CD818 */ object[] args);
		void LogException(Exception exception, UnityEngine.Object context);
	}

	public interface ILogger : ILogHandler // TypeDefIndex: 1842
	{
		// Properties
		ILogHandler logHandler { get; }
	
		// Methods
		void Log(LogType logType, object message);
		void Log(LogType logType, object message, UnityEngine.Object context);
		void LogFormat(LogType logType, string format, params /* 0x004CD818-0x004CD828 */ object[] args);
	}

	public class Logger : ILogger // TypeDefIndex: 1843
	{
		// Fields
		[CompilerGenerated] // 0x004C63D4-0x004C6410
		[DebuggerBrowsable] // 0x004C63D4-0x004C6410
		private ILogHandler _logHandler_k__BackingField; // 0x10
		[CompilerGenerated] // 0x004C6410-0x004C644C
		[DebuggerBrowsable] // 0x004C6410-0x004C644C
		private bool _logEnabled_k__BackingField; // 0x18
		[CompilerGenerated] // 0x004C644C-0x004C6488
		[DebuggerBrowsable] // 0x004C644C-0x004C6488
		private LogType _filterLogType_k__BackingField; // 0x1C
	
		// Properties
		public ILogHandler logHandler { [CompilerGenerated] /* 0x004CA944-0x004CA954 */ get; [CompilerGenerated] /* 0x004CA954-0x004CA964 */ set; } // 0x00ADFBA4-0x00ADFBAC 0x00ADFBAC-0x00ADFBB4
		public bool logEnabled { [CompilerGenerated] /* 0x004CA964-0x004CA974 */ get; [CompilerGenerated] /* 0x004CA974-0x004CA984 */ set; } // 0x00ADFBB4-0x00ADFBBC 0x00ADFBBC-0x00ADFBC8
		public LogType filterLogType { [CompilerGenerated] /* 0x004CA984-0x004CA994 */ get; [CompilerGenerated] /* 0x004CA994-0x004CA9A4 */ set; } // 0x00ADFBC8-0x00ADFBD0 0x00ADFBD0-0x00ADFBD8
	
		// Constructors
		public Logger(ILogHandler logHandler); // 0x00AD92C8-0x00AD9304
	
		// Methods
		public bool IsLogTypeAllowed(LogType logType); // 0x00ADFBD8-0x00ADFC14
		private static string GetString(object message); // 0x00ADFC14-0x00ADFD44
		public void Log(LogType logType, object message); // 0x00ADFD44-0x00ADFEBC
		public void Log(LogType logType, object message, UnityEngine.Object context); // 0x00ADFEBC-0x00AE0044
		public void LogFormat(LogType logType, string format, params /* 0x004CD828-0x004CD838 */ object[] args); // 0x00AE0044-0x00AE015C
		public void LogFormat(LogType logType, UnityEngine.Object context, string format, params /* 0x004CD838-0x004CD848 */ object[] args); // 0x00AE015C-0x00AE0278
		public void LogException(Exception exception, UnityEngine.Object context); // 0x00AE0278-0x00AE0360
	}

	[NativeHeader] // 0x004C3214-0x004C324C
	internal class UnityLogWriter : TextWriter // TypeDefIndex: 1844
	{
		// Constructors
		public UnityLogWriter(); // 0x00F875D4-0x00F8763C
	
		// Methods
		[ThreadAndSerializationSafe] // 0x004CA9A4-0x004CA9B4
		public static void WriteStringToUnityLog(string s); // 0x00F8763C-0x00F8768C
		[FreeFunction] // 0x004CA9B4-0x004CA9E8
		private static void WriteStringToUnityLogImpl(string s); // 0x00F8768C-0x00F876CC
		public static void Init(); // 0x00F876CC-0x00F87748
		public override void Write(char value); // 0x00F87748-0x00F877A8
		public override void Write(string s); // 0x00F877A8-0x00F877F8
		public override void Write(char[] buffer, int index, int count); // 0x00F877F8-0x00F87844
	}

	[DefaultMember] // 0x004C324C-0x004C32EC
	[NativeClass] // 0x004C324C-0x004C32EC
	[NativeHeader] // 0x004C324C-0x004C32EC
	[RequiredByNativeCode] // 0x004C324C-0x004C32EC
	public struct Color : IEquatable<Color> // TypeDefIndex: 1845
	{
		// Fields
		public float r; // 0x00
		public float g; // 0x04
		public float b; // 0x08
		public float a; // 0x0C
	
		// Properties
		public static Color red { get; } // 0x00AD62C8-0x00AD62DC 
		public static Color green { get; } // 0x00AD62DC-0x00AD62F0 
		public static Color blue { get; } // 0x00AD62F0-0x00AD6304 
		public static Color white { get; } // 0x00AD6304-0x00AD6318 
		public static Color black { get; } // 0x00AD6318-0x00AD632C 
		public static Color yellow { get; } // 0x00AD632C-0x00AD6348 
		public static Color cyan { get; } // 0x00AD6348-0x00AD635C 
		public static Color magenta { get; } // 0x00AD635C-0x00AD6370 
		public static Color gray { get; } // 0x00AD6370-0x00AD6384 
		public static Color grey { get; } // 0x00AD6384-0x00AD6398 
		public static Color clear { get; } // 0x00AD6398-0x00AD64A4 
		public Color linear { get; } // 0x00589E94-0x00589E9C 
		public float maxColorComponent { get; } // 0x00589E9C-0x00589EA4 
	
		// Constructors
		public Color(float r, float g, float b, float a); // 0x00589E38-0x00589E44
		public Color(float r, float g, float b); // 0x00589E44-0x00589E58
	
		// Methods
		public override string ToString(); // 0x00589E58-0x00589E60
		public override int GetHashCode(); // 0x00589E60-0x00589E68
		public override bool Equals(object other); // 0x00589E68-0x00589E70
		public bool Equals(Color other); // 0x00589E70-0x00589E78
		public static Color operator *(Color a, Color b); // 0x00AD6054-0x00AD6068
		public static Color operator *(Color a, float b); // 0x00AD6068-0x00AD607C
		public static bool operator ==(Color lhs, Color rhs); // 0x00AD607C-0x00AD6184
		public static bool operator !=(Color lhs, Color rhs); // 0x00AD6184-0x00AD61A0
		public static Color Lerp(Color a, Color b, float t); // 0x00AD61A0-0x00AD6290
		internal Color RGBMultiplied(float multiplier); // 0x00589E78-0x00589E94
		public static implicit operator Vector4(Color c); // 0x00AD5F04-0x00AD6054
		public static implicit operator Color(Vector4 v); // 0x00AD6574-0x00AD658C
	}

	[UsedByNativeCode] // 0x004C32EC-0x004C32FC
	public struct Color32 // TypeDefIndex: 1846
	{
		// Fields
		[Ignore] // 0x004C6488-0x004C64BC
		private int rgba; // 0x00
		public byte r; // 0x00
		public byte g; // 0x01
		public byte b; // 0x02
		public byte a; // 0x03
	
		// Constructors
		public Color32(byte r, byte g, byte b, byte a); // 0x00589EA4-0x00589EB8
	
		// Methods
		public static implicit operator Color32(Color c); // 0x00AD658C-0x00AD6680
		public static implicit operator Color(Color32 c); // 0x00AD6680-0x00AD6864
		public override string ToString(); // 0x00589EB8-0x00589F98
	}

	[NativeHeader] // 0x004C32FC-0x004C3348
	[RequiredByNativeCode] // 0x004C32FC-0x004C3348
	public class Gradient : IEquatable<Gradient> // TypeDefIndex: 1847
	{
		// Fields
		internal IntPtr m_Ptr; // 0x10
	
		// Constructors
		[RequiredByNativeCode] // 0x004CA9E8-0x004CA9F8
		public Gradient(); // 0x00ADF1E0-0x00ADF22C
	
		// Methods
		[FreeFunction] // 0x004CA9F8-0x004CAA3C
		private static IntPtr Init(); // 0x00ADF22C-0x00ADF260
		[FreeFunction] // 0x004CAA3C-0x004CAA84
		private void Cleanup(); // 0x00ADF260-0x00ADF2A0
		[FreeFunction] // 0x004CAA84-0x004CAACC
		private bool Internal_Equals(IntPtr other); // 0x00ADF2A0-0x00ADF2F0
		~Gradient(); // 0x00ADF2F0-0x00ADF380
		[FreeFunction] // 0x004CAACC-0x004CAB14
		public Color Evaluate(float time); // 0x00ADF380-0x00ADF3EC
		public override bool Equals(object o); // 0x00ADF44C-0x00ADF528
		public bool Equals(Gradient other); // 0x00ADF528-0x00ADF5F8
		public override int GetHashCode(); // 0x00ADF5F8-0x00ADF604
		private void Evaluate_Injected(float time, out Color ret); // 0x00ADF3EC-0x00ADF44C
	}

	[DefaultMember] // 0x004C3348-0x004C340C
	[NativeClass] // 0x004C3348-0x004C340C
	[NativeHeader] // 0x004C3348-0x004C340C
	[NativeType] // 0x004C3348-0x004C340C
	[RequiredByNativeCode] // 0x004C3348-0x004C340C
	public struct Matrix4x4 : IEquatable<Matrix4x4> // TypeDefIndex: 1848
	{
		// Fields
		[NativeName] // 0x004C64BC-0x004C64F4
		public float m00; // 0x00
		[NativeName] // 0x004C64F4-0x004C652C
		public float m10; // 0x04
		[NativeName] // 0x004C652C-0x004C6564
		public float m20; // 0x08
		[NativeName] // 0x004C6564-0x004C659C
		public float m30; // 0x0C
		[NativeName] // 0x004C659C-0x004C65D4
		public float m01; // 0x10
		[NativeName] // 0x004C65D4-0x004C660C
		public float m11; // 0x14
		[NativeName] // 0x004C660C-0x004C6644
		public float m21; // 0x18
		[NativeName] // 0x004C6644-0x004C667C
		public float m31; // 0x1C
		[NativeName] // 0x004C667C-0x004C66B4
		public float m02; // 0x20
		[NativeName] // 0x004C66B4-0x004C66EC
		public float m12; // 0x24
		[NativeName] // 0x004C66EC-0x004C6724
		public float m22; // 0x28
		[NativeName] // 0x004C6724-0x004C675C
		public float m32; // 0x2C
		[NativeName] // 0x004C675C-0x004C6794
		public float m03; // 0x30
		[NativeName] // 0x004C6794-0x004C67CC
		public float m13; // 0x34
		[NativeName] // 0x004C67CC-0x004C6804
		public float m23; // 0x38
		[NativeName] // 0x004C6804-0x004C683C
		public float m33; // 0x3C
		private static readonly Matrix4x4 zeroMatrix; // 0x00
		private static readonly Matrix4x4 identityMatrix; // 0x40
	
		// Properties
		public Matrix4x4 inverse { get; } // 0x0058A748-0x0058A750 
		public static Matrix4x4 identity { get; } // 0x00AE3D84-0x00AE42B4 
	
		// Constructors
		public Matrix4x4(Vector4 column0, Vector4 column1, Vector4 column2, Vector4 column3); // 0x0058A71C-0x0058A748
		static Matrix4x4(); // 0x00AE42B4-0x00AE4478
	
		// Methods
		[FreeFunction] // 0x004CAB14-0x004CAB58
		public static Matrix4x4 TRS(Vector3 pos, Quaternion q, Vector3 s); // 0x00AE2E70-0x00AE2F48
		[FreeFunction] // 0x004CAB58-0x004CAB9C
		public static Matrix4x4 Inverse(Matrix4x4 m); // 0x00AE2FB0-0x00AE306C
		[FreeFunction] // 0x004CAB9C-0x004CABE0
		public static Matrix4x4 Perspective(float fov, float aspect, float zNear, float zFar); // 0x00AE3188-0x00AE3264
		public override int GetHashCode(); // 0x0058A750-0x0058A758
		public override bool Equals(object other); // 0x0058A758-0x0058A760
		public bool Equals(Matrix4x4 other); // 0x0058A760-0x0058A7A8
		public static Matrix4x4 operator *(Matrix4x4 lhs, Matrix4x4 rhs); // 0x00AE363C-0x00AE39A8
		public static bool operator ==(Matrix4x4 lhs, Matrix4x4 rhs); // 0x00AE39A8-0x00AE3D84
		public Vector4 GetColumn(int index); // 0x0058A7A8-0x0058A7B0
		public Vector3 MultiplyPoint(Vector3 point); // 0x0058A7B0-0x0058A7B8
		public Vector3 MultiplyPoint3x4(Vector3 point); // 0x0058A7B8-0x0058A7C0
		public Vector3 MultiplyVector(Vector3 vector); // 0x0058A7C0-0x0058A7C8
		public override string ToString(); // 0x0058A7C8-0x0058A7D0
		private static void TRS_Injected(ref Vector3 pos, ref Quaternion q, ref Vector3 s, out Matrix4x4 ret); // 0x00AE2F48-0x00AE2FB0
		private static void Inverse_Injected(ref Matrix4x4 m, out Matrix4x4 ret); // 0x00AE306C-0x00AE3188
		private static void Perspective_Injected(float fov, float aspect, float zNear, float zFar, out Matrix4x4 ret); // 0x00AE3264-0x00AE363C
	}

	[NativeClass] // 0x004C340C-0x004C3500
	[NativeHeader] // 0x004C340C-0x004C3500
	[NativeHeader] // 0x004C340C-0x004C3500
	[NativeType] // 0x004C340C-0x004C3500
	[RequiredByNativeCode] // 0x004C340C-0x004C3500
	public struct Vector3 : IEquatable<Vector3> // TypeDefIndex: 1849
	{
		// Fields
		public const float kEpsilon = 1E-05f; // Metadata: 0x001F407C
		public const float kEpsilonNormalSqrt = 1E-15f; // Metadata: 0x001F4080
		public float x; // 0x00
		public float y; // 0x04
		public float z; // 0x08
		private static readonly Vector3 zeroVector; // 0x00
		private static readonly Vector3 oneVector; // 0x0C
		private static readonly Vector3 upVector; // 0x18
		private static readonly Vector3 downVector; // 0x24
		private static readonly Vector3 leftVector; // 0x30
		private static readonly Vector3 rightVector; // 0x3C
		private static readonly Vector3 forwardVector; // 0x48
		private static readonly Vector3 backVector; // 0x54
		private static readonly Vector3 positiveInfinityVector; // 0x60
		private static readonly Vector3 negativeInfinityVector; // 0x6C
	
		// Properties
		public float this[int index] { get => default; set {} } // 0x00596244-0x0059624C 0x0059624C-0x00596254
		public Vector3 normalized { get; } // 0x005962C8-0x005962D0 
		public float magnitude { get; } // 0x005962D0-0x005962D8 
		public float sqrMagnitude { get; } // 0x005962D8-0x005962F8 
		public static Vector3 zero { get; } // 0x00F8935C-0x00F8953C 
		public static Vector3 one { get; } // 0x00F89DE8-0x00F89E54 
		public static Vector3 forward { get; } // 0x00F89E54-0x00F89EC0 
		public static Vector3 back { get; } // 0x00F89EC0-0x00F89F2C 
		public static Vector3 up { get; } // 0x00F89F2C-0x00F89F98 
		public static Vector3 down { get; } // 0x00F89F98-0x00F8A004 
		public static Vector3 left { get; } // 0x00F8A004-0x00F8A070 
		public static Vector3 right { get; } // 0x00F8A070-0x00F8A0DC 
	
		// Constructors
		public Vector3(float x, float y, float z); // 0x0059622C-0x00596238
		public Vector3(float x, float y); // 0x00596238-0x00596244
		static Vector3(); // 0x00F8A388-0x00F8A494
	
		// Methods
		[FreeFunction] // 0x004CABE0-0x004CAC24
		public static Vector3 Slerp(Vector3 a, Vector3 b, float t); // 0x00F88CC8-0x00F88D8C
		public static Vector3 Lerp(Vector3 a, Vector3 b, float t); // 0x00F88DF4-0x00F89034
		public void Set(float newX, float newY, float newZ); // 0x00596254-0x00596260
		public static Vector3 Scale(Vector3 a, Vector3 b); // 0x00F89034-0x00F89064
		public void Scale(Vector3 scale); // 0x00596260-0x00596280
		public static Vector3 Cross(Vector3 lhs, Vector3 rhs); // 0x00F89064-0x00F891B8
		public override int GetHashCode(); // 0x00596280-0x00596288
		public override bool Equals(object other); // 0x00596288-0x00596290
		public bool Equals(Vector3 other); // 0x00596290-0x005962C0
		public static Vector3 Normalize(Vector3 value); // 0x00F891B8-0x00F8929C
		public void Normalize(); // 0x005962C0-0x005962C8
		public static float Dot(Vector3 lhs, Vector3 rhs); // 0x00F8953C-0x00F89554
		public static Vector3 Project(Vector3 vector, Vector3 onNormal); // 0x00F89554-0x00F8968C
		public static Vector3 ProjectOnPlane(Vector3 vector, Vector3 planeNormal); // 0x00F8968C-0x00F897C4
		public static float Angle(Vector3 from, Vector3 to); // 0x00F897C4-0x00F89968
		public static float SignedAngle(Vector3 from, Vector3 to, Vector3 axis); // 0x00F89968-0x00F89AAC
		public static float Distance(Vector3 a, Vector3 b); // 0x00F89AAC-0x00F89C30
		public static float Magnitude(Vector3 vector); // 0x00F8929C-0x00F8934C
		public static float SqrMagnitude(Vector3 vector); // 0x00F89C30-0x00F89C48
		public static Vector3 Min(Vector3 lhs, Vector3 rhs); // 0x00F89C48-0x00F89D18
		public static Vector3 Max(Vector3 lhs, Vector3 rhs); // 0x00F89D18-0x00F89DE8
		public static Vector3 operator +(Vector3 a, Vector3 b); // 0x00F8A0DC-0x00F8A0EC
		public static Vector3 operator -(Vector3 a, Vector3 b); // 0x00F8A0EC-0x00F8A0FC
		public static Vector3 operator -(Vector3 a); // 0x00F8A0FC-0x00F8A10C
		public static Vector3 operator *(Vector3 a, float d); // 0x00F8A10C-0x00F8A11C
		public static Vector3 operator *(float d, Vector3 a); // 0x00F8A11C-0x00F8A130
		public static Vector3 operator /(Vector3 a, float d); // 0x00F8934C-0x00F8935C
		public static bool operator ==(Vector3 lhs, Vector3 rhs); // 0x00F8A130-0x00F8A164
		public static bool operator !=(Vector3 lhs, Vector3 rhs); // 0x00F8A164-0x00F8A388
		public override string ToString(); // 0x005962F8-0x00596300
		private static void Slerp_Injected(ref Vector3 a, ref Vector3 b, float t, out Vector3 ret); // 0x00F88D8C-0x00F88DF4
	}

	[DefaultMember] // 0x004C3500-0x004C3594
	[NativeHeader] // 0x004C3500-0x004C3594
	[NativeType] // 0x004C3500-0x004C3594
	[UsedByNativeCode] // 0x004C3500-0x004C3594
	public struct Quaternion : IEquatable<Quaternion> // TypeDefIndex: 1850
	{
		// Fields
		public float x; // 0x00
		public float y; // 0x04
		public float z; // 0x08
		public float w; // 0x0C
		private static readonly Quaternion identityQuaternion; // 0x00
		public const float kEpsilon = 1E-06f; // Metadata: 0x001F4084
	
		// Properties
		public static Quaternion identity { get; } // 0x00B9AE50-0x00B9AEBC 
		public Vector3 eulerAngles { get; set; } // 0x0058CA78-0x0058CA80 0x0058CA80-0x0058CA88
	
		// Constructors
		public Quaternion(float x, float y, float z, float w); // 0x0058CA64-0x0058CA70
		static Quaternion(); // 0x00B9CD28-0x00B9CD80
	
		// Methods
		[FreeFunction] // 0x004CAC24-0x004CAC68
		public static Quaternion FromToRotation(Vector3 fromDirection, Vector3 toDirection); // 0x00B9B9DC-0x00B9BA8C
		[FreeFunction] // 0x004CAC68-0x004CAC9C
		public static Quaternion Inverse(Quaternion rotation); // 0x00B9BAE4-0x00B9BB88
		[FreeFunction] // 0x004CAC9C-0x004CACE0
		public static Quaternion Slerp(Quaternion a, Quaternion b, float t); // 0x00B9BBD8-0x00B9BC98
		[FreeFunction] // 0x004CACE0-0x004CAD24
		public static Quaternion SlerpUnclamped(Quaternion a, Quaternion b, float t); // 0x00B9BD00-0x00B9BDC0
		[FreeFunction] // 0x004CAD24-0x004CAD68
		public static Quaternion Lerp(Quaternion a, Quaternion b, float t); // 0x00B9BE28-0x00B9BEE8
		[FreeFunction] // 0x004CAD68-0x004CADAC
		private static Quaternion Internal_FromEulerRad(Vector3 euler); // 0x00B9BF50-0x00B9BFF4
		[FreeFunction] // 0x004CADAC-0x004CADF0
		private static Vector3 Internal_ToEulerRad(Quaternion rotation); // 0x00B9C044-0x00B9C0EC
		[FreeFunction] // 0x004CADF0-0x004CAE34
		public static Quaternion AngleAxis(float angle, Vector3 axis); // 0x00B9C13C-0x00B9C1F0
		[FreeFunction] // 0x004CAE34-0x004CAE78
		public static Quaternion LookRotation(Vector3 forward, [UnityEngine.Internal.DefaultValue] /* 0x004CD848-0x004CD880 */ Vector3 upwards); // 0x00B9C250-0x00B9C300
		[ExcludeFromDocs] // 0x004CAE78-0x004CAE88
		public static Quaternion LookRotation(Vector3 forward); // 0x00B9C358-0x00B9C424
		public static Quaternion operator *(Quaternion lhs, Quaternion rhs); // 0x00B9C424-0x00B9C498
		public static Vector3 operator *(Quaternion rotation, Vector3 point); // 0x00B9C498-0x00B9C53C
		private static bool IsEqualUsingDot(float dot); // 0x00B9C53C-0x00B9C550
		public static bool operator ==(Quaternion lhs, Quaternion rhs); // 0x00B9AC28-0x00B9AD8C
		public static bool operator !=(Quaternion lhs, Quaternion rhs); // 0x00B9C570-0x00B9C6EC
		public static float Dot(Quaternion a, Quaternion b); // 0x00B9C550-0x00B9C570
		public void SetLookRotation(Vector3 view, [UnityEngine.Internal.DefaultValue] /* 0x004CD880-0x004CD8B8 */ Vector3 up); // 0x0058CA70-0x0058CA78
		public static float Angle(Quaternion a, Quaternion b); // 0x00B9C6EC-0x00B9C7FC
		private static Vector3 Internal_MakePositive(Vector3 euler); // 0x00B9C7FC-0x00B9CA48
		public static Quaternion Euler(float x, float y, float z); // 0x00B9CA48-0x00B9CB3C
		public static Quaternion Euler(Vector3 euler); // 0x00B9CB3C-0x00B9CD28
		public override int GetHashCode(); // 0x0058CA88-0x0058CA90
		public override bool Equals(object other); // 0x0058CA90-0x0058CA98
		public bool Equals(Quaternion other); // 0x0058CA98-0x0058CAA0
		public override string ToString(); // 0x0058CAA0-0x0058CAA8
		private static void FromToRotation_Injected(ref Vector3 fromDirection, ref Vector3 toDirection, out Quaternion ret); // 0x00B9BA8C-0x00B9BAE4
		private static void Inverse_Injected(ref Quaternion rotation, out Quaternion ret); // 0x00B9BB88-0x00B9BBD8
		private static void Slerp_Injected(ref Quaternion a, ref Quaternion b, float t, out Quaternion ret); // 0x00B9BC98-0x00B9BD00
		private static void SlerpUnclamped_Injected(ref Quaternion a, ref Quaternion b, float t, out Quaternion ret); // 0x00B9BDC0-0x00B9BE28
		private static void Lerp_Injected(ref Quaternion a, ref Quaternion b, float t, out Quaternion ret); // 0x00B9BEE8-0x00B9BF50
		private static void Internal_FromEulerRad_Injected(ref Vector3 euler, out Quaternion ret); // 0x00B9BFF4-0x00B9C044
		private static void Internal_ToEulerRad_Injected(ref Quaternion rotation, out Vector3 ret); // 0x00B9C0EC-0x00B9C13C
		private static void AngleAxis_Injected(float angle, ref Vector3 axis, out Quaternion ret); // 0x00B9C1F0-0x00B9C250
		private static void LookRotation_Injected(ref Vector3 forward, [UnityEngine.Internal.DefaultValue] /* 0x004CD8B8-0x004CD8F0 */ ref Vector3 upwards, out Quaternion ret); // 0x00B9C300-0x00B9C358
	}

	[NativeHeader] // 0x004C3594-0x004C363C
	[NativeHeader] // 0x004C3594-0x004C363C
	[NativeHeader] // 0x004C3594-0x004C363C
	[NativeHeader] // 0x004C3594-0x004C363C
	public struct Mathf // TypeDefIndex: 1851
	{
		// Fields
		public static readonly float Epsilon; // 0x00
	
		// Constructors
		static Mathf(); // 0x00AE2D70-0x00AE2E70
	
		// Methods
		[FreeFunction] // 0x004CAE88-0x004CAEBC
		public static float GammaToLinearSpace(float value); // 0x00AD64A4-0x00AD6568
		[FreeFunction] // 0x004CAEBC-0x004CAF00
		public static float PerlinNoise(float x, float y); // 0x00AE1A80-0x00AE1ACC
		public static float Sin(float f); // 0x00AE1ACC-0x00AE1B40
		public static float Cos(float f); // 0x00AE1B40-0x00AE1BB4
		public static float Tan(float f); // 0x00AE1BB4-0x00AE1C28
		public static float Acos(float f); // 0x00AE1C28-0x00AE1C9C
		public static float Atan(float f); // 0x00AE1C9C-0x00AE1D10
		public static float Atan2(float y, float x); // 0x00AE1D10-0x00AE1D8C
		public static float Sqrt(float f); // 0x00AE1D8C-0x00AE1E14
		public static float Abs(float f); // 0x00AE1E14-0x00AE1E80
		public static int Abs(int value); // 0x00AE1E80-0x00AE1EE8
		public static float Min(float a, float b); // 0x00AE1EE8-0x00AE1EF4
		public static float Min(params /* 0x004CD8F0-0x004CD900 */ float[] values); // 0x00AE1EF4-0x00AE1F6C
		public static int Min(int a, int b); // 0x00AE1F6C-0x00AE1F78
		public static float Max(float a, float b); // 0x00AD6568-0x00AD6574
		public static float Max(params /* 0x004CD900-0x004CD910 */ float[] values); // 0x00AE1F78-0x00AE1FF0
		public static int Max(int a, int b); // 0x00AE1FF0-0x00AE1FFC
		public static float Pow(float f, float p); // 0x00AE1FFC-0x00AE2078
		public static float Exp(float power); // 0x00AE2078-0x00AE20EC
		public static float Log(float f, float p); // 0x00AE20EC-0x00AE216C
		public static float Log(float f); // 0x00AE216C-0x00AE21E0
		public static float Ceil(float f); // 0x00AE21E0-0x00AE224C
		public static float Floor(float f); // 0x00AE224C-0x00AE22B8
		public static float Round(float f); // 0x00AE22B8-0x00AE2390
		public static int CeilToInt(float f); // 0x00AE2390-0x00AE23FC
		public static int FloorToInt(float f); // 0x00AE23FC-0x00AE2468
		public static int RoundToInt(float f); // 0x00AE2468-0x00AE2540
		public static float Sign(float f); // 0x00AE2540-0x00AE2554
		public static float Clamp(float value, float min, float max); // 0x00AE2554-0x00AE2570
		public static int Clamp(int value, int min, int max); // 0x00AE2570-0x00AE258C
		public static float Clamp01(float value); // 0x00AD6290-0x00AD62C8
		public static float Lerp(float a, float b, float t); // 0x00AE258C-0x00AE2624
		public static float LerpAngle(float a, float b, float t); // 0x00AE2624-0x00AE26FC
		public static float MoveTowards(float current, float target, float maxDelta); // 0x00AE278C-0x00AE2848
		public static float SmoothStep(float from, float to, float t); // 0x00AE2848-0x00AE2904
		public static bool Approximately(float a, float b); // 0x00AE2904-0x00AE29B8
		[ExcludeFromDocs] // 0x004CAF00-0x004CAF10
		public static float SmoothDamp(float current, float target, ref float currentVelocity, float smoothTime); // 0x00AE29B8-0x00AE2A5C
		public static float SmoothDamp(float current, float target, ref float currentVelocity, float smoothTime, [UnityEngine.Internal.DefaultValue] /* 0x004CD910-0x004CD948 */ float maxSpeed, [UnityEngine.Internal.DefaultValue] /* 0x004CD948-0x004CD980 */ float deltaTime); // 0x00AE2A5C-0x00AE2BB0
		public static float Repeat(float t, float length); // 0x00AE26FC-0x00AE278C
		public static float PingPong(float t, float length); // 0x00AE2BB0-0x00AE2C34
		public static float InverseLerp(float a, float b, float value); // 0x00AE2C34-0x00AE2CD8
		public static float DeltaAngle(float current, float target); // 0x00AE2CD8-0x00AE2D70
	}
}

namespace UnityEngineInternal
{
	public struct MathfInternal // TypeDefIndex: 1852
	{
		// Fields
		public static float FloatMinNormal; // 0x00
		public static float FloatMinDenormal; // 0x04
		public static bool IsFlushToZeroEnabled; // 0x08
	
		// Constructors
		static MathfInternal(); // 0x00F8B820-0x00F8B8D4
	}
}

namespace UnityEngine
{
	[NativeClass] // 0x004C363C-0x004C36B8
	[RequiredByNativeCode] // 0x004C363C-0x004C36B8
	public struct Vector2 : IEquatable<Vector2> // TypeDefIndex: 1853
	{
		// Fields
		public float x; // 0x00
		public float y; // 0x04
		private static readonly Vector2 zeroVector; // 0x00
		private static readonly Vector2 oneVector; // 0x08
		private static readonly Vector2 upVector; // 0x10
		private static readonly Vector2 downVector; // 0x18
		private static readonly Vector2 leftVector; // 0x20
		private static readonly Vector2 rightVector; // 0x28
		private static readonly Vector2 positiveInfinityVector; // 0x30
		private static readonly Vector2 negativeInfinityVector; // 0x38
		public const float kEpsilon = 1E-05f; // Metadata: 0x001F4088
		public const float kEpsilonNormalSqrt = 1E-15f; // Metadata: 0x001F408C
	
		// Properties
		public float this[int index] { get => default; set {} } // 0x0059615C-0x00596164 0x00596164-0x0059616C
		public Vector2 normalized { get; } // 0x00596174-0x005961A0 
		public float magnitude { get; } // 0x00596210-0x00596218 
		public float sqrMagnitude { get; } // 0x00596218-0x0059622C 
		public static Vector2 zero { get; } // 0x00F88494-0x00F88744 
		public static Vector2 one { get; } // 0x00F88A0C-0x00F88A74 
		public static Vector2 up { get; } // 0x00F88A74-0x00F88ADC 
		public static Vector2 down { get; } // 0x00F88ADC-0x00F88B44 
		public static Vector2 left { get; } // 0x00F88B44-0x00F88BAC 
		public static Vector2 right { get; } // 0x00F88BAC-0x00F88C14 
	
		// Constructors
		public Vector2(float x, float y); // 0x00596154-0x0059615C
		static Vector2(); // 0x00F88C14-0x00F88CC8
	
		// Methods
		public static Vector2 Lerp(Vector2 a, Vector2 b, float t); // 0x00F8827C-0x00F88328
		public static Vector2 Scale(Vector2 a, Vector2 b); // 0x00F88328-0x00F88488
		public void Normalize(); // 0x0059616C-0x00596174
		public override string ToString(); // 0x005961A0-0x005961A8
		public override int GetHashCode(); // 0x005961A8-0x005961E4
		public override bool Equals(object other); // 0x005961E4-0x005961EC
		public bool Equals(Vector2 other); // 0x005961EC-0x00596210
		public static float Dot(Vector2 lhs, Vector2 rhs); // 0x00F88744-0x00F88768
		public static float Distance(Vector2 a, Vector2 b); // 0x00F88768-0x00F8881C
		public static float SqrMagnitude(Vector2 a); // 0x00F8881C-0x00F8882C
		public static Vector2 Min(Vector2 lhs, Vector2 rhs); // 0x00F8882C-0x00F888D4
		public static Vector2 operator +(Vector2 a, Vector2 b); // 0x00F888D4-0x00F888E0
		public static Vector2 operator -(Vector2 a, Vector2 b); // 0x00F888E0-0x00F888EC
		public static Vector2 operator *(Vector2 a, Vector2 b); // 0x00F888EC-0x00F888F8
		public static Vector2 operator /(Vector2 a, Vector2 b); // 0x00F888F8-0x00F88904
		public static Vector2 operator -(Vector2 a); // 0x00F88904-0x00F88910
		public static Vector2 operator *(Vector2 a, float d); // 0x00F88910-0x00F8891C
		public static Vector2 operator *(float d, Vector2 a); // 0x00F8891C-0x00F8892C
		public static Vector2 operator /(Vector2 a, float d); // 0x00F88488-0x00F88494
		public static bool operator ==(Vector2 lhs, Vector2 rhs); // 0x00F8892C-0x00F88954
		public static bool operator !=(Vector2 lhs, Vector2 rhs); // 0x00F88954-0x00F889F4
		public static implicit operator Vector2(Vector3 v); // 0x00F889F4-0x00F889F8
		public static implicit operator Vector3(Vector2 v); // 0x00F889F8-0x00F88A0C
	}

	[DefaultMember] // 0x004C36B8-0x004C3704
	[UsedByNativeCode] // 0x004C36B8-0x004C3704
	public struct Vector3Int : IEquatable<Vector3Int> // TypeDefIndex: 1854
	{
		// Fields
		private int m_X; // 0x00
		private int m_Y; // 0x04
		private int m_Z; // 0x08
		private static readonly Vector3Int s_Zero; // 0x00
		private static readonly Vector3Int s_One; // 0x0C
		private static readonly Vector3Int s_Up; // 0x18
		private static readonly Vector3Int s_Down; // 0x24
		private static readonly Vector3Int s_Left; // 0x30
		private static readonly Vector3Int s_Right; // 0x3C
	
		// Properties
		public int x { get; } // 0x0059630C-0x00596314 
		public int y { get; } // 0x00596314-0x0059631C 
		public int z { get; } // 0x0059631C-0x00596324 
	
		// Constructors
		public Vector3Int(int x, int y, int z); // 0x00596300-0x0059630C
		static Vector3Int(); // 0x00F8A7E4-0x00F8AA2C
	
		// Methods
		public static bool operator ==(Vector3Int lhs, Vector3Int rhs); // 0x00F8A494-0x00F8A7E4
		public override bool Equals(object other); // 0x00596324-0x0059632C
		public bool Equals(Vector3Int other); // 0x0059632C-0x00596338
		public override int GetHashCode(); // 0x00596338-0x00596340
		public override string ToString(); // 0x00596340-0x00596348
	}

	[NativeClass] // 0x004C3704-0x004C37A4
	[NativeHeader] // 0x004C3704-0x004C37A4
	[RequiredByNativeCode] // 0x004C3704-0x004C37A4
	public struct Vector4 : IEquatable<Vector4> // TypeDefIndex: 1855
	{
		// Fields
		public const float kEpsilon = 1E-05f; // Metadata: 0x001F4090
		public float x; // 0x00
		public float y; // 0x04
		public float z; // 0x08
		public float w; // 0x0C
		private static readonly Vector4 zeroVector; // 0x00
		private static readonly Vector4 oneVector; // 0x10
		private static readonly Vector4 positiveInfinityVector; // 0x20
		private static readonly Vector4 negativeInfinityVector; // 0x30
	
		// Properties
		public float this[int index] { get => default; set {} } // 0x00596354-0x0059635C 0x0059635C-0x00596364
		public Vector4 normalized { get; } // 0x005963B0-0x005963B8 
		public float sqrMagnitude { get; } // 0x005963B8-0x005963C0 
		public static Vector4 zero { get; } // 0x00F8AE54-0x00F8AF48 
	
		// Constructors
		public Vector4(float x, float y, float z, float w); // 0x00596348-0x00596354
		static Vector4(); // 0x00F8B2E0-0x00F8B35C
	
		// Methods
		public static Vector4 Lerp(Vector4 a, Vector4 b, float t); // 0x00F8AA2C-0x00F8AC68
		public override int GetHashCode(); // 0x00596364-0x0059636C
		public override bool Equals(object other); // 0x0059636C-0x00596374
		public bool Equals(Vector4 other); // 0x00596374-0x005963B0
		public static Vector4 Normalize(Vector4 a); // 0x00F8AC68-0x00F8AD64
		public static float Dot(Vector4 a, Vector4 b); // 0x00F8AF48-0x00F8AFFC
		public static float Magnitude(Vector4 a); // 0x00F8AD64-0x00F8AE40
		public static Vector4 operator *(Vector4 a, float d); // 0x00F8AFFC-0x00F8B010
		public static Vector4 operator /(Vector4 a, float d); // 0x00F8AE40-0x00F8AE54
		public static bool operator ==(Vector4 lhs, Vector4 rhs); // 0x00F8B010-0x00F8B050
		public static bool operator !=(Vector4 lhs, Vector4 rhs); // 0x00F8B050-0x00F8B128
		public static implicit operator Vector3(Vector4 v); // 0x00F8B128-0x00F8B12C
		public static implicit operator Vector4(Vector2 v); // 0x00F8B12C-0x00F8B2E0
		public override string ToString(); // 0x005963C0-0x00596504
	}
}

namespace Unity.Collections
{
	public static class NativeLeakDetection // TypeDefIndex: 1856
	{
		// Fields
		private static int s_NativeLeakDetectionMode; // 0x00
	
		// Methods
		[RuntimeInitializeOnLoadMethod] // 0x004CAF10-0x004CAF20
		private static void Initialize(); // 0x00AD0028-0x00AD007C
	}

	[DebuggerDisplay] // 0x004C37A4-0x004C3890
	[DebuggerTypeProxy] // 0x004C37A4-0x004C3890
	[NativeContainer] // 0x004C37A4-0x004C3890
	[NativeContainerSupportsDeallocateOnJobCompletion] // 0x004C37A4-0x004C3890
	[NativeContainerSupportsDeferredConvertListToArray] // 0x004C37A4-0x004C3890
	[NativeContainerSupportsMinMaxWriteRestriction] // 0x004C37A4-0x004C3890
	public struct NativeArray<T> : IDisposable, IEnumerable<T>, IEquatable<NativeArray<T>> // TypeDefIndex: 1857
		where T : struct
	{
		// Fields
		[NativeDisableUnsafePtrRestriction] // 0x004C683C-0x004C684C
		internal unsafe void* m_Buffer;
		internal int m_Length;
		internal Allocator m_AllocatorLabel;
	
		// Properties
		public int Length { [CompilerGenerated] /* 0x004CAF20-0x004CAF30 */ get; }
		public T this[int index] { get => default; [WriteAccessRequired] /* 0x004CAF30-0x004CAF40 */ set {} }
	
		// Nested types
		[ExcludeFromDocs] // 0x004C3890-0x004C38A0
		public struct Enumerator : IEnumerator<T> // TypeDefIndex: 1858
		{
			// Fields
			private NativeArray<T> m_Array;
			private int m_Index;
	
			// Properties
			object IEnumerator.Current { [CompilerGenerated] /* 0x004CAF60-0x004CAF70 */ get; }
			public T Current { [CompilerGenerated] /* 0x004CAF50-0x004CAF60 */ get; }
	
			// Constructors
			public Enumerator(ref NativeArray<T> array);
	
			// Methods
			public void Dispose();
			public bool MoveNext();
			public void Reset();
		}
	
		// Methods
		[WriteAccessRequired] // 0x004CAF40-0x004CAF50
		public void Dispose();
		public Enumerator GetEnumerator();
		IEnumerator<T> IEnumerable<T>.GetEnumerator();
		IEnumerator IEnumerable.GetEnumerator();
		public bool Equals(NativeArray<T> other);
		public override bool Equals(object obj);
		public override int GetHashCode();
	}

	internal sealed class NativeArrayDebugView<T> // TypeDefIndex: 1859
		where T : struct
	{
	}
}

namespace Unity.Collections.LowLevel.Unsafe
{
	public static class NativeArrayUnsafeUtility // TypeDefIndex: 1860
	{
		// Methods
		public static unsafe NativeArray<T> ConvertExistingDataToNativeArray<T>(void* dataPointer, int length, Allocator allocator)
			where T : struct;
	}
}

namespace UnityEngine.Networking.PlayerConnection
{
	[Serializable]
	public class MessageEventArgs // TypeDefIndex: 1861
	{
		// Fields
		public int playerId; // 0x10
		public byte[] data; // 0x18
	
		// Constructors
		public MessageEventArgs(); // 0x00AE6728-0x00AE6730
	}

	[Serializable]
	public class PlayerConnection : ScriptableObject // TypeDefIndex: 1862
	{
		// Fields
		internal static IPlayerEditorConnectionNative connectionNative; // 0x00
		[SerializeField] // 0x004C684C-0x004C685C
		private PlayerEditorConnectionEvents m_PlayerEditorConnectionEvents; // 0x18
		[SerializeField] // 0x004C685C-0x004C686C
		private List<int> m_connectedPlayers; // 0x20
		private bool m_IsInitilized; // 0x28
		private static PlayerConnection s_Instance; // 0x08
	
		// Properties
		public static PlayerConnection instance { get; } // 0x00AE67C0-0x00AE685C 
		public bool isConnected { get; } // 0x00AE68E4-0x00AE6998 
	
		// Nested types
		[CompilerGenerated] // 0x004C38B0-0x004C38C0
		private sealed class _Register_c__AnonStorey0 // TypeDefIndex: 1863
		{
			// Fields
			internal Guid messageId; // 0x10
	
			// Constructors
			public _Register_c__AnonStorey0(); // 0x00B93CBC-0x00B93CC4
	
			// Methods
			internal bool __m__0(PlayerEditorConnectionEvents.MessageTypeSubscribers x); // 0x00B93CC4-0x00B93D7C
		}
	
		[CompilerGenerated] // 0x004C38C0-0x004C38D0
		private sealed class _Unregister_c__AnonStorey1 // TypeDefIndex: 1864
		{
			// Fields
			internal Guid messageId; // 0x10
	
			// Constructors
			public _Unregister_c__AnonStorey1(); // 0x00B93DAC-0x00B93DB4
	
			// Methods
			internal bool __m__0(PlayerEditorConnectionEvents.MessageTypeSubscribers x); // 0x00B93DB4-0x00B93E6C
		}
	
		[CompilerGenerated] // 0x004C38D0-0x004C38E0
		private sealed class _BlockUntilRecvMsg_c__AnonStorey2 // TypeDefIndex: 1865
		{
			// Fields
			internal bool msgReceived; // 0x10
	
			// Constructors
			public _BlockUntilRecvMsg_c__AnonStorey2(); // 0x00B93CA8-0x00B93CB0
	
			// Methods
			internal void __m__0(MessageEventArgs args); // 0x00B93CB0-0x00B93CBC
		}
	
		// Constructors
		public PlayerConnection(); // 0x00AE6730-0x00AE67C0
	
		// Methods
		private static PlayerConnection CreateInstance(); // 0x00AE685C-0x00AE68E4
		public void OnEnable(); // 0x00AE6A0C-0x00AE6ADC
		private IPlayerEditorConnectionNative GetConnectionNativeApi(); // 0x00AE6998-0x00AE6A0C
		public void Register(Guid messageId, UnityAction<MessageEventArgs> callback); // 0x00AE6ADC-0x00AE6CFC
		public void Unregister(Guid messageId, UnityAction<MessageEventArgs> callback); // 0x00AE6CFC-0x00AE6E90
		public void RegisterConnection(UnityAction<int> callback); // 0x00AE6E90-0x00AE6FE8
		public void RegisterDisconnection(UnityAction<int> callback); // 0x00AE6FE8-0x00AE705C
		public void Send(Guid messageId, byte[] data); // 0x00AE705C-0x00AE71C0
		public bool TrySend(Guid messageId, byte[] data); // 0x00AE71C0-0x00AE7324
		public bool BlockUntilRecvMsg(Guid messageId, int timeout); // 0x00AE7324-0x00AE7528
		public void DisconnectAll(); // 0x00AE7528-0x00AE75DC
		[RequiredByNativeCode] // 0x004CAF70-0x004CAF80
		private static void MessageCallbackInternal(IntPtr data, ulong size, ulong guid, string messageId); // 0x00AE75DC-0x00AE7704
		[RequiredByNativeCode] // 0x004CAF80-0x004CAF90
		private static void ConnectedCallbackInternal(int playerId); // 0x00AE7704-0x00AE779C
		[RequiredByNativeCode] // 0x004CAF90-0x004CAFA0
		private static void DisconnectedCallback(int playerId); // 0x00AE779C-0x00AEFFFC
	}

	[Serializable]
	internal class PlayerEditorConnectionEvents // TypeDefIndex: 1866
	{
		// Fields
		[SerializeField] // 0x004C686C-0x004C687C
		public List<MessageTypeSubscribers> messageTypeSubscribers; // 0x10
		[SerializeField] // 0x004C687C-0x004C688C
		public ConnectionChangeEvent connectionEvent; // 0x18
		[SerializeField] // 0x004C688C-0x004C689C
		public ConnectionChangeEvent disconnectionEvent; // 0x20
	
		// Nested types
		[Serializable]
		public class MessageEvent : UnityEvent<MessageEventArgs> // TypeDefIndex: 1867
		{
			// Constructors
			public MessageEvent(); // 0x00B94544-0x00B94594
		}
	
		[Serializable]
		public class ConnectionChangeEvent : UnityEvent<int> // TypeDefIndex: 1868
		{
			// Constructors
			public ConnectionChangeEvent(); // 0x00B93F14-0x00B93F64
		}
	
		[Serializable]
		public class MessageTypeSubscribers // TypeDefIndex: 1869
		{
			// Fields
			[SerializeField] // 0x004C689C-0x004C68AC
			private string m_messageTypeId; // 0x10
			public int subscriberCount; // 0x18
			public MessageEvent messageCallback; // 0x20
	
			// Properties
			public Guid MessageTypeId { get; set; } // 0x00B93D7C-0x00B93DAC 0x00B9450C-0x00B94544
	
			// Constructors
			public MessageTypeSubscribers(); // 0x00B944A4-0x00B9450C
		}
	
		[CompilerGenerated] // 0x004C38E0-0x004C38F0
		private sealed class _InvokeMessageIdSubscribers_c__AnonStorey0 // TypeDefIndex: 1870
		{
			// Fields
			internal Guid messageId; // 0x10
	
			// Constructors
			public _InvokeMessageIdSubscribers_c__AnonStorey0(); // 0x00B9433C-0x00B94344
	
			// Methods
			internal bool __m__0(MessageTypeSubscribers x); // 0x00B94794-0x00B9484C
		}
	
		[CompilerGenerated] // 0x004C38F0-0x004C3900
		private sealed class _AddAndCreate_c__AnonStorey1 // TypeDefIndex: 1871
		{
			// Fields
			internal Guid messageId; // 0x10
	
			// Constructors
			public _AddAndCreate_c__AnonStorey1(); // 0x00B9449C-0x00B944A4
	
			// Methods
			internal bool __m__0(MessageTypeSubscribers x); // 0x00B946DC-0x00B94794
		}
	
		[CompilerGenerated] // 0x004C3900-0x004C3910
		private sealed class _UnregisterManagedCallback_c__AnonStorey2 // TypeDefIndex: 1872
		{
			// Fields
			internal Guid messageId; // 0x10
	
			// Constructors
			public _UnregisterManagedCallback_c__AnonStorey2(); // 0x00B946D4-0x00B946DC
	
			// Methods
			internal bool __m__0(MessageTypeSubscribers x); // 0x00B9484C-0x00B94904
		}
	
		// Constructors
		public PlayerEditorConnectionEvents(); // 0x00B93E6C-0x00B93F14
	
		// Methods
		public void InvokeMessageIdSubscribers(Guid messageId, byte[] data, int playerId); // 0x00B93F64-0x00B9433C
		public UnityEvent<MessageEventArgs> AddAndCreate(Guid messageId); // 0x00B94344-0x00B9449C
		public void UnregisterManagedCallback(Guid messageId, UnityAction<MessageEventArgs> callback); // 0x00B94594-0x00B946D4
	}
}

namespace UnityEngine
{
	internal interface IPlayerEditorConnectionNative // TypeDefIndex: 1873
	{
		// Methods
		void Initialize();
		void DisconnectAll();
		void SendMessage(Guid messageId, byte[] data, int playerId);
		bool TrySendMessage(Guid messageId, byte[] data, int playerId);
		void Poll();
		void RegisterInternal(Guid messageId);
		void UnregisterInternal(Guid messageId);
		bool IsConnected();
	}

	[NativeHeader] // 0x004C3910-0x004C3948
	internal class PlayerConnectionInternal : IPlayerEditorConnectionNative // TypeDefIndex: 1874
	{
		// Constructors
		public PlayerConnectionInternal(); // 0x00B99B7C-0x00B99B84
	
		// Methods
		void IPlayerEditorConnectionNative.SendMessage(Guid messageId, byte[] data, int playerId); // 0x00B99B84-0x00B99CB8
		bool IPlayerEditorConnectionNative.TrySendMessage(Guid messageId, byte[] data, int playerId); // 0x00B99D10-0x00B99E48
		void IPlayerEditorConnectionNative.Poll(); // 0x00B99EA0-0x00B99ED4
		void IPlayerEditorConnectionNative.RegisterInternal(Guid messageId); // 0x00B99F08-0x00B99F94
		void IPlayerEditorConnectionNative.UnregisterInternal(Guid messageId); // 0x00B99FD4-0x00B9A060
		void IPlayerEditorConnectionNative.Initialize(); // 0x00B9A0A0-0x00B9A0D4
		bool IPlayerEditorConnectionNative.IsConnected(); // 0x00B9A108-0x00B9A13C
		void IPlayerEditorConnectionNative.DisconnectAll(); // 0x00B9A170-0x00B9A1A4
		[FreeFunction] // 0x004CAFA0-0x004CAFD8
		private static bool IsConnected(); // 0x00B9A13C-0x00B9A170
		[FreeFunction] // 0x004CAFD8-0x004CB010
		private static void Initialize(); // 0x00B9A0D4-0x00B9A108
		[FreeFunction] // 0x004CB010-0x004CB048
		private static void RegisterInternal(string messageId); // 0x00B99F94-0x00B99FD4
		[FreeFunction] // 0x004CB048-0x004CB080
		private static void UnregisterInternal(string messageId); // 0x00B9A060-0x00B9A0A0
		[FreeFunction] // 0x004CB080-0x004CB0B8
		private static void SendMessage(string messageId, byte[] data, int playerId); // 0x00B99CB8-0x00B99D10
		[FreeFunction] // 0x004CB0B8-0x004CB0F0
		private static bool TrySendMessage(string messageId, byte[] data, int playerId); // 0x00B99E48-0x00B99EA0
		[FreeFunction] // 0x004CB0F0-0x004CB128
		private static void PollInternal(); // 0x00B99ED4-0x00B99F08
		[FreeFunction] // 0x004CB128-0x004CB160
		private static void DisconnectAll(); // 0x00B9A1A4-0x00B9A1D8
	}
}

namespace UnityEngine.Experimental.PlayerLoop
{
	[RequiredByNativeCode] // 0x004C3948-0x004C3958
	public struct Initialization // TypeDefIndex: 1875
	{
		// Nested types
		[RequiredByNativeCode] // 0x004C3958-0x004C3968
		public struct PlayerUpdateTime // TypeDefIndex: 1876
		{
		}
	
		[RequiredByNativeCode] // 0x004C3968-0x004C3978
		public struct AsyncUploadTimeSlicedUpdate // TypeDefIndex: 1877
		{
		}
	
		[RequiredByNativeCode] // 0x004C3978-0x004C3988
		public struct SynchronizeState // TypeDefIndex: 1878
		{
		}
	
		[RequiredByNativeCode] // 0x004C3988-0x004C3998
		public struct SynchronizeInputs // TypeDefIndex: 1879
		{
		}
	
		[RequiredByNativeCode] // 0x004C3998-0x004C39A8
		public struct XREarlyUpdate // TypeDefIndex: 1880
		{
		}
	}

	[RequiredByNativeCode] // 0x004C39A8-0x004C39B8
	public struct EarlyUpdate // TypeDefIndex: 1881
	{
		// Nested types
		[RequiredByNativeCode] // 0x004C39B8-0x004C39C8
		public struct PollPlayerConnection // TypeDefIndex: 1882
		{
		}
	
		[RequiredByNativeCode] // 0x004C39C8-0x004C39D8
		public struct ProfilerStartFrame // TypeDefIndex: 1883
		{
		}
	
		[RequiredByNativeCode] // 0x004C39D8-0x004C39E8
		public struct PollHtcsPlayerConnection // TypeDefIndex: 1884
		{
		}
	
		[RequiredByNativeCode] // 0x004C39E8-0x004C39F8
		public struct GpuTimestamp // TypeDefIndex: 1885
		{
		}
	
		[RequiredByNativeCode] // 0x004C39F8-0x004C3A08
		public struct AnalyticsCoreStatsUpdate // TypeDefIndex: 1886
		{
		}
	
		[RequiredByNativeCode] // 0x004C3A08-0x004C3A18
		public struct UnityWebRequestUpdate // TypeDefIndex: 1887
		{
		}
	
		[RequiredByNativeCode] // 0x004C3A18-0x004C3A28
		public struct UpdateStreamingManager // TypeDefIndex: 1888
		{
		}
	
		[RequiredByNativeCode] // 0x004C3A28-0x004C3A38
		public struct ExecuteMainThreadJobs // TypeDefIndex: 1889
		{
		}
	
		[RequiredByNativeCode] // 0x004C3A38-0x004C3A48
		public struct ProcessMouseInWindow // TypeDefIndex: 1890
		{
		}
	
		[RequiredByNativeCode] // 0x004C3A48-0x004C3A58
		public struct ClearIntermediateRenderers // TypeDefIndex: 1891
		{
		}
	
		[RequiredByNativeCode] // 0x004C3A58-0x004C3A68
		public struct ClearLines // TypeDefIndex: 1892
		{
		}
	
		[RequiredByNativeCode] // 0x004C3A68-0x004C3A78
		public struct PresentBeforeUpdate // TypeDefIndex: 1893
		{
		}
	
		[RequiredByNativeCode] // 0x004C3A78-0x004C3A88
		public struct ResetFrameStatsAfterPresent // TypeDefIndex: 1894
		{
		}
	
		[RequiredByNativeCode] // 0x004C3A88-0x004C3A98
		public struct UpdateAsyncReadbackManager // TypeDefIndex: 1895
		{
		}
	
		[RequiredByNativeCode] // 0x004C3A98-0x004C3AA8
		public struct UpdateTextureStreamingManager // TypeDefIndex: 1896
		{
		}
	
		[RequiredByNativeCode] // 0x004C3AA8-0x004C3AB8
		public struct UpdatePreloading // TypeDefIndex: 1897
		{
		}
	
		[RequiredByNativeCode] // 0x004C3AB8-0x004C3AC8
		public struct RendererNotifyInvisible // TypeDefIndex: 1898
		{
		}
	
		[RequiredByNativeCode] // 0x004C3AC8-0x004C3AD8
		public struct PlayerCleanupCachedData // TypeDefIndex: 1899
		{
		}
	
		[RequiredByNativeCode] // 0x004C3AD8-0x004C3AE8
		public struct UpdateMainGameViewRect // TypeDefIndex: 1900
		{
		}
	
		[RequiredByNativeCode] // 0x004C3AE8-0x004C3AF8
		public struct UpdateCanvasRectTransform // TypeDefIndex: 1901
		{
		}
	
		[RequiredByNativeCode] // 0x004C3AF8-0x004C3B08
		public struct UpdateInputManager // TypeDefIndex: 1902
		{
		}
	
		[RequiredByNativeCode] // 0x004C3B08-0x004C3B18
		public struct ProcessRemoteInput // TypeDefIndex: 1903
		{
		}
	
		[RequiredByNativeCode] // 0x004C3B18-0x004C3B28
		public struct XRUpdate // TypeDefIndex: 1904
		{
		}
	
		[RequiredByNativeCode] // 0x004C3B28-0x004C3B38
		public struct ScriptRunDelayedStartupFrame // TypeDefIndex: 1905
		{
		}
	
		[RequiredByNativeCode] // 0x004C3B38-0x004C3B48
		public struct UpdateKinect // TypeDefIndex: 1906
		{
		}
	
		[RequiredByNativeCode] // 0x004C3B48-0x004C3B58
		public struct DeliverIosPlatformEvents // TypeDefIndex: 1907
		{
		}
	
		[RequiredByNativeCode] // 0x004C3B58-0x004C3B68
		public struct DispatchEventQueueEvents // TypeDefIndex: 1908
		{
		}
	
		[RequiredByNativeCode] // 0x004C3B68-0x004C3B78
		public struct DirectorSampleTime // TypeDefIndex: 1909
		{
		}
	
		[RequiredByNativeCode] // 0x004C3B78-0x004C3B88
		public struct PhysicsResetInterpolatedTransformPosition // TypeDefIndex: 1910
		{
		}
	
		[RequiredByNativeCode] // 0x004C3B88-0x004C3B98
		public struct SpriteAtlasManagerUpdate // TypeDefIndex: 1911
		{
		}
	
		[RequiredByNativeCode] // 0x004C3B98-0x004C3BA8
		public struct TangoUpdate // TypeDefIndex: 1912
		{
		}
	
		[RequiredByNativeCode] // 0x004C3BA8-0x004C3BB8
		public struct PerformanceAnalyticsUpdate // TypeDefIndex: 1913
		{
		}
	}

	[RequiredByNativeCode] // 0x004C3BB8-0x004C3BC8
	public struct FixedUpdate // TypeDefIndex: 1914
	{
		// Nested types
		[RequiredByNativeCode] // 0x004C3BC8-0x004C3BD8
		public struct ClearLines // TypeDefIndex: 1915
		{
		}
	
		[RequiredByNativeCode] // 0x004C3BD8-0x004C3BE8
		public struct DirectorFixedSampleTime // TypeDefIndex: 1916
		{
		}
	
		[RequiredByNativeCode] // 0x004C3BE8-0x004C3BF8
		public struct AudioFixedUpdate // TypeDefIndex: 1917
		{
		}
	
		[RequiredByNativeCode] // 0x004C3BF8-0x004C3C08
		public struct ScriptRunBehaviourFixedUpdate // TypeDefIndex: 1918
		{
		}
	
		[RequiredByNativeCode] // 0x004C3C08-0x004C3C18
		public struct DirectorFixedUpdate // TypeDefIndex: 1919
		{
		}
	
		[RequiredByNativeCode] // 0x004C3C18-0x004C3C28
		public struct LegacyFixedAnimationUpdate // TypeDefIndex: 1920
		{
		}
	
		[RequiredByNativeCode] // 0x004C3C28-0x004C3C38
		public struct XRFixedUpdate // TypeDefIndex: 1921
		{
		}
	
		[RequiredByNativeCode] // 0x004C3C38-0x004C3C48
		public struct PhysicsFixedUpdate // TypeDefIndex: 1922
		{
		}
	
		[RequiredByNativeCode] // 0x004C3C48-0x004C3C58
		public struct Physics2DFixedUpdate // TypeDefIndex: 1923
		{
		}
	
		[RequiredByNativeCode] // 0x004C3C58-0x004C3C68
		public struct DirectorFixedUpdatePostPhysics // TypeDefIndex: 1924
		{
		}
	
		[RequiredByNativeCode] // 0x004C3C68-0x004C3C78
		public struct ScriptRunDelayedFixedFrameRate // TypeDefIndex: 1925
		{
		}
	
		[RequiredByNativeCode] // 0x004C3C78-0x004C3C88
		public struct NewInputFixedUpdate // TypeDefIndex: 1926
		{
		}
	}

	[RequiredByNativeCode] // 0x004C3C88-0x004C3C98
	public struct PreUpdate // TypeDefIndex: 1927
	{
		// Nested types
		[RequiredByNativeCode] // 0x004C3C98-0x004C3CA8
		public struct PhysicsUpdate // TypeDefIndex: 1928
		{
		}
	
		[RequiredByNativeCode] // 0x004C3CA8-0x004C3CB8
		public struct Physics2DUpdate // TypeDefIndex: 1929
		{
		}
	
		[RequiredByNativeCode] // 0x004C3CB8-0x004C3CC8
		public struct CheckTexFieldInput // TypeDefIndex: 1930
		{
		}
	
		[RequiredByNativeCode] // 0x004C3CC8-0x004C3CD8
		public struct IMGUISendQueuedEvents // TypeDefIndex: 1931
		{
		}
	
		[RequiredByNativeCode] // 0x004C3CD8-0x004C3CE8
		public struct SendMouseEvents // TypeDefIndex: 1932
		{
		}
	
		[RequiredByNativeCode] // 0x004C3CE8-0x004C3CF8
		public struct AIUpdate // TypeDefIndex: 1933
		{
		}
	
		[RequiredByNativeCode] // 0x004C3CF8-0x004C3D08
		public struct WindUpdate // TypeDefIndex: 1934
		{
		}
	
		[RequiredByNativeCode] // 0x004C3D08-0x004C3D18
		public struct UpdateVideo // TypeDefIndex: 1935
		{
		}
	
		[RequiredByNativeCode] // 0x004C3D18-0x004C3D28
		public struct NewInputUpdate // TypeDefIndex: 1936
		{
		}
	}

	[RequiredByNativeCode] // 0x004C3D28-0x004C3D38
	public struct Update // TypeDefIndex: 1937
	{
		// Nested types
		[RequiredByNativeCode] // 0x004C3D38-0x004C3D48
		public struct ScriptRunBehaviourUpdate // TypeDefIndex: 1938
		{
		}
	
		[RequiredByNativeCode] // 0x004C3D48-0x004C3D58
		public struct DirectorUpdate // TypeDefIndex: 1939
		{
		}
	
		[RequiredByNativeCode] // 0x004C3D58-0x004C3D68
		public struct ScriptRunDelayedDynamicFrameRate // TypeDefIndex: 1940
		{
		}
	
		[RequiredByNativeCode] // 0x004C3D68-0x004C3D78
		public struct ScriptRunDelayedTasks // TypeDefIndex: 1941
		{
		}
	}

	[RequiredByNativeCode] // 0x004C3D78-0x004C3D88
	public struct PreLateUpdate // TypeDefIndex: 1942
	{
		// Nested types
		[RequiredByNativeCode] // 0x004C3D88-0x004C3D98
		public struct AIUpdatePostScript // TypeDefIndex: 1943
		{
		}
	
		[RequiredByNativeCode] // 0x004C3D98-0x004C3DA8
		public struct DirectorUpdateAnimationBegin // TypeDefIndex: 1944
		{
		}
	
		[RequiredByNativeCode] // 0x004C3DA8-0x004C3DB8
		public struct LegacyAnimationUpdate // TypeDefIndex: 1945
		{
		}
	
		[RequiredByNativeCode] // 0x004C3DB8-0x004C3DC8
		public struct DirectorUpdateAnimationEnd // TypeDefIndex: 1946
		{
		}
	
		[RequiredByNativeCode] // 0x004C3DC8-0x004C3DD8
		public struct DirectorDeferredEvaluate // TypeDefIndex: 1947
		{
		}
	
		[RequiredByNativeCode] // 0x004C3DD8-0x004C3DE8
		public struct UpdateNetworkManager // TypeDefIndex: 1948
		{
		}
	
		[RequiredByNativeCode] // 0x004C3DE8-0x004C3DF8
		public struct UpdateMasterServerInterface // TypeDefIndex: 1949
		{
		}
	
		[RequiredByNativeCode] // 0x004C3DF8-0x004C3E08
		public struct UNetUpdate // TypeDefIndex: 1950
		{
		}
	
		[RequiredByNativeCode] // 0x004C3E08-0x004C3E18
		public struct EndGraphicsJobsAfterScriptUpdate // TypeDefIndex: 1951
		{
		}
	
		[RequiredByNativeCode] // 0x004C3E18-0x004C3E28
		public struct ParticleSystemBeginUpdateAll // TypeDefIndex: 1952
		{
		}
	
		[RequiredByNativeCode] // 0x004C3E28-0x004C3E38
		public struct ScriptRunBehaviourLateUpdate // TypeDefIndex: 1953
		{
		}
	
		[RequiredByNativeCode] // 0x004C3E38-0x004C3E48
		public struct ConstraintManagerUpdate // TypeDefIndex: 1954
		{
		}
	}

	[RequiredByNativeCode] // 0x004C3E48-0x004C3E58
	public struct PostLateUpdate // TypeDefIndex: 1955
	{
		// Nested types
		[RequiredByNativeCode] // 0x004C3E58-0x004C3E68
		public struct PlayerSendFrameStarted // TypeDefIndex: 1956
		{
		}
	
		[RequiredByNativeCode] // 0x004C3E68-0x004C3E78
		public struct UpdateRectTransform // TypeDefIndex: 1957
		{
		}
	
		[RequiredByNativeCode] // 0x004C3E78-0x004C3E88
		public struct UpdateCanvasRectTransform // TypeDefIndex: 1958
		{
		}
	
		[RequiredByNativeCode] // 0x004C3E88-0x004C3E98
		public struct PlayerUpdateCanvases // TypeDefIndex: 1959
		{
		}
	
		[RequiredByNativeCode] // 0x004C3E98-0x004C3EA8
		public struct UpdateAudio // TypeDefIndex: 1960
		{
		}
	
		[RequiredByNativeCode] // 0x004C3EA8-0x004C3EB8
		public struct UpdateVideo // TypeDefIndex: 1961
		{
		}
	
		[RequiredByNativeCode] // 0x004C3EB8-0x004C3EC8
		public struct DirectorLateUpdate // TypeDefIndex: 1962
		{
		}
	
		[RequiredByNativeCode] // 0x004C3EC8-0x004C3ED8
		public struct ScriptRunDelayedDynamicFrameRate // TypeDefIndex: 1963
		{
		}
	
		[RequiredByNativeCode] // 0x004C3ED8-0x004C3EE8
		public struct VFXUpdate // TypeDefIndex: 1964
		{
		}
	
		[RequiredByNativeCode] // 0x004C3EE8-0x004C3EF8
		public struct ParticleSystemEndUpdateAll // TypeDefIndex: 1965
		{
		}
	
		[RequiredByNativeCode] // 0x004C3EF8-0x004C3F08
		public struct EndGraphicsJobsAfterScriptLateUpdate // TypeDefIndex: 1966
		{
		}
	
		[RequiredByNativeCode] // 0x004C3F08-0x004C3F18
		public struct UpdateSubstance // TypeDefIndex: 1967
		{
		}
	
		[RequiredByNativeCode] // 0x004C3F18-0x004C3F28
		public struct UpdateCustomRenderTextures // TypeDefIndex: 1968
		{
		}
	
		[RequiredByNativeCode] // 0x004C3F28-0x004C3F38
		public struct UpdateAllRenderers // TypeDefIndex: 1969
		{
		}
	
		[RequiredByNativeCode] // 0x004C3F38-0x004C3F48
		public struct EnlightenRuntimeUpdate // TypeDefIndex: 1970
		{
		}
	
		[RequiredByNativeCode] // 0x004C3F48-0x004C3F58
		public struct UpdateAllSkinnedMeshes // TypeDefIndex: 1971
		{
		}
	
		[RequiredByNativeCode] // 0x004C3F58-0x004C3F68
		public struct ProcessWebSendMessages // TypeDefIndex: 1972
		{
		}
	
		[RequiredByNativeCode] // 0x004C3F68-0x004C3F78
		public struct SortingGroupsUpdate // TypeDefIndex: 1973
		{
		}
	
		[RequiredByNativeCode] // 0x004C3F78-0x004C3F88
		public struct UpdateVideoTextures // TypeDefIndex: 1974
		{
		}
	
		[RequiredByNativeCode] // 0x004C3F88-0x004C3F98
		public struct DirectorRenderImage // TypeDefIndex: 1975
		{
		}
	
		[RequiredByNativeCode] // 0x004C3F98-0x004C3FA8
		public struct PlayerEmitCanvasGeometry // TypeDefIndex: 1976
		{
		}
	
		[RequiredByNativeCode] // 0x004C3FA8-0x004C3FB8
		public struct FinishFrameRendering // TypeDefIndex: 1977
		{
		}
	
		[RequiredByNativeCode] // 0x004C3FB8-0x004C3FC8
		public struct BatchModeUpdate // TypeDefIndex: 1978
		{
		}
	
		[RequiredByNativeCode] // 0x004C3FC8-0x004C3FD8
		public struct PlayerSendFrameComplete // TypeDefIndex: 1979
		{
		}
	
		[RequiredByNativeCode] // 0x004C3FD8-0x004C3FE8
		public struct UpdateCaptureScreenshot // TypeDefIndex: 1980
		{
		}
	
		[RequiredByNativeCode] // 0x004C3FE8-0x004C3FF8
		public struct PresentAfterDraw // TypeDefIndex: 1981
		{
		}
	
		[RequiredByNativeCode] // 0x004C3FF8-0x004C4008
		public struct ClearImmediateRenderers // TypeDefIndex: 1982
		{
		}
	
		[RequiredByNativeCode] // 0x004C4008-0x004C4018
		public struct XRPostPresent // TypeDefIndex: 1983
		{
		}
	
		[RequiredByNativeCode] // 0x004C4018-0x004C4028
		public struct UpdateResolution // TypeDefIndex: 1984
		{
		}
	
		[RequiredByNativeCode] // 0x004C4028-0x004C4038
		public struct InputEndFrame // TypeDefIndex: 1985
		{
		}
	
		[RequiredByNativeCode] // 0x004C4038-0x004C4048
		public struct GUIClearEvents // TypeDefIndex: 1986
		{
		}
	
		[RequiredByNativeCode] // 0x004C4048-0x004C4058
		public struct ShaderHandleErrors // TypeDefIndex: 1987
		{
		}
	
		[RequiredByNativeCode] // 0x004C4058-0x004C4068
		public struct ResetInputAxis // TypeDefIndex: 1988
		{
		}
	
		[RequiredByNativeCode] // 0x004C4068-0x004C4078
		public struct ThreadedLoadingDebug // TypeDefIndex: 1989
		{
		}
	
		[RequiredByNativeCode] // 0x004C4078-0x004C4088
		public struct ProfilerSynchronizeStats // TypeDefIndex: 1990
		{
		}
	
		[RequiredByNativeCode] // 0x004C4088-0x004C4098
		public struct MemoryFrameMaintenance // TypeDefIndex: 1991
		{
		}
	
		[RequiredByNativeCode] // 0x004C4098-0x004C40A8
		public struct ExecuteGameCenterCallbacks // TypeDefIndex: 1992
		{
		}
	
		[RequiredByNativeCode] // 0x004C40A8-0x004C40B8
		public struct ProfilerEndFrame // TypeDefIndex: 1993
		{
		}
	
		[RequiredByNativeCode] // 0x004C40B8-0x004C40C8
		public struct PlayerSendFramePostPresent // TypeDefIndex: 1994
		{
		}
	
		[RequiredByNativeCode] // 0x004C40C8-0x004C40D8
		public struct PhysicsSkinnedClothBeginUpdate // TypeDefIndex: 1995
		{
		}
	
		[RequiredByNativeCode] // 0x004C40D8-0x004C40E8
		public struct PhysicsSkinnedClothFinishUpdate // TypeDefIndex: 1996
		{
		}
	
		[RequiredByNativeCode] // 0x004C40E8-0x004C40F8
		public struct TriggerEndOfFrameCallbacks // TypeDefIndex: 1997
		{
		}
	}
}

namespace UnityEngine.Experimental.LowLevel
{
	[NativeType] // 0x004C40F8-0x004C4148
	[RequiredByNativeCode] // 0x004C40F8-0x004C4148
	internal struct PlayerLoopSystemInternal // TypeDefIndex: 1998
	{
		// Fields
		public Type type; // 0x00
		public PlayerLoopSystem.UpdateFunction updateDelegate; // 0x08
		public IntPtr updateFunction; // 0x10
		public IntPtr loopConditionFunction; // 0x18
		public int numSubSystems; // 0x20
	}

	public struct PlayerLoopSystem // TypeDefIndex: 1999
	{
		// Fields
		public Type type; // 0x00
		public PlayerLoopSystem[] subSystemList; // 0x08
		public UpdateFunction updateDelegate; // 0x10
		public IntPtr updateFunction; // 0x18
		public IntPtr loopConditionFunction; // 0x20
	
		// Nested types
		public delegate void UpdateFunction(); // TypeDefIndex: 2000; 0x00ADDA84-0x00ADDCA0
	}
}

namespace UnityEngine
{
	public class PlayerPrefsException : Exception // TypeDefIndex: 2001
	{
		// Constructors
		public PlayerPrefsException(string error); // 0x00B9A380-0x00B9A3F8
	}

	[NativeHeader] // 0x004C4148-0x004C4180
	public class PlayerPrefs // TypeDefIndex: 2002
	{
		// Methods
		[NativeMethod] // 0x004CB160-0x004CB198
		private static bool TrySetInt(string key, int value); // 0x00B9A1D8-0x00B9A228
		[NativeMethod] // 0x004CB198-0x004CB1D0
		private static bool TrySetFloat(string key, float value); // 0x00B9A228-0x00B9A278
		[NativeMethod] // 0x004CB1D0-0x004CB208
		private static bool TrySetSetString(string key, string value); // 0x00B9A278-0x00B9A2C8
		public static void SetInt(string key, int value); // 0x00B9A2C8-0x00B9A380
		public static int GetInt(string key, int defaultValue); // 0x00B9A3F8-0x00B9A448
		public static int GetInt(string key); // 0x00B9A448-0x00B9A48C
		public static void SetFloat(string key, float value); // 0x00B9A48C-0x00B9A544
		public static float GetFloat(string key, float defaultValue); // 0x00B9A544-0x00B9A594
		public static void SetString(string key, string value); // 0x00B9A594-0x00B9A64C
		public static string GetString(string key, string defaultValue); // 0x00B9A64C-0x00B9A69C
		public static string GetString(string key); // 0x00B9A69C-0x00B9A718
		public static bool HasKey(string key); // 0x00B9A718-0x00B9A758
		public static void DeleteKey(string key); // 0x00B9A758-0x00B9AC28
	}

	[AttributeUsage] // 0x004C4180-0x004C41B8
	public abstract class PropertyAttribute : Attribute // TypeDefIndex: 2003
	{
		// Constructors
		protected PropertyAttribute(); // 0x00B9B758-0x00B9B7C0
	}

	[AttributeUsage] // 0x004C41B8-0x004C41F0
	public class TooltipAttribute : PropertyAttribute // TypeDefIndex: 2004
	{
		// Fields
		public readonly string tooltip; // 0x10
	
		// Constructors
		public TooltipAttribute(string tooltip); // 0x00BA7F90-0x00BA7FBC
	}

	[AttributeUsage] // 0x004C41F0-0x004C4228
	public class SpaceAttribute : PropertyAttribute // TypeDefIndex: 2005
	{
		// Fields
		public readonly float height; // 0x10
	
		// Constructors
		public SpaceAttribute(); // 0x00BA430C-0x00BA4338
		public SpaceAttribute(float height); // 0x00BA4338-0x00BA436C
	}

	[AttributeUsage] // 0x004C4228-0x004C4260
	public class HeaderAttribute : PropertyAttribute // TypeDefIndex: 2006
	{
		// Fields
		public readonly string header; // 0x10
	
		// Constructors
		public HeaderAttribute(string header); // 0x00ADF84C-0x00ADF878
	}

	[AttributeUsage] // 0x004C4260-0x004C4298
	public sealed class RangeAttribute : PropertyAttribute // TypeDefIndex: 2007
	{
		// Fields
		public readonly float min; // 0x10
		public readonly float max; // 0x14
	
		// Constructors
		public RangeAttribute(float min, float max); // 0x00B9CF38-0x00B9D1F8
	}

	[AttributeUsage] // 0x004C4298-0x004C42D0
	public sealed class MultilineAttribute : PropertyAttribute // TypeDefIndex: 2008
	{
		// Fields
		public readonly int lines; // 0x10
	
		// Constructors
		public MultilineAttribute(int lines); // 0x00AE66FC-0x00AE6728
	}

	[AttributeUsage] // 0x004C42D0-0x004C4308
	public sealed class TextAreaAttribute : PropertyAttribute // TypeDefIndex: 2009
	{
		// Fields
		public readonly int minLines; // 0x10
		public readonly int maxLines; // 0x14
	
		// Constructors
		public TextAreaAttribute(int minLines, int maxLines); // 0x00BA6084-0x00BA60BC
	}

	[NativeHeader] // 0x004C4308-0x004C4340
	internal class PropertyNameUtils // TypeDefIndex: 2010
	{
		// Methods
		[FreeFunction] // 0x004CB208-0x004CB218
		public static PropertyName PropertyNameFromString([Unmarshalled] /* 0x004CD980-0x004CD990 */ string name); // 0x00B9B7C0-0x00B9B820
		private static void PropertyNameFromString_Injected(string name, out PropertyName ret); // 0x00B9B94C-0x00B9B99C
	}

	[UsedByNativeCode] // 0x004C4340-0x004C4350
	public struct PropertyName : IEquatable<PropertyName> // TypeDefIndex: 2011
	{
		// Fields
		internal int id; // 0x00
	
		// Constructors
		public PropertyName(string name); // 0x0058C9D4-0x0058CA34
		public PropertyName(PropertyName other); // 0x0058CA34-0x0058CA3C
	
		// Methods
		public static bool operator ==(PropertyName lhs, PropertyName rhs); // 0x00B9B820-0x00B9B94C
		public override int GetHashCode(); // 0x0058CA3C-0x0058CA44
		public override bool Equals(object other); // 0x0058CA44-0x0058CA4C
		public bool Equals(PropertyName other); // 0x0058CA4C-0x0058CA5C
		public override string ToString(); // 0x0058CA5C-0x0058CA64
	}

	[NativeHeader] // 0x004C4350-0x004C4388
	public sealed class Random // TypeDefIndex: 2012
	{
		// Properties
		public static float value { [FreeFunction] /* 0x004CB238-0x004CB248 */ get; } // 0x00B9CE6C-0x00B9CEA0 
		public static Vector3 insideUnitSphere { [FreeFunction] /* 0x004CB248-0x004CB258 */ get; } // 0x00B9CEA0-0x00B9CEF8 
	
		// Methods
		[FreeFunction] // 0x004CB218-0x004CB228
		public static float Range(float min, float max); // 0x00B9CD80-0x00B9CDCC
		public static int Range(int min, int max); // 0x00B9CDCC-0x00B9CE1C
		[FreeFunction] // 0x004CB228-0x004CB238
		private static int RandomRangeInt(int min, int max); // 0x00B9CE1C-0x00B9CE6C
		private static void get_insideUnitSphere_Injected(out Vector3 ret); // 0x00B9CEF8-0x00B9CF38
	}
}

namespace UnityEngine.Rendering
{
	public struct LODParameters : IEquatable<LODParameters> // TypeDefIndex: 2013
	{
		// Fields
		private int m_IsOrthographic; // 0x00
		private Vector3 m_CameraPosition; // 0x04
		private float m_FieldOfView; // 0x10
		private float m_OrthoSize; // 0x14
		private int m_CameraPixelHeight; // 0x18
	
		// Methods
		public bool Equals(LODParameters other); // 0x0058D140-0x0058D178
		public override bool Equals(object obj); // 0x0058D178-0x0058D180
		public override int GetHashCode(); // 0x0058D180-0x0058D188
	}

	public abstract class RenderPipeline // TypeDefIndex: 2014
	{
		// Fields
		[CompilerGenerated] // 0x004C68AC-0x004C68E8
		[DebuggerBrowsable] // 0x004C68AC-0x004C68E8
		private bool _disposed_k__BackingField; // 0x10
	
		// Properties
		public bool disposed { [CompilerGenerated] /* 0x004CB258-0x004CB268 */ get; [CompilerGenerated] /* 0x004CB268-0x004CB278 */ private set; } // 0x00BA2084-0x00BA208C 0x00BA208C-0x00BA2098
	
		// Methods
		protected abstract void Render(ScriptableRenderContext context, Camera[] cameras);
		internal void InternalRender(ScriptableRenderContext context, Camera[] cameras); // 0x00BA1FC0-0x00BA2084
		internal void Dispose(); // 0x00BA2098-0x00BA2120
		protected virtual void Dispose(bool disposing); // 0x00BA2120-0x00BA2124
	}

	public abstract class RenderPipelineAsset : ScriptableObject // TypeDefIndex: 2015
	{
		// Properties
		public virtual string[] renderingLayerMaskNames { [CompilerGenerated] /* 0x004CB278-0x004CB288 */ get; } // 0x00BA2138-0x00BA2140 
		public virtual Material defaultMaterial { [CompilerGenerated] /* 0x004CB288-0x004CB298 */ get; } // 0x00BA2140-0x00BA2148 
		public virtual Shader autodeskInteractiveShader { [CompilerGenerated] /* 0x004CB298-0x004CB2A8 */ get; } // 0x00BA2148-0x00BA2150 
		public virtual Shader autodeskInteractiveTransparentShader { [CompilerGenerated] /* 0x004CB2A8-0x004CB2B8 */ get; } // 0x00BA2150-0x00BA2158 
		public virtual Shader autodeskInteractiveMaskedShader { [CompilerGenerated] /* 0x004CB2B8-0x004CB2C8 */ get; } // 0x00BA2158-0x00BA2160 
		public virtual Shader terrainDetailLitShader { [CompilerGenerated] /* 0x004CB2C8-0x004CB2D8 */ get; } // 0x00BA2160-0x00BA2168 
		public virtual Shader terrainDetailGrassShader { [CompilerGenerated] /* 0x004CB2D8-0x004CB2E8 */ get; } // 0x00BA2168-0x00BA2170 
		public virtual Shader terrainDetailGrassBillboardShader { [CompilerGenerated] /* 0x004CB2E8-0x004CB2F8 */ get; } // 0x00BA2170-0x00BA2178 
		public virtual Material defaultParticleMaterial { [CompilerGenerated] /* 0x004CB2F8-0x004CB308 */ get; } // 0x00BA2178-0x00BA2180 
		public virtual Material defaultLineMaterial { [CompilerGenerated] /* 0x004CB308-0x004CB318 */ get; } // 0x00BA2180-0x00BA2188 
		public virtual Material defaultTerrainMaterial { [CompilerGenerated] /* 0x004CB318-0x004CB328 */ get; } // 0x00BA2188-0x00BA2190 
		public virtual Material defaultUIMaterial { [CompilerGenerated] /* 0x004CB328-0x004CB338 */ get; } // 0x00BA2190-0x00BA2198 
		public virtual Material defaultUIOverdrawMaterial { [CompilerGenerated] /* 0x004CB338-0x004CB348 */ get; } // 0x00BA2198-0x00BA21A0 
		public virtual Material defaultUIETC1SupportedMaterial { [CompilerGenerated] /* 0x004CB348-0x004CB358 */ get; } // 0x00BA21A0-0x00BA21A8 
		public virtual Material default2DMaterial { [CompilerGenerated] /* 0x004CB358-0x004CB368 */ get; } // 0x00BA21A8-0x00BA21B0 
		public virtual Shader defaultShader { [CompilerGenerated] /* 0x004CB368-0x004CB378 */ get; } // 0x00BA21B0-0x00BA21B8 
		public virtual Shader defaultSpeedTree7Shader { [CompilerGenerated] /* 0x004CB378-0x004CB388 */ get; } // 0x00BA21B8-0x00BA21C0 
		public virtual Shader defaultSpeedTree8Shader { [CompilerGenerated] /* 0x004CB388-0x004CB398 */ get; } // 0x00BA21C0-0x00BA21C8 
	
		// Constructors
		protected RenderPipelineAsset(); // 0x00BA2124-0x00BA2128
	
		// Methods
		internal RenderPipeline InternalCreatePipeline(); // 0x00BA2128-0x00BA2138
		protected abstract RenderPipeline CreatePipeline();
		protected virtual void OnValidate(); // 0x00BA21C8-0x00BA21CC
		protected virtual void OnDisable(); // 0x00BA22F8-0x00BA22FC
	}

	public static class RenderPipelineManager // TypeDefIndex: 2016
	{
		// Fields
		private static RenderPipelineAsset s_CurrentPipelineAsset; // 0x00
		[CompilerGenerated] // 0x004C68E8-0x004C6924
		[DebuggerBrowsable] // 0x004C68E8-0x004C6924
		private static RenderPipeline _currentPipeline_k__BackingField; // 0x08
	
		// Properties
		public static RenderPipeline currentPipeline { [CompilerGenerated] /* 0x004CB398-0x004CB3A8 */ get; [CompilerGenerated] /* 0x004CB3A8-0x004CB3B8 */ private set; } // 0x00BA22FC-0x00BA234C 0x00BA234C-0x00BA23A0
	
		// Methods
		[RequiredByNativeCode] // 0x004CB3B8-0x004CB3C8
		internal static void CleanupRenderPipeline(); // 0x00BA21CC-0x00BA22F8
		[RequiredByNativeCode] // 0x004CB3C8-0x004CB3D8
		private static void DoRenderLoop_Internal(RenderPipelineAsset pipe, Camera[] cameras, IntPtr loopPtr); // 0x00BA243C-0x00BA24BC
		private static void PrepareRenderPipeline(RenderPipelineAsset pipelineAsset); // 0x00BA24BC-0x00BA270C
	}

	[NativeHeader] // 0x004C4388-0x004C4478
	[NativeHeader] // 0x004C4388-0x004C4478
	[NativeHeader] // 0x004C4388-0x004C4478
	[NativeHeader] // 0x004C4388-0x004C4478
	[NativeHeader] // 0x004C4388-0x004C4478
	[NativeType] // 0x004C4388-0x004C4478
	public struct ScriptableRenderContext : IEquatable<ScriptableRenderContext> // TypeDefIndex: 2017
	{
		// Fields
		private IntPtr m_Ptr; // 0x00
	
		// Constructors
		internal ScriptableRenderContext(IntPtr ptr); // 0x0058D188-0x0058D190
	
		// Methods
		public bool Equals(ScriptableRenderContext other); // 0x0058D190-0x0058D198
		public override bool Equals(object obj); // 0x0058D198-0x0058D1A0
		public override int GetHashCode(); // 0x0058D1A0-0x0058D1AC
	}

	public class SupportedRenderingFeatures // TypeDefIndex: 2018
	{
		// Fields
		private static SupportedRenderingFeatures s_Active; // 0x00
		[CompilerGenerated] // 0x004C6924-0x004C6960
		[DebuggerBrowsable] // 0x004C6924-0x004C6960
		private ReflectionProbeModes _reflectionProbeModes_k__BackingField; // 0x10
		[CompilerGenerated] // 0x004C6960-0x004C699C
		[DebuggerBrowsable] // 0x004C6960-0x004C699C
		private LightmapMixedBakeModes _defaultMixedLightingModes_k__BackingField; // 0x14
		[CompilerGenerated] // 0x004C699C-0x004C69D8
		[DebuggerBrowsable] // 0x004C699C-0x004C69D8
		private LightmapMixedBakeModes _mixedLightingModes_k__BackingField; // 0x18
		[CompilerGenerated] // 0x004C69D8-0x004C6A14
		[DebuggerBrowsable] // 0x004C69D8-0x004C6A14
		private LightmapBakeType _lightmapBakeTypes_k__BackingField; // 0x1C
		[CompilerGenerated] // 0x004C6A14-0x004C6A50
		[DebuggerBrowsable] // 0x004C6A14-0x004C6A50
		private LightmapsMode _lightmapsModes_k__BackingField; // 0x20
		[CompilerGenerated] // 0x004C6A50-0x004C6A8C
		[DebuggerBrowsable] // 0x004C6A50-0x004C6A8C
		private bool _lightProbeProxyVolumes_k__BackingField; // 0x24
		[CompilerGenerated] // 0x004C6A8C-0x004C6AC8
		[DebuggerBrowsable] // 0x004C6A8C-0x004C6AC8
		private bool _motionVectors_k__BackingField; // 0x25
		[CompilerGenerated] // 0x004C6AC8-0x004C6B04
		[DebuggerBrowsable] // 0x004C6AC8-0x004C6B04
		private bool _receiveShadows_k__BackingField; // 0x26
		[CompilerGenerated] // 0x004C6B04-0x004C6B40
		[DebuggerBrowsable] // 0x004C6B04-0x004C6B40
		private bool _reflectionProbes_k__BackingField; // 0x27
		[CompilerGenerated] // 0x004C6B40-0x004C6B7C
		[DebuggerBrowsable] // 0x004C6B40-0x004C6B7C
		private bool _rendererPriority_k__BackingField; // 0x28
		[CompilerGenerated] // 0x004C6B7C-0x004C6BB8
		[DebuggerBrowsable] // 0x004C6B7C-0x004C6BB8
		private bool _overridesEnvironmentLighting_k__BackingField; // 0x29
		[CompilerGenerated] // 0x004C6BB8-0x004C6BF4
		[DebuggerBrowsable] // 0x004C6BB8-0x004C6BF4
		private bool _overridesFog_k__BackingField; // 0x2A
		[CompilerGenerated] // 0x004C6BF4-0x004C6C30
		[DebuggerBrowsable] // 0x004C6BF4-0x004C6C30
		private bool _overridesOtherLightingSettings_k__BackingField; // 0x2B
		[CompilerGenerated] // 0x004C6C30-0x004C6C6C
		[DebuggerBrowsable] // 0x004C6C30-0x004C6C6C
		private bool _editableMaterialRenderQueue_k__BackingField; // 0x2C
	
		// Properties
		public static SupportedRenderingFeatures active { get; set; } // 0x00BA270C-0x00BA27F8 0x00BA23D0-0x00BA243C
		public LightmapMixedBakeModes defaultMixedLightingModes { [CompilerGenerated] /* 0x004CB3D8-0x004CB3E8 */ get; } // 0x00BA27F8-0x00BA2800 
		public LightmapMixedBakeModes mixedLightingModes { [CompilerGenerated] /* 0x004CB3E8-0x004CB3F8 */ get; } // 0x00BA2800-0x00BA2808 
		public LightmapBakeType lightmapBakeTypes { [CompilerGenerated] /* 0x004CB3F8-0x004CB408 */ get; } // 0x00BA2808-0x00BA2810 
		public LightmapsMode lightmapsModes { [CompilerGenerated] /* 0x004CB408-0x004CB418 */ get; } // 0x00BA2810-0x00BA2818 
	
		// Nested types
		[Flags] // 0x004C4478-0x004C4488
		public enum ReflectionProbeModes // TypeDefIndex: 2019
		{
			None = 0,
			Rotation = 1
		}
	
		[Flags] // 0x004C4488-0x004C4498
		public enum LightmapMixedBakeModes // TypeDefIndex: 2020
		{
			None = 0,
			IndirectOnly = 1,
			Subtractive = 2,
			Shadowmask = 4
		}
	
		// Constructors
		public SupportedRenderingFeatures(); // 0x00BA23A0-0x00BA23D0
		static SupportedRenderingFeatures(); // 0x00BA2D3C-0x00BA2DC8
	
		// Methods
		[RequiredByNativeCode] // 0x004CB418-0x004CB428
		internal static void FallbackMixedLightingModeByRef(IntPtr fallbackModePtr); // 0x00BA2818-0x00BA297C
		internal static bool IsMixedLightingModeSupported(MixedLightingMode mixedMode); // 0x00BA297C-0x00BA29F8
		[RequiredByNativeCode] // 0x004CB428-0x004CB438
		internal static void IsMixedLightingModeSupportedByRef(MixedLightingMode mixedMode, IntPtr isSupportedPtr); // 0x00BA29F8-0x00BA2B28
		internal static bool IsLightmapBakeTypeSupported(LightmapBakeType bakeType); // 0x00BA2B28-0x00BA2BA4
		[RequiredByNativeCode] // 0x004CB438-0x004CB448
		internal static void IsLightmapBakeTypeSupportedByRef(LightmapBakeType bakeType, IntPtr isSupportedPtr); // 0x00BA2BA4-0x00BA2CA0
		[RequiredByNativeCode] // 0x004CB448-0x004CB458
		internal static void IsLightmapsModeSupportedByRef(LightmapsMode mode, IntPtr isSupportedPtr); // 0x00BA2CA0-0x00BA2D3C
	}

	public struct BatchVisibility // TypeDefIndex: 2021
	{
		// Fields
		public readonly int offset; // 0x00
		public readonly int instancesCount; // 0x04
		public int visibleCount; // 0x08
	}

	[NativeHeader] // 0x004C4498-0x004C44E4
	[UsedByNativeCode] // 0x004C4498-0x004C44E4
	public struct BatchCullingContext // TypeDefIndex: 2022
	{
		// Fields
		public readonly NativeArray<Plane> cullingPlanes; // 0x00
		public NativeArray<BatchVisibility> batchVisibility; // 0x10
		public NativeArray<int> visibleIndices; // 0x20
		public readonly LODParameters lodParameters; // 0x30
	
		// Constructors
		public BatchCullingContext(NativeArray<Plane> inCullingPlanes, NativeArray<BatchVisibility> inOutBatchVisibility, NativeArray<int> outVisibleIndices, LODParameters inLodParameters); // 0x0058D06C-0x0058D140
	}

	[NativeHeader] // 0x004C44E4-0x004C4530
	[UsedByNativeCode] // 0x004C44E4-0x004C4530
	internal struct BatchRendererCullingOutput // TypeDefIndex: 2023
	{
		// Fields
		public JobHandle cullingJobsFence; // 0x00
		public unsafe Plane* cullingPlanes; // 0x10
		public unsafe BatchVisibility* batchVisibility; // 0x18
		public unsafe int* visibleIndices; // 0x20
		public int cullingPlanesCount; // 0x28
		public int batchVisibilityCount; // 0x2C
		public int visibleIndicesCount; // 0x30
	}

	[NativeHeader] // 0x004C4530-0x004C45A0
	[NativeHeader] // 0x004C4530-0x004C45A0
	[RequiredByNativeCode] // 0x004C4530-0x004C45A0
	public class BatchRendererGroup // TypeDefIndex: 2024
	{
		// Fields
		private IntPtr m_GroupHandle; // 0x10
		private OnPerformCulling m_PerformCulling; // 0x18
	
		// Nested types
		public delegate JobHandle OnPerformCulling(BatchRendererGroup rendererGroup, BatchCullingContext cullingContext); // TypeDefIndex: 2025; 0x00BA17CC-0x00BA1D14
	
		// Methods
		[RequiredByNativeCode] // 0x004CB458-0x004CB468
		private static void InvokeOnPerformCulling(BatchRendererGroup group, ref BatchRendererCullingOutput context, ref LODParameters lodParameters); // 0x00BA1644-0x00BA17CC
	}
}

namespace UnityEngine
{
	[RequiredByNativeCode] // 0x004C45A0-0x004C45B0
	public class ResourceRequest : AsyncOperation // TypeDefIndex: 2026
	{
		// Fields
		internal string m_Path; // 0x20
		internal Type m_Type; // 0x28
	}

	[NativeHeader] // 0x004C45B0-0x004C4610
	[NativeHeader] // 0x004C45B0-0x004C4610
	public sealed class Resources // TypeDefIndex: 2027
	{
		// Methods
		internal static T[] ConvertObjects<T>(UnityEngine.Object[] rawObjects)
			where T : UnityEngine.Object;
		[FreeFunction] // 0x004CB468-0x004CB4B8
		[TypeInferenceRule] // 0x004CB468-0x004CB4B8
		public static UnityEngine.Object[] FindObjectsOfTypeAll(Type type); // 0x00BA2F5C-0x00BA2F9C
		public static T[] FindObjectsOfTypeAll<T>()
			where T : UnityEngine.Object;
		public static UnityEngine.Object Load(string path); // 0x00BA2F9C-0x00BA3048
		public static T Load<T>(string path)
			where T : UnityEngine.Object;
		[FreeFunction] // 0x004CB4B8-0x004CB518
		[NativeThrows] // 0x004CB4B8-0x004CB518
		[TypeInferenceRule] // 0x004CB4B8-0x004CB518
		public static UnityEngine.Object Load(string path, [NotNull] /* 0x004CD990-0x004CD9A0 */ Type systemTypeInstance); // 0x00BA3048-0x00BA3098
		[FreeFunction] // 0x004CB518-0x004CB568
		[TypeInferenceRule] // 0x004CB518-0x004CB568
		public static UnityEngine.Object GetBuiltinResource([NotNull] /* 0x004CD9A0-0x004CD9B0 */ Type type, string path); // 0x00BA3098-0x00BA30E8
		public static T GetBuiltinResource<T>(string path)
			where T : UnityEngine.Object;
		[FreeFunction] // 0x004CB568-0x004CB5A0
		public static void UnloadAsset(UnityEngine.Object assetToUnload); // 0x00BA30E8-0x00BA3128
		[FreeFunction] // 0x004CB5A0-0x004CB5D8
		public static AsyncOperation UnloadUnusedAssets(); // 0x00BA3128-0x00BA315C
	}
}

namespace UnityEngine.SceneManagement
{
	[Serializable]
	[NativeHeader] // 0x004C4610-0x004C4648
	public struct Scene // TypeDefIndex: 2028
	{
		// Fields
		[SerializeField] // 0x004C6C6C-0x004C6C7C
		private int m_Handle; // 0x00
	
		// Properties
		public int handle { get; } // 0x0058D200-0x0058D208 
		public string name { get; } // 0x0058D208-0x0058D248 
	
		// Methods
		[StaticAccessor] // 0x004CB5D8-0x004CB614
		private static string GetNameInternal(int sceneHandle); // 0x00BA31C8-0x00BA32E0
		public override int GetHashCode(); // 0x0058D248-0x0058D250
		public override bool Equals(object other); // 0x0058D250-0x0058D39C
	}

	[NativeHeader] // 0x004C4648-0x004C4694
	[RequiredByNativeCode] // 0x004C4648-0x004C4694
	public class SceneManager // TypeDefIndex: 2029
	{
		// Fields
		[CompilerGenerated] // 0x004C6C7C-0x004C6CB8
		[DebuggerBrowsable] // 0x004C6C7C-0x004C6CB8
		private static UnityAction<Scene, LoadSceneMode> sceneLoaded; // 0x00
		[CompilerGenerated] // 0x004C6CB8-0x004C6CF4
		[DebuggerBrowsable] // 0x004C6CB8-0x004C6CF4
		private static UnityAction<Scene> sceneUnloaded; // 0x08
		[CompilerGenerated] // 0x004C6CF4-0x004C6D30
		[DebuggerBrowsable] // 0x004C6CF4-0x004C6D30
		private static UnityAction<Scene, Scene> activeSceneChanged; // 0x10
	
		// Properties
		public static int sceneCount { [NativeMethod] /* 0x004CB614-0x004CB69C */ [NativeHeader] /* 0x004CB614-0x004CB69C */ [StaticAccessor] /* 0x004CB614-0x004CB69C */ get; } // 0x00BA32E0-0x00BA3314 
	
		// Events
		public static event UnityAction<Scene, LoadSceneMode> sceneLoaded {
			add; // 0x00BA3500-0x00BA35B8
			remove; // 0x00BA35B8-0x00BA3670
		}
	
		// Methods
		[NativeThrows] // 0x004CB69C-0x004CB6EC
		[StaticAccessor] // 0x004CB69C-0x004CB6EC
		public static Scene GetSceneAt(int index); // 0x00BA3314-0x00BA336C
		[NativeThrows] // 0x004CB6EC-0x004CB73C
		[StaticAccessor] // 0x004CB6EC-0x004CB73C
		private static AsyncOperation LoadSceneAsyncNameIndexInternal(string sceneName, int sceneBuildIndex, LoadSceneParameters parameters, bool mustCompleteNextFrame); // 0x00BA33BC-0x00BA3428
		[NativeThrows] // 0x004CB73C-0x004CB78C
		[StaticAccessor] // 0x004CB73C-0x004CB78C
		private static AsyncOperation UnloadSceneNameIndexInternal(string sceneName, int sceneBuildIndex, bool immediately, UnloadSceneOptions options, out bool outSuccess); // 0x00BA3490-0x00BA3500
		[ExcludeFromDocs] // 0x004CB78C-0x004CB79C
		public static void LoadScene(string sceneName); // 0x00BA3670-0x00BA3678
		public static Scene LoadScene(string sceneName, LoadSceneParameters parameters); // 0x00BA3678-0x00BA3730
		public static AsyncOperation LoadSceneAsync(string sceneName, [UnityEngine.Internal.DefaultValue] /* 0x004CD9B0-0x004CD9E8 */ LoadSceneMode mode); // 0x00BA3730-0x00BA3790
		[ExcludeFromDocs] // 0x004CB79C-0x004CB7AC
		public static AsyncOperation LoadSceneAsync(string sceneName); // 0x00BA37EC-0x00BA3848
		public static AsyncOperation LoadSceneAsync(string sceneName, LoadSceneParameters parameters); // 0x00BA3790-0x00BA37EC
		public static AsyncOperation UnloadSceneAsync(string sceneName); // 0x00BA3848-0x00BA38A8
		[RequiredByNativeCode] // 0x004CB7AC-0x004CB7BC
		private static void Internal_SceneLoaded(Scene scene, LoadSceneMode mode); // 0x00BA38A8-0x00BA3930
		[RequiredByNativeCode] // 0x004CB7BC-0x004CB7CC
		private static void Internal_SceneUnloaded(Scene scene); // 0x00BA3930-0x00BA39A4
		[RequiredByNativeCode] // 0x004CB7CC-0x004CB7DC
		private static void Internal_ActiveSceneChanged(Scene previousActiveScene, Scene newActiveScene); // 0x00BA39A4-0x00BA3A2C
		private static void GetSceneAt_Injected(int index, out Scene ret); // 0x00BA336C-0x00BA33BC
		private static AsyncOperation LoadSceneAsyncNameIndexInternal_Injected(string sceneName, int sceneBuildIndex, ref LoadSceneParameters parameters, bool mustCompleteNextFrame); // 0x00BA3428-0x00BA3490
	}

	public enum LoadSceneMode // TypeDefIndex: 2030
	{
		Single = 0,
		Additive = 1
	}

	[Flags] // 0x004C4694-0x004C46A4
	public enum LocalPhysicsMode // TypeDefIndex: 2031
	{
		None = 0,
		Physics2D = 1,
		Physics3D = 2
	}

	[Serializable]
	public struct LoadSceneParameters // TypeDefIndex: 2032
	{
		// Fields
		[SerializeField] // 0x004C6D30-0x004C6D40
		private LoadSceneMode m_LoadSceneMode; // 0x00
		[SerializeField] // 0x004C6D40-0x004C6D50
		private LocalPhysicsMode m_LocalPhysicsMode; // 0x04
	
		// Constructors
		public LoadSceneParameters(LoadSceneMode mode); // 0x0058D1F8-0x0058D200
	}

	[Flags] // 0x004C46A4-0x004C46B4
	public enum UnloadSceneOptions // TypeDefIndex: 2033
	{
		None = 0,
		UnloadAllEmbeddedSceneObjects = 1
	}
}

namespace UnityEngine
{
	[NativeHeader] // 0x004C46B4-0x004C4724
	[NativeHeader] // 0x004C46B4-0x004C4724
	[RequiredByNativeCode] // 0x004C46B4-0x004C4724
	public class AsyncOperation : YieldInstruction // TypeDefIndex: 2034
	{
		// Fields
		internal IntPtr m_Ptr; // 0x10
		private Action<AsyncOperation> m_completeCallback; // 0x18
	
		// Properties
		public bool isDone { [NativeMethod] /* 0x004CB83C-0x004CB874 */ get; } // 0x00AD27EC-0x00AD282C 
		public float progress { [NativeMethod] /* 0x004CB874-0x004CB8AC */ get; } // 0x00AD282C-0x00AD286C 
		public bool allowSceneActivation { [NativeMethod] /* 0x004CB8AC-0x004CB8E4 */ set; } // 0x00AD286C-0x00AD28BC
	
		// Constructors
		public AsyncOperation(); // 0x00AD27A4-0x00AD27AC
	
		// Methods
		[NativeMethod] // 0x004CB7DC-0x004CB83C
		[StaticAccessor] // 0x004CB7DC-0x004CB83C
		private static void InternalDestroy(IntPtr ptr); // 0x00AD27AC-0x00AD27EC
		~AsyncOperation(); // 0x00AD28BC-0x00AD295C
		[RequiredByNativeCode] // 0x004CB8E4-0x004CB8F4
		internal void InvokeCompletionEvent(); // 0x00AD295C-0x00AD29BC
	}

	internal class AttributeHelperEngine // TypeDefIndex: 2035
	{
		// Fields
		public static DisallowMultipleComponent[] _disallowMultipleComponentArray; // 0x00
		public static ExecuteInEditMode[] _executeInEditModeArray; // 0x08
		public static RequireComponent[] _requireComponentArray; // 0x10
	
		// Constructors
		static AttributeHelperEngine(); // 0x00AD305C-0x00AD3100
	
		// Methods
		[RequiredByNativeCode] // 0x004CB8F4-0x004CB904
		private static Type GetParentTypeDisallowingMultipleInclusion(Type type); // 0x00AD29BC-0x00AD2AC4
		[RequiredByNativeCode] // 0x004CB904-0x004CB914
		private static Type[] GetRequiredComponents(Type klass); // 0x00AD2AC4-0x00AD2DE0
		private static int GetExecuteMode(Type klass); // 0x00AD2DE0-0x00AD2EF0
		[RequiredByNativeCode] // 0x004CB914-0x004CB924
		private static int CheckIsEditorScript(Type klass); // 0x00AD2EF0-0x00AD2FD8
		[RequiredByNativeCode] // 0x004CB924-0x004CB934
		private static int GetDefaultExecutionOrderFor(Type klass); // 0x00AD2FD8-0x00AD3054
		private static T GetCustomAttributeOfType<T>(Type klass)
			where T : Attribute;
	}

	[AttributeUsage] // 0x004C4724-0x004C4768
	[RequiredByNativeCode] // 0x004C4724-0x004C4768
	public sealed class DisallowMultipleComponent : Attribute // TypeDefIndex: 2036
	{
		// Constructors
		public DisallowMultipleComponent(); // 0x00AD94E0-0x00AD94E8
	}

	[AttributeUsage] // 0x004C4768-0x004C47B4
	[RequiredByNativeCode] // 0x004C4768-0x004C47B4
	public sealed class RequireComponent : Attribute // TypeDefIndex: 2037
	{
		// Fields
		public Type m_Type0; // 0x10
		public Type m_Type1; // 0x18
		public Type m_Type2; // 0x20
	
		// Constructors
		public RequireComponent(Type requiredComponent); // 0x00BA2DC8-0x00BA2F5C
	}

	public sealed class AddComponentMenu : Attribute // TypeDefIndex: 2038
	{
		// Fields
		private string m_AddComponentMenu; // 0x10
		private int m_Ordering; // 0x18
	
		// Constructors
		public AddComponentMenu(string menuName); // 0x00AD00B0-0x00AD00E0
		public AddComponentMenu(string menuName, int order); // 0x00AD00E0-0x00AD011C
	}

	[AttributeUsage] // 0x004C47B4-0x004C47E8
	public sealed class CreateAssetMenuAttribute : Attribute // TypeDefIndex: 2039
	{
		// Fields
		[CompilerGenerated] // 0x004C6D50-0x004C6D8C
		[DebuggerBrowsable] // 0x004C6D50-0x004C6D8C
		private string _menuName_k__BackingField; // 0x10
	
		// Properties
		public string menuName { [CompilerGenerated] /* 0x004CB934-0x004CB944 */ set; } // 0x00AD7200-0x00AD7208
	
		// Constructors
		public CreateAssetMenuAttribute(); // 0x00AD71F8-0x00AD7200
	}

	[AttributeUsage] // 0x004C47E8-0x004C4834
	[RequiredByNativeCode] // 0x004C47E8-0x004C4834
	public sealed class ContextMenu : Attribute // TypeDefIndex: 2040
	{
		// Fields
		public readonly string menuItem; // 0x10
		public readonly bool validate; // 0x18
		public readonly int priority; // 0x1C
	
		// Constructors
		public ContextMenu(string itemName); // 0x00AD7040-0x00AD707C
		public ContextMenu(string itemName, bool isValidateFunction); // 0x00AD707C-0x00AD70C8
		public ContextMenu(string itemName, bool isValidateFunction, int priority); // 0x00AD70C8-0x00AD7110
	}

	[UsedByNativeCode] // 0x004C4834-0x004C4844
	public sealed class ExecuteInEditMode : Attribute // TypeDefIndex: 2041
	{
		// Constructors
		public ExecuteInEditMode(); // 0x00ADBF70-0x00ADC384
	}

	[UsedByNativeCode] // 0x004C4844-0x004C4854
	public sealed class ExecuteAlways : Attribute // TypeDefIndex: 2042
	{
		// Constructors
		public ExecuteAlways(); // 0x00ADBF68-0x00ADBF70
	}

	[UsedByNativeCode] // 0x004C4854-0x004C4864
	public sealed class HideInInspector : Attribute // TypeDefIndex: 2043
	{
		// Constructors
		public HideInInspector(); // 0x00ADF878-0x00ADF880
	}

	[AttributeUsage] // 0x004C4864-0x004C48A0
	[UsedByNativeCode] // 0x004C4864-0x004C48A0
	public class DefaultExecutionOrder : Attribute // TypeDefIndex: 2044
	{
		// Fields
		private int m_Order; // 0x10
	
		// Properties
		public int order { get; } // 0x00AD3054-0x00AD305C 
	}

	[AttributeUsage] // 0x004C48A0-0x004C48DC
	[RequiredByNativeCode] // 0x004C48A0-0x004C48DC
	public class AssemblyIsEditorAssembly : Attribute // TypeDefIndex: 2045
	{
	}

	[AttributeUsage] // 0x004C48DC-0x004C4920
	[UsedByNativeCode] // 0x004C48DC-0x004C4920
	public class ExcludeFromPresetAttribute : Attribute // TypeDefIndex: 2046
	{
		// Constructors
		public ExcludeFromPresetAttribute(); // 0x00ADBF60-0x00ADBF68
	}

	[NativeHeader] // 0x004C4920-0x004C496C
	[UsedByNativeCode] // 0x004C4920-0x004C496C
	public class Behaviour : Component // TypeDefIndex: 2047
	{
		// Properties
		[NativeProperty] // 0x004CE16C-0x004CE1A4
		[RequiredByNativeCode] // 0x004CE16C-0x004CE1A4
		public bool enabled { get; set; } // 0x00AD33FC-0x00AD343C 0x00AD343C-0x00AD348C
		[NativeProperty] // 0x004CE1A4-0x004CE1B4
		public bool isActiveAndEnabled { [NativeMethod] /* 0x004CB944-0x004CB97C */ get; } // 0x00AD348C-0x00AD34CC 
	
		// Constructors
		public Behaviour(); // 0x00AD3390-0x00AD3394
	}

	internal struct CastHelper<T> // TypeDefIndex: 2048
	{
		// Fields
		public T t;
		public IntPtr onePointerFurtherThanT;
	}

	internal static class ClassLibraryInitializer // TypeDefIndex: 2049
	{
		// Methods
		[RequiredByNativeCode] // 0x004CB97C-0x004CB98C
		private static void Init(); // 0x00AD5CFC-0x00AD5F04
	}

	[NativeClass] // 0x004C496C-0x004C49DC
	[NativeHeader] // 0x004C496C-0x004C49DC
	[RequiredByNativeCode] // 0x004C496C-0x004C49DC
	public class Component : UnityEngine.Object // TypeDefIndex: 2050
	{
		// Properties
		public Transform transform { [FreeFunction] /* 0x004CB98C-0x004CB9D0 */ get; } // 0x00AD6864-0x00AD68A4 
		public GameObject gameObject { [FreeFunction] /* 0x004CB9D0-0x004CBA14 */ get; } // 0x00AD68A4-0x00AD68E4 
		public string tag { get; set; } // 0x00AD6C78-0x00AD6CEC 0x00AD6D2C-0x00AD6DB0
	
		// Constructors
		public Component(); // 0x00AD3394-0x00AD33FC
	
		// Methods
		[TypeInferenceRule] // 0x004CBA14-0x004CBA28
		public Component GetComponent(Type type); // 0x00AD68E4-0x00AD6968
		[FreeFunction] // 0x004CBA28-0x004CBA5C
		internal void GetComponentFastPath(Type type, IntPtr oneFurtherThanResultValue); // 0x00AD69B8-0x00AD6A10
		public T GetComponent<T>();
		[TypeInferenceRule] // 0x004CBA5C-0x004CBA70
		public Component GetComponentInChildren(Type t, bool includeInactive); // 0x00AD6A10-0x00AD6A9C
		[ExcludeFromDocs] // 0x004CBA70-0x004CBA80
		public T GetComponentInChildren<T>();
		public T[] GetComponentsInChildren<T>(bool includeInactive);
		public void GetComponentsInChildren<T>(bool includeInactive, List<T> result);
		public T[] GetComponentsInChildren<T>();
		public void GetComponentsInChildren<T>(List<T> results);
		[TypeInferenceRule] // 0x004CBA80-0x004CBA94
		public Component GetComponentInParent(Type t); // 0x00AD6AF4-0x00AD6B78
		public T GetComponentInParent<T>();
		public T[] GetComponentsInParent<T>(bool includeInactive);
		public void GetComponentsInParent<T>(bool includeInactive, List<T> results);
		public T[] GetComponentsInParent<T>();
		[FreeFunction] // 0x004CBA94-0x004CBAC8
		private void GetComponentsForListInternal(Type searchType, object resultList); // 0x00AD6BC8-0x00AD6C20
		public void GetComponents(Type type, List<Component> results); // 0x00AD6C20-0x00AD6C78
		public void GetComponents<T>(List<T> results);
		public T[] GetComponents<T>();
		public bool CompareTag(string tag); // 0x00AD6E00-0x00AD6E84
		[FreeFunction] // 0x004CBAC8-0x004CBB0C
		public void BroadcastMessage(string methodName, [UnityEngine.Internal.DefaultValue] /* 0x004CD9E8-0x004CDA20 */ object parameter, [UnityEngine.Internal.DefaultValue] /* 0x004CDA20-0x004CDA58 */ SendMessageOptions options); // 0x00AD6ED4-0x00AD6F3C
		[ExcludeFromDocs] // 0x004CBB0C-0x004CBB1C
		public void BroadcastMessage(string methodName); // 0x00AD6F3C-0x00AD6F94
		public void BroadcastMessage(string methodName, SendMessageOptions options); // 0x00AD6F94-0x00AD6FF0
	}

	[NativeHeader] // 0x004C49DC-0x004C4A28
	[RequiredByNativeCode] // 0x004C49DC-0x004C4A28
	public sealed class Coroutine : YieldInstruction // TypeDefIndex: 2051
	{
		// Fields
		internal IntPtr m_Ptr; // 0x10
	
		// Constructors
		private Coroutine(); // 0x00AD7110-0x00AD7118
	
		// Methods
		~Coroutine(); // 0x00AD7118-0x00AD71B8
		[FreeFunction] // 0x004CBB1C-0x004CBB58
		private static void ReleaseCoroutine(IntPtr ptr); // 0x00AD71B8-0x00AD71F8
	}

	[RequiredByNativeCode] // 0x004C4A28-0x004C4A38
	internal class SetupCoroutine // TypeDefIndex: 2052
	{
		// Methods
		[RequiredByNativeCode] // 0x004CBB58-0x004CBB68
		public static void InvokeMoveNext(IEnumerator enumerator, IntPtr returnValueAddress); // 0x00BA3CD8-0x00BA3E10
		[RequiredByNativeCode] // 0x004CBB68-0x004CBB78
		public static object InvokeMember(object behaviour, string name, object variable); // 0x00BA3E10-0x00BA3F18
	}

	public abstract class CustomYieldInstruction : IEnumerator // TypeDefIndex: 2053
	{
		// Properties
		public abstract bool keepWaiting { get; }
		public object Current { get; } // 0x00AD8290-0x00AD8298 
	
		// Constructors
		protected CustomYieldInstruction(); // 0x00AD8288-0x00AD8290
	
		// Methods
		public bool MoveNext(); // 0x00AD8298-0x00AD82A4
		public void Reset(); // 0x00AD82A4-0x00AD82A8
	}

	[AttributeUsage] // 0x004C4A38-0x004C4A74
	[UsedByNativeCode] // 0x004C4A38-0x004C4A74
	public class ExcludeFromObjectFactoryAttribute : Attribute // TypeDefIndex: 2054
	{
		// Constructors
		public ExcludeFromObjectFactoryAttribute(); // 0x00ADBF58-0x00ADBF60
	}

	[AttributeUsage] // 0x004C4A74-0x004C4AC0
	[RequiredByNativeCode] // 0x004C4A74-0x004C4AC0
	internal sealed class ExtensionOfNativeClassAttribute : Attribute // TypeDefIndex: 2055
	{
		// Constructors
		public ExtensionOfNativeClassAttribute(); // 0x00ADE4C0-0x00ADE4C8
	}

	[ExcludeFromObjectFactory] // 0x004C4AC0-0x004C4B0C
	[NativeClass] // 0x004C4AC0-0x004C4B0C
	[RequiredByNativeCode] // 0x004C4AC0-0x004C4B0C
	internal class FailedToLoadScriptObject : UnityEngine.Object // TypeDefIndex: 2056
	{
	}

	[ExcludeFromPreset] // 0x004C4B0C-0x004C4B68
	[NativeHeader] // 0x004C4B0C-0x004C4B68
	[UsedByNativeCode] // 0x004C4B0C-0x004C4B68
	public sealed class GameObject : UnityEngine.Object // TypeDefIndex: 2057
	{
		// Properties
		public Transform transform { [FreeFunction] /* 0x004CBD80-0x004CBDC4 */ get; } // 0x00ADEC34-0x00ADEC74 
		public int layer { get; set; } // 0x00ADEC74-0x00ADECB4 0x00ADECB4-0x00ADED04
		public bool activeSelf { [NativeMethod] /* 0x004CBE00-0x004CBE3C */ get; } // 0x00ADED54-0x00ADED94 
		public bool activeInHierarchy { [NativeMethod] /* 0x004CBE3C-0x004CBE78 */ get; } // 0x00ADED94-0x00ADEDD4 
		public string tag { [FreeFunction] /* 0x004CBE78-0x004CBEBC */ get; [FreeFunction] /* 0x004CBEBC-0x004CBF00 */ set; } // 0x00AD6CEC-0x00AD6D2C 0x00AD6DB0-0x00AD6E00
		public Scene scene { [FreeFunction] /* 0x004CBFC4-0x004CC008 */ get; } // 0x00ADEDD4-0x00ADEE2C 
		public GameObject gameObject { get; } // 0x00ADEE7C-0x00ADEE80 
	
		// Constructors
		public GameObject(string name); // 0x00ADE740-0x00ADE7E0
		public GameObject(); // 0x00ADE830-0x00ADE8C4
		public GameObject(string name, params /* 0x004CDA58-0x004CDA68 */ Type[] components); // 0x00ADE8C4-0x00ADE9F0
	
		// Methods
		public T GetComponent<T>();
		[FreeFunction] // 0x004CBB78-0x004CBBD0
		[TypeInferenceRule] // 0x004CBB78-0x004CBBD0
		public Component GetComponent(Type type); // 0x00AD6968-0x00AD69B8
		[FreeFunction] // 0x004CBBD0-0x004CBC24
		[NativeWritableSelf] // 0x004CBBD0-0x004CBC24
		internal void GetComponentFastPath(Type type, IntPtr oneFurtherThanResultValue); // 0x00ADEA40-0x00ADEA98
		[FreeFunction] // 0x004CBC24-0x004CBC7C
		[TypeInferenceRule] // 0x004CBC24-0x004CBC7C
		public Component GetComponentInChildren(Type type, bool includeInactive); // 0x00AD6A9C-0x00AD6AF4
		[ExcludeFromDocs] // 0x004CBC7C-0x004CBC8C
		public T GetComponentInChildren<T>();
		public T GetComponentInChildren<T>([UnityEngine.Internal.DefaultValue] /* 0x004CDA68-0x004CDAA0 */ bool includeInactive);
		[FreeFunction] // 0x004CBC8C-0x004CBCE4
		[TypeInferenceRule] // 0x004CBC8C-0x004CBCE4
		public Component GetComponentInParent(Type type); // 0x00AD6B78-0x00AD6BC8
		[FreeFunction] // 0x004CBCE4-0x004CBD28
		private Array GetComponentsInternal(Type type, bool useSearchTypeAsArrayReturnType, bool recursive, bool includeInactive, bool reverse, object resultList); // 0x00ADEA98-0x00ADEB20
		public T[] GetComponents<T>();
		public void GetComponents<T>(List<T> results);
		public T[] GetComponentsInChildren<T>(bool includeInactive);
		public void GetComponentsInChildren<T>(bool includeInactive, List<T> results);
		public T[] GetComponentsInChildren<T>();
		public void GetComponentsInParent<T>(bool includeInactive, List<T> results);
		public T[] GetComponentsInParent<T>(bool includeInactive);
		public void SendMessage(string methodName, SendMessageOptions options); // 0x00ADEB20-0x00ADEB7C
		[FreeFunction] // 0x004CBD28-0x004CBD6C
		private Component Internal_AddComponentWithType(Type componentType); // 0x00ADEBE4-0x00ADEC34
		[TypeInferenceRule] // 0x004CBD6C-0x004CBD80
		public Component AddComponent(Type componentType); // 0x00ADE9F0-0x00ADEA40
		public T AddComponent<T>()
			where T : Component;
		[NativeMethod] // 0x004CBDC4-0x004CBE00
		public void SetActive(bool value); // 0x00ADED04-0x00ADED54
		[FreeFunction] // 0x004CBF00-0x004CBF44
		public bool CompareTag(string tag); // 0x00AD6E84-0x00AD6ED4
		[FreeFunction] // 0x004CBF44-0x004CBF88
		public void SendMessage(string methodName, [UnityEngine.Internal.DefaultValue] /* 0x004CDAA0-0x004CDAD8 */ object value, [UnityEngine.Internal.DefaultValue] /* 0x004CDAD8-0x004CDB10 */ SendMessageOptions options); // 0x00ADEB7C-0x00ADEBE4
		[FreeFunction] // 0x004CBF88-0x004CBFC4
		private static void Internal_CreateGameObject([Writable] /* 0x004CDB10-0x004CDB20 */ GameObject self, string name); // 0x00ADE7E0-0x00ADE830
		private void get_scene_Injected(out Scene ret); // 0x00ADEE2C-0x00ADEE7C
	}

	[NativeClass] // 0x004C4B68-0x004C4C24
	[NativeHeader] // 0x004C4B68-0x004C4C24
	[NativeHeader] // 0x004C4B68-0x004C4C24
	[RequiredByNativeCode] // 0x004C4B68-0x004C4C24
	public struct LayerMask // TypeDefIndex: 2058
	{
		// Fields
		[NativeName] // 0x004C6D8C-0x004C6DC4
		private int m_Mask; // 0x00
	
		// Methods
		public static implicit operator int(LayerMask mask); // 0x00ADF9C8-0x00ADF9CC
		public static implicit operator LayerMask(int intVal); // 0x00ADF9CC-0x00ADF9D4
		[NativeMethod] // 0x004CC008-0x004CC06C
		[StaticAccessor] // 0x004CC008-0x004CC06C
		public static int NameToLayer(string layerName); // 0x00ADF9D4-0x00ADFA14
	}

	internal static class ManagedStreamHelpers // TypeDefIndex: 2059
	{
		// Methods
		internal static void ValidateLoadFromStream(Stream stream); // 0x00AE0364-0x00AE0470
		[RequiredByNativeCode] // 0x004CC06C-0x004CC07C
		internal static void ManagedStreamRead(byte[] buffer, int offset, int count, Stream stream, IntPtr returnValueAddress); // 0x00AE0470-0x00AE0578
		[RequiredByNativeCode] // 0x004CC07C-0x004CC08C
		internal static void ManagedStreamSeek(long offset, uint origin, Stream stream, IntPtr returnValueAddress); // 0x00AE0578-0x00AE0678
		[RequiredByNativeCode] // 0x004CC08C-0x004CC09C
		internal static void ManagedStreamLength(Stream stream, IntPtr returnValueAddress); // 0x00AE0678-0x00AE075C
	}

	[ExtensionOfNativeClass] // 0x004C4C24-0x004C4CA4
	[NativeHeader] // 0x004C4C24-0x004C4CA4
	[NativeHeader] // 0x004C4C24-0x004C4CA4
	[RequiredByNativeCode] // 0x004C4C24-0x004C4CA4
	public class MonoBehaviour : Behaviour // TypeDefIndex: 2060
	{
		// Properties
		public bool useGUILayout { get; set; } // 0x00AE65C8-0x00AE6608 0x00AE6608-0x00AE6658
	
		// Constructors
		public MonoBehaviour(); // 0x00AE5B5C-0x00AE5B60
	
		// Methods
		public bool IsInvoking(); // 0x00AE5B60-0x00AE5BA0
		public void CancelInvoke(); // 0x00AE5BE0-0x00AE5C20
		public void Invoke(string methodName, float time); // 0x00AE5C60-0x00AE5CC4
		public void InvokeRepeating(string methodName, float time, float repeatRate); // 0x00AE5D2C-0x00AE5E10
		public void CancelInvoke(string methodName); // 0x00AE5E10-0x00AE5E60
		public bool IsInvoking(string methodName); // 0x00AE5EB0-0x00AE5F00
		[ExcludeFromDocs] // 0x004CC09C-0x004CC0AC
		public Coroutine StartCoroutine(string methodName); // 0x00AE5F50-0x00AE5F58
		public Coroutine StartCoroutine(string methodName, [UnityEngine.Internal.DefaultValue] /* 0x004CDB20-0x004CDB58 */ object value); // 0x00AE5F58-0x00AE607C
		public Coroutine StartCoroutine(IEnumerator routine); // 0x00AE6114-0x00AE6224
		[Obsolete] // 0x004CC0AC-0x004CC0E8
		public Coroutine StartCoroutine_Auto(IEnumerator routine); // 0x00AE6274-0x00AE6278
		public void StopCoroutine(IEnumerator routine); // 0x00AE6278-0x00AE6388
		public void StopCoroutine(Coroutine routine); // 0x00AE63D8-0x00AE64E8
		public void StopCoroutine(string methodName); // 0x00AE6538-0x00AE6588
		public void StopAllCoroutines(); // 0x00AE6588-0x00AE65C8
		public static void print(object message); // 0x00AE6658-0x00AE66BC
		[FreeFunction] // 0x004CC0E8-0x004CC120
		private static void Internal_CancelInvokeAll(MonoBehaviour self); // 0x00AE5C20-0x00AE5C60
		[FreeFunction] // 0x004CC120-0x004CC158
		private static bool Internal_IsInvokingAll(MonoBehaviour self); // 0x00AE5BA0-0x00AE5BE0
		[FreeFunction] // 0x004CC158-0x004CC168
		private static void InvokeDelayed(MonoBehaviour self, string methodName, float time, float repeatRate); // 0x00AE5CC4-0x00AE5D2C
		[FreeFunction] // 0x004CC168-0x004CC178
		private static void CancelInvoke(MonoBehaviour self, string methodName); // 0x00AE5E60-0x00AE5EB0
		[FreeFunction] // 0x004CC178-0x004CC188
		private static bool IsInvoking(MonoBehaviour self, string methodName); // 0x00AE5F00-0x00AE5F50
		[FreeFunction] // 0x004CC188-0x004CC198
		private static bool IsObjectMonoBehaviour(UnityEngine.Object obj); // 0x00AE607C-0x00AE60BC
		private Coroutine StartCoroutineManaged(string methodName, object value); // 0x00AE60BC-0x00AE6114
		private Coroutine StartCoroutineManaged2(IEnumerator enumerator); // 0x00AE6224-0x00AE6274
		private void StopCoroutineManaged(Coroutine routine); // 0x00AE64E8-0x00AE6538
		private void StopCoroutineFromEnumeratorManaged(IEnumerator routine); // 0x00AE6388-0x00AE63D8
		internal string GetScriptClassName(); // 0x00AE66BC-0x00AE66FC
	}

	[NativeHeader] // 0x004C4CA4-0x004C4CDC
	internal sealed class NoAllocHelpers // TypeDefIndex: 2061
	{
		// Methods
		public static int SafeLength(Array values); // 0x00B94904-0x00B94914
		public static int SafeLength<T>(List<T> values);
		[FreeFunction] // 0x004CC198-0x004CC1D0
		public static Array ExtractArrayFromList(object list); // 0x00B94914-0x00B94954
	}
}

namespace UnityEngine.Scripting
{
	[AttributeUsage] // 0x004C4CDC-0x004C4D20
	[RequiredByNativeCode] // 0x004C4CDC-0x004C4D20
	public class PreserveAttribute : Attribute // TypeDefIndex: 2062
	{
		// Constructors
		public PreserveAttribute(); // 0x00BA3184-0x00BA318C
	}
}

namespace UnityEngine
{
	public struct RangeInt // TypeDefIndex: 2063
	{
		// Fields
		public int start; // 0x00
		public int length; // 0x04
	
		// Properties
		public int end { get; } // 0x0058CAB0-0x0058CABC 
	
		// Constructors
		public RangeInt(int start, int length); // 0x0058CAA8-0x0058CAB0
	}

	public enum RuntimeInitializeLoadType // TypeDefIndex: 2064
	{
		AfterSceneLoad = 0,
		BeforeSceneLoad = 1,
		AfterAssembliesLoaded = 2,
		BeforeSplashScreen = 3,
		SubsystemRegistration = 4
	}

	[AttributeUsage] // 0x004C4D20-0x004C4D64
	[RequiredByNativeCode] // 0x004C4D20-0x004C4D64
	public class RuntimeInitializeOnLoadMethodAttribute : PreserveAttribute // TypeDefIndex: 2065
	{
		// Fields
		private RuntimeInitializeLoadType m_LoadType; // 0x10
	
		// Properties
		private RuntimeInitializeLoadType loadType { set; } // 0x00BA318C-0x00BA3194
	
		// Constructors
		public RuntimeInitializeOnLoadMethodAttribute(); // 0x00BA315C-0x00BA3184
		public RuntimeInitializeOnLoadMethodAttribute(RuntimeInitializeLoadType loadType); // 0x00BA3194-0x00BA31C8
	}

	[ExtensionOfNativeClass] // 0x004C4D64-0x004C4DD4
	[NativeClass] // 0x004C4D64-0x004C4DD4
	[NativeHeader] // 0x004C4D64-0x004C4DD4
	[RequiredByNativeCode] // 0x004C4D64-0x004C4DD4
	public class ScriptableObject : UnityEngine.Object // TypeDefIndex: 2066
	{
		// Constructors
		public ScriptableObject(); // 0x00B96524-0x00B965B4
	
		// Methods
		public static ScriptableObject CreateInstance(Type type); // 0x00BA3B08-0x00BA3B4C
		public static T CreateInstance<T>()
			where T : ScriptableObject;
		[NativeMethod] // 0x004CC1D0-0x004CC204
		private static void CreateScriptableObject([Writable] /* 0x004CDB58-0x004CDB68 */ ScriptableObject self); // 0x00BA3AC8-0x00BA3B08
		[FreeFunction] // 0x004CC204-0x004CC23C
		internal static ScriptableObject CreateScriptableObjectInstanceFromType(Type type, bool applyDefaultsAndReset); // 0x00BA3B4C-0x00BA3B9C
	}

	internal class ScriptingUtility // TypeDefIndex: 2067
	{
		// Nested types
		private struct TestClass // TypeDefIndex: 2068
		{
			// Fields
			public int value; // 0x00
		}
	
		// Methods
		[RequiredByNativeCode] // 0x004CC23C-0x004CC24C
		private static bool IsManagedCodeWorking(); // 0x00BA3C94-0x00BA3C9C
	}

	[AttributeUsage] // 0x004C4DD4-0x004C4E0C
	public class SelectionBaseAttribute : Attribute // TypeDefIndex: 2069
	{
		// Constructors
		public SelectionBaseAttribute(); // 0x00BA3C9C-0x00BA3CA4
	}

	public static class StackTraceUtility // TypeDefIndex: 2070
	{
		// Fields
		private static string projectFolder; // 0x00
	
		// Constructors
		static StackTraceUtility(); // 0x00BA5AE0-0x00BA5B3C
	
		// Methods
		[RequiredByNativeCode] // 0x004CC24C-0x004CC25C
		internal static void SetProjectFolder(string folder); // 0x00BA5028-0x00BA5104
		[RequiredByNativeCode] // 0x004CC25C-0x004CC26C
		public static string ExtractStackTrace(); // 0x00BA5104-0x00BA519C
		[RequiredByNativeCode] // 0x004CC26C-0x004CC27C
		internal static void ExtractStringFromExceptionInternal(object exceptiono, out string message, out string stackTrace); // 0x00BA57BC-0x00BA5AE0
		internal static string ExtractFormattedStackTrace(StackTrace stackTrace); // 0x00BA519C-0x00BA57BC
	}

	[Serializable]
	[RequiredByNativeCode] // 0x004C4E0C-0x004C4E1C
	public class UnityException : Exception // TypeDefIndex: 2071
	{
		// Constructors
		public UnityException(); // 0x00F87438-0x00F874BC
		public UnityException(string message); // 0x00F874BC-0x00F87544
		protected UnityException(SerializationInfo info, StreamingContext context); // 0x00F87544-0x00F875D4
	}

	[Serializable]
	public class MissingReferenceException : Exception // TypeDefIndex: 2072
	{
		// Constructors
		public MissingReferenceException(); // 0x00AE5A48-0x00AE5ACC
		protected MissingReferenceException(SerializationInfo info, StreamingContext context); // 0x00AE5ACC-0x00AE5B5C
	}

	[NativeHeader] // 0x004C4E1C-0x004C4E54
	public class TextAsset : UnityEngine.Object // TypeDefIndex: 2073
	{
		// Properties
		public string text { get; } // 0x00BA60BC-0x00BA60FC 
		public byte[] bytes { get; } // 0x00BA60FC-0x00BA613C 
	
		// Methods
		public override string ToString(); // 0x00BA613C-0x00BA617C
	}

	[UsedByNativeCode] // 0x004C4E54-0x004C4E64
	public class TrackedReference // TypeDefIndex: 2074
	{
		// Fields
		internal IntPtr m_Ptr; // 0x10
	
		// Constructors
		protected TrackedReference(); // 0x00BA89B4-0x00BA89BC
	
		// Methods
		public static bool operator ==(TrackedReference x, TrackedReference y); // 0x00BA89BC-0x00BA8A48
		public static bool operator !=(TrackedReference x, TrackedReference y); // 0x00BA8A48-0x00BA8A64
		public override bool Equals(object o); // 0x00BA8A64-0x00BA8AF4
		public override int GetHashCode(); // 0x00BA8AF4-0x00BA8B00
		public static implicit operator bool(TrackedReference exists); // 0x00BA8B00-0x00BA8B20
	}

	[NativeHeader] // 0x004C4E64-0x004C4E9C
	internal sealed class UnhandledExceptionHandler // TypeDefIndex: 2075
	{
		// Fields
		[CompilerGenerated] // 0x004C6DC4-0x004C6DD4
		private static UnhandledExceptionEventHandler __f__am_cache0; // 0x00
	
		// Methods
		[RequiredByNativeCode] // 0x004CC27C-0x004CC28C
		private static void RegisterUECatcher(); // 0x00F872BC-0x00F8737C
		[CompilerGenerated] // 0x004CC28C-0x004CC29C
		private static void _RegisterUECatcher_m__0(object sender, UnhandledExceptionEventArgs e); // 0x00F8737C-0x00F87438
	}

	[Flags] // 0x004C4E9C-0x004C4EAC
	public enum HideFlags // TypeDefIndex: 2076
	{
		None = 0,
		HideInHierarchy = 1,
		HideInInspector = 2,
		DontSaveInEditor = 4,
		NotEditable = 8,
		DontSaveInBuild = 16,
		DontUnloadUnusedAsset = 32,
		DontSave = 52,
		HideAndDontSave = 61
	}

	[NativeHeader] // 0x004C4EAC-0x004C4F4C
	[NativeHeader] // 0x004C4EAC-0x004C4F4C
	[NativeHeader] // 0x004C4EAC-0x004C4F4C
	[RequiredByNativeCode] // 0x004C4EAC-0x004C4F4C
	public class Object // TypeDefIndex: 2077
	{
		// Fields
		private IntPtr m_CachedPtr; // 0x10
		internal static int OffsetOfInstanceIDInCPlusPlusObject; // 0x00
		private const string objectIsNullMessage = "The Object you want to instantiate is null."; // Metadata: 0x001F4100
		private const string cloneDestroyedMessage = "Instantiate failed because the clone was destroyed during creation. This can happen if DestroyImmediate is called in MonoBehaviour.Awake."; // Metadata: 0x001F412F
	
		// Properties
		public string name { get; set; } // 0x00B94DF4-0x00B94E78 0x00B94EB8-0x00B94F4C
		public HideFlags hideFlags { get; set; } // 0x00B95784-0x00B957C4 0x00B957C4-0x00B95814
	
		// Constructors
		public Object(); // 0x00B94954-0x00B9495C
		static Object(); // 0x00B95A98-0x00B96130
	
		// Methods
		public int GetInstanceID(); // 0x00B9495C-0x00B94A94
		public override int GetHashCode(); // 0x00B94AC8-0x00B94AD0
		public override bool Equals(object other); // 0x00B94AD0-0x00B94BE4
		public static implicit operator bool(Object exists); // 0x00B94D20-0x00B94D94
		private static bool CompareBaseObjects(Object lhs, Object rhs); // 0x00B94C58-0x00B94D20
		private static bool IsNativeObjectAlive(Object o); // 0x00B94D94-0x00B94DEC
		private IntPtr GetCachedPtr(); // 0x00B94DEC-0x00B94DF4
		[TypeInferenceRule] // 0x004CC29C-0x004CC2B0
		public static Object Instantiate(Object original, Vector3 position, Quaternion rotation); // 0x00B94F9C-0x00B95140
		[TypeInferenceRule] // 0x004CC2B0-0x004CC2C4
		public static Object Instantiate(Object original); // 0x00B95270-0x00B95360
		[TypeInferenceRule] // 0x004CC2C4-0x004CC2D8
		public static Object Instantiate(Object original, Transform parent, bool instantiateInWorldSpace); // 0x00B953A0-0x00B954FC
		public static T Instantiate<T>(T original)
			where T : Object;
		public static T Instantiate<T>(T original, Vector3 position, Quaternion rotation)
			where T : Object;
		public static T Instantiate<T>(T original, Transform parent, bool worldPositionStays)
			where T : Object;
		[NativeMethod] // 0x004CC2D8-0x004CC31C
		public static void Destroy(Object obj, [UnityEngine.Internal.DefaultValue] /* 0x004CDB68-0x004CDBA0 */ float t); // 0x00B95554-0x00B955A4
		[ExcludeFromDocs] // 0x004CC31C-0x004CC32C
		public static void Destroy(Object obj); // 0x00B955A4-0x00B9562C
		[NativeMethod] // 0x004CC32C-0x004CC370
		public static void DestroyImmediate(Object obj, [UnityEngine.Internal.DefaultValue] /* 0x004CDBA0-0x004CDBD8 */ bool allowDestroyingAssets); // 0x00B9562C-0x00B9567C
		[ExcludeFromDocs] // 0x004CC370-0x004CC380
		public static void DestroyImmediate(Object obj); // 0x00B9567C-0x00B95704
		[FreeFunction] // 0x004CC380-0x004CC3D0
		[TypeInferenceRule] // 0x004CC380-0x004CC3D0
		public static Object[] FindObjectsOfType(Type type); // 0x00B95704-0x00B95744
		[FreeFunction] // 0x004CC3D0-0x004CC408
		public static void DontDestroyOnLoad(Object target); // 0x00B95744-0x00B95784
		public static T FindObjectOfType<T>()
			where T : Object;
		private static void CheckNullArgument(object arg, string message); // 0x00B95140-0x00B951C8
		[TypeInferenceRule] // 0x004CC408-0x004CC41C
		public static Object FindObjectOfType(Type type); // 0x00B95814-0x00B958BC
		public override string ToString(); // 0x00B958BC-0x00B95940
		public static bool operator ==(Object x, Object y); // 0x00B94BE4-0x00B94C58
		public static bool operator !=(Object x, Object y); // 0x00B95980-0x00B95A00
		[NativeMethod] // 0x004CC41C-0x004CC460
		private static int GetOffsetOfInstanceIDInCPlusPlusObject(); // 0x00B94A94-0x00B94AC8
		[FreeFunction] // 0x004CC460-0x004CC498
		private static Object Internal_CloneSingle(Object data); // 0x00B95360-0x00B953A0
		[FreeFunction] // 0x004CC498-0x004CC4D0
		private static Object Internal_CloneSingleWithParent(Object data, Transform parent, bool worldPositionStays); // 0x00B954FC-0x00B95554
		[FreeFunction] // 0x004CC4D0-0x004CC508
		private static Object Internal_InstantiateSingle(Object data, Vector3 pos, Quaternion rot); // 0x00B951C8-0x00B95270
		[FreeFunction] // 0x004CC508-0x004CC540
		private static string ToString(Object obj); // 0x00B95940-0x00B95980
		[FreeFunction] // 0x004CC540-0x004CC578
		private static string GetName(Object obj); // 0x00B94E78-0x00B94EB8
		[FreeFunction] // 0x004CC578-0x004CC5B0
		private static void SetName(Object obj, string name); // 0x00B94F4C-0x00B94F9C
		[FreeFunction] // 0x004CC5B0-0x004CC5FC
		[VisibleToOtherModules] // 0x004CC5B0-0x004CC5FC
		internal static Object FindObjectFromInstanceID(int instanceID); // 0x00B95A58-0x00B95A98
		private static Object Internal_InstantiateSingle_Injected(Object data, ref Vector3 pos, ref Quaternion rot); // 0x00B95A00-0x00B95A58
	}

	internal sealed class UnitySynchronizationContext : SynchronizationContext // TypeDefIndex: 2078
	{
		// Fields
		private readonly List<WorkRequest> m_AsyncWorkQueue; // 0x10
		private readonly List<WorkRequest> m_CurrentFrameWork; // 0x18
		private readonly int m_MainThreadID; // 0x20
	
		// Nested types
		private struct WorkRequest // TypeDefIndex: 2079
		{
			// Fields
			private readonly SendOrPostCallback m_DelagateCallback; // 0x00
			private readonly object m_DelagateState; // 0x08
			private readonly ManualResetEvent m_WaitHandle; // 0x10
	
			// Constructors
			public WorkRequest(SendOrPostCallback callback, object state, ManualResetEvent waitHandle = null); // 0x00596140-0x0059614C
	
			// Methods
			public void Invoke(); // 0x0059614C-0x00596154
		}
	
		// Constructors
		private UnitySynchronizationContext(int mainThreadID); // 0x00F87844-0x00F878F0
		private UnitySynchronizationContext(List<WorkRequest> queue, int mainThreadID); // 0x00F878F0-0x00F87980
	
		// Methods
		public override void Send(SendOrPostCallback callback, object state); // 0x00F87980-0x00F87C00
		public override void Post(SendOrPostCallback callback, object state); // 0x00F87C00-0x00F87CD4
		public override SynchronizationContext CreateCopy(); // 0x00F87CD4-0x00F87D48
		private void Exec(); // 0x00F87D48-0x00F88030
		[RequiredByNativeCode] // 0x004CC5FC-0x004CC60C
		private static void InitializeSynchronizationContext(); // 0x00F88030-0x00F880B0
		[RequiredByNativeCode] // 0x004CC60C-0x004CC61C
		private static void ExecuteTasks(); // 0x00F880B0-0x00F8827C
	}

	[RequiredByNativeCode] // 0x004C4F4C-0x004C4F5C
	public sealed class WaitForEndOfFrame : YieldInstruction // TypeDefIndex: 2080
	{
		// Constructors
		public WaitForEndOfFrame(); // 0x00F8B35C-0x00F8B364
	}

	[RequiredByNativeCode] // 0x004C4F5C-0x004C4F6C
	public sealed class WaitForFixedUpdate : YieldInstruction // TypeDefIndex: 2081
	{
		// Constructors
		public WaitForFixedUpdate(); // 0x00F8B36C-0x00F8B374
	}

	[RequiredByNativeCode] // 0x004C4F6C-0x004C4F7C
	public sealed class WaitForSeconds : YieldInstruction // TypeDefIndex: 2082
	{
		// Fields
		internal float m_Seconds; // 0x10
	
		// Constructors
		public WaitForSeconds(float seconds); // 0x00F8B374-0x00F8B3A8
	}

	public class WaitForSecondsRealtime : CustomYieldInstruction // TypeDefIndex: 2083
	{
		// Fields
		[CompilerGenerated] // 0x004C6DD4-0x004C6E10
		[DebuggerBrowsable] // 0x004C6DD4-0x004C6E10
		private float _waitTime_k__BackingField; // 0x10
		private float m_WaitUntilTime; // 0x14
	
		// Properties
		public float waitTime { [CompilerGenerated] /* 0x004CC61C-0x004CC62C */ get; [CompilerGenerated] /* 0x004CC62C-0x004CC63C */ set; } // 0x00F8B3E4-0x00F8B3EC 0x00F8B3EC-0x00F8B3F4
		public override bool keepWaiting { get; } // 0x00F8B3F4-0x00F8B454 
	
		// Constructors
		public WaitForSecondsRealtime(float time); // 0x00F8B3A8-0x00F8B3E4
	}

	[UsedByNativeCode] // 0x004C4F7C-0x004C4F8C
	public class YieldInstruction // TypeDefIndex: 2084
	{
		// Constructors
		public YieldInstruction(); // 0x00F8B364-0x00F8B36C
	}
}

namespace UnityEngine.Scripting.APIUpdating
{
	internal struct MovedFromAttributeData // TypeDefIndex: 2085
	{
		// Fields
		public string className; // 0x00
		public string nameSpace; // 0x08
		public string assembly; // 0x10
		public bool classHasChanged; // 0x18
		public bool nameSpaceHasChanged; // 0x19
		public bool assemblyHasChanged; // 0x1A
		public bool autoUdpateAPI; // 0x1B
	
		// Methods
		public void Set(bool autoUpdateAPI, string sourceNamespace = null, string sourceAssembly = null, string sourceClassName = null); // 0x0058D39C-0x0058D3F0
	}

	[AttributeUsage] // 0x004C4F8C-0x004C4FA0
	public class MovedFromAttribute : Attribute // TypeDefIndex: 2086
	{
		// Fields
		internal MovedFromAttributeData data; // 0x10
	
		// Constructors
		public MovedFromAttribute(bool autoUpdateAPI, string sourceNamespace = null, string sourceAssembly = null, string sourceClassName = null); // 0x00BA3B9C-0x00BA3C4C
		public MovedFromAttribute(string sourceNamespace); // 0x00BA3C4C-0x00BA3C94
	}
}

namespace UnityEngine.Serialization
{
	[AttributeUsage] // 0x004C4FA0-0x004C4FE8
	[RequiredByNativeCode] // 0x004C4FA0-0x004C4FE8
	public class FormerlySerializedAsAttribute : Attribute // TypeDefIndex: 2087
	{
		// Fields
		private string m_oldName; // 0x10
	
		// Constructors
		public FormerlySerializedAsAttribute(string oldName); // 0x00BA3CA4-0x00BA3CD0
	}
}

namespace UnityEngine
{
	[Obsolete] // 0x004C4FE8-0x004C5034
	[RequiredByNativeCode] // 0x004C4FE8-0x004C5034
	public sealed class SerializePrivateVariables : Attribute // TypeDefIndex: 2088
	{
	}

	[RequiredByNativeCode] // 0x004C5034-0x004C5044
	public sealed class SerializeField : Attribute // TypeDefIndex: 2089
	{
		// Constructors
		public SerializeField(); // 0x00BA3CD0-0x00BA3CD8
	}

	[AttributeUsage] // 0x004C5044-0x004C5080
	[RequiredByNativeCode] // 0x004C5044-0x004C5080
	internal sealed class SerializeReference : Attribute // TypeDefIndex: 2090
	{
	}

	[AttributeUsage] // 0x004C5080-0x004C50BC
	[RequiredByNativeCode] // 0x004C5080-0x004C50BC
	public sealed class PreferBinarySerialization : Attribute // TypeDefIndex: 2091
	{
	}

	[RequiredByNativeCode] // 0x004C50BC-0x004C50CC
	public interface ISerializationCallbackReceiver // TypeDefIndex: 2092
	{
		// Methods
		[RequiredByNativeCode] // 0x004CC63C-0x004CC64C
		void OnBeforeSerialize();
		[RequiredByNativeCode] // 0x004CC64C-0x004CC65C
		void OnAfterDeserialize();
	}

	public sealed class ShaderVariantCollection : UnityEngine.Object // TypeDefIndex: 2093
	{
	}

	[NativeHeader] // 0x004C50CC-0x004C5118
	[UsedByNativeCode] // 0x004C50CC-0x004C5118
	public sealed class ComputeShader : UnityEngine.Object // TypeDefIndex: 2094
	{
		// Methods
		[NativeMethod] // 0x004CC65C-0x004CC6BC
		[RequiredByNativeCode] // 0x004CC65C-0x004CC6BC
		public int FindKernel(string name); // 0x00AD6FF0-0x00AD7040
	}

	internal class LowerResBlitTexture : UnityEngine.Object // TypeDefIndex: 2095
	{
		// Methods
		[RequiredByNativeCode] // 0x004CC6BC-0x004CC6CC
		internal void LowerResBlitTextureDontStripMe(); // 0x00AE0360-0x00AE0364
	}

	internal class PreloadData : UnityEngine.Object // TypeDefIndex: 2096
	{
		// Methods
		[RequiredByNativeCode] // 0x004CC6CC-0x004CC6DC
		internal void PreloadDataDontStripMe(); // 0x00B9AEBC-0x00B9AEC0
	}

	public enum OperatingSystemFamily // TypeDefIndex: 2097
	{
		Other = 0,
		MacOSX = 1,
		Windows = 2,
		Linux = 3
	}

	[NativeHeader] // 0x004C5118-0x004C51E4
	[NativeHeader] // 0x004C5118-0x004C51E4
	[NativeHeader] // 0x004C5118-0x004C51E4
	[NativeHeader] // 0x004C5118-0x004C51E4
	[NativeHeader] // 0x004C5118-0x004C51E4
	public sealed class SystemInfo // TypeDefIndex: 2098
	{
		// Properties
		public static OperatingSystemFamily operatingSystemFamily { get; } // 0x00BA5B3C-0x00BA5B70 
		public static string processorType { get; } // 0x00BA5BA4-0x00BA5BD8 
		public static int processorCount { get; } // 0x00BA5C0C-0x00BA5C40 
		public static int systemMemorySize { get; } // 0x00BA5C74-0x00BA5CA8 
		public static string deviceUniqueIdentifier { get; } // 0x00BA5CDC-0x00BA5D10 
		public static string deviceModel { get; } // 0x00BA5D44-0x00BA5D78 
		public static int graphicsMemorySize { get; } // 0x00BA5DAC-0x00BA5DE0 
		public static string graphicsDeviceVersion { get; } // 0x00BA5E14-0x00BA5E48 
		public static int graphicsShaderLevel { get; } // 0x00BA5E7C-0x00BA5EB0 
	
		// Methods
		private static bool IsValidEnumValue(Enum value); // 0x00BA5EE4-0x00BA5F70
		public static bool SupportsTextureFormat(TextureFormat format); // 0x00BA5F70-0x00BA6044
		[FreeFunction] // 0x004CC6DC-0x004CC714
		private static OperatingSystemFamily GetOperatingSystemFamily(); // 0x00BA5B70-0x00BA5BA4
		[FreeFunction] // 0x004CC714-0x004CC74C
		private static string GetProcessorType(); // 0x00BA5BD8-0x00BA5C0C
		[FreeFunction] // 0x004CC74C-0x004CC784
		private static int GetProcessorCount(); // 0x00BA5C40-0x00BA5C74
		[FreeFunction] // 0x004CC784-0x004CC7BC
		private static int GetPhysicalMemoryMB(); // 0x00BA5CA8-0x00BA5CDC
		[FreeFunction] // 0x004CC7BC-0x004CC7F4
		private static string GetDeviceUniqueIdentifier(); // 0x00BA5D10-0x00BA5D44
		[FreeFunction] // 0x004CC7F4-0x004CC82C
		private static string GetDeviceModel(); // 0x00BA5D78-0x00BA5DAC
		[FreeFunction] // 0x004CC82C-0x004CC864
		private static int GetGraphicsMemorySize(); // 0x00BA5DE0-0x00BA5E14
		[FreeFunction] // 0x004CC864-0x004CC89C
		private static string GetGraphicsDeviceVersion(); // 0x00BA5E48-0x00BA5E7C
		[FreeFunction] // 0x004CC89C-0x004CC8D4
		private static int GetGraphicsShaderLevel(); // 0x00BA5EB0-0x00BA5EE4
		[FreeFunction] // 0x004CC8D4-0x004CC90C
		private static bool SupportsTextureFormatNative(TextureFormat format); // 0x00BA6044-0x00BA6084
		[FreeFunction] // 0x004CC90C-0x004CC944
		public static bool IsFormatSupported(GraphicsFormat format, FormatUsage usage); // 0x00BA0A80-0x00BA0B90
		[FreeFunction] // 0x004CC944-0x004CC97C
		public static GraphicsFormat GetCompatibleFormat(GraphicsFormat format, FormatUsage usage); // 0x00BA0B90-0x00BA0CA4
		[FreeFunction] // 0x004CC97C-0x004CC9B4
		public static GraphicsFormat GetGraphicsFormat(DefaultFormat format); // 0x00B9FDD8-0x00B9FE18
	}

	[NativeHeader] // 0x004C51E4-0x004C5248
	[StaticAccessor] // 0x004C51E4-0x004C5248
	public class Time // TypeDefIndex: 2099
	{
		// Properties
		[NativeProperty] // 0x004CE1B4-0x004CE1EC
		public static float time { get; } // 0x00BA7CDC-0x00BA7D10 
		[NativeProperty] // 0x004CE1EC-0x004CE224
		public static float timeSinceLevelLoad { get; } // 0x00BA7D10-0x00BA7D44 
		public static float deltaTime { get; } // 0x00BA7D44-0x00BA7D78 
		public static float unscaledTime { get; } // 0x00BA7D78-0x00BA7DAC 
		public static float unscaledDeltaTime { get; } // 0x00BA7DAC-0x00BA7DE0 
		public static float fixedDeltaTime { get; } // 0x00BA7DE0-0x00BA7E14 
		public static float maximumDeltaTime { get; } // 0x00BA7E14-0x00BA7E48 
		public static float smoothDeltaTime { get; } // 0x00BA7E48-0x00BA7E7C 
		public static float maximumParticleDeltaTime { get; } // 0x00BA7E7C-0x00BA7EB0 
		public static float timeScale { get; set; } // 0x00BA7EB0-0x00BA7EE4 0x00BA7EE4-0x00BA7F28
		public static int frameCount { get; } // 0x00BA7F28-0x00BA7F5C 
		[NativeProperty] // 0x004CE224-0x004CE25C
		public static float realtimeSinceStartup { get; } // 0x00BA7F5C-0x00BA7F90 
	}

	internal struct TouchScreenKeyboard_InternalConstructorHelperArguments // TypeDefIndex: 2100
	{
		// Fields
		public uint keyboardType; // 0x00
		public uint autocorrection; // 0x04
		public uint multiline; // 0x08
		public uint secure; // 0x0C
		public uint alert; // 0x10
		public int characterLimit; // 0x14
	}

	[NativeConditional] // 0x004C5248-0x004C52CC
	[NativeHeader] // 0x004C5248-0x004C52CC
	[NativeHeader] // 0x004C5248-0x004C52CC
	public class TouchScreenKeyboard // TypeDefIndex: 2101
	{
		// Fields
		[NonSerialized]
		internal IntPtr m_Ptr; // 0x10
		[CompilerGenerated] // 0x004C6E10-0x004C6E4C
		[DebuggerBrowsable] // 0x004C6E10-0x004C6E4C
		private readonly bool _canGetSelection_k__BackingField; // 0x18
		[CompilerGenerated] // 0x004C6E4C-0x004C6E88
		[DebuggerBrowsable] // 0x004C6E4C-0x004C6E88
		private readonly bool _canSetSelection_k__BackingField; // 0x19
		[CompilerGenerated] // 0x004C6E88-0x004C6EC4
		[DebuggerBrowsable] // 0x004C6E88-0x004C6EC4
		private readonly TouchScreenKeyboardType _type_k__BackingField; // 0x1C
	
		// Properties
		public static bool isSupported { get; } // 0x00BA82D4-0x00BA8320 
		public static bool isInPlaceEditingAllowed { get; } // 0x00BA8320-0x00BA8328 
		public string text { [NativeName] /* 0x004CCA50-0x004CCA88 */ get; [NativeName] /* 0x004CCA88-0x004CCAC0 */ set; } // 0x00BA84AC-0x00BA84EC 0x00BA84EC-0x00BA853C
		public static bool hideInput { [NativeName] /* 0x004CCAC0-0x004CCAF8 */ set; } // 0x00BA853C-0x00BA857C
		public bool active { [NativeName] /* 0x004CCAF8-0x004CCB30 */ get; [NativeName] /* 0x004CCB30-0x004CCB68 */ set; } // 0x00BA857C-0x00BA85BC 0x00BA85BC-0x00BA860C
		[Obsolete] // 0x004CE25C-0x004CE294
		public bool done { get; } // 0x00BA864C-0x00BA868C 
		[Obsolete] // 0x004CE294-0x004CE2CC
		public bool wasCanceled { get; } // 0x00BA86CC-0x00BA870C 
		public Status status { [NativeName] /* 0x004CCBD8-0x004CCC10 */ get; } // 0x00BA870C-0x00BA874C 
		public int characterLimit { [NativeName] /* 0x004CCC10-0x004CCC48 */ set; } // 0x00BA874C-0x00BA879C
		public bool canGetSelection { [NativeName] /* 0x004CCC48-0x004CCC94 */ [CompilerGenerated] /* 0x004CCC48-0x004CCC94 */ get; } // 0x00BA879C-0x00BA87A4 
		public bool canSetSelection { [NativeName] /* 0x004CCC94-0x004CCCE0 */ [CompilerGenerated] /* 0x004CCC94-0x004CCCE0 */ get; } // 0x00BA87A4-0x00BA87AC 
		public RangeInt selection { get; set; } // 0x00BA87AC-0x00BA8808 0x00BA8858-0x00BA8964
	
		// Nested types
		public enum Status // TypeDefIndex: 2102
		{
			Visible = 0,
			Done = 1,
			Canceled = 2,
			LostFocus = 3
		}
	
		// Constructors
		public TouchScreenKeyboard(string text, TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure, bool alert, string textPlaceholder, int characterLimit); // 0x00BA7FBC-0x00BA811C
	
		// Methods
		[FreeFunction] // 0x004CC9B4-0x004CC9F8
		private static void Internal_Destroy(IntPtr ptr); // 0x00BA8174-0x00BA81B4
		private void Destroy(); // 0x00BA81B4-0x00BA8268
		~TouchScreenKeyboard(); // 0x00BA8268-0x00BA82D4
		[FreeFunction] // 0x004CC9F8-0x004CCA30
		private static IntPtr TouchScreenKeyboard_InternalConstructorHelper(ref TouchScreenKeyboard_InternalConstructorHelperArguments arguments, string text, string textPlaceholder); // 0x00BA811C-0x00BA8174
		public static TouchScreenKeyboard Open(string text, [UnityEngine.Internal.DefaultValue] /* 0x004CDBD8-0x004CDC10 */ TouchScreenKeyboardType keyboardType, [UnityEngine.Internal.DefaultValue] /* 0x004CDC10-0x004CDC48 */ bool autocorrection, [UnityEngine.Internal.DefaultValue] /* 0x004CDC48-0x004CDC80 */ bool multiline, [UnityEngine.Internal.DefaultValue] /* 0x004CDC80-0x004CDCB8 */ bool secure, [UnityEngine.Internal.DefaultValue] /* 0x004CDCB8-0x004CDCF0 */ bool alert, [UnityEngine.Internal.DefaultValue] /* 0x004CDCF0-0x004CDD28 */ string textPlaceholder, [UnityEngine.Internal.DefaultValue] /* 0x004CDD28-0x004CDD60 */ int characterLimit); // 0x00BA8328-0x00BA83E8
		[ExcludeFromDocs] // 0x004CCA30-0x004CCA40
		public static TouchScreenKeyboard Open(string text, TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure, bool alert, string textPlaceholder); // 0x00BA83E8-0x00BA8418
		[ExcludeFromDocs] // 0x004CCA40-0x004CCA50
		public static TouchScreenKeyboard Open(string text, TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure); // 0x00BA8418-0x00BA84AC
		[FreeFunction] // 0x004CCB68-0x004CCBA0
		private static bool GetDone(IntPtr ptr); // 0x00BA860C-0x00BA864C
		[FreeFunction] // 0x004CCBA0-0x004CCBD8
		private static bool GetWasCanceled(IntPtr ptr); // 0x00BA868C-0x00BA86CC
		private static void GetSelection(out int start, out int length); // 0x00BA8808-0x00BA8858
		private static void SetSelection(int start, int length); // 0x00BA8964-0x00BA89B4
	}

	public enum TouchScreenKeyboardType // TypeDefIndex: 2103
	{
		Default = 0,
		ASCIICapable = 1,
		NumbersAndPunctuation = 2,
		URL = 3,
		NumberPad = 4,
		PhonePad = 5,
		NamePhonePad = 6,
		EmailAddress = 7,
		NintendoNetworkAccount = 8,
		Social = 9,
		Search = 10
	}
}

namespace UnityEngineInternal
{
	public enum TypeInferenceRules // TypeDefIndex: 2104
	{
		TypeReferencedByFirstArgument = 0,
		TypeReferencedBySecondArgument = 1,
		ArrayOfTypeReferencedByFirstArgument = 2,
		TypeOfFirstArgument = 3
	}

	[Serializable]
	[AttributeUsage] // 0x004C52CC-0x004C52E0
	public class TypeInferenceRuleAttribute : Attribute // TypeDefIndex: 2105
	{
		// Fields
		private readonly string _rule; // 0x10
	
		// Constructors
		public TypeInferenceRuleAttribute(TypeInferenceRules rule); // 0x00F8B8D4-0x00F8B974
		public TypeInferenceRuleAttribute(string rule); // 0x00F8B974-0x00F8B9A0
	
		// Methods
		public override string ToString(); // 0x00F8B9A0-0x00F8B9A8
	}

	public class GenericStack : Stack // TypeDefIndex: 2106
	{
		// Constructors
		public GenericStack(); // 0x00F8B818-0x00F8B820
	}
}

namespace UnityEngine.Events
{
	[Serializable]
	public enum PersistentListenerMode // TypeDefIndex: 2107
	{
		EventDefined = 0,
		Void = 1,
		Object = 2,
		Int = 3,
		Float = 4,
		String = 5,
		Bool = 6
	}

	[Serializable]
	internal class ArgumentCache : ISerializationCallbackReceiver // TypeDefIndex: 2108
	{
		// Fields
		[FormerlySerializedAs] // 0x004C6EFC-0x004C6F48
		[SerializeField] // 0x004C6EFC-0x004C6F48
		private UnityEngine.Object m_ObjectArgument; // 0x10
		[FormerlySerializedAs] // 0x004C6F48-0x004C6F94
		[SerializeField] // 0x004C6F48-0x004C6F94
		private string m_ObjectArgumentAssemblyTypeName; // 0x18
		[FormerlySerializedAs] // 0x004C6F94-0x004C6FE0
		[SerializeField] // 0x004C6F94-0x004C6FE0
		private int m_IntArgument; // 0x20
		[FormerlySerializedAs] // 0x004C6FE0-0x004C702C
		[SerializeField] // 0x004C6FE0-0x004C702C
		private float m_FloatArgument; // 0x24
		[FormerlySerializedAs] // 0x004C702C-0x004C7078
		[SerializeField] // 0x004C702C-0x004C7078
		private string m_StringArgument; // 0x28
		[SerializeField] // 0x004C7078-0x004C7088
		private bool m_BoolArgument; // 0x30
	
		// Properties
		public UnityEngine.Object unityObjectArgument { get; } // 0x00ADA010-0x00ADA018 
		public string unityObjectArgumentAssemblyTypeName { get; } // 0x00ADA018-0x00ADA020 
		public int intArgument { get; } // 0x00ADA020-0x00ADA028 
		public float floatArgument { get; } // 0x00ADA028-0x00ADA030 
		public string stringArgument { get; } // 0x00ADA030-0x00ADA038 
		public bool boolArgument { get; } // 0x00ADA038-0x00ADA040 
	
		// Constructors
		public ArgumentCache(); // 0x00ADA008-0x00ADA010
	
		// Methods
		private void TidyAssemblyTypeName(); // 0x00ADA040-0x00ADA254
		public void OnBeforeSerialize(); // 0x00ADA254-0x00ADA258
		public void OnAfterDeserialize(); // 0x00ADA258-0x00ADA25C
	}

	internal abstract class BaseInvokableCall // TypeDefIndex: 2109
	{
		// Constructors
		protected BaseInvokableCall(); // 0x00ADA25C-0x00ADA264
		protected BaseInvokableCall(object target, MethodInfo function); // 0x00ADA264-0x00ADA324
	
		// Methods
		public abstract void Invoke(object[] args);
		protected static void ThrowOnInvalidArg<T>(object arg);
		protected static bool AllowInvoke(Delegate @delegate); // 0x00ADA324-0x00ADA3E0
		public abstract bool Find(object targetObj, MethodInfo method);
	}

	internal class InvokableCall : BaseInvokableCall // TypeDefIndex: 2110
	{
		// Fields
		[CompilerGenerated] // 0x004C7088-0x004C70C4
		[DebuggerBrowsable] // 0x004C7088-0x004C70C4
		private UnityAction Delegate; // 0x10
	
		// Events
		private event UnityAction Delegate {
			add; // 0x00ADA4B8-0x00ADA55C
			remove; // 0x00ADA58C-0x00ADA630
		}
	
		// Constructors
		public InvokableCall(object target, MethodInfo theFunction); // 0x00ADA3E0-0x00ADA4B8
		public InvokableCall(UnityAction action); // 0x00ADA55C-0x00ADA58C
	
		// Methods
		public override void Invoke(object[] args); // 0x00ADA630-0x00ADA670
		public void Invoke(); // 0x00ADA670-0x00ADA6B0
		public override bool Find(object targetObj, MethodInfo method); // 0x00ADA6B0-0x00ADA70C
	}

	internal class InvokableCall<T1> : BaseInvokableCall // TypeDefIndex: 2111
	{
		// Fields
		[CompilerGenerated] // 0x004C70C4-0x004C7100
		[DebuggerBrowsable] // 0x004C70C4-0x004C7100
		private UnityAction<T1> Delegate;
	
		// Events
		protected event UnityAction<T1> Delegate {
			add; // 0x00000000-0x00000000
			remove; // 0x00000000-0x00000000
		}
	
		// Constructors
		public InvokableCall(object target, MethodInfo theFunction);
		public InvokableCall(UnityAction<T1> action);
	
		// Methods
		public override void Invoke(object[] args);
		public virtual void Invoke(T1 args0);
		public override bool Find(object targetObj, MethodInfo method);
	}

	internal class InvokableCall<T1, T2> : BaseInvokableCall // TypeDefIndex: 2112
	{
		// Fields
		[CompilerGenerated] // 0x004C7100-0x004C713C
		[DebuggerBrowsable] // 0x004C7100-0x004C713C
		private UnityAction<T1, T2> Delegate;
	
		// Constructors
		public InvokableCall(object target, MethodInfo theFunction);
	
		// Methods
		public override void Invoke(object[] args);
		public void Invoke(T1 args0, T2 args1);
		public override bool Find(object targetObj, MethodInfo method);
	}

	internal class InvokableCall<T1, T2, T3> : BaseInvokableCall // TypeDefIndex: 2113
	{
		// Fields
		[CompilerGenerated] // 0x004C713C-0x004C7178
		[DebuggerBrowsable] // 0x004C713C-0x004C7178
		private UnityAction<T1, T2, T3> Delegate;
	
		// Constructors
		public InvokableCall(object target, MethodInfo theFunction);
	
		// Methods
		public override void Invoke(object[] args);
		public override bool Find(object targetObj, MethodInfo method);
	}

	internal class InvokableCall<T1, T2, T3, T4> : BaseInvokableCall // TypeDefIndex: 2114
	{
		// Fields
		[CompilerGenerated] // 0x004C7178-0x004C71B4
		[DebuggerBrowsable] // 0x004C7178-0x004C71B4
		private UnityAction<T1, T2, T3, T4> Delegate;
	
		// Constructors
		public InvokableCall(object target, MethodInfo theFunction);
	
		// Methods
		public override void Invoke(object[] args);
		public override bool Find(object targetObj, MethodInfo method);
	}

	internal class CachedInvokableCall<T> : InvokableCall<T> // TypeDefIndex: 2115
	{
		// Fields
		private readonly T m_Arg1;
	
		// Constructors
		public CachedInvokableCall(UnityEngine.Object target, MethodInfo theFunction, T argument);
	
		// Methods
		public override void Invoke(object[] args);
		public override void Invoke(T arg0);
	}

	public enum UnityEventCallState // TypeDefIndex: 2116
	{
		Off = 0,
		EditorAndRuntime = 1,
		RuntimeOnly = 2
	}

	[Serializable]
	internal class PersistentCall // TypeDefIndex: 2117
	{
		// Fields
		[FormerlySerializedAs] // 0x004C71B4-0x004C7200
		[SerializeField] // 0x004C71B4-0x004C7200
		private UnityEngine.Object m_Target; // 0x10
		[FormerlySerializedAs] // 0x004C7200-0x004C724C
		[SerializeField] // 0x004C7200-0x004C724C
		private string m_MethodName; // 0x18
		[FormerlySerializedAs] // 0x004C724C-0x004C7298
		[SerializeField] // 0x004C724C-0x004C7298
		private PersistentListenerMode m_Mode; // 0x20
		[FormerlySerializedAs] // 0x004C7298-0x004C72E4
		[SerializeField] // 0x004C7298-0x004C72E4
		private ArgumentCache m_Arguments; // 0x28
		[FormerlySerializedAs] // 0x004C72E4-0x004C7354
		[FormerlySerializedAs] // 0x004C72E4-0x004C7354
		[SerializeField] // 0x004C72E4-0x004C7354
		private UnityEventCallState m_CallState; // 0x30
	
		// Properties
		public UnityEngine.Object target { get; } // 0x00ADAB9C-0x00ADABA4 
		public string methodName { get; } // 0x00ADABA4-0x00ADABAC 
		public PersistentListenerMode mode { get; } // 0x00ADABAC-0x00ADABB4 
		public ArgumentCache arguments { get; } // 0x00ADABB4-0x00ADABBC 
	
		// Constructors
		public PersistentCall(); // 0x00ADAB28-0x00ADAB9C
	
		// Methods
		public bool IsValid(); // 0x00ADABBC-0x00ADAC50
		public BaseInvokableCall GetRuntimeCall(UnityEventBase theEvent); // 0x00ADAC50-0x00ADAE78
		private static BaseInvokableCall GetObjectCall(UnityEngine.Object target, MethodInfo method, ArgumentCache arguments); // 0x00ADAFC0-0x00ADB3C8
	}

	[Serializable]
	internal class PersistentCallGroup // TypeDefIndex: 2118
	{
		// Fields
		[FormerlySerializedAs] // 0x004C7354-0x004C73A0
		[SerializeField] // 0x004C7354-0x004C73A0
		private List<PersistentCall> m_Calls; // 0x10
	
		// Constructors
		public PersistentCallGroup(); // 0x00ADB3C8-0x00ADB43C
	
		// Methods
		public void Initialize(InvokableCallList invokableList, UnityEventBase unityEventBase); // 0x00ADB43C-0x00ADB58C
	}

	internal class InvokableCallList // TypeDefIndex: 2119
	{
		// Fields
		private readonly List<BaseInvokableCall> m_PersistentCalls; // 0x10
		private readonly List<BaseInvokableCall> m_RuntimeCalls; // 0x18
		private readonly List<BaseInvokableCall> m_ExecutingCalls; // 0x20
		private bool m_NeedsUpdate; // 0x28
	
		// Constructors
		public InvokableCallList(); // 0x00ADA70C-0x00ADA7BC
	
		// Methods
		public void AddPersistentInvokableCall(BaseInvokableCall call); // 0x00ADA7BC-0x00ADA830
		public void AddListener(BaseInvokableCall call); // 0x00ADA830-0x00ADA8A4
		public void RemoveListener(object targetObj, MethodInfo method); // 0x00ADA8A4-0x00ADAA28
		public void ClearPersistent(); // 0x00ADAA28-0x00ADAA8C
		public List<BaseInvokableCall> PrepareInvoke(); // 0x00ADAA8C-0x00ADAB28
	}

	[Serializable]
	[UsedByNativeCode] // 0x004C52E0-0x004C52F0
	public abstract class UnityEventBase : ISerializationCallbackReceiver // TypeDefIndex: 2120
	{
		// Fields
		private InvokableCallList m_Calls; // 0x10
		[FormerlySerializedAs] // 0x004C73A0-0x004C73EC
		[SerializeField] // 0x004C73A0-0x004C73EC
		private PersistentCallGroup m_PersistentCalls; // 0x18
		private bool m_CallsDirty; // 0x20
	
		// Constructors
		protected UnityEventBase(); // 0x00ADB5E4-0x00ADB670
	
		// Methods
		void ISerializationCallbackReceiver.OnBeforeSerialize(); // 0x00ADBB94-0x00ADBB98
		void ISerializationCallbackReceiver.OnAfterDeserialize(); // 0x00ADBB98-0x00ADBB9C
		protected abstract MethodInfo FindMethod_Impl(string name, object targetObj);
		internal abstract BaseInvokableCall GetDelegate(object target, MethodInfo theFunction);
		internal MethodInfo FindMethod(PersistentCall call); // 0x00ADAE78-0x00ADAFC0
		internal MethodInfo FindMethod(string name, object listener, PersistentListenerMode mode, Type argumentType); // 0x00ADBBD0-0x00ADBE74
		private void DirtyPersistentCalls(); // 0x00ADBB9C-0x00ADBBD0
		private void RebuildPersistentCallsIfNeeded(); // 0x00ADBE74-0x00ADBEB4
		internal void AddCall(BaseInvokableCall call); // 0x00ADB708-0x00ADB720
		protected void RemoveListener(object targetObj, MethodInfo method); // 0x00ADBEB4-0x00ADBECC
		internal List<BaseInvokableCall> PrepareInvoke(); // 0x00ADBB68-0x00ADBB94
		public override string ToString(); // 0x00ADBECC-0x00ADBF58
		public static MethodInfo GetValidMethodInfo(object obj, string functionName, Type[] argumentTypes); // 0x00ADB78C-0x00ADB960
	}

	public delegate void UnityAction(); // TypeDefIndex: 2121; 0x00AD3100-0x00AD331C

	[Serializable]
	public class UnityEvent : UnityEventBase // TypeDefIndex: 2122
	{
		// Fields
		private object[] m_InvokeArray; // 0x28
	
		// Constructors
		[RequiredByNativeCode] // 0x004CCCE0-0x004CCCF0
		public UnityEvent(); // 0x00ADB5DC-0x00ADB5E4
	
		// Methods
		public void AddListener(UnityAction call); // 0x00ADB670-0x00ADB69C
		protected override MethodInfo FindMethod_Impl(string name, object targetObj); // 0x00ADB720-0x00ADB78C
		internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction); // 0x00ADB960-0x00ADB9D0
		private static BaseInvokableCall GetDelegate(UnityAction action); // 0x00ADB69C-0x00ADB708
		public void Invoke(); // 0x00ADB9D0-0x00ADBB68
	}

	public delegate void UnityAction<T0>(T0 arg0); // TypeDefIndex: 2123; 0x00000000-0x00000000

	[Serializable]
	public abstract class UnityEvent<T0> : UnityEventBase // TypeDefIndex: 2124
	{
		// Fields
		private object[] m_InvokeArray;
	
		// Constructors
		[RequiredByNativeCode] // 0x004CCCF0-0x004CCD00
		public UnityEvent();
	
		// Methods
		public void AddListener(UnityAction<T0> call);
		public void RemoveListener(UnityAction<T0> call);
		protected override MethodInfo FindMethod_Impl(string name, object targetObj);
		internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction);
		private static BaseInvokableCall GetDelegate(UnityAction<T0> action);
		public void Invoke(T0 arg0);
	}

	public delegate void UnityAction<T0, T1>(T0 arg0, T1 arg1); // TypeDefIndex: 2125; 0x00000000-0x00000000

	[Serializable]
	public abstract class UnityEvent<T0, T1> : UnityEventBase // TypeDefIndex: 2126
	{
		// Fields
		private object[] m_InvokeArray;
	
		// Constructors
		[RequiredByNativeCode] // 0x004CCD00-0x004CCD10
		public UnityEvent();
	
		// Methods
		protected override MethodInfo FindMethod_Impl(string name, object targetObj);
		internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction);
		public void Invoke(T0 arg0, T1 arg1);
	}

	public delegate void UnityAction<T0, T1, T2>(T0 arg0, T1 arg1, T2 arg2); // TypeDefIndex: 2127; 0x00000000-0x00000000

	[Serializable]
	public abstract class UnityEvent<T0, T1, T2> : UnityEventBase // TypeDefIndex: 2128
	{
		// Fields
		private object[] m_InvokeArray;
	
		// Constructors
		[RequiredByNativeCode] // 0x004CCD10-0x004CCD20
		public UnityEvent();
	
		// Methods
		protected override MethodInfo FindMethod_Impl(string name, object targetObj);
		internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction);
	}

	public delegate void UnityAction<T0, T1, T2, T3>(T0 arg0, T1 arg1, T2 arg2, T3 arg3); // TypeDefIndex: 2129; 0x00000000-0x00000000

	[Serializable]
	public abstract class UnityEvent<T0, T1, T2, T3> : UnityEventBase // TypeDefIndex: 2130
	{
		// Fields
		private object[] m_InvokeArray;
	
		// Constructors
		[RequiredByNativeCode] // 0x004CCD20-0x004CCD30
		public UnityEvent();
	
		// Methods
		protected override MethodInfo FindMethod_Impl(string name, object targetObj);
		internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction);
	}
}

namespace Unity.Collections.LowLevel.Unsafe
{
	[NativeHeader] // 0x004C52F0-0x004C5354
	[StaticAccessor] // 0x004C52F0-0x004C5354
	public static class UnsafeUtility // TypeDefIndex: 2131
	{
		// Methods
		[ThreadSafe] // 0x004CCD30-0x004CCD40
		public static unsafe void Free(void* memory, Allocator allocator); // 0x00ACFFD0-0x00AD0020
		public static unsafe T ReadArrayElement<T>(void* source, int index);
		public static unsafe void WriteArrayElement<T>(void* destination, int index, T value);
	}
}

namespace UnityEngine
{
	[Serializable]
	public struct Pose : IEquatable<Pose> // TypeDefIndex: 2132
	{
		// Fields
		public Vector3 position; // 0x00
		public Quaternion rotation; // 0x0C
		private static readonly Pose k_Identity; // 0x00
	
		// Constructors
		public Pose(Vector3 position, Quaternion rotation); // 0x0058C940-0x0058C954
		static Pose(); // 0x00B9AD8C-0x00B9AE50
	
		// Methods
		public override string ToString(); // 0x0058C954-0x0058C95C
		public override bool Equals(object obj); // 0x0058C95C-0x0058C964
		public bool Equals(Pose other); // 0x0058C964-0x0058C99C
		public override int GetHashCode(); // 0x0058C99C-0x0058C9D4
	}
}

namespace Unity.Jobs
{
	[NativeType] // 0x004C5354-0x004C5390
	public struct JobHandle // TypeDefIndex: 2133
	{
		// Fields
		internal IntPtr jobGroup; // 0x00
		internal int version; // 0x08
	
		// Methods
		[NativeMethod] // 0x004CCD40-0x004CCD74
		public static void ScheduleBatchedJobs(); // 0x00AD007C-0x00AD00B0
	}
}

namespace UnityEngine.Profiling.Memory.Experimental
{
	public class MetaData // TypeDefIndex: 2134
	{
		// Fields
		public string content; // 0x10
		public string platform; // 0x18
		public Texture2D screenshot; // 0x20
	
		// Constructors
		public MetaData(); // 0x00B9B484-0x00B9B48C
	}

	[NativeHeader] // 0x004C5390-0x004C53C8
	public sealed class MemoryProfiler // TypeDefIndex: 2135
	{
		// Fields
		[CompilerGenerated] // 0x004C73EC-0x004C7428
		[DebuggerBrowsable] // 0x004C73EC-0x004C7428
		private static Action<string, bool> snapshotFinished; // 0x00
		[CompilerGenerated] // 0x004C7428-0x004C7464
		[DebuggerBrowsable] // 0x004C7428-0x004C7464
		private static Action<MetaData> createMetaData; // 0x08
	
		// Methods
		[RequiredByNativeCode] // 0x004CCD74-0x004CCD84
		private static byte[] PrepareMetadata(); // 0x00B9B134-0x00B9B484
		internal static int WriteIntToByteArray(byte[] array, int offset, int value); // 0x00B9B4CC-0x00B9B570
		internal static int WriteStringToByteArray(byte[] array, int offset, string value); // 0x00B9B570-0x00B9B628
		[RequiredByNativeCode] // 0x004CCD84-0x004CCD94
		private static void FinalizeSnapshot(string path, bool result); // 0x00B9B668-0x00B9B6F4
	}
}

namespace UnityEngine.Profiling
{
	[NativeHeader] // 0x004C53C8-0x004C5438
	[NativeHeader] // 0x004C53C8-0x004C5438
	[UsedByNativeCode] // 0x004C53C8-0x004C5438
	public class Sampler // TypeDefIndex: 2136
	{
		// Fields
		internal IntPtr m_Ptr; // 0x10
		internal static Sampler s_InvalidSampler; // 0x00
	
		// Constructors
		internal Sampler(); // 0x00B9AF28-0x00B9AF30
		static Sampler(); // 0x00B9B6F4-0x00B9B758
	}

	[NativeHeader] // 0x004C5438-0x004C54A8
	[NativeHeader] // 0x004C5438-0x004C54A8
	[UsedByNativeCode] // 0x004C5438-0x004C54A8
	public sealed class CustomSampler : Sampler // TypeDefIndex: 2137
	{
		// Fields
		internal static CustomSampler s_InvalidCustomSampler; // 0x00
	
		// Constructors
		internal CustomSampler(); // 0x00B9AEC0-0x00B9AF28
		internal CustomSampler(IntPtr ptr); // 0x00B9AF30-0x00B9AFAC
		static CustomSampler(); // 0x00B9B0D4-0x00B9B134
	
		// Methods
		public static CustomSampler Create(string name); // 0x00B9AFAC-0x00B9B094
		[NativeMethod] // 0x004CCD94-0x004CCDE0
		private static IntPtr CreateInternal([NotNull] /* 0x004CDD60-0x004CDD70 */ string name); // 0x00B9B094-0x00B9B0D4
	}
}

namespace UnityEngine
{
	[Flags] // 0x004C54A8-0x004C54B8
	public enum DrivenTransformProperties // TypeDefIndex: 2138
	{
		All = -1,
		None = 0,
		AnchoredPositionX = 2,
		AnchoredPositionY = 4,
		AnchoredPosition = 6,
		AnchoredPositionZ = 8,
		AnchoredPosition3D = 14,
		Rotation = 16,
		ScaleX = 32,
		ScaleY = 64,
		ScaleZ = 128,
		Scale = 224,
		AnchorMinX = 256,
		AnchorMinY = 512,
		AnchorMin = 768,
		AnchorMaxX = 1024,
		AnchorMaxY = 2048,
		AnchorMax = 3072,
		Anchors = 3840,
		SizeDeltaX = 4096,
		SizeDeltaY = 8192,
		SizeDelta = 12288,
		PivotX = 16384,
		PivotY = 32768,
		Pivot = 49152
	}

	public struct DrivenRectTransformTracker // TypeDefIndex: 2139
	{
		// Methods
		public void Add(UnityEngine.Object driver, RectTransform rectTransform, DrivenTransformProperties drivenProperties); // 0x00589F98-0x00589F9C
		public void Clear(); // 0x00589F9C-0x0058A164
	}

	[NativeClass] // 0x004C54B8-0x004C5518
	[NativeHeader] // 0x004C54B8-0x004C5518
	public sealed class RectTransform : Transform // TypeDefIndex: 2140
	{
		// Fields
		[CompilerGenerated] // 0x004C7464-0x004C74A0
		[DebuggerBrowsable] // 0x004C7464-0x004C74A0
		private static ReapplyDrivenProperties reapplyDrivenProperties; // 0x00
	
		// Properties
		public Rect rect { get; } // 0x00B9E370-0x00B9E3CC 
		public Vector2 anchorMin { get; set; } // 0x00B9E41C-0x00B9E474 0x00B9E4C4-0x00B9E518
		public Vector2 anchorMax { get; set; } // 0x00B9E568-0x00B9E5C0 0x00B9E610-0x00B9E664
		public Vector2 anchoredPosition { get; set; } // 0x00B9E6B4-0x00B9E70C 0x00B9E75C-0x00B9E7B0
		public Vector2 sizeDelta { get; set; } // 0x00B9E800-0x00B9E858 0x00B9E8A8-0x00B9E8FC
		public Vector2 pivot { get; set; } // 0x00B9E94C-0x00B9E9A4 0x00B9E9F4-0x00B9EA48
	
		// Events
		public static event ReapplyDrivenProperties reapplyDrivenProperties {
			add; // 0x00B9E200-0x00B9E2B8
			remove; // 0x00B9E2B8-0x00B9E370
		}
	
		// Nested types
		public enum Axis // TypeDefIndex: 2141
		{
			Horizontal = 0,
			Vertical = 1
		}
	
		public delegate void ReapplyDrivenProperties(RectTransform driven); // TypeDefIndex: 2142; 0x00B9F0E8-0x00B9F49C
	
		// Methods
		[NativeMethod] // 0x004CCDE0-0x004CCE18
		public void ForceUpdateRectTransforms(); // 0x00B9EA98-0x00B9EAD8
		public void GetLocalCorners(Vector3[] fourCornersArray); // 0x00B9EAD8-0x00B9ECAC
		public void GetWorldCorners(Vector3[] fourCornersArray); // 0x00B9ECAC-0x00B9EE1C
		public void SetSizeWithCurrentAnchors(Axis axis, float size); // 0x00B9EE94-0x00B9EF5C
		[RequiredByNativeCode] // 0x004CCE18-0x004CCE28
		internal static void SendReapplyDrivenProperties(RectTransform driven); // 0x00B9F080-0x00B9F0E8
		private Vector2 GetParentSize(); // 0x00B9EF5C-0x00B9F080
		private void get_rect_Injected(out Rect ret); // 0x00B9E3CC-0x00B9E41C
		private void get_anchorMin_Injected(out Vector2 ret); // 0x00B9E474-0x00B9E4C4
		private void set_anchorMin_Injected(ref Vector2 value); // 0x00B9E518-0x00B9E568
		private void get_anchorMax_Injected(out Vector2 ret); // 0x00B9E5C0-0x00B9E610
		private void set_anchorMax_Injected(ref Vector2 value); // 0x00B9E664-0x00B9E6B4
		private void get_anchoredPosition_Injected(out Vector2 ret); // 0x00B9E70C-0x00B9E75C
		private void set_anchoredPosition_Injected(ref Vector2 value); // 0x00B9E7B0-0x00B9E800
		private void get_sizeDelta_Injected(out Vector2 ret); // 0x00B9E858-0x00B9E8A8
		private void set_sizeDelta_Injected(ref Vector2 value); // 0x00B9E8FC-0x00B9E94C
		private void get_pivot_Injected(out Vector2 ret); // 0x00B9E9A4-0x00B9E9F4
		private void set_pivot_Injected(ref Vector2 value); // 0x00B9EA48-0x00B9EA98
	}

	[NativeHeader] // 0x004C5518-0x004C55AC
	[NativeHeader] // 0x004C5518-0x004C55AC
	[NativeHeader] // 0x004C5518-0x004C55AC
	[RequiredByNativeCode] // 0x004C5518-0x004C55AC
	public class Transform : Component, IEnumerable // TypeDefIndex: 2143
	{
		// Properties
		public Vector3 position { get; set; } // 0x00BA8B28-0x00BA8B88 0x00BA8BD8-0x00BA8C30
		public Vector3 localPosition { get; set; } // 0x00BA8C80-0x00BA8CE0 0x00BA8D30-0x00BA8D88
		public Vector3 eulerAngles { get; set; } // 0x00BA8DD8-0x00BA8E04 0x00BA8E60-0x00BA8EF0
		public Vector3 localEulerAngles { get; set; } // 0x00BA8F48-0x00BA8F74 0x00BA8FD0-0x00BA9060
		public Vector3 right { get; } // 0x00BA90B8-0x00BA91A0 
		public Vector3 up { get; } // 0x00BA91A0-0x00BA9288 
		public Vector3 forward { get; set; } // 0x00BA9288-0x00BA9370 0x00BA9370-0x00BA9400
		public Quaternion rotation { get; set; } // 0x00BA8E04-0x00BA8E60 0x00BA8EF0-0x00BA8F48
		public Quaternion localRotation { get; set; } // 0x00BA8F74-0x00BA8FD0 0x00BA9060-0x00BA90B8
		public Vector3 localScale { get; set; } // 0x00BA9540-0x00BA95A0 0x00BA95F0-0x00BA9648
		public Transform parent { get; set; } // 0x00B9F49C-0x00B9F4DC 0x00BA96D8-0x00BA97A4
		internal Transform parentInternal { get; set; } // 0x00BA9698-0x00BA96D8 0x00BA97A4-0x00BA97F8
		public Matrix4x4 worldToLocalMatrix { get; } // 0x00BA98E4-0x00BA995C 
		public Matrix4x4 localToWorldMatrix { get; } // 0x00B9EE1C-0x00B9EE94 
		public Transform root { get; } // 0x00BAA5D4-0x00BAA614 
		public int childCount { [NativeMethod] /* 0x004CCEE8-0x004CCF20 */ get; } // 0x00BAA654-0x00BAA694 
		public Vector3 lossyScale { [NativeMethod] /* 0x004CCF30-0x004CCF68 */ get; } // 0x00BAA838-0x00BAA898 
		[NativeProperty] // 0x004CE2CC-0x004CE304
		public bool hasChanged { get; set; } // 0x00BAA938-0x00BAA978 0x00BAA978-0x00BAA9C8
	
		// Nested types
		private class Enumerator : IEnumerator // TypeDefIndex: 2144
		{
			// Fields
			private Transform outer; // 0x10
			private int currentIndex; // 0x18
	
			// Properties
			public object Current { get; } // 0x00F86D68-0x00F86D8C 
	
			// Constructors
			internal Enumerator(Transform outer); // 0x00F86D34-0x00F86D68
	
			// Methods
			public bool MoveNext(); // 0x00F86D8C-0x00F86DD0
			public void Reset(); // 0x00F86DD0-0x00F86DDC
		}
	
		// Constructors
		protected Transform(); // 0x00BA8B20-0x00BA8B28
	
		// Methods
		private Transform GetParent(); // 0x00BA97F8-0x00BA9838
		public void SetParent(Transform p); // 0x00BA9838-0x00BA988C
		[FreeFunction] // 0x004CCE28-0x004CCE6C
		public void SetParent(Transform parent, bool worldPositionStays); // 0x00BA988C-0x00BA98E4
		public void Translate(Vector3 translation, [UnityEngine.Internal.DefaultValue] /* 0x004CDD70-0x004CDDA8 */ Space relativeTo); // 0x00BA99FC-0x00BA9B24
		public void Translate(Vector3 translation); // 0x00BA9B90-0x00BA9B98
		public void Translate(float x, float y, float z); // 0x00BA9B98-0x00BA9BE4
		public void Rotate(Vector3 eulers, [UnityEngine.Internal.DefaultValue] /* 0x004CDDA8-0x004CDDE0 */ Space relativeTo); // 0x00BA9BE4-0x00BA9DE8
		public void Rotate(float xAngle, float yAngle, float zAngle); // 0x00BA9DE8-0x00BA9E34
		[NativeMethod] // 0x004CCE6C-0x004CCEA4
		internal void RotateAroundInternal(Vector3 axis, float angle); // 0x00BA9E34-0x00BA9E9C
		public void Rotate(Vector3 axis, float angle, [UnityEngine.Internal.DefaultValue] /* 0x004CDDE0-0x004CDE18 */ Space relativeTo); // 0x00BA9EFC-0x00BA9F94
		public void Rotate(Vector3 axis, float angle); // 0x00BA9F94-0x00BA9F9C
		public void RotateAround(Vector3 point, Vector3 axis, float angle); // 0x00BA9F9C-0x00BAA124
		public void LookAt(Transform target); // 0x00BAA124-0x00BAA228
		public void LookAt(Vector3 worldPosition, [UnityEngine.Internal.DefaultValue] /* 0x004CDE18-0x004CDE50 */ Vector3 worldUp); // 0x00BAA228-0x00BAA22C
		[FreeFunction] // 0x004CCEA4-0x004CCEE8
		private void Internal_LookAt(Vector3 worldPosition, Vector3 worldUp); // 0x00BAA22C-0x00BAA290
		public Vector3 TransformDirection(Vector3 direction); // 0x00BA9B24-0x00BA9B90
		public Vector3 InverseTransformDirection(Vector3 direction); // 0x00BAA340-0x00BAA3AC
		public Vector3 TransformPoint(Vector3 position); // 0x00BAA404-0x00BAA470
		public Vector3 TransformPoint(float x, float y, float z); // 0x00BAA4C8-0x00BAA510
		public Vector3 InverseTransformPoint(Vector3 position); // 0x00BAA510-0x00BAA57C
		private Transform GetRoot(); // 0x00BAA614-0x00BAA654
		public void SetAsFirstSibling(); // 0x00BAA694-0x00BAA6D4
		public void SetSiblingIndex(int index); // 0x00BAA6D4-0x00BAA724
		[FreeFunction] // 0x004CCF20-0x004CCF30
		private static Transform FindRelativeTransformWithPath(Transform transform, string path, [UnityEngine.Internal.DefaultValue] /* 0x004CDE50-0x004CDE88 */ bool isActiveOnly); // 0x00BAA724-0x00BAA77C
		public Transform Find(string n); // 0x00BAA77C-0x00BAA838
		[FreeFunction] // 0x004CCF68-0x004CCFAC
		public bool IsChildOf([NotNull] /* 0x004CDE88-0x004CDE98 */ Transform parent); // 0x00BAA8E8-0x00BAA938
		public IEnumerator GetEnumerator(); // 0x00BAA9C8-0x00BAAA2C
		[FreeFunction] // 0x004CCFAC-0x004CD004
		[NativeThrows] // 0x004CCFAC-0x004CD004
		public Transform GetChild(int index); // 0x00BAAA2C-0x00BABA7C
		private void get_position_Injected(out Vector3 ret); // 0x00BA8B88-0x00BA8BD8
		private void set_position_Injected(ref Vector3 value); // 0x00BA8C30-0x00BA8C80
		private void get_localPosition_Injected(out Vector3 ret); // 0x00BA8CE0-0x00BA8D30
		private void set_localPosition_Injected(ref Vector3 value); // 0x00BA8D88-0x00BA8DD8
		private void get_rotation_Injected(out Quaternion ret); // 0x00BA9400-0x00BA9450
		private void set_rotation_Injected(ref Quaternion value); // 0x00BA9450-0x00BA94A0
		private void get_localRotation_Injected(out Quaternion ret); // 0x00BA94A0-0x00BA94F0
		private void set_localRotation_Injected(ref Quaternion value); // 0x00BA94F0-0x00BA9540
		private void get_localScale_Injected(out Vector3 ret); // 0x00BA95A0-0x00BA95F0
		private void set_localScale_Injected(ref Vector3 value); // 0x00BA9648-0x00BA9698
		private void get_worldToLocalMatrix_Injected(out Matrix4x4 ret); // 0x00BA995C-0x00BA99AC
		private void get_localToWorldMatrix_Injected(out Matrix4x4 ret); // 0x00BA99AC-0x00BA99FC
		private void RotateAroundInternal_Injected(ref Vector3 axis, float angle); // 0x00BA9E9C-0x00BA9EFC
		private void Internal_LookAt_Injected(ref Vector3 worldPosition, ref Vector3 worldUp); // 0x00BAA290-0x00BAA2E8
		private void TransformDirection_Injected(ref Vector3 direction, out Vector3 ret); // 0x00BAA2E8-0x00BAA340
		private void InverseTransformDirection_Injected(ref Vector3 direction, out Vector3 ret); // 0x00BAA3AC-0x00BAA404
		private void TransformPoint_Injected(ref Vector3 position, out Vector3 ret); // 0x00BAA470-0x00BAA4C8
		private void InverseTransformPoint_Injected(ref Vector3 position, out Vector3 ret); // 0x00BAA57C-0x00BAA5D4
		private void get_lossyScale_Injected(out Vector3 ret); // 0x00BAA898-0x00BAA8E8
	}
}

namespace UnityEngine.Experimental.U2D
{
	[Serializable]
	[NativeHeader] // 0x004C55AC-0x004C5644
	[NativeHeader] // 0x004C55AC-0x004C5644
	[NativeType] // 0x004C55AC-0x004C5644
	[RequiredByNativeCode] // 0x004C55AC-0x004C5644
	public struct SpriteBone // TypeDefIndex: 2145
	{
		// Fields
		[NativeName] // 0x004C74A0-0x004C74EC
		[SerializeField] // 0x004C74A0-0x004C74EC
		private string m_Name; // 0x00
		[NativeName] // 0x004C74EC-0x004C7538
		[SerializeField] // 0x004C74EC-0x004C7538
		private Vector3 m_Position; // 0x08
		[NativeName] // 0x004C7538-0x004C7584
		[SerializeField] // 0x004C7538-0x004C7584
		private Quaternion m_Rotation; // 0x14
		[NativeName] // 0x004C7584-0x004C75D0
		[SerializeField] // 0x004C7584-0x004C75D0
		private float m_Length; // 0x24
		[NativeName] // 0x004C75D0-0x004C761C
		[SerializeField] // 0x004C75D0-0x004C761C
		private int m_ParentId; // 0x28
	}
}

namespace UnityEngine.Sprites
{
	public sealed class DataUtility // TypeDefIndex: 2146
	{
		// Methods
		public static Vector4 GetInnerUV(Sprite sprite); // 0x00BA4F8C-0x00BA4FA0
		public static Vector4 GetOuterUV(Sprite sprite); // 0x00BA4FA0-0x00BA4FB4
		public static Vector4 GetPadding(Sprite sprite); // 0x00BA4FB4-0x00BA4FC8
		public static Vector2 GetMinSize(Sprite sprite); // 0x00BA4FC8-0x00BA5028
	}
}

namespace UnityEngine
{
	[NativeType] // 0x004C5644-0x004C56CC
	[RequireComponent] // 0x004C5644-0x004C56CC
	public sealed class SpriteRenderer : Renderer // TypeDefIndex: 2147
	{
		// Properties
		public Sprite sprite { set; } // 0x00BA4DE8-0x00BA4E38
		public Color color { get; set; } // 0x00BA4E38-0x00BA4E94 0x00BA4EE4-0x00BA4F3C
	
		// Methods
		private void get_color_Injected(out Color ret); // 0x00BA4E94-0x00BA4EE4
		private void set_color_Injected(ref Color value); // 0x00BA4F3C-0x00BA4F8C
	}

	public enum SpritePackingMode // TypeDefIndex: 2148
	{
		Tight = 0,
		Rectangle = 1
	}

	[ExcludeFromPreset] // 0x004C56CC-0x004C5784
	[NativeHeader] // 0x004C56CC-0x004C5784
	[NativeHeader] // 0x004C56CC-0x004C5784
	[NativeHeader] // 0x004C56CC-0x004C5784
	[NativeType] // 0x004C56CC-0x004C5784
	public sealed class Sprite : UnityEngine.Object // TypeDefIndex: 2149
	{
		// Properties
		public Bounds bounds { get; } // 0x00BA47AC-0x00BA481C 
		public Rect rect { get; } // 0x00BA486C-0x00BA48C8 
		public Vector4 border { get; } // 0x00BA4918-0x00BA4974 
		public Texture2D texture { get; } // 0x00BA49C4-0x00BA4A04 
		public float pixelsPerUnit { [NativeMethod] /* 0x004CD014-0x004CD04C */ get; } // 0x00BA4A04-0x00BA4A44 
		public Texture2D associatedAlphaSplitTexture { [NativeMethod] /* 0x004CD04C-0x004CD084 */ get; } // 0x00BA4A44-0x00BA4A84 
		public Vector2 pivot { [NativeMethod] /* 0x004CD084-0x004CD0BC */ get; } // 0x00BA4A84-0x00BA4ADC 
		public bool packed { get; } // 0x00BA4B2C-0x00BA4B78 
		public SpritePackingMode packingMode { get; } // 0x00BA4B78-0x00BA4BB8 
		public Rect textureRect { get; } // 0x00BA4BB8-0x00BA4C54 
		public Vector2 textureRectOffset { get; } // 0x00BA4C54-0x00BA4D28 
		public Vector2[] vertices { [FreeFunction] /* 0x004CD0BC-0x004CD100 */ get; } // 0x00BA4D28-0x00BA4D68 
		public ushort[] triangles { [FreeFunction] /* 0x004CD100-0x004CD144 */ get; } // 0x00BA4D68-0x00BA4DA8 
		public Vector2[] uv { [FreeFunction] /* 0x004CD144-0x004CD188 */ get; } // 0x00BA4DA8-0x00BA4DE8 
	
		// Constructors
		[RequiredByNativeCode] // 0x004CD004-0x004CD014
		private Sprite(); // 0x00BA436C-0x00BA43D4
	
		// Methods
		internal int GetPackingMode(); // 0x00BA43D4-0x00BA4414
		internal int GetPacked(); // 0x00BA4414-0x00BA4454
		internal Rect GetTextureRect(); // 0x00BA4454-0x00BA44B0
		internal Vector2 GetTextureRectOffset(); // 0x00BA4500-0x00BA4558
		internal Vector4 GetInnerUVs(); // 0x00BA45A8-0x00BA4604
		internal Vector4 GetOuterUVs(); // 0x00BA4654-0x00BA46B0
		internal Vector4 GetPadding(); // 0x00BA4700-0x00BA475C
		private void GetTextureRect_Injected(out Rect ret); // 0x00BA44B0-0x00BA4500
		private void GetTextureRectOffset_Injected(out Vector2 ret); // 0x00BA4558-0x00BA45A8
		private void GetInnerUVs_Injected(out Vector4 ret); // 0x00BA4604-0x00BA4654
		private void GetOuterUVs_Injected(out Vector4 ret); // 0x00BA46B0-0x00BA4700
		private void GetPadding_Injected(out Vector4 ret); // 0x00BA475C-0x00BA47AC
		private void get_bounds_Injected(out Bounds ret); // 0x00BA481C-0x00BA486C
		private void get_rect_Injected(out Rect ret); // 0x00BA48C8-0x00BA4918
		private void get_border_Injected(out Vector4 ret); // 0x00BA4974-0x00BA49C4
		private void get_pivot_Injected(out Vector2 ret); // 0x00BA4ADC-0x00BA4B2C
	}
}

namespace UnityEngine.U2D
{
	[NativeHeader] // 0x004C5784-0x004C580C
	[NativeHeader] // 0x004C5784-0x004C580C
	[StaticAccessor] // 0x004C5784-0x004C580C
	public class SpriteAtlasManager // TypeDefIndex: 2150
	{
		// Fields
		[CompilerGenerated] // 0x004C761C-0x004C7658
		[DebuggerBrowsable] // 0x004C761C-0x004C7658
		private static Action<string, Action<SpriteAtlas>> atlasRequested; // 0x00
		[CompilerGenerated] // 0x004C7658-0x004C7694
		[DebuggerBrowsable] // 0x004C7658-0x004C7694
		private static Action<SpriteAtlas> atlasRegistered; // 0x08
		[CompilerGenerated] // 0x004C7694-0x004C76A4
		private static Action<SpriteAtlas> __f__mg_cache0; // 0x10
	
		// Events
		public static event Action<SpriteAtlas> atlasRegistered {
			add; // 0x00F86F74-0x00F8706C
			remove; // 0x00F8706C-0x00F87164
		}
	
		// Constructors
		static SpriteAtlasManager(); // 0x00F87260-0x00F872BC
	
		// Methods
		[RequiredByNativeCode] // 0x004CD188-0x004CD198
		private static bool RequestAtlas(string tag); // 0x00F86E2C-0x00F86F74
		[RequiredByNativeCode] // 0x004CD198-0x004CD1A8
		private static void PostRegisteredAtlas(SpriteAtlas spriteAtlas); // 0x00F87164-0x00F87220
		internal static void Register(SpriteAtlas spriteAtlas); // 0x00F87220-0x00F87260
	}

	[NativeHeader] // 0x004C580C-0x004C586C
	[NativeType] // 0x004C580C-0x004C586C
	public class SpriteAtlas : UnityEngine.Object // TypeDefIndex: 2151
	{
		// Methods
		public bool CanBindTo(Sprite sprite); // 0x00F86DDC-0x00F86E2C
	}
}

namespace UnityEngine._Scripting.APIUpdating
{
	internal class APIUpdaterRuntimeHelpers // TypeDefIndex: 2152
	{
		// Methods
		[RequiredByNativeCode] // 0x004CD1A8-0x004CD1B8
		internal static bool GetMovedFromAttributeDataForType(Type sourceType, out string assembly, out string nsp, out string klass); // 0x00F8B454-0x00F8B58C
		[RequiredByNativeCode] // 0x004CD1B8-0x004CD1C8
		internal static bool GetObsoleteTypeRedirection(Type sourceType, out string assemblyName, out string nsp, out string className); // 0x00F8B58C-0x00F8B818
	}
}

namespace UnityEngine
{
	[RequiredByNativeCode] // 0x004CF918-0x004CF928
	public class ControllerColliderHit // TypeDefIndex: 2156
	{
		// Fields
		internal CharacterController m_Controller; // 0x10
		internal Collider m_Collider; // 0x18
		internal Vector3 m_Point; // 0x20
		internal Vector3 m_Normal; // 0x2C
		internal Vector3 m_MoveDirection; // 0x38
		internal float m_MoveLength; // 0x44
		internal int m_Push; // 0x48
	}

	[RequiredByNativeCode] // 0x004CF928-0x004CF938
	public class Collision // TypeDefIndex: 2157
	{
		// Fields
		internal Vector3 m_Impulse; // 0x10
		internal Vector3 m_RelativeVelocity; // 0x1C
		internal Rigidbody m_Rigidbody; // 0x28
		internal Collider m_Collider; // 0x30
		internal int m_ContactCount; // 0x38
		internal ContactPoint[] m_ReusedContacts; // 0x40
		internal ContactPoint[] m_LegacyContacts; // 0x48
	
		// Properties
		public Vector3 relativeVelocity { get; } // 0x00FA1DE0-0x00FA1DEC 
		public Collider collider { get; } // 0x00FA1DEC-0x00FA1DF4 
		public GameObject gameObject { get; } // 0x00FA1DF4-0x00FA1E84 
	}

	public enum CollisionFlags // TypeDefIndex: 2158
	{
		None = 0,
		Sides = 1,
		CollidedSides = 1,
		Above = 2,
		CollidedAbove = 2,
		Below = 4,
		CollidedBelow = 4
	}

	public enum QueryTriggerInteraction // TypeDefIndex: 2159
	{
		UseGlobal = 0,
		Ignore = 1,
		Collide = 2
	}

	[NativeHeader] // 0x004CF938-0x004CF9CC
	[NativeHeader] // 0x004CF938-0x004CF9CC
	[NativeHeader] // 0x004CF938-0x004CF9CC
	[UsedByNativeCode] // 0x004CF938-0x004CF9CC
	public struct RaycastHit // TypeDefIndex: 2160
	{
		// Fields
		[NativeName] // 0x004CFD60-0x004CFD98
		internal Vector3 m_Point; // 0x00
		[NativeName] // 0x004CFD98-0x004CFDD0
		internal Vector3 m_Normal; // 0x0C
		[NativeName] // 0x004CFDD0-0x004CFE08
		internal uint m_FaceID; // 0x18
		[NativeName] // 0x004CFE08-0x004CFE40
		internal float m_Distance; // 0x1C
		[NativeName] // 0x004CFE40-0x004CFE78
		internal Vector2 m_UV; // 0x20
		[NativeName] // 0x004CFE78-0x004CFEB0
		internal int m_Collider; // 0x28
	
		// Properties
		public Collider collider { get; } // 0x00596C90-0x00596C98 
		public Vector3 point { get; } // 0x00596C98-0x00596CA4 
		public Vector3 normal { get; } // 0x00596CA4-0x00596CB0 
		public float distance { get; set; } // 0x00596CB0-0x00596CB8 0x00596CB8-0x00596CC0
	}

	[NativeHeader] // 0x004CF9CC-0x004CFA54
	[RequireComponent] // 0x004CF9CC-0x004CFA54
	public class Rigidbody : Component // TypeDefIndex: 2161
	{
		// Properties
		public Vector3 velocity { get; set; } // 0x00FA48D8-0x00FA4938 0x00FA4988-0x00FA49E0
		public Vector3 angularVelocity { get; set; } // 0x00FA4A30-0x00FA4A90 0x00FA4AE0-0x00FA4B38
		public float mass { get; } // 0x00FA4B88-0x00FA4BC8 
		public bool useGravity { set; } // 0x00FA4BC8-0x00FA4C18
		public bool isKinematic { set; } // 0x00FA4C18-0x00FA4C68
		public bool detectCollisions { set; } // 0x00FA4C68-0x00FA4CB8
		public Vector3 position { get; set; } // 0x00FA4CB8-0x00FA4D18 0x00FA4D68-0x00FA4DC0
		public Quaternion rotation { get; set; } // 0x00FA4E10-0x00FA4E6C 0x00FA4EBC-0x00FA4F14
	
		// Constructors
		public Rigidbody(); // 0x00FA48D0-0x00FA48D8
	
		// Methods
		public void MovePosition(Vector3 position); // 0x00FA4F64-0x00FA4FBC
		public void MoveRotation(Quaternion rot); // 0x00FA500C-0x00FA5064
		private void get_velocity_Injected(out Vector3 ret); // 0x00FA4938-0x00FA4988
		private void set_velocity_Injected(ref Vector3 value); // 0x00FA49E0-0x00FA4A30
		private void get_angularVelocity_Injected(out Vector3 ret); // 0x00FA4A90-0x00FA4AE0
		private void set_angularVelocity_Injected(ref Vector3 value); // 0x00FA4B38-0x00FA4B88
		private void get_position_Injected(out Vector3 ret); // 0x00FA4D18-0x00FA4D68
		private void set_position_Injected(ref Vector3 value); // 0x00FA4DC0-0x00FA4E10
		private void get_rotation_Injected(out Quaternion ret); // 0x00FA4E6C-0x00FA4EBC
		private void set_rotation_Injected(ref Quaternion value); // 0x00FA4F14-0x00FA4F64
		private void MovePosition_Injected(ref Vector3 position); // 0x00FA4FBC-0x00FA500C
		private void MoveRotation_Injected(ref Quaternion rot); // 0x00FA5064-0x00FA50B4
	}

	[NativeHeader] // 0x004CFA54-0x004CFAEC
	[RequireComponent] // 0x004CFA54-0x004CFAEC
	[RequiredByNativeCode] // 0x004CFA54-0x004CFAEC
	public class Collider : Component // TypeDefIndex: 2162
	{
		// Properties
		public bool enabled { get; set; } // 0x00FA191C-0x00FA195C 0x00FA195C-0x00FA19AC
		public Rigidbody attachedRigidbody { [NativeMethod] /* 0x004CFEB0-0x004CFEE8 */ get; } // 0x00FA19AC-0x00FA19EC 
		public bool isTrigger { get; set; } // 0x00FA19EC-0x00FA1A2C 0x00FA1A2C-0x00FA1A7C
		public Bounds bounds { get; } // 0x00FA1B40-0x00FA1BB0 
	
		// Constructors
		public Collider(); // 0x00FA1914-0x00FA191C
	
		// Methods
		public Vector3 ClosestPoint(Vector3 position); // 0x00FA1A7C-0x00FA1AE8
		private RaycastHit Raycast(Ray ray, float maxDistance, ref bool hasHit); // 0x00FA1C00-0x00FA1CA4
		public bool Raycast(Ray ray, out RaycastHit hitInfo, float maxDistance); // 0x00FA1D1C-0x00FA1DE0
		private void ClosestPoint_Injected(ref Vector3 position, out Vector3 ret); // 0x00FA1AE8-0x00FA1B40
		private void get_bounds_Injected(out Bounds ret); // 0x00FA1BB0-0x00FA1C00
		private void Raycast_Injected(ref Ray ray, float maxDistance, ref bool hasHit, out RaycastHit ret); // 0x00FA1CA4-0x00FA1D1C
	}

	[NativeHeader] // 0x004CFAEC-0x004CFB24
	public class CharacterController : Collider // TypeDefIndex: 2163
	{
		// Properties
		public Vector3 velocity { get; } // 0x00FA15EC-0x00FA164C 
		public bool isGrounded { [NativeName] /* 0x004CFEE8-0x004CFF20 */ get; } // 0x00FA169C-0x00FA16DC 
		public float height { get; set; } // 0x00FA16DC-0x00FA171C 0x00FA171C-0x00FA176C
		public Vector3 center { get; set; } // 0x00FA176C-0x00FA17CC 0x00FA181C-0x00FA1874
		public bool detectCollisions { set; } // 0x00FA18C4-0x00FA1914
	
		// Methods
		public CollisionFlags Move(Vector3 motion); // 0x00FA1544-0x00FA159C
		private CollisionFlags Move_Injected(ref Vector3 motion); // 0x00FA159C-0x00FA15EC
		private void get_velocity_Injected(out Vector3 ret); // 0x00FA164C-0x00FA169C
		private void get_center_Injected(out Vector3 ret); // 0x00FA17CC-0x00FA181C
		private void set_center_Injected(ref Vector3 value); // 0x00FA1874-0x00FA18C4
	}

	[NativeHeader] // 0x004CFB24-0x004CFB94
	[NativeHeader] // 0x004CFB24-0x004CFB94
	[RequiredByNativeCode] // 0x004CFB24-0x004CFB94
	public class MeshCollider : Collider // TypeDefIndex: 2164
	{
	}

	[NativeHeader] // 0x004CFB94-0x004CFBE0
	[RequiredByNativeCode] // 0x004CFB94-0x004CFBE0
	public class CapsuleCollider : Collider // TypeDefIndex: 2165
	{
		// Properties
		public Vector3 center { get; set; } // 0x00FA131C-0x00FA137C 0x00FA13CC-0x00FA1424
		public float radius { get; } // 0x00FA1474-0x00FA14B4 
		public float height { get; set; } // 0x00FA14B4-0x00FA14F4 0x00FA14F4-0x00FA1544
	
		// Methods
		private void get_center_Injected(out Vector3 ret); // 0x00FA137C-0x00FA13CC
		private void set_center_Injected(ref Vector3 value); // 0x00FA1424-0x00FA1474
	}

	[NativeHeader] // 0x004CFBE0-0x004CFC2C
	[RequiredByNativeCode] // 0x004CFBE0-0x004CFC2C
	public class BoxCollider : Collider // TypeDefIndex: 2166
	{
		// Properties
		public Vector3 center { get; set; } // 0x00FA106C-0x00FA10CC 0x00FA111C-0x00FA1174
		public Vector3 size { get; set; } // 0x00FA11C4-0x00FA1224 0x00FA1274-0x00FA12CC
	
		// Methods
		private void get_center_Injected(out Vector3 ret); // 0x00FA10CC-0x00FA111C
		private void set_center_Injected(ref Vector3 value); // 0x00FA1174-0x00FA11C4
		private void get_size_Injected(out Vector3 ret); // 0x00FA1224-0x00FA1274
		private void set_size_Injected(ref Vector3 value); // 0x00FA12CC-0x00FA131C
	}

	[NativeHeader] // 0x004CFC2C-0x004CFC78
	[RequiredByNativeCode] // 0x004CFC2C-0x004CFC78
	public class SphereCollider : Collider // TypeDefIndex: 2167
	{
		// Properties
		public float radius { set; } // 0x00FA50B4-0x00FA51C0
	}

	[NativeHeader] // 0x004CFC78-0x004CFCC4
	[UsedByNativeCode] // 0x004CFC78-0x004CFCC4
	public struct ContactPoint // TypeDefIndex: 2168
	{
		// Fields
		internal Vector3 m_Point; // 0x00
		internal Vector3 m_Normal; // 0x0C
		internal int m_ThisColliderInstanceID; // 0x18
		internal int m_OtherColliderInstanceID; // 0x1C
		internal float m_Separation; // 0x20
	}

	[NativeHeader] // 0x004CFCC4-0x004CFCFC
	public struct PhysicsScene : IEquatable<PhysicsScene> // TypeDefIndex: 2169
	{
		// Fields
		private int m_Handle; // 0x00
	
		// Methods
		public override string ToString(); // 0x00596C40-0x00596C48
		public override int GetHashCode(); // 0x00596C48-0x00596C50
		public override bool Equals(object other); // 0x00596C50-0x00596C58
		public bool Equals(PhysicsScene other); // 0x00596C58-0x00596C68
		public bool Raycast(Vector3 origin, Vector3 direction, [UnityEngine.Internal.DefaultValue] /* 0x004D0438-0x004D0470 */ float maxDistance = 1F / 0F /* Metadata: 0x001F42DC */, [UnityEngine.Internal.DefaultValue] /* 0x004D0470-0x004D04A8 */ int layerMask = -5 /* Metadata: 0x001F42E0 */, [UnityEngine.Internal.DefaultValue] /* 0x004D04A8-0x004D04E0 */ QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal /* Metadata: 0x001F42E4 */); // 0x00596C68-0x00596C70
		[NativeName] // 0x004CFF20-0x004CFF84
		[StaticAccessor] // 0x004CFF20-0x004CFF84
		private static bool Internal_RaycastTest(PhysicsScene physicsScene, Ray ray, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction); // 0x00FA42B0-0x00FA4328
		public bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, [UnityEngine.Internal.DefaultValue] /* 0x004D04E0-0x004D0518 */ float maxDistance = 1F / 0F /* Metadata: 0x001F42E8 */, [UnityEngine.Internal.DefaultValue] /* 0x004D0518-0x004D0550 */ int layerMask = -5 /* Metadata: 0x001F42EC */, [UnityEngine.Internal.DefaultValue] /* 0x004D0550-0x004D0588 */ QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal /* Metadata: 0x001F42F0 */); // 0x00596C70-0x00596C78
		[NativeName] // 0x004CFF84-0x004CFFE8
		[StaticAccessor] // 0x004CFF84-0x004CFFE8
		private static bool Internal_Raycast(PhysicsScene physicsScene, Ray ray, float maxDistance, ref RaycastHit hit, int layerMask, QueryTriggerInteraction queryTriggerInteraction); // 0x00FA43A0-0x00FA4430
		public int Raycast(Vector3 origin, Vector3 direction, RaycastHit[] raycastHits, [UnityEngine.Internal.DefaultValue] /* 0x004D0588-0x004D05C0 */ float maxDistance = 1F / 0F /* Metadata: 0x001F42F4 */, [UnityEngine.Internal.DefaultValue] /* 0x004D05C0-0x004D05F8 */ int layerMask = -5 /* Metadata: 0x001F42F8 */, [UnityEngine.Internal.DefaultValue] /* 0x004D05F8-0x004D0630 */ QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal /* Metadata: 0x001F42FC */); // 0x00596C78-0x00596C80
		[NativeName] // 0x004CFFE8-0x004D0048
		[StaticAccessor] // 0x004CFFE8-0x004D0048
		private static int Internal_RaycastNonAlloc(PhysicsScene physicsScene, Ray ray, RaycastHit[] raycastHits, float maxDistance, int mask, QueryTriggerInteraction queryTriggerInteraction); // 0x00FA44B0-0x00FA453C
		[NativeName] // 0x004D0048-0x004D00A8
		[StaticAccessor] // 0x004D0048-0x004D00A8
		private static int Internal_SphereCastNonAlloc(PhysicsScene physicsScene, Vector3 origin, float radius, Vector3 direction, RaycastHit[] raycastHits, float maxDistance, int mask, QueryTriggerInteraction queryTriggerInteraction); // 0x00FA45BC-0x00FA4658
		public int SphereCast(Vector3 origin, float radius, Vector3 direction, RaycastHit[] results, [UnityEngine.Internal.DefaultValue] /* 0x004D0630-0x004D0668 */ float maxDistance = 1F / 0F /* Metadata: 0x001F4300 */, [UnityEngine.Internal.DefaultValue] /* 0x004D0668-0x004D06A0 */ int layerMask = -5 /* Metadata: 0x001F4304 */, [UnityEngine.Internal.DefaultValue] /* 0x004D06A0-0x004D06D8 */ QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal /* Metadata: 0x001F4308 */); // 0x00596C80-0x00596C88
		[NativeName] // 0x004D00A8-0x004D0108
		[StaticAccessor] // 0x004D00A8-0x004D0108
		private static int OverlapSphereNonAlloc_Internal(PhysicsScene physicsScene, Vector3 position, float radius, Collider[] results, int layerMask, QueryTriggerInteraction queryTriggerInteraction); // 0x00FA46F0-0x00FA4778
		public int OverlapSphere(Vector3 position, float radius, Collider[] results, [UnityEngine.Internal.DefaultValue] /* 0x004D06D8-0x004D0710 */ int layerMask, [UnityEngine.Internal.DefaultValue] /* 0x004D0710-0x004D0748 */ QueryTriggerInteraction queryTriggerInteraction); // 0x00596C88-0x00596C90
		private static bool Internal_RaycastTest_Injected(ref PhysicsScene physicsScene, ref Ray ray, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction); // 0x00FA4328-0x00FA43A0
		private static bool Internal_Raycast_Injected(ref PhysicsScene physicsScene, ref Ray ray, float maxDistance, ref RaycastHit hit, int layerMask, QueryTriggerInteraction queryTriggerInteraction); // 0x00FA4430-0x00FA44B0
		private static int Internal_RaycastNonAlloc_Injected(ref PhysicsScene physicsScene, ref Ray ray, RaycastHit[] raycastHits, float maxDistance, int mask, QueryTriggerInteraction queryTriggerInteraction); // 0x00FA453C-0x00FA45BC
		private static int Internal_SphereCastNonAlloc_Injected(ref PhysicsScene physicsScene, ref Vector3 origin, float radius, ref Vector3 direction, RaycastHit[] raycastHits, float maxDistance, int mask, QueryTriggerInteraction queryTriggerInteraction); // 0x00FA4658-0x00FA46F0
		private static int OverlapSphereNonAlloc_Internal_Injected(ref PhysicsScene physicsScene, ref Vector3 position, float radius, Collider[] results, int layerMask, QueryTriggerInteraction queryTriggerInteraction); // 0x00FA4778-0x00FA48D0
	}

	[NativeHeader] // 0x004CFCFC-0x004CFD60
	[StaticAccessor] // 0x004CFCFC-0x004CFD60
	public class Physics // TypeDefIndex: 2170
	{
		// Properties
		[NativeProperty] // 0x004D0D88-0x004D0DC0
		public static PhysicsScene defaultPhysicsScene { get; } // 0x00FA1E84-0x00FA1ECC 
	
		// Methods
		public static bool Raycast(Vector3 origin, Vector3 direction, [UnityEngine.Internal.DefaultValue] /* 0x004D0748-0x004D0780 */ float maxDistance, [UnityEngine.Internal.DefaultValue] /* 0x004D0780-0x004D07B8 */ int layerMask, [UnityEngine.Internal.DefaultValue] /* 0x004D07B8-0x004D07F0 */ QueryTriggerInteraction queryTriggerInteraction); // 0x00FA1F0C-0x00FA2158
		[ExcludeFromDocs] // 0x004D0108-0x004D0118
		public static bool Raycast(Vector3 origin, Vector3 direction, float maxDistance, int layerMask); // 0x00FA2158-0x00FA2220
		[ExcludeFromDocs] // 0x004D0118-0x004D0128
		public static bool Raycast(Vector3 origin, Vector3 direction, float maxDistance); // 0x00FA2220-0x00FA22E4
		[ExcludeFromDocs] // 0x004D0128-0x004D0138
		public static bool Raycast(Vector3 origin, Vector3 direction); // 0x00FA22E4-0x00FA23A0
		public static bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction); // 0x00FA23A0-0x00FA2610
		[ExcludeFromDocs] // 0x004D0138-0x004D0170
		[RequiredByNativeCode] // 0x004D0138-0x004D0170
		public static bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layerMask); // 0x00FA2610-0x00FA26E8
		[ExcludeFromDocs] // 0x004D0170-0x004D0180
		public static bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, float maxDistance); // 0x00FA26E8-0x00FA27B4
		[ExcludeFromDocs] // 0x004D0180-0x004D0190
		public static bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo); // 0x00FA27B4-0x00FA2878
		public static bool Raycast(Ray ray, [UnityEngine.Internal.DefaultValue] /* 0x004D07F0-0x004D0828 */ float maxDistance, [UnityEngine.Internal.DefaultValue] /* 0x004D0828-0x004D0860 */ int layerMask, [UnityEngine.Internal.DefaultValue] /* 0x004D0860-0x004D0898 */ QueryTriggerInteraction queryTriggerInteraction); // 0x00FA2878-0x00FA294C
		[ExcludeFromDocs] // 0x004D0190-0x004D01A0
		public static bool Raycast(Ray ray, float maxDistance, int layerMask); // 0x00FA294C-0x00FA2A1C
		[ExcludeFromDocs] // 0x004D01A0-0x004D01B0
		public static bool Raycast(Ray ray, float maxDistance); // 0x00FA2A1C-0x00FA2AE0
		[ExcludeFromDocs] // 0x004D01B0-0x004D01C0
		public static bool Raycast(Ray ray); // 0x00FA2AE0-0x00FA2BA4
		public static bool Raycast(Ray ray, out RaycastHit hitInfo, [UnityEngine.Internal.DefaultValue] /* 0x004D0898-0x004D08D0 */ float maxDistance, [UnityEngine.Internal.DefaultValue] /* 0x004D08D0-0x004D0908 */ int layerMask, [UnityEngine.Internal.DefaultValue] /* 0x004D0908-0x004D0940 */ QueryTriggerInteraction queryTriggerInteraction); // 0x00FA2BA4-0x00FA2C88
		[ExcludeFromDocs] // 0x004D01C0-0x004D01D0
		public static bool Raycast(Ray ray, out RaycastHit hitInfo, float maxDistance, int layerMask); // 0x00FA2C88-0x00FA2D10
		[ExcludeFromDocs] // 0x004D01D0-0x004D01E0
		public static bool Raycast(Ray ray, out RaycastHit hitInfo, float maxDistance); // 0x00FA2D10-0x00FA2DE4
		[ExcludeFromDocs] // 0x004D01E0-0x004D01F0
		public static bool Raycast(Ray ray, out RaycastHit hitInfo); // 0x00FA2DE4-0x00FA2EB8
		[NativeName] // 0x004D01F0-0x004D0254
		[StaticAccessor] // 0x004D01F0-0x004D0254
		private static RaycastHit[] Internal_RaycastAll(PhysicsScene physicsScene, Ray ray, float maxDistance, int mask, QueryTriggerInteraction queryTriggerInteraction); // 0x00FA2EB8-0x00FA2F2C
		public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction, [UnityEngine.Internal.DefaultValue] /* 0x004D0940-0x004D0978 */ float maxDistance, [UnityEngine.Internal.DefaultValue] /* 0x004D0978-0x004D09B0 */ int layerMask, [UnityEngine.Internal.DefaultValue] /* 0x004D09B0-0x004D09E8 */ QueryTriggerInteraction queryTriggerInteraction); // 0x00FA2FA4-0x00FA3150
		[ExcludeFromDocs] // 0x004D0254-0x004D0264
		public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction, float maxDistance, int layerMask); // 0x00FA3150-0x00FA3158
		[ExcludeFromDocs] // 0x004D0264-0x004D0274
		public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction, float maxDistance); // 0x00FA3158-0x00FA3164
		[ExcludeFromDocs] // 0x004D0274-0x004D0284
		public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction); // 0x00FA3164-0x00FA3178
		public static RaycastHit[] RaycastAll(Ray ray, [UnityEngine.Internal.DefaultValue] /* 0x004D09E8-0x004D0A20 */ float maxDistance, [UnityEngine.Internal.DefaultValue] /* 0x004D0A20-0x004D0A58 */ int layerMask, [UnityEngine.Internal.DefaultValue] /* 0x004D0A58-0x004D0A90 */ QueryTriggerInteraction queryTriggerInteraction); // 0x00FA3178-0x00FA31FC
		[ExcludeFromDocs] // 0x004D0284-0x004D02BC
		[RequiredByNativeCode] // 0x004D0284-0x004D02BC
		public static RaycastHit[] RaycastAll(Ray ray, float maxDistance, int layerMask); // 0x00FA31FC-0x00FA3274
		[ExcludeFromDocs] // 0x004D02BC-0x004D02CC
		public static RaycastHit[] RaycastAll(Ray ray, float maxDistance); // 0x00FA3274-0x00FA32E8
		[ExcludeFromDocs] // 0x004D02CC-0x004D02DC
		public static RaycastHit[] RaycastAll(Ray ray); // 0x00FA32E8-0x00FA335C
		public static int RaycastNonAlloc(Ray ray, RaycastHit[] results, [UnityEngine.Internal.DefaultValue] /* 0x004D0A90-0x004D0AC8 */ float maxDistance, [UnityEngine.Internal.DefaultValue] /* 0x004D0AC8-0x004D0B00 */ int layerMask, [UnityEngine.Internal.DefaultValue] /* 0x004D0B00-0x004D0B38 */ QueryTriggerInteraction queryTriggerInteraction); // 0x00FA335C-0x00FA354C
		[ExcludeFromDocs] // 0x004D02DC-0x004D0314
		[RequiredByNativeCode] // 0x004D02DC-0x004D0314
		public static int RaycastNonAlloc(Ray ray, RaycastHit[] results, float maxDistance, int layerMask); // 0x00FA354C-0x00FA3620
		[ExcludeFromDocs] // 0x004D0314-0x004D0324
		public static int RaycastNonAlloc(Ray ray, RaycastHit[] results, float maxDistance); // 0x00FA3620-0x00FA36F0
		[ExcludeFromDocs] // 0x004D0324-0x004D0334
		public static int RaycastNonAlloc(Ray ray, RaycastHit[] results); // 0x00FA36F0-0x00FA37C0
		public static int RaycastNonAlloc(Vector3 origin, Vector3 direction, RaycastHit[] results, [UnityEngine.Internal.DefaultValue] /* 0x004D0B38-0x004D0B70 */ float maxDistance, [UnityEngine.Internal.DefaultValue] /* 0x004D0B70-0x004D0BA8 */ int layerMask, [UnityEngine.Internal.DefaultValue] /* 0x004D0BA8-0x004D0BE0 */ QueryTriggerInteraction queryTriggerInteraction); // 0x00FA37C0-0x00FA3898
		[ExcludeFromDocs] // 0x004D0334-0x004D0344
		public static int RaycastNonAlloc(Vector3 origin, Vector3 direction, RaycastHit[] results, float maxDistance, int layerMask); // 0x00FA3898-0x00FA396C
		[ExcludeFromDocs] // 0x004D0344-0x004D0354
		public static int RaycastNonAlloc(Vector3 origin, Vector3 direction, RaycastHit[] results, float maxDistance); // 0x00FA396C-0x00FA3A34
		[ExcludeFromDocs] // 0x004D0354-0x004D0364
		public static int RaycastNonAlloc(Vector3 origin, Vector3 direction, RaycastHit[] results); // 0x00FA3A34-0x00FA3AF4
		[NativeName] // 0x004D0364-0x004D03C8
		[StaticAccessor] // 0x004D0364-0x004D03C8
		private static Collider[] OverlapSphere_Internal(PhysicsScene physicsScene, Vector3 position, float radius, int layerMask, QueryTriggerInteraction queryTriggerInteraction); // 0x00FA3AF4-0x00FA3B74
		public static Collider[] OverlapSphere(Vector3 position, float radius, [UnityEngine.Internal.DefaultValue] /* 0x004D0BE0-0x004D0C18 */ int layerMask, [UnityEngine.Internal.DefaultValue] /* 0x004D0C18-0x004D0C50 */ QueryTriggerInteraction queryTriggerInteraction); // 0x00FA3BEC-0x00FA3C80
		[ExcludeFromDocs] // 0x004D03C8-0x004D03D8
		public static Collider[] OverlapSphere(Vector3 position, float radius); // 0x00FA3C80-0x00FA3C8C
		[NativeName] // 0x004D03D8-0x004D0438
		[StaticAccessor] // 0x004D03D8-0x004D0438
		private static bool Query_ComputePenetration([NotNull] /* 0x004D0C50-0x004D0C60 */ Collider colliderA, Vector3 positionA, Quaternion rotationA, [NotNull] /* 0x004D0C60-0x004D0C70 */ Collider colliderB, Vector3 positionB, Quaternion rotationB, ref Vector3 direction, ref float distance); // 0x00FA3C8C-0x00FA3D44
		public static bool ComputePenetration(Collider colliderA, Vector3 positionA, Quaternion rotationA, Collider colliderB, Vector3 positionB, Quaternion rotationB, out Vector3 direction, out float distance); // 0x00FA3DDC-0x00FA3EE4
		public static int OverlapSphereNonAlloc(Vector3 position, float radius, Collider[] results, [UnityEngine.Internal.DefaultValue] /* 0x004D0C70-0x004D0CA8 */ int layerMask, [UnityEngine.Internal.DefaultValue] /* 0x004D0CA8-0x004D0CE0 */ QueryTriggerInteraction queryTriggerInteraction); // 0x00FA3EE4-0x00FA3F90
		public static int SphereCastNonAlloc(Vector3 origin, float radius, Vector3 direction, RaycastHit[] results, [UnityEngine.Internal.DefaultValue] /* 0x004D0CE0-0x004D0D18 */ float maxDistance, [UnityEngine.Internal.DefaultValue] /* 0x004D0D18-0x004D0D50 */ int layerMask, [UnityEngine.Internal.DefaultValue] /* 0x004D0D50-0x004D0D88 */ QueryTriggerInteraction queryTriggerInteraction); // 0x00FA3F90-0x00FA42B0
		private static void get_defaultPhysicsScene_Injected(out PhysicsScene ret); // 0x00FA1ECC-0x00FA1F0C
		private static RaycastHit[] Internal_RaycastAll_Injected(ref PhysicsScene physicsScene, ref Ray ray, float maxDistance, int mask, QueryTriggerInteraction queryTriggerInteraction); // 0x00FA2F2C-0x00FA2FA4
		private static Collider[] OverlapSphere_Internal_Injected(ref PhysicsScene physicsScene, ref Vector3 position, float radius, int layerMask, QueryTriggerInteraction queryTriggerInteraction); // 0x00FA3B74-0x00FA3BEC
		private static bool Query_ComputePenetration_Injected(Collider colliderA, ref Vector3 positionA, ref Quaternion rotationA, Collider colliderB, ref Vector3 positionB, ref Quaternion rotationB, ref Vector3 direction, ref float distance); // 0x00FA3D44-0x00FA3DDC
	}

	public enum FontStyle // TypeDefIndex: 2172
	{
		Normal = 0,
		Bold = 1,
		Italic = 2,
		BoldAndItalic = 3
	}

	[Flags] // 0x004D1F7C-0x004D1F8C
	internal enum TextGenerationError // TypeDefIndex: 2173
	{
		None = 0,
		CustomSizeOnNonDynamicFont = 1,
		CustomStyleOnNonDynamicFont = 2,
		NoFont = 4
	}

	public struct TextGenerationSettings // TypeDefIndex: 2174
	{
		// Fields
		public Font font; // 0x00
		public Color color; // 0x08
		public int fontSize; // 0x18
		public float lineSpacing; // 0x1C
		public bool richText; // 0x20
		public float scaleFactor; // 0x24
		public FontStyle fontStyle; // 0x28
		public TextAnchor textAnchor; // 0x2C
		public bool alignByGeometry; // 0x30
		public bool resizeTextForBestFit; // 0x31
		public int resizeTextMinSize; // 0x34
		public int resizeTextMaxSize; // 0x38
		public bool updateBounds; // 0x3C
		public VerticalWrapMode verticalOverflow; // 0x40
		public HorizontalWrapMode horizontalOverflow; // 0x44
		public Vector2 generationExtents; // 0x48
		public Vector2 pivot; // 0x50
		public bool generateOutOfBounds; // 0x58
	
		// Methods
		private bool CompareColors(Color left, Color right); // 0x00597028-0x0059702C
		private bool CompareVector2(Vector2 left, Vector2 right); // 0x0059702C-0x00597030
		public bool Equals(TextGenerationSettings other); // 0x00597030-0x00597104
	}

	[NativeHeader] // 0x004D1F8C-0x004D1FD8
	[UsedByNativeCode] // 0x004D1F8C-0x004D1FD8
	public sealed class TextGenerator : IDisposable // TypeDefIndex: 2175
	{
		// Fields
		internal IntPtr m_Ptr; // 0x10
		private string m_LastString; // 0x18
		private TextGenerationSettings m_LastSettings; // 0x20
		private bool m_HasGenerated; // 0x80
		private TextGenerationError m_LastValid; // 0x84
		private readonly List<UIVertex> m_Verts; // 0x88
		private readonly List<UICharInfo> m_Characters; // 0x90
		private readonly List<UILineInfo> m_Lines; // 0x98
		private bool m_CachedVerts; // 0xA0
		private bool m_CachedCharacters; // 0xA1
		private bool m_CachedLines; // 0xA2
	
		// Properties
		public int characterCountVisible { [CompilerGenerated] /* 0x004D2244-0x004D2254 */ get; } // 0x00FA954C-0x00FA9594 
		public IList<UIVertex> verts { get; } // 0x00FAA15C-0x00FAA1C4 
		public IList<UICharInfo> characters { get; } // 0x00FAA1C4-0x00FAA22C 
		public IList<UILineInfo> lines { get; } // 0x00FAA22C-0x00FAA294 
		public Rect rectExtents { get; } // 0x00FA9B54-0x00FA9BB0 
		public int characterCount { get; } // 0x00FA9594-0x00FA95D4 
		public int lineCount { get; } // 0x00FAA2E4-0x00FAA324 
	
		// Constructors
		public TextGenerator(); // 0x00FA9248-0x00FA9250
		public TextGenerator(int initialCapacity); // 0x00FA9250-0x00FA9358
	
		// Methods
		~TextGenerator(); // 0x00FA938C-0x00FA9480
		void IDisposable.Dispose(); // 0x00FA9480-0x00FA950C
		private TextGenerationSettings ValidatedSettings(TextGenerationSettings settings); // 0x00FA95D4-0x00FA98A0
		public void Invalidate(); // 0x00FA98A0-0x00FA98A8
		public void GetCharacters(List<UICharInfo> characters); // 0x00FA98A8-0x00FA98F8
		public void GetLines(List<UILineInfo> lines); // 0x00FA9948-0x00FA9998
		public void GetVertices(List<UIVertex> vertices); // 0x00FA99E8-0x00FA9A38
		public float GetPreferredWidth(string str, TextGenerationSettings settings); // 0x00FA9A88-0x00FA9B00
		public float GetPreferredHeight(string str, TextGenerationSettings settings); // 0x00FA9BB0-0x00FA9C24
		public bool PopulateWithErrors(string str, TextGenerationSettings settings, GameObject context); // 0x00FA9C24-0x00FA9DEC
		public bool Populate(string str, TextGenerationSettings settings); // 0x00FA9B00-0x00FA9B54
		private TextGenerationError PopulateWithError(string str, TextGenerationSettings settings); // 0x00FA9DEC-0x00FA9E88
		private TextGenerationError PopulateAlways(string str, TextGenerationSettings settings); // 0x00FA9E88-0x00FA9FA4
		[NativeMethod] // 0x004D2254-0x004D2288
		private static IntPtr Internal_Create(); // 0x00FA9358-0x00FA938C
		[NativeMethod] // 0x004D2288-0x004D22BC
		private static void Internal_Destroy(IntPtr ptr); // 0x00FA950C-0x00FA954C
		internal bool Populate_Internal(string str, Font font, Color color, int fontSize, float scaleFactor, float lineSpacing, FontStyle style, bool richText, bool resizeTextForBestFit, int resizeTextMinSize, int resizeTextMaxSize, int verticalOverFlow, int horizontalOverflow, bool updateBounds, TextAnchor anchor, float extentsX, float extentsY, float pivotX, float pivotY, bool generateOutOfBounds, bool alignByGeometry, out uint error); // 0x00FAA324-0x00FAA478
		internal bool Populate_Internal(string str, Font font, Color color, int fontSize, float scaleFactor, float lineSpacing, FontStyle style, bool richText, bool resizeTextForBestFit, int resizeTextMinSize, int resizeTextMaxSize, VerticalWrapMode verticalOverFlow, HorizontalWrapMode horizontalOverflow, bool updateBounds, TextAnchor anchor, Vector2 extents, Vector2 pivot, bool generateOutOfBounds, bool alignByGeometry, out TextGenerationError error); // 0x00FA9FA4-0x00FAA15C
		[NativeThrows] // 0x004D22BC-0x004D22CC
		private void GetVerticesInternal(object vertices); // 0x00FA9A38-0x00FA9A88
		[NativeThrows] // 0x004D22CC-0x004D22DC
		private void GetCharactersInternal(object characters); // 0x00FA98F8-0x00FA9948
		[NativeThrows] // 0x004D22DC-0x004D22EC
		private void GetLinesInternal(object lines); // 0x00FA9998-0x00FA99E8
		private void get_rectExtents_Injected(out Rect ret); // 0x00FAA294-0x00FAA2E4
		private bool Populate_Internal_Injected(string str, Font font, ref Color color, int fontSize, float scaleFactor, float lineSpacing, FontStyle style, bool richText, bool resizeTextForBestFit, int resizeTextMinSize, int resizeTextMaxSize, int verticalOverFlow, int horizontalOverflow, bool updateBounds, TextAnchor anchor, float extentsX, float extentsY, float pivotX, float pivotY, bool generateOutOfBounds, bool alignByGeometry, out uint error); // 0x00FAA478-0x00FAA5B0
	}

	public enum TextAnchor // TypeDefIndex: 2176
	{
		UpperLeft = 0,
		UpperCenter = 1,
		UpperRight = 2,
		MiddleLeft = 3,
		MiddleCenter = 4,
		MiddleRight = 5,
		LowerLeft = 6,
		LowerCenter = 7,
		LowerRight = 8
	}

	public enum HorizontalWrapMode // TypeDefIndex: 2177
	{
		Wrap = 0,
		Overflow = 1
	}

	public enum VerticalWrapMode // TypeDefIndex: 2178
	{
		Truncate = 0,
		Overflow = 1
	}

	[UsedByNativeCode] // 0x004D1FD8-0x004D1FE8
	public struct CharacterInfo // TypeDefIndex: 2179
	{
		// Fields
		public int index; // 0x00
		[Obsolete] // 0x004D20C4-0x004D20FC
		public Rect uv; // 0x04
		[Obsolete] // 0x004D20FC-0x004D2134
		public Rect vert; // 0x14
		[NativeName] // 0x004D2134-0x004D2194
		[Obsolete] // 0x004D2134-0x004D2194
		public float width; // 0x24
		public int size; // 0x28
		public FontStyle style; // 0x2C
		[Obsolete] // 0x004D2194-0x004D21CC
		public bool flipped; // 0x30
	
		// Properties
		public int advance { get; } // 0x00596EC0-0x00596EC8 
		public int minY { get; } // 0x00596EC8-0x00596F10 
		public int maxY { get; } // 0x00596F10-0x00596F30 
		public int minX { get; } // 0x00596F30-0x00596F50 
		public int maxX { get; } // 0x00596F50-0x00596F98 
		internal Vector2 uvBottomLeftUnFlipped { get; } // 0x00596F98-0x00596FA0 
		internal Vector2 uvBottomRightUnFlipped { get; } // 0x00596FA0-0x00596FA8 
		internal Vector2 uvTopRightUnFlipped { get; } // 0x00596FA8-0x00596FB0 
		internal Vector2 uvTopLeftUnFlipped { get; } // 0x00596FB0-0x00596FB8 
		public Vector2 uvBottomLeft { get; } // 0x00596FB8-0x00596FC0 
		public Vector2 uvBottomRight { get; } // 0x00596FC0-0x00596FC8 
		public Vector2 uvTopRight { get; } // 0x00596FC8-0x00596FD0 
		public Vector2 uvTopLeft { get; } // 0x00596FD0-0x00597028 
	}

	[UsedByNativeCode] // 0x004D1FE8-0x004D1FF8
	public struct UICharInfo // TypeDefIndex: 2180
	{
		// Fields
		public Vector2 cursorPos; // 0x00
		public float charWidth; // 0x08
	}

	[UsedByNativeCode] // 0x004D1FF8-0x004D2008
	public struct UILineInfo // TypeDefIndex: 2181
	{
		// Fields
		public int startCharIdx; // 0x00
		public int height; // 0x04
		public float topY; // 0x08
		public float leading; // 0x0C
	}

	[UsedByNativeCode] // 0x004D2008-0x004D2018
	public struct UIVertex // TypeDefIndex: 2182
	{
		// Fields
		public Vector3 position; // 0x00
		public Vector3 normal; // 0x0C
		public Vector4 tangent; // 0x18
		public Color32 color; // 0x28
		public Vector2 uv0; // 0x2C
		public Vector2 uv1; // 0x34
		public Vector2 uv2; // 0x3C
		public Vector2 uv3; // 0x44
		private static readonly Color32 s_DefaultColor; // 0x00
		private static readonly Vector4 s_DefaultTangent; // 0x04
		public static UIVertex simpleVert; // 0x14
	
		// Constructors
		static UIVertex(); // 0x00FAA5B0-0x00FAA794
	}

	[NativeClass] // 0x004D2018-0x004D20C4
	[NativeHeader] // 0x004D2018-0x004D20C4
	[NativeHeader] // 0x004D2018-0x004D20C4
	[StaticAccessor] // 0x004D2018-0x004D20C4
	public sealed class Font : UnityEngine.Object // TypeDefIndex: 2183
	{
		// Fields
		[CompilerGenerated] // 0x004D21CC-0x004D2208
		[DebuggerBrowsable] // 0x004D21CC-0x004D2208
		private static Action<Font> textureRebuilt; // 0x00
		[CompilerGenerated] // 0x004D2208-0x004D2244
		[DebuggerBrowsable] // 0x004D2208-0x004D2244
		private FontTextureRebuildCallback m_FontTextureRebuildCallback; // 0x18
	
		// Properties
		public Material material { get; } // 0x00FA8868-0x00FA88A8 
		public string[] fontNames { get; } // 0x00FA88A8-0x00FA88E8 
		public bool dynamic { get; } // 0x00FA88E8-0x00FA8928 
		public int fontSize { get; } // 0x00FA8928-0x00FA8968 
	
		// Events
		public static event Action<Font> textureRebuilt {
			add; // 0x00FA86F8-0x00FA87B0
			remove; // 0x00FA87B0-0x00FA8868
		}
	
		// Nested types
		public delegate void FontTextureRebuildCallback(); // TypeDefIndex: 2184; 0x00FA89F4-0x00FA8C10
	
		// Constructors
		public Font(); // 0x00FA8614-0x00FA86A8
	
		// Methods
		[RequiredByNativeCode] // 0x004D22EC-0x004D22FC
		internal static void InvokeTextureRebuilt_Internal(Font font); // 0x00FA8968-0x00FA89F4
		public bool HasCharacter(char c); // 0x00FA8C10-0x00FA8C60
		private bool HasCharacter(int c); // 0x00FA8C60-0x00FA8CB0
		private static void Internal_CreateFont([Writable] /* 0x004D2340-0x004D2350 */ Font self, string name); // 0x00FA86A8-0x00FA86F8
		[FreeFunction] // 0x004D22FC-0x004D2340
		public bool GetCharacterInfo(char ch, out CharacterInfo info, [UnityEngine.Internal.DefaultValue] /* 0x004D2350-0x004D2388 */ int size, [UnityEngine.Internal.DefaultValue] /* 0x004D2388-0x004D23C0 */ FontStyle style); // 0x00FA8CB0-0x00FA8D20
		public void RequestCharactersInTexture(string characters, [UnityEngine.Internal.DefaultValue] /* 0x004D23C0-0x004D23F8 */ int size, [UnityEngine.Internal.DefaultValue] /* 0x004D23F8-0x004D2430 */ FontStyle style); // 0x00FA8D20-0x00FA8D88
	}
}

namespace UnityEngine.Animations
{
	public static class AnimationPlayableBinding // TypeDefIndex: 2186
	{
		// Fields
		[CompilerGenerated] // 0x004D46D8-0x004D46E8
		private static PlayableBinding.CreateOutputMethod __f__mg_cache0; // 0x00
	
		// Methods
		public static PlayableBinding Create(string name, UnityEngine.Object key); // 0x00F7FE14-0x00F7FF60
		private static PlayableOutput CreateAnimationOutput(PlayableGraph graph, string name); // 0x00F7FF60-0x00F7FFA4
	}

	[AttributeUsage] // 0x004D35DC-0x004D3618
	[RequiredByNativeCode] // 0x004D35DC-0x004D3618
	public class NotKeyableAttribute : Attribute // TypeDefIndex: 2187
	{
	}
}

namespace UnityEngine
{
	[AttributeUsage] // 0x004D3618-0x004D3660
	[RequiredByNativeCode] // 0x004D3618-0x004D3660
	public sealed class SharedBetweenAnimatorsAttribute : Attribute // TypeDefIndex: 2188
	{
	}

	[RequiredByNativeCode] // 0x004D3660-0x004D3670
	public abstract class StateMachineBehaviour : ScriptableObject // TypeDefIndex: 2189
	{
		// Constructors
		protected StateMachineBehaviour(); // 0x00F82404-0x00F8240C
	
		// Methods
		public virtual void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex); // 0x00F8240C-0x00F82410
		public virtual void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex); // 0x00F82410-0x00F82414
		public virtual void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex); // 0x00F82414-0x00F82418
		public virtual void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex); // 0x00F82418-0x00F8241C
		public virtual void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex); // 0x00F8241C-0x00F82420
		public virtual void OnStateMachineEnter(Animator animator, int stateMachinePathHash); // 0x00F82420-0x00F82424
		public virtual void OnStateMachineExit(Animator animator, int stateMachinePathHash); // 0x00F82424-0x00F82428
		public virtual void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller); // 0x00F82428-0x00F8242C
		public virtual void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller); // 0x00F8242C-0x00F82430
		public virtual void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller); // 0x00F82430-0x00F82434
		public virtual void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller); // 0x00F82434-0x00F82438
		public virtual void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller); // 0x00F82438-0x00F8243C
		public virtual void OnStateMachineEnter(Animator animator, int stateMachinePathHash, AnimatorControllerPlayable controller); // 0x00F8243C-0x00F82440
		public virtual void OnStateMachineExit(Animator animator, int stateMachinePathHash, AnimatorControllerPlayable controller); // 0x00F82440-0x00F834EC
	}

	[NativeHeader] // 0x004D3670-0x004D36D0
	[NativeType] // 0x004D3670-0x004D36D0
	public sealed class AnimationClip : Motion // TypeDefIndex: 2190
	{
		// Properties
		[NativeProperty] // 0x004D5820-0x004D5860
		public float length { get; } // 0x00F7D3CC-0x00F7D40C 
		[NativeProperty] // 0x004D5860-0x004D58A0
		public float frameRate { get; set; } // 0x00F7D40C-0x00F7D44C 0x00F7D44C-0x00F7D49C
		public bool legacy { [NativeMethod] /* 0x004D4A6C-0x004D4AA4 */ get; [NativeMethod] /* 0x004D4AA4-0x004D4ADC */ set; } // 0x00F7D49C-0x00F7D4DC 0x00F7D4DC-0x00F7D52C
		public bool empty { [NativeMethod] /* 0x004D4ADC-0x004D4B14 */ get; } // 0x00F7D52C-0x00F7D56C 
		public bool hasGenericRootTransform { [NativeMethod] /* 0x004D4B14-0x004D4B4C */ get; } // 0x00F7D56C-0x00F7D5AC 
		public bool hasMotionCurves { [NativeMethod] /* 0x004D4B4C-0x004D4B84 */ get; } // 0x00F7D5AC-0x00F7D5EC 
		public bool hasRootCurves { [NativeMethod] /* 0x004D4B84-0x004D4BBC */ get; } // 0x00F7D5EC-0x00F7D62C 
		internal bool hasRootMotion { [FreeFunction] /* 0x004D4BBC-0x004D4C00 */ get; } // 0x00F7D62C-0x00F7D66C 
		public AnimationEvent[] events { set; } // 0x00F7D774-0x00F7D7C4
	
		// Constructors
		public AnimationClip(); // 0x00F7D2E0-0x00F7D324
	
		// Methods
		[FreeFunction] // 0x004D4A34-0x004D4A6C
		private static void Internal_CreateAnimationClip([Writable] /* 0x004D54B8-0x004D54C8 */ AnimationClip self); // 0x00F7D38C-0x00F7D3CC
		public void AddEvent(AnimationEvent evt); // 0x00F7D66C-0x00F7D724
		[GeneratedByOldBindingsGenerator] // 0x004D4C00-0x004D4C10
		internal void AddEventInternal(object evt); // 0x00F7D724-0x00F7D774
		[GeneratedByOldBindingsGenerator] // 0x004D4C10-0x004D4C20
		internal void SetEventsInternal(Array value); // 0x00F7D7C4-0x00F7D814
	}
}

namespace UnityEngine.Animations
{
	[NativeHeader] // 0x004D36D0-0x004D3768
	[NativeHeader] // 0x004D36D0-0x004D3768
	[RequiredByNativeCode] // 0x004D36D0-0x004D3768
	[StaticAccessor] // 0x004D36D0-0x004D3768
	public struct AnimationClipPlayable : IPlayable, IEquatable<AnimationClipPlayable> // TypeDefIndex: 2191
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
	
		// Constructors
		internal AnimationClipPlayable(PlayableHandle handle); // 0x00595284-0x0059528C
	
		// Methods
		public static AnimationClipPlayable Create(PlayableGraph graph, AnimationClip clip); // 0x00F7DEE4-0x00F7DF20
		private static PlayableHandle CreateHandle(PlayableGraph graph, AnimationClip clip); // 0x00F7DF20-0x00F7DFE8
		public PlayableHandle GetHandle(); // 0x0059528C-0x00595298
		public static implicit operator Playable(AnimationClipPlayable playable); // 0x00F7E05C-0x00F7E170
		public bool Equals(AnimationClipPlayable other); // 0x00595298-0x005952A0
		public void SetApplyFootIK(bool value); // 0x005952A0-0x005952F0
		internal void SetRemoveStartOffset(bool value); // 0x005952F0-0x00595340
		internal void SetOverrideLoopTime(bool value); // 0x00595340-0x00595390
		internal void SetLoopTime(bool value); // 0x00595390-0x005953E0
		[NativeThrows] // 0x004D4C20-0x004D4C30
		private static bool CreateHandleInternal(PlayableGraph graph, AnimationClip clip, ref PlayableHandle handle); // 0x00F7DFE8-0x00F7E05C
		[NativeThrows] // 0x004D4C30-0x004D4C40
		private static void SetApplyFootIKInternal(ref PlayableHandle handle, bool value); // 0x00F7E170-0x00F7E210
		[NativeThrows] // 0x004D4C40-0x004D4C50
		private static void SetRemoveStartOffsetInternal(ref PlayableHandle handle, bool value); // 0x00F7E210-0x00F7E2B0
		[NativeThrows] // 0x004D4C50-0x004D4C60
		private static void SetOverrideLoopTimeInternal(ref PlayableHandle handle, bool value); // 0x00F7E2B0-0x00F7E350
		[NativeThrows] // 0x004D4C60-0x004D4C70
		private static void SetLoopTimeInternal(ref PlayableHandle handle, bool value); // 0x00F7E350-0x00F7E3A0
		private static bool CreateHandleInternal_Injected(ref PlayableGraph graph, AnimationClip clip, ref PlayableHandle handle); // 0x00F7E3A0-0x00F7E4B4
	}
}

namespace UnityEngine.Experimental.Animations
{
	[NativeHeader] // 0x004D3768-0x004D37D8
	[NativeHeader] // 0x004D3768-0x004D37D8
	[RequiredByNativeCode] // 0x004D3768-0x004D37D8
	public struct AnimationHumanStream // TypeDefIndex: 2192
	{
		// Fields
		private IntPtr stream; // 0x00
	}
}

namespace UnityEngine.Animations
{
	[NativeHeader] // 0x004D37D8-0x004D3894
	[NativeHeader] // 0x004D37D8-0x004D3894
	[NativeHeader] // 0x004D37D8-0x004D3894
	[RequiredByNativeCode] // 0x004D37D8-0x004D3894
	[StaticAccessor] // 0x004D37D8-0x004D3894
	public struct AnimationLayerMixerPlayable : IPlayable, IEquatable<AnimationLayerMixerPlayable> // TypeDefIndex: 2193
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
		private static readonly AnimationLayerMixerPlayable m_NullPlayable; // 0x00
	
		// Properties
		public static AnimationLayerMixerPlayable Null { get; } // 0x00F7E4B4-0x00F7E51C 
	
		// Constructors
		internal AnimationLayerMixerPlayable(PlayableHandle handle); // 0x005953E0-0x005953E8
		static AnimationLayerMixerPlayable(); // 0x00F7EAFC-0x00F7EC58
	
		// Methods
		public static AnimationLayerMixerPlayable Create(PlayableGraph graph, int inputCount = 0 /* Metadata: 0x001F4360 */); // 0x00F7E51C-0x00F7E5C4
		private static PlayableHandle CreateHandle(PlayableGraph graph, int inputCount = 0 /* Metadata: 0x001F4364 */); // 0x00F7E5C4-0x00F7E6BC
		public PlayableHandle GetHandle(); // 0x005953E8-0x005953F4
		public static implicit operator Playable(AnimationLayerMixerPlayable playable); // 0x00F7E764-0x00F7E7A0
		public static explicit operator AnimationLayerMixerPlayable(Playable playable); // 0x00F7E7A0-0x00F7EA54
		public bool Equals(AnimationLayerMixerPlayable other); // 0x005953F4-0x005953FC
		public void SetLayerMaskFromAvatarMask(uint layerIndex, AvatarMask mask); // 0x005953FC-0x00595404
		[NativeThrows] // 0x004D4C70-0x004D4C80
		private static bool CreateHandleInternal(PlayableGraph graph, ref PlayableHandle handle); // 0x00F7E6BC-0x00F7E764
		[NativeThrows] // 0x004D4C80-0x004D4C90
		private static void SetLayerMaskFromAvatarMaskInternal(ref PlayableHandle handle, uint layerIndex, AvatarMask mask); // 0x00F7EA54-0x00F7EAAC
		private static bool CreateHandleInternal_Injected(ref PlayableGraph graph, ref PlayableHandle handle); // 0x00F7EAAC-0x00F7EAFC
	}

	[NativeHeader] // 0x004D3894-0x004D3950
	[NativeHeader] // 0x004D3894-0x004D3950
	[NativeHeader] // 0x004D3894-0x004D3950
	[RequiredByNativeCode] // 0x004D3894-0x004D3950
	[StaticAccessor] // 0x004D3894-0x004D3950
	public struct AnimationMixerPlayable : IPlayable, IEquatable<AnimationMixerPlayable> // TypeDefIndex: 2194
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
		private static readonly AnimationMixerPlayable m_NullPlayable; // 0x00
	
		// Properties
		public static AnimationMixerPlayable Null { get; } // 0x00F7EC58-0x00F7ECC0 
	
		// Constructors
		internal AnimationMixerPlayable(PlayableHandle handle); // 0x00595404-0x0059540C
		static AnimationMixerPlayable(); // 0x00F7F09C-0x00F7F1F8
	
		// Methods
		public static AnimationMixerPlayable Create(PlayableGraph graph, int inputCount = 0 /* Metadata: 0x001F4368 */, bool normalizeWeights = false /* Metadata: 0x001F436C */); // 0x00F7ECC0-0x00F7ED78
		private static PlayableHandle CreateHandle(PlayableGraph graph, int inputCount = 0 /* Metadata: 0x001F436D */, bool normalizeWeights = false /* Metadata: 0x001F4371 */); // 0x00F7ED78-0x00F7EE80
		public PlayableHandle GetHandle(); // 0x0059540C-0x00595418
		public static implicit operator Playable(AnimationMixerPlayable playable); // 0x00F7EF38-0x00F7EF74
		public static explicit operator AnimationMixerPlayable(Playable playable); // 0x00F7EF74-0x00F7F044
		public bool Equals(AnimationMixerPlayable other); // 0x00595418-0x00595420
		[NativeThrows] // 0x004D4C90-0x004D4CA0
		private static bool CreateHandleInternal(PlayableGraph graph, bool normalizeWeights, ref PlayableHandle handle); // 0x00F7EE80-0x00F7EF38
		private static bool CreateHandleInternal_Injected(ref PlayableGraph graph, bool normalizeWeights, ref PlayableHandle handle); // 0x00F7F044-0x00F7F09C
	}

	[NativeHeader] // 0x004D3950-0x004D39C4
	[RequiredByNativeCode] // 0x004D3950-0x004D39C4
	[StaticAccessor] // 0x004D3950-0x004D39C4
	internal struct AnimationMotionXToDeltaPlayable : IPlayable, IEquatable<AnimationMotionXToDeltaPlayable> // TypeDefIndex: 2195
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
		private static readonly AnimationMotionXToDeltaPlayable m_NullPlayable; // 0x00
	
		// Properties
		public static AnimationMotionXToDeltaPlayable Null { get; } // 0x00F7F1F8-0x00F7F260 
	
		// Constructors
		private AnimationMotionXToDeltaPlayable(PlayableHandle handle); // 0x00595420-0x00595428
		static AnimationMotionXToDeltaPlayable(); // 0x00F7F7A0-0x00F7F8FC
	
		// Methods
		public static AnimationMotionXToDeltaPlayable Create(PlayableGraph graph); // 0x00F7F260-0x00F7F300
		private static PlayableHandle CreateHandle(PlayableGraph graph); // 0x00F7F300-0x00F7F3F4
		public PlayableHandle GetHandle(); // 0x00595428-0x00595434
		public static implicit operator Playable(AnimationMotionXToDeltaPlayable playable); // 0x00F7F49C-0x00F7F4D8
		public static explicit operator AnimationMotionXToDeltaPlayable(Playable playable); // 0x00F7F4D8-0x00F7F62C
		public bool Equals(AnimationMotionXToDeltaPlayable other); // 0x00595434-0x0059543C
		public bool IsAbsoluteMotion(); // 0x0059543C-0x00595444
		public void SetAbsoluteMotion(bool value); // 0x00595444-0x00595450
		[NativeThrows] // 0x004D4CA0-0x004D4CB0
		private static bool CreateHandleInternal(PlayableGraph graph, ref PlayableHandle handle); // 0x00F7F3F4-0x00F7F49C
		[NativeThrows] // 0x004D4CB0-0x004D4CC0
		private static bool IsAbsoluteMotionInternal(ref PlayableHandle handle); // 0x00F7F62C-0x00F7F700
		[NativeThrows] // 0x004D4CC0-0x004D4CD0
		private static void SetAbsoluteMotionInternal(ref PlayableHandle handle, bool value); // 0x00F7F700-0x00F7F750
		private static bool CreateHandleInternal_Injected(ref PlayableGraph graph, ref PlayableHandle handle); // 0x00F7F750-0x00F7F7A0
	}

	[NativeHeader] // 0x004D39C4-0x004D3A80
	[NativeHeader] // 0x004D39C4-0x004D3A80
	[NativeHeader] // 0x004D39C4-0x004D3A80
	[RequiredByNativeCode] // 0x004D39C4-0x004D3A80
	[StaticAccessor] // 0x004D39C4-0x004D3A80
	internal struct AnimationOffsetPlayable : IPlayable, IEquatable<AnimationOffsetPlayable> // TypeDefIndex: 2196
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
		private static readonly AnimationOffsetPlayable m_NullPlayable; // 0x00
	
		// Constructors
		internal AnimationOffsetPlayable(PlayableHandle handle); // 0x00595450-0x00595458
		static AnimationOffsetPlayable(); // 0x00F7FD74-0x00F7FE14
	
		// Methods
		public static AnimationOffsetPlayable Create(PlayableGraph graph, Vector3 position, Quaternion rotation, int inputCount); // 0x00F7F8FC-0x00F7F9FC
		private static PlayableHandle CreateHandle(PlayableGraph graph, Vector3 position, Quaternion rotation, int inputCount); // 0x00F7F9FC-0x00F7FB4C
		public PlayableHandle GetHandle(); // 0x00595458-0x00595464
		public static implicit operator Playable(AnimationOffsetPlayable playable); // 0x00F7FC0C-0x00F7FD0C
		public bool Equals(AnimationOffsetPlayable other); // 0x00595464-0x0059546C
		[NativeThrows] // 0x004D4CD0-0x004D4CE0
		private static bool CreateHandleInternal(PlayableGraph graph, Vector3 position, Quaternion rotation, ref PlayableHandle handle); // 0x00F7FB4C-0x00F7FC0C
		private static bool CreateHandleInternal_Injected(ref PlayableGraph graph, ref Vector3 position, ref Quaternion rotation, ref PlayableHandle handle); // 0x00F7FD0C-0x00F7FD74
	}

	[NativeHeader] // 0x004D3A80-0x004D3B14
	[NativeHeader] // 0x004D3A80-0x004D3B14
	[NativeHeader] // 0x004D3A80-0x004D3B14
	public static class AnimationPlayableExtensions // TypeDefIndex: 2197
	{
		// Methods
		[NativeThrows] // 0x004D4CF0-0x004D4D00
		internal static void SetAnimatedPropertiesInternal(ref PlayableHandle playable, AnimationClip animatedProperties); // 0x00F80094-0x00F800E4
	
		// Extension methods
		public static void SetAnimatedProperties<U>(this U playable, AnimationClip clip)
			where U : struct, IPlayable;
	}

	[NativeHeader] // 0x004D3B14-0x004D3BF4
	[NativeHeader] // 0x004D3B14-0x004D3BF4
	[NativeHeader] // 0x004D3B14-0x004D3BF4
	[NativeHeader] // 0x004D3B14-0x004D3BF4
	[StaticAccessor] // 0x004D3B14-0x004D3BF4
	internal static class AnimationPlayableGraphExtensions // TypeDefIndex: 2198
	{
		// Methods
		[NativeThrows] // 0x004D4D00-0x004D4D10
		internal static bool InternalCreateAnimationOutput(ref PlayableGraph graph, string name, out PlayableOutputHandle handle); // 0x00F800E4-0x00F801F8
	}

	[NativeHeader] // 0x004D3BF4-0x004D3CF8
	[NativeHeader] // 0x004D3BF4-0x004D3CF8
	[NativeHeader] // 0x004D3BF4-0x004D3CF8
	[NativeHeader] // 0x004D3BF4-0x004D3CF8
	[NativeHeader] // 0x004D3BF4-0x004D3CF8
	[RequiredByNativeCode] // 0x004D3BF4-0x004D3CF8
	[StaticAccessor] // 0x004D3BF4-0x004D3CF8
	public struct AnimationPlayableOutput : IPlayableOutput // TypeDefIndex: 2199
	{
		// Fields
		private PlayableOutputHandle m_Handle; // 0x00
	
		// Properties
		public static AnimationPlayableOutput Null { get; } // 0x00F801F8-0x00F802E0 
	
		// Constructors
		internal AnimationPlayableOutput(PlayableOutputHandle handle); // 0x0059546C-0x00595474
	
		// Methods
		public static AnimationPlayableOutput Create(PlayableGraph graph, string name, Animator target); // 0x00F7FFA4-0x00F80058
		public PlayableOutputHandle GetHandle(); // 0x00595474-0x00595480
		public static implicit operator PlayableOutput(AnimationPlayableOutput output); // 0x00F80058-0x00F80094
		public static explicit operator AnimationPlayableOutput(PlayableOutput output); // 0x00F802E0-0x00F80368
		public Animator GetTarget(); // 0x00595480-0x005954C0
		public void SetTarget(Animator value); // 0x005954C0-0x00595510
		[NativeThrows] // 0x004D4D10-0x004D4D20
		private static Animator InternalGetTarget(ref PlayableOutputHandle handle); // 0x00F80368-0x00F803A8
		[NativeThrows] // 0x004D4D20-0x004D4D30
		private static void InternalSetTarget(ref PlayableOutputHandle handle, Animator target); // 0x00F803A8-0x00F80584
	}

	[NativeHeader] // 0x004D3CF8-0x004D3DB4
	[NativeHeader] // 0x004D3CF8-0x004D3DB4
	[NativeHeader] // 0x004D3CF8-0x004D3DB4
	[RequiredByNativeCode] // 0x004D3CF8-0x004D3DB4
	[StaticAccessor] // 0x004D3CF8-0x004D3DB4
	internal struct AnimationPosePlayable : IPlayable, IEquatable<AnimationPosePlayable> // TypeDefIndex: 2200
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
		private static readonly AnimationPosePlayable m_NullPlayable; // 0x00
	
		// Constructors
		internal AnimationPosePlayable(PlayableHandle handle); // 0x00595510-0x00595518
		static AnimationPosePlayable(); // 0x00F80584-0x00F806E0
	
		// Methods
		public PlayableHandle GetHandle(); // 0x00595518-0x00595524
		public bool Equals(AnimationPosePlayable other); // 0x00595524-0x0059552C
	}

	[NativeHeader] // 0x004D3DB4-0x004D3E70
	[NativeHeader] // 0x004D3DB4-0x004D3E70
	[NativeHeader] // 0x004D3DB4-0x004D3E70
	[RequiredByNativeCode] // 0x004D3DB4-0x004D3E70
	[StaticAccessor] // 0x004D3DB4-0x004D3E70
	internal struct AnimationRemoveScalePlayable : IPlayable, IEquatable<AnimationRemoveScalePlayable> // TypeDefIndex: 2201
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
		private static readonly AnimationRemoveScalePlayable m_NullPlayable; // 0x00
	
		// Constructors
		internal AnimationRemoveScalePlayable(PlayableHandle handle); // 0x0059552C-0x00595534
		static AnimationRemoveScalePlayable(); // 0x00F80A78-0x00F80D2C
	
		// Methods
		public static AnimationRemoveScalePlayable Create(PlayableGraph graph, int inputCount); // 0x00F806E0-0x00F80788
		private static PlayableHandle CreateHandle(PlayableGraph graph, int inputCount); // 0x00F80788-0x00F80880
		public PlayableHandle GetHandle(); // 0x00595534-0x00595540
		public static implicit operator Playable(AnimationRemoveScalePlayable playable); // 0x00F80928-0x00F80A28
		public bool Equals(AnimationRemoveScalePlayable other); // 0x00595540-0x00595548
		[NativeThrows] // 0x004D4D30-0x004D4D40
		private static bool CreateHandleInternal(PlayableGraph graph, ref PlayableHandle handle); // 0x00F80880-0x00F80928
		private static bool CreateHandleInternal_Injected(ref PlayableGraph graph, ref PlayableHandle handle); // 0x00F80A28-0x00F80A78
	}
}

namespace UnityEngine.Experimental.Animations
{
	[NativeHeader] // 0x004D3E70-0x004D3F2C
	[NativeHeader] // 0x004D3E70-0x004D3F2C
	[NativeHeader] // 0x004D3E70-0x004D3F2C
	[RequiredByNativeCode] // 0x004D3E70-0x004D3F2C
	[StaticAccessor] // 0x004D3E70-0x004D3F2C
	public struct AnimationScriptPlayable : IEquatable<AnimationScriptPlayable>, IPlayable // TypeDefIndex: 2202
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
		private static readonly AnimationScriptPlayable m_NullPlayable; // 0x00
	
		// Constructors
		internal AnimationScriptPlayable(PlayableHandle handle); // 0x00595758-0x00595760
		static AnimationScriptPlayable(); // 0x00F822BC-0x00F8235C
	
		// Methods
		public PlayableHandle GetHandle(); // 0x00595760-0x0059576C
		public bool Equals(AnimationScriptPlayable other); // 0x0059576C-0x005959D4
	}

	[NativeHeader] // 0x004D3F2C-0x004D3F9C
	[NativeHeader] // 0x004D3F2C-0x004D3F9C
	[RequiredByNativeCode] // 0x004D3F2C-0x004D3F9C
	public struct AnimationStream // TypeDefIndex: 2203
	{
		// Fields
		private uint m_AnimatorBindingsVersion; // 0x00
		private IntPtr constant; // 0x08
		private IntPtr input; // 0x10
		private IntPtr output; // 0x18
		private IntPtr workspace; // 0x20
		private IntPtr inputStreamAccessor; // 0x28
		private IntPtr animationHandleBinder; // 0x30
	}
}

namespace UnityEngine
{
	public enum AnimatorControllerParameterType // TypeDefIndex: 2204
	{
		Float = 1,
		Int = 3,
		Bool = 4,
		Trigger = 9
	}

	internal enum StateInfoIndex // TypeDefIndex: 2205
	{
		CurrentState = 0,
		NextState = 1,
		ExitState = 2,
		InterruptedState = 3
	}

	[NativeHeader] // 0x004D3F9C-0x004D400C
	[NativeHeader] // 0x004D3F9C-0x004D400C
	[UsedByNativeCode] // 0x004D3F9C-0x004D400C
	public struct AnimatorClipInfo // TypeDefIndex: 2206
	{
		// Fields
		private int m_ClipInstanceID; // 0x00
		private float m_Weight; // 0x04
	
		// Properties
		public AnimationClip clip { get; } // 0x0059556C-0x005955C0 
		public float weight { get; } // 0x005955C0-0x0059569C 
	
		// Methods
		[FreeFunction] // 0x004D4D40-0x004D4D78
		private static AnimationClip InstanceIDToAnimationClipPPtr(int instanceID); // 0x00F81CC0-0x00F81D08
	}

	[NativeHeader] // 0x004D400C-0x004D4058
	[RequiredByNativeCode] // 0x004D400C-0x004D4058
	public struct AnimatorStateInfo // TypeDefIndex: 2207
	{
		// Fields
		private int m_Name; // 0x00
		private int m_Path; // 0x04
		private int m_FullPath; // 0x08
		private float m_NormalizedTime; // 0x0C
		private float m_Length; // 0x10
		private float m_Speed; // 0x14
		private float m_SpeedMultiplier; // 0x18
		private int m_Tag; // 0x1C
		private int m_Loop; // 0x20
	
		// Properties
		public int fullPathHash { get; } // 0x0059569C-0x005956A4 
		public float normalizedTime { get; } // 0x005956A4-0x005956AC 
		public float length { get; } // 0x005956AC-0x00595750 
	}

	[NativeHeader] // 0x004D4058-0x004D40A4
	[RequiredByNativeCode] // 0x004D4058-0x004D40A4
	public struct AnimatorTransitionInfo // TypeDefIndex: 2208
	{
		// Fields
		[NativeName] // 0x004D46E8-0x004D4720
		private int m_FullPath; // 0x00
		[NativeName] // 0x004D4720-0x004D4758
		private int m_UserName; // 0x04
		[NativeName] // 0x004D4758-0x004D4790
		private int m_Name; // 0x08
		[NativeName] // 0x004D4790-0x004D47C8
		private bool m_HasFixedDuration; // 0x0C
		[NativeName] // 0x004D47C8-0x004D4800
		private float m_Duration; // 0x10
		[NativeName] // 0x004D4800-0x004D4838
		private float m_NormalizedTime; // 0x14
		[NativeName] // 0x004D4838-0x004D4870
		private bool m_AnyState; // 0x18
		[NativeName] // 0x004D4870-0x004D48A8
		private int m_TransitionType; // 0x1C
	
		// Properties
		public int fullPathHash { get; } // 0x00595750-0x00595758 
	}

	[NativeHeader] // 0x004D40A4-0x004D4138
	[NativeHeader] // 0x004D40A4-0x004D4138
	[NativeHeader] // 0x004D40A4-0x004D4138
	[UsedByNativeCode] // 0x004D40A4-0x004D4138
	public class Animator : Behaviour // TypeDefIndex: 2209
	{
		// Properties
		public bool hasRootMotion { [NativeMethod] /* 0x004D4D78-0x004D4DB0 */ get; } // 0x00F80DD4-0x00F80E14 
		public int layerCount { get; } // 0x00F81444-0x00F81484 
		public AnimatorControllerParameter[] parameters { [FreeFunction] /* 0x004D4DF4-0x004D4E38 */ get; } // 0x00F81A10-0x00F81A50 
		public RuntimeAnimatorController runtimeAnimatorController { get; } // 0x00F81B9C-0x00F81BDC 
		public bool hasBoundPlayables { [NativeMethod] /* 0x004D4E7C-0x004D4EB4 */ get; } // 0x00F81BDC-0x00F81C1C 
	
		// Constructors
		public Animator(); // 0x00F80DCC-0x00F80DD4
	
		// Methods
		public float GetFloat(int id); // 0x00F80E14-0x00F80E64
		public void SetFloat(int id, float value); // 0x00F80EB4-0x00F80F14
		public bool GetBool(int id); // 0x00F80F74-0x00F80FC4
		public void SetBool(int id, bool value); // 0x00F81014-0x00F8106C
		public int GetInteger(int id); // 0x00F810C4-0x00F81114
		public void SetInteger(int id, int value); // 0x00F81164-0x00F811BC
		public void SetTrigger(string name); // 0x00F81214-0x00F81264
		public void SetTrigger(int id); // 0x00F812B4-0x00F81304
		public void ResetTrigger(string name); // 0x00F81354-0x00F813A4
		private ScriptableObject GetBehaviour([NotNull] /* 0x004D54C8-0x004D54D8 */ Type type); // 0x00F813F4-0x00F81444
		public T GetBehaviour<T>()
			where T : StateMachineBehaviour;
		private void GetAnimatorStateInfo(int layerIndex, StateInfoIndex stateInfoIndex, out AnimatorStateInfo info); // 0x00F81484-0x00F814EC
		public AnimatorStateInfo GetCurrentAnimatorStateInfo(int layerIndex); // 0x00F814EC-0x00F81578
		public AnimatorStateInfo GetNextAnimatorStateInfo(int layerIndex); // 0x00F81578-0x00F81604
		private void GetAnimatorTransitionInfo(int layerIndex, out AnimatorTransitionInfo info); // 0x00F81604-0x00F8165C
		public AnimatorTransitionInfo GetAnimatorTransitionInfo(int layerIndex); // 0x00F8165C-0x00F816D0
		internal int GetAnimatorClipInfoCount(int layerIndex, bool current); // 0x00F816D0-0x00F81728
		public int GetCurrentAnimatorClipInfoCount(int layerIndex); // 0x00F81728-0x00F8177C
		public int GetNextAnimatorClipInfoCount(int layerIndex); // 0x00F8177C-0x00F817D0
		public void GetCurrentAnimatorClipInfo(int layerIndex, List<AnimatorClipInfo> clips); // 0x00F817D0-0x00F81894
		[FreeFunction] // 0x004D4DB0-0x004D4DF4
		private void GetAnimatorClipInfoInternal(int layerIndex, bool isCurrent, object clips); // 0x00F81894-0x00F818FC
		public void GetNextAnimatorClipInfo(int layerIndex, List<AnimatorClipInfo> clips); // 0x00F818FC-0x00F819C0
		public bool IsInTransition(int layerIndex); // 0x00F819C0-0x00F81A10
		public void Play(string stateName); // 0x00F81A50-0x00F81A60
		public void Play(string stateName, [UnityEngine.Internal.DefaultValue] /* 0x004D54D8-0x004D5510 */ int layer, [UnityEngine.Internal.DefaultValue] /* 0x004D5510-0x004D5548 */ float normalizedTime); // 0x00F81A60-0x00F81AF4
		[FreeFunction] // 0x004D4E38-0x004D4E7C
		public void Play(int stateNameHash, [UnityEngine.Internal.DefaultValue] /* 0x004D5548-0x004D5580 */ int layer, [UnityEngine.Internal.DefaultValue] /* 0x004D5580-0x004D55B8 */ float normalizedTime); // 0x00F81B34-0x00F81B9C
		[NativeMethod] // 0x004D4EB4-0x004D4EF8
		public static int StringToHash(string name); // 0x00F81AF4-0x00F81B34
		[FreeFunction] // 0x004D4EF8-0x004D4F3C
		private void SetFloatID(int id, float value); // 0x00F80F14-0x00F80F74
		[FreeFunction] // 0x004D4F3C-0x004D4F80
		private float GetFloatID(int id); // 0x00F80E64-0x00F80EB4
		[FreeFunction] // 0x004D4F80-0x004D4FC4
		private void SetBoolID(int id, bool value); // 0x00F8106C-0x00F810C4
		[FreeFunction] // 0x004D4FC4-0x004D5008
		private bool GetBoolID(int id); // 0x00F80FC4-0x00F81014
		[FreeFunction] // 0x004D5008-0x004D504C
		private void SetIntegerID(int id, int value); // 0x00F811BC-0x00F81214
		[FreeFunction] // 0x004D504C-0x004D5090
		private int GetIntegerID(int id); // 0x00F81114-0x00F81164
		[FreeFunction] // 0x004D5090-0x004D50D4
		private void SetTriggerString(string name); // 0x00F81264-0x00F812B4
		[FreeFunction] // 0x004D50D4-0x004D5118
		private void SetTriggerID(int id); // 0x00F81304-0x00F81354
		[FreeFunction] // 0x004D5118-0x004D515C
		private void ResetTriggerString(string name); // 0x00F813A4-0x00F813F4
		[NativeMethod] // 0x004D515C-0x004D5194
		public void Update(float deltaTime); // 0x00F81C1C-0x00F81CC0
	}

	[NativeAsStruct] // 0x004D4138-0x004D41E0
	[NativeHeader] // 0x004D4138-0x004D41E0
	[NativeHeader] // 0x004D4138-0x004D41E0
	[NativeType] // 0x004D4138-0x004D41E0
	[UsedByNativeCode] // 0x004D4138-0x004D41E0
	public class AnimatorControllerParameter // TypeDefIndex: 2210
	{
		// Fields
		internal string m_Name; // 0x10
		internal AnimatorControllerParameterType m_Type; // 0x18
		internal float m_DefaultFloat; // 0x1C
		internal int m_DefaultInt; // 0x20
		internal bool m_DefaultBool; // 0x24
	
		// Properties
		public string name { get; } // 0x00F81D60-0x00F81D68 
		public int nameHash { get; } // 0x00F81D68-0x00F81DA8 
		public AnimatorControllerParameterType type { get; } // 0x00F81DA8-0x00F81DB0 
	
		// Constructors
		public AnimatorControllerParameter(); // 0x00F81D08-0x00F81D60
	
		// Methods
		public override bool Equals(object o); // 0x00F81DB0-0x00F81EA0
		public override int GetHashCode(); // 0x00F81EA0-0x00F81EC0
	}
}

namespace UnityEngine.Animations
{
	[NativeHeader] // 0x004D41E0-0x004D42E4
	[NativeHeader] // 0x004D41E0-0x004D42E4
	[NativeHeader] // 0x004D41E0-0x004D42E4
	[NativeHeader] // 0x004D41E0-0x004D42E4
	[NativeHeader] // 0x004D41E0-0x004D42E4
	[RequiredByNativeCode] // 0x004D41E0-0x004D42E4
	[StaticAccessor] // 0x004D41E0-0x004D42E4
	public struct AnimatorControllerPlayable : IPlayable, IEquatable<AnimatorControllerPlayable> // TypeDefIndex: 2211
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
		private static readonly AnimatorControllerPlayable m_NullPlayable; // 0x00
	
		// Constructors
		internal AnimatorControllerPlayable(PlayableHandle handle); // 0x00595548-0x00595550
		static AnimatorControllerPlayable(); // 0x00F80D2C-0x00F80DCC
	
		// Methods
		public PlayableHandle GetHandle(); // 0x00595550-0x0059555C
		public void SetHandle(PlayableHandle handle); // 0x0059555C-0x00595564
		public bool Equals(AnimatorControllerPlayable other); // 0x00595564-0x0059556C
	}
}

namespace UnityEngine
{
	[DefaultMember] // 0x004D42E4-0x004D4378
	[NativeHeader] // 0x004D42E4-0x004D4378
	[NativeHeader] // 0x004D42E4-0x004D4378
	[UsedByNativeCode] // 0x004D42E4-0x004D4378
	public class AnimatorOverrideController : RuntimeAnimatorController // TypeDefIndex: 2212
	{
		// Fields
		internal OnOverrideControllerDirtyCallback OnOverrideControllerDirty; // 0x18
	
		// Nested types
		internal delegate void OnOverrideControllerDirtyCallback(); // TypeDefIndex: 2213; 0x00F81EE0-0x00F820FC
	
		// Methods
		[NativeConditional] // 0x004D5194-0x004D51E0
		[RequiredByNativeCode] // 0x004D5194-0x004D51E0
		internal static void OnInvalidateOverrideController(AnimatorOverrideController controller); // 0x00F81EC0-0x00F81EE0
	}

	[NativeHeader] // 0x004D4378-0x004D43C4
	[UsedByNativeCode] // 0x004D4378-0x004D43C4
	public class Avatar : UnityEngine.Object // TypeDefIndex: 2214
	{
	}

	[NativeHeader] // 0x004D43C4-0x004D4438
	[NativeType] // 0x004D43C4-0x004D4438
	[RequiredByNativeCode] // 0x004D43C4-0x004D4438
	public struct SkeletonBone // TypeDefIndex: 2215
	{
		// Fields
		[NativeName] // 0x004D48A8-0x004D48E0
		public string name; // 0x00
		[NativeName] // 0x004D48E0-0x004D4918
		internal string parentName; // 0x08
		[NativeName] // 0x004D4918-0x004D4950
		public Vector3 position; // 0x10
		[NativeName] // 0x004D4950-0x004D4988
		public Quaternion rotation; // 0x1C
		[NativeName] // 0x004D4988-0x004D49C0
		public Vector3 scale; // 0x2C
	}

	[NativeHeader] // 0x004D4438-0x004D44C0
	[NativeHeader] // 0x004D4438-0x004D44C0
	[NativeType] // 0x004D4438-0x004D44C0
	public struct HumanLimit // TypeDefIndex: 2216
	{
		// Fields
		private Vector3 m_Min; // 0x00
		private Vector3 m_Max; // 0x0C
		private Vector3 m_Center; // 0x18
		private float m_AxisLength; // 0x24
		private int m_UseDefaultValues; // 0x28
	}

	[NativeHeader] // 0x004D44C0-0x004D4534
	[NativeType] // 0x004D44C0-0x004D4534
	[RequiredByNativeCode] // 0x004D44C0-0x004D4534
	public struct HumanBone // TypeDefIndex: 2217
	{
		// Fields
		private string m_BoneName; // 0x00
		private string m_HumanName; // 0x08
		[NativeName] // 0x004D49C0-0x004D49F8
		public HumanLimit limit; // 0x10
	}

	[MovedFrom] // 0x004D4534-0x004D45EC
	[NativeHeader] // 0x004D4534-0x004D45EC
	[NativeHeader] // 0x004D4534-0x004D45EC
	[UsedByNativeCode] // 0x004D4534-0x004D45EC
	public sealed class AvatarMask : UnityEngine.Object // TypeDefIndex: 2218
	{
	}

	[NativeHeader] // 0x004D45EC-0x004D4624
	public class Motion : UnityEngine.Object // TypeDefIndex: 2219
	{
		// Fields
		[CompilerGenerated] // 0x004D49F8-0x004D4A34
		[DebuggerBrowsable] // 0x004D49F8-0x004D4A34
		private readonly bool _isAnimatorMotion_k__BackingField; // 0x18
	
		// Properties
		public bool isLooping { [NativeMethod] /* 0x004D51E0-0x004D5218 */ get; } // 0x00F8235C-0x00F8239C 
	
		// Constructors
		protected Motion(); // 0x00F7D324-0x00F7D38C
	}

	[ExcludeFromObjectFactory] // 0x004D4624-0x004D4680
	[NativeHeader] // 0x004D4624-0x004D4680
	[UsedByNativeCode] // 0x004D4624-0x004D4680
	public class RuntimeAnimatorController : UnityEngine.Object // TypeDefIndex: 2220
	{
		// Constructors
		protected RuntimeAnimatorController(); // 0x00F8239C-0x00F82404
	}

	internal enum AnimationEventSource // TypeDefIndex: 2221
	{
		NoSource = 0,
		Legacy = 1,
		Animator = 2
	}

	[Serializable]
	[RequiredByNativeCode] // 0x004D4680-0x004D4690
	public sealed class AnimationEvent // TypeDefIndex: 2222
	{
		// Fields
		internal float m_Time; // 0x10
		internal string m_FunctionName; // 0x18
		internal string m_StringParameter; // 0x20
		internal UnityEngine.Object m_ObjectReferenceParameter; // 0x28
		internal float m_FloatParameter; // 0x30
		internal int m_IntParameter; // 0x34
		internal int m_MessageOptions; // 0x38
		internal AnimationEventSource m_Source; // 0x3C
		internal AnimationState m_StateSender; // 0x40
		internal AnimatorStateInfo m_AnimatorStateInfo; // 0x48
		internal AnimatorClipInfo m_AnimatorClipInfo; // 0x6C
	
		// Properties
		public string stringParameter { set; } // 0x00F7D880-0x00F7D888
		public string functionName { get; set; } // 0x00F7D888-0x00F7D890 0x00F7D890-0x00F7D898
		public float time { get; set; } // 0x00F7D898-0x00F7D8A0 0x00F7D8A0-0x00F7D8A8
		public SendMessageOptions messageOptions { set; } // 0x00F7D8A8-0x00F7D8B0
		public bool isFiredByLegacy { get; } // 0x00F7D8B0-0x00F7D8C0 
		public AnimationState animationState { get; } // 0x00F7D8C0-0x00F7D944 
	
		// Constructors
		public AnimationEvent(); // 0x00F7D814-0x00F7D880
	}

	public enum PlayMode // TypeDefIndex: 2223
	{
		StopSameLayer = 0,
		StopAll = 4
	}

	public enum QueueMode // TypeDefIndex: 2224
	{
		CompleteOthers = 0,
		PlayNow = 2
	}

	public enum AnimationBlendMode // TypeDefIndex: 2225
	{
		Blend = 0,
		Additive = 1
	}

	public sealed class Animation : Behaviour, IEnumerable // TypeDefIndex: 2226
	{
		// Properties
		public AnimationClip clip { [GeneratedByOldBindingsGenerator] /* 0x004D5218-0x004D5228 */ get; [GeneratedByOldBindingsGenerator] /* 0x004D5228-0x004D5238 */ set; } // 0x00F7C6D0-0x00F7C710 0x00F7C710-0x00F7C760
		public bool isPlaying { [GeneratedByOldBindingsGenerator] /* 0x004D5258-0x004D5268 */ get; } // 0x00F7C860-0x00F7C8A0 
		public AnimationState this[string name] { get => default; } // 0x00F7C8F0-0x00F7C940 
	
		// Nested types
		private sealed class Enumerator : IEnumerator // TypeDefIndex: 2227
		{
			// Fields
			private Animation m_Outer; // 0x10
			private int m_CurrentIndex; // 0x18
	
			// Properties
			public object Current { get; } // 0x00F7D208-0x00F7D264 
	
			// Constructors
			internal Enumerator(Animation outer); // 0x00F7D05C-0x00F7D090
	
			// Methods
			public bool MoveNext(); // 0x00F7D264-0x00F7D2D4
			public void Reset(); // 0x00F7D2D4-0x00F7D2E0
		}
	
		// Methods
		public void Stop(); // 0x00F7C760-0x00F7C7A0
		[GeneratedByOldBindingsGenerator] // 0x004D5238-0x004D5248
		private static void INTERNAL_CALL_Stop(Animation self); // 0x00F7C7A0-0x00F7C7E0
		public void Sample(); // 0x00F7C7E0-0x00F7C820
		[GeneratedByOldBindingsGenerator] // 0x004D5248-0x004D5258
		private static void INTERNAL_CALL_Sample(Animation self); // 0x00F7C820-0x00F7C860
		[GeneratedByOldBindingsGenerator] // 0x004D5268-0x004D5278
		public bool IsPlaying(string name); // 0x00F7C8A0-0x00F7C8F0
		[ExcludeFromDocs] // 0x004D5278-0x004D5288
		public bool Play(); // 0x00F7C990-0x00F7C9D4
		public bool Play([UnityEngine.Internal.DefaultValue] /* 0x004D55B8-0x004D55F0 */ PlayMode mode); // 0x00F7C9D4-0x00F7CA24
		[GeneratedByOldBindingsGenerator] // 0x004D5288-0x004D5298
		public bool Play(string animation, [UnityEngine.Internal.DefaultValue] /* 0x004D55F0-0x004D5628 */ PlayMode mode); // 0x00F7CA74-0x00F7CACC
		[ExcludeFromDocs] // 0x004D5298-0x004D52A8
		public bool Play(string animation); // 0x00F7CACC-0x00F7CB20
		[GeneratedByOldBindingsGenerator] // 0x004D52A8-0x004D52B8
		public void CrossFade(string animation, [UnityEngine.Internal.DefaultValue] /* 0x004D5628-0x004D5660 */ float fadeLength, [UnityEngine.Internal.DefaultValue] /* 0x004D5660-0x004D5698 */ PlayMode mode); // 0x00F7CB20-0x00F7CB88
		[ExcludeFromDocs] // 0x004D52B8-0x004D52C8
		public void CrossFade(string animation, float fadeLength); // 0x00F7CB88-0x00F7CBEC
		[ExcludeFromDocs] // 0x004D52C8-0x004D52D8
		public void CrossFade(string animation); // 0x00F7CBEC-0x00F7CC48
		[GeneratedByOldBindingsGenerator] // 0x004D52D8-0x004D52E8
		public AnimationState CrossFadeQueued(string animation, [UnityEngine.Internal.DefaultValue] /* 0x004D5698-0x004D56D0 */ float fadeLength, [UnityEngine.Internal.DefaultValue] /* 0x004D56D0-0x004D5708 */ QueueMode queue, [UnityEngine.Internal.DefaultValue] /* 0x004D5708-0x004D5740 */ PlayMode mode); // 0x00F7CC48-0x00F7CCC0
		[ExcludeFromDocs] // 0x004D52E8-0x004D52F8
		public AnimationState CrossFadeQueued(string animation, float fadeLength); // 0x00F7CCC0-0x00F7CD28
		[ExcludeFromDocs] // 0x004D52F8-0x004D5308
		public AnimationState CrossFadeQueued(string animation); // 0x00F7CD28-0x00F7CD88
		[GeneratedByOldBindingsGenerator] // 0x004D5308-0x004D5318
		public AnimationState PlayQueued(string animation, [UnityEngine.Internal.DefaultValue] /* 0x004D5740-0x004D5778 */ QueueMode queue, [UnityEngine.Internal.DefaultValue] /* 0x004D5778-0x004D57B0 */ PlayMode mode); // 0x00F7CD88-0x00F7CDF0
		[ExcludeFromDocs] // 0x004D5318-0x004D5328
		public AnimationState PlayQueued(string animation); // 0x00F7CDF0-0x00F7CE48
		public void AddClip(AnimationClip clip, string newName); // 0x00F7CE48-0x00F7CEAC
		[GeneratedByOldBindingsGenerator] // 0x004D5328-0x004D5338
		public void AddClip(AnimationClip clip, string newName, int firstFrame, int lastFrame, [UnityEngine.Internal.DefaultValue] /* 0x004D57B0-0x004D57E8 */ bool addLoopFrame); // 0x00F7CF20-0x00F7CFA0
		[ExcludeFromDocs] // 0x004D5338-0x004D5348
		public void AddClip(AnimationClip clip, string newName, int firstFrame, int lastFrame); // 0x00F7CEAC-0x00F7CF20
		[GeneratedByOldBindingsGenerator] // 0x004D5348-0x004D5358
		public void RemoveClip(AnimationClip clip); // 0x00F7CFA0-0x00F7CFF0
		[GeneratedByOldBindingsGenerator] // 0x004D5358-0x004D5368
		private bool PlayDefaultAnimation(PlayMode mode); // 0x00F7CA24-0x00F7CA74
		public IEnumerator GetEnumerator(); // 0x00F7CFF0-0x00F7D05C
		[GeneratedByOldBindingsGenerator] // 0x004D5368-0x004D5378
		internal AnimationState GetState(string name); // 0x00F7C940-0x00F7C990
		[GeneratedByOldBindingsGenerator] // 0x004D5378-0x004D5388
		internal AnimationState GetStateAtIndex(int index); // 0x00F7D090-0x00F7D0E0
		[GeneratedByOldBindingsGenerator] // 0x004D5388-0x004D5398
		internal int GetStateCount(); // 0x00F7D0E0-0x00F7D120
		public AnimationClip GetClip(string name); // 0x00F7D120-0x00F7D1C8
	}

	[UsedByNativeCode] // 0x004D46C8-0x004D46D8
	public sealed class AnimationState : TrackedReference // TypeDefIndex: 2228
	{
		// Properties
		public bool enabled { [GeneratedByOldBindingsGenerator] /* 0x004D5398-0x004D53A8 */ get; [GeneratedByOldBindingsGenerator] /* 0x004D53A8-0x004D53B8 */ set; } // 0x00F7D94C-0x00F7D98C 0x00F7D98C-0x00F7D9DC
		public float weight { [GeneratedByOldBindingsGenerator] /* 0x004D53B8-0x004D53C8 */ set; } // 0x00F7D9DC-0x00F7DA2C
		public WrapMode wrapMode { [GeneratedByOldBindingsGenerator] /* 0x004D53C8-0x004D53D8 */ get; [GeneratedByOldBindingsGenerator] /* 0x004D53D8-0x004D53E8 */ set; } // 0x00F7DA2C-0x00F7DA6C 0x00F7DA6C-0x00F7DABC
		public float time { [GeneratedByOldBindingsGenerator] /* 0x004D53E8-0x004D53F8 */ get; [GeneratedByOldBindingsGenerator] /* 0x004D53F8-0x004D5408 */ set; } // 0x00F7DABC-0x00F7DAFC 0x00F7DAFC-0x00F7DB4C
		public float normalizedTime { [GeneratedByOldBindingsGenerator] /* 0x004D5408-0x004D5418 */ get; [GeneratedByOldBindingsGenerator] /* 0x004D5418-0x004D5428 */ set; } // 0x00F7DB4C-0x00F7DB8C 0x00F7DB8C-0x00F7DBDC
		public float speed { [GeneratedByOldBindingsGenerator] /* 0x004D5428-0x004D5438 */ get; [GeneratedByOldBindingsGenerator] /* 0x004D5438-0x004D5448 */ set; } // 0x00F7DBDC-0x00F7DC1C 0x00F7DC1C-0x00F7DC6C
		public float length { [GeneratedByOldBindingsGenerator] /* 0x004D5448-0x004D5458 */ get; } // 0x00F7DC6C-0x00F7DCAC 
		public int layer { [GeneratedByOldBindingsGenerator] /* 0x004D5458-0x004D5468 */ set; } // 0x00F7DCAC-0x00F7DCFC
		public AnimationClip clip { [GeneratedByOldBindingsGenerator] /* 0x004D5468-0x004D5478 */ get; } // 0x00F7D1C8-0x00F7D208 
		public string name { [GeneratedByOldBindingsGenerator] /* 0x004D5498-0x004D54A8 */ get; } // 0x00F7DDA8-0x00F7DDE8 
		public AnimationBlendMode blendMode { [GeneratedByOldBindingsGenerator] /* 0x004D54A8-0x004D54B8 */ get; } // 0x00F7DDE8-0x00F7DEE4 
	
		// Constructors
		public AnimationState(); // 0x00F7D944-0x00F7D94C
	
		// Methods
		[GeneratedByOldBindingsGenerator] // 0x004D5478-0x004D5488
		public void AddMixingTransform(Transform mix, [UnityEngine.Internal.DefaultValue] /* 0x004D57E8-0x004D5820 */ bool recursive); // 0x00F7DCFC-0x00F7DD54
		[ExcludeFromDocs] // 0x004D5488-0x004D5498
		public void AddMixingTransform(Transform mix); // 0x00F7DD54-0x00F7DDA8
	}

	[NativeHeader] // 0x004D6A5C-0x004D6AA8
	[RequiredByNativeCode] // 0x004D6A5C-0x004D6AA8
	public class AssetBundleCreateRequest : AsyncOperation // TypeDefIndex: 2230
	{
	}

	[NativeHeader] // 0x004D6AA8-0x004D6AF4
	[RequiredByNativeCode] // 0x004D6AA8-0x004D6AF4
	public class AssetBundleRecompressOperation : AsyncOperation // TypeDefIndex: 2231
	{
	}

	[NativeHeader] // 0x004D6AF4-0x004D6B40
	[RequiredByNativeCode] // 0x004D6AF4-0x004D6B40
	public class AssetBundleRequest : AsyncOperation // TypeDefIndex: 2232
	{
	}

	public enum AudioRolloffMode // TypeDefIndex: 2234
	{
		Logarithmic = 0,
		Linear = 1,
		Custom = 2
	}

	[NativeHeader] // 0x004D7D34-0x004D7D98
	[StaticAccessor] // 0x004D7D34-0x004D7D98
	public sealed class AudioSettings // TypeDefIndex: 2235
	{
		// Fields
		[CompilerGenerated] // 0x004D8248-0x004D8284
		[DebuggerBrowsable] // 0x004D8248-0x004D8284
		private static AudioConfigurationChangeHandler OnAudioConfigurationChanged; // 0x00
	
		// Nested types
		public delegate void AudioConfigurationChangeHandler(bool deviceWasChanged); // TypeDefIndex: 2236; 0x00FA6C84-0x00FA6EC8
	
		// Methods
		[RequiredByNativeCode] // 0x004D84B0-0x004D84C0
		internal static void InvokeOnAudioConfigurationChanged(bool deviceWasChanged); // 0x00FA6C1C-0x00FA6C84
	}

	[NativeHeader] // 0x004D7D98-0x004D7DFC
	[StaticAccessor] // 0x004D7D98-0x004D7DFC
	public sealed class AudioClip : UnityEngine.Object // TypeDefIndex: 2237
	{
		// Fields
		[CompilerGenerated] // 0x004D8284-0x004D82C0
		[DebuggerBrowsable] // 0x004D8284-0x004D82C0
		private PCMReaderCallback m_PCMReaderCallback; // 0x18
		[CompilerGenerated] // 0x004D82C0-0x004D82FC
		[DebuggerBrowsable] // 0x004D82C0-0x004D82FC
		private PCMSetPositionCallback m_PCMSetPositionCallback; // 0x20
	
		// Properties
		[NativeProperty] // 0x004D8768-0x004D87A0
		public float length { get; } // 0x00FA53D4-0x00FA5414 
		[NativeProperty] // 0x004D87A0-0x004D87D8
		public int samples { get; } // 0x00FA6458-0x00FA6498 
		public int frequency { get; } // 0x00FA6498-0x00FA64D8 
	
		// Nested types
		public delegate void PCMReaderCallback(float[] data); // TypeDefIndex: 2238; 0x00FA64E8-0x00FA689C
	
		public delegate void PCMSetPositionCallback(int position); // TypeDefIndex: 2239; 0x00FA68AC-0x00FA6AF0
	
		// Constructors
		private AudioClip(); // 0x00FA63EC-0x00FA6458
	
		// Methods
		[RequiredByNativeCode] // 0x004D84C0-0x004D84D0
		private void InvokePCMReaderCallback_Internal(float[] data); // 0x00FA64D8-0x00FA64E8
		[RequiredByNativeCode] // 0x004D84D0-0x004D84E0
		private void InvokePCMSetPositionCallback_Internal(int position); // 0x00FA689C-0x00FA68AC
	}

	public class AudioBehaviour : Behaviour // TypeDefIndex: 2240
	{
	}

	[RequireComponent] // 0x004D7DFC-0x004D7E88
	[StaticAccessor] // 0x004D7DFC-0x004D7E88
	public sealed class AudioListener : AudioBehaviour // TypeDefIndex: 2241
	{
		// Properties
		public static float volume { set; } // 0x00FA6BD8-0x00FA6C1C
	}

	[RequireComponent] // 0x004D7E88-0x004D7F14
	[StaticAccessor] // 0x004D7E88-0x004D7F14
	public sealed class AudioSource : AudioBehaviour // TypeDefIndex: 2242
	{
		// Properties
		public float volume { get; set; } // 0x00FA7104-0x00FA7144 0x00FA7144-0x00FA7194
		public float pitch { get; set; } // 0x00FA7194-0x00FA71D4 0x00FA71D4-0x00FA7224
		[NativeProperty] // 0x004D87D8-0x004D8810
		public float time { get; set; } // 0x00FA7224-0x00FA7264 0x00FA7264-0x00FA72B4
		[NativeProperty] // 0x004D8810-0x004D8848
		public int timeSamples { [NativeMethod] /* 0x004D84E0-0x004D8514 */ get; [NativeMethod] /* 0x004D8514-0x004D8548 */ set; } // 0x00FA72B4-0x00FA72F4 0x00FA72F4-0x00FA7344
		[NativeProperty] // 0x004D8848-0x004D8880
		public AudioClip clip { get; set; } // 0x00FA7344-0x00FA7384 0x00FA7384-0x00FA73D4
		public bool isPlaying { [NativeName] /* 0x004D8558-0x004D8590 */ get; } // 0x00FA7598-0x00FA75D8 
		public bool loop { get; set; } // 0x00FA75D8-0x00FA7618 0x00FA7618-0x00FA7668
		public bool playOnAwake { set; } // 0x00FA7668-0x00FA76B8
		[NativeProperty] // 0x004D8880-0x004D88B8
		public float spatialBlend { set; } // 0x00FA76B8-0x00FA7708
		public int priority { set; } // 0x00FA7708-0x00FA7758
		public float minDistance { set; } // 0x00FA7758-0x00FA77A8
		public float maxDistance { set; } // 0x00FA77A8-0x00FA77F8
		public AudioRolloffMode rolloffMode { set; } // 0x00FA77F8-0x00FA7848
	
		// Methods
		private static float GetPitch(AudioSource source); // 0x00FA6F74-0x00FA6FB4
		private static void SetPitch(AudioSource source, float pitch); // 0x00FA6FB4-0x00FA7004
		private static void PlayHelper(AudioSource source, ulong delay); // 0x00FA7004-0x00FA7054
		private static void PlayOneShotHelper(AudioSource source, AudioClip clip, float volumeScale); // 0x00FA7054-0x00FA70B4
		private void Stop(bool stopOneShots); // 0x00FA70B4-0x00FA7104
		[ExcludeFromDocs] // 0x004D8548-0x004D8558
		public void Play(); // 0x00FA73D4-0x00FA7418
		public void PlayOneShot(AudioClip clip, [UnityEngine.Internal.DefaultValue] /* 0x004D86F8-0x004D8730 */ float volumeScale); // 0x00FA7418-0x00FA7514
		public void Stop(); // 0x00FA7514-0x00FA7558
		public void Pause(); // 0x00FA7558-0x00FA7598
	}
}

namespace UnityEngine.Audio
{
	[NativeHeader] // 0x004D7F14-0x004D7FD0
	[NativeHeader] // 0x004D7F14-0x004D7FD0
	[NativeHeader] // 0x004D7F14-0x004D7FD0
	[RequiredByNativeCode] // 0x004D7F14-0x004D7FD0
	[StaticAccessor] // 0x004D7F14-0x004D7FD0
	public struct AudioClipPlayable : IPlayable, IEquatable<AudioClipPlayable> // TypeDefIndex: 2243
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
	
		// Constructors
		internal AudioClipPlayable(PlayableHandle handle); // 0x00596CC0-0x00596CC8
	
		// Methods
		public static AudioClipPlayable Create(PlayableGraph graph, AudioClip clip, bool looping); // 0x00FA51C0-0x00FA52EC
		private static PlayableHandle CreateHandle(PlayableGraph graph, AudioClip clip, bool looping); // 0x00FA52EC-0x00FA53D4
		public PlayableHandle GetHandle(); // 0x00596CC8-0x00596CD4
		public static implicit operator Playable(AudioClipPlayable playable); // 0x00FA5488-0x00FA54C4
		public static explicit operator AudioClipPlayable(Playable playable); // 0x00FA54C4-0x00FA5690
		public bool Equals(AudioClipPlayable other); // 0x00596CD4-0x00596CDC
		internal void SetVolume(float value); // 0x00596CDC-0x00596CE4
		internal void SetStereoPan(float value); // 0x00596CE4-0x00596CEC
		internal void SetSpatialBlend(float value); // 0x00596CEC-0x00596CF4
		public void Seek(double startTime, double startDelay, [System.ComponentModel.DefaultValue] /* 0x004D8730-0x004D8768 */ double duration); // 0x00596CF4-0x00596CFC
		[NativeThrows] // 0x004D8590-0x004D85A0
		private static void SetVolumeInternal(ref PlayableHandle hdl, float volume); // 0x00FA5690-0x00FA57E0
		[NativeThrows] // 0x004D85A0-0x004D85B0
		private static void SetStereoPanInternal(ref PlayableHandle hdl, float stereoPan); // 0x00FA57E0-0x00FA592C
		[NativeThrows] // 0x004D85B0-0x004D85C0
		private static void SetSpatialBlendInternal(ref PlayableHandle hdl, float spatialBlend); // 0x00FA592C-0x00FA5A80
		[NativeThrows] // 0x004D85C0-0x004D85D0
		private static void SetStartDelayInternal(ref PlayableHandle hdl, double delay); // 0x00FA5A80-0x00FA5AD0
		[NativeThrows] // 0x004D85D0-0x004D85E0
		private static void SetPauseDelayInternal(ref PlayableHandle hdl, double delay); // 0x00FA5AD0-0x00FA5BDC
		[NativeThrows] // 0x004D85E0-0x004D85F0
		private static bool InternalCreateAudioClipPlayable(ref PlayableGraph graph, AudioClip clip, bool looping, ref PlayableHandle handle); // 0x00FA5414-0x00FA5488
	}

	[NativeHeader] // 0x004D7FD0-0x004D808C
	[NativeHeader] // 0x004D7FD0-0x004D808C
	[NativeHeader] // 0x004D7FD0-0x004D808C
	[RequiredByNativeCode] // 0x004D7FD0-0x004D808C
	[StaticAccessor] // 0x004D7FD0-0x004D808C
	public struct AudioMixerPlayable : IPlayable, IEquatable<AudioMixerPlayable> // TypeDefIndex: 2244
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
	
		// Constructors
		internal AudioMixerPlayable(PlayableHandle handle); // 0x00596CFC-0x00596D04
	
		// Methods
		public static AudioMixerPlayable Create(PlayableGraph graph, int inputCount = 0 /* Metadata: 0x001F43C2 */, bool normalizeInputVolumes = false /* Metadata: 0x001F43C6 */); // 0x00FA5BDC-0x00FA5C1C
		private static PlayableHandle CreateHandle(PlayableGraph graph, int inputCount, bool normalizeInputVolumes); // 0x00FA5C1C-0x00FA5D10
		public PlayableHandle GetHandle(); // 0x00596D04-0x00596D10
		public static implicit operator Playable(AudioMixerPlayable playable); // 0x00FA5D74-0x00FA5E38
		public bool Equals(AudioMixerPlayable other); // 0x00596D10-0x00596D18
		[NativeThrows] // 0x004D85F0-0x004D8600
		private static bool CreateAudioMixerPlayableInternal(ref PlayableGraph graph, bool normalizeInputVolumes, ref PlayableHandle handle); // 0x00FA5D10-0x00FA5D74
	}

	public static class AudioPlayableBinding // TypeDefIndex: 2245
	{
		// Fields
		[CompilerGenerated] // 0x004D82FC-0x004D830C
		private static PlayableBinding.CreateOutputMethod __f__mg_cache0; // 0x00
	
		// Methods
		public static PlayableBinding Create(string name, UnityEngine.Object key); // 0x00FA5E38-0x00FA5F84
		private static PlayableOutput CreateAudioOutput(PlayableGraph graph, string name); // 0x00FA5F84-0x00FA5FC8
	}

	[NativeHeader] // 0x004D808C-0x004D8114
	[NativeHeader] // 0x004D808C-0x004D8114
	[StaticAccessor] // 0x004D808C-0x004D8114
	internal static class AudioPlayableGraphExtensions // TypeDefIndex: 2246
	{
		// Methods
		[NativeThrows] // 0x004D8600-0x004D8610
		internal static bool InternalCreateAudioOutput(ref PlayableGraph graph, string name, out PlayableOutputHandle handle); // 0x00FA60B8-0x00FA61CC
	}

	[NativeHeader] // 0x004D8114-0x004D81D0
	[NativeHeader] // 0x004D8114-0x004D81D0
	[NativeHeader] // 0x004D8114-0x004D81D0
	[RequiredByNativeCode] // 0x004D8114-0x004D81D0
	[StaticAccessor] // 0x004D8114-0x004D81D0
	public struct AudioPlayableOutput : IPlayableOutput // TypeDefIndex: 2247
	{
		// Fields
		private PlayableOutputHandle m_Handle; // 0x00
	
		// Properties
		public static AudioPlayableOutput Null { get; } // 0x00FA61CC-0x00FA62B4 
	
		// Constructors
		internal AudioPlayableOutput(PlayableOutputHandle handle); // 0x00596D18-0x00596D20
	
		// Methods
		public static AudioPlayableOutput Create(PlayableGraph graph, string name, AudioSource target); // 0x00FA5FC8-0x00FA607C
		public PlayableOutputHandle GetHandle(); // 0x00596D20-0x00596D2C
		public static implicit operator PlayableOutput(AudioPlayableOutput output); // 0x00FA607C-0x00FA60B8
		public static explicit operator AudioPlayableOutput(PlayableOutput output); // 0x00FA62B4-0x00FA62FC
		public void SetTarget(AudioSource value); // 0x00596D2C-0x00596D7C
		public void SetEvaluateOnSeek(bool value); // 0x00596D7C-0x00596EC0
		[NativeThrows] // 0x004D8610-0x004D8620
		private static void InternalSetTarget(ref PlayableOutputHandle output, AudioSource target); // 0x00FA62FC-0x00FA639C
		[NativeThrows] // 0x004D8620-0x004D8630
		private static void InternalSetEvaluateOnSeek(ref PlayableOutputHandle output, bool value); // 0x00FA639C-0x00FA63EC
	}
}

namespace UnityEngine.Experimental.Audio
{
	[NativeType] // 0x004D81D0-0x004D8234
	[StaticAccessor] // 0x004D81D0-0x004D8234
	public class AudioSampleProvider // TypeDefIndex: 2248
	{
		// Fields
		private ConsumeSampleFramesNativeFunction m_ConsumeSampleFramesNativeFunction; // 0x10
		[CompilerGenerated] // 0x004D830C-0x004D8348
		[DebuggerBrowsable] // 0x004D830C-0x004D8348
		private uint _id_k__BackingField; // 0x18
		[CompilerGenerated] // 0x004D8348-0x004D8384
		[DebuggerBrowsable] // 0x004D8348-0x004D8384
		private ushort _trackIndex_k__BackingField; // 0x1C
		[CompilerGenerated] // 0x004D8384-0x004D83C0
		[DebuggerBrowsable] // 0x004D8384-0x004D83C0
		private UnityEngine.Object _owner_k__BackingField; // 0x20
		[CompilerGenerated] // 0x004D83C0-0x004D83FC
		[DebuggerBrowsable] // 0x004D83C0-0x004D83FC
		private ushort _channelCount_k__BackingField; // 0x28
		[CompilerGenerated] // 0x004D83FC-0x004D8438
		[DebuggerBrowsable] // 0x004D83FC-0x004D8438
		private uint _sampleRate_k__BackingField; // 0x2C
		[CompilerGenerated] // 0x004D8438-0x004D8474
		[DebuggerBrowsable] // 0x004D8438-0x004D8474
		private SampleFramesHandler sampleFramesAvailable; // 0x30
		[CompilerGenerated] // 0x004D8474-0x004D84B0
		[DebuggerBrowsable] // 0x004D8474-0x004D84B0
		private SampleFramesHandler sampleFramesOverflow; // 0x38
	
		// Properties
		public uint id { [CompilerGenerated] /* 0x004D8630-0x004D8640 */ get; [CompilerGenerated] /* 0x004D8640-0x004D8650 */ private set; } // 0x00FA79C4-0x00FA79CC 0x00FA7A64-0x00FA7A6C
		public UnityEngine.Object owner { [CompilerGenerated] /* 0x004D8650-0x004D8660 */ get; [CompilerGenerated] /* 0x004D8660-0x004D8670 */ private set; } // 0x00FA7A1C-0x00FA7A24 0x00FA7A6C-0x00FA7A74
	
		// Nested types
		[UnmanagedFunctionPointer] // 0x004D8234-0x004D8248
		public delegate uint ConsumeSampleFramesNativeFunction(uint providerId, IntPtr interleavedSampleFrames, uint sampleFrameCount); // TypeDefIndex: 2249; 0x00FA7EA4-0x00FA8128
	
		public delegate void SampleFramesHandler(AudioSampleProvider provider, uint sampleFrameCount); // TypeDefIndex: 2250; 0x00FA7A94-0x00FA7E74
	
		// Methods
		~AudioSampleProvider(); // 0x00FA7848-0x00FA78B8
		public void Dispose(); // 0x00FA78B8-0x00FA79C4
		[RequiredByNativeCode] // 0x004D8670-0x004D8680
		private void InvokeSampleFramesAvailable(int sampleFrameCount); // 0x00FA7A74-0x00FA7A94
		[RequiredByNativeCode] // 0x004D8680-0x004D8690
		private void InvokeSampleFramesOverflow(int droppedSampleFrameCount); // 0x00FA7E74-0x00FA7E94
		[NativeMethod] // 0x004D8690-0x004D86C4
		internal static void InternalRemove(uint providerId); // 0x00FA7A24-0x00FA7A64
		[NativeMethod] // 0x004D86C4-0x004D86F8
		private static void InternalSetScriptingPtr(uint providerId, AudioSampleProvider provider); // 0x00FA79CC-0x00FA7A1C
	}
}

namespace UnityEngine.Playables
{
	[NativeHeader] // 0x004D9B30-0x004D9BA0
	[NativeHeader] // 0x004D9B30-0x004D9BA0
	[RequiredByNativeCode] // 0x004D9B30-0x004D9BA0
	public class PlayableDirector : Behaviour, IExposedPropertyTable // TypeDefIndex: 2252
	{
		// Fields
		[CompilerGenerated] // 0x004D9BA0-0x004D9BDC
		[DebuggerBrowsable] // 0x004D9BA0-0x004D9BDC
		private Action<PlayableDirector> played; // 0x18
		[CompilerGenerated] // 0x004D9BDC-0x004D9C18
		[DebuggerBrowsable] // 0x004D9BDC-0x004D9C18
		private Action<PlayableDirector> paused; // 0x20
		[CompilerGenerated] // 0x004D9C18-0x004D9C54
		[DebuggerBrowsable] // 0x004D9C18-0x004D9C54
		private Action<PlayableDirector> stopped; // 0x28
	
		// Properties
		public PlayState state { get; } // 0x00FB8B30-0x00FB8B70 
		public DirectorWrapMode extrapolationMode { get; } // 0x00FB8BB0-0x00FB8BF0 
		public PlayableAsset playableAsset { get; } // 0x00FB8C30-0x00FB8CD8 
		public PlayableGraph playableGraph { get; } // 0x00FB8D18-0x00FB8D1C 
		public double time { get; set; } // 0x00FB8DC4-0x00FB8E04 0x00FB8D74-0x00FB8DC4
		public double duration { get; } // 0x00FB8E04-0x00FB8E44 
	
		// Methods
		public void Evaluate(); // 0x00FB8E44-0x00FB8E84
		public void Play(); // 0x00FB8E84-0x00FB8EC4
		public void Stop(); // 0x00FB8EC4-0x00FB8F04
		public void Pause(); // 0x00FB8F04-0x00FB8F44
		public UnityEngine.Object GetReferenceValue(PropertyName id, out bool idValid); // 0x00FB8F44-0x00FB8FA0
		[NativeMethod] // 0x004D9C54-0x004D9C8C
		public UnityEngine.Object GetGenericBinding(UnityEngine.Object key); // 0x00FB8FF8-0x00FB9048
		private PlayState GetPlayState(); // 0x00FB8B70-0x00FB8BB0
		private DirectorWrapMode GetWrapMode(); // 0x00FB8BF0-0x00FB8C30
		private PlayableGraph GetGraphHandle(); // 0x00FB8D1C-0x00FB8D74
		private ScriptableObject Internal_GetPlayableAsset(); // 0x00FB8CD8-0x00FB8D18
		[RequiredByNativeCode] // 0x004D9C8C-0x004D9C9C
		private void SendOnPlayableDirectorPlay(); // 0x00FB9098-0x00FB90FC
		[RequiredByNativeCode] // 0x004D9C9C-0x004D9CAC
		private void SendOnPlayableDirectorPause(); // 0x00FB90FC-0x00FB9160
		[RequiredByNativeCode] // 0x004D9CAC-0x004D9CBC
		private void SendOnPlayableDirectorStop(); // 0x00FB9160-0x00FB91C4
		private UnityEngine.Object GetReferenceValue_Injected(ref PropertyName id, out bool idValid); // 0x00FB8FA0-0x00FB8FF8
		private void GetGraphHandle_Injected(out PlayableGraph ret); // 0x00FB9048-0x00FB9098
	}
}

namespace UnityEngine
{
	[NativeHeader] // 0x004DAE68-0x004DAF14
	[NativeType] // 0x004DAE68-0x004DAF14
	[RequireComponent] // 0x004DAE68-0x004DAF14
	public class GridLayout : Behaviour // TypeDefIndex: 2254
	{
		// Methods
		[RequiredByNativeCode] // 0x004DAF14-0x004DAF24
		private void DoNothing(); // 0x00FB9BD8-0x00FB9BDC
	}

	[NativeHeader] // 0x004DC0D0-0x004DC134
	[StaticAccessor] // 0x004DC0D0-0x004DC134
	public sealed class Event // TypeDefIndex: 2256
	{
		// Fields
		[NonSerialized]
		internal IntPtr m_Ptr; // 0x10
		private static Event s_Current; // 0x00
		private static Event s_MasterEvent; // 0x08
		[CompilerGenerated] // 0x004DC6E8-0x004DC6F8
		private static Dictionary<string, int> __f__switch_map0; // 0x10
	
		// Properties
		[NativeProperty] // 0x004DE188-0x004DE1C8
		public EventType rawType { get; } // 0x00E4B024-0x00E4B064 
		[NativeProperty] // 0x004DE1C8-0x004DE208
		public Vector2 mousePosition { get; } // 0x00E4B064-0x00E4B0BC 
		[NativeProperty] // 0x004DE208-0x004DE248
		public EventModifiers modifiers { get; set; } // 0x00E4B10C-0x00E4B14C 0x00E4B14C-0x00E4B19C
		[NativeProperty] // 0x004DE248-0x004DE288
		public int clickCount { get; } // 0x00E4B19C-0x00E4B1DC 
		[NativeProperty] // 0x004DE288-0x004DE2C8
		public char character { get; set; } // 0x00E4B1DC-0x00E4B21C 0x00E4B21C-0x00E4B26C
		[NativeProperty] // 0x004DE2C8-0x004DE308
		public KeyCode keyCode { get; set; } // 0x00E4B26C-0x00E4B2AC 0x00E4B2AC-0x00E4B2FC
		[NativeProperty] // 0x004DE308-0x004DE348
		public int displayIndex { set; } // 0x00E4B2FC-0x00E4B34C
		public EventType type { [FreeFunction] /* 0x004DD254-0x004DD298 */ get; [FreeFunction] /* 0x004DD298-0x004DD2DC */ set; } // 0x00E4B34C-0x00E4B38C 0x00E4B38C-0x00E4B3DC
		public string commandName { [FreeFunction] /* 0x004DD2DC-0x004DD320 */ get; } // 0x00E4B3DC-0x00E4B41C 
		public bool shift { get; } // 0x00E4B700-0x00E4B748 
		public bool control { get; } // 0x00E4B748-0x00E4B790 
		public bool alt { get; } // 0x00E4B790-0x00E4B7D8 
		public bool command { get; } // 0x00E4B7D8-0x00E4B820 
		public static Event current { get; } // 0x00E4B820-0x00E4B870 
		public bool isKey { get; } // 0x00E4B870-0x00E4B8C0 
		public bool isMouse { get; } // 0x00E4B8C0-0x00E4B928 
	
		// Constructors
		public Event(); // 0x00E4AF38-0x00E4AF88
		public Event(int displayIndex); // 0x00E4AFC8-0x00E4B024
	
		// Methods
		[NativeMethod] // 0x004DD320-0x004DD358
		private void Internal_Use(); // 0x00E4B41C-0x00E4B45C
		[FreeFunction] // 0x004DD358-0x004DD39C
		private static IntPtr Internal_Create(int displayIndex); // 0x00E4AF88-0x00E4AFC8
		[FreeFunction] // 0x004DD39C-0x004DD3E0
		private static void Internal_Destroy(IntPtr ptr); // 0x00E4B45C-0x00E4B49C
		public static bool PopEvent(Event outEvent); // 0x00E4B49C-0x00E4B4DC
		private static void Internal_SetNativeEvent(IntPtr ptr); // 0x00E4B4DC-0x00E4B51C
		[RequiredByNativeCode] // 0x004DD3E0-0x004DD3F0
		internal static void Internal_MakeMasterEventCurrent(int displayIndex); // 0x00E4B51C-0x00E4B620
		~Event(); // 0x00E4B620-0x00E4B700
		public static Event KeyboardEvent(string key); // 0x00E4B928-0x00E4CF4C
		public override int GetHashCode(); // 0x00E4CF4C-0x00E4D070
		public override bool Equals(object obj); // 0x00E4D070-0x00E4D32C
		public override string ToString(); // 0x00E4D32C-0x00E4DB60
		public void Use(); // 0x00E4DB60-0x00E4DD1C
		private void get_mousePosition_Injected(out Vector2 ret); // 0x00E4B0BC-0x00E4B10C
	}

	public enum EventType // TypeDefIndex: 2257
	{
		MouseDown = 0,
		mouseDown = 0,
		MouseUp = 1,
		mouseUp = 1,
		MouseMove = 2,
		mouseMove = 2,
		MouseDrag = 3,
		mouseDrag = 3,
		KeyDown = 4,
		keyDown = 4,
		KeyUp = 5,
		keyUp = 5,
		ScrollWheel = 6,
		scrollWheel = 6,
		Repaint = 7,
		repaint = 7,
		Layout = 8,
		layout = 8,
		DragUpdated = 9,
		dragUpdated = 9,
		DragPerform = 10,
		dragPerform = 10,
		Ignore = 11,
		ignore = 11,
		Used = 12,
		used = 12,
		ValidateCommand = 13,
		ExecuteCommand = 14,
		DragExited = 15,
		ContextClick = 16,
		MouseEnterWindow = 20,
		MouseLeaveWindow = 21
	}

	[Flags] // 0x004DC134-0x004DC144
	public enum EventModifiers // TypeDefIndex: 2258
	{
		None = 0,
		Shift = 1,
		Control = 2,
		Alt = 4,
		Command = 8,
		Numeric = 16,
		CapsLock = 32,
		FunctionKey = 64
	}

	[NativeHeader] // 0x004DC144-0x004DC1A4
	[NativeHeader] // 0x004DC144-0x004DC1A4
	public class GUI // TypeDefIndex: 2259
	{
		// Fields
		private static int s_HotTextField; // 0x00
		private static readonly int s_BoxHash; // 0x04
		private static readonly int s_ButonHash; // 0x08
		private static readonly int s_RepeatButtonHash; // 0x0C
		private static readonly int s_ToggleHash; // 0x10
		private static readonly int s_ButtonGridHash; // 0x14
		private static readonly int s_SliderHash; // 0x18
		private static readonly int s_BeginGroupHash; // 0x1C
		private static readonly int s_ScrollviewHash; // 0x20
		[CompilerGenerated] // 0x004DCB3C-0x004DCB78
		[DebuggerBrowsable] // 0x004DCB3C-0x004DCB78
		private static DateTime _nextScrollStepTime_k__BackingField; // 0x28
		private static GUISkin s_Skin; // 0x30
		[CompilerGenerated] // 0x004DCB78-0x004DCBB4
		[DebuggerBrowsable] // 0x004DCB78-0x004DCBB4
		private static GenericStack _scrollViewStates_k__BackingField; // 0x38
	
		// Properties
		public static Color color { get; set; } // 0x00E4DF58-0x00E4DFF0 0x00E4E030-0x00E4E0C4
		public static bool changed { set; } // 0x00E4E104-0x00E4E144
		internal static DateTime nextScrollStepTime { [CompilerGenerated] /* 0x004DD3F0-0x004DD400 */ set; } // 0x00E4E1F8-0x00E4E264
		public static GUISkin skin { get; set; } // 0x00E4E428-0x00E4E494 0x00E4E264-0x00E4E2CC
		internal static GenericStack scrollViewStates { [CompilerGenerated] /* 0x004DD400-0x004DD410 */ get; } // 0x00E51B34-0x00E51B9C 
	
		// Nested types
		public delegate void WindowFunction(int id); // TypeDefIndex: 2260; 0x00E52504-0x00E52748
	
		// Constructors
		static GUI(); // 0x00E4DD1C-0x00E4DF58
	
		// Methods
		internal static void GrabMouseControl(int id); // 0x00E4E144-0x00E4E184
		internal static bool HasMouseControl(int id); // 0x00E4E184-0x00E4E1C4
		internal static void ReleaseMouseControl(); // 0x00E4E1C4-0x00E4E1F8
		internal static void DoSetSkin(GUISkin newSkin); // 0x00E4E374-0x00E4E428
		public static void Label(Rect position, string text); // 0x00E4E5F0-0x00E4E6D0
		public static void Label(Rect position, string text, GUIStyle style); // 0x00E4E828-0x00E4E8FC
		public static void Label(Rect position, GUIContent content, GUIStyle style); // 0x00E4E780-0x00E4E828
		public static void Box(Rect position, string text); // 0x00E4EAB4-0x00E4EB94
		public static void Box(Rect position, GUIContent content, GUIStyle style); // 0x00E4EB9C-0x00E4ED0C
		public static bool Button(Rect position, string text); // 0x00E4ED50-0x00E4EE30
		public static bool Button(Rect position, GUIContent content, GUIStyle style); // 0x00E4EE38-0x00E4EF00
		internal static bool Button(Rect position, int id, GUIContent content, GUIStyle style); // 0x00E4EF68-0x00E4F018
		public static string TextField(Rect position, string text); // 0x00E4F13C-0x00E4F250
		internal static string PasswordFieldGetStrToShow(string password, char maskChar); // 0x00E4F338-0x00E4F490
		internal static void DoTextField(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style); // 0x00E4F268-0x00E4F330
		internal static void DoTextField(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, string secureText); // 0x00E4F490-0x00E4F568
		internal static void DoTextField(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, string secureText, char maskChar); // 0x00E4F568-0x00E4F808
		private static void HandleTextFieldEventForTouchscreen(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, string secureText, char maskChar, TextEditor editor); // 0x00E4F9CC-0x00E4FE0C
		private static void HandleTextFieldEventForDesktop(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, TextEditor editor); // 0x00E4FE0C-0x00E5063C
		private static bool DoControl(Rect position, int id, bool on, bool hover, GUIContent content, GUIStyle style); // 0x00E514F0-0x00E51978
		private static void DoLabel(Rect position, GUIContent content, GUIStyle style); // 0x00E4E8FC-0x00E4EAB4
		internal static bool DoButton(Rect position, int id, GUIContent content, GUIStyle style); // 0x00E4F018-0x00E4F13C
		[RequiredByNativeCode] // 0x004DD410-0x004DD420
		internal static void CallWindowDelegate(WindowFunction func, int id, int instanceID, GUISkin _skin, int forceRect, float width, float height, GUIStyle style); // 0x00E51B9C-0x00E51F04
		private static void get_color_Injected(out Color ret); // 0x00E4DFF0-0x00E4E030
		private static void set_color_Injected(ref Color value); // 0x00E4E0C4-0x00E4E104
	}

	[NativeHeader] // 0x004DC1A4-0x004DC264
	[NativeHeader] // 0x004DC1A4-0x004DC264
	[VisibleToOtherModules] // 0x004DC1A4-0x004DC264
	internal sealed class GUIClip // TypeDefIndex: 2261
	{
		// Properties
		internal static Rect visibleRect { [FreeFunction] /* 0x004DD420-0x004DD458 */ get; } // 0x00E51A44-0x00E51A98 
	
		// Methods
		private static void get_visibleRect_Injected(out Rect ret); // 0x00E52A60-0x00E52AA0
	}

	[Serializable]
	[NativeHeader] // 0x004DC264-0x004DC2C0
	[RequiredByNativeCode] // 0x004DC264-0x004DC2C0
	public class GUIContent // TypeDefIndex: 2262
	{
		// Fields
		[SerializeField] // 0x004DCBB4-0x004DCBC4
		private string m_Text; // 0x10
		[SerializeField] // 0x004DCBC4-0x004DCBD4
		private Texture m_Image; // 0x18
		[SerializeField] // 0x004DCBD4-0x004DCBE4
		private string m_Tooltip; // 0x20
		private static readonly GUIContent s_Text; // 0x00
		private static readonly GUIContent s_Image; // 0x08
		private static readonly GUIContent s_TextImage; // 0x10
		public static GUIContent none; // 0x18
	
		// Properties
		public string text { get; set; } // 0x00E4F330-0x00E4F338 0x00E4F808-0x00E4F810
		public Texture image { set; } // 0x00E52C0C-0x00E52C14
		public string tooltip { get; set; } // 0x00E51A3C-0x00E51A44 0x00E52C14-0x00E52C1C
	
		// Constructors
		public GUIContent(); // 0x00E52AA0-0x00E52B0C
		public GUIContent(string text); // 0x00E52B0C-0x00E52B78
		public GUIContent(string text, Texture image, string tooltip); // 0x00E52B78-0x00E52C0C
		public GUIContent(GUIContent src); // 0x00E52C1C-0x00E52CBC
		static GUIContent(); // 0x00E52DA0-0x00E52E58
	
		// Methods
		internal static GUIContent Temp(string t); // 0x00E4E6D0-0x00E4E778
		[VisibleToOtherModules] // 0x004DD458-0x004DD4D0
		internal static void ClearStaticCache(); // 0x00E52CBC-0x00E52DA0
	}

	public enum FocusType // TypeDefIndex: 2263
	{
		Native = 0,
		Keyboard = 1,
		Passive = 2
	}

	public class GUILayout // TypeDefIndex: 2264
	{
		// Methods
		public static bool Button(string text, params /* 0x004DE168-0x004DE178 */ GUILayoutOption[] options); // 0x00E52E58-0x00E52F0C
		private static bool DoButton(GUIContent content, GUIStyle style, GUILayoutOption[] options); // 0x00E52F0C-0x00E52FE4
		public static GUILayoutOption Width(float width); // 0x00E52074-0x00E52104
		public static GUILayoutOption Height(float height); // 0x00E52104-0x00E52198
	}

	public sealed class GUILayoutOption // TypeDefIndex: 2265
	{
		// Fields
		internal Type type; // 0x10
		internal object value; // 0x18
	
		// Nested types
		internal enum Type // TypeDefIndex: 2266
		{
			fixedWidth = 0,
			fixedHeight = 1,
			minWidth = 2,
			maxWidth = 3,
			minHeight = 4,
			maxHeight = 5,
			stretchWidth = 6,
			stretchHeight = 7,
			alignStart = 8,
			alignMiddle = 9,
			alignEnd = 10,
			alignJustify = 11,
			equalSize = 12,
			spacing = 13
		}
	
		// Constructors
		internal GUILayoutOption(Type type, object value); // 0x00E53060-0x00E5309C
	}

	[NativeHeader] // 0x004DC2C0-0x004DC2F8
	public class GUILayoutUtility // TypeDefIndex: 2267
	{
		// Fields
		private static readonly Dictionary<int, LayoutCache> s_StoredLayouts; // 0x00
		private static readonly Dictionary<int, LayoutCache> s_StoredWindows; // 0x08
		internal static LayoutCache current; // 0x10
		internal static readonly Rect kDummyRect; // 0x18
	
		// Nested types
		[VisibleToOtherModules] // 0x004DC2F8-0x004DC370
		internal sealed class LayoutCache // TypeDefIndex: 2268
		{
			// Fields
			[VisibleToOtherModules] // 0x004DCC20-0x004DCC98
			internal GUILayoutGroup topLevel; // 0x10
			internal GenericStack layoutGroups; // 0x18
			internal GUILayoutGroup windows; // 0x20
	
			// Constructors
			[VisibleToOtherModules] // 0x004DD548-0x004DD5C0
			internal LayoutCache(); // 0x00E56CE8-0x00E56DA8
		}
	
		// Constructors
		static GUILayoutUtility(); // 0x00E57AC8-0x00E57BD0
	
		// Methods
		private static Rect Internal_GetWindowRect(int windowID); // 0x00E56B0C-0x00E56BAC
		private static void Internal_MoveWindow(int windowID, Rect r); // 0x00E56BFC-0x00E56C98
		[VisibleToOtherModules] // 0x004DD4D0-0x004DD548
		internal static LayoutCache SelectIDList(int instanceID, bool isWindow); // 0x00E51F04-0x00E52074
		internal static void Begin(int instanceID); // 0x00E56DA8-0x00E56FC0
		internal static void BeginWindow(int windowID, GUIStyle style, GUILayoutOption[] options); // 0x00E52198-0x00E52464
		internal static void Layout(); // 0x00E52748-0x00E529B8
		internal static void LayoutFromEditorWindow(); // 0x00E573BC-0x00E575B4
		internal static void LayoutFreeGroup(GUILayoutGroup toplevel); // 0x00E56FF4-0x00E57168
		private static void LayoutSingleGroup(GUILayoutGroup i); // 0x00E57168-0x00E573BC
		public static Rect GetRect(GUIContent content, GUIStyle style, params /* 0x004DE178-0x004DE188 */ GUILayoutOption[] options); // 0x00E52FE4-0x00E53060
		private static Rect DoGetRect(GUIContent content, GUIStyle style, GUILayoutOption[] options); // 0x00E575B4-0x00E5793C
		private static void Internal_GetWindowRect_Injected(int windowID, out Rect ret); // 0x00E56BAC-0x00E56BFC
		private static void Internal_MoveWindow_Injected(int windowID, ref Rect r); // 0x00E56C98-0x00E56CE8
	}

	[Serializable]
	[NativeHeader] // 0x004DC370-0x004DC3A8
	public sealed class GUISettings // TypeDefIndex: 2269
	{
		// Fields
		[SerializeField] // 0x004DCC98-0x004DCCA8
		private bool m_DoubleClickSelectsWord; // 0x10
		[SerializeField] // 0x004DCCA8-0x004DCCB8
		private bool m_TripleClickSelectsLine; // 0x11
		[SerializeField] // 0x004DCCB8-0x004DCCC8
		private Color m_CursorColor; // 0x14
		[SerializeField] // 0x004DCCC8-0x004DCCD8
		private float m_CursorFlashSpeed; // 0x24
		[SerializeField] // 0x004DCCD8-0x004DCCE8
		private Color m_SelectionColor; // 0x28
	
		// Properties
		public bool doubleClickSelectsWord { get; } // 0x00E50860-0x00E50868 
		public bool tripleClickSelectsLine { get; } // 0x00E50924-0x00E5092C 
		public Color cursorColor { get; } // 0x00E58160-0x00E5816C 
		public float cursorFlashSpeed { get; } // 0x00E5816C-0x00E581B0 
		public Color selectionColor { get; } // 0x00E581B0-0x00E581BC 
	
		// Constructors
		public GUISettings(); // 0x00E580A8-0x00E5812C
	
		// Methods
		private static float Internal_GetCursorFlashSpeed(); // 0x00E5812C-0x00E58160
	}

	[Serializable]
	[AssetFileNameExtension] // 0x004DC3A8-0x004DC44C
	[ExecuteInEditMode] // 0x004DC3A8-0x004DC44C
	[RequiredByNativeCode] // 0x004DC3A8-0x004DC44C
	public sealed class GUISkin : ScriptableObject // TypeDefIndex: 2270
	{
		// Fields
		[SerializeField] // 0x004DCCE8-0x004DCCF8
		private Font m_Font; // 0x18
		[SerializeField] // 0x004DCCF8-0x004DCD08
		private GUIStyle m_box; // 0x20
		[SerializeField] // 0x004DCD08-0x004DCD18
		private GUIStyle m_button; // 0x28
		[SerializeField] // 0x004DCD18-0x004DCD28
		private GUIStyle m_toggle; // 0x30
		[SerializeField] // 0x004DCD28-0x004DCD38
		private GUIStyle m_label; // 0x38
		[SerializeField] // 0x004DCD38-0x004DCD48
		private GUIStyle m_textField; // 0x40
		[SerializeField] // 0x004DCD48-0x004DCD58
		private GUIStyle m_textArea; // 0x48
		[SerializeField] // 0x004DCD58-0x004DCD68
		private GUIStyle m_window; // 0x50
		[SerializeField] // 0x004DCD68-0x004DCD78
		private GUIStyle m_horizontalSlider; // 0x58
		[SerializeField] // 0x004DCD78-0x004DCD88
		private GUIStyle m_horizontalSliderThumb; // 0x60
		[SerializeField] // 0x004DCD88-0x004DCD98
		private GUIStyle m_verticalSlider; // 0x68
		[SerializeField] // 0x004DCD98-0x004DCDA8
		private GUIStyle m_verticalSliderThumb; // 0x70
		[SerializeField] // 0x004DCDA8-0x004DCDB8
		private GUIStyle m_horizontalScrollbar; // 0x78
		[SerializeField] // 0x004DCDB8-0x004DCDC8
		private GUIStyle m_horizontalScrollbarThumb; // 0x80
		[SerializeField] // 0x004DCDC8-0x004DCDD8
		private GUIStyle m_horizontalScrollbarLeftButton; // 0x88
		[SerializeField] // 0x004DCDD8-0x004DCDE8
		private GUIStyle m_horizontalScrollbarRightButton; // 0x90
		[SerializeField] // 0x004DCDE8-0x004DCDF8
		private GUIStyle m_verticalScrollbar; // 0x98
		[SerializeField] // 0x004DCDF8-0x004DCE08
		private GUIStyle m_verticalScrollbarThumb; // 0xA0
		[SerializeField] // 0x004DCE08-0x004DCE18
		private GUIStyle m_verticalScrollbarUpButton; // 0xA8
		[SerializeField] // 0x004DCE18-0x004DCE28
		private GUIStyle m_verticalScrollbarDownButton; // 0xB0
		[SerializeField] // 0x004DCE28-0x004DCE38
		private GUIStyle m_ScrollView; // 0xB8
		[SerializeField] // 0x004DCE38-0x004DCE48
		internal GUIStyle[] m_CustomStyles; // 0xC0
		[SerializeField] // 0x004DCE48-0x004DCE58
		private GUISettings m_Settings; // 0xC8
		internal static GUIStyle ms_Error; // 0x00
		private Dictionary<string, GUIStyle> m_Styles; // 0xD0
		internal static SkinChangedDelegate m_SkinChanged; // 0x08
		internal static GUISkin current; // 0x10
	
		// Properties
		public Font font { get; set; } // 0x00E50F80-0x00E50F88 0x00E58318-0x00E58400
		public GUIStyle box { get; set; } // 0x00E4EB94-0x00E4EB9C 0x00E58440-0x00E58448
		public GUIStyle label { get; set; } // 0x00E4E778-0x00E4E780 0x00E58448-0x00E58450
		public GUIStyle textField { get; set; } // 0x00E4F260-0x00E4F268 0x00E58450-0x00E58458
		public GUIStyle textArea { get; set; } // 0x00E58458-0x00E58460 0x00E58460-0x00E58468
		public GUIStyle button { get; set; } // 0x00E4EE30-0x00E4EE38 0x00E58468-0x00E58470
		public GUIStyle toggle { get; set; } // 0x00E58470-0x00E58478 0x00E58478-0x00E58480
		public GUIStyle window { get; set; } // 0x00E58480-0x00E58488 0x00E58488-0x00E58490
		public GUIStyle horizontalSlider { get; set; } // 0x00E58490-0x00E58498 0x00E58498-0x00E584A0
		public GUIStyle horizontalSliderThumb { get; set; } // 0x00E584A0-0x00E584A8 0x00E584A8-0x00E584B0
		public GUIStyle verticalSlider { get; set; } // 0x00E584B0-0x00E584B8 0x00E584B8-0x00E584C0
		public GUIStyle verticalSliderThumb { get; set; } // 0x00E584C0-0x00E584C8 0x00E584C8-0x00E584D0
		public GUIStyle horizontalScrollbar { get; set; } // 0x00E584D0-0x00E584D8 0x00E584D8-0x00E584E0
		public GUIStyle horizontalScrollbarThumb { get; set; } // 0x00E584E0-0x00E584E8 0x00E584E8-0x00E584F0
		public GUIStyle horizontalScrollbarLeftButton { get; set; } // 0x00E584F0-0x00E584F8 0x00E584F8-0x00E58500
		public GUIStyle horizontalScrollbarRightButton { get; set; } // 0x00E58500-0x00E58508 0x00E58508-0x00E58510
		public GUIStyle verticalScrollbar { get; set; } // 0x00E58510-0x00E58518 0x00E58518-0x00E58520
		public GUIStyle verticalScrollbarThumb { get; set; } // 0x00E58520-0x00E58528 0x00E58528-0x00E58530
		public GUIStyle verticalScrollbarUpButton { get; set; } // 0x00E58530-0x00E58538 0x00E58538-0x00E58540
		public GUIStyle verticalScrollbarDownButton { get; set; } // 0x00E58540-0x00E58548 0x00E58548-0x00E58550
		public GUIStyle scrollView { get; set; } // 0x00E58550-0x00E58558 0x00E58558-0x00E58560
		public GUIStyle[] customStyles { get; set; } // 0x00E58560-0x00E58568 0x00E58568-0x00E58570
		public GUISettings settings { get; } // 0x00E50858-0x00E50860 
		internal static GUIStyle error { get; } // 0x00E58570-0x00E5864C 
	
		// Nested types
		internal delegate void SkinChangedDelegate(); // TypeDefIndex: 2271; 0x00E59700-0x00E5991C
	
		// Constructors
		public GUISkin(); // 0x00E581BC-0x00E5823C
	
		// Methods
		internal void OnEnable(); // 0x00E5823C-0x00E58240
		internal static void CleanupRoots(); // 0x00E582C0-0x00E58318
		internal void Apply(); // 0x00E58240-0x00E582C0
		private void BuildStyleCache(); // 0x00E58734-0x00E592A4
		public GUIStyle GetStyle(string styleName); // 0x00E593AC-0x00E59670
		public GUIStyle FindStyle(string styleName); // 0x00E59670-0x00E59700
		internal void MakeCurrent(); // 0x00E4E528-0x00E4E5F0
		public IEnumerator GetEnumerator(); // 0x00E5991C-0x00E599CC
	}

	internal class GUIStateObjects // TypeDefIndex: 2272
	{
		// Fields
		private static Dictionary<int, object> s_StateCache; // 0x00
	
		// Constructors
		static GUIStateObjects(); // 0x00E59B2C-0x00E59BA0
	
		// Methods
		internal static object GetStateObject(Type t, int controlID); // 0x00E59A1C-0x00E59B2C
	}

	[Serializable]
	[NativeHeader] // 0x004DC44C-0x004DC484
	public sealed class GUIStyleState // TypeDefIndex: 2273
	{
		// Fields
		[NonSerialized]
		internal IntPtr m_Ptr; // 0x10
		private readonly GUIStyle m_SourceStyle; // 0x18
	
		// Properties
		[NativeProperty] // 0x004DE348-0x004DE388
		public Color textColor { set; } // 0x00E59354-0x00E593AC
	
		// Constructors
		public GUIStyleState(); // 0x00E5B5C8-0x00E5B614
		private GUIStyleState(GUIStyle sourceStyle, IntPtr source); // 0x00E5B648-0x00E5B680
	
		// Methods
		[FreeFunction] // 0x004DD5C0-0x004DD604
		private static IntPtr Init(); // 0x00E5B614-0x00E5B648
		[FreeFunction] // 0x004DD604-0x004DD64C
		private void Cleanup(); // 0x00E5B6D0-0x00E5B710
		internal static GUIStyleState GetGUIStyleState(GUIStyle sourceStyle, IntPtr source); // 0x00E5ABD4-0x00E5AC44
		~GUIStyleState(); // 0x00E5B710-0x00E5B7D0
		private void set_textColor_Injected(ref Color value); // 0x00E5B680-0x00E5B6D0
	}

	[Serializable]
	[NativeHeader] // 0x004DC484-0x004DC4F4
	[NativeHeader] // 0x004DC484-0x004DC4F4
	[RequiredByNativeCode] // 0x004DC484-0x004DC4F4
	public sealed class GUIStyle // TypeDefIndex: 2274
	{
		// Fields
		[NonSerialized]
		internal IntPtr m_Ptr; // 0x10
		[NonSerialized]
		private GUIStyleState m_Normal; // 0x18
		[NonSerialized]
		private GUIStyleState m_Hover; // 0x20
		[NonSerialized]
		private GUIStyleState m_Active; // 0x28
		[NonSerialized]
		private GUIStyleState m_Focused; // 0x30
		[NonSerialized]
		private GUIStyleState m_OnNormal; // 0x38
		[NonSerialized]
		private GUIStyleState m_OnHover; // 0x40
		[NonSerialized]
		private GUIStyleState m_OnActive; // 0x48
		[NonSerialized]
		private GUIStyleState m_OnFocused; // 0x50
		[NonSerialized]
		private RectOffset m_Border; // 0x58
		[NonSerialized]
		private RectOffset m_Padding; // 0x60
		[NonSerialized]
		private RectOffset m_Margin; // 0x68
		[NonSerialized]
		private RectOffset m_Overflow; // 0x70
		internal static bool showKeyboardFocus; // 0x00
		private static GUIStyle s_None; // 0x08
	
		// Properties
		[NativeProperty] // 0x004DE388-0x004DE3C8
		public string name { get; set; } // 0x00E53FF0-0x00E54030 0x00E586E4-0x00E58734
		[NativeProperty] // 0x004DE3C8-0x004DE408
		public Font font { get; } // 0x00E50F40-0x00E50F80 
		[NativeProperty] // 0x004DE408-0x004DE448
		public ImagePosition imagePosition { get; } // 0x00E59BE0-0x00E59C20 
		[NativeProperty] // 0x004DE448-0x004DE488
		public TextAnchor alignment { set; } // 0x00E59C20-0x00E59C70
		[NativeProperty] // 0x004DE488-0x004DE4C8
		public bool wordWrap { get; } // 0x00E59C70-0x00E59CB0 
		[NativeProperty] // 0x004DE4C8-0x004DE508
		public Vector2 contentOffset { get; set; } // 0x00E59CB0-0x00E59D08 0x00E59D58-0x00E59DAC
		[NativeProperty] // 0x004DE508-0x004DE548
		public float fixedWidth { get; } // 0x00E53674-0x00E536B4 
		[NativeProperty] // 0x004DE548-0x004DE588
		public float fixedHeight { get; } // 0x00E536F4-0x00E53734 
		[NativeProperty] // 0x004DE588-0x004DE5C8
		public bool stretchWidth { get; } // 0x00E536B4-0x00E536F4 
		[NativeProperty] // 0x004DE5C8-0x004DE608
		public bool stretchHeight { get; set; } // 0x00E53734-0x00E53774 0x00E592A4-0x00E592F4
		[NativeProperty] // 0x004DE608-0x004DE648
		public int fontSize { set; } // 0x00E59DFC-0x00E59E4C
		[NativeProperty] // 0x004DE648-0x004DE688
		public FontStyle fontStyle { set; } // 0x00E59E4C-0x00E59E9C
		[NativeProperty] // 0x004DE688-0x004DE6C8
		internal Vector2 Internal_clipOffset { set; } // 0x00E59E9C-0x00E59EF0
		public GUIStyleState normal { get; } // 0x00E592F4-0x00E59354 
		public RectOffset margin { get; } // 0x00E5332C-0x00E533DC 
		public RectOffset padding { get; } // 0x00E54DE0-0x00E54E90 
		public float lineHeight { [CompilerGenerated] /* 0x004DDB3C-0x004DDB4C */ get; } // 0x00E5AC44-0x00E5AD70 
		public static GUIStyle none { [CompilerGenerated] /* 0x004DDB4C-0x004DDB5C */ get; } // 0x00E52464-0x00E52504 
		public bool isHeightDependantOnWidth { [CompilerGenerated] /* 0x004DDB5C-0x004DDB6C */ get; } // 0x00E5793C-0x00E579EC 
	
		// Constructors
		public GUIStyle(); // 0x00E5864C-0x00E586E4
		static GUIStyle(); // 0x00E5B574-0x00E5B5C8
	
		// Methods
		[FreeFunction] // 0x004DD64C-0x004DD690
		private static IntPtr Internal_Create(GUIStyle self); // 0x00E59BA0-0x00E59BE0
		[FreeFunction] // 0x004DD690-0x004DD6D4
		private static void Internal_Destroy(IntPtr self); // 0x00E59F40-0x00E59F80
		[FreeFunction] // 0x004DD6D4-0x004DD71C
		private IntPtr GetStyleStatePtr(int idx); // 0x00E59F80-0x00E59FD0
		[FreeFunction] // 0x004DD71C-0x004DD760
		private IntPtr GetRectOffsetPtr(int idx); // 0x00E59FD0-0x00E5A020
		[FreeFunction] // 0x004DD760-0x004DD79C
		private static float Internal_GetLineHeight(IntPtr target); // 0x00E5A020-0x00E5A060
		[FreeFunction] // 0x004DD79C-0x004DD7E0
		private void Internal_Draw(Rect screenRect, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus); // 0x00E5A060-0x00E5A0F8
		[FreeFunction] // 0x004DD7E0-0x004DD824
		private void Internal_Draw2(Rect position, GUIContent content, int controlID, bool on); // 0x00E5A180-0x00E5A200
		[FreeFunction] // 0x004DD824-0x004DD868
		private void Internal_DrawCursor(Rect position, GUIContent content, int pos, Color cursorColor); // 0x00E5A270-0x00E5A2EC
		[FreeFunction] // 0x004DD868-0x004DD8AC
		private void Internal_DrawWithTextSelection(Rect screenRect, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus, bool drawSelectionAsComposition, int cursorFirst, int cursorLast, Color cursorColor, Color selectionColor); // 0x00E5A35C-0x00E5A438
		[FreeFunction] // 0x004DD8AC-0x004DD8F0
		internal Vector2 Internal_GetCursorPixelPosition(Rect position, GUIContent content, int cursorStringIndex); // 0x00E5A4F8-0x00E5A574
		[FreeFunction] // 0x004DD8F0-0x004DD934
		internal int Internal_GetCursorStringIndex(Rect position, GUIContent content, Vector2 cursorPixelPosition); // 0x00E5A5E4-0x00E5A654
		[FreeFunction] // 0x004DD934-0x004DD978
		internal string Internal_GetSelectedRenderedText(Rect localPosition, GUIContent mContent, int selectIndex, int cursorIndex); // 0x00E5A6BC-0x00E5A73C
		[FreeFunction] // 0x004DD978-0x004DD9BC
		internal Vector2 Internal_CalcSize(GUIContent content); // 0x00E5A7AC-0x00E5A80C
		[FreeFunction] // 0x004DD9BC-0x004DDA00
		internal Vector2 Internal_CalcSizeWithConstraints(GUIContent content, Vector2 maxSize); // 0x00E5A864-0x00E5A8D0
		[FreeFunction] // 0x004DDA00-0x004DDA44
		private float Internal_CalcHeight(GUIContent content, float width); // 0x00E5A938-0x00E5A998
		[FreeFunction] // 0x004DDA44-0x004DDA88
		private Vector2 Internal_CalcMinMaxWidth(GUIContent content); // 0x00E5A998-0x00E5A9F8
		[FreeFunction] // 0x004DDA88-0x004DDAC4
		internal static void SetMouseTooltip(string tooltip, Rect screenRect); // 0x00E51A98-0x00E51B34
		[FreeFunction] // 0x004DDAC4-0x004DDB00
		private static float Internal_GetCursorFlashOffset(); // 0x00E5AAA0-0x00E5AAD4
		[FreeFunction] // 0x004DDB00-0x004DDB3C
		internal static void SetDefaultFont(Font font); // 0x00E58400-0x00E58440
		~GUIStyle(); // 0x00E5AAD4-0x00E5ABD4
		public void Draw(Rect position, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus); // 0x00E51A28-0x00E51A3C
		public void Draw(Rect position, GUIContent content, int controlID); // 0x00E4ED3C-0x00E4ED50
		public void Draw(Rect position, GUIContent content, int controlID, bool on); // 0x00E50794-0x00E507A8
		public void Draw(Rect position, GUIContent content, int controlID, bool on, bool hover); // 0x00E51978-0x00E51A28
		private void Draw(Rect position, GUIContent content, int controlId, bool isHover, bool isActive, bool on, bool hasKeyboardFocus); // 0x00E5AD70-0x00E5AD94
		public void DrawCursor(Rect position, GUIContent content, int controlID, int character); // 0x00E5AD94-0x00E5AFF4
		internal void DrawWithTextSelection(Rect position, GUIContent content, bool isActive, bool hasKeyboardFocus, int firstSelectedCharacter, int lastSelectedCharacter, bool drawSelectionAsComposition, Color selectionColor); // 0x00E5AFF4-0x00E5B25C
		internal void DrawWithTextSelection(Rect position, GUIContent content, int controlID, int firstSelectedCharacter, int lastSelectedCharacter, bool drawSelectionAsComposition); // 0x00E5B25C-0x00E5B3EC
		public void DrawWithTextSelection(Rect position, GUIContent content, int controlID, int firstSelectedCharacter, int lastSelectedCharacter); // 0x00E5B3EC-0x00E5B3F4
		public Vector2 GetCursorPixelPosition(Rect position, GUIContent content, int cursorStringIndex); // 0x00E5B3F4-0x00E5B3F8
		public int GetCursorStringIndex(Rect position, GUIContent content, Vector2 cursorPixelPosition); // 0x00E5B3F8-0x00E5B3FC
		public Vector2 CalcSize(GUIContent content); // 0x00E5B3FC-0x00E5B400
		internal Vector2 CalcSizeWithConstraints(GUIContent content, Vector2 constraints); // 0x00E57AC4-0x00E57AC8
		public float CalcHeight(GUIContent content, float width); // 0x00E5B400-0x00E5B460
		public void CalcMinMaxWidth(GUIContent content, out float minWidth, out float maxWidth); // 0x00E5B460-0x00E5B48C
		public override string ToString(); // 0x00E5B48C-0x00E5B574
		private void get_contentOffset_Injected(out Vector2 ret); // 0x00E59D08-0x00E59D58
		private void set_contentOffset_Injected(ref Vector2 value); // 0x00E59DAC-0x00E59DFC
		private void set_Internal_clipOffset_Injected(ref Vector2 value); // 0x00E59EF0-0x00E59F40
		private void Internal_Draw_Injected(ref Rect screenRect, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus); // 0x00E5A0F8-0x00E5A180
		private void Internal_Draw2_Injected(ref Rect position, GUIContent content, int controlID, bool on); // 0x00E5A200-0x00E5A270
		private void Internal_DrawCursor_Injected(ref Rect position, GUIContent content, int pos, ref Color cursorColor); // 0x00E5A2EC-0x00E5A35C
		private void Internal_DrawWithTextSelection_Injected(ref Rect screenRect, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus, bool drawSelectionAsComposition, int cursorFirst, int cursorLast, ref Color cursorColor, ref Color selectionColor); // 0x00E5A438-0x00E5A4F8
		private void Internal_GetCursorPixelPosition_Injected(ref Rect position, GUIContent content, int cursorStringIndex, out Vector2 ret); // 0x00E5A574-0x00E5A5E4
		private int Internal_GetCursorStringIndex_Injected(ref Rect position, GUIContent content, ref Vector2 cursorPixelPosition); // 0x00E5A654-0x00E5A6BC
		private string Internal_GetSelectedRenderedText_Injected(ref Rect localPosition, GUIContent mContent, int selectIndex, int cursorIndex); // 0x00E5A73C-0x00E5A7AC
		private void Internal_CalcSize_Injected(GUIContent content, out Vector2 ret); // 0x00E5A80C-0x00E5A864
		private void Internal_CalcSizeWithConstraints_Injected(GUIContent content, ref Vector2 maxSize, out Vector2 ret); // 0x00E5A8D0-0x00E5A938
		private void Internal_CalcMinMaxWidth_Injected(GUIContent content, out Vector2 ret); // 0x00E5A9F8-0x00E5AA50
		private static void SetMouseTooltip_Injected(string tooltip, ref Rect screenRect); // 0x00E5AA50-0x00E5AAA0
	}

	public enum ImagePosition // TypeDefIndex: 2275
	{
		ImageLeft = 0,
		ImageAbove = 1,
		ImageOnly = 2,
		TextOnly = 3
	}

	[AttributeUsage] // 0x004DC4F4-0x004DC508
	public class GUITargetAttribute : Attribute // TypeDefIndex: 2276
	{
		// Fields
		internal int displayMask; // 0x10
	
		// Methods
		[RequiredByNativeCode] // 0x004DDB6C-0x004DDB7C
		private static int GetGUITargetAttrValue(Type klass, string methodName); // 0x00E5B7D0-0x00E5B954
	}

	[NativeHeader] // 0x004DC508-0x004DC5F8
	[NativeHeader] // 0x004DC508-0x004DC5F8
	[NativeHeader] // 0x004DC508-0x004DC5F8
	[NativeHeader] // 0x004DC508-0x004DC5F8
	[NativeHeader] // 0x004DC508-0x004DC5F8
	[NativeHeader] // 0x004DC508-0x004DC5F8
	public class GUIUtility // TypeDefIndex: 2277
	{
		// Fields
		[VisibleToOtherModules] // 0x004DCE58-0x004DCED0
		internal static int s_SkinMode; // 0x00
		[VisibleToOtherModules] // 0x004DCED0-0x004DCF48
		internal static int s_OriginalID; // 0x04
		[VisibleToOtherModules] // 0x004DCF48-0x004DCFC0
		internal static Action takeCapture; // 0x08
		[VisibleToOtherModules] // 0x004DCFC0-0x004DD038
		internal static Action releaseCapture; // 0x10
		[VisibleToOtherModules] // 0x004DD038-0x004DD0B0
		internal static Func<int, IntPtr, bool> processEvent; // 0x18
		[VisibleToOtherModules] // 0x004DD0B0-0x004DD128
		internal static Func<Exception, bool> endContainerGUIFromException; // 0x20
		[VisibleToOtherModules] // 0x004DD128-0x004DD1A0
		internal static Action guiChanged; // 0x28
		[CompilerGenerated] // 0x004DD1A0-0x004DD1DC
		[DebuggerBrowsable] // 0x004DD1A0-0x004DD1DC
		private static bool _guiIsExiting_k__BackingField; // 0x30
	
		// Properties
		[NativeProperty] // 0x004DE6C8-0x004DE708
		internal static float pixelsPerPoint { [VisibleToOtherModules] /* 0x004DDB7C-0x004DDBF4 */ get; } // 0x00E56FC0-0x00E56FF4 
		[NativeProperty] // 0x004DE708-0x004DE748
		internal static int guiDepth { [VisibleToOtherModules] /* 0x004DDBF4-0x004DDC6C */ get; } // 0x00E5B954-0x00E5B988 
		[StaticAccessor] // 0x004DE748-0x004DE784
		internal static bool textFieldInput { set; } // 0x00E514B0-0x00E514F0
		public static string systemCopyBuffer { [FreeFunction] /* 0x004DDC6C-0x004DDCA4 */ get; [FreeFunction] /* 0x004DDCA4-0x004DDCDC */ set; } // 0x00E5B988-0x00E5B9BC 0x00E5B9BC-0x00E5B9FC
		[StaticAccessor] // 0x004DE784-0x004DE7C0
		internal static string compositionString { [VisibleToOtherModules] /* 0x004DDD18-0x004DDD90 */ get; } // 0x00E50FC0-0x00E50FF4 
		[StaticAccessor] // 0x004DE7C0-0x004DE7FC
		internal static Vector2 compositionCursorPos { [VisibleToOtherModules] /* 0x004DDD90-0x004DDE08 */ set; } // 0x00E5BA54-0x00E5BA98
		internal static bool guiIsExiting { [CompilerGenerated] /* 0x004DDE18-0x004DDE28 */ set; } // 0x00E5BC98-0x00E5BCF0
		public static int hotControl { get; set; } // 0x00E509CC-0x00E50A00 0x00E506E0-0x00E50720
		public static int keyboardControl { get; set; } // 0x00E50720-0x00E50754 0x00E50754-0x00E50794
	
		// Methods
		[StaticAccessor] // 0x004DDCDC-0x004DDD18
		public static int GetControlID(int hint, FocusType focusType, Rect rect); // 0x00E4EF00-0x00E4EF68
		private static int Internal_GetHotControl(); // 0x00E5BAD8-0x00E5BB0C
		private static int Internal_GetKeyboardControl(); // 0x00E5BB0C-0x00E5BB40
		private static void Internal_SetHotControl(int value); // 0x00E5BB40-0x00E5BB80
		private static void Internal_SetKeyboardControl(int value); // 0x00E5BB80-0x00E5BBC0
		private static object Internal_GetDefaultSkin(int skinMode); // 0x00E5BBC0-0x00E5BC00
		private static void Internal_ExitGUI(); // 0x00E5BC00-0x00E5BC34
		[RequiredByNativeCode] // 0x004DDE08-0x004DDE18
		private static void MarkGUIChanged(); // 0x00E5BC34-0x00E5BC98
		public static int GetControlID(FocusType focus, Rect position); // 0x00E4F250-0x00E4F260
		public static int GetControlID(int hint, FocusType focus); // 0x00E4ED0C-0x00E4ED3C
		public static object GetStateObject(Type t, int controlID); // 0x00E4F810-0x00E4F884
		[RequiredByNativeCode] // 0x004DDE28-0x004DDE38
		internal static void TakeCapture(); // 0x00E5BCF0-0x00E5BD54
		[RequiredByNativeCode] // 0x004DDE38-0x004DDE48
		internal static void RemoveCapture(); // 0x00E5BD54-0x00E5BDB8
		internal static GUISkin GetDefaultSkin(); // 0x00E4E494-0x00E4E528
		[RequiredByNativeCode] // 0x004DDE48-0x004DDE58
		internal static bool ProcessEvent(int instanceID, IntPtr nativeEventPtr); // 0x00E5BDB8-0x00E5BE40
		[RequiredByNativeCode] // 0x004DDE58-0x004DDE68
		internal static void BeginGUI(int skinMode, int instanceID, int useGUILayout); // 0x00E5BE40-0x00E5BEEC
		[RequiredByNativeCode] // 0x004DDE68-0x004DDE78
		internal static void EndGUI(int layoutType); // 0x00E5BFC4-0x00E5C1D4
		[RequiredByNativeCode] // 0x004DDE78-0x004DDE88
		internal static bool EndGUIFromException(Exception exception); // 0x00E5C1D4-0x00E5C218
		[RequiredByNativeCode] // 0x004DDE88-0x004DDE98
		internal static bool EndContainerGUIFromException(Exception exception); // 0x00E5C21C-0x00E5C290
		[VisibleToOtherModules] // 0x004DDE98-0x004DDF10
		internal static void ResetGlobalState(); // 0x00E5BEEC-0x00E5BFC4
		[VisibleToOtherModules] // 0x004DDF10-0x004DDF88
		internal static bool IsExitGUIException(Exception exception); // 0x00E5C290-0x00E5C310
		[VisibleToOtherModules] // 0x004DDF88-0x004DE000
		internal static bool ShouldRethrowException(Exception exception); // 0x00E5C218-0x00E5C21C
		internal static void CheckOnGUI(); // 0x00E4E2CC-0x00E4E374
		private static int GetControlID_Injected(int hint, FocusType focusType, ref Rect rect); // 0x00E5B9FC-0x00E5BA54
		private static void set_compositionCursorPos_Injected(ref Vector2 value); // 0x00E5BA98-0x00E5BAD8
	}

	public sealed class ExitGUIException : Exception // TypeDefIndex: 2278
	{
	}

	[VisibleToOtherModules] // 0x004DC5F8-0x004DC670
	internal class GUILayoutEntry // TypeDefIndex: 2279
	{
		// Fields
		public float minWidth; // 0x10
		public float maxWidth; // 0x14
		public float minHeight; // 0x18
		public float maxHeight; // 0x1C
		public Rect rect; // 0x20
		public int stretchWidth; // 0x30
		public int stretchHeight; // 0x34
		public bool consideredForMargin; // 0x38
		private GUIStyle m_Style; // 0x40
		internal static Rect kDummyRect; // 0x00
		protected static int indent; // 0x10
	
		// Properties
		public GUIStyle style { get; set; } // 0x00E532FC-0x00E53304 0x00E531C8-0x00E531D8
		public virtual int marginLeft { [CompilerGenerated] /* 0x004DE000-0x004DE010 */ get; } // 0x00E53304-0x00E5332C 
		public virtual int marginRight { [CompilerGenerated] /* 0x004DE010-0x004DE020 */ get; } // 0x00E533DC-0x00E53404 
		public virtual int marginTop { [CompilerGenerated] /* 0x004DE020-0x004DE030 */ get; } // 0x00E53404-0x00E5342C 
		public virtual int marginBottom { [CompilerGenerated] /* 0x004DE030-0x004DE040 */ get; } // 0x00E5342C-0x00E53454 
		public int marginHorizontal { [CompilerGenerated] /* 0x004DE040-0x004DE050 */ get; } // 0x00E53454-0x00E53494 
		public int marginVertical { [CompilerGenerated] /* 0x004DE050-0x004DE060 */ get; } // 0x00E53494-0x00E534D4 
	
		// Constructors
		public GUILayoutEntry(float _minWidth, float _maxWidth, float _minHeight, float _maxHeight, GUIStyle _style); // 0x00E5309C-0x00E531C8
		public GUILayoutEntry(float _minWidth, float _maxWidth, float _minHeight, float _maxHeight, GUIStyle _style, GUILayoutOption[] options); // 0x00E531D8-0x00E532FC
		static GUILayoutEntry(); // 0x00E54030-0x00E540B8
	
		// Methods
		public virtual void CalcWidth(); // 0x00E534D4-0x00E534D8
		public virtual void CalcHeight(); // 0x00E534D8-0x00E534DC
		public virtual void SetHorizontal(float x, float width); // 0x00E534DC-0x00E5351C
		public virtual void SetVertical(float y, float height); // 0x00E5351C-0x00E5355C
		protected virtual void ApplyStyleSettings(GUIStyle style); // 0x00E5355C-0x00E53674
		public virtual void ApplyOptions(GUILayoutOption[] options); // 0x00E53774-0x00E53A50
		public override string ToString(); // 0x00E53A50-0x00E53FF0
	}

	internal sealed class GUIWordWrapSizer : GUILayoutEntry // TypeDefIndex: 2280
	{
		// Fields
		private readonly GUIContent m_Content; // 0x48
		private readonly float m_ForcedMinHeight; // 0x50
		private readonly float m_ForcedMaxHeight; // 0x54
	
		// Constructors
		public GUIWordWrapSizer(GUIStyle style, GUIContent content, GUILayoutOption[] options); // 0x00E579EC-0x00E57AC4
	
		// Methods
		public override void CalcWidth(); // 0x00E5C310-0x00E5C3D4
		public override void CalcHeight(); // 0x00E5C3D4-0x00E5C480
	}

	[VisibleToOtherModules] // 0x004DC670-0x004DC6E8
	internal class GUILayoutGroup : GUILayoutEntry // TypeDefIndex: 2281
	{
		// Fields
		public List<GUILayoutEntry> entries; // 0x48
		public bool isVertical; // 0x50
		public bool resetCoords; // 0x51
		public float spacing; // 0x54
		public bool sameSize; // 0x58
		public bool isWindow; // 0x59
		public int windowID; // 0x5C
		private int m_Cursor; // 0x60
		protected int m_StretchableCountX; // 0x64
		protected int m_StretchableCountY; // 0x68
		protected bool m_UserSpecifiedWidth; // 0x6C
		protected bool m_UserSpecifiedHeight; // 0x6D
		protected float m_ChildMinWidth; // 0x70
		protected float m_ChildMaxWidth; // 0x74
		protected float m_ChildMinHeight; // 0x78
		protected float m_ChildMaxHeight; // 0x7C
		protected int m_MarginLeft; // 0x80
		protected int m_MarginRight; // 0x84
		protected int m_MarginTop; // 0x88
		protected int m_MarginBottom; // 0x8C
	
		// Properties
		public override int marginLeft { [CompilerGenerated] /* 0x004DE060-0x004DE070 */ get; } // 0x00E541B0-0x00E541B8 
		public override int marginRight { [CompilerGenerated] /* 0x004DE070-0x004DE080 */ get; } // 0x00E541B8-0x00E541C0 
		public override int marginTop { [CompilerGenerated] /* 0x004DE080-0x004DE090 */ get; } // 0x00E541C0-0x00E541C8 
		public override int marginBottom { [CompilerGenerated] /* 0x004DE090-0x004DE0A0 */ get; } // 0x00E541C8-0x00E541D0 
	
		// Constructors
		public GUILayoutGroup(); // 0x00E540B8-0x00E541B0
	
		// Methods
		public override void ApplyOptions(GUILayoutOption[] options); // 0x00E541D0-0x00E54308
		protected override void ApplyStyleSettings(GUIStyle style); // 0x00E54308-0x00E54388
		public void ResetCursor(); // 0x00E54388-0x00E54390
		public GUILayoutEntry GetNext(); // 0x00E54390-0x00E54648
		public void Add(GUILayoutEntry e); // 0x00E54648-0x00E546B0
		public override void CalcWidth(); // 0x00E546B0-0x00E54DE0
		public override void SetHorizontal(float x, float width); // 0x00E54E90-0x00E557B8
		public override void CalcHeight(); // 0x00E557B8-0x00E55E7C
		public override void SetVertical(float y, float height); // 0x00E55E7C-0x00E5679C
		public override string ToString(); // 0x00E5679C-0x00E56B0C
	}

	internal sealed class GUIScrollGroup : GUILayoutGroup // TypeDefIndex: 2282
	{
		// Fields
		public float calcMinWidth; // 0x90
		public float calcMaxWidth; // 0x94
		public float calcMinHeight; // 0x98
		public float calcMaxHeight; // 0x9C
		public float clientWidth; // 0xA0
		public float clientHeight; // 0xA4
		public bool allowHorizontalScroll; // 0xA8
		public bool allowVerticalScroll; // 0xA9
		public bool needsHorizontalScrollbar; // 0xAA
		public bool needsVerticalScrollbar; // 0xAB
		public GUIStyle horizontalScrollbar; // 0xB0
		public GUIStyle verticalScrollbar; // 0xB8
	
		// Constructors
		[RequiredByNativeCode] // 0x004DE0A0-0x004DE0B0
		public GUIScrollGroup(); // 0x00E57BD0-0x00E57BDC
	
		// Methods
		public override void CalcWidth(); // 0x00E57BDC-0x00E57C60
		public override void SetHorizontal(float x, float width); // 0x00E57C60-0x00E57D90
		public override void CalcHeight(); // 0x00E57D90-0x00E57E9C
		public override void SetVertical(float y, float height); // 0x00E57E9C-0x00E580A8
	}

	internal class ScrollViewState // TypeDefIndex: 2283
	{
		// Constructors
		[RequiredByNativeCode] // 0x004DE0B0-0x004DE0C0
		public ScrollViewState(); // 0x00E5C480-0x00E5C488
	}

	internal class SliderState // TypeDefIndex: 2284
	{
		// Constructors
		[RequiredByNativeCode] // 0x004DE0C0-0x004DE0D0
		public SliderState(); // 0x00E5C488-0x00E5C490
	}

	public class TextEditor // TypeDefIndex: 2285
	{
		// Fields
		public TouchScreenKeyboard keyboardOnScreen; // 0x10
		public int controlID; // 0x18
		public GUIStyle style; // 0x20
		public bool multiline; // 0x28
		public bool hasHorizontalCursorPos; // 0x29
		public bool isPasswordField; // 0x2A
		[VisibleToOtherModules] // 0x004DD1DC-0x004DD254
		internal bool m_HasFocus; // 0x2B
		public Vector2 scrollOffset; // 0x2C
		private GUIContent m_Content; // 0x38
		private Rect m_Position; // 0x40
		private int m_CursorIndex; // 0x50
		private int m_SelectIndex; // 0x54
		private bool m_RevealCursor; // 0x58
		public Vector2 graphicalCursorPos; // 0x5C
		public Vector2 graphicalSelectCursorPos; // 0x64
		private bool m_MouseDragSelectsWholeWords; // 0x6C
		private int m_DblClickInitPos; // 0x70
		private DblClickSnapping m_DblClickSnap; // 0x74
		private bool m_bJustSelected; // 0x75
		private int m_iAltCursorPos; // 0x78
		private string oldText; // 0x80
		private int oldPos; // 0x88
		private int oldSelectPos; // 0x8C
		private static Dictionary<Event, TextEditOp> s_Keyactions; // 0x00
	
		// Properties
		[Obsolete] // 0x004DE7FC-0x004DE838
		public GUIContent content { get; set; } // 0x00E5C574-0x00E5C57C 0x00E5C57C-0x00E5C584
		public string text { get; set; } // 0x00E50F20-0x00E50F40 0x00E4F884-0x00E4F910
		public Rect position { get; set; } // 0x00E5C5C8-0x00E5C5D4 0x00E4F93C-0x00E4F9C0
		internal virtual Rect localPosition { [VisibleToOtherModules] /* 0x004DE0E0-0x004DE158 */ get; } // 0x00E5CA54-0x00E5CA60 
		public int cursorIndex { get; set; } // 0x00E5CA60-0x00E5CA68 0x00E5CA68-0x00E5CAD0
		public int selectIndex { get; set; } // 0x00E5CAD0-0x00E5CAD8 0x00E5CAD8-0x00E5CB38
		public bool hasSelection { get; } // 0x00E5D7A0-0x00E5D7B0 
	
		// Nested types
		public enum DblClickSnapping : byte // TypeDefIndex: 2286
		{
			WORDS = 0,
			PARAGRAPHS = 1
		}
	
		private enum CharacterType // TypeDefIndex: 2287
		{
			LetterLike = 0,
			Symbol = 1,
			Symbol2 = 2,
			WhiteSpace = 3
		}
	
		private enum Direction // TypeDefIndex: 2288
		{
			Forward = 0,
			Backward = 1
		}
	
		private enum TextEditOp // TypeDefIndex: 2289
		{
			MoveLeft = 0,
			MoveRight = 1,
			MoveUp = 2,
			MoveDown = 3,
			MoveLineStart = 4,
			MoveLineEnd = 5,
			MoveTextStart = 6,
			MoveTextEnd = 7,
			MovePageUp = 8,
			MovePageDown = 9,
			MoveGraphicalLineStart = 10,
			MoveGraphicalLineEnd = 11,
			MoveWordLeft = 12,
			MoveWordRight = 13,
			MoveParagraphForward = 14,
			MoveParagraphBackward = 15,
			MoveToStartOfNextWord = 16,
			MoveToEndOfPreviousWord = 17,
			SelectLeft = 18,
			SelectRight = 19,
			SelectUp = 20,
			SelectDown = 21,
			SelectTextStart = 22,
			SelectTextEnd = 23,
			SelectPageUp = 24,
			SelectPageDown = 25,
			ExpandSelectGraphicalLineStart = 26,
			ExpandSelectGraphicalLineEnd = 27,
			SelectGraphicalLineStart = 28,
			SelectGraphicalLineEnd = 29,
			SelectWordLeft = 30,
			SelectWordRight = 31,
			SelectToEndOfPreviousWord = 32,
			SelectToStartOfNextWord = 33,
			SelectParagraphBackward = 34,
			SelectParagraphForward = 35,
			Delete = 36,
			Backspace = 37,
			DeleteWordBack = 38,
			DeleteWordForward = 39,
			DeleteLineBack = 40,
			Cut = 41,
			Copy = 42,
			Paste = 43,
			SelectAll = 44,
			SelectNone = 45,
			ScrollStart = 46,
			ScrollEnd = 47,
			ScrollPageUp = 48,
			ScrollPageDown = 49
		}
	
		// Constructors
		[RequiredByNativeCode] // 0x004DE0D0-0x004DE0E0
		public TextEditor(); // 0x00E5C490-0x00E5C574
	
		// Methods
		private void ClearCursorPos(); // 0x00E5CB38-0x00E5CB48
		public void OnFocus(); // 0x00E5CB48-0x00E5CB98
		public void OnLostFocus(); // 0x00E5CBEC-0x00E5CC5C
		private void GrabGraphicalCursorPos(); // 0x00E5CC5C-0x00E5CCE4
		public bool HandleKeyEvent(Event e); // 0x00E50D80-0x00E50F20
		public bool DeleteLineBack(); // 0x00E5D6C0-0x00E5D7A0
		public bool DeleteWordBack(); // 0x00E5D8CC-0x00E5D96C
		public bool DeleteWordForward(); // 0x00E5DA38-0x00E5DABC
		public bool Delete(); // 0x00E5DC78-0x00E5DD0C
		public bool Backspace(); // 0x00E5DDE8-0x00E5DE98
		public void SelectAll(); // 0x00E5CB98-0x00E5CBEC
		public void SelectNone(); // 0x00E5DF58-0x00E5DF88
		public bool DeleteSelection(); // 0x00E5D7B0-0x00E5D8CC
		public void ReplaceSelection(string replace); // 0x00E50FF4-0x00E51080
		public void Insert(char c); // 0x00E50F88-0x00E50FC0
		public void MoveRight(); // 0x00E5DF88-0x00E5E004
		public void MoveLeft(); // 0x00E5E004-0x00E5E06C
		public void MoveUp(); // 0x00E5E06C-0x00E5E120
		public void MoveDown(); // 0x00E5E120-0x00E5E204
		public void MoveLineStart(); // 0x00E5E204-0x00E5E298
		public void MoveLineEnd(); // 0x00E5E298-0x00E5E34C
		public void MoveGraphicalLineStart(); // 0x00E5E34C-0x00E5E39C
		public void MoveGraphicalLineEnd(); // 0x00E5E428-0x00E5E478
		public void MoveTextStart(); // 0x00E5E510-0x00E5E53C
		public void MoveTextEnd(); // 0x00E5E53C-0x00E5E588
		private int IndexOfEndOfLine(int startIndex); // 0x00E5E588-0x00E5E5EC
		public void MoveParagraphForward(); // 0x00E5E5EC-0x00E5E67C
		public void MoveParagraphBackward(); // 0x00E5E67C-0x00E5E714
		public void MoveCursorToPosition(Vector2 cursorPosition); // 0x00E507A8-0x00E50858
		protected internal void MoveCursorToPosition_Internal(Vector2 cursorPosition, bool shift); // 0x00E5E714-0x00E5E844
		public void SelectToPosition(Vector2 cursorPosition); // 0x00E50A00-0x00E50D80
		public void SelectLeft(); // 0x00E5E960-0x00E5E9BC
		public void SelectRight(); // 0x00E5E9BC-0x00E5EA18
		public void SelectUp(); // 0x00E5EA18-0x00E5EA80
		public void SelectDown(); // 0x00E5EA80-0x00E5EB04
		public void SelectTextEnd(); // 0x00E5EB04-0x00E5EB30
		public void SelectTextStart(); // 0x00E5EB30-0x00E5EB38
		public void MouseDragSelectsWholeWords(bool on); // 0x00E50910-0x00E50924
		public void DblClickSnap(DblClickSnapping snapping); // 0x00E50908-0x00E50910
		private int GetGraphicalLineStart(int p); // 0x00E5E39C-0x00E5E428
		private int GetGraphicalLineEnd(int p); // 0x00E5E478-0x00E5E510
		private int FindNextSeperator(int startPos); // 0x00E5EB38-0x00E5EBDC
		private int FindPrevSeperator(int startPos); // 0x00E5ECE0-0x00E5ED80
		public void MoveWordRight(); // 0x00E5ED80-0x00E5EDEC
		public void MoveToStartOfNextWord(); // 0x00E5EDEC-0x00E5EE50
		public void MoveToEndOfPreviousWord(); // 0x00E5EE50-0x00E5EEB4
		public void SelectToStartOfNextWord(); // 0x00E5EEB4-0x00E5EEEC
		public void SelectToEndOfPreviousWord(); // 0x00E5EEEC-0x00E5EF24
		private CharacterType ClassifyChar(int index); // 0x00E5EBDC-0x00E5ECE0
		public int FindStartOfNextWord(int p); // 0x00E5DABC-0x00E5DC78
		private int FindEndOfPreviousWord(int p); // 0x00E5D96C-0x00E5DA38
		public void MoveWordLeft(); // 0x00E5EF24-0x00E5EF7C
		public void SelectWordRight(); // 0x00E5EF7C-0x00E5EFF4
		public void SelectWordLeft(); // 0x00E5EFF4-0x00E5F06C
		public void ExpandSelectGraphicalLineStart(); // 0x00E5F06C-0x00E5F0D4
		public void ExpandSelectGraphicalLineEnd(); // 0x00E5F0D4-0x00E5F13C
		public void SelectGraphicalLineStart(); // 0x00E5F13C-0x00E5F174
		public void SelectGraphicalLineEnd(); // 0x00E5F174-0x00E5F1AC
		public void SelectParagraphForward(); // 0x00E5F1AC-0x00E5F248
		public void SelectParagraphBackward(); // 0x00E5F248-0x00E5F304
		public void SelectCurrentWord(); // 0x00E50868-0x00E50908
		private int FindEndOfClassification(int p, Direction dir); // 0x00E5E844-0x00E5E960
		public void SelectCurrentParagraph(); // 0x00E5092C-0x00E509CC
		public void UpdateScrollOffsetIfNeeded(Event evt); // 0x00E5063C-0x00E506E0
		[VisibleToOtherModules] // 0x004DE158-0x004DE168
		internal void UpdateScrollOffset(); // 0x00E5C5D4-0x00E5CA54
		public void DrawCursor(string newText); // 0x00E51080-0x00E514B0
		private bool PerformOperation(TextEditOp operation); // 0x00E5D344-0x00E5D6C0
		public void SaveBackup(); // 0x00E4F910-0x00E4F93C
		public bool Cut(); // 0x00E5F304-0x00E5F344
		public void Copy(); // 0x00E5F344-0x00E5F3D8
		private static string ReplaceNewlinesWithSpaces(string value); // 0x00E5F484-0x00E5F518
		public bool Paste(); // 0x00E5F3D8-0x00E5F484
		private static void MapKey(string key, TextEditOp action); // 0x00E5F518-0x00E5F5A4
		private void InitKeyActions(); // 0x00E5CCE4-0x00E5D344
		public void DetectFocusChange(); // 0x00E4F9C0-0x00E4F9CC
		internal virtual void OnDetectFocusChange(); // 0x00E5F5A4-0x00E5F654
		internal virtual void OnCursorIndexChange(); // 0x00E5F654-0x00E5F658
		internal virtual void OnSelectIndexChange(); // 0x00E5F658-0x00E5F65C
		private void ClampTextIndex(ref int index); // 0x00E5F65C-0x00E5F700
		private void EnsureValidCodePointIndex(ref int index); // 0x00E5C584-0x00E5C5C8
		private bool IsValidCodePointIndex(int index); // 0x00E5F700-0x00E607D4
		private int PreviousCodePointIndex(int index); // 0x00E5DE98-0x00E5DF58
		private int NextCodePointIndex(int index); // 0x00E5DD0C-0x00E5DDE8
	}

	[NativeHeader] // 0x004DFA10-0x004DFA5C
	public static class ImageConversion // TypeDefIndex: 2291
	{
		// Extension methods
		[NativeMethod] // 0x004DFA5C-0x004DFAB0
		public static byte[] EncodeToPNG(this Texture2D tex); // 0x00FB9A70-0x00FB9AB0
		[NativeMethod] // 0x004DFAB0-0x004DFB08
		public static bool LoadImage([NotNull] /* 0x004DFB18-0x004DFB28 */ this Texture2D tex, byte[] data, bool markNonReadable); // 0x00FB9AB0-0x00FB9B08
		public static bool LoadImage(this Texture2D tex, byte[] data); // 0x00FB9B08-0x00FB9B5C
	}

	public enum TouchPhase // TypeDefIndex: 2293
	{
		Began = 0,
		Moved = 1,
		Stationary = 2,
		Ended = 3,
		Canceled = 4
	}

	public enum IMECompositionMode // TypeDefIndex: 2294
	{
		Auto = 0,
		On = 1,
		Off = 2
	}

	public enum TouchType // TypeDefIndex: 2295
	{
		Direct = 0,
		Indirect = 1,
		Stylus = 2
	}

	[NativeHeader] // 0x004E0CE4-0x004E0D1C
	public struct Touch // TypeDefIndex: 2296
	{
		// Fields
		private int m_FingerId; // 0x00
		private Vector2 m_Position; // 0x04
		private Vector2 m_RawPosition; // 0x0C
		private Vector2 m_PositionDelta; // 0x14
		private float m_TimeDelta; // 0x1C
		private int m_TapCount; // 0x20
		private TouchPhase m_Phase; // 0x24
		private TouchType m_Type; // 0x28
		private float m_Pressure; // 0x2C
		private float m_maximumPossiblePressure; // 0x30
		private float m_Radius; // 0x34
		private float m_RadiusVariance; // 0x38
		private float m_AltitudeAngle; // 0x3C
		private float m_AzimuthAngle; // 0x40
	
		// Properties
		public int fingerId { get; } // 0x00597878-0x00597880 
		public Vector2 position { get; } // 0x00597880-0x00597888 
		public Vector2 deltaPosition { get; } // 0x00597888-0x00597890 
		public int tapCount { get; } // 0x00597890-0x00597898 
		public TouchPhase phase { get; } // 0x00597898-0x005978A0 
		public TouchType type { get; } // 0x005978A0-0x005978A8 
	}

	[NativeHeader] // 0x004E0D1C-0x004E0D54
	internal class CameraRaycastHelper // TypeDefIndex: 2297
	{
		// Methods
		[FreeFunction] // 0x004E0D8C-0x004E0DC4
		internal static GameObject RaycastTry(Camera cam, Ray ray, float distance, int layerMask); // 0x00FAE438-0x00FAE4A0
		[FreeFunction] // 0x004E0DC4-0x004E0DFC
		internal static GameObject RaycastTry2D(Camera cam, Ray ray, float distance, int layerMask); // 0x00FAE508-0x00FAE570
		private static GameObject RaycastTry_Injected(Camera cam, ref Ray ray, float distance, int layerMask); // 0x00FAE4A0-0x00FAE508
		private static GameObject RaycastTry2D_Injected(Camera cam, ref Ray ray, float distance, int layerMask); // 0x00FAE570-0x00FAE5D8
	}

	[NativeHeader] // 0x004E0D54-0x004E0D8C
	public class Input // TypeDefIndex: 2298
	{
		// Properties
		public static bool anyKeyDown { get; } // 0x00FAE9A4-0x00FAE9D8 
		public static string inputString { get; } // 0x00FAE9D8-0x00FAEA0C 
		public static Vector3 mousePosition { get; } // 0x00FAEA0C-0x00FAEA64 
		public static Vector2 mouseScrollDelta { get; } // 0x00FAEAA4-0x00FAEAEC 
		public static IMECompositionMode imeCompositionMode { get; set; } // 0x00FAEB2C-0x00FAEB60 0x00FAEB60-0x00FAEBA0
		public static string compositionString { get; } // 0x00FAEBA0-0x00FAEBD4 
		public static Vector2 compositionCursorPos { get; set; } // 0x00FAEBD4-0x00FAEC1C 0x00FAEC5C-0x00FAECA0
		public static bool mousePresent { [FreeFunction] /* 0x004E0E9C-0x004E0ED4 */ get; } // 0x00FAECE0-0x00FAED14 
		public static int touchCount { [FreeFunction] /* 0x004E0ED4-0x004E0F0C */ get; } // 0x00FAED14-0x00FAED48 
		public static bool touchSupported { [FreeFunction] /* 0x004E0F0C-0x004E0F44 */ get; } // 0x00FAED48-0x00FAED7C 
		public static Vector3 acceleration { [FreeFunction] /* 0x004E0F44-0x004E0F7C */ get; } // 0x00FAED7C-0x00FAEDD4 
		public static Touch[] touches { get; } // 0x00FAEE14-0x00FAEF5C 
	
		// Methods
		[NativeThrows] // 0x004E0DFC-0x004E0E0C
		private static bool GetKeyInt(KeyCode key); // 0x00FAE5D8-0x00FAE618
		[NativeThrows] // 0x004E0E0C-0x004E0E1C
		private static bool GetKeyUpInt(KeyCode key); // 0x00FAE618-0x00FAE658
		[NativeThrows] // 0x004E0E1C-0x004E0E2C
		private static bool GetKeyDownInt(KeyCode key); // 0x00FAE658-0x00FAE698
		[NativeThrows] // 0x004E0E2C-0x004E0E3C
		public static float GetAxis(string axisName); // 0x00FAE698-0x00FAE6D8
		[NativeThrows] // 0x004E0E3C-0x004E0E4C
		public static float GetAxisRaw(string axisName); // 0x00FAE6D8-0x00FAE718
		[NativeThrows] // 0x004E0E4C-0x004E0E5C
		public static bool GetButtonDown(string buttonName); // 0x00FAE718-0x00FAE758
		[NativeThrows] // 0x004E0E5C-0x004E0E6C
		public static bool GetMouseButton(int button); // 0x00FAE758-0x00FAE798
		[NativeThrows] // 0x004E0E6C-0x004E0E7C
		public static bool GetMouseButtonDown(int button); // 0x00FAE798-0x00FAE7D8
		[NativeThrows] // 0x004E0E7C-0x004E0E8C
		public static bool GetMouseButtonUp(int button); // 0x00FAE7D8-0x00FAE818
		[NativeThrows] // 0x004E0E8C-0x004E0E9C
		public static Touch GetTouch(int index); // 0x00FAE818-0x00FAE894
		public static bool GetKey(KeyCode key); // 0x00FAE8E4-0x00FAE924
		public static bool GetKeyUp(KeyCode key); // 0x00FAE924-0x00FAE964
		public static bool GetKeyDown(KeyCode key); // 0x00FAE964-0x00FAE9A4
		private static void GetTouch_Injected(int index, out Touch ret); // 0x00FAE894-0x00FAE8E4
		private static void get_mousePosition_Injected(out Vector3 ret); // 0x00FAEA64-0x00FAEAA4
		private static void get_mouseScrollDelta_Injected(out Vector2 ret); // 0x00FAEAEC-0x00FAEB2C
		private static void get_compositionCursorPos_Injected(out Vector2 ret); // 0x00FAEC1C-0x00FAEC5C
		private static void set_compositionCursorPos_Injected(ref Vector2 value); // 0x00FAECA0-0x00FAECE0
		private static void get_acceleration_Injected(out Vector3 ret); // 0x00FAEDD4-0x00FAEE14
	}

	internal class SendMouseEvents // TypeDefIndex: 2299
	{
		// Fields
		private static bool s_MouseUsed; // 0x00
		private static readonly HitInfo[] m_LastHit; // 0x08
		private static readonly HitInfo[] m_MouseDownHit; // 0x10
		private static readonly HitInfo[] m_CurrentHit; // 0x18
		private static Camera[] m_Cameras; // 0x20
	
		// Nested types
		private struct HitInfo // TypeDefIndex: 2300
		{
			// Fields
			public GameObject target; // 0x00
			public Camera camera; // 0x08
	
			// Methods
			public void SendMessage(string name); // 0x00597870-0x00597878
			public static implicit operator bool(HitInfo exists); // 0x00FB0014-0x00FB00F0
			public static bool Compare(HitInfo lhs, HitInfo rhs); // 0x00FB00F0-0x00FB01BC
		}
	
		// Constructors
		static SendMouseEvents(); // 0x00FB01BC-0x00FB0368
	
		// Methods
		[RequiredByNativeCode] // 0x004E0F7C-0x004E0F8C
		private static void SetMouseMoved(); // 0x00FAEF5C-0x00FAEFC8
		private static void HitTestLegacyGUI(Camera camera, Vector3 mousePosition, ref HitInfo hitInfo); // 0x00FAEFC8-0x00FAF0F4
		[RequiredByNativeCode] // 0x004E0F8C-0x004E0F9C
		private static void DoSendMouseEvents(int skipRTCameras); // 0x00FAF0F4-0x00FAFB14
		private static void SendEvents(int i, HitInfo hit); // 0x00FAFB14-0x00FB0014
	}

	[NativeHeader] // 0x004E2148-0x004E2180
	public static class JsonUtility // TypeDefIndex: 2302
	{
		// Methods
		[FreeFunction] // 0x004E2180-0x004E21D0
		[ThreadSafe] // 0x004E2180-0x004E21D0
		private static string ToJsonInternal([NotNull] /* 0x004E222C-0x004E223C */ object obj, bool prettyPrint); // 0x00FB91C4-0x00FB9214
		[FreeFunction] // 0x004E21D0-0x004E222C
		[ThreadSafe] // 0x004E21D0-0x004E222C
		private static object FromJsonInternal(string json, object objectToOverwrite, Type type); // 0x00FB9214-0x00FB926C
		public static string ToJson(object obj); // 0x00FB926C-0x00FB9274
		public static string ToJson(object obj, bool prettyPrint); // 0x00FB9274-0x00FB93CC
		public static void FromJsonOverwrite(string json, object objectToOverwrite); // 0x00FB93CC-0x00FB9568
	}

	[NativeHeader] // 0x004E33E8-0x004E3584
	[NativeHeader] // 0x004E33E8-0x004E3584
	[NativeHeader] // 0x004E33E8-0x004E3584
	[NativeHeader] // 0x004E33E8-0x004E3584
	[NativeHeader] // 0x004E33E8-0x004E3584
	[NativeHeader] // 0x004E33E8-0x004E3584
	[NativeHeader] // 0x004E33E8-0x004E3584
	[NativeHeader] // 0x004E33E8-0x004E3584
	[RequireComponent] // 0x004E33E8-0x004E3584
	[UsedByNativeCode] // 0x004E33E8-0x004E3584
	public sealed class ParticleSystem : Component // TypeDefIndex: 2304
	{
		// Properties
		[Obsolete] // 0x004E3F14-0x004E3F50
		public float playbackSpeed { set; } // 0x00FAD0DC-0x00FAD138
		public bool isPlaying { [NativeName] /* 0x004E3B00-0x004E3B38 */ get; } // 0x00FAD18C-0x00FAD1CC 
		public float time { [NativeName] /* 0x004E3B38-0x004E3B70 */ get; } // 0x00FAD1CC-0x00FAD20C 
		public uint randomSeed { [NativeName] /* 0x004E3B70-0x004E3BA8 */ get; [NativeName] /* 0x004E3BA8-0x004E3BE0 */ set; } // 0x00FAD20C-0x00FAD24C 0x00FAD24C-0x00FAD29C
		public bool useAutoRandomSeed { [NativeName] /* 0x004E3BE0-0x004E3C18 */ get; [NativeName] /* 0x004E3C18-0x004E3C50 */ set; } // 0x00FAD29C-0x00FAD2DC 0x00FAD2DC-0x00FAD32C
		public MainModule main { get; } // 0x00FAD138-0x00FAD18C 
		public EmissionModule emission { get; } // 0x00FADA28-0x00FADAA0 
	
		// Nested types
		public struct MainModule // TypeDefIndex: 2305
		{
			// Fields
			internal ParticleSystem m_ParticleSystem; // 0x00
	
			// Properties
			public float duration { get; } // 0x00597420-0x00597460 
			public bool loop { get; } // 0x00597460-0x005974A0 
			public MinMaxCurve startDelay { get; } // 0x005974A0-0x0059750C 
			public float startLifetimeMultiplier { get; } // 0x0059750C-0x0059754C 
			public MinMaxCurve startSpeed { set; } // 0x0059754C-0x005975AC
			public MinMaxGradient startColor { set; } // 0x005975AC-0x0059761C
			public Transform customSimulationSpace { set; } // 0x0059761C-0x0059766C
			public float simulationSpeed { set; } // 0x0059766C-0x005976BC
			public bool playOnAwake { set; } // 0x005976BC-0x0059770C
	
			// Constructors
			internal MainModule(ParticleSystem particleSystem); // 0x00597418-0x00597420
	
			// Methods
			private static float get_duration_Injected(ref MainModule _unity_self); // 0x00FADCF0-0x00FADD70
			private static bool get_loop_Injected(ref MainModule _unity_self); // 0x00FADD70-0x00FADE1C
			private static void get_startDelay_Injected(ref MainModule _unity_self, out MinMaxCurve ret); // 0x00FADE1C-0x00FADEAC
			private static float get_startLifetimeMultiplier_Injected(ref MainModule _unity_self); // 0x00FADEAC-0x00FADF3C
			private static void set_startSpeed_Injected(ref MainModule _unity_self, ref MinMaxCurve value); // 0x00FADF3C-0x00FADFDC
			private static void set_startColor_Injected(ref MainModule _unity_self, ref MinMaxGradient value); // 0x00FADFDC-0x00FAE07C
			private static void set_customSimulationSpace_Injected(ref MainModule _unity_self, Transform value); // 0x00FAE07C-0x00FAE0CC
			private static void set_simulationSpeed_Injected(ref MainModule _unity_self, float value); // 0x00FAE0CC-0x00FAE16C
			private static void set_playOnAwake_Injected(ref MainModule _unity_self, bool value); // 0x00FAE16C-0x00FAE338
		}
	
		public struct EmissionModule // TypeDefIndex: 2306
		{
			// Fields
			internal ParticleSystem m_ParticleSystem; // 0x00
	
			// Properties
			public MinMaxCurve rateOverTime { get; set; } // 0x0059710C-0x00597178 0x00597178-0x005971D8
			public float rateOverTimeMultiplier { get; set; } // 0x005971D8-0x00597218 0x00597218-0x00597418
	
			// Constructors
			internal EmissionModule(ParticleSystem particleSystem); // 0x00597104-0x0059710C
	
			// Methods
			private static void get_rateOverTime_Injected(ref EmissionModule _unity_self, out MinMaxCurve ret); // 0x00FADAA0-0x00FADB40
			private static void set_rateOverTime_Injected(ref EmissionModule _unity_self, ref MinMaxCurve value); // 0x00FADB40-0x00FADBD0
			private static float get_rateOverTimeMultiplier_Injected(ref EmissionModule _unity_self); // 0x00FADBD0-0x00FADC60
			private static void set_rateOverTimeMultiplier_Injected(ref EmissionModule _unity_self, float value); // 0x00FADC60-0x00FADCF0
		}
	
		[RequiredByNativeCode] // 0x004E3584-0x004E35C8
		public struct Particle // TypeDefIndex: 2307
		{
			// Fields
			private Vector3 m_Position; // 0x00
			private Vector3 m_Velocity; // 0x0C
			private Vector3 m_AnimatedVelocity; // 0x18
			private Vector3 m_InitialVelocity; // 0x24
			private Vector3 m_AxisOfRotation; // 0x30
			private Vector3 m_Rotation; // 0x3C
			private Vector3 m_AngularVelocity; // 0x48
			private Vector3 m_StartSize; // 0x54
			private Color32 m_StartColor; // 0x60
			private uint m_RandomSeed; // 0x64
			private float m_Lifetime; // 0x68
			private float m_StartLifetime; // 0x6C
			private int m_MeshIndex; // 0x70
			private float m_EmitAccumulator0; // 0x74
			private float m_EmitAccumulator1; // 0x78
			private uint m_Flags; // 0x7C
	
			// Properties
			[Obsolete] // 0x004E3F50-0x004E3F8C
			public float lifetime { set; } // 0x00597774-0x0059777C
			public Vector3 position { get; set; } // 0x0059777C-0x00597788 0x00597788-0x00597794
			public Vector3 velocity { get; set; } // 0x00597794-0x005977A0 0x005977A0-0x005977AC
			public float remainingLifetime { set; } // 0x005977AC-0x005977B4
			public float startLifetime { set; } // 0x005977B4-0x005977BC
			public Color32 startColor { set; } // 0x005977BC-0x005977C4
			public uint randomSeed { set; } // 0x005977C4-0x005977CC
			public float startSize { set; } // 0x005977CC-0x0059781C
			public Vector3 rotation3D { set; } // 0x0059781C-0x00597824
			public Vector3 angularVelocity3D { set; } // 0x00597824-0x00597870
		}
	
		[Serializable]
		[NativeType] // 0x004E35C8-0x004E3618
		public struct MinMaxCurve // TypeDefIndex: 2308
		{
			// Fields
			[SerializeField] // 0x004E3738-0x004E3748
			private ParticleSystemCurveMode m_Mode; // 0x00
			[SerializeField] // 0x004E3748-0x004E3758
			private float m_CurveMultiplier; // 0x04
			[SerializeField] // 0x004E3758-0x004E3768
			private AnimationCurve m_CurveMin; // 0x08
			[SerializeField] // 0x004E3768-0x004E3778
			private AnimationCurve m_CurveMax; // 0x10
			[SerializeField] // 0x004E3778-0x004E3788
			private float m_ConstantMin; // 0x18
			[SerializeField] // 0x004E3788-0x004E3798
			private float m_ConstantMax; // 0x1C
	
			// Properties
			public ParticleSystemCurveMode mode { get; set; } // 0x00597720-0x00597728 0x00597728-0x00597730
			public float constant { get; } // 0x00597730-0x00597738 
	
			// Constructors
			public MinMaxCurve(float constant); // 0x0059770C-0x00597720
	
			// Methods
			public float Evaluate(float time); // 0x00597738-0x00597744
			public float Evaluate(float time, float lerpFactor); // 0x00597744-0x0059774C
			public static implicit operator MinMaxCurve(float constant); // 0x00FAE338-0x00FAE3E8
		}
	
		[Serializable]
		[NativeType] // 0x004E3618-0x004E3668
		public struct MinMaxGradient // TypeDefIndex: 2309
		{
			// Fields
			[SerializeField] // 0x004E3798-0x004E37A8
			private ParticleSystemGradientMode m_Mode; // 0x00
			[SerializeField] // 0x004E37A8-0x004E37B8
			private Gradient m_GradientMin; // 0x08
			[SerializeField] // 0x004E37B8-0x004E37C8
			private Gradient m_GradientMax; // 0x10
			[SerializeField] // 0x004E37C8-0x004E37D8
			private Color m_ColorMin; // 0x18
			[SerializeField] // 0x004E37D8-0x004E37E8
			private Color m_ColorMax; // 0x28
	
			// Constructors
			public MinMaxGradient(Color color); // 0x0059774C-0x00597754
			public MinMaxGradient(Color min, Color max); // 0x00597754-0x00597774
		}
	
		public struct EmitParams // TypeDefIndex: 2310
		{
			// Fields
			[NativeName] // 0x004E37E8-0x004E3820
			private Particle m_Particle; // 0x00
			[NativeName] // 0x004E3820-0x004E3858
			private bool m_PositionSet; // 0x80
			[NativeName] // 0x004E3858-0x004E3890
			private bool m_VelocitySet; // 0x81
			[NativeName] // 0x004E3890-0x004E38C8
			private bool m_AxisOfRotationSet; // 0x82
			[NativeName] // 0x004E38C8-0x004E3900
			private bool m_RotationSet; // 0x83
			[NativeName] // 0x004E3900-0x004E3938
			private bool m_AngularVelocitySet; // 0x84
			[NativeName] // 0x004E3938-0x004E3970
			private bool m_StartSizeSet; // 0x85
			[NativeName] // 0x004E3970-0x004E39A8
			private bool m_StartColorSet; // 0x86
			[NativeName] // 0x004E39A8-0x004E39E0
			private bool m_RandomSeedSet; // 0x87
			[NativeName] // 0x004E39E0-0x004E3A18
			private bool m_StartLifetimeSet; // 0x88
			[NativeName] // 0x004E3A18-0x004E3A50
			private bool m_MeshIndexSet; // 0x89
			[NativeName] // 0x004E3A50-0x004E3A88
			private bool m_ApplyShapeToPosition; // 0x8A
		}
	
		// Methods
		[Obsolete] // 0x004E3A88-0x004E3AC4
		public void Emit(Vector3 position, Vector3 velocity, float size, float lifetime, Color32 color); // 0x00FACD00-0x00FAD03C
		[Obsolete] // 0x004E3AC4-0x004E3B00
		public void Emit(Particle particle); // 0x00FAD08C-0x00FAD0DC
		[FreeFunction] // 0x004E3C50-0x004E3C94
		public void SetParticles(out Particle[] particles, int size, int offset); // 0x00FAD32C-0x00FAD394
		public void SetParticles(out Particle[] particles, int size); // 0x00FAD394-0x00FAD3F0
		[FreeFunction] // 0x004E3C94-0x004E3CD8
		public int GetParticles([NotNull] /* 0x004E3EF4-0x004E3F04 */ out Particle[] particles, int size, int offset); // 0x00FAD3F0-0x00FAD458
		public int GetParticles(out Particle[] particles, int size); // 0x00FAD458-0x00FAD4B4
		public int GetParticles(out Particle[] particles); // 0x00FAD4B4-0x00FAD50C
		[FreeFunction] // 0x004E3CD8-0x004E3D1C
		public void Simulate(float t, bool withChildren, bool restart, bool fixedTimeStep); // 0x00FAD50C-0x00FAD584
		public void Simulate(float t, bool withChildren, bool restart); // 0x00FAD584-0x00FAD5F0
		public void Simulate(float t, bool withChildren); // 0x00FAD5F0-0x00FAD658
		public void Simulate(float t); // 0x00FAD658-0x00FAD6B4
		[FreeFunction] // 0x004E3D1C-0x004E3D60
		public void Play(bool withChildren); // 0x00FAD6B4-0x00FAD704
		public void Play(); // 0x00FAD704-0x00FAD748
		[FreeFunction] // 0x004E3D60-0x004E3DA4
		public void Stop(bool withChildren, ParticleSystemStopBehavior stopBehavior); // 0x00FAD748-0x00FAD7A0
		public void Stop(bool withChildren); // 0x00FAD7A0-0x00FAD7F4
		public void Stop(); // 0x00FAD7F4-0x00FAD83C
		[FreeFunction] // 0x004E3DA4-0x004E3DE8
		public void Clear(bool withChildren); // 0x00FAD83C-0x00FAD88C
		public void Clear(); // 0x00FAD88C-0x00FAD8D0
		[RequiredByNativeCode] // 0x004E3DE8-0x004E3DF8
		public void Emit(int count); // 0x00FAD8D0-0x00FAD920
		[NativeName] // 0x004E3DF8-0x004E3E30
		private void Emit_Internal(int count); // 0x00FAD920-0x00FAD970
		[NativeName] // 0x004E3E30-0x004E3E68
		public void Emit(EmitParams emitParams, int count); // 0x00FAD970-0x00FAD9C8
		[NativeName] // 0x004E3E68-0x004E3EA0
		private void EmitOld_Internal(ref Particle particle); // 0x00FAD03C-0x00FAD08C
		private void Emit_Injected(ref EmitParams emitParams, int count); // 0x00FAD9C8-0x00FADA28
	}

	public enum ParticleSystemCurveMode // TypeDefIndex: 2311
	{
		Constant = 0,
		Curve = 1,
		TwoCurves = 2,
		TwoConstants = 3
	}

	public enum ParticleSystemGradientMode // TypeDefIndex: 2312
	{
		Color = 0,
		Gradient = 1,
		TwoColors = 2,
		TwoGradients = 3,
		RandomColor = 4
	}

	public enum ParticleSystemStopBehavior // TypeDefIndex: 2313
	{
		StopEmittingAndClear = 0,
		StopEmitting = 1
	}

	[NativeHeader] // 0x004E3668-0x004E3738
	[NativeHeader] // 0x004E3668-0x004E3738
	[NativeHeader] // 0x004E3668-0x004E3738
	[RequireComponent] // 0x004E3668-0x004E3738
	public sealed class ParticleSystemRenderer : Renderer // TypeDefIndex: 2314
	{
		// Methods
		[FreeFunction] // 0x004E3EA0-0x004E3EF4
		[RequiredByNativeCode] // 0x004E3EA0-0x004E3EF4
		public int GetMeshes([NotNull] /* 0x004E3F04-0x004E3F14 */ out Mesh[] meshes); // 0x00FAE3E8-0x00FAE438
	}

	[NativeHeader] // 0x004E5148-0x004E5180
	public struct PhysicsScene2D : IEquatable<PhysicsScene2D> // TypeDefIndex: 2316
	{
		// Fields
		private int m_Handle; // 0x00
	
		// Methods
		public override string ToString(); // 0x005969F0-0x005969F8
		public override int GetHashCode(); // 0x005969F8-0x00596A00
		public override bool Equals(object other); // 0x00596A00-0x00596A08
		public bool Equals(PhysicsScene2D other); // 0x00596A08-0x00596A18
		public RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, [UnityEngine.Internal.DefaultValue] /* 0x004E6158-0x004E6190 */ int layerMask = -5 /* Metadata: 0x001F45F5 */); // 0x00596A18-0x00596A20
		public RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter); // 0x00596A20-0x00596A98
		[NativeMethod] // 0x004E5C50-0x004E5CB4
		[StaticAccessor] // 0x004E5C50-0x004E5CB4
		private static RaycastHit2D Raycast_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter); // 0x00F9F44C-0x00F9F4EC
		public int Raycast(Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D[] results); // 0x00596A98-0x00596ADC
		[NativeMethod] // 0x004E5CB4-0x004E5D18
		[StaticAccessor] // 0x004E5CB4-0x004E5D18
		private static int RaycastArray_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter, [NotNull] /* 0x004E6190-0x004E61A0 */ RaycastHit2D[] results); // 0x00F9F56C-0x00F9F5F0
		public int Raycast(Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter, List<RaycastHit2D> results); // 0x00596ADC-0x00596B20
		[NativeMethod] // 0x004E5D18-0x004E5D7C
		[StaticAccessor] // 0x004E5D18-0x004E5D7C
		private static int RaycastList_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter, [NotNull] /* 0x004E61A0-0x004E61B0 */ List<RaycastHit2D> results); // 0x00F9F670-0x00F9F6F4
		public int GetRayIntersection(Ray ray, float distance, RaycastHit2D[] results, [UnityEngine.Internal.DefaultValue] /* 0x004E61B0-0x004E61E8 */ int layerMask = -5 /* Metadata: 0x001F45F9 */); // 0x00596B20-0x00596B54
		[NativeMethod] // 0x004E5D7C-0x004E5DE0
		[StaticAccessor] // 0x004E5D7C-0x004E5DE0
		private static int GetRayIntersectionArray_Internal(PhysicsScene2D physicsScene, Vector3 origin, Vector3 direction, float distance, int layerMask, [NotNull] /* 0x004E61E8-0x004E61F8 */ RaycastHit2D[] results); // 0x00F9F774-0x00F9F800
		public Collider2D OverlapPoint(Vector2 point, ContactFilter2D contactFilter); // 0x00596B54-0x00596B98
		[NativeMethod] // 0x004E5DE0-0x004E5E44
		[StaticAccessor] // 0x004E5DE0-0x004E5E44
		private static Collider2D OverlapPoint_Internal(PhysicsScene2D physicsScene, Vector2 point, ContactFilter2D contactFilter); // 0x00F9F880-0x00F9F8DC
		private static void Raycast_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 origin, ref Vector2 direction, float distance, ref ContactFilter2D contactFilter, out RaycastHit2D ret); // 0x00F9F4EC-0x00F9F56C
		private static int RaycastArray_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 origin, ref Vector2 direction, float distance, ref ContactFilter2D contactFilter, RaycastHit2D[] results); // 0x00F9F5F0-0x00F9F670
		private static int RaycastList_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 origin, ref Vector2 direction, float distance, ref ContactFilter2D contactFilter, List<RaycastHit2D> results); // 0x00F9F6F4-0x00F9F774
		private static int GetRayIntersectionArray_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector3 origin, ref Vector3 direction, float distance, int layerMask, RaycastHit2D[] results); // 0x00F9F800-0x00F9F880
		private static Collider2D OverlapPoint_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 point, ref ContactFilter2D contactFilter); // 0x00F9F8DC-0x00F9F934
	}

	[NativeHeader] // 0x004E5180-0x004E5234
	[NativeHeader] // 0x004E5180-0x004E5234
	[NativeHeader] // 0x004E5180-0x004E5234
	[StaticAccessor] // 0x004E5180-0x004E5234
	public class Physics2D // TypeDefIndex: 2317
	{
		// Fields
		private static List<Rigidbody2D> m_LastDisabledRigidbody2D; // 0x00
	
		// Properties
		public static PhysicsScene2D defaultPhysicsScene { get; } // 0x00F9DE08-0x00F9DE10 
		[StaticAccessor] // 0x004E6438-0x004E6470
		public static bool queriesHitTriggers { get; } // 0x00F9DDD4-0x00F9DE08 
	
		// Constructors
		static Physics2D(); // 0x00F9F258-0x00F9F44C
	
		// Methods
		[ExcludeFromDocs] // 0x004E5E44-0x004E5E54
		public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction); // 0x00F9DE10-0x00F9DFB8
		[ExcludeFromDocs] // 0x004E5E54-0x004E5E64
		public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance); // 0x00F9DFB8-0x00F9E09C
		[ExcludeFromDocs] // 0x004E5E64-0x004E5E9C
		[RequiredByNativeCode] // 0x004E5E64-0x004E5E9C
		public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask); // 0x00F9E09C-0x00F9E244
		[ExcludeFromDocs] // 0x004E5E9C-0x004E5EAC
		public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask, float minDepth); // 0x00F9E244-0x00F9E384
		public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, [UnityEngine.Internal.DefaultValue] /* 0x004E61F8-0x004E6230 */ float distance, [UnityEngine.Internal.DefaultValue] /* 0x004E6230-0x004E6268 */ int layerMask, [UnityEngine.Internal.DefaultValue] /* 0x004E6268-0x004E62A0 */ float minDepth, [UnityEngine.Internal.DefaultValue] /* 0x004E62A0-0x004E62D8 */ float maxDepth); // 0x00F9E384-0x00F9E4CC
		[ExcludeFromDocs] // 0x004E5EAC-0x004E5EBC
		public static int Raycast(Vector2 origin, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results); // 0x00F9E4CC-0x00F9E5CC
		public static int Raycast(Vector2 origin, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, [UnityEngine.Internal.DefaultValue] /* 0x004E62D8-0x004E6310 */ float distance); // 0x00F9E5CC-0x00F9E6A0
		public static int Raycast(Vector2 origin, Vector2 direction, ContactFilter2D contactFilter, List<RaycastHit2D> results, [UnityEngine.Internal.DefaultValue] /* 0x004E6310-0x004E6348 */ float distance = 1F / 0F /* Metadata: 0x001F45FD */); // 0x00F9E6A0-0x00F9E7A8
		[ExcludeFromDocs] // 0x004E5EBC-0x004E5ECC
		public static RaycastHit2D[] GetRayIntersectionAll(Ray ray); // 0x00F9E7A8-0x00F9E864
		[ExcludeFromDocs] // 0x004E5ECC-0x004E5EDC
		public static RaycastHit2D[] GetRayIntersectionAll(Ray ray, float distance); // 0x00F9E924-0x00F9E9E0
		[RequiredByNativeCode] // 0x004E5EDC-0x004E5EEC
		public static RaycastHit2D[] GetRayIntersectionAll(Ray ray, [UnityEngine.Internal.DefaultValue] /* 0x004E6348-0x004E6380 */ float distance, [UnityEngine.Internal.DefaultValue] /* 0x004E6380-0x004E63B8 */ int layerMask); // 0x00F9E9E0-0x00F9EAA8
		[NativeMethod] // 0x004E5EEC-0x004E5F50
		[StaticAccessor] // 0x004E5EEC-0x004E5F50
		private static RaycastHit2D[] GetRayIntersectionAll_Internal(PhysicsScene2D physicsScene, Vector3 origin, Vector3 direction, float distance, int layerMask); // 0x00F9E864-0x00F9E924
		[ExcludeFromDocs] // 0x004E5F50-0x004E5F60
		public static int GetRayIntersectionNonAlloc(Ray ray, RaycastHit2D[] results); // 0x00F9EB20-0x00F9EC58
		[ExcludeFromDocs] // 0x004E5F60-0x004E5F70
		public static int GetRayIntersectionNonAlloc(Ray ray, RaycastHit2D[] results, float distance); // 0x00F9EC58-0x00F9ED08
		[RequiredByNativeCode] // 0x004E5F70-0x004E5F80
		public static int GetRayIntersectionNonAlloc(Ray ray, RaycastHit2D[] results, [UnityEngine.Internal.DefaultValue] /* 0x004E63B8-0x004E63F0 */ float distance, [UnityEngine.Internal.DefaultValue] /* 0x004E63F0-0x004E6428 */ int layerMask); // 0x00F9ED08-0x00F9EDBC
		[ExcludeFromDocs] // 0x004E5F80-0x004E5F90
		public static Collider2D OverlapPoint(Vector2 point, int layerMask); // 0x00F9EDBC-0x00F9EEB4
		[ExcludeFromDocs] // 0x004E5F90-0x004E5FA0
		public static Collider2D[] OverlapPointAll(Vector2 point, int layerMask); // 0x00F9EEB4-0x00F9EF78
		[NativeMethod] // 0x004E5FA0-0x004E6004
		[StaticAccessor] // 0x004E5FA0-0x004E6004
		private static Collider2D[] OverlapPointAll_Internal(PhysicsScene2D physicsScene, Vector2 point, ContactFilter2D contactFilter); // 0x00F9EF78-0x00F9F018
		[ExcludeFromDocs] // 0x004E6004-0x004E6014
		public static Collider2D[] OverlapCircleAll(Vector2 point, float radius); // 0x00F9F070-0x00F9F140
		[NativeMethod] // 0x004E6014-0x004E6078
		[StaticAccessor] // 0x004E6014-0x004E6078
		private static Collider2D[] OverlapCircleAll_Internal(PhysicsScene2D physicsScene, Vector2 point, float radius, ContactFilter2D contactFilter); // 0x00F9F140-0x00F9F1F0
		private static RaycastHit2D[] GetRayIntersectionAll_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector3 origin, ref Vector3 direction, float distance, int layerMask); // 0x00F9EAA8-0x00F9EB20
		private static Collider2D[] OverlapPointAll_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 point, ref ContactFilter2D contactFilter); // 0x00F9F018-0x00F9F070
		private static Collider2D[] OverlapCircleAll_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 point, float radius, ref ContactFilter2D contactFilter); // 0x00F9F1F0-0x00F9F258
	}

	[Serializable]
	[NativeClass] // 0x004E5234-0x004E52C4
	[NativeHeader] // 0x004E5234-0x004E52C4
	[RequiredByNativeCode] // 0x004E5234-0x004E52C4
	public struct ContactFilter2D // TypeDefIndex: 2318
	{
		// Fields
		[NativeName] // 0x004E5630-0x004E5668
		public bool useTriggers; // 0x00
		[NativeName] // 0x004E5668-0x004E56A0
		public bool useLayerMask; // 0x01
		[NativeName] // 0x004E56A0-0x004E56D8
		public bool useDepth; // 0x02
		[NativeName] // 0x004E56D8-0x004E5710
		public bool useOutsideDepth; // 0x03
		[NativeName] // 0x004E5710-0x004E5748
		public bool useNormalAngle; // 0x04
		[NativeName] // 0x004E5748-0x004E5780
		public bool useOutsideNormalAngle; // 0x05
		[NativeName] // 0x004E5780-0x004E57B8
		public LayerMask layerMask; // 0x08
		[NativeName] // 0x004E57B8-0x004E57F0
		public float minDepth; // 0x0C
		[NativeName] // 0x004E57F0-0x004E5828
		public float maxDepth; // 0x10
		[NativeName] // 0x004E5828-0x004E5860
		public float minNormalAngle; // 0x14
		[NativeName] // 0x004E5860-0x004E5898
		public float maxNormalAngle; // 0x18
	
		// Methods
		private void CheckConsistency(); // 0x005969C0-0x005969C8
		public void SetLayerMask(LayerMask layerMask); // 0x005969C8-0x005969D8
		public void SetDepth(float minDepth, float maxDepth); // 0x005969D8-0x005969F0
		internal static ContactFilter2D CreateLegacyFilter(int layerMask, float minDepth, float maxDepth); // 0x00F9DCE4-0x00F9DDD4
	}

	[RequiredByNativeCode] // 0x004E52C4-0x004E52D4
	public class Collision2D // TypeDefIndex: 2319
	{
		// Fields
		internal int m_Collider; // 0x10
		internal int m_OtherCollider; // 0x14
		internal int m_Rigidbody; // 0x18
		internal int m_OtherRigidbody; // 0x1C
		internal Vector2 m_RelativeVelocity; // 0x20
		internal int m_Enabled; // 0x28
		internal int m_ContactCount; // 0x2C
		internal ContactPoint2D[] m_ReusedContacts; // 0x30
		internal ContactPoint2D[] m_LegacyContacts; // 0x38
	
		// Properties
		public Collider2D collider { get; } // 0x00F9D6C8-0x00F9D778 
		public Rigidbody2D rigidbody { get; } // 0x00F9D778-0x00F9D804 
		public GameObject gameObject { get; } // 0x00F9D804-0x00F9D8A8 
		public Vector2 relativeVelocity { get; } // 0x00F9D8A8-0x00F9D8B0 
	}

	[NativeClass] // 0x004E52D4-0x004E536C
	[NativeHeader] // 0x004E52D4-0x004E536C
	[RequiredByNativeCode] // 0x004E52D4-0x004E536C
	public struct ContactPoint2D // TypeDefIndex: 2320
	{
		// Fields
		[NativeName] // 0x004E5898-0x004E58D0
		private Vector2 m_Point; // 0x00
		[NativeName] // 0x004E58D0-0x004E5908
		private Vector2 m_Normal; // 0x08
		[NativeName] // 0x004E5908-0x004E5940
		private Vector2 m_RelativeVelocity; // 0x10
		[NativeName] // 0x004E5940-0x004E5978
		private float m_Separation; // 0x18
		[NativeName] // 0x004E5978-0x004E59B0
		private float m_NormalImpulse; // 0x1C
		[NativeName] // 0x004E59B0-0x004E59E8
		private float m_TangentImpulse; // 0x20
		[NativeName] // 0x004E59E8-0x004E5A20
		private int m_Collider; // 0x24
		[NativeName] // 0x004E5A20-0x004E5A58
		private int m_OtherCollider; // 0x28
		[NativeName] // 0x004E5A58-0x004E5A90
		private int m_Rigidbody; // 0x2C
		[NativeName] // 0x004E5A90-0x004E5AC8
		private int m_OtherRigidbody; // 0x30
		[NativeName] // 0x004E5AC8-0x004E5B00
		private int m_Enabled; // 0x34
	}

	[NativeClass] // 0x004E536C-0x004E5408
	[NativeHeader] // 0x004E536C-0x004E5408
	[RequiredByNativeCode] // 0x004E536C-0x004E5408
	public struct RaycastHit2D // TypeDefIndex: 2321
	{
		// Fields
		[NativeName] // 0x004E5B00-0x004E5B38
		private Vector2 m_Centroid; // 0x00
		[NativeName] // 0x004E5B38-0x004E5B70
		private Vector2 m_Point; // 0x08
		[NativeName] // 0x004E5B70-0x004E5BA8
		private Vector2 m_Normal; // 0x10
		[NativeName] // 0x004E5BA8-0x004E5BE0
		private float m_Distance; // 0x18
		[NativeName] // 0x004E5BE0-0x004E5C18
		private float m_Fraction; // 0x1C
		[NativeName] // 0x004E5C18-0x004E5C50
		private int m_Collider; // 0x20
	
		// Properties
		public Vector2 point { get; } // 0x00596B98-0x00596BA0 
		public Vector2 normal { get; } // 0x00596BA0-0x00596BA8 
		public float distance { get; } // 0x00596BA8-0x00596BB0 
		public Collider2D collider { get; } // 0x00596BB0-0x00596C40 
	}

	[NativeHeader] // 0x004E5408-0x004E5490
	[RequireComponent] // 0x004E5408-0x004E5490
	public sealed class Rigidbody2D : Component // TypeDefIndex: 2322
	{
		// Properties
		public Vector2 position { get; set; } // 0x00F9FBD4-0x00F9FC2C 0x00F9FC7C-0x00F9FCD0
		public float rotation { get; set; } // 0x00F9FD20-0x00F9FD60 0x00F9FD60-0x00F9FDB0
		public Vector2 velocity { get; set; } // 0x00F9FE50-0x00F9FEA8 0x00F9FEF8-0x00F9FF4C
		public float angularVelocity { get; set; } // 0x00F9FF9C-0x00F9FFDC 0x00F9FFDC-0x00FA002C
		public float mass { get; } // 0x00FA002C-0x00FA106C 
	
		// Constructors
		public Rigidbody2D(); // 0x00F9FBCC-0x00F9FBD4
	
		// Methods
		public void MoveRotation(float angle); // 0x00F9FDB0-0x00F9FE00
		[NativeMethod] // 0x004E6078-0x004E60B0
		private void MoveRotation_Angle(float angle); // 0x00F9FE00-0x00F9FE50
		private void get_position_Injected(out Vector2 ret); // 0x00F9FC2C-0x00F9FC7C
		private void set_position_Injected(ref Vector2 value); // 0x00F9FCD0-0x00F9FD20
		private void get_velocity_Injected(out Vector2 ret); // 0x00F9FEA8-0x00F9FEF8
		private void set_velocity_Injected(ref Vector2 value); // 0x00F9FF4C-0x00F9FF9C
	}

	[NativeHeader] // 0x004E5490-0x004E5538
	[RequireComponent] // 0x004E5490-0x004E5538
	[RequiredByNativeCode] // 0x004E5490-0x004E5538
	public class Collider2D : Behaviour // TypeDefIndex: 2323
	{
		// Properties
		public bool isTrigger { set; } // 0x00F9D4EC-0x00F9D53C
		public Vector2 offset { set; } // 0x00F9D53C-0x00F9D590
		public Rigidbody2D attachedRigidbody { [NativeMethod] /* 0x004E60B0-0x004E60E8 */ get; } // 0x00F9D5E0-0x00F9D620 
	
		// Constructors
		public Collider2D(); // 0x00F9D4E4-0x00F9D4EC
	
		// Methods
		public bool OverlapPoint(Vector2 point); // 0x00F9D620-0x00F9D678
		private void set_offset_Injected(ref Vector2 value); // 0x00F9D590-0x00F9D5E0
		private bool OverlapPoint_Injected(ref Vector2 point); // 0x00F9D678-0x00F9D6C8
	}

	[NativeHeader] // 0x004E5538-0x004E5570
	public sealed class BoxCollider2D : Collider2D // TypeDefIndex: 2324
	{
		// Properties
		public Vector2 size { set; } // 0x00F9D440-0x00F9D494
	
		// Methods
		private void set_size_Injected(ref Vector2 value); // 0x00F9D494-0x00F9D4E4
	}

	[NativeHeader] // 0x004E5570-0x004E55A8
	public sealed class PolygonCollider2D : Collider2D // TypeDefIndex: 2325
	{
		// Properties
		public int pathCount { get; } // 0x00F9F934-0x00F9F974 
	
		// Methods
		public Vector2[] GetPath(int index); // 0x00F9F974-0x00F9FAB4
		[NativeMethod] // 0x004E60E8-0x004E6120
		private Vector2[] GetPath_Internal(int index); // 0x00F9FAB4-0x00F9FBCC
	}

	[NativeHeader] // 0x004E55A8-0x004E5630
	[RequireComponent] // 0x004E55A8-0x004E5630
	public sealed class CompositeCollider2D : Collider2D // TypeDefIndex: 2326
	{
		// Properties
		public int pathCount { get; } // 0x00F9D8B0-0x00F9D8F0 
		public int pointCount { get; } // 0x00F9D8F0-0x00F9D930 
	
		// Methods
		public int GetPath(int index, Vector2[] points); // 0x00F9D930-0x00F9DAD4
		[NativeMethod] // 0x004E6120-0x004E6158
		private int GetPathArray_Internal(int index, [NotNull] /* 0x004E6428-0x004E6438 */ Vector2[] points); // 0x00F9DAD4-0x00F9DCE4
	}

	public interface ICanvasRaycastFilter // TypeDefIndex: 2328
	{
		// Methods
		bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera);
	}

	[NativeClass] // 0x004E762C-0x004E768C
	[NativeHeader] // 0x004E762C-0x004E768C
	public sealed class CanvasGroup : Behaviour, ICanvasRaycastFilter // TypeDefIndex: 2329
	{
		// Properties
		[NativeProperty] // 0x004E7A9C-0x004E7ADC
		public float alpha { get; set; } // 0x00FAB124-0x00FAB164 0x00FAB164-0x00FAB1B4
		[NativeProperty] // 0x004E7ADC-0x004E7B1C
		public bool interactable { get; } // 0x00FAB1B4-0x00FAB1F4 
		[NativeProperty] // 0x004E7B1C-0x004E7B5C
		public bool blocksRaycasts { get; } // 0x00FAB1F4-0x00FAB234 
		[NativeProperty] // 0x004E7B5C-0x004E7B9C
		public bool ignoreParentGroups { get; } // 0x00FAB234-0x00FAB274 
	
		// Methods
		public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera); // 0x00FAB274-0x00FAB2B4
	}

	[NativeClass] // 0x004E768C-0x004E76EC
	[NativeHeader] // 0x004E768C-0x004E76EC
	public sealed class CanvasRenderer : Component // TypeDefIndex: 2330
	{
		// Fields
		[CompilerGenerated] // 0x004E78F0-0x004E792C
		[DebuggerBrowsable] // 0x004E78F0-0x004E792C
		private bool _isMask_k__BackingField; // 0x18
	
		// Properties
		public bool hasPopInstruction { set; } // 0x00FAB2B4-0x00FAB304
		public int materialCount { get; set; } // 0x00FAB304-0x00FAB344 0x00FAB344-0x00FAB394
		public int popMaterialCount { set; } // 0x00FAB394-0x00FAB3E4
		public int absoluteDepth { get; } // 0x00FAB3E4-0x00FAB424 
		public bool hasMoved { get; } // 0x00FAB424-0x00FAB464 
		[NativeProperty] // 0x004E7B9C-0x004E7BDC
		public bool cull { get; set; } // 0x00FAB464-0x00FAB4A4 0x00FAB4A4-0x00FAB4F4
	
		// Methods
		public void SetColor(Color color); // 0x00FAB4F4-0x00FAB54C
		public Color GetColor(); // 0x00FAB59C-0x00FAB5F8
		public void EnableRectClipping(Rect rect); // 0x00FAB648-0x00FAB6A0
		public void DisableRectClipping(); // 0x00FAB6F0-0x00FAB730
		public void SetMaterial(Material material, int index); // 0x00FAB730-0x00FAB788
		public void SetPopMaterial(Material material, int index); // 0x00FAB788-0x00FAB7E0
		public void SetTexture(Texture texture); // 0x00FAB7E0-0x00FAB830
		public void SetAlphaTexture(Texture texture); // 0x00FAB830-0x00FAB880
		public void SetMesh(Mesh mesh); // 0x00FAB880-0x00FAB8D0
		public void Clear(); // 0x00FAB8D0-0x00FAB910
		public void SetMaterial(Material material, Texture texture); // 0x00FAB910-0x00FABA50
		public static void SplitUIVertexStreams(List<UIVertex> verts, List<Vector3> positions, List<Color32> colors, List<Vector2> uv0S, List<Vector2> uv1S, List<Vector2> uv2S, List<Vector2> uv3S, List<Vector3> normals, List<Vector4> tangents, List<int> indices); // 0x00FABA50-0x00FABB2C
		public static void CreateUIVertexStream(List<UIVertex> verts, List<Vector3> positions, List<Color32> colors, List<Vector2> uv0S, List<Vector2> uv1S, List<Vector2> uv2S, List<Vector2> uv3S, List<Vector3> normals, List<Vector4> tangents, List<int> indices); // 0x00FABC1C-0x00FABCC0
		[StaticAccessor] // 0x004E7968-0x004E79A4
		private static void SplitIndicesStreamsInternal(object verts, object indices); // 0x00FABBCC-0x00FABC1C
		[StaticAccessor] // 0x004E79A4-0x004E79E0
		private static void SplitUIVertexStreamsInternal(object verts, object positions, object colors, object uv0S, object uv1S, object uv2S, object uv3S, object normals, object tangents); // 0x00FABB2C-0x00FABBCC
		[StaticAccessor] // 0x004E79E0-0x004E7A1C
		private static void CreateUIVertexStreamInternal(object verts, object positions, object colors, object uv0S, object uv1S, object uv2S, object uv3S, object normals, object tangents, object indices); // 0x00FABCC0-0x00FABD64
		private void SetColor_Injected(ref Color color); // 0x00FAB54C-0x00FAB59C
		private void GetColor_Injected(out Color ret); // 0x00FAB5F8-0x00FAB648
		private void EnableRectClipping_Injected(ref Rect rect); // 0x00FAB6A0-0x00FAB6F0
	}

	[NativeHeader] // 0x004E76EC-0x004E77BC
	[NativeHeader] // 0x004E76EC-0x004E77BC
	[NativeHeader] // 0x004E76EC-0x004E77BC
	[NativeHeader] // 0x004E76EC-0x004E77BC
	[StaticAccessor] // 0x004E76EC-0x004E77BC
	public sealed class RectTransformUtility // TypeDefIndex: 2331
	{
		// Fields
		private static readonly Vector3[] s_Corners; // 0x00
	
		// Constructors
		static RectTransformUtility(); // 0x00FACBCC-0x00FACC30
	
		// Methods
		public static Vector2 PixelAdjustPoint(Vector2 point, Transform elementTransform, Canvas canvas); // 0x00FABD64-0x00FABE18
		public static Rect PixelAdjustRect(RectTransform rectTransform, Canvas canvas); // 0x00FABE80-0x00FABF30
		private static bool PointInRectangle(Vector2 screenPoint, RectTransform rect, Camera cam); // 0x00FABF88-0x00FAC02C
		public static bool RectangleContainsScreenPoint(RectTransform rect, Vector2 screenPoint, Camera cam); // 0x00FAC084-0x00FAC110
		public static bool ScreenPointToWorldPointInRectangle(RectTransform rect, Vector2 screenPoint, Camera cam, out Vector3 worldPoint); // 0x00FAC110-0x00FAC334
		public static bool ScreenPointToLocalPointInRectangle(RectTransform rect, Vector2 screenPoint, Camera cam, out Vector2 localPoint); // 0x00FAC4D8-0x00FAC620
		public static Ray ScreenPointToRay(Camera cam, Vector2 screenPos); // 0x00FAC334-0x00FAC4D8
		public static void FlipLayoutOnAxis(RectTransform rect, int axis, bool keepPositioning, bool recursive); // 0x00FAC620-0x00FAC8C8
		public static void FlipLayoutAxes(RectTransform rect, bool keepPositioning, bool recursive); // 0x00FAC8C8-0x00FACB94
		private static Vector2 GetTransposed(Vector2 input); // 0x00FACB94-0x00FACBCC
		private static void PixelAdjustPoint_Injected(ref Vector2 point, Transform elementTransform, Canvas canvas, out Vector2 ret); // 0x00FABE18-0x00FABE80
		private static void PixelAdjustRect_Injected(RectTransform rectTransform, Canvas canvas, out Rect ret); // 0x00FABF30-0x00FABF88
		private static bool PointInRectangle_Injected(ref Vector2 screenPoint, RectTransform rect, Camera cam); // 0x00FAC02C-0x00FAC084
	}

	public enum RenderMode // TypeDefIndex: 2332
	{
		ScreenSpaceOverlay = 0,
		ScreenSpaceCamera = 1,
		WorldSpace = 2
	}

	[NativeClass] // 0x004E77BC-0x004E788C
	[NativeHeader] // 0x004E77BC-0x004E788C
	[NativeHeader] // 0x004E77BC-0x004E788C
	[RequireComponent] // 0x004E77BC-0x004E788C
	public sealed class Canvas : Behaviour // TypeDefIndex: 2333
	{
		// Fields
		[CompilerGenerated] // 0x004E792C-0x004E7968
		[DebuggerBrowsable] // 0x004E792C-0x004E7968
		private static WillRenderCanvases willRenderCanvases; // 0x00
	
		// Properties
		public RenderMode renderMode { get; set; } // 0x00FAA90C-0x00FAA94C 0x00FAA94C-0x00FAA99C
		public bool isRootCanvas { get; } // 0x00FAA99C-0x00FAA9DC 
		public float scaleFactor { get; set; } // 0x00FAA9DC-0x00FAAA1C 0x00FAAA1C-0x00FAAA6C
		public float referencePixelsPerUnit { get; set; } // 0x00FAAA6C-0x00FAAAAC 0x00FAAAAC-0x00FAAAFC
		public bool pixelPerfect { get; } // 0x00FAAAFC-0x00FAAB3C 
		public int renderOrder { get; } // 0x00FAAB3C-0x00FAAB7C 
		public bool overrideSorting { get; set; } // 0x00FAAB7C-0x00FAABBC 0x00FAABBC-0x00FAAC0C
		public int sortingOrder { get; set; } // 0x00FAAC0C-0x00FAAC4C 0x00FAAC4C-0x00FAAC9C
		public int targetDisplay { get; } // 0x00FAAC9C-0x00FAACDC 
		public int sortingLayerID { get; set; } // 0x00FAACDC-0x00FAAD1C 0x00FAAD1C-0x00FAAD6C
		public Canvas rootCanvas { get; } // 0x00FAAD6C-0x00FAADAC 
		[NativeProperty] // 0x004E7BDC-0x004E7C1C
		public Camera worldCamera { get; } // 0x00FAADAC-0x00FAADEC 
	
		// Events
		public static event WillRenderCanvases willRenderCanvases {
			add; // 0x00FAA79C-0x00FAA854
			remove; // 0x00FAA854-0x00FAA90C
		}
	
		// Nested types
		public delegate void WillRenderCanvases(); // TypeDefIndex: 2334; 0x00FAAEB8-0x00FAB0D4
	
		// Constructors
		public Canvas(); // 0x00FAA794-0x00FAA79C
	
		// Methods
		[FreeFunction] // 0x004E7A1C-0x004E7A54
		public static Material GetDefaultCanvasMaterial(); // 0x00FAADEC-0x00FAAE20
		[FreeFunction] // 0x004E7A54-0x004E7A8C
		public static Material GetETC1SupportedCanvasMaterial(); // 0x00FAAE20-0x00FAAE54
		public static void ForceUpdateCanvases(); // 0x00FAAE54-0x00FAAE58
		[RequiredByNativeCode] // 0x004E7A8C-0x004E7A9C
		private static void SendWillRenderCanvases(); // 0x00FAAE58-0x00FAAEB8
	}

	[NativeHeader] // 0x004E788C-0x004E78F0
	[StaticAccessor] // 0x004E788C-0x004E78F0
	public static class UISystemProfilerApi // TypeDefIndex: 2335
	{
		// Nested types
		public enum SampleType // TypeDefIndex: 2336
		{
			Layout = 0,
			Render = 1
		}
	
		// Methods
		public static void BeginSample(SampleType type); // 0x00FACC30-0x00FACC70
		public static void EndSample(SampleType type); // 0x00FACC70-0x00FACCB0
		public static void AddMarker(string name, UnityEngine.Object obj); // 0x00FACCB0-0x00FACD00
	}
}

namespace UnityEngine.Networking
{
	[NativeHeader] // 0x004E8DC8-0x004E8E38
	[NativeHeader] // 0x004E8DC8-0x004E8E38
	[UsedByNativeCode] // 0x004E8DC8-0x004E8E38
	public class UnityWebRequestAsyncOperation : AsyncOperation // TypeDefIndex: 2338
	{
		// Fields
		[CompilerGenerated] // 0x004E9000-0x004E903C
		[DebuggerBrowsable] // 0x004E9000-0x004E903C
		private UnityWebRequest _webRequest_k__BackingField; // 0x20
	
		// Properties
		internal UnityWebRequest webRequest { [CompilerGenerated] /* 0x004E9100-0x004E9110 */ set; } // 0x00F8F2D4-0x00F8F2DC
	
		// Constructors
		public UnityWebRequestAsyncOperation(); // 0x00F8F2CC-0x00F8F2D4
	}

	[NativeHeader] // 0x004E8E38-0x004E8E70
	public class UnityWebRequest : IDisposable // TypeDefIndex: 2339
	{
		// Fields
		[NonSerialized]
		internal IntPtr m_Ptr; // 0x10
		[NonSerialized]
		internal DownloadHandler m_DownloadHandler; // 0x18
		[NonSerialized]
		internal UploadHandler m_UploadHandler; // 0x20
		[NonSerialized]
		internal CertificateHandler m_CertificateHandler; // 0x28
		[NonSerialized]
		internal Uri m_Uri; // 0x30
		[CompilerGenerated] // 0x004E903C-0x004E9078
		[DebuggerBrowsable] // 0x004E903C-0x004E9078
		private bool _disposeCertificateHandlerOnDispose_k__BackingField; // 0x38
		[CompilerGenerated] // 0x004E9078-0x004E90B4
		[DebuggerBrowsable] // 0x004E9078-0x004E90B4
		private bool _disposeDownloadHandlerOnDispose_k__BackingField; // 0x39
		[CompilerGenerated] // 0x004E90B4-0x004E90F0
		[DebuggerBrowsable] // 0x004E90B4-0x004E90F0
		private bool _disposeUploadHandlerOnDispose_k__BackingField; // 0x3A
	
		// Properties
		public bool disposeCertificateHandlerOnDispose { [CompilerGenerated] /* 0x004E917C-0x004E918C */ get; [CompilerGenerated] /* 0x004E918C-0x004E919C */ set; } // 0x00F8C78C-0x00F8C794 0x00F8C794-0x00F8C7A0
		public bool disposeDownloadHandlerOnDispose { [CompilerGenerated] /* 0x004E919C-0x004E91AC */ get; [CompilerGenerated] /* 0x004E91AC-0x004E91BC */ set; } // 0x00F8C7A0-0x00F8C7A8 0x00F8C7A8-0x00F8C7B4
		public bool disposeUploadHandlerOnDispose { [CompilerGenerated] /* 0x004E91BC-0x004E91CC */ get; [CompilerGenerated] /* 0x004E91CC-0x004E91DC */ set; } // 0x00F8C7B4-0x00F8C7BC 0x00F8C7BC-0x00F8C7C8
		public string method { set; } // 0x00F8C290-0x00F8C404
		public string error { get; } // 0x00F8CED8-0x00F8D0D0 
		public string url { get; set; } // 0x00F8D190-0x00F8D1D0 0x00F8C204-0x00F8C290
		public long responseCode { get; } // 0x00F8D150-0x00F8D190 
		public bool isModifiable { [NativeMethod] /* 0x004E9254-0x004E928C */ get; } // 0x00F8CCDC-0x00F8CD1C 
		public bool isDone { [NativeMethod] /* 0x004E928C-0x004E92C4 */ get; } // 0x00F8D768-0x00F8D7A8 
		public bool isNetworkError { [NativeMethod] /* 0x004E92C4-0x004E92FC */ get; } // 0x00F8D0D0-0x00F8D110 
		public bool isHttpError { [NativeMethod] /* 0x004E92FC-0x004E9334 */ get; } // 0x00F8D110-0x00F8D150 
		public float downloadProgress { get; } // 0x00F8D7E8-0x00F8D890 
		public bool chunkedTransfer { set; } // 0x00F8D8E0-0x00F8DA0C
		public UploadHandler uploadHandler { get; set; } // 0x00F8CA44-0x00F8CA4C 0x00F8C5DC-0x00F8C70C
		public DownloadHandler downloadHandler { get; set; } // 0x00F8CA3C-0x00F8CA44 0x00F8C4AC-0x00F8C5DC
		public CertificateHandler certificateHandler { get; } // 0x00F8CACC-0x00F8CAD4 
	
		// Nested types
		internal enum UnityWebRequestMethod // TypeDefIndex: 2340
		{
			Get = 0,
			Post = 1,
			Put = 2,
			Head = 3,
			Custom = 4
		}
	
		internal enum UnityWebRequestError // TypeDefIndex: 2341
		{
			OK = 0,
			Unknown = 1,
			SDKError = 2,
			UnsupportedProtocol = 3,
			MalformattedUrl = 4,
			CannotResolveProxy = 5,
			CannotResolveHost = 6,
			CannotConnectToHost = 7,
			AccessDenied = 8,
			GenericHttpError = 9,
			WriteError = 10,
			ReadError = 11,
			OutOfMemory = 12,
			Timeout = 13,
			HTTPPostError = 14,
			SSLCannotConnect = 15,
			Aborted = 16,
			TooManyRedirects = 17,
			ReceivedNoData = 18,
			SSLNotSupported = 19,
			FailedToSendData = 20,
			FailedToReceiveData = 21,
			SSLCertificateError = 22,
			SSLCipherNotAvailable = 23,
			SSLCACertError = 24,
			UnrecognizedContentEncoding = 25,
			LoginFailed = 26,
			SSLShutdownFailed = 27,
			NoInternetConnection = 28
		}
	
		// Constructors
		public UnityWebRequest(string url, string method); // 0x00F8C13C-0x00F8C1BC
		public UnityWebRequest(string url, string method, DownloadHandler downloadHandler, UploadHandler uploadHandler); // 0x00F8C404-0x00F8C4AC
	
		// Methods
		[NativeConditional] // 0x004E9110-0x004E916C
		[NativeMethod] // 0x004E9110-0x004E916C
		private static string GetWebErrorString(UnityWebRequestError err); // 0x00F8C70C-0x00F8C74C
		[VisibleToOtherModules] // 0x004E916C-0x004E917C
		internal static string GetHTTPStatusString(long responseCode); // 0x00F8C74C-0x00F8C78C
		internal static IntPtr Create(); // 0x00F8C1BC-0x00F8C1F0
		[NativeMethod] // 0x004E91DC-0x004E9210
		private void Release(); // 0x00F8C7C8-0x00F8C808
		internal void InternalDestroy(); // 0x00F8C808-0x00F8C8B0
		private void InternalSetDefaults(); // 0x00F8C1F0-0x00F8C204
		~UnityWebRequest(); // 0x00F8C8F0-0x00F8C964
		public void Dispose(); // 0x00F8C9C4-0x00F8CA3C
		private void DisposeHandlers(); // 0x00F8C964-0x00F8C9C4
		[NativeThrows] // 0x004E9210-0x004E9220
		internal UnityWebRequestAsyncOperation BeginWebRequest(); // 0x00F8CAD4-0x00F8CB14
		public UnityWebRequestAsyncOperation SendWebRequest(); // 0x00F8CB14-0x00F8CB60
		[NativeMethod] // 0x004E9220-0x004E9254
		public void Abort(); // 0x00F8C8B0-0x00F8C8F0
		private UnityWebRequestError SetMethod(UnityWebRequestMethod methodType); // 0x00F8CB60-0x00F8CBB0
		internal void InternalSetMethod(UnityWebRequestMethod methodType); // 0x00F8CBB0-0x00F8CCDC
		private UnityWebRequestError SetCustomMethod(string customMethodName); // 0x00F8CD1C-0x00F8CD6C
		internal void InternalSetCustomMethod(string customMethodName); // 0x00F8CD6C-0x00F8CE98
		private UnityWebRequestError GetError(); // 0x00F8CE98-0x00F8CED8
		private string GetUrl(); // 0x00F8D1D0-0x00F8D210
		private UnityWebRequestError SetUrl(string url); // 0x00F8D6D8-0x00F8D728
		private void InternalSetUrl(string url); // 0x00F8D5AC-0x00F8D6D8
		private bool IsExecuting(); // 0x00F8D728-0x00F8D768
		private float GetDownloadProgress(); // 0x00F8D7A8-0x00F8D7E8
		private UnityWebRequestError SetChunked(bool chunked); // 0x00F8D890-0x00F8D8E0
		[NativeMethod] // 0x004E9334-0x004E936C
		internal UnityWebRequestError InternalSetRequestHeader(string name, string value); // 0x00F8DA0C-0x00F8DA64
		public void SetRequestHeader(string name, string value); // 0x00F8DA64-0x00F8DBF4
		private UnityWebRequestError SetUploadHandler(UploadHandler uh); // 0x00F8DBF4-0x00F8DC44
		private UnityWebRequestError SetDownloadHandler(DownloadHandler dh); // 0x00F8DC44-0x00F8DC94
		public static UnityWebRequest Get(string uri); // 0x00F8DC94-0x00F8DD28
		public static UnityWebRequest Post(string uri, WWWForm formData); // 0x00F8DD28-0x00F8DDAC
		private static void SetupPost(UnityWebRequest request, WWWForm formData); // 0x00F8DDAC-0x00F8DF38
	}
}

namespace UnityEngine
{
	public class WWWForm // TypeDefIndex: 2342
	{
		// Fields
		private List<byte[]> formData; // 0x10
		private List<string> fieldNames; // 0x18
		private List<string> fileNames; // 0x20
		private List<string> types; // 0x28
		private byte[] boundary; // 0x30
		private bool containsFiles; // 0x38
	
		// Properties
		internal static Encoding DefaultEncoding { get; } // 0x00F8F53C-0x00F8F544 
		public Dictionary<string, string> headers { get; } // 0x00F8F1AC-0x00F8F2CC 
		public byte[] data { get; } // 0x00F8DF38-0x00F8F0D8 
	
		// Constructors
		public WWWForm(); // 0x00F8F3E0-0x00F8F53C
	
		// Methods
		public void AddField(string fieldName, string value); // 0x00F8F544-0x00F8F588
		public void AddField(string fieldName, string value, Encoding e); // 0x00F8F588-0x00F8F6A8
		public void AddField(string fieldName, int i); // 0x00F8F6A8-0x00F8F700
	}

	[VisibleToOtherModules] // 0x004E8E70-0x004E8EE8
	internal class WWWTranscoder // TypeDefIndex: 2343
	{
		// Fields
		private static byte[] ucHexChars; // 0x00
		private static byte[] lcHexChars; // 0x08
		private static byte urlEscapeChar; // 0x10
		private static byte[] urlSpace; // 0x18
		private static byte[] dataSpace; // 0x20
		private static byte[] urlForbidden; // 0x28
		private static byte qpEscapeChar; // 0x30
		private static byte[] qpSpace; // 0x38
		private static byte[] qpForbidden; // 0x40
	
		// Constructors
		static WWWTranscoder(); // 0x00F902C4-0x00F90498
	
		// Methods
		private static byte Hex2Byte(byte[] b, int offset); // 0x00F8F8F4-0x00F8F9C4
		private static byte[] Byte2Hex(byte b, byte[] hexChars); // 0x00F8F9C4-0x00F8FA94
		public static byte[] DataEncode(byte[] toEncode); // 0x00F8F87C-0x00F8F8F4
		public static string QPEncode(string toEncode, Encoding e); // 0x00F8F79C-0x00F8F87C
		public static byte[] Encode(byte[] input, byte escapeChar, byte[] space, byte[] forbidden, bool uppercase); // 0x00F8FA94-0x00F8FE10
		private static bool ByteArrayContains(byte[] array, byte b); // 0x00F8FE10-0x00F8FE78
		public static byte[] URLDecode(byte[] toEncode); // 0x00F8FE78-0x00F8FEEC
		private static bool ByteSubArrayEquals(byte[] array, int index, byte[] comperand); // 0x00F901BC-0x00F90258
		public static byte[] Decode(byte[] input, byte escapeChar, byte[] space); // 0x00F8FEEC-0x00F901BC
		public static bool SevenBitClean(string s, Encoding e); // 0x00F8F700-0x00F8F79C
		public static bool SevenBitClean(byte[] input); // 0x00F90258-0x00F902C4
	}
}

namespace UnityEngineInternal
{
	internal static class WebRequestUtils // TypeDefIndex: 2344
	{
		// Fields
		private static Regex domainRegex; // 0x00
	
		// Constructors
		static WebRequestUtils(); // 0x00F909E0-0x00F91BF8
	
		// Methods
		[RequiredByNativeCode] // 0x004E936C-0x004E937C
		internal static string RedirectTo(string baseUri, string redirectUri); // 0x00F90498-0x00F905A4
		internal static string MakeInitialUrl(string targetUrl, string localUrl); // 0x00F8D210-0x00F8D5AC
		internal static string MakeUriString(Uri targetUri, string targetUrl, bool prependProtocol); // 0x00F905A4-0x00F9092C
		private static string URLDecode(string encoded); // 0x00F9092C-0x00F909E0
	}
}

namespace UnityEngine.Networking
{
	[NativeHeader] // 0x004E8EE8-0x004E8F20
	public class CertificateHandler // TypeDefIndex: 2345
	{
		// Fields
		[NonSerialized]
		internal IntPtr m_Ptr; // 0x10
	
		// Methods
		[NativeMethod] // 0x004E937C-0x004E93B0
		private void Release(); // 0x00F8B9A8-0x00F8B9E8
		~CertificateHandler(); // 0x00F8B9E8-0x00F8BA54
		protected virtual bool ValidateCertificate(byte[] certificateData); // 0x00F8BAD4-0x00F8BADC
		[RequiredByNativeCode] // 0x004E93B0-0x004E93C0
		internal bool ValidateCertificateNative(byte[] certificateData); // 0x00F8BADC-0x00F8BAE8
		public void Dispose(); // 0x00F8BA54-0x00F8BAD4
	}

	[NativeHeader] // 0x004E8F20-0x004E8F58
	public class DownloadHandler : IDisposable // TypeDefIndex: 2346
	{
		// Fields
		[NonSerialized]
		[VisibleToOtherModules] // 0x004E90F0-0x004E9100
		internal IntPtr m_Ptr; // 0x10
	
		// Properties
		public byte[] data { get; } // 0x00F8BC1C-0x00F8BC28 
		public string text { get; } // 0x00F8BC28-0x00F8BC34 
	
		// Constructors
		[VisibleToOtherModules] // 0x004E93C0-0x004E93D0
		internal DownloadHandler(); // 0x00F8BAE8-0x00F8BAF0
	
		// Methods
		[NativeMethod] // 0x004E93D0-0x004E9404
		private void Release(); // 0x00F8BAF0-0x00F8BB30
		~DownloadHandler(); // 0x00F8BB30-0x00F8BB9C
		public void Dispose(); // 0x00F8BB9C-0x00F8BC1C
		protected virtual byte[] GetData(); // 0x00F8BC34-0x00F8BC3C
		protected virtual string GetText(); // 0x00F8BC3C-0x00F8BCE0
		private Encoding GetTextEncoder(); // 0x00F8BCE0-0x00F8BF64
		private string GetContentType(); // 0x00F8BF64-0x00F8BFA4
		[NativeThrows] // 0x004E9404-0x004E943C
		[VisibleToOtherModules] // 0x004E9404-0x004E943C
		internal static byte[] InternalGetByteArray(DownloadHandler dh); // 0x00F8BFA4-0x00F8BFE4
	}

	[NativeHeader] // 0x004E8F58-0x004E8F90
	public sealed class DownloadHandlerBuffer : DownloadHandler // TypeDefIndex: 2347
	{
		// Constructors
		public DownloadHandlerBuffer(); // 0x00F8BFE4-0x00F8C034
	
		// Methods
		private static IntPtr Create(DownloadHandlerBuffer obj); // 0x00F8C07C-0x00F8C0BC
		private void InternalCreateBuffer(); // 0x00F8C034-0x00F8C07C
		protected override byte[] GetData(); // 0x00F8C0BC-0x00F8C0FC
		private byte[] InternalGetData(); // 0x00F8C0FC-0x00F8C13C
	}

	[NativeHeader] // 0x004E8F90-0x004E8FC8
	public class UploadHandler : IDisposable // TypeDefIndex: 2348
	{
		// Fields
		[NonSerialized]
		internal IntPtr m_Ptr; // 0x10
	
		// Constructors
		internal UploadHandler(); // 0x00F8F2DC-0x00F8F2E4
	
		// Methods
		[NativeMethod] // 0x004E943C-0x004E9470
		private void Release(); // 0x00F8F2E4-0x00F8F324
		~UploadHandler(); // 0x00F8F324-0x00F8F390
		public void Dispose(); // 0x00F8CA4C-0x00F8CACC
	}

	[NativeHeader] // 0x004E8FC8-0x004E9000
	public sealed class UploadHandlerRaw : UploadHandler // TypeDefIndex: 2349
	{
		// Constructors
		public UploadHandlerRaw(byte[] data); // 0x00F8F0D8-0x00F8F1AC
	
		// Methods
		private static IntPtr Create(UploadHandlerRaw self, byte[] data); // 0x00F8F390-0x00F8F3E0
	}
}

namespace UnityEngine.Experimental.XR
{
	[NativeHeader] // 0x004EA6BC-0x004EA708
	[UsedByNativeCode] // 0x004EA6BC-0x004EA708
	public struct TrackableId : IEquatable<TrackableId> // TypeDefIndex: 2351
	{
		// Fields
		private static TrackableId s_InvalidId; // 0x00
		private ulong m_SubId1; // 0x00
		private ulong m_SubId2; // 0x08
	
		// Constructors
		static TrackableId(); // 0x00F83A78-0x00F83AC8
	
		// Methods
		public override string ToString(); // 0x00595E50-0x00595E58
		public override int GetHashCode(); // 0x00595E58-0x00595E94
		public override bool Equals(object obj); // 0x00595E94-0x00595E9C
		public bool Equals(TrackableId other); // 0x00595E9C-0x00595F20
	}
}

namespace UnityEngine
{
	public interface ISubsystemDescriptor // TypeDefIndex: 2352
	{
	}

	internal interface ISubsystemDescriptorImpl : ISubsystemDescriptor // TypeDefIndex: 2353
	{
		// Properties
		IntPtr ptr { set; }
	}

	[UsedByNativeCode] // 0x004EA708-0x004EA740
	public abstract class IntegratedSubsystemDescriptor : ISubsystemDescriptorImpl // TypeDefIndex: 2354
	{
		// Fields
		internal IntPtr m_Ptr; // 0x10
	
		// Properties
		IntPtr ISubsystemDescriptorImpl.ptr { set; } // 0x00F8492C-0x00F84934
	
		// Constructors
		protected IntegratedSubsystemDescriptor(); // 0x00F84924-0x00F8492C
	}

	public abstract class SubsystemDescriptor : ISubsystemDescriptor // TypeDefIndex: 2355
	{
		// Fields
		[CompilerGenerated] // 0x004EBB20-0x004EBB5C
		[DebuggerBrowsable] // 0x004EBB20-0x004EBB5C
		private string _id_k__BackingField; // 0x10
	
		// Properties
		public string id { [CompilerGenerated] /* 0x004ECE18-0x004ECE28 */ get; } // 0x00F84B04-0x00F84B0C 
	
		// Constructors
		protected SubsystemDescriptor(); // 0x00F85434-0x00F8543C
	}

	[NativeType] // 0x004EA740-0x004EA7A0
	[UsedByNativeCode] // 0x004EA740-0x004EA7A0
	public class IntegratedSubsystemDescriptor<TSubsystem> : IntegratedSubsystemDescriptor // TypeDefIndex: 2356
		where TSubsystem : IntegratedSubsystem
	{
		// Constructors
		public IntegratedSubsystemDescriptor();
	}

	internal static class Internal_SubsystemInstances // TypeDefIndex: 2357
	{
		// Fields
		internal static List<ISubsystem> s_IntegratedSubsystemInstances; // 0x00
		internal static List<ISubsystem> s_StandaloneSubsystemInstances; // 0x08
	
		// Constructors
		static Internal_SubsystemInstances(); // 0x00F85398-0x00F85434
	
		// Methods
		[RequiredByNativeCode] // 0x004ECE28-0x004ECE38
		internal static void Internal_InitializeManagedInstance(IntPtr ptr, IntegratedSubsystem inst); // 0x00F84EC0-0x00F84F88
		[RequiredByNativeCode] // 0x004ECE38-0x004ECE48
		internal static void Internal_ClearManagedInstances(); // 0x00F84F88-0x00F85160
		[RequiredByNativeCode] // 0x004ECE48-0x004ECE58
		internal static void Internal_RemoveInstanceByPtr(IntPtr ptr); // 0x00F85160-0x00F85398
	}

	[NativeHeader] // 0x004EA7A0-0x004EA7D8
	internal static class Internal_SubsystemDescriptors // TypeDefIndex: 2358
	{
		// Fields
		internal static List<ISubsystemDescriptorImpl> s_IntegratedSubsystemDescriptors; // 0x00
		internal static List<ISubsystemDescriptor> s_StandaloneSubsystemDescriptors; // 0x08
	
		// Constructors
		static Internal_SubsystemDescriptors(); // 0x00F84E1C-0x00F84EC0
	
		// Methods
		[RequiredByNativeCode] // 0x004ECE58-0x004ECE68
		internal static bool Internal_AddDescriptor(SubsystemDescriptor descriptor); // 0x00F84934-0x00F84B04
		[RequiredByNativeCode] // 0x004ECE68-0x004ECE78
		internal static void Internal_InitializeManagedDescriptor(IntPtr ptr, ISubsystemDescriptorImpl desc); // 0x00F84B4C-0x00F84C50
		[RequiredByNativeCode] // 0x004ECE78-0x004ECE88
		internal static void Internal_ClearManagedDescriptors(); // 0x00F84C50-0x00F84E1C
	}

	[NativeHeader] // 0x004EA7D8-0x004EA83C
	[NativeType] // 0x004EA7D8-0x004EA83C
	public static class SubsystemManager // TypeDefIndex: 2359
	{
		// Fields
		[CompilerGenerated] // 0x004EBB5C-0x004EBB98
		[DebuggerBrowsable] // 0x004EBB5C-0x004EBB98
		private static Action reloadSubsytemsStarted; // 0x00
		[CompilerGenerated] // 0x004EBB98-0x004EBBD4
		[DebuggerBrowsable] // 0x004EBB98-0x004EBBD4
		private static Action reloadSubsytemsCompleted; // 0x08
	
		// Constructors
		static SubsystemManager(); // 0x00F8543C-0x00F85470
	
		// Methods
		[NativeConditional] // 0x004ECE88-0x004ECEC0
		internal static void ReportSingleSubsystemAnalytics(string id); // 0x00F84B0C-0x00F84B4C
		[NativeConditional] // 0x004ECEC0-0x004ECEF8
		internal static void StaticConstructScriptingClassMap(); // 0x00F85470-0x00F854A4
		[RequiredByNativeCode] // 0x004ECEF8-0x004ECF08
		private static void Internal_ReloadSubsystemsStarted(); // 0x00F854A4-0x00F85550
		[RequiredByNativeCode] // 0x004ECF08-0x004ECF18
		private static void Internal_ReloadSubsystemsCompleted(); // 0x00F85550-0x00F85AA4
	}

	public interface ISubsystem // TypeDefIndex: 2360
	{
	}

	[NativeType] // 0x004EA83C-0x004EA88C
	[UsedByNativeCode] // 0x004EA83C-0x004EA88C
	public class IntegratedSubsystem : ISubsystem // TypeDefIndex: 2361
	{
		// Fields
		internal IntPtr m_Ptr; // 0x10
		internal ISubsystemDescriptor m_subsystemDescriptor; // 0x18
	
		// Constructors
		public IntegratedSubsystem(); // 0x00F848CC-0x00F848D4
	
		// Methods
		internal void SetHandle(IntegratedSubsystem inst); // 0x00F848D4-0x00F84924
	}

	[UsedByNativeCode] // 0x004EA88C-0x004EA8C4
	public class IntegratedSubsystem<TSubsystemDescriptor> : IntegratedSubsystem // TypeDefIndex: 2362
		where TSubsystemDescriptor : ISubsystemDescriptor
	{
		// Constructors
		public IntegratedSubsystem();
	}
}

namespace UnityEngine.XR
{
	[NativeConditional] // 0x004EA8C4-0x004EA95C
	[NativeHeader] // 0x004EA8C4-0x004EA95C
	[RequiredByNativeCode] // 0x004EA8C4-0x004EA95C
	[StaticAccessor] // 0x004EA8C4-0x004EA95C
	public static class InputTracking // TypeDefIndex: 2363
	{
		// Fields
		[CompilerGenerated] // 0x004EBBD4-0x004EBC10
		[DebuggerBrowsable] // 0x004EBBD4-0x004EBC10
		private static Action<XRNodeState> trackingAcquired; // 0x00
		[CompilerGenerated] // 0x004EBC10-0x004EBC4C
		[DebuggerBrowsable] // 0x004EBC10-0x004EBC4C
		private static Action<XRNodeState> trackingLost; // 0x08
		[CompilerGenerated] // 0x004EBC4C-0x004EBC88
		[DebuggerBrowsable] // 0x004EBC4C-0x004EBC88
		private static Action<XRNodeState> nodeAdded; // 0x10
		[CompilerGenerated] // 0x004EBC88-0x004EBCC4
		[DebuggerBrowsable] // 0x004EBC88-0x004EBCC4
		private static Action<XRNodeState> nodeRemoved; // 0x18
	
		// Nested types
		private enum TrackingStateEventType // TypeDefIndex: 2364
		{
			NodeAdded = 0,
			NodeRemoved = 1,
			TrackingAcquired = 2,
			TrackingLost = 3
		}
	
		// Constructors
		static InputTracking(); // 0x00F85CC8-0x00F86D34
	
		// Methods
		[RequiredByNativeCode] // 0x004ECF18-0x004ECF28
		private static void InvokeTrackingEvent(TrackingStateEventType eventType, XRNode nodeType, long uniqueID, bool tracked); // 0x00F85AA4-0x00F85CC8
	}

	public enum XRNode // TypeDefIndex: 2365
	{
		LeftEye = 0,
		RightEye = 1,
		CenterEye = 2,
		Head = 3,
		LeftHand = 4,
		RightHand = 5,
		GameController = 6,
		TrackingReference = 7,
		HardwareTracker = 8
	}

	[Flags] // 0x004EA95C-0x004EA96C
	internal enum AvailableTrackingData // TypeDefIndex: 2366
	{
		None = 0,
		PositionAvailable = 1,
		RotationAvailable = 2,
		VelocityAvailable = 4,
		AngularVelocityAvailable = 8,
		AccelerationAvailable = 16,
		AngularAccelerationAvailable = 32
	}

	[UsedByNativeCode] // 0x004EA96C-0x004EA97C
	public struct XRNodeState // TypeDefIndex: 2367
	{
		// Fields
		private XRNode m_Type; // 0x00
		private AvailableTrackingData m_AvailableFields; // 0x04
		private Vector3 m_Position; // 0x08
		private Quaternion m_Rotation; // 0x14
		private Vector3 m_Velocity; // 0x24
		private Vector3 m_AngularVelocity; // 0x30
		private Vector3 m_Acceleration; // 0x3C
		private Vector3 m_AngularAcceleration; // 0x48
		private int m_Tracked; // 0x54
		private ulong m_UniqueID; // 0x58
	
		// Properties
		public ulong uniqueID { set; } // 0x005960E0-0x005960E8
		public XRNode nodeType { set; } // 0x005960E8-0x005960F0
		public bool tracked { set; } // 0x005960F0-0x00596140
	}

	internal enum InputFeatureType : uint // TypeDefIndex: 2368
	{
		Custom = 0,
		Binary = 1,
		DiscreteStates = 2,
		Axis1D = 3,
		Axis2D = 4,
		Axis3D = 5,
		Rotation = 6,
		Hand = 7,
		Bone = 8,
		Eyes = 9,
		kUnityXRInputFeatureTypeInvalid = 4294967295
	}

	[NativeConditional] // 0x004EA97C-0x004EA9EC
	[NativeHeader] // 0x004EA97C-0x004EA9EC
	[RequiredByNativeCode] // 0x004EA97C-0x004EA9EC
	public struct InputFeatureUsage : IEquatable<InputFeatureUsage> // TypeDefIndex: 2369
	{
		// Fields
		internal string m_Name; // 0x00
		[NativeName] // 0x004EBCC4-0x004EBCFC
		internal InputFeatureType m_InternalType; // 0x08
	
		// Properties
		public string name { get; } // 0x0059607C-0x00596084 
		internal InputFeatureType internalType { get; } // 0x00596084-0x0059608C 
	
		// Methods
		public override bool Equals(object obj); // 0x0059608C-0x00596094
		public bool Equals(InputFeatureUsage other); // 0x00596094-0x005960D8
		public override int GetHashCode(); // 0x005960D8-0x005960E0
	}

	[NativeConditional] // 0x004EA9EC-0x004EAACC
	[NativeHeader] // 0x004EA9EC-0x004EAACC
	[NativeHeader] // 0x004EA9EC-0x004EAACC
	[NativeHeader] // 0x004EA9EC-0x004EAACC
	[RequiredByNativeCode] // 0x004EA9EC-0x004EAACC
	[StaticAccessor] // 0x004EA9EC-0x004EAACC
	public struct Hand : IEquatable<Hand> // TypeDefIndex: 2370
	{
		// Fields
		private ulong m_DeviceId; // 0x00
		private uint m_FeatureIndex; // 0x08
	
		// Properties
		internal ulong deviceId { get; } // 0x00595FA8-0x00595FB0 
		internal uint featureIndex { get; } // 0x00595FB0-0x00595FB8 
	
		// Methods
		public override bool Equals(object obj); // 0x00595FB8-0x00595FC0
		public bool Equals(Hand other); // 0x00595FC0-0x00595FE4
		public override int GetHashCode(); // 0x00595FE4-0x0059607C
	}

	[NativeConditional] // 0x004EAACC-0x004EABAC
	[NativeHeader] // 0x004EAACC-0x004EABAC
	[NativeHeader] // 0x004EAACC-0x004EABAC
	[NativeHeader] // 0x004EAACC-0x004EABAC
	[RequiredByNativeCode] // 0x004EAACC-0x004EABAC
	[StaticAccessor] // 0x004EAACC-0x004EABAC
	public struct Eyes : IEquatable<Eyes> // TypeDefIndex: 2371
	{
		// Fields
		private ulong m_DeviceId; // 0x00
		private uint m_FeatureIndex; // 0x08
	
		// Properties
		internal ulong deviceId { get; } // 0x00595F64-0x00595F6C 
		internal uint featureIndex { get; } // 0x00595F6C-0x00595F74 
	
		// Methods
		public override bool Equals(object obj); // 0x00595F74-0x00595F7C
		public bool Equals(Eyes other); // 0x00595F7C-0x00595FA0
		public override int GetHashCode(); // 0x00595FA0-0x00595FA8
	}

	[NativeConditional] // 0x004EABAC-0x004EAC8C
	[NativeHeader] // 0x004EABAC-0x004EAC8C
	[NativeHeader] // 0x004EABAC-0x004EAC8C
	[NativeHeader] // 0x004EABAC-0x004EAC8C
	[RequiredByNativeCode] // 0x004EABAC-0x004EAC8C
	[StaticAccessor] // 0x004EABAC-0x004EAC8C
	public struct Bone : IEquatable<Bone> // TypeDefIndex: 2372
	{
		// Fields
		private ulong m_DeviceId; // 0x00
		private uint m_FeatureIndex; // 0x08
	
		// Properties
		internal ulong deviceId { get; } // 0x00595F20-0x00595F28 
		internal uint featureIndex { get; } // 0x00595F28-0x00595F30 
	
		// Methods
		public override bool Equals(object obj); // 0x00595F30-0x00595F38
		public bool Equals(Bone other); // 0x00595F38-0x00595F5C
		public override int GetHashCode(); // 0x00595F5C-0x00595F64
	}
}

namespace UnityEngine.Experimental.XR
{
	public struct FrameReceivedEventArgs // TypeDefIndex: 2373
	{
		// Fields
		internal XRCameraSubsystem m_CameraSubsystem; // 0x00
	}

	[NativeConditional] // 0x004EAC8C-0x004EAD20
	[NativeHeader] // 0x004EAC8C-0x004EAD20
	[NativeType] // 0x004EAC8C-0x004EAD20
	[UsedByNativeCode] // 0x004EAC8C-0x004EAD20
	public class XRCameraSubsystem : IntegratedSubsystem<XRCameraSubsystemDescriptor> // TypeDefIndex: 2374
	{
		// Fields
		[CompilerGenerated] // 0x004EBCFC-0x004EBD38
		[DebuggerBrowsable] // 0x004EBCFC-0x004EBD38
		private Action<FrameReceivedEventArgs> FrameReceived; // 0x20
	
		// Constructors
		public XRCameraSubsystem(); // 0x00F83AC8-0x00F83B18
	
		// Methods
		[RequiredByNativeCode] // 0x004ECF28-0x004ECF38
		private void InvokeFrameReceivedEvent(); // 0x00F83B18-0x00F83B7C
	}

	[NativeConditional] // 0x004EAD20-0x004EADB4
	[NativeHeader] // 0x004EAD20-0x004EADB4
	[NativeType] // 0x004EAD20-0x004EADB4
	[UsedByNativeCode] // 0x004EAD20-0x004EADB4
	public class XRCameraSubsystemDescriptor : IntegratedSubsystemDescriptor<XRCameraSubsystem> // TypeDefIndex: 2375
	{
		// Constructors
		public XRCameraSubsystemDescriptor(); // 0x00F83B7C-0x00F83BCC
	}

	public struct PointCloudUpdatedEventArgs // TypeDefIndex: 2376
	{
		// Fields
		internal XRDepthSubsystem m_DepthSubsystem; // 0x00
	}

	[NativeConditional] // 0x004EADB4-0x004EAE48
	[NativeHeader] // 0x004EADB4-0x004EAE48
	[NativeHeader] // 0x004EADB4-0x004EAE48
	[UsedByNativeCode] // 0x004EADB4-0x004EAE48
	public class XRDepthSubsystem : IntegratedSubsystem<XRDepthSubsystemDescriptor> // TypeDefIndex: 2377
	{
		// Fields
		[CompilerGenerated] // 0x004EBD38-0x004EBD74
		[DebuggerBrowsable] // 0x004EBD38-0x004EBD74
		private Action<PointCloudUpdatedEventArgs> PointCloudUpdated; // 0x20
	
		// Constructors
		public XRDepthSubsystem(); // 0x00F83BCC-0x00F83C1C
	
		// Methods
		[RequiredByNativeCode] // 0x004ECF38-0x004ECF48
		private void InvokePointCloudUpdatedEvent(); // 0x00F83C1C-0x00F83C80
	}

	[NativeConditional] // 0x004EAE48-0x004EAEDC
	[NativeHeader] // 0x004EAE48-0x004EAEDC
	[NativeType] // 0x004EAE48-0x004EAEDC
	[UsedByNativeCode] // 0x004EAE48-0x004EAEDC
	public class XRDepthSubsystemDescriptor : IntegratedSubsystemDescriptor<XRDepthSubsystem> // TypeDefIndex: 2378
	{
		// Constructors
		public XRDepthSubsystemDescriptor(); // 0x00F83C80-0x00F83CD0
	}

	[NativeConditional] // 0x004EAEDC-0x004EAF70
	[NativeHeader] // 0x004EAEDC-0x004EAF70
	[NativeType] // 0x004EAEDC-0x004EAF70
	[UsedByNativeCode] // 0x004EAEDC-0x004EAF70
	public class XRDisplaySubsystem : IntegratedSubsystem<XRDisplaySubsystemDescriptor> // TypeDefIndex: 2379
	{
		// Fields
		[CompilerGenerated] // 0x004EBD74-0x004EBDB0
		[DebuggerBrowsable] // 0x004EBD74-0x004EBDB0
		private static Action<bool> displayFocusChanged; // 0x00
	
		// Constructors
		public XRDisplaySubsystem(); // 0x00F83CD0-0x00F83D20
	
		// Methods
		[RequiredByNativeCode] // 0x004ECF48-0x004ECF58
		private static void InvokeDisplayFocusChanged(bool focus); // 0x00F83D20-0x00F83D94
	}

	[NativeHeader] // 0x004EAF70-0x004EAFE4
	[NativeType] // 0x004EAF70-0x004EAFE4
	[UsedByNativeCode] // 0x004EAF70-0x004EAFE4
	public class XRDisplaySubsystemDescriptor : IntegratedSubsystemDescriptor<XRDisplaySubsystem> // TypeDefIndex: 2380
	{
		// Constructors
		public XRDisplaySubsystemDescriptor(); // 0x00F83D94-0x00F83DE4
	}

	[NativeConditional] // 0x004EAFE4-0x004EB078
	[NativeHeader] // 0x004EAFE4-0x004EB078
	[NativeHeader] // 0x004EAFE4-0x004EB078
	[UsedByNativeCode] // 0x004EAFE4-0x004EB078
	public class XRExperienceSubsystem : IntegratedSubsystem<XRExperienceSubsystemDescriptor> // TypeDefIndex: 2381
	{
		// Fields
		[CompilerGenerated] // 0x004EBDB0-0x004EBDEC
		[DebuggerBrowsable] // 0x004EBDB0-0x004EBDEC
		private Action ExperienceTypeChanged; // 0x20
		[CompilerGenerated] // 0x004EBDEC-0x004EBE28
		[DebuggerBrowsable] // 0x004EBDEC-0x004EBE28
		private Action BoundaryChanged; // 0x28
	
		// Constructors
		public XRExperienceSubsystem(); // 0x00F83DE4-0x00F83E34
	
		// Methods
		[RequiredByNativeCode] // 0x004ECF58-0x004ECF68
		private void InvokeExperienceTypeChanged(); // 0x00F83E34-0x00F83E48
		[RequiredByNativeCode] // 0x004ECF68-0x004ECF78
		private void InvokeBoundaryChanged(); // 0x00F83E48-0x00F83E5C
	}

	[NativeHeader] // 0x004EB078-0x004EB0EC
	[NativeType] // 0x004EB078-0x004EB0EC
	[UsedByNativeCode] // 0x004EB078-0x004EB0EC
	public class XRExperienceSubsystemDescriptor : IntegratedSubsystemDescriptor<XRExperienceSubsystem> // TypeDefIndex: 2382
	{
		// Constructors
		public XRExperienceSubsystemDescriptor(); // 0x00F83E5C-0x00F83EAC
	}

	[UsedByNativeCode] // 0x004EB0EC-0x004EB0FC
	public enum GestureEventState : uint // TypeDefIndex: 2383
	{
		Discrete = 0,
		Started = 1,
		Updated = 2,
		Completed = 3,
		Canceled = 4
	}

	[Flags] // 0x004EB0FC-0x004EB10C
	public enum GestureTrackingCoordinates : uint // TypeDefIndex: 2384
	{
		None = 0,
		X = 1,
		Y = 2,
		Z = 4
	}

	[Flags] // 0x004EB10C-0x004EB11C
	public enum GestureHoldValidFields : uint // TypeDefIndex: 2385
	{
		None = 0,
		Time = 1,
		DeviceId = 2,
		PointerPose = 4
	}

	[NativeConditional] // 0x004EB11C-0x004EB18C
	[NativeType] // 0x004EB11C-0x004EB18C
	[UsedByNativeCode] // 0x004EB11C-0x004EB18C
	internal struct NativeGestureHoldEvent // TypeDefIndex: 2386
	{
		// Fields
		[CompilerGenerated] // 0x004EBE28-0x004EBE64
		[DebuggerBrowsable] // 0x004EBE28-0x004EBE64
		private GestureEventState _eventState_k__BackingField; // 0x00
		[CompilerGenerated] // 0x004EBE64-0x004EBEA0
		[DebuggerBrowsable] // 0x004EBE64-0x004EBEA0
		private long _time_k__BackingField; // 0x08
		[CompilerGenerated] // 0x004EBEA0-0x004EBEDC
		[DebuggerBrowsable] // 0x004EBEA0-0x004EBEDC
		private uint _internalDeviceId_k__BackingField; // 0x10
		[CompilerGenerated] // 0x004EBEDC-0x004EBF18
		[DebuggerBrowsable] // 0x004EBEDC-0x004EBF18
		private Pose _pointerPose_k__BackingField; // 0x14
		[CompilerGenerated] // 0x004EBF18-0x004EBF54
		[DebuggerBrowsable] // 0x004EBF18-0x004EBF54
		private GestureHoldValidFields _validFields_k__BackingField; // 0x30
	}

	public struct GestureHoldEvent // TypeDefIndex: 2387
	{
		// Fields
		[CompilerGenerated] // 0x004EBF54-0x004EBF90
		[DebuggerBrowsable] // 0x004EBF54-0x004EBF90
		private NativeGestureHoldEvent _nativeEvent_k__BackingField; // 0x00
		[CompilerGenerated] // 0x004EBF90-0x004EBFCC
		[DebuggerBrowsable] // 0x004EBF90-0x004EBFCC
		private XRGestureSubsystem _gestureSubsystem_k__BackingField; // 0x38
	
		// Properties
		internal NativeGestureHoldEvent nativeEvent { [CompilerGenerated] /* 0x004ECF78-0x004ECF88 */ set; } // 0x005959D4-0x005959F0
		internal XRGestureSubsystem gestureSubsystem { [CompilerGenerated] /* 0x004ECF88-0x004ECF98 */ set; } // 0x005959F0-0x00595A3C
	}

	[Flags] // 0x004EB18C-0x004EB19C
	public enum GestureManipulationValidFields : uint // TypeDefIndex: 2388
	{
		None = 0,
		Time = 1,
		DeviceId = 2,
		Translation = 4,
		PointerPose = 8
	}

	[NativeConditional] // 0x004EB19C-0x004EB20C
	[NativeType] // 0x004EB19C-0x004EB20C
	[UsedByNativeCode] // 0x004EB19C-0x004EB20C
	internal struct NativeGestureManipulationEvent // TypeDefIndex: 2389
	{
		// Fields
		[CompilerGenerated] // 0x004EBFCC-0x004EC008
		[DebuggerBrowsable] // 0x004EBFCC-0x004EC008
		private GestureEventState _eventState_k__BackingField; // 0x00
		[CompilerGenerated] // 0x004EC008-0x004EC044
		[DebuggerBrowsable] // 0x004EC008-0x004EC044
		private long _time_k__BackingField; // 0x08
		[CompilerGenerated] // 0x004EC044-0x004EC080
		[DebuggerBrowsable] // 0x004EC044-0x004EC080
		private uint _internalDeviceId_k__BackingField; // 0x10
		[CompilerGenerated] // 0x004EC080-0x004EC0BC
		[DebuggerBrowsable] // 0x004EC080-0x004EC0BC
		private Vector3 _translation_k__BackingField; // 0x14
		[CompilerGenerated] // 0x004EC0BC-0x004EC0F8
		[DebuggerBrowsable] // 0x004EC0BC-0x004EC0F8
		private Pose _pointerPose_k__BackingField; // 0x20
		[CompilerGenerated] // 0x004EC0F8-0x004EC134
		[DebuggerBrowsable] // 0x004EC0F8-0x004EC134
		private GestureManipulationValidFields _validFields_k__BackingField; // 0x3C
	}

	public struct GestureManipulationEvent // TypeDefIndex: 2390
	{
		// Fields
		[CompilerGenerated] // 0x004EC134-0x004EC170
		[DebuggerBrowsable] // 0x004EC134-0x004EC170
		private NativeGestureManipulationEvent _nativeEvent_k__BackingField; // 0x00
		[CompilerGenerated] // 0x004EC170-0x004EC1AC
		[DebuggerBrowsable] // 0x004EC170-0x004EC1AC
		private XRGestureSubsystem _gestureSubsystem_k__BackingField; // 0x40
	
		// Properties
		internal NativeGestureManipulationEvent nativeEvent { [CompilerGenerated] /* 0x004ECF98-0x004ECFA8 */ set; } // 0x00595A3C-0x00595A50
		internal XRGestureSubsystem gestureSubsystem { [CompilerGenerated] /* 0x004ECFA8-0x004ECFB8 */ set; } // 0x00595A50-0x00595A9C
	}

	[Flags] // 0x004EB20C-0x004EB21C
	public enum GestureNavigationValidFields : uint // TypeDefIndex: 2391
	{
		None = 0,
		Time = 1,
		DeviceId = 2,
		GestureTrackingCoordinates = 4,
		NormalizedOffset = 8,
		PointerPose = 16
	}

	[NativeConditional] // 0x004EB21C-0x004EB28C
	[NativeType] // 0x004EB21C-0x004EB28C
	[UsedByNativeCode] // 0x004EB21C-0x004EB28C
	internal struct NativeGestureNavigationEvent // TypeDefIndex: 2392
	{
		// Fields
		[CompilerGenerated] // 0x004EC1AC-0x004EC1E8
		[DebuggerBrowsable] // 0x004EC1AC-0x004EC1E8
		private GestureEventState _eventState_k__BackingField; // 0x00
		[CompilerGenerated] // 0x004EC1E8-0x004EC224
		[DebuggerBrowsable] // 0x004EC1E8-0x004EC224
		private long _time_k__BackingField; // 0x08
		[CompilerGenerated] // 0x004EC224-0x004EC260
		[DebuggerBrowsable] // 0x004EC224-0x004EC260
		private uint _internalDeviceId_k__BackingField; // 0x10
		[CompilerGenerated] // 0x004EC260-0x004EC29C
		[DebuggerBrowsable] // 0x004EC260-0x004EC29C
		private GestureTrackingCoordinates _gestureTrackingCoordinates_k__BackingField; // 0x14
		[CompilerGenerated] // 0x004EC29C-0x004EC2D8
		[DebuggerBrowsable] // 0x004EC29C-0x004EC2D8
		private Vector3 _normalizedOffset_k__BackingField; // 0x18
		[CompilerGenerated] // 0x004EC2D8-0x004EC314
		[DebuggerBrowsable] // 0x004EC2D8-0x004EC314
		private Pose _pointerPose_k__BackingField; // 0x24
		[CompilerGenerated] // 0x004EC314-0x004EC350
		[DebuggerBrowsable] // 0x004EC314-0x004EC350
		private GestureNavigationValidFields _validFields_k__BackingField; // 0x40
	}

	public struct GestureNavigationEvent // TypeDefIndex: 2393
	{
		// Fields
		[CompilerGenerated] // 0x004EC350-0x004EC38C
		[DebuggerBrowsable] // 0x004EC350-0x004EC38C
		private NativeGestureNavigationEvent _nativeEvent_k__BackingField; // 0x00
		[CompilerGenerated] // 0x004EC38C-0x004EC3C8
		[DebuggerBrowsable] // 0x004EC38C-0x004EC3C8
		private XRGestureSubsystem _gestureSubsystem_k__BackingField; // 0x48
	
		// Properties
		internal NativeGestureNavigationEvent nativeEvent { [CompilerGenerated] /* 0x004ECFB8-0x004ECFC8 */ set; } // 0x00595A9C-0x00595AB8
		internal XRGestureSubsystem gestureSubsystem { [CompilerGenerated] /* 0x004ECFC8-0x004ECFD8 */ set; } // 0x00595AB8-0x00595B04
	}

	[Flags] // 0x004EB28C-0x004EB29C
	public enum GestureRecognitionValidFields : uint // TypeDefIndex: 2394
	{
		None = 0,
		Time = 1,
		DeviceId = 2,
		PointerPose = 4
	}

	[NativeConditional] // 0x004EB29C-0x004EB30C
	[NativeType] // 0x004EB29C-0x004EB30C
	[UsedByNativeCode] // 0x004EB29C-0x004EB30C
	internal struct NativeGestureRecognitionEvent // TypeDefIndex: 2395
	{
		// Fields
		[CompilerGenerated] // 0x004EC3C8-0x004EC404
		[DebuggerBrowsable] // 0x004EC3C8-0x004EC404
		private GestureEventState _eventState_k__BackingField; // 0x00
		[CompilerGenerated] // 0x004EC404-0x004EC440
		[DebuggerBrowsable] // 0x004EC404-0x004EC440
		private long _time_k__BackingField; // 0x08
		[CompilerGenerated] // 0x004EC440-0x004EC47C
		[DebuggerBrowsable] // 0x004EC440-0x004EC47C
		private uint _internalDeviceId_k__BackingField; // 0x10
		[CompilerGenerated] // 0x004EC47C-0x004EC4B8
		[DebuggerBrowsable] // 0x004EC47C-0x004EC4B8
		private Pose _pointerPose_k__BackingField; // 0x14
		[CompilerGenerated] // 0x004EC4B8-0x004EC4F4
		[DebuggerBrowsable] // 0x004EC4B8-0x004EC4F4
		private GestureRecognitionValidFields _validFields_k__BackingField; // 0x30
	}

	public struct GestureRecognitionEvent // TypeDefIndex: 2396
	{
		// Fields
		[CompilerGenerated] // 0x004EC4F4-0x004EC530
		[DebuggerBrowsable] // 0x004EC4F4-0x004EC530
		private NativeGestureRecognitionEvent _nativeEvent_k__BackingField; // 0x00
		[CompilerGenerated] // 0x004EC530-0x004EC56C
		[DebuggerBrowsable] // 0x004EC530-0x004EC56C
		private XRGestureSubsystem _gestureSubsystem_k__BackingField; // 0x38
	
		// Properties
		internal NativeGestureRecognitionEvent nativeEvent { [CompilerGenerated] /* 0x004ECFD8-0x004ECFE8 */ set; } // 0x00595B04-0x00595B20
		internal XRGestureSubsystem gestureSubsystem { [CompilerGenerated] /* 0x004ECFE8-0x004ECFF8 */ set; } // 0x00595B20-0x00595B6C
	}

	[Flags] // 0x004EB30C-0x004EB31C
	public enum GestureTappedValidFields : uint // TypeDefIndex: 2397
	{
		None = 0,
		Time = 1,
		DeviceId = 2,
		TappedCount = 4,
		PointerPose = 8
	}

	[NativeConditional] // 0x004EB31C-0x004EB390
	[NativeType] // 0x004EB31C-0x004EB390
	[UsedByNativeCode] // 0x004EB31C-0x004EB390
	internal struct NativeGestureTappedEvent // TypeDefIndex: 2398
	{
		// Fields
		[CompilerGenerated] // 0x004EC56C-0x004EC5A8
		[DebuggerBrowsable] // 0x004EC56C-0x004EC5A8
		private GestureEventState _eventState_k__BackingField; // 0x00
		[CompilerGenerated] // 0x004EC5A8-0x004EC5E4
		[DebuggerBrowsable] // 0x004EC5A8-0x004EC5E4
		private long _time_k__BackingField; // 0x08
		[CompilerGenerated] // 0x004EC5E4-0x004EC620
		[DebuggerBrowsable] // 0x004EC5E4-0x004EC620
		private uint _internalDeviceId_k__BackingField; // 0x10
		[CompilerGenerated] // 0x004EC620-0x004EC65C
		[DebuggerBrowsable] // 0x004EC620-0x004EC65C
		private uint _tappedCount_k__BackingField; // 0x14
		[CompilerGenerated] // 0x004EC65C-0x004EC698
		[DebuggerBrowsable] // 0x004EC65C-0x004EC698
		private Pose _pointerPose_k__BackingField; // 0x18
		[CompilerGenerated] // 0x004EC698-0x004EC6D4
		[DebuggerBrowsable] // 0x004EC698-0x004EC6D4
		private GestureTappedValidFields _validFields_k__BackingField; // 0x34
	}

	public struct GestureTappedEvent // TypeDefIndex: 2399
	{
		// Fields
		[CompilerGenerated] // 0x004EC6D4-0x004EC710
		[DebuggerBrowsable] // 0x004EC6D4-0x004EC710
		private NativeGestureTappedEvent _nativeEvent_k__BackingField; // 0x00
		[CompilerGenerated] // 0x004EC710-0x004EC74C
		[DebuggerBrowsable] // 0x004EC710-0x004EC74C
		private XRGestureSubsystem _gestureSubsystem_k__BackingField; // 0x38
	
		// Properties
		internal NativeGestureTappedEvent nativeEvent { [CompilerGenerated] /* 0x004ECFF8-0x004ED008 */ set; } // 0x00595B6C-0x00595B88
		internal XRGestureSubsystem gestureSubsystem { [CompilerGenerated] /* 0x004ED008-0x004ED018 */ set; } // 0x00595B88-0x00595BD4
	}

	[NativeConditional] // 0x004EB390-0x004EB428
	[NativeHeader] // 0x004EB390-0x004EB428
	[NativeType] // 0x004EB390-0x004EB428
	[UsedByNativeCode] // 0x004EB390-0x004EB428
	public class XRGestureSubsystem : IntegratedSubsystem<XRGestureSubsystemDescriptor> // TypeDefIndex: 2400
	{
		// Fields
		private Action<GestureHoldEvent> m_HoldChanged; // 0x20
		private Action<GestureManipulationEvent> m_ManipulationChanged; // 0x28
		private Action<GestureNavigationEvent> m_NavigationChanged; // 0x30
		private Action<GestureRecognitionEvent> m_RecognitionChanged; // 0x38
		private Action<GestureTappedEvent> m_TappedChanged; // 0x40
	
		// Constructors
		public XRGestureSubsystem(); // 0x00F83EAC-0x00F83EFC
	
		// Methods
		[RequiredByNativeCode] // 0x004ED018-0x004ED028
		private void InvokeHoldChanged(NativeGestureHoldEvent gestureEvent); // 0x00F83EFC-0x00F83FA4
		[RequiredByNativeCode] // 0x004ED028-0x004ED038
		private void InvokeManipulationChanged(NativeGestureManipulationEvent gestureEvent); // 0x00F83FA4-0x00F84048
		[RequiredByNativeCode] // 0x004ED038-0x004ED048
		private void InvokeNavigationChanged(NativeGestureNavigationEvent gestureEvent); // 0x00F84048-0x00F840E4
		[RequiredByNativeCode] // 0x004ED048-0x004ED058
		private void InvokeRecognitionChanged(NativeGestureRecognitionEvent gestureEvent); // 0x00F840E4-0x00F8418C
		[RequiredByNativeCode] // 0x004ED058-0x004ED068
		private void InvokeTappedChanged(NativeGestureTappedEvent gestureEvent); // 0x00F8418C-0x00F84234
	}

	[NativeType] // 0x004EB428-0x004EB474
	[UsedByNativeCode] // 0x004EB428-0x004EB474
	public class XRGestureSubsystemDescriptor : IntegratedSubsystemDescriptor<XRGestureSubsystem> // TypeDefIndex: 2401
	{
		// Constructors
		public XRGestureSubsystemDescriptor(); // 0x00F84234-0x00F84284
	}

	[NativeHeader] // 0x004EB474-0x004EB4C0
	[RequiredByNativeCode] // 0x004EB474-0x004EB4C0
	public enum MeshGenerationStatus // TypeDefIndex: 2402
	{
		Success = 0,
		InvalidMeshId = 1,
		GenerationAlreadyInProgress = 2,
		Canceled = 3,
		UnknownError = 4
	}

	internal static class HashCodeHelper // TypeDefIndex: 2403
	{
		// Methods
		public static int Combine(int hash1, int hash2); // 0x00F834EC-0x00F83A78
	}

	[NativeHeader] // 0x004EB4C0-0x004EB50C
	[RequiredByNativeCode] // 0x004EB4C0-0x004EB50C
	public struct MeshGenerationResult : IEquatable<MeshGenerationResult> // TypeDefIndex: 2404
	{
		// Fields
		[CompilerGenerated] // 0x004EC74C-0x004EC788
		[DebuggerBrowsable] // 0x004EC74C-0x004EC788
		private readonly TrackableId _MeshId_k__BackingField; // 0x00
		[CompilerGenerated] // 0x004EC788-0x004EC7C4
		[DebuggerBrowsable] // 0x004EC788-0x004EC7C4
		private readonly Mesh _Mesh_k__BackingField; // 0x10
		[CompilerGenerated] // 0x004EC7C4-0x004EC800
		[DebuggerBrowsable] // 0x004EC7C4-0x004EC800
		private readonly MeshCollider _MeshCollider_k__BackingField; // 0x18
		[CompilerGenerated] // 0x004EC800-0x004EC83C
		[DebuggerBrowsable] // 0x004EC800-0x004EC83C
		private readonly MeshGenerationStatus _Status_k__BackingField; // 0x20
		[CompilerGenerated] // 0x004EC83C-0x004EC878
		[DebuggerBrowsable] // 0x004EC83C-0x004EC878
		private readonly MeshVertexAttributes _Attributes_k__BackingField; // 0x24
	
		// Properties
		public TrackableId MeshId { [CompilerGenerated] /* 0x004ED068-0x004ED078 */ get; } // 0x00595BD4-0x00595BE0 
		public Mesh Mesh { [CompilerGenerated] /* 0x004ED078-0x004ED088 */ get; } // 0x00595BE0-0x00595BE8 
		public MeshCollider MeshCollider { [CompilerGenerated] /* 0x004ED088-0x004ED098 */ get; } // 0x00595BE8-0x00595BF0 
		public MeshGenerationStatus Status { [CompilerGenerated] /* 0x004ED098-0x004ED0A8 */ get; } // 0x00595BF0-0x00595BF8 
		public MeshVertexAttributes Attributes { [CompilerGenerated] /* 0x004ED0A8-0x004ED0B8 */ get; } // 0x00595BF8-0x00595C00 
	
		// Methods
		public override bool Equals(object obj); // 0x00595C00-0x00595C08
		public bool Equals(MeshGenerationResult other); // 0x00595C08-0x00595C48
		public override int GetHashCode(); // 0x00595C48-0x00595C94
	}

	[Flags] // 0x004EB50C-0x004EB568
	[NativeHeader] // 0x004EB50C-0x004EB568
	[UsedByNativeCode] // 0x004EB50C-0x004EB568
	public enum MeshVertexAttributes // TypeDefIndex: 2405
	{
		None = 0,
		Normals = 1,
		Tangents = 2,
		UVs = 4,
		Colors = 8
	}

	[NativeConditional] // 0x004EB568-0x004EB5FC
	[NativeHeader] // 0x004EB568-0x004EB5FC
	[NativeHeader] // 0x004EB568-0x004EB5FC
	[UsedByNativeCode] // 0x004EB568-0x004EB5FC
	public class XRMeshSubsystem : IntegratedSubsystem<XRMeshSubsystemDescriptor> // TypeDefIndex: 2406
	{
		// Constructors
		public XRMeshSubsystem(); // 0x00F84284-0x00F842D4
	
		// Methods
		[RequiredByNativeCode] // 0x004ED0B8-0x004ED0C8
		private void InvokeMeshReadyDelegate(MeshGenerationResult result, Action<MeshGenerationResult> onMeshGenerationComplete); // 0x00F842D4-0x00F8436C
	}

	[NativeHeader] // 0x004EB5FC-0x004EB66C
	[NativeType] // 0x004EB5FC-0x004EB66C
	[UsedByNativeCode] // 0x004EB5FC-0x004EB66C
	public class XRMeshSubsystemDescriptor : IntegratedSubsystemDescriptor<XRMeshSubsystem> // TypeDefIndex: 2407
	{
		// Constructors
		public XRMeshSubsystemDescriptor(); // 0x00F8436C-0x00F843BC
	}

	[Flags] // 0x004EB66C-0x004EB6A4
	[UsedByNativeCode] // 0x004EB66C-0x004EB6A4
	public enum PlaneAlignment // TypeDefIndex: 2408
	{
		Horizontal = 1,
		Vertical = 2,
		NonAxis = 4
	}

	[NativeConditional] // 0x004EB6A4-0x004EB75C
	[NativeHeader] // 0x004EB6A4-0x004EB75C
	[NativeHeader] // 0x004EB6A4-0x004EB75C
	[NativeHeader] // 0x004EB6A4-0x004EB75C
	[UsedByNativeCode] // 0x004EB6A4-0x004EB75C
	public struct BoundedPlane // TypeDefIndex: 2409
	{
		// Fields
		private uint m_InstanceId; // 0x00
		[CompilerGenerated] // 0x004EC878-0x004EC8B4
		[DebuggerBrowsable] // 0x004EC878-0x004EC8B4
		private TrackableId _Id_k__BackingField; // 0x08
		[CompilerGenerated] // 0x004EC8B4-0x004EC8F0
		[DebuggerBrowsable] // 0x004EC8B4-0x004EC8F0
		private TrackableId _SubsumedById_k__BackingField; // 0x18
		[CompilerGenerated] // 0x004EC8F0-0x004EC92C
		[DebuggerBrowsable] // 0x004EC8F0-0x004EC92C
		private Pose _Pose_k__BackingField; // 0x28
		[CompilerGenerated] // 0x004EC92C-0x004EC968
		[DebuggerBrowsable] // 0x004EC92C-0x004EC968
		private Vector3 _Center_k__BackingField; // 0x44
		[CompilerGenerated] // 0x004EC968-0x004EC9A4
		[DebuggerBrowsable] // 0x004EC968-0x004EC9A4
		private Vector2 _Size_k__BackingField; // 0x50
		[CompilerGenerated] // 0x004EC9A4-0x004EC9E0
		[DebuggerBrowsable] // 0x004EC9A4-0x004EC9E0
		private PlaneAlignment _Alignment_k__BackingField; // 0x58
	}

	public struct PlaneAddedEventArgs // TypeDefIndex: 2410
	{
		// Fields
		[CompilerGenerated] // 0x004EC9E0-0x004ECA1C
		[DebuggerBrowsable] // 0x004EC9E0-0x004ECA1C
		private XRPlaneSubsystem _PlaneSubsystem_k__BackingField; // 0x00
		[CompilerGenerated] // 0x004ECA1C-0x004ECA58
		[DebuggerBrowsable] // 0x004ECA1C-0x004ECA58
		private BoundedPlane _Plane_k__BackingField; // 0x08
	
		// Properties
		internal XRPlaneSubsystem PlaneSubsystem { [CompilerGenerated] /* 0x004ED0C8-0x004ED0D8 */ set; } // 0x00595C94-0x00595C9C
		internal BoundedPlane Plane { [CompilerGenerated] /* 0x004ED0D8-0x004ED0E8 */ set; } // 0x00595C9C-0x00595CFC
	}

	public struct PlaneUpdatedEventArgs // TypeDefIndex: 2411
	{
		// Fields
		[CompilerGenerated] // 0x004ECA58-0x004ECA94
		[DebuggerBrowsable] // 0x004ECA58-0x004ECA94
		private XRPlaneSubsystem _PlaneSubsystem_k__BackingField; // 0x00
		[CompilerGenerated] // 0x004ECA94-0x004ECAD0
		[DebuggerBrowsable] // 0x004ECA94-0x004ECAD0
		private BoundedPlane _Plane_k__BackingField; // 0x08
	
		// Properties
		internal XRPlaneSubsystem PlaneSubsystem { [CompilerGenerated] /* 0x004ED0E8-0x004ED0F8 */ set; } // 0x00595D64-0x00595D6C
		internal BoundedPlane Plane { [CompilerGenerated] /* 0x004ED0F8-0x004ED108 */ set; } // 0x00595D6C-0x00595DCC
	}

	public struct PlaneRemovedEventArgs // TypeDefIndex: 2412
	{
		// Fields
		[CompilerGenerated] // 0x004ECAD0-0x004ECB0C
		[DebuggerBrowsable] // 0x004ECAD0-0x004ECB0C
		private XRPlaneSubsystem _PlaneSubsystem_k__BackingField; // 0x00
		[CompilerGenerated] // 0x004ECB0C-0x004ECB48
		[DebuggerBrowsable] // 0x004ECB0C-0x004ECB48
		private BoundedPlane _Plane_k__BackingField; // 0x08
	
		// Properties
		internal XRPlaneSubsystem PlaneSubsystem { [CompilerGenerated] /* 0x004ED108-0x004ED118 */ set; } // 0x00595CFC-0x00595D04
		internal BoundedPlane Plane { [CompilerGenerated] /* 0x004ED118-0x004ED128 */ set; } // 0x00595D04-0x00595D64
	}

	[NativeConditional] // 0x004EB75C-0x004EB7F0
	[NativeHeader] // 0x004EB75C-0x004EB7F0
	[NativeHeader] // 0x004EB75C-0x004EB7F0
	[UsedByNativeCode] // 0x004EB75C-0x004EB7F0
	public class XRPlaneSubsystem : IntegratedSubsystem<XRPlaneSubsystemDescriptor> // TypeDefIndex: 2413
	{
		// Fields
		[CompilerGenerated] // 0x004ECB48-0x004ECB84
		[DebuggerBrowsable] // 0x004ECB48-0x004ECB84
		private Action<PlaneAddedEventArgs> PlaneAdded; // 0x20
		[CompilerGenerated] // 0x004ECB84-0x004ECBC0
		[DebuggerBrowsable] // 0x004ECB84-0x004ECBC0
		private Action<PlaneUpdatedEventArgs> PlaneUpdated; // 0x28
		[CompilerGenerated] // 0x004ECBC0-0x004ECBFC
		[DebuggerBrowsable] // 0x004ECBC0-0x004ECBFC
		private Action<PlaneRemovedEventArgs> PlaneRemoved; // 0x30
	
		// Constructors
		public XRPlaneSubsystem(); // 0x00F843BC-0x00F8440C
	
		// Methods
		[RequiredByNativeCode] // 0x004ED128-0x004ED138
		private void InvokePlaneAddedEvent(BoundedPlane plane); // 0x00F8440C-0x00F844AC
		[RequiredByNativeCode] // 0x004ED138-0x004ED148
		private void InvokePlaneUpdatedEvent(BoundedPlane plane); // 0x00F844AC-0x00F8454C
		[RequiredByNativeCode] // 0x004ED148-0x004ED158
		private void InvokePlaneRemovedEvent(BoundedPlane removedPlane); // 0x00F8454C-0x00F845EC
	}

	[NativeHeader] // 0x004EB7F0-0x004EB860
	[NativeType] // 0x004EB7F0-0x004EB860
	[UsedByNativeCode] // 0x004EB7F0-0x004EB860
	public class XRPlaneSubsystemDescriptor : IntegratedSubsystemDescriptor<XRPlaneSubsystem> // TypeDefIndex: 2414
	{
		// Constructors
		public XRPlaneSubsystemDescriptor(); // 0x00F845EC-0x00F8463C
	}

	[NativeHeader] // 0x004EB860-0x004EB8D0
	[NativeHeader] // 0x004EB860-0x004EB8D0
	[UsedByNativeCode] // 0x004EB860-0x004EB8D0
	public struct ReferencePoint // TypeDefIndex: 2415
	{
		// Fields
		[CompilerGenerated] // 0x004ECBFC-0x004ECC38
		[DebuggerBrowsable] // 0x004ECBFC-0x004ECC38
		private TrackableId _Id_k__BackingField; // 0x00
		[CompilerGenerated] // 0x004ECC38-0x004ECC74
		[DebuggerBrowsable] // 0x004ECC38-0x004ECC74
		private TrackingState _TrackingState_k__BackingField; // 0x10
		[CompilerGenerated] // 0x004ECC74-0x004ECCB0
		[DebuggerBrowsable] // 0x004ECC74-0x004ECCB0
		private Pose _Pose_k__BackingField; // 0x14
	}

	[NativeHeader] // 0x004EB8D0-0x004EB908
	public struct ReferencePointUpdatedEventArgs // TypeDefIndex: 2416
	{
		// Fields
		[CompilerGenerated] // 0x004ECCB0-0x004ECCEC
		[DebuggerBrowsable] // 0x004ECCB0-0x004ECCEC
		private ReferencePoint _ReferencePoint_k__BackingField; // 0x00
		[CompilerGenerated] // 0x004ECCEC-0x004ECD28
		[DebuggerBrowsable] // 0x004ECCEC-0x004ECD28
		private TrackingState _PreviousTrackingState_k__BackingField; // 0x30
		[CompilerGenerated] // 0x004ECD28-0x004ECD64
		[DebuggerBrowsable] // 0x004ECD28-0x004ECD64
		private Pose _PreviousPose_k__BackingField; // 0x34
	
		// Properties
		internal ReferencePoint ReferencePoint { [CompilerGenerated] /* 0x004ED158-0x004ED168 */ set; } // 0x00595DCC-0x00595DE0
		internal TrackingState PreviousTrackingState { [CompilerGenerated] /* 0x004ED168-0x004ED178 */ set; } // 0x00595DE0-0x00595DE8
		internal Pose PreviousPose { [CompilerGenerated] /* 0x004ED178-0x004ED188 */ set; } // 0x00595DE8-0x00595E48
	}

	[NativeConditional] // 0x004EB908-0x004EB99C
	[NativeHeader] // 0x004EB908-0x004EB99C
	[NativeHeader] // 0x004EB908-0x004EB99C
	[UsedByNativeCode] // 0x004EB908-0x004EB99C
	public class XRReferencePointSubsystem : IntegratedSubsystem<XRReferencePointSubsystemDescriptor> // TypeDefIndex: 2417
	{
		// Fields
		[CompilerGenerated] // 0x004ECD64-0x004ECDA0
		[DebuggerBrowsable] // 0x004ECD64-0x004ECDA0
		private Action<ReferencePointUpdatedEventArgs> ReferencePointUpdated; // 0x20
	
		// Constructors
		public XRReferencePointSubsystem(); // 0x00F8463C-0x00F8468C
	
		// Methods
		[RequiredByNativeCode] // 0x004ED188-0x004ED198
		private void InvokeReferencePointUpdatedEvent(ReferencePoint updatedReferencePoint, TrackingState previousTrackingState, Pose previousPose); // 0x00F8468C-0x00F84764
	}

	[NativeHeader] // 0x004EB99C-0x004EBA0C
	[NativeType] // 0x004EB99C-0x004EBA0C
	[UsedByNativeCode] // 0x004EB99C-0x004EBA0C
	public class XRReferencePointSubsystemDescriptor : IntegratedSubsystemDescriptor<XRReferencePointSubsystem> // TypeDefIndex: 2418
	{
		// Constructors
		public XRReferencePointSubsystemDescriptor(); // 0x00F84764-0x00F847B4
	}

	[UsedByNativeCode] // 0x004EBA0C-0x004EBA1C
	public enum TrackingState // TypeDefIndex: 2419
	{
		Unknown = 0,
		Tracking = 1,
		Unavailable = 2
	}

	public struct SessionTrackingStateChangedEventArgs // TypeDefIndex: 2420
	{
		// Fields
		internal XRSessionSubsystem m_Session; // 0x00
		[CompilerGenerated] // 0x004ECDA0-0x004ECDDC
		[DebuggerBrowsable] // 0x004ECDA0-0x004ECDDC
		private TrackingState _NewState_k__BackingField; // 0x08
	
		// Properties
		public TrackingState NewState { [CompilerGenerated] /* 0x004ED198-0x004ED1A8 */ set; } // 0x00595E48-0x00595E50
	}

	[NativeConditional] // 0x004EBA1C-0x004EBAB0
	[NativeHeader] // 0x004EBA1C-0x004EBAB0
	[NativeHeader] // 0x004EBA1C-0x004EBAB0
	[UsedByNativeCode] // 0x004EBA1C-0x004EBAB0
	public class XRSessionSubsystem : IntegratedSubsystem<XRSessionSubsystemDescriptor> // TypeDefIndex: 2421
	{
		// Fields
		[CompilerGenerated] // 0x004ECDDC-0x004ECE18
		[DebuggerBrowsable] // 0x004ECDDC-0x004ECE18
		private Action<SessionTrackingStateChangedEventArgs> TrackingStateChanged; // 0x20
	
		// Constructors
		public XRSessionSubsystem(); // 0x00F847B4-0x00F84804
	
		// Methods
		[RequiredByNativeCode] // 0x004ED1A8-0x004ED1B8
		private void InvokeTrackingStateChangedEvent(TrackingState newState); // 0x00F84804-0x00F8487C
	}

	[NativeHeader] // 0x004EBAB0-0x004EBB20
	[NativeType] // 0x004EBAB0-0x004EBB20
	[UsedByNativeCode] // 0x004EBAB0-0x004EBB20
	public class XRSessionSubsystemDescriptor : IntegratedSubsystemDescriptor<XRSessionSubsystem> // TypeDefIndex: 2422
	{
		// Constructors
		public XRSessionSubsystemDescriptor(); // 0x00F8487C-0x00F848CC
	}
}

namespace UnityEngine.Timeline
{
	internal class ActivationMixerPlayable : PlayableBehaviour // TypeDefIndex: 2425
	{
		// Fields
		private ActivationTrack.PostPlaybackState m_PostPlaybackState; // 0x10
		private bool m_BoundGameObjectInitialStateIsActive; // 0x14
		private GameObject m_BoundGameObject; // 0x18
	
		// Properties
		public ActivationTrack.PostPlaybackState postPlaybackState { get; set; } // 0x00A05EC0-0x00A05EC8 0x00A05EC8-0x00A05ED0
	
		// Constructors
		public ActivationMixerPlayable(); // 0x00A06158-0x00A06160
	
		// Methods
		public static ScriptPlayable<ActivationMixerPlayable> Create(PlayableGraph graph, int inputCount); // 0x00A05E38-0x00A05EC0
		public override void OnPlayableDestroy(Playable playable); // 0x00A05ED0-0x00A05FA0
		public override void ProcessFrame(Playable playable, FrameData info, object playerData); // 0x00A05FA0-0x00A06158
	}

	internal class ActivationPlayableAsset : PlayableAsset, ITimelineClipAsset // TypeDefIndex: 2426
	{
		// Properties
		public ClipCaps clipCaps { get; } // 0x00A06160-0x00A06168 
	
		// Constructors
		public ActivationPlayableAsset(); // 0x00A061E4-0x00A061EC
	
		// Methods
		public override Playable CreatePlayable(PlayableGraph graph, GameObject go); // 0x00A06168-0x00A061E4
	}

	[Serializable]
	[TrackBindingType] // 0x004EE4E4-0x004EE570
	[TrackClipType] // 0x004EE4E4-0x004EE570
	public class ActivationTrack : TrackAsset // TypeDefIndex: 2427
	{
		// Fields
		[SerializeField] // 0x004EED10-0x004EED20
		private PostPlaybackState m_PostPlaybackState; // 0xA0
		private ActivationMixerPlayable m_ActivationMixer; // 0xA8
	
		// Properties
		public PostPlaybackState postPlaybackState { get; set; } // 0x00A0622C-0x00A06234 0x00A06234-0x00A06248
	
		// Nested types
		public enum PostPlaybackState // TypeDefIndex: 2428
		{
			Active = 0,
			Inactive = 1,
			Revert = 2,
			LeaveAsIs = 3
		}
	
		// Constructors
		public ActivationTrack(); // 0x00A064E0-0x00A06550
	
		// Methods
		internal override bool CanCompileClips(); // 0x00A061EC-0x00A0622C
		public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount); // 0x00A0625C-0x00A06338
		internal void UpdateTrackMode(); // 0x00A06248-0x00A0625C
		public override void GatherProperties(PlayableDirector director, IPropertyCollector driver); // 0x00A06338-0x00A0646C
		protected override void OnCreateClip(TimelineClip clip); // 0x00A0646C-0x00A064E0
	}

	internal class AnimationOutputWeightProcessor : ITimelineEvaluateCallback // TypeDefIndex: 2429
	{
		// Fields
		private AnimationPlayableOutput m_Output; // 0x10
		private AnimationMotionXToDeltaPlayable m_MotionXPlayable; // 0x20
		private AnimationMixerPlayable m_PoseMixer; // 0x30
		private AnimationLayerMixerPlayable m_LayerMixer; // 0x40
		private readonly List<WeightInfo> m_Mixers; // 0x50
	
		// Nested types
		private struct WeightInfo // TypeDefIndex: 2430
		{
			// Fields
			public Playable mixer; // 0x00
			public Playable parentMixer; // 0x10
			public int port; // 0x20
			public bool modulate; // 0x24
		}
	
		// Constructors
		public AnimationOutputWeightProcessor(AnimationPlayableOutput output); // 0x00A06550-0x00A065F8
	
		// Methods
		private static Playable FindFirstAnimationPlayable(Playable p); // 0x00A069D4-0x00A06B00
		private void FindMixers(); // 0x00A065F8-0x00A069D4
		private void FindMixers(Playable parent, int port, Playable node); // 0x00A06B00-0x00A06DC8
		public void Evaluate(); // 0x00A06DC8-0x00A070B8
	}

	[Serializable]
	[UnityEngine.Timeline.NotKeyable] // 0x004EE570-0x004EE580
	public class AnimationPlayableAsset : PlayableAsset, ITimelineClipAsset, IPropertyPreview, ISerializationCallbackReceiver // TypeDefIndex: 2431
	{
		// Fields
		[SerializeField] // 0x004EED20-0x004EED30
		private AnimationClip m_Clip; // 0x18
		[SerializeField] // 0x004EED30-0x004EED40
		private Vector3 m_Position; // 0x20
		[SerializeField] // 0x004EED40-0x004EED50
		private Vector3 m_EulerAngles; // 0x2C
		[SerializeField] // 0x004EED50-0x004EED60
		private bool m_UseTrackMatchFields; // 0x38
		[SerializeField] // 0x004EED60-0x004EED70
		private MatchTargetFields m_MatchTargetFields; // 0x3C
		[SerializeField] // 0x004EED70-0x004EED80
		private bool m_RemoveStartOffset; // 0x40
		[SerializeField] // 0x004EED80-0x004EED90
		private bool m_ApplyFootIK; // 0x41
		[SerializeField] // 0x004EED90-0x004EEDA0
		private LoopMode m_Loop; // 0x44
		[CompilerGenerated] // 0x004EEDA0-0x004EEDB0
		private AppliedOffsetMode _appliedOffsetMode_k__BackingField; // 0x48
		private static readonly int k_LatestVersion; // 0x00
		[HideInInspector] // 0x004EEDB0-0x004EEDE8
		[SerializeField] // 0x004EEDB0-0x004EEDE8
		private int m_Version; // 0x4C
		[HideInInspector] // 0x004EEDE8-0x004EEE48
		[Obsolete] // 0x004EEDE8-0x004EEE48
		[SerializeField] // 0x004EEDE8-0x004EEE48
		private Quaternion m_Rotation; // 0x50
	
		// Properties
		public Vector3 position { get; set; } // 0x00A070B8-0x00A070C4 0x00A070C4-0x00A070D0
		public Quaternion rotation { get; set; } // 0x00A070D0-0x00A07158 0x00A07158-0x00A07198
		public Vector3 eulerAngles { get; set; } // 0x00A07198-0x00A071A4 0x00A071A4-0x00A071B0
		public bool useTrackMatchFields { get; set; } // 0x00A071B0-0x00A071B8 0x00A071B8-0x00A071C4
		public MatchTargetFields matchTargetFields { get; set; } // 0x00A071C4-0x00A071CC 0x00A071CC-0x00A071D4
		public bool removeStartOffset { get; set; } // 0x00A071D4-0x00A071DC 0x00A071DC-0x00A071E8
		public bool applyFootIK { get; set; } // 0x00A071E8-0x00A071F0 0x00A071F0-0x00A071FC
		public LoopMode loop { get; set; } // 0x00A071FC-0x00A07204 0x00A07204-0x00A0720C
		internal bool hasRootTransforms { get; } // 0x00A0720C-0x00A072BC 
		internal AppliedOffsetMode appliedOffsetMode { [CompilerGenerated] /* 0x004EFC0C-0x004EFC1C */ get; [CompilerGenerated] /* 0x004EFC1C-0x004EFC2C */ set; } // 0x00A0739C-0x00A073A4 0x00A073A4-0x00A073AC
		public AnimationClip clip { get; set; } // 0x00A073AC-0x00A073B4 0x00A073B4-0x00A0747C
		public override double duration { get; } // 0x00A0747C-0x00A0750C 
		public override IEnumerable<PlayableBinding> outputs { [IteratorStateMachine] /* 0x004EFC2C-0x004EFC90 */ get; } // 0x00A076B0-0x00A07734 
		public ClipCaps clipCaps { get; } // 0x00A07CC8-0x00A07DC8 
	
		// Nested types
		public enum LoopMode // TypeDefIndex: 2432
		{
			UseSourceAsset = 0,
			On = 1,
			Off = 2
		}
	
		private enum Versions // TypeDefIndex: 2433
		{
			Initial = 0,
			RotationAsEuler = 1
		}
	
		private static class AnimationPlayableAssetUpgrade // TypeDefIndex: 2434
		{
			// Methods
			public static void ConvertRotationToEuler(AnimationPlayableAsset asset); // 0x00A08030-0x00A08068
		}
	
		[CompilerGenerated] // 0x004EEC04-0x004EEC14
		private sealed class _get_outputs_d__45 : IEnumerable<PlayableBinding>, IEnumerator<PlayableBinding> // TypeDefIndex: 2435
		{
			// Fields
			private int __1__state; // 0x10
			private PlayableBinding __2__current; // 0x18
			private int __l__initialThreadId; // 0x38
			public AnimationPlayableAsset __4__this; // 0x40
	
			// Properties
			PlayableBinding IEnumerator<UnityEngine.Playables.PlayableBinding>.Current { [DebuggerHidden] /* 0x004F01B0-0x004F01C0 */ get; } // 0x00A08250-0x00A08264 
			object IEnumerator.Current { [DebuggerHidden] /* 0x004F01D0-0x004F01E0 */ get; } // 0x00A082C8-0x00A08334 
	
			// Constructors
			[DebuggerHidden] // 0x004F0190-0x004F01A0
			public _get_outputs_d__45(int __1__state); // 0x00A07734-0x00A0776C
	
			// Methods
			[DebuggerHidden] // 0x004F01A0-0x004F01B0
			void IDisposable.Dispose(); // 0x00A081B4-0x00A081B8
			private bool MoveNext(); // 0x00A081B8-0x00A08250
			[DebuggerHidden] // 0x004F01C0-0x004F01D0
			void IEnumerator.Reset(); // 0x00A08264-0x00A082C8
			[DebuggerHidden] // 0x004F01E0-0x004F01F0
			IEnumerator<PlayableBinding> IEnumerable<PlayableBinding>.GetEnumerator(); // 0x00A08334-0x00A083E4
			[DebuggerHidden] // 0x004F01F0-0x004F0200
			IEnumerator IEnumerable.GetEnumerator(); // 0x00A083E4-0x00A083E8
		}
	
		// Constructors
		public AnimationPlayableAsset(); // 0x00A08068-0x00A08160
		static AnimationPlayableAsset(); // 0x00A08160-0x00A081B4
	
		// Methods
		public override Playable CreatePlayable(PlayableGraph graph, GameObject go); // 0x00A0776C-0x00A0785C
		internal static Playable CreatePlayable(PlayableGraph graph, AnimationClip clip, Vector3 positionOffset, Vector3 eulerOffset, bool removeStartOffset, AppliedOffsetMode mode, bool applyFootIK, LoopMode loop); // 0x00A0785C-0x00A07C18
		private static bool ShouldApplyOffset(AppliedOffsetMode mode, AnimationClip clip); // 0x00A07C38-0x00A07CC8
		private static bool ShouldApplyScaleRemove(AppliedOffsetMode mode); // 0x00A07C18-0x00A07C38
		public void ResetOffsets(); // 0x00A07DC8-0x00A07E48
		public void GatherProperties(PlayableDirector director, IPropertyCollector driver); // 0x00A07E48-0x00A07F10
		internal static bool HasRootTransforms(AnimationClip clip); // 0x00A072BC-0x00A0739C
		void ISerializationCallbackReceiver.OnBeforeSerialize(); // 0x00A07F10-0x00A07F80
		void ISerializationCallbackReceiver.OnAfterDeserialize(); // 0x00A07F80-0x00A08020
		private void OnUpgradeFromVersion(int oldVersion); // 0x00A08020-0x00A08030
	}

	[Flags] // 0x004EE580-0x004EE590
	public enum MatchTargetFields // TypeDefIndex: 2436
	{
		PositionX = 1,
		PositionY = 2,
		PositionZ = 4,
		RotationX = 8,
		RotationY = 16,
		RotationZ = 32
	}

	public enum TrackOffset // TypeDefIndex: 2437
	{
		ApplyTransformOffsets = 0,
		ApplySceneOffsets = 1,
		Auto = 2
	}

	internal enum AppliedOffsetMode // TypeDefIndex: 2438
	{
		NoRootTransform = 0,
		TransformOffset = 1,
		SceneOffset = 2,
		TransformOffsetLegacy = 3,
		SceneOffsetLegacy = 4,
		SceneOffsetEditor = 5,
		SceneOffsetLegacyEditor = 6
	}

	internal static class MatchTargetFieldConstants // TypeDefIndex: 2439
	{
		// Fields
		public static MatchTargetFields All; // 0x00
		public static MatchTargetFields None; // 0x04
		public static MatchTargetFields Position; // 0x08
		public static MatchTargetFields Rotation; // 0x0C
	
		// Constructors
		static MatchTargetFieldConstants(); // 0x00A13B0C-0x00A13B88
	
		// Extension methods
		public static bool HasAny(this MatchTargetFields me, MatchTargetFields fields); // 0x00A13A80-0x00A13B04
		public static MatchTargetFields Toggle(this MatchTargetFields me, MatchTargetFields flag); // 0x00A13B04-0x00A13B0C
	}

	[Serializable]
	[SupportsChildTracks] // 0x004EE5A0-0x004EE65C
	[TrackBindingType] // 0x004EE5A0-0x004EE65C
	[TrackClipType] // 0x004EE5A0-0x004EE65C
	public class AnimationTrack : TrackAsset // TypeDefIndex: 2440
	{
		// Fields
		private const string k_DefaultInfiniteClipName = "Recorded"; // Metadata: 0x001F4841
		private const string k_DefaultRecordableClipName = "Recorded"; // Metadata: 0x001F484D
		[FormerlySerializedAs] // 0x004EEE48-0x004EEE94
		[SerializeField] // 0x004EEE48-0x004EEE94
		private TimelineClip.ClipExtrapolation m_InfiniteClipPreExtrapolation; // 0xA0
		[FormerlySerializedAs] // 0x004EEE94-0x004EEEE0
		[SerializeField] // 0x004EEE94-0x004EEEE0
		private TimelineClip.ClipExtrapolation m_InfiniteClipPostExtrapolation; // 0xA4
		[FormerlySerializedAs] // 0x004EEEE0-0x004EEF2C
		[SerializeField] // 0x004EEEE0-0x004EEF2C
		private Vector3 m_InfiniteClipOffsetPosition; // 0xA8
		[FormerlySerializedAs] // 0x004EEF2C-0x004EEF78
		[SerializeField] // 0x004EEF2C-0x004EEF78
		private Vector3 m_InfiniteClipOffsetEulerAngles; // 0xB4
		[FormerlySerializedAs] // 0x004EEF78-0x004EEFC4
		[SerializeField] // 0x004EEF78-0x004EEFC4
		private double m_InfiniteClipTimeOffset; // 0xC0
		[FormerlySerializedAs] // 0x004EEFC4-0x004EF010
		[SerializeField] // 0x004EEFC4-0x004EF010
		private bool m_InfiniteClipRemoveOffset; // 0xC8
		[SerializeField] // 0x004EF010-0x004EF020
		private bool m_InfiniteClipApplyFootIK; // 0xC9
		[HideInInspector] // 0x004EF020-0x004EF058
		[SerializeField] // 0x004EF020-0x004EF058
		private AnimationPlayableAsset.LoopMode mInfiniteClipLoop; // 0xCC
		[SerializeField] // 0x004EF058-0x004EF068
		private MatchTargetFields m_MatchTargetFields; // 0xD0
		[SerializeField] // 0x004EF068-0x004EF078
		private Vector3 m_Position; // 0xD4
		[SerializeField] // 0x004EF078-0x004EF088
		private Vector3 m_EulerAngles; // 0xE0
		[SerializeField] // 0x004EF088-0x004EF098
		private AvatarMask m_AvatarMask; // 0xF0
		[SerializeField] // 0x004EF098-0x004EF0A8
		private bool m_ApplyAvatarMask; // 0xF8
		[SerializeField] // 0x004EF0A8-0x004EF0B8
		private TrackOffset m_TrackOffset; // 0xFC
		[HideInInspector] // 0x004EF0B8-0x004EF0F0
		[SerializeField] // 0x004EF0B8-0x004EF0F0
		private AnimationClip m_InfiniteClip; // 0x100
		[HideInInspector] // 0x004EF0F0-0x004EF150
		[Obsolete] // 0x004EF0F0-0x004EF150
		[SerializeField] // 0x004EF0F0-0x004EF150
		private Quaternion m_OpenClipOffsetRotation; // 0x108
		[HideInInspector] // 0x004EF150-0x004EF1B0
		[Obsolete] // 0x004EF150-0x004EF1B0
		[SerializeField] // 0x004EF150-0x004EF1B0
		private Quaternion m_Rotation; // 0x118
		[HideInInspector] // 0x004EF1B0-0x004EF210
		[Obsolete] // 0x004EF1B0-0x004EF210
		[SerializeField] // 0x004EF1B0-0x004EF210
		private bool m_ApplyOffsets; // 0x128
	
		// Properties
		public Vector3 position { get; set; } // 0x00A083E8-0x00A083F4 0x00A083F4-0x00A08400
		public Quaternion rotation { get; set; } // 0x00A08400-0x00A08488 0x00A08488-0x00A084C8
		public Vector3 eulerAngles { get; set; } // 0x00A084C8-0x00A084D4 0x00A084D4-0x00A084E0
		[Obsolete] // 0x004F04A0-0x004F04DC
		public bool applyOffsets { get; set; } // 0x00A084E0-0x00A084E8 0x00A084E8-0x00A084EC
		public TrackOffset trackOffset { get; set; } // 0x00A084EC-0x00A084F4 0x00A084F4-0x00A084FC
		public MatchTargetFields matchTargetFields { get; set; } // 0x00A084FC-0x00A08504 0x00A08504-0x00A08584
		public AnimationClip infiniteClip { get; internal set; } // 0x00A08584-0x00A0858C 0x00A0858C-0x00A08594
		internal bool infiniteClipRemoveOffset { get; set; } // 0x00A08594-0x00A0859C 0x00A0859C-0x00A085A8
		public AvatarMask avatarMask { get; set; } // 0x00A085A8-0x00A085B0 0x00A085B0-0x00A085B8
		public bool applyAvatarMask { get; set; } // 0x00A085B8-0x00A085C0 0x00A085C0-0x00A085CC
		public override IEnumerable<PlayableBinding> outputs { [IteratorStateMachine] /* 0x004EFCB0-0x004EFD14 */ get; } // 0x00A08690-0x00A08714 
		public bool inClipMode { get; } // 0x00A0874C-0x00A08794 
		public Vector3 infiniteClipOffsetPosition { get; set; } // 0x00A08794-0x00A087A0 0x00A087A0-0x00A087AC
		public Quaternion infiniteClipOffsetRotation { get; set; } // 0x00A087AC-0x00A08834 0x00A08834-0x00A08874
		public Vector3 infiniteClipOffsetEulerAngles { get; set; } // 0x00A08874-0x00A08880 0x00A08880-0x00A0888C
		internal bool infiniteClipApplyFootIK { get; set; } // 0x00A0888C-0x00A08894 0x00A08894-0x00A088A0
		internal double infiniteClipTimeOffset { get; set; } // 0x00A088A0-0x00A088A8 0x00A088A8-0x00A088B0
		public TimelineClip.ClipExtrapolation infiniteClipPreExtrapolation { get; set; } // 0x00A088B0-0x00A088B8 0x00A088B8-0x00A088C0
		public TimelineClip.ClipExtrapolation infiniteClipPostExtrapolation { get; set; } // 0x00A088C0-0x00A088C8 0x00A088C8-0x00A088D0
		internal AnimationPlayableAsset.LoopMode infiniteClipLoop { get; set; } // 0x00A088D0-0x00A088D8 0x00A088D8-0x00A088E0
		[EditorBrowsable] // 0x004F04DC-0x004F0530
		[Obsolete] // 0x004F04DC-0x004F0530
		public Vector3 openClipOffsetPosition { get; set; } // 0x00A0B358-0x00A0B364 0x00A0B364-0x00A0B370
		[EditorBrowsable] // 0x004F0530-0x004F0584
		[Obsolete] // 0x004F0530-0x004F0584
		public Quaternion openClipOffsetRotation { get; set; } // 0x00A0B370-0x00A0B374 0x00A0B374-0x00A0B3B4
		[EditorBrowsable] // 0x004F0584-0x004F05D8
		[Obsolete] // 0x004F0584-0x004F05D8
		public Vector3 openClipOffsetEulerAngles { get; set; } // 0x00A0B3B4-0x00A0B3C0 0x00A0B3C0-0x00A0B3CC
		[EditorBrowsable] // 0x004F05D8-0x004F062C
		[Obsolete] // 0x004F05D8-0x004F062C
		public TimelineClip.ClipExtrapolation openClipPreExtrapolation { get; set; } // 0x00A0B3CC-0x00A0B3D4 0x00A0B3D4-0x00A0B3DC
		[EditorBrowsable] // 0x004F062C-0x004F0680
		[Obsolete] // 0x004F062C-0x004F0680
		public TimelineClip.ClipExtrapolation openClipPostExtrapolation { get; set; } // 0x00A0B3DC-0x00A0B3E4 0x00A0B3E4-0x00A0B3EC
	
		// Nested types
		private static class AnimationTrackUpgrade // TypeDefIndex: 2441
		{
			// Methods
			public static void ConvertRotationsToEuler(AnimationTrack track); // 0x00A0B44C-0x00A0B498
			public static void ConvertRootMotion(AnimationTrack track); // 0x00A0B498-0x00A0B534
			public static void ConvertInfiniteTrack(AnimationTrack track); // 0x00A0B534-0x00A0B554
		}
	
		[CompilerGenerated] // 0x004EEC14-0x004EEC24
		private sealed class _get_outputs_d__49 : IEnumerable<PlayableBinding>, IEnumerator<PlayableBinding> // TypeDefIndex: 2442
		{
			// Fields
			private int __1__state; // 0x10
			private PlayableBinding __2__current; // 0x18
			private int __l__initialThreadId; // 0x38
			public AnimationTrack __4__this; // 0x40
	
			// Properties
			PlayableBinding IEnumerator<UnityEngine.Playables.PlayableBinding>.Current { [DebuggerHidden] /* 0x004F0220-0x004F0230 */ get; } // 0x00A0B74C-0x00A0B760 
			object IEnumerator.Current { [DebuggerHidden] /* 0x004F0240-0x004F0250 */ get; } // 0x00A0B7C4-0x00A0B830 
	
			// Constructors
			[DebuggerHidden] // 0x004F0200-0x004F0210
			public _get_outputs_d__49(int __1__state); // 0x00A08714-0x00A0874C
	
			// Methods
			[DebuggerHidden] // 0x004F0210-0x004F0220
			void IDisposable.Dispose(); // 0x00A0B6B0-0x00A0B6B4
			private bool MoveNext(); // 0x00A0B6B4-0x00A0B74C
			[DebuggerHidden] // 0x004F0230-0x004F0240
			void IEnumerator.Reset(); // 0x00A0B760-0x00A0B7C4
			[DebuggerHidden] // 0x004F0250-0x004F0260
			IEnumerator<PlayableBinding> IEnumerable<PlayableBinding>.GetEnumerator(); // 0x00A0B830-0x00A0B8E0
			[DebuggerHidden] // 0x004F0260-0x004F0270
			IEnumerator IEnumerable.GetEnumerator(); // 0x00A0B8E0-0x00A0B8E4
		}
	
		// Constructors
		public AnimationTrack(); // 0x00A0B554-0x00A0B6B0
	
		// Methods
		internal override bool CanCompileClips(); // 0x00A085CC-0x00A08690
		[ContextMenu] // 0x004EFD14-0x004EFD4C
		private void ResetOffsets(); // 0x00A088E0-0x00A08960
		public TimelineClip CreateClip(AnimationClip clip); // 0x00A08964-0x00A08A10
		public void CreateInfiniteClip(string infiniteClipName); // 0x00A08C50-0x00A08D50
		public TimelineClip CreateRecordableClip(string animClipName); // 0x00A08F20-0x00A09060
		protected override void OnCreateClip(TimelineClip clip); // 0x00A09228-0x00A09274
		protected internal override int CalculateItemsHash(); // 0x00A092EC-0x00A09384
		internal void UpdateClipOffsets(); // 0x00A08960-0x00A08964
		private Playable CompileTrackPlayable(PlayableGraph graph, TrackAsset track, GameObject go, IntervalTree<RuntimeElement> tree, AppliedOffsetMode mode); // 0x00A093A0-0x00A09778
		internal override Playable OnCreateClipPlayableGraph(PlayableGraph graph, GameObject go, IntervalTree<RuntimeElement> tree); // 0x00A09980-0x00A0A120
		private bool RequiresMotionXPlayable(AppliedOffsetMode mode, GameObject gameObject); // 0x00A0A880-0x00A0A9A0
		private static bool UsesAbsoluteMotion(AppliedOffsetMode mode); // 0x00A0A9A0-0x00A0A9B8
		private bool HasController(GameObject gameObject); // 0x00A0ABB0-0x00A0ACE8
		internal Animator GetBinding(PlayableDirector director); // 0x00A0A9B8-0x00A0ABB0
		private static AnimationLayerMixerPlayable CreateGroupMixer(PlayableGraph graph, GameObject go, int inputCount); // 0x00A0A540-0x00A0A5C0
		private Playable CreateInfiniteTrackPlayable(PlayableGraph graph, GameObject go, IntervalTree<RuntimeElement> tree, AppliedOffsetMode mode); // 0x00A0A5C0-0x00A0A880
		private Playable ApplyTrackOffset(PlayableGraph graph, Playable root, GameObject go, AppliedOffsetMode mode); // 0x00A097D8-0x00A09980
		internal override void GetEvaluationTime(out double outStart, out double outDuration); // 0x00A0AD20-0x00A0ADD0
		internal override void GetSequenceTime(out double outStart, out double outDuration); // 0x00A0ADD0-0x00A0AED0
		private void AssignAnimationClip(TimelineClip clip, AnimationClip animClip); // 0x00A08A10-0x00A08C50
		public override void GatherProperties(PlayableDirector director, IPropertyCollector driver); // 0x00A0AED0-0x00A0AED4
		private void GetAnimationClips(List<AnimationClip> animClips); // 0x00A0AED4-0x00A0B358
		private AppliedOffsetMode GetOffsetMode(GameObject go, bool animatesRootTransform); // 0x00A0A4CC-0x00A0A540
		internal bool AnimatesRootTransform(); // 0x00A0A120-0x00A0A4CC
		internal override void OnUpgradeFromVersion(int oldVersion); // 0x00A0B3EC-0x00A0B44C
	}

	internal interface ICurvesOwner // TypeDefIndex: 2443
	{
		// Properties
		AnimationClip curves { get; }
		bool hasCurves { get; }
		double duration { get; }
		string defaultCurvesName { get; }
		UnityEngine.Object asset { get; }
		UnityEngine.Object assetOwner { get; }
		TrackAsset targetTrack { get; }
	
		// Methods
		void CreateCurves(string curvesClipName);
	}

	[Serializable]
	public class TimelineClip : ICurvesOwner, ISerializationCallbackReceiver // TypeDefIndex: 2444
	{
		// Fields
		private const int k_LatestVersion = 1; // Metadata: 0x001F4859
		[HideInInspector] // 0x004EF210-0x004EF248
		[SerializeField] // 0x004EF210-0x004EF248
		private int m_Version; // 0x10
		public static readonly ClipCaps kDefaultClipCaps; // 0x00
		public static readonly float kDefaultClipDurationInSeconds; // 0x04
		public static readonly double kTimeScaleMin; // 0x08
		public static readonly double kTimeScaleMax; // 0x10
		internal static readonly string kDefaultCurvesName; // 0x18
		internal static readonly double kMinDuration; // 0x20
		internal static readonly double kMaxTimeValue; // 0x28
		[SerializeField] // 0x004EF248-0x004EF258
		private double m_Start; // 0x18
		[SerializeField] // 0x004EF258-0x004EF268
		private double m_ClipIn; // 0x20
		[SerializeField] // 0x004EF268-0x004EF278
		private UnityEngine.Object m_Asset; // 0x28
		[FormerlySerializedAs] // 0x004EF278-0x004EF2C4
		[SerializeField] // 0x004EF278-0x004EF2C4
		private double m_Duration; // 0x30
		[SerializeField] // 0x004EF2C4-0x004EF2D4
		private double m_TimeScale; // 0x38
		[SerializeField] // 0x004EF2D4-0x004EF2E4
		private TrackAsset m_ParentTrack; // 0x40
		[SerializeField] // 0x004EF2E4-0x004EF2F4
		private double m_EaseInDuration; // 0x48
		[SerializeField] // 0x004EF2F4-0x004EF304
		private double m_EaseOutDuration; // 0x50
		[SerializeField] // 0x004EF304-0x004EF314
		private double m_BlendInDuration; // 0x58
		[SerializeField] // 0x004EF314-0x004EF324
		private double m_BlendOutDuration; // 0x60
		[SerializeField] // 0x004EF324-0x004EF334
		private AnimationCurve m_MixInCurve; // 0x68
		[SerializeField] // 0x004EF334-0x004EF344
		private AnimationCurve m_MixOutCurve; // 0x70
		[SerializeField] // 0x004EF344-0x004EF354
		private BlendCurveMode m_BlendInCurveMode; // 0x78
		[SerializeField] // 0x004EF354-0x004EF364
		private BlendCurveMode m_BlendOutCurveMode; // 0x7C
		[SerializeField] // 0x004EF364-0x004EF374
		private List<string> m_ExposedParameterNames; // 0x80
		[SerializeField] // 0x004EF374-0x004EF384
		private AnimationClip m_AnimationCurves; // 0x88
		[SerializeField] // 0x004EF384-0x004EF394
		private bool m_Recordable; // 0x90
		[SerializeField] // 0x004EF394-0x004EF3A4
		private ClipExtrapolation m_PostExtrapolationMode; // 0x94
		[SerializeField] // 0x004EF3A4-0x004EF3B4
		private ClipExtrapolation m_PreExtrapolationMode; // 0x98
		[SerializeField] // 0x004EF3B4-0x004EF3C4
		private double m_PostExtrapolationTime; // 0xA0
		[SerializeField] // 0x004EF3C4-0x004EF3D4
		private double m_PreExtrapolationTime; // 0xA8
		[SerializeField] // 0x004EF3D4-0x004EF3E4
		private string m_DisplayName; // 0xB0
	
		// Properties
		public bool hasPreExtrapolation { get; } // 0x00A1D3FC-0x00A1D41C 
		public bool hasPostExtrapolation { get; } // 0x00A1D41C-0x00A1D43C 
		public double timeScale { get; set; } // 0x00A0C814-0x00A0C8F8 0x00A1D448-0x00A1D534
		public double start { get; set; } // 0x00A1D538-0x00A1D540 0x00A09060-0x00A09170
		public double duration { get; set; } // 0x00A1D6A0-0x00A1D6A8 0x00A09170-0x00A09228
		public double end { get; } // 0x00A12438-0x00A12448 
		public double clipIn { get; set; } // 0x00A1D6A8-0x00A1D6D4 0x00A1D6D4-0x00A1D7BC
		public string displayName { get; set; } // 0x00A1D7BC-0x00A1D7C4 0x00A1D7C4-0x00A1D7CC
		public double clipAssetDuration { get; } // 0x00A1D7CC-0x00A1D89C 
		public AnimationClip curves { get; internal set; } // 0x00A1D89C-0x00A1D8A4 0x00A1D8A4-0x00A1D8AC
		string ICurvesOwner.defaultCurvesName { get; } // 0x00A1D8AC-0x00A1D914 
		public bool hasCurves { get; } // 0x00A1D914-0x00A1D9B0 
		public UnityEngine.Object asset { get; set; } // 0x00A1D9B0-0x00A1D9B8 0x00A1D9B8-0x00A1D9C0
		UnityEngine.Object ICurvesOwner.assetOwner { get; } // 0x00A1D9C0-0x00A1D9C8 
		TrackAsset ICurvesOwner.targetTrack { get; } // 0x00A1D9C8-0x00A1D9D0 
		[Obsolete] // 0x004F0680-0x004F06BC
		public UnityEngine.Object underlyingAsset { get; set; } // 0x00A1D9D0-0x00A1D9D8 0x00A1D9D8-0x00A1D9DC
		public TrackAsset parentTrack { get; set; } // 0x00A1D9DC-0x00A1D9E4 0x00A1D2E0-0x00A1D3FC
		public double easeInDuration { get; set; } // 0x00A1D9E4-0x00A1DA94 0x00A1DA94-0x00A1DB80
		public double easeOutDuration { get; set; } // 0x00A1DB80-0x00A1DC30 0x00A1DC30-0x00A1DD1C
		[Obsolete] // 0x004F06BC-0x004F06F8
		public double eastOutTime { get; } // 0x00A1DD1C-0x00A1DD54 
		public double easeOutTime { get; } // 0x00A1DD54-0x00A1DD8C 
		public double blendInDuration { get; set; } // 0x00A1DD8C-0x00A1DDB8 0x00A1DDB8-0x00A1DE54
		public double blendOutDuration { get; set; } // 0x00A1DE54-0x00A1DE80 0x00A1DE80-0x00A1DF1C
		public BlendCurveMode blendInCurveMode { get; set; } // 0x00A1DF1C-0x00A1DF24 0x00A1DF24-0x00A1DF2C
		public BlendCurveMode blendOutCurveMode { get; set; } // 0x00A1DF2C-0x00A1DF34 0x00A1DF34-0x00A1DF3C
		public bool hasBlendIn { get; } // 0x00A1DF3C-0x00A1DF74 
		public bool hasBlendOut { get; } // 0x00A1DF74-0x00A1DFAC 
		public AnimationCurve mixInCurve { get; set; } // 0x00A1DFAC-0x00A1E048 0x00A1E060-0x00A1E068
		public float mixInPercentage { get; } // 0x00A1E068-0x00A1E094 
		public double mixInDuration { get; } // 0x00A1E094-0x00A1E0E8 
		public AnimationCurve mixOutCurve { get; set; } // 0x00A1E0E8-0x00A1E184 0x00A1E19C-0x00A1E1A4
		public double mixOutTime { get; } // 0x00A1E1A4-0x00A1E1DC 
		public double mixOutDuration { get; } // 0x00A1E1DC-0x00A1E230 
		public float mixOutPercentage { get; } // 0x00A1E230-0x00A1E25C 
		public bool recordable { get; internal set; } // 0x00A1E25C-0x00A1E264 0x00A1E264-0x00A1E270
		[Obsolete] // 0x004F06F8-0x004F0734
		public List<string> exposedParameters { get; } // 0x00A1E270-0x00A1E2E4 
		public ClipCaps clipCaps { get; } // 0x00A19E64-0x00A19F54 
		public AnimationClip animationClip { get; } // 0x00A1E57C-0x00A1E68C 
		public ClipExtrapolation postExtrapolationMode { get; internal set; } // 0x00A12448-0x00A12478 0x00A092B0-0x00A092EC
		public ClipExtrapolation preExtrapolationMode { get; internal set; } // 0x00A1E68C-0x00A1E6BC 0x00A09274-0x00A092B0
		public double extrapolatedStart { get; } // 0x00A15388-0x00A153A0 
		public double extrapolatedDuration { get; } // 0x00A0C8F8-0x00A0C9D0 
	
		// Nested types
		private enum Versions // TypeDefIndex: 2445
		{
			Initial = 0,
			ClipInFromGlobalToLocal = 1
		}
	
		private static class TimelineClipUpgrade // TypeDefIndex: 2446
		{
			// Methods
			public static void UpgradeClipInFromGlobalToLocal(TimelineClip clip); // 0x00A1D264-0x00A1D2A0
		}
	
		public enum ClipExtrapolation // TypeDefIndex: 2447
		{
			None = 0,
			Hold = 1,
			Loop = 2,
			PingPong = 3,
			Continue = 4
		}
	
		public enum BlendCurveMode // TypeDefIndex: 2448
		{
			Auto = 0,
			Manual = 1
		}
	
		// Constructors
		internal TimelineClip(TrackAsset parent); // 0x00A1D2A0-0x00A1D2E0
		static TimelineClip(); // 0x00A1EA04-0x00A1EAC8
	
		// Methods
		private void UpgradeToLatestVersion(); // 0x00A1D22C-0x00A1D264
		internal int Hash(); // 0x00A1E2E4-0x00A1E3A0
		public float EvaluateMixOut(double time); // 0x00A15990-0x00A15ACC
		public float EvaluateMixIn(double time); // 0x00A15814-0x00A1592C
		private static AnimationCurve GetDefaultMixInCurve(); // 0x00A1E048-0x00A1E060
		private static AnimationCurve GetDefaultMixOutCurve(); // 0x00A1E184-0x00A1E19C
		public double ToLocalTime(double time); // 0x00A15ACC-0x00A15BCC
		public double ToLocalTimeUnbound(double time); // 0x00A1E4D0-0x00A1E52C
		internal double FromLocalTimeUnbound(double time); // 0x00A1E52C-0x00A1E57C
		private static double SanitizeTimeValue(double value, double defaultValue); // 0x00A1D540-0x00A1D6A0
		internal void SetPostExtrapolationTime(double time); // 0x00A1E6BC-0x00A1E6C4
		internal void SetPreExtrapolationTime(double time); // 0x00A1E6C4-0x00A1E6CC
		public bool IsExtrapolatedTime(double sequenceTime); // 0x00A1E6CC-0x00A1E718
		public bool IsPreExtrapolatedTime(double sequenceTime); // 0x00A157B8-0x00A15814
		public bool IsPostExtrapolatedTime(double sequenceTime); // 0x00A1592C-0x00A15990
		private static double GetExtrapolatedTime(double time, ClipExtrapolation mode, double duration); // 0x00A1E3A0-0x00A1E4D0
		public void CreateCurves(string curvesClipName); // 0x00A1E718-0x00A1E7EC
		void ISerializationCallbackReceiver.OnBeforeSerialize(); // 0x00A1E7EC-0x00A1E7F8
		void ISerializationCallbackReceiver.OnAfterDeserialize(); // 0x00A1E7F8-0x00A1E830
		public override string ToString(); // 0x00A1E830-0x00A1EA04
		private void UpdateDirty(double oldValue, double newValue); // 0x00A1D534-0x00A1D538
	}

	[Serializable]
	public class TimelineAsset : PlayableAsset, ISerializationCallbackReceiver, ITimelineClipAsset, IPropertyPreview // TypeDefIndex: 2449
	{
		// Fields
		private const int k_LatestVersion = 0; // Metadata: 0x001F4881
		[HideInInspector] // 0x004EF3E4-0x004EF41C
		[SerializeField] // 0x004EF3E4-0x004EF41C
		private int m_Version; // 0x18
		[HideInInspector] // 0x004EF41C-0x004EF454
		[SerializeField] // 0x004EF41C-0x004EF454
		private List<ScriptableObject> m_Tracks; // 0x20
		[HideInInspector] // 0x004EF454-0x004EF48C
		[SerializeField] // 0x004EF454-0x004EF48C
		private double m_FixedDuration; // 0x28
		[NonSerialized]
		[HideInInspector] // 0x004EF48C-0x004EF49C
		private TrackAsset[] m_CacheOutputTracks; // 0x30
		[NonSerialized]
		[HideInInspector] // 0x004EF49C-0x004EF4AC
		private List<TrackAsset> m_CacheRootTracks; // 0x38
		[NonSerialized]
		[HideInInspector] // 0x004EF4AC-0x004EF4BC
		private List<TrackAsset> m_CacheFlattenedTracks; // 0x40
		[HideInInspector] // 0x004EF4BC-0x004EF4F4
		[SerializeField] // 0x004EF4BC-0x004EF4F4
		private EditorSettings m_EditorSettings; // 0x48
		[SerializeField] // 0x004EF4F4-0x004EF504
		private DurationMode m_DurationMode; // 0x50
		[HideInInspector] // 0x004EF504-0x004EF53C
		[SerializeField] // 0x004EF504-0x004EF53C
		private MarkerTrack m_MarkerTrack; // 0x58
	
		// Properties
		public EditorSettings editorSettings { get; } // 0x00A19594-0x00A1959C 
		public override double duration { get; } // 0x00A1959C-0x00A195B0 
		public double fixedDuration { get; set; } // 0x00A19920-0x00A199F0 0x00A199F0-0x00A19A70
		public DurationMode durationMode { get; set; } // 0x00A19A70-0x00A19A78 0x00A19A78-0x00A19A80
		public override IEnumerable<PlayableBinding> outputs { [IteratorStateMachine] /* 0x004EFD4C-0x004EFDB0 */ get; } // 0x00A19A80-0x00A19B04 
		public ClipCaps clipCaps { get; } // 0x00A19B3C-0x00A19E40 
		public int outputTrackCount { get; } // 0x00A19F54-0x00A19F88 
		public int rootTrackCount { get; } // 0x00A1A348-0x00A1A3A4 
		internal IEnumerable<TrackAsset> flattenedTracks { get; } // 0x00A1A800-0x00A1A904 
		public MarkerTrack markerTrack { get; } // 0x00A1ABE8-0x00A1ABF0 
		internal List<ScriptableObject> trackObjects { get; } // 0x00A1ABF0-0x00A1ABF8 
	
		// Nested types
		private enum Versions // TypeDefIndex: 2450
		{
			Initial = 0
		}
	
		private static class TimelineAssetUpgrade // TypeDefIndex: 2451
		{
		}
	
		[Obsolete] // 0x004EEC24-0x004EEC60
		public enum MediaType // TypeDefIndex: 2452
		{
			Animation = 0,
			Audio = 1,
			Texture = 2,
			Video = 2,
			Script = 3,
			Hybrid = 4,
			Group = 5
		}
	
		public enum DurationMode // TypeDefIndex: 2453
		{
			BasedOnClips = 0,
			FixedLength = 1
		}
	
		[Serializable]
		public class EditorSettings // TypeDefIndex: 2454
		{
			// Fields
			internal static readonly float kMinFps; // 0x00
			internal static readonly float kMaxFps; // 0x04
			internal static readonly float kDefaultFps; // 0x08
			[HideInInspector] // 0x004EFB8C-0x004EFBC4
			[SerializeField] // 0x004EFB8C-0x004EFBC4
			private float m_Framerate; // 0x10
	
			// Properties
			public float fps { get; set; } // 0x00A1D184-0x00A1D18C 0x00A1A6DC-0x00A1A700
	
			// Constructors
			public EditorSettings(); // 0x00A1C93C-0x00A1C9B4
			static EditorSettings(); // 0x00A1D18C-0x00A1D22C
		}
	
		[CompilerGenerated] // 0x004EEC60-0x004EEC70
		private sealed class _get_outputs_d__27 : IEnumerable<PlayableBinding>, IEnumerator<PlayableBinding> // TypeDefIndex: 2455
		{
			// Fields
			private int __1__state; // 0x10
			private PlayableBinding __2__current; // 0x18
			private int __l__initialThreadId; // 0x38
			public TimelineAsset __4__this; // 0x40
			private IEnumerator<TrackAsset> __7__wrap1; // 0x48
			private IEnumerator<PlayableBinding> __7__wrap2; // 0x50
	
			// Properties
			PlayableBinding IEnumerator<UnityEngine.Playables.PlayableBinding>.Current { [DebuggerHidden] /* 0x004F0290-0x004F02A0 */ get; } // 0x00A1CFEC-0x00A1D000 
			object IEnumerator.Current { [DebuggerHidden] /* 0x004F02B0-0x004F02C0 */ get; } // 0x00A1D064-0x00A1D0D0 
	
			// Constructors
			[DebuggerHidden] // 0x004F0270-0x004F0280
			public _get_outputs_d__27(int __1__state); // 0x00A19B04-0x00A19B3C
	
			// Methods
			[DebuggerHidden] // 0x004F0280-0x004F0290
			void IDisposable.Dispose(); // 0x00A1C9B4-0x00A1CA2C
			private bool MoveNext(); // 0x00A1CBAC-0x00A1CFEC
			private void __m__Finally1(); // 0x00A1CAEC-0x00A1CBAC
			private void __m__Finally2(); // 0x00A1CA2C-0x00A1CAEC
			[DebuggerHidden] // 0x004F02A0-0x004F02B0
			void IEnumerator.Reset(); // 0x00A1D000-0x00A1D064
			[DebuggerHidden] // 0x004F02C0-0x004F02D0
			IEnumerator<PlayableBinding> IEnumerable<PlayableBinding>.GetEnumerator(); // 0x00A1D0D0-0x00A1D180
			[DebuggerHidden] // 0x004F02D0-0x004F02E0
			IEnumerator IEnumerable.GetEnumerator(); // 0x00A1D180-0x00A1D184
		}
	
		// Constructors
		public TimelineAsset(); // 0x00A1C8D8-0x00A1C93C
	
		// Methods
		private void UpgradeToLatestVersion(); // 0x00A19590-0x00A19594
		private void OnValidate(); // 0x00A1A5F4-0x00A1A62C
		private static float GetValidFramerate(float framerate); // 0x00A1A62C-0x00A1A6DC
		public TrackAsset GetRootTrack(int index); // 0x00A1A700-0x00A1A784
		public IEnumerable<TrackAsset> GetRootTracks(); // 0x00A19E40-0x00A19E64
		public TrackAsset GetOutputTrack(int index); // 0x00A1A784-0x00A1A7DC
		public IEnumerable<TrackAsset> GetOutputTracks(); // 0x00A1A7DC-0x00A1A800
		private void UpdateRootTrackCache(); // 0x00A1A3A4-0x00A1A5F4
		private void UpdateOutputTrackCache(); // 0x00A19F88-0x00A1A348
		internal void AddTrackInternal(TrackAsset track); // 0x00A1ABF8-0x00A1AC7C
		internal void RemoveTrack(TrackAsset track); // 0x00A1AC88-0x00A1ADA0
		public override Playable CreatePlayable(PlayableGraph graph, GameObject go); // 0x00A1ADA0-0x00A1AF00
		void ISerializationCallbackReceiver.OnBeforeSerialize(); // 0x00A1AF00-0x00A1AF08
		void ISerializationCallbackReceiver.OnAfterDeserialize(); // 0x00A1AF08-0x00A1AF14
		private void __internalAwake(); // 0x00A1AF14-0x00A1B060
		public void GatherProperties(PlayableDirector director, IPropertyCollector driver); // 0x00A10178-0x00A1041C
		public void CreateMarkerTrack(); // 0x00A1B060-0x00A1B12C
		internal void Invalidate(); // 0x00A1AC7C-0x00A1AC88
		private double CalculateDuration(); // 0x00A195B0-0x00A19920
		private static void AddSubTracksRecursive(TrackAsset track, ref List<TrackAsset> allTracks); // 0x00A1A904-0x00A1ABE8
		public TrackAsset CreateTrack(Type type, TrackAsset parent, string name); // 0x00A1B12C-0x00A1B4C4
		public T CreateTrack<T>(TrackAsset parent, string name)
			where T : TrackAsset, new();
		public bool DeleteClip(TimelineClip clip); // 0x00A1BD04-0x00A1BF08
		public bool DeleteTrack(TrackAsset track); // 0x00A1C090-0x00A1C534
		internal void MoveLastTrackBefore(TrackAsset asset); // 0x00A1C6BC-0x00A1C8D8
		internal TrackAsset AllocateTrack(TrackAsset trackAssetParent, string trackName, Type trackType); // 0x00A1BAC4-0x00A1BD04
		private void DeleteRecordedAnimation(TrackAsset track); // 0x00A1C534-0x00A1C6BC
		private void DeleteRecordedAnimation(TimelineClip clip); // 0x00A1BF08-0x00A1C090
	}

	[Serializable]
	[IgnoreOnPlayableTrack] // 0x004EE65C-0x004EE66C
	public abstract class TrackAsset : PlayableAsset, ISerializationCallbackReceiver, IPropertyPreview, ICurvesOwner // TypeDefIndex: 2456
	{
		// Fields
		private const int k_LatestVersion = 3; // Metadata: 0x001F48AD
		[HideInInspector] // 0x004EF53C-0x004EF574
		[SerializeField] // 0x004EF53C-0x004EF574
		private int m_Version; // 0x18
		[FormerlySerializedAs] // 0x004EF574-0x004EF5F8
		[HideInInspector] // 0x004EF574-0x004EF5F8
		[Obsolete] // 0x004EF574-0x004EF5F8
		[SerializeField] // 0x004EF574-0x004EF5F8
		internal AnimationClip m_AnimClip; // 0x20
		internal const string kDefaultCurvesName = "Track Parameters"; // Metadata: 0x001F48B1
		[CompilerGenerated] // 0x004EF5F8-0x004EF608
		private static Action<TimelineClip, GameObject, Playable> OnClipPlayableCreate; // 0x00
		[CompilerGenerated] // 0x004EF608-0x004EF618
		private static Action<TrackAsset, GameObject, Playable> OnTrackAnimationPlayableCreate; // 0x08
		[HideInInspector] // 0x004EF618-0x004EF650
		[SerializeField] // 0x004EF618-0x004EF650
		private bool m_Locked; // 0x28
		[HideInInspector] // 0x004EF650-0x004EF688
		[SerializeField] // 0x004EF650-0x004EF688
		private bool m_Muted; // 0x29
		[HideInInspector] // 0x004EF688-0x004EF6C0
		[SerializeField] // 0x004EF688-0x004EF6C0
		private string m_CustomPlayableFullTypename; // 0x30
		[HideInInspector] // 0x004EF6C0-0x004EF6F8
		[SerializeField] // 0x004EF6C0-0x004EF6F8
		private AnimationClip m_Curves; // 0x38
		[HideInInspector] // 0x004EF6F8-0x004EF730
		[SerializeField] // 0x004EF6F8-0x004EF730
		private PlayableAsset m_Parent; // 0x40
		[HideInInspector] // 0x004EF730-0x004EF768
		[SerializeField] // 0x004EF730-0x004EF768
		private List<ScriptableObject> m_Children; // 0x48
		[NonSerialized]
		private int m_ItemsHash; // 0x50
		[NonSerialized]
		private TimelineClip[] m_ClipsCache; // 0x58
		private DiscreteTime m_Start; // 0x60
		private DiscreteTime m_End; // 0x68
		private bool m_CacheSorted; // 0x70
		private bool? m_SupportsNotifications; // 0x71
		private static TrackAsset[] s_EmptyCache; // 0x10
		private IEnumerable<TrackAsset> m_ChildTrackCache; // 0x78
		private static Dictionary<Type, TrackBindingTypeAttribute> s_TrackBindingTypeAttributeCache; // 0x18
		[HideInInspector] // 0x004EF768-0x004EF7A0
		[SerializeField] // 0x004EF768-0x004EF7A0
		protected internal List<TimelineClip> m_Clips; // 0x80
		[HideInInspector] // 0x004EF7A0-0x004EF7D8
		[SerializeField] // 0x004EF7A0-0x004EF7D8
		private MarkerList m_Markers; // 0x88
	
		// Properties
		public double start { get; } // 0x00F77370-0x00F773E4 
		public double end { get; } // 0x00F774F4-0x00F77568 
		public sealed override double duration { get; } // 0x00F77568-0x00F775E8 
		public bool muted { get; set; } // 0x00F775E8-0x00F775F0 0x00F775F0-0x00F775FC
		public bool mutedInHierarchy { get; } // 0x00F775FC-0x00F777A8 
		public TimelineAsset timelineAsset { get; } // 0x00F75EC0-0x00F76038 
		public PlayableAsset parent { get; internal set; } // 0x00F777A8-0x00F777B0 0x00F777B0-0x00F777B8
		internal TimelineClip[] clips { get; } // 0x00F777BC-0x00F7785C 
		public virtual bool isEmpty { get; } // 0x00F7785C-0x00F778D4 
		public bool hasClips { get; } // 0x00F778D4-0x00F77930 
		public bool hasCurves { get; } // 0x00F77930-0x00F779CC 
		public bool isSubTrack { get; } // 0x00F75D04-0x00F75E28 
		public override IEnumerable<PlayableBinding> outputs { [IteratorStateMachine] /* 0x004EFDF0-0x004EFE54 */ get; } // 0x00F779D8-0x00F77A5C 
		internal string customPlayableTypename { get; set; } // 0x00F77C58-0x00F77C60 0x00F77C60-0x00F77C68
		public AnimationClip curves { get; internal set; } // 0x00F77C68-0x00F77C70 0x00F77C70-0x00F77C78
		string ICurvesOwner.defaultCurvesName { get; } // 0x00F77C78-0x00F77CC0 
		UnityEngine.Object ICurvesOwner.asset { get; } // 0x00F77CC0-0x00F77CC4 
		UnityEngine.Object ICurvesOwner.assetOwner { get; } // 0x00F77CC4-0x00F77CC8 
		TrackAsset ICurvesOwner.targetTrack { get; } // 0x00F77CC8-0x00F77CCC 
		internal List<ScriptableObject> subTracksObjects { get; } // 0x00F77CCC-0x00F77CD4 
		public bool locked { get; set; } // 0x00F77CD4-0x00F77CDC 0x00F77CDC-0x00F77CE8
		public bool lockedInHierarchy { get; } // 0x00F77CE8-0x00F77CFC 
		internal bool parentLocked { get; } // 0x00F77CFC-0x00F77DE8 
		public bool supportsNotifications { get; } // 0x00F77DE8-0x00F77E8C 
	
		// Events
		internal static event Action<TimelineClip, GameObject, Playable> OnClipPlayableCreate {
			add; // 0x00F76FB8-0x00F770A4
			remove; // 0x00F770A4-0x00F77190
		}
		internal static event Action<TrackAsset, GameObject, Playable> OnTrackAnimationPlayableCreate {
			add; // 0x00F77190-0x00F77280
			remove; // 0x00F77280-0x00F77370
		}
	
		// Nested types
		internal enum Versions // TypeDefIndex: 2457
		{
			Initial = 0,
			RotationAsEuler = 1,
			RootMotionUpgrade = 2,
			AnimatedTrackProperties = 3
		}
	
		private static class TrackAssetUpgrade // TypeDefIndex: 2458
		{
		}
	
		[CompilerGenerated] // 0x004EEC70-0x004EEC80
		private sealed class _get_outputs_d__63 : IEnumerable<PlayableBinding>, IEnumerator<PlayableBinding> // TypeDefIndex: 2459
		{
			// Fields
			private int __1__state; // 0x10
			private PlayableBinding __2__current; // 0x18
			private int __l__initialThreadId; // 0x38
			public TrackAsset __4__this; // 0x40
	
			// Properties
			PlayableBinding IEnumerator<UnityEngine.Playables.PlayableBinding>.Current { [DebuggerHidden] /* 0x004F0300-0x004F0310 */ get; } // 0x00F7BDB4-0x00F7BDC8 
			object IEnumerator.Current { [DebuggerHidden] /* 0x004F0320-0x004F0330 */ get; } // 0x00F7BE2C-0x00F7BE98 
	
			// Constructors
			[DebuggerHidden] // 0x004F02E0-0x004F02F0
			public _get_outputs_d__63(int __1__state); // 0x00F77A5C-0x00F77A94
	
			// Methods
			[DebuggerHidden] // 0x004F02F0-0x004F0300
			void IDisposable.Dispose(); // 0x00F7BB7C-0x00F7BB80
			private bool MoveNext(); // 0x00F7BB80-0x00F7BDB4
			[DebuggerHidden] // 0x004F0310-0x004F0320
			void IEnumerator.Reset(); // 0x00F7BDC8-0x00F7BE2C
			[DebuggerHidden] // 0x004F0330-0x004F0340
			IEnumerator<PlayableBinding> IEnumerable<PlayableBinding>.GetEnumerator(); // 0x00F7BE98-0x00F7BF48
			[DebuggerHidden] // 0x004F0340-0x004F0350
			IEnumerator IEnumerable.GetEnumerator(); // 0x00F7BF48-0x00F7BF4C
		}
	
		[Serializable]
		[CompilerGenerated] // 0x004EEC80-0x004EEC90
		private sealed class __c // TypeDefIndex: 2460
		{
			// Fields
			public static readonly __c __9; // 0x00
			public static Comparison<TimelineClip> __9__117_0; // 0x08
	
			// Constructors
			static __c(); // 0x00F7BACC-0x00F7BB30
			public __c(); // 0x00F7BB30-0x00F7BB38
	
			// Methods
			internal int _SortClips_b__117_0(TimelineClip clip1, TimelineClip clip2); // 0x00F7BB38-0x00F7BB7C
		}
	
		// Constructors
		protected TrackAsset(); // 0x00F7B97C-0x00F7BA38
		static TrackAsset(); // 0x00F7BA38-0x00F7BACC
	
		// Methods
		protected virtual void OnBeforeTrackSerialize(); // 0x00F76A58-0x00F76A5C
		protected virtual void OnAfterTrackDeserialize(); // 0x00F76A5C-0x00F76A60
		internal virtual void OnUpgradeFromVersion(int oldVersion); // 0x00F76A60-0x00F76A64
		void ISerializationCallbackReceiver.OnBeforeSerialize(); // 0x00F76A64-0x00F76BC8
		void ISerializationCallbackReceiver.OnAfterDeserialize(); // 0x00F76BC8-0x00F76F00
		private void UpgradeToLatestVersion(); // 0x00F76FA8-0x00F76FAC
		public IEnumerable<TimelineClip> GetClips(); // 0x00F777B8-0x00F777BC
		public IEnumerable<TrackAsset> GetChildTracks(); // 0x00F77A94-0x00F77AB8
		private void __internalAwake(); // 0x00F77E8C-0x00F77F30
		public void CreateCurves(string curvesClipName); // 0x00F77F30-0x00F77FE8
		public virtual Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount); // 0x00F77FE8-0x00F78068
		public sealed override Playable CreatePlayable(PlayableGraph graph, GameObject go); // 0x00F78068-0x00F780C8
		public TimelineClip CreateDefaultClip(); // 0x00F780C8-0x00F78370
		public TimelineClip CreateClip<T>()
			where T : ScriptableObject, IPlayableAsset;
		public IMarker CreateMarker(Type type, double time); // 0x00F783A4-0x00F783B8
		public T CreateMarker<T>(double time)
			where T : ScriptableObject, IMarker;
		public bool DeleteMarker(IMarker marker); // 0x00F783B8-0x00F783C4
		public IEnumerable<IMarker> GetMarkers(); // 0x00F76FAC-0x00F76FB8
		public int GetMarkerCount(); // 0x00F779CC-0x00F779D8
		public IMarker GetMarker(int idx); // 0x00F783C4-0x00F783D0
		internal TimelineClip CreateClip(Type requestedType); // 0x00F783D0-0x00F78570
		internal TimelineClip CreateAndAddNewClipOfType(Type requestedType); // 0x00F78370-0x00F783A4
		internal TimelineClip CreateClipOfType(Type requestedType); // 0x00F78814-0x00F78A3C
		internal TimelineClip CreateClipFromPlayableAsset(IPlayableAsset asset); // 0x00F78D70-0x00F79028
		private TimelineClip CreateClipFromAsset(ScriptableObject playableAsset); // 0x00F78ACC-0x00F78D70
		internal IEnumerable<ScriptableObject> GetMarkersRaw(); // 0x00F79264-0x00F7926C
		internal void ClearMarkers(); // 0x00F7926C-0x00F79278
		internal void AddMarker(ScriptableObject e); // 0x00F79278-0x00F79284
		internal bool DeleteMarkerRaw(ScriptableObject marker); // 0x00F79284-0x00F792C8
		private int GetTimeRangeHash(); // 0x00F792C8-0x00F79760
		internal void AddClip(TimelineClip newClip); // 0x00F78A3C-0x00F78ACC
		private Playable CreateNotificationsPlayable(PlayableGraph graph, Playable mixerPlayable, GameObject go, Playable timelinePlayable); // 0x00F79760-0x00F79904
		internal Playable CreatePlayableGraph(PlayableGraph graph, GameObject go, IntervalTree<RuntimeElement> tree, Playable timelinePlayable); // 0x00F76064-0x00F76328
		internal virtual Playable OnCreateClipPlayableGraph(PlayableGraph graph, GameObject go, IntervalTree<RuntimeElement> tree); // 0x00F79DA0-0x00F7A0A8
		private void ConfigureTrackAnimation(IntervalTree<RuntimeElement> tree, GameObject go, Playable blend); // 0x00F79C48-0x00F79DA0
		internal void SortClips(); // 0x00F75198-0x00F752BC
		internal void ClearClipsInternal(); // 0x00F7A0A8-0x00F7A114
		internal void ClearSubTracksInternal(); // 0x00F7A114-0x00F7A180
		internal void OnClipMove(); // 0x00F7A180-0x00F7A188
		internal TimelineClip CreateNewClipContainerInternal(); // 0x00F79028-0x00F79264
		internal void AddChild(TrackAsset child); // 0x00F7A188-0x00F7A24C
		internal void MoveLastTrackBefore(TrackAsset asset); // 0x00F7A24C-0x00F7A47C
		internal bool RemoveSubTrack(TrackAsset child); // 0x00F7A47C-0x00F7A510
		internal void RemoveClip(TimelineClip clip); // 0x00F7A510-0x00F7A580
		internal virtual void GetEvaluationTime(out double outStart, out double outDuration); // 0x00F7A580-0x00F7A7D8
		internal virtual void GetSequenceTime(out double outStart, out double outDuration); // 0x00F7AB58-0x00F7AB68
		public virtual void GatherProperties(PlayableDirector director, IPropertyCollector driver); // 0x00F7AB68-0x00F7B20C
		internal GameObject GetGameObjectBinding(PlayableDirector director); // 0x00F7B20C-0x00F7B390
		internal bool ValidateClipType(Type clipType); // 0x00F78570-0x00F78814
		protected virtual void OnCreateClip(TimelineClip clip); // 0x00F7B390-0x00F7B394
		private void UpdateDuration(); // 0x00F773E4-0x00F774F4
		protected internal virtual int CalculateItemsHash(); // 0x00F7B394-0x00F7B434
		protected virtual Playable CreatePlayable(PlayableGraph graph, GameObject gameObject, TimelineClip clip); // 0x00F7B654-0x00F7B8D8
		internal void Invalidate(); // 0x00F76F00-0x00F76FA8
		internal double GetNotificationDuration(); // 0x00F7A7E4-0x00F7AB58
		internal virtual bool CanCompileClips(); // 0x00F7B8D8-0x00F7B93C
		internal bool IsCompilable(); // 0x00F74DFC-0x00F75198
		private void UpdateChildTrackCache(); // 0x00F77AB8-0x00F77C58
		internal virtual int Hash(); // 0x00F7B93C-0x00F7B97C
		private int GetClipsHash(); // 0x00F7B434-0x00F7B554
		protected static int GetAnimationClipHash(AnimationClip clip); // 0x00F7B554-0x00F7B654
		private bool HasNotifications(); // 0x00F7A7D8-0x00F7A7E4
		private bool CanCompileNotifications(); // 0x00F79C0C-0x00F79C48
		private bool CanCompileClipsRecursive(); // 0x00F79904-0x00F79C0C
	}

	[AttributeUsage] // 0x004EE66C-0x004EE680
	public class TrackColorAttribute : Attribute // TypeDefIndex: 2461
	{
		// Fields
		private Color m_Color; // 0x10
	
		// Properties
		public Color color { get; } // 0x00F7C468-0x00F7C474 
	
		// Constructors
		public TrackColorAttribute(float r, float g, float b); // 0x00F7C474-0x00F7C4F0
	}

	[Serializable]
	[UnityEngine.Timeline.NotKeyable] // 0x004EE680-0x004EE690
	internal class AudioClipProperties : PlayableBehaviour // TypeDefIndex: 2462
	{
		// Fields
		[Range] // 0x004EF7D8-0x004EF7F0
		public float volume; // 0x10
	
		// Constructors
		public AudioClipProperties(); // 0x00A0B8E4-0x00A0B8F4
	}

	[Serializable]
	internal class AudioMixerProperties : PlayableBehaviour // TypeDefIndex: 2463
	{
		// Fields
		[Range] // 0x004EF7F0-0x004EF808
		public float volume; // 0x10
		[Range] // 0x004EF808-0x004EF820
		public float stereoPan; // 0x14
		[Range] // 0x004EF820-0x004EF838
		public float spatialBlend; // 0x18
	
		// Constructors
		public AudioMixerProperties(); // 0x00A0BB10-0x00A0BB20
	
		// Methods
		public override void PrepareFrame(Playable playable, FrameData info); // 0x00A0B8F4-0x00A0BB10
	}

	[Serializable]
	public class AudioPlayableAsset : PlayableAsset, ITimelineClipAsset // TypeDefIndex: 2464
	{
		// Fields
		[SerializeField] // 0x004EF838-0x004EF848
		private AudioClip m_Clip; // 0x18
		[SerializeField] // 0x004EF848-0x004EF858
		private bool m_Loop; // 0x20
		[HideInInspector] // 0x004EF858-0x004EF890
		[SerializeField] // 0x004EF858-0x004EF890
		private float m_bufferingTime; // 0x24
		[SerializeField] // 0x004EF890-0x004EF8A0
		private AudioClipProperties m_ClipProperties; // 0x28
	
		// Properties
		internal float bufferingTime { get; set; } // 0x00A0BB20-0x00A0BB28 0x00A0BB28-0x00A0BB30
		public AudioClip clip { get; set; } // 0x00A0BB30-0x00A0BB38 0x00A0BB38-0x00A0BB40
		public bool loop { get; set; } // 0x00A0BB40-0x00A0BB48 0x00A0BB48-0x00A0BB54
		public override double duration { get; } // 0x00A0BB54-0x00A0BC20 
		public override IEnumerable<PlayableBinding> outputs { [IteratorStateMachine] /* 0x004EFE54-0x004EFEB8 */ get; } // 0x00A0BC20-0x00A0BCA4 
		public ClipCaps clipCaps { get; } // 0x00A0BE08-0x00A0BE14 
	
		// Nested types
		[CompilerGenerated] // 0x004EEC90-0x004EECA0
		private sealed class _get_outputs_d__16 : IEnumerable<PlayableBinding>, IEnumerator<PlayableBinding> // TypeDefIndex: 2465
		{
			// Fields
			private int __1__state; // 0x10
			private PlayableBinding __2__current; // 0x18
			private int __l__initialThreadId; // 0x38
			public AudioPlayableAsset __4__this; // 0x40
	
			// Properties
			PlayableBinding IEnumerator<UnityEngine.Playables.PlayableBinding>.Current { [DebuggerHidden] /* 0x004F0370-0x004F0380 */ get; } // 0x00A0BF2C-0x00A0BF40 
			object IEnumerator.Current { [DebuggerHidden] /* 0x004F0390-0x004F03A0 */ get; } // 0x00A0BFA4-0x00A0C010 
	
			// Constructors
			[DebuggerHidden] // 0x004F0350-0x004F0360
			public _get_outputs_d__16(int __1__state); // 0x00A0BCA4-0x00A0BCDC
	
			// Methods
			[DebuggerHidden] // 0x004F0360-0x004F0370
			void IDisposable.Dispose(); // 0x00A0BE90-0x00A0BE94
			private bool MoveNext(); // 0x00A0BE94-0x00A0BF2C
			[DebuggerHidden] // 0x004F0380-0x004F0390
			void IEnumerator.Reset(); // 0x00A0BF40-0x00A0BFA4
			[DebuggerHidden] // 0x004F03A0-0x004F03B0
			IEnumerator<PlayableBinding> IEnumerable<PlayableBinding>.GetEnumerator(); // 0x00A0C010-0x00A0C0C0
			[DebuggerHidden] // 0x004F03B0-0x004F03C0
			IEnumerator IEnumerable.GetEnumerator(); // 0x00A0C0C0-0x00A0C0C4
		}
	
		// Constructors
		public AudioPlayableAsset(); // 0x00A0BE14-0x00A0BE90
	
		// Methods
		public override Playable CreatePlayable(PlayableGraph graph, GameObject go); // 0x00A0BCDC-0x00A0BE08
	}

	[Serializable]
	[TrackBindingType] // 0x004EE690-0x004EE720
	[TrackClipType] // 0x004EE690-0x004EE720
	public class AudioTrack : TrackAsset // TypeDefIndex: 2466
	{
		// Fields
		[SerializeField] // 0x004EF8A0-0x004EF8B0
		private AudioMixerProperties m_TrackProperties; // 0xA0
	
		// Properties
		public override IEnumerable<PlayableBinding> outputs { [IteratorStateMachine] /* 0x004EFEB8-0x004EFF1C */ get; } // 0x00A0C9D0-0x00A0CA54 
	
		// Nested types
		[CompilerGenerated] // 0x004EECA0-0x004EECB0
		private sealed class _get_outputs_d__5 : IEnumerable<PlayableBinding>, IEnumerator<PlayableBinding> // TypeDefIndex: 2467
		{
			// Fields
			private int __1__state; // 0x10
			private PlayableBinding __2__current; // 0x18
			private int __l__initialThreadId; // 0x38
			public AudioTrack __4__this; // 0x40
	
			// Properties
			PlayableBinding IEnumerator<UnityEngine.Playables.PlayableBinding>.Current { [DebuggerHidden] /* 0x004F03E0-0x004F03F0 */ get; } // 0x00A0CC7C-0x00A0CC90 
			object IEnumerator.Current { [DebuggerHidden] /* 0x004F0400-0x004F0410 */ get; } // 0x00A0CCF4-0x00A0CD60 
	
			// Constructors
			[DebuggerHidden] // 0x004F03C0-0x004F03D0
			public _get_outputs_d__5(int __1__state); // 0x00A0CA54-0x00A0CA8C
	
			// Methods
			[DebuggerHidden] // 0x004F03D0-0x004F03E0
			void IDisposable.Dispose(); // 0x00A0CBE0-0x00A0CBE4
			private bool MoveNext(); // 0x00A0CBE4-0x00A0CC7C
			[DebuggerHidden] // 0x004F03F0-0x004F0400
			void IEnumerator.Reset(); // 0x00A0CC90-0x00A0CCF4
			[DebuggerHidden] // 0x004F0410-0x004F0420
			IEnumerator<PlayableBinding> IEnumerable<PlayableBinding>.GetEnumerator(); // 0x00A0CD60-0x00A0CE10
			[DebuggerHidden] // 0x004F0420-0x004F0430
			IEnumerator IEnumerable.GetEnumerator(); // 0x00A0CE10-0x00A0CE14
		}
	
		// Constructors
		public AudioTrack(); // 0x00A0CB50-0x00A0CBE0
	
		// Methods
		public TimelineClip CreateClip(AudioClip clip); // 0x00A0C0C4-0x00A0C210
		internal override Playable OnCreateClipPlayableGraph(PlayableGraph graph, GameObject go, IntervalTree<RuntimeElement> tree); // 0x00A0C210-0x00A0C310
		private void InitializeClips(PlayableGraph graph, GameObject go, IntervalTree<RuntimeElement> tree, AudioMixerPlayable clipBlender); // 0x00A0C310-0x00A0C79C
		private void OnValidate(); // 0x00A0CA8C-0x00A0CB50
	}

	[Flags] // 0x004EE720-0x004EE730
	public enum ClipCaps // TypeDefIndex: 2468
	{
		All = -1,
		None = 0,
		Looping = 1,
		Extrapolation = 2,
		ClipIn = 4,
		SpeedMultiplier = 8,
		Blending = 16
	}

	internal static class TimelineClipCapsExtensions // TypeDefIndex: 2469
	{
		// Extension methods
		public static bool SupportsLooping(this TimelineClip clip); // 0x00A1EAC8-0x00A1EAE4
		public static bool SupportsExtrapolation(this TimelineClip clip); // 0x00A122F0-0x00A1230C
		public static bool SupportsClipIn(this TimelineClip clip); // 0x00A1EAE4-0x00A1EB00
		public static bool SupportsSpeedMultiplier(this TimelineClip clip); // 0x00A1EB00-0x00A1EB1C
		public static bool SupportsBlending(this TimelineClip clip); // 0x00A1EB1C-0x00A1EB38
		public static bool HasAll(this ClipCaps caps, ClipCaps flags); // 0x00A1EB38-0x00A1FBD4
		public static bool HasAny(this ClipCaps caps, ClipCaps flags); // 0x00A1D43C-0x00A1D448
	}

	[Serializable]
	[UnityEngine.Timeline.NotKeyable] // 0x004EE740-0x004EE750
	public class ControlPlayableAsset : PlayableAsset, IPropertyPreview, ITimelineClipAsset // TypeDefIndex: 2470
	{
		// Fields
		private const int k_MaxRandInt = 10000; // Metadata: 0x001F48F1
		private static readonly List<PlayableDirector> k_EmptyDirectorsList; // 0x00
		private static readonly List<ParticleSystem> k_EmptyParticlesList; // 0x08
		[SerializeField] // 0x004EF8B0-0x004EF8C0
		public ExposedReference<GameObject> sourceGameObject; // 0x18
		[SerializeField] // 0x004EF8C0-0x004EF8D0
		public GameObject prefabGameObject; // 0x28
		[SerializeField] // 0x004EF8D0-0x004EF8E0
		public bool updateParticle; // 0x30
		[SerializeField] // 0x004EF8E0-0x004EF8F0
		public uint particleRandomSeed; // 0x34
		[SerializeField] // 0x004EF8F0-0x004EF900
		public bool updateDirector; // 0x38
		[SerializeField] // 0x004EF900-0x004EF910
		public bool updateITimeControl; // 0x39
		[SerializeField] // 0x004EF910-0x004EF920
		public bool searchHierarchy; // 0x3A
		[SerializeField] // 0x004EF920-0x004EF930
		public bool active; // 0x3B
		[SerializeField] // 0x004EF930-0x004EF940
		public ActivationControlPlayable.PostPlaybackState postPlayback; // 0x3C
		private PlayableAsset m_ControlDirectorAsset; // 0x40
		private double m_Duration; // 0x48
		private bool m_SupportLoop; // 0x50
		private static HashSet<PlayableDirector> s_ProcessedDirectors; // 0x10
		private static HashSet<GameObject> s_CreatedPrefabs; // 0x18
		[CompilerGenerated] // 0x004EF940-0x004EF950
		private bool _controllingDirectors_k__BackingField; // 0x51
		[CompilerGenerated] // 0x004EF950-0x004EF960
		private bool _controllingParticles_k__BackingField; // 0x52
	
		// Properties
		internal bool controllingDirectors { [CompilerGenerated] /* 0x004EFF8C-0x004EFF9C */ get; [CompilerGenerated] /* 0x004EFF9C-0x004EFFAC */ private set; } // 0x00A0CFA8-0x00A0CFB0 0x00A0CFB0-0x00A0CFBC
		internal bool controllingParticles { [CompilerGenerated] /* 0x004EFFAC-0x004EFFBC */ get; [CompilerGenerated] /* 0x004EFFBC-0x004EFFCC */ private set; } // 0x00A0CFBC-0x00A0CFC4 0x00A0CFC4-0x00A0CFD0
		public override double duration { get; } // 0x00A0D008-0x00A0D010 
		public ClipCaps clipCaps { get; } // 0x00A0D010-0x00A0D01C 
	
		// Nested types
		[CompilerGenerated] // 0x004EECB0-0x004EECC0
		private sealed class _GetControlableScripts_d__38 : IEnumerable<MonoBehaviour>, IEnumerator<MonoBehaviour> // TypeDefIndex: 2471
		{
			// Fields
			private int __1__state; // 0x10
			private MonoBehaviour __2__current; // 0x18
			private int __l__initialThreadId; // 0x20
			private GameObject root; // 0x28
			public GameObject __3__root; // 0x30
			private MonoBehaviour[] __7__wrap1; // 0x38
			private int __7__wrap2; // 0x40
	
			// Properties
			MonoBehaviour IEnumerator<UnityEngine.MonoBehaviour>.Current { [DebuggerHidden] /* 0x004F0450-0x004F0460 */ get; } // 0x00A10714-0x00A1071C 
			object IEnumerator.Current { [DebuggerHidden] /* 0x004F0470-0x004F0480 */ get; } // 0x00A10780-0x00A10788 
	
			// Constructors
			[DebuggerHidden] // 0x004F0430-0x004F0440
			public _GetControlableScripts_d__38(int __1__state); // 0x00A0F3D0-0x00A0F408
	
			// Methods
			[DebuggerHidden] // 0x004F0440-0x004F0450
			void IDisposable.Dispose(); // 0x00A105B8-0x00A105BC
			private bool MoveNext(); // 0x00A105BC-0x00A10714
			[DebuggerHidden] // 0x004F0460-0x004F0470
			void IEnumerator.Reset(); // 0x00A1071C-0x00A10780
			[DebuggerHidden] // 0x004F0480-0x004F0490
			IEnumerator<MonoBehaviour> IEnumerable<MonoBehaviour>.GetEnumerator(); // 0x00A10788-0x00A10838
			[DebuggerHidden] // 0x004F0490-0x004F04A0
			IEnumerator IEnumerable.GetEnumerator(); // 0x00A10838-0x00A1083C
		}
	
		// Constructors
		public ControlPlayableAsset(); // 0x00A1041C-0x00A104AC
		static ControlPlayableAsset(); // 0x00A104AC-0x00A105B8
	
		// Methods
		public void OnEnable(); // 0x00A0CFD0-0x00A0D008
		public override Playable CreatePlayable(PlayableGraph graph, GameObject go); // 0x00A0D01C-0x00A0D7D0
		private static Playable ConnectPlayablesToMixer(PlayableGraph graph, List<Playable> playables); // 0x00A0EE7C-0x00A0EFCC
		private void CreateActivationPlayable(GameObject root, PlayableGraph graph, List<Playable> outplayables); // 0x00A0E264-0x00A0E36C
		private void SearchHiearchyAndConnectParticleSystem(IEnumerable<ParticleSystem> particleSystems, PlayableGraph graph, List<Playable> outplayables); // 0x00A0E748-0x00A0EAA4
		private void SearchHierarchyAndConnectDirector(IEnumerable<PlayableDirector> directors, PlayableGraph graph, List<Playable> outplayables, bool disableSelfReferences); // 0x00A0E36C-0x00A0E748
		private static void SearchHierarchyAndConnectControlableScripts(IEnumerable<MonoBehaviour> controlableScripts, PlayableGraph graph, List<Playable> outplayables); // 0x00A0EB28-0x00A0EE7C
		private static void ConnectMixerAndPlayable(PlayableGraph graph, Playable mixer, Playable playable, int portIndex); // 0x00A0EFCC-0x00A0F088
		internal IList<T> GetComponent<T>(GameObject gameObject);
		[IteratorStateMachine] // 0x004EFFCC-0x004F0030
		private static IEnumerable<MonoBehaviour> GetControlableScripts(GameObject root); // 0x00A0EAA4-0x00A0EB28
		internal void UpdateDurationAndLoopFlag(IList<PlayableDirector> directors, IList<ParticleSystem> particleSystems); // 0x00A0D9F4-0x00A0E264
		private IList<ParticleSystem> GetParticleSystemRoots(GameObject go); // 0x00A0D908-0x00A0D9F4
		private static void GetParticleSystemRoots(Transform t, ICollection<ParticleSystem> roots); // 0x00A0F4AC-0x00A0F654
		public void GatherProperties(PlayableDirector director, IPropertyCollector driver); // 0x00A0F654-0x00A10178
	}

	[TrackClipType] // 0x004EE750-0x004EE7B8
	public class ControlTrack : TrackAsset // TypeDefIndex: 2472
	{
		// Constructors
		public ControlTrack(); // 0x00A1083C-0x00A108A4
	}

	internal struct DiscreteTime : IComparable // TypeDefIndex: 2473
	{
		// Fields
		private const double k_Tick = 1E-12; // Metadata: 0x001F48F5
		public static readonly DiscreteTime kMaxTime; // 0x00
		private readonly long m_DiscreteTime; // 0x00
	
		// Properties
		public static double tickValue { get; } // 0x00A114A4-0x00A114B0 
	
		// Constructors
		public DiscreteTime(DiscreteTime time); // 0x00588488-0x00588490
		private DiscreteTime(long time); // 0x00588490-0x00588498
		public DiscreteTime(double time); // 0x00588498-0x005884A0
		public DiscreteTime(float time); // 0x005884A0-0x005884A8
		public DiscreteTime(int time); // 0x005884A8-0x005884B0
		public DiscreteTime(int frame, double fps); // 0x005884B0-0x005884B8
		static DiscreteTime(); // 0x00A11E94-0x00A11EE8
	
		// Methods
		public DiscreteTime OneTickBefore(); // 0x005884B8-0x005884C4
		public DiscreteTime OneTickAfter(); // 0x005884C4-0x005884D0
		public long GetTick(); // 0x005884D0-0x005884D8
		public int CompareTo(object obj); // 0x005884D8-0x005884E0
		public bool Equals(DiscreteTime other); // 0x005884E0-0x005884F0
		public override bool Equals(object obj); // 0x005884F0-0x005884F8
		private static long DoubleToDiscreteTime(double time); // 0x00A11548-0x00A11680
		private static long FloatToDiscreteTime(float time); // 0x00A11680-0x00A117B8
		private static long IntToDiscreteTime(int time); // 0x00A117B8-0x00A119E4
		private static double ToDouble(long time); // 0x00A119E4-0x00A119F8
		private static float ToFloat(long time); // 0x00A119F8-0x00A11A6C
		public static explicit operator double(DiscreteTime b); // 0x00A0F43C-0x00A0F4AC
		public static explicit operator float(DiscreteTime b); // 0x00A11A6C-0x00A11AD0
		public static explicit operator long(DiscreteTime b); // 0x00A11AD0-0x00A11AD4
		public static explicit operator DiscreteTime(double time); // 0x00A0F408-0x00A0F43C
		public static explicit operator DiscreteTime(float time); // 0x00A11AD4-0x00A11AFC
		public static implicit operator DiscreteTime(int time); // 0x00A11AFC-0x00A11B2C
		public static explicit operator DiscreteTime(long time); // 0x00A11B2C-0x00A11B30
		public static bool operator ==(DiscreteTime lhs, DiscreteTime rhs); // 0x00A11B30-0x00A11B3C
		public static bool operator !=(DiscreteTime lhs, DiscreteTime rhs); // 0x00A11B3C-0x00A11BB0
		public static bool operator >(DiscreteTime lhs, DiscreteTime rhs); // 0x00A11BB0-0x00A11BBC
		public static bool operator <(DiscreteTime lhs, DiscreteTime rhs); // 0x00A11BBC-0x00A11BC8
		public static bool operator <=(DiscreteTime lhs, DiscreteTime rhs); // 0x00A11BC8-0x00A11BD4
		public static bool operator >=(DiscreteTime lhs, DiscreteTime rhs); // 0x00A11BD4-0x00A11BE0
		public static DiscreteTime operator +(DiscreteTime lhs, DiscreteTime rhs); // 0x00A11BE0-0x00A11BE8
		public static DiscreteTime operator -(DiscreteTime lhs, DiscreteTime rhs); // 0x00A11BE8-0x00A11C48
		public override string ToString(); // 0x005884F8-0x00588524
		public override int GetHashCode(); // 0x00588524-0x00588594
		public static DiscreteTime Min(DiscreteTime lhs, DiscreteTime rhs); // 0x00A11C48-0x00A11CC0
		public static DiscreteTime Max(DiscreteTime lhs, DiscreteTime rhs); // 0x00A11CC0-0x00A11D38
		public static double SnapToNearestTick(double time); // 0x00A11D38-0x00A11DB8
		public static float SnapToNearestTick(float time); // 0x00A11DB8-0x00A11E28
		public static long GetNearestTick(double time); // 0x00A11E28-0x00A11E94
	}

	internal class InfiniteRuntimeClip : RuntimeElement // TypeDefIndex: 2474
	{
		// Fields
		private Playable m_Playable; // 0x18
		private static readonly long kIntervalEnd; // 0x00
	
		// Properties
		public override long intervalStart { get; } // 0x00A12870-0x00A12878 
		public override long intervalEnd { get; } // 0x00A12878-0x00A128E0 
		public override bool enable { set; } // 0x00A128E0-0x00A1295C
	
		// Constructors
		public InfiniteRuntimeClip(Playable playable); // 0x00A0ACE8-0x00A0AD20
		static InfiniteRuntimeClip(); // 0x00A129BC-0x00A12A6C
	
		// Methods
		public override void EvaluateAt(double localTime, FrameData frameData); // 0x00A1295C-0x00A129BC
	}

	internal interface IInterval // TypeDefIndex: 2475
	{
		// Properties
		long intervalStart { get; }
		long intervalEnd { get; }
	}

	internal struct IntervalTreeNode // TypeDefIndex: 2476
	{
		// Fields
		public long center; // 0x00
		public int first; // 0x08
		public int last; // 0x0C
		public int left; // 0x10
		public int right; // 0x14
	}

	internal class IntervalTree<T> // TypeDefIndex: 2477
		where T : IInterval
	{
		// Fields
		private const int kMinNodeSize = 10; // Metadata: 0x001F48FD
		private const int kInvalidNode = -1; // Metadata: 0x001F4901
		private const long kCenterUnknown = 9223372036854775807; // Metadata: 0x001F4905
		private readonly List<Entry> m_Entries;
		private readonly List<IntervalTreeNode> m_Nodes;
		[CompilerGenerated] // 0x004EF960-0x004EF970
		private bool _dirty_k__BackingField;
	
		// Properties
		public bool dirty { [CompilerGenerated] /* 0x004F0030-0x004F0040 */ get; [CompilerGenerated] /* 0x004F0040-0x004F0050 */ internal set; }
	
		// Nested types
		internal struct Entry // TypeDefIndex: 2478
		{
			// Fields
			public long intervalStart;
			public long intervalEnd;
			public T item;
		}
	
		// Constructors
		public IntervalTree();
	
		// Methods
		public void Add(T item);
		public void IntersectsWith(long value, List<T> results);
		public void IntersectsWithRange(long start, long end, List<T> results);
		public void UpdateIntervals();
		private void Query(IntervalTreeNode intervalTreeNode, long value, List<T> results);
		private void QueryRange(IntervalTreeNode intervalTreeNode, long start, long end, List<T> results);
		private void Rebuild();
		private int Rebuild(int start, int end);
		public void Clear();
	}

	internal class RuntimeClip : RuntimeClipBase // TypeDefIndex: 2479
	{
		// Fields
		private TimelineClip m_Clip; // 0x18
		private Playable m_Playable; // 0x20
		private Playable m_ParentMixer; // 0x30
	
		// Properties
		public override double start { get; } // 0x00A15358-0x00A15388 
		public override double duration { get; } // 0x00A153A0-0x00A153B8 
		public TimelineClip clip { get; } // 0x00A1544C-0x00A15454 
		public Playable mixer { get; } // 0x00A15454-0x00A15460 
		public Playable playable { get; } // 0x00A15460-0x00A1546C 
		public override bool enable { set; } // 0x00A1546C-0x00A15564
	
		// Constructors
		public RuntimeClip(TimelineClip clip, Playable clipPlayable, Playable parentMixer); // 0x00A09778-0x00A097D8
	
		// Methods
		private void Create(TimelineClip clip, Playable clipPlayable, Playable parentMixer); // 0x00A153C0-0x00A1544C
		public void SetTime(double time); // 0x00A15564-0x00A155C4
		public void SetDuration(double duration); // 0x00A155C4-0x00A15624
		public override void EvaluateAt(double localTime, FrameData frameData); // 0x00A15624-0x00A157B8
	}

	internal abstract class RuntimeClipBase : RuntimeElement // TypeDefIndex: 2480
	{
		// Properties
		public abstract double start { get; }
		public abstract double duration { get; }
		public override long intervalStart { get; } // 0x00A15BCC-0x00A15C4C 
		public override long intervalEnd { get; } // 0x00A15C4C-0x00A15CE0 
	
		// Constructors
		protected RuntimeClipBase(); // 0x00A153B8-0x00A153C0
	}

	internal abstract class RuntimeElement : IInterval // TypeDefIndex: 2481
	{
		// Fields
		[CompilerGenerated] // 0x004EF970-0x004EF980
		private int _intervalBit_k__BackingField; // 0x10
	
		// Properties
		public abstract long intervalStart { get; }
		public abstract long intervalEnd { get; }
		public int intervalBit { [CompilerGenerated] /* 0x004F0050-0x004F0060 */ get; [CompilerGenerated] /* 0x004F0060-0x004F0070 */ set; } // 0x00A15CE0-0x00A15CE8 0x00A15CE8-0x00A15CF0
		public abstract bool enable { set; }
	
		// Constructors
		protected RuntimeElement(); // 0x00A12868-0x00A12870
	
		// Methods
		public abstract void EvaluateAt(double localTime, FrameData frameData);
	}

	internal class ScheduleRuntimeClip : RuntimeClipBase // TypeDefIndex: 2482
	{
		// Fields
		private TimelineClip m_Clip; // 0x18
		private Playable m_Playable; // 0x20
		private Playable m_ParentMixer; // 0x30
		private double m_StartDelay; // 0x40
		private double m_FinishTail; // 0x48
		private bool m_Started; // 0x50
	
		// Properties
		public override double start { get; } // 0x00A15CF0-0x00A15D7C 
		public override double duration { get; } // 0x00A15D7C-0x00A15DD0 
		public TimelineClip clip { get; } // 0x00A15E30-0x00A15E38 
		public Playable mixer { get; } // 0x00A15E38-0x00A15E44 
		public Playable playable { get; } // 0x00A15E44-0x00A15E50 
		public override bool enable { set; } // 0x00A15EF0-0x00A15FE8
	
		// Constructors
		public ScheduleRuntimeClip(TimelineClip clip, Playable clipPlayable, Playable parentMixer, double startDelay = 0.2 /* Metadata: 0x001F490D */, double finishTail = 0.1 /* Metadata: 0x001F4915 */); // 0x00A0C79C-0x00A0C814
	
		// Methods
		public void SetTime(double time); // 0x00A15DD0-0x00A15E30
		private void Create(TimelineClip clip, Playable clipPlayable, Playable parentMixer, double startDelay, double finishTail); // 0x00A15E50-0x00A15EF0
		public override void EvaluateAt(double localTime, FrameData frameData); // 0x00A15FE8-0x00A16254
	}

	public interface IMarker // TypeDefIndex: 2483
	{
		// Properties
		double time { get; set; }
		TrackAsset parent { get; }
	
		// Methods
		void Initialize(TrackAsset parent);
	}

	public interface INotificationOptionProvider // TypeDefIndex: 2484
	{
		// Properties
		NotificationFlags flags { get; }
	}

	public abstract class Marker : ScriptableObject, IMarker // TypeDefIndex: 2485
	{
		// Fields
		[SerializeField] // 0x004EF980-0x004EF9E0
		[TimeField] // 0x004EF980-0x004EF9E0
		[Tooltip] // 0x004EF980-0x004EF9E0
		private double m_Time; // 0x18
		[CompilerGenerated] // 0x004EF9E0-0x004EF9F0
		private TrackAsset _parent_k__BackingField; // 0x20
	
		// Properties
		public TrackAsset parent { [CompilerGenerated] /* 0x004F0070-0x004F0080 */ get; [CompilerGenerated] /* 0x004F0080-0x004F0090 */ private set; } // 0x00A12A6C-0x00A12A74 0x00A12A74-0x00A12A7C
		public double time { get; set; } // 0x00A12A7C-0x00A12A84 0x00A12A84-0x00A12B04
	
		// Constructors
		protected Marker(); // 0x00A12C70-0x00A1376C
	
		// Methods
		void IMarker.Initialize(TrackAsset parentTrack); // 0x00A12B04-0x00A12C6C
		public virtual void OnInitialize(TrackAsset aPent); // 0x00A12C6C-0x00A12C70
	}

	[Serializable]
	internal struct MarkerList : ISerializationCallbackReceiver // TypeDefIndex: 2486
	{
		// Fields
		[HideInInspector] // 0x004EF9F0-0x004EFA28
		[SerializeField] // 0x004EF9F0-0x004EFA28
		private List<ScriptableObject> m_Objects; // 0x00
		[NonSerialized]
		[HideInInspector] // 0x004EFA28-0x004EFA38
		private List<IMarker> m_Cache; // 0x08
		private bool m_CacheDirty; // 0x10
		private bool m_HasNotifications; // 0x11
	
		// Properties
		public List<IMarker> markers { get; } // 0x00588594-0x005885BC 
		public int Count { get; } // 0x00588614-0x0058861C 
		public IMarker this[int idx] { get => default; } // 0x0058861C-0x00588624 
	
		// Constructors
		public MarkerList(int capacity); // 0x005885BC-0x005885C4
	
		// Methods
		public void Add(ScriptableObject item); // 0x005885C4-0x005885CC
		public bool Remove(IMarker item); // 0x005885CC-0x005885D4
		public bool Remove(ScriptableObject item, TimelineAsset timelineAsset, PlayableAsset thingToDirty); // 0x005885D4-0x005885DC
		public void Clear(); // 0x005885DC-0x005885E4
		public bool Contains(ScriptableObject item); // 0x005885E4-0x005885EC
		public IEnumerable<IMarker> GetMarkers(); // 0x005885EC-0x00588614
		public List<ScriptableObject> GetRawMarkerList(); // 0x00588624-0x0058862C
		public IMarker CreateMarker(Type type, double time, TrackAsset owner); // 0x0058862C-0x00588634
		public bool HasNotifications(); // 0x00588634-0x0058865C
		void ISerializationCallbackReceiver.OnBeforeSerialize(); // 0x0058865C-0x00588660
		void ISerializationCallbackReceiver.OnAfterDeserialize(); // 0x00588660-0x0058866C
		private void BuildCache(); // 0x0058866C-0x005886B8
	}

	[Serializable]
	[HideInMenu] // 0x004EE7F0-0x004EE864
	[TrackBindingType] // 0x004EE7F0-0x004EE864
	public class MarkerTrack : TrackAsset // TypeDefIndex: 2487
	{
		// Properties
		public override IEnumerable<PlayableBinding> outputs { get; } // 0x00A138A4-0x00A13A18 
	
		// Constructors
		public MarkerTrack(); // 0x00A13A18-0x00A13A80
	}

	internal class CustomSignalEventDrawer : PropertyAttribute // TypeDefIndex: 2488
	{
		// Constructors
		public CustomSignalEventDrawer(); // 0x00A108A4-0x00A108AC
	}

	[AssetFileNameExtension] // 0x004EE864-0x004EE8E0
	public class SignalAsset : ScriptableObject // TypeDefIndex: 2489
	{
		// Fields
		[CompilerGenerated] // 0x004EFA38-0x004EFA48
		private static Action<SignalAsset> OnEnableCallback; // 0x00
	
		// Events
		internal static event Action<SignalAsset> OnEnableCallback {
			add; // 0x00A16254-0x00A16308
			remove; // 0x00A16308-0x00A163BC
		}
	
		// Constructors
		public SignalAsset(); // 0x00A16430-0x00A16438
	
		// Methods
		private void OnEnable(); // 0x00A163BC-0x00A16430
	}

	[Serializable]
	[CustomStyle] // 0x004EE8E0-0x004EE918
	public class SignalEmitter : Marker, INotification, INotificationOptionProvider // TypeDefIndex: 2490
	{
		// Fields
		[SerializeField] // 0x004EFA48-0x004EFA58
		private bool m_Retroactive; // 0x28
		[SerializeField] // 0x004EFA58-0x004EFA68
		private bool m_EmitOnce; // 0x29
		[SerializeField] // 0x004EFA68-0x004EFA78
		private SignalAsset m_Asset; // 0x30
	
		// Properties
		public bool retroactive { get; set; } // 0x00A16438-0x00A16440 0x00A16440-0x00A1644C
		public bool emitOnce { get; set; } // 0x00A1644C-0x00A16454 0x00A16454-0x00A16460
		public SignalAsset asset { get; set; } // 0x00A16460-0x00A16468 0x00A16468-0x00A16470
		PropertyName INotification.id { get; } // 0x00A16470-0x00A16534 
		NotificationFlags INotificationOptionProvider.flags { get; } // 0x00A16534-0x00A16550 
	
		// Constructors
		public SignalEmitter(); // 0x00A16550-0x00A16558
	}

	public class SignalReceiver : MonoBehaviour, INotificationReceiver // TypeDefIndex: 2491
	{
		// Fields
		[SerializeField] // 0x004EFA78-0x004EFA88
		private EventKeyValue m_Events; // 0x18
	
		// Nested types
		[Serializable]
		private class EventKeyValue // TypeDefIndex: 2492
		{
			// Fields
			[SerializeField] // 0x004EFBC4-0x004EFBD4
			private List<SignalAsset> m_Signals; // 0x10
			[CustomSignalEventDrawer] // 0x004EFBD4-0x004EFC0C
			[SerializeField] // 0x004EFBD4-0x004EFC0C
			private List<UnityEvent> m_Events; // 0x18
	
			// Properties
			public List<SignalAsset> signals { get; } // 0x00A1728C-0x00A17294 
			public List<UnityEvent> events { get; } // 0x00A17294-0x00A1729C 
	
			// Constructors
			public EventKeyValue(); // 0x00A171F4-0x00A1728C
	
			// Methods
			public bool TryGetValue(SignalAsset key, out UnityEvent value); // 0x00A16680-0x00A16740
			public void Append(SignalAsset key, UnityEvent value); // 0x00A16870-0x00A168F8
			public void Remove(int idx); // 0x00A16E9C-0x00A16F38
			public void Remove(SignalAsset key); // 0x00A16A44-0x00A16B00
		}
	
		// Constructors
		public SignalReceiver(); // 0x00A17190-0x00A171F4
	
		// Methods
		public void OnNotify(Playable origin, INotification notification, object context); // 0x00A16558-0x00A16680
		public void AddReaction(SignalAsset asset, UnityEvent reaction); // 0x00A16740-0x00A16870
		public int AddEmptyReaction(UnityEvent reaction); // 0x00A168F8-0x00A1697C
		public void Remove(SignalAsset asset); // 0x00A1697C-0x00A16A44
		public IEnumerable<SignalAsset> GetRegisteredSignals(); // 0x00A16B00-0x00A16B20
		public UnityEvent GetReaction(SignalAsset key); // 0x00A16B20-0x00A16B5C
		public int Count(); // 0x00A16B5C-0x00A16BB8
		public void ChangeSignalAtIndex(int idx, SignalAsset newKey); // 0x00A16BB8-0x00A16DE8
		public void RemoveAtIndex(int idx); // 0x00A16DE8-0x00A16E9C
		public void ChangeReactionAtIndex(int idx, UnityEvent reaction); // 0x00A16F38-0x00A16FFC
		public UnityEvent GetReactionAtIndex(int idx); // 0x00A16FFC-0x00A170C4
		public SignalAsset GetSignalAssetAtIndex(int idx); // 0x00A170C4-0x00A1718C
		private void OnEnable(); // 0x00A1718C-0x00A17190
	}

	[Serializable]
	[TrackBindingType] // 0x004EE918-0x004EE998
	[TrackColor] // 0x004EE918-0x004EE998
	public class SignalTrack : MarkerTrack // TypeDefIndex: 2493
	{
		// Constructors
		public SignalTrack(); // 0x00A1729C-0x00A172A0
	}

	public static class TrackAssetExtensions // TypeDefIndex: 2494
	{
		// Extension methods
		public static GroupTrack GetGroup(this TrackAsset asset); // 0x00F7BF4C-0x00F7C018
		public static void SetGroup(this TrackAsset asset, GroupTrack group); // 0x00F7C018-0x00F7C398
	}

	[Serializable]
	[SupportsChildTracks] // 0x004EE9A8-0x004EEA24
	[TrackClipType] // 0x004EE9A8-0x004EEA24
	public class GroupTrack : TrackAsset // TypeDefIndex: 2495
	{
		// Properties
		public override IEnumerable<PlayableBinding> outputs { get; } // 0x00A125B8-0x00A12620 
	
		// Constructors
		public GroupTrack(); // 0x00A12620-0x00A12688
	
		// Methods
		internal override bool CanCompileClips(); // 0x00A125B0-0x00A125B8
	}

	public class ActivationControlPlayable : PlayableBehaviour // TypeDefIndex: 2496
	{
		// Fields
		public GameObject gameObject; // 0x10
		public PostPlaybackState postPlayback; // 0x18
		private InitialState m_InitialState; // 0x1C
	
		// Nested types
		public enum PostPlaybackState // TypeDefIndex: 2497
		{
			Active = 0,
			Inactive = 1,
			Revert = 2
		}
	
		private enum InitialState // TypeDefIndex: 2498
		{
			Unset = 0,
			Active = 1,
			Inactive = 2
		}
	
		// Constructors
		public ActivationControlPlayable(); // 0x00A05E28-0x00A05E38
	
		// Methods
		public static ScriptPlayable<ActivationControlPlayable> Create(PlayableGraph graph, GameObject gameObject, PostPlaybackState postPlaybackState); // 0x00A0598C-0x00A05AC0
		public override void OnBehaviourPlay(Playable playable, FrameData info); // 0x00A05AC0-0x00A05B58
		public override void OnBehaviourPause(Playable playable, FrameData info); // 0x00A05B58-0x00A05C10
		public override void ProcessFrame(Playable playable, FrameData info, object userData); // 0x00A05C10-0x00A05CA8
		public override void OnGraphStart(Playable playable); // 0x00A05CA8-0x00A05D4C
		public override void OnPlayableDestroy(Playable playable); // 0x00A05D4C-0x00A05E28
	}

	[Serializable]
	[Obsolete] // 0x004EEA24-0x004EEA5C
	public class BasicPlayableBehaviour : ScriptableObject, IPlayableAsset, IPlayableBehaviour // TypeDefIndex: 2499
	{
		// Properties
		public virtual double duration { get; } // 0x00A0CE1C-0x00A0CE84 
		public virtual IEnumerable<PlayableBinding> outputs { get; } // 0x00A0CE84-0x00A0CEEC 
	
		// Constructors
		public BasicPlayableBehaviour(); // 0x00A0CE14-0x00A0CE1C
	
		// Methods
		public virtual void OnGraphStart(Playable playable); // 0x00A0CEEC-0x00A0CEF0
		public virtual void OnGraphStop(Playable playable); // 0x00A0CEF0-0x00A0CEF4
		public virtual void OnPlayableCreate(Playable playable); // 0x00A0CEF4-0x00A0CEF8
		public virtual void OnPlayableDestroy(Playable playable); // 0x00A0CEF8-0x00A0CEFC
		public virtual void OnBehaviourPlay(Playable playable, FrameData info); // 0x00A0CEFC-0x00A0CF00
		public virtual void OnBehaviourPause(Playable playable, FrameData info); // 0x00A0CF00-0x00A0CF04
		public virtual void PrepareFrame(Playable playable, FrameData info); // 0x00A0CF04-0x00A0CF08
		public virtual void ProcessFrame(Playable playable, FrameData info, object playerData); // 0x00A0CF08-0x00A0CF0C
		public virtual Playable CreatePlayable(PlayableGraph graph, GameObject owner); // 0x00A0CF0C-0x00A0CFA8
	}

	public class DirectorControlPlayable : PlayableBehaviour // TypeDefIndex: 2500
	{
		// Fields
		public PlayableDirector director; // 0x10
		private bool m_SyncTime; // 0x18
		private double m_AssetDuration; // 0x20
	
		// Constructors
		public DirectorControlPlayable(); // 0x00A114B0-0x00A11548
	
		// Methods
		public static ScriptPlayable<DirectorControlPlayable> Create(PlayableGraph graph, PlayableDirector director); // 0x00A0F1C0-0x00A0F2E4
		public override void OnPlayableDestroy(Playable playable); // 0x00A108D8-0x00A109BC
		public override void PrepareFrame(Playable playable, FrameData info); // 0x00A109BC-0x00A10B80
		public override void OnBehaviourPlay(Playable playable, FrameData info); // 0x00A10E4C-0x00A10F40
		public override void OnBehaviourPause(Playable playable, FrameData info); // 0x00A10F40-0x00A11060
		public override void ProcessFrame(Playable playable, FrameData info, object playerData); // 0x00A11060-0x00A1118C
		private void SyncSpeed(double speed); // 0x00A10C84-0x00A10DB4
		private void SyncPlayState(PlayableGraph graph, double playableTime); // 0x00A10DB4-0x00A10E4C
		private bool DetectDiscontinuity(Playable playable, FrameData info); // 0x00A10B80-0x00A10C84
		private bool DetectOutOfSync(Playable playable); // 0x00A1118C-0x00A112CC
		private void UpdateTime(Playable playable); // 0x00A112CC-0x00A114A4
	}

	public interface ITimeControl // TypeDefIndex: 2501
	{
		// Methods
		void SetTime(double time);
		void OnControlTimeStart();
		void OnControlTimeStop();
	}

	[Serializable]
	[Flags] // 0x004EEA5C-0x004EEA6C
	public enum NotificationFlags : short // TypeDefIndex: 2502
	{
		TriggerInEditMode = 1,
		Retroactive = 2,
		TriggerOnce = 4
	}

	public class ParticleControlPlayable : PlayableBehaviour // TypeDefIndex: 2503
	{
		// Fields
		private const float kUnsetTime = -1f; // Metadata: 0x001F493B
		private float m_LastTime; // 0x10
		private uint m_RandomSeed; // 0x14
		private float m_SystemTime; // 0x18
		[CompilerGenerated] // 0x004EFA88-0x004EFA98
		private ParticleSystem _particleSystem_k__BackingField; // 0x20
	
		// Properties
		public ParticleSystem particleSystem { [CompilerGenerated] /* 0x004F00D0-0x004F00E0 */ get; [CompilerGenerated] /* 0x004F00E0-0x004F00F0 */ private set; } // 0x00A145F0-0x00A145F8 0x00A145F8-0x00A14600
	
		// Constructors
		public ParticleControlPlayable(); // 0x00A14A9C-0x00A14AB0
	
		// Methods
		public static ScriptPlayable<ParticleControlPlayable> Create(PlayableGraph graph, ParticleSystem component, uint randomSeed); // 0x00A0F088-0x00A0F1C0
		public void Initialize(ParticleSystem ps, uint randomSeed); // 0x00A14564-0x00A145F0
		private void SetRandomSeed(); // 0x00A14600-0x00A14714
		public override void PrepareFrame(Playable playable, FrameData data); // 0x00A14714-0x00A14A84
		public override void OnBehaviourPlay(Playable playable, FrameData info); // 0x00A14A84-0x00A14A90
		public override void OnBehaviourPause(Playable playable, FrameData info); // 0x00A14A90-0x00A14A9C
	}

	public class PrefabControlPlayable : PlayableBehaviour // TypeDefIndex: 2504
	{
		// Fields
		private GameObject m_Instance; // 0x10
	
		// Properties
		public GameObject prefabInstance { get; } // 0x00A14E3C-0x00A14E44 
	
		// Constructors
		public PrefabControlPlayable(); // 0x00A15350-0x00A15358
	
		// Methods
		public static ScriptPlayable<PrefabControlPlayable> Create(PlayableGraph graph, GameObject prefabGameObject, Transform parentTransform); // 0x00A0D7D0-0x00A0D908
		public GameObject Initialize(GameObject prefabGameObject, Transform parentTransform); // 0x00A14BC0-0x00A14E3C
		public override void OnPlayableDestroy(Playable playable); // 0x00A15114-0x00A15200
		public override void OnBehaviourPlay(Playable playable, FrameData info); // 0x00A15200-0x00A15298
		public override void OnBehaviourPause(Playable playable, FrameData info); // 0x00A15298-0x00A15350
		private static void SetHideFlagsRecursive(GameObject gameObject); // 0x00A14E44-0x00A15114
	}

	public class TimeControlPlayable : PlayableBehaviour // TypeDefIndex: 2505
	{
		// Fields
		private ITimeControl m_timeControl; // 0x10
		private bool m_started; // 0x18
	
		// Constructors
		public TimeControlPlayable(); // 0x00A17560-0x00A17568
	
		// Methods
		public static ScriptPlayable<TimeControlPlayable> Create(PlayableGraph graph, ITimeControl timeControl); // 0x00A0F2E4-0x00A0F3D0
		public void Initialize(ITimeControl timeControl); // 0x00A172DC-0x00A172E4
		public override void PrepareFrame(Playable playable, FrameData info); // 0x00A172E4-0x00A173DC
		public override void OnBehaviourPlay(Playable playable, FrameData info); // 0x00A173DC-0x00A174A0
		public override void OnBehaviourPause(Playable playable, FrameData info); // 0x00A174A0-0x00A17560
	}

	public class TimeNotificationBehaviour : PlayableBehaviour // TypeDefIndex: 2506
	{
		// Fields
		private readonly List<NotificationEntry> m_Notifications; // 0x10
		private double m_PreviousTime; // 0x18
		private bool m_NeedSortNotifications; // 0x20
		private Playable m_TimeSource; // 0x28
	
		// Properties
		public Playable timeSource { set; } // 0x00A1759C-0x00A175A4
	
		// Nested types
		private struct NotificationEntry // TypeDefIndex: 2507
		{
			// Fields
			public double time; // 0x00
			public INotification payload; // 0x08
			public bool notificationFired; // 0x10
			public NotificationFlags flags; // 0x12
	
			// Properties
			public bool triggerInEditor { get; } // 0x005886B8-0x005886C4 
			public bool prewarm { get; } // 0x005886C4-0x005886D0 
			public bool triggerOnce { get; } // 0x005886D0-0x005886DC 
		}
	
		[Serializable]
		[CompilerGenerated] // 0x004EECC0-0x004EECD0
		private sealed class __c // TypeDefIndex: 2508
		{
			// Fields
			public static readonly __c __9; // 0x00
			public static Comparison<NotificationEntry> __9__12_0; // 0x08
	
			// Constructors
			static __c(); // 0x00A18138-0x00A1819C
			public __c(); // 0x00A1819C-0x00A181A4
	
			// Methods
			internal int _SortNotifications_b__12_0(NotificationEntry x, NotificationEntry y); // 0x00A181A4-0x00A181B4
		}
	
		// Constructors
		public TimeNotificationBehaviour(); // 0x00A180C8-0x00A18138
	
		// Methods
		public static ScriptPlayable<TimeNotificationBehaviour> Create(PlayableGraph graph, double duration, DirectorWrapMode loopMode); // 0x00A14254-0x00A14348
		public void AddNotification(double time, INotification payload, NotificationFlags flags = NotificationFlags.Retroactive /* Metadata: 0x001F493F */); // 0x00A14348-0x00A143E8
		public override void OnGraphStart(Playable playable); // 0x00A175A4-0x00A176F0
		public override void OnBehaviourPause(Playable playable, FrameData info); // 0x00A17804-0x00A179A0
		public override void PrepareFrame(Playable playable, FrameData info); // 0x00A17A30-0x00A17DB0
		private void SortNotifications(); // 0x00A176F0-0x00A17804
		private static bool CanRestoreNotification(NotificationEntry e, FrameData info, double currentTime, double previousTime); // 0x00A18034-0x00A1809C
		private void TriggerNotificationsInRange(double start, double end, FrameData info, Playable playable, bool checkState); // 0x00A17E80-0x00A18034
		private void SyncDurationWithExternalSource(Playable playable); // 0x00A17DB0-0x00A17E80
		private static void Trigger_internal(Playable playable, PlayableOutput output, ref NotificationEntry e); // 0x00A179A0-0x00A17A30
		private static void Restore_internal(ref NotificationEntry e); // 0x00A1809C-0x00A180C8
	}

	[Serializable]
	public class PlayableTrack : TrackAsset // TypeDefIndex: 2509
	{
		// Constructors
		public PlayableTrack(); // 0x00A14B58-0x00A14BC0
	
		// Methods
		protected override void OnCreateClip(TimelineClip clip); // 0x00A14AB0-0x00A14B58
	}

	[AttributeUsage] // 0x004EEA6C-0x004EEAC0
	[Obsolete] // 0x004EEA6C-0x004EEAC0
	public class TrackMediaType : Attribute // TypeDefIndex: 2510
	{
		// Fields
		public readonly TimelineAsset.MediaType m_MediaType; // 0x10
	
		// Constructors
		public TrackMediaType(TimelineAsset.MediaType mt); // 0x00F7C4F0-0x00F7C51C
	}

	[AttributeUsage] // 0x004EEAC0-0x004EEAF8
	public class TrackClipTypeAttribute : Attribute // TypeDefIndex: 2511
	{
		// Fields
		public readonly Type inspectedType; // 0x10
		public readonly bool allowAutoCreate; // 0x18
	
		// Constructors
		public TrackClipTypeAttribute(Type clipClass); // 0x00F7C408-0x00F7C43C
		public TrackClipTypeAttribute(Type clipClass, bool allowAutoCreate); // 0x00F7C43C-0x00F7C468
	}

	[AttributeUsage] // 0x004EEAF8-0x004EEB0C
	public class NotKeyableAttribute : Attribute // TypeDefIndex: 2512
	{
		// Constructors
		public NotKeyableAttribute(); // 0x00A13B88-0x00A13B90
	}

	[Flags] // 0x004EEB0C-0x004EEB1C
	public enum TrackBindingFlags // TypeDefIndex: 2513
	{
		None = 0,
		AllowCreateComponent = 1,
		All = 1
	}

	[AttributeUsage] // 0x004EEB1C-0x004EEB30
	public class TrackBindingTypeAttribute : Attribute // TypeDefIndex: 2514
	{
		// Fields
		public readonly Type type; // 0x10
		public readonly TrackBindingFlags flags; // 0x18
	
		// Constructors
		public TrackBindingTypeAttribute(Type type); // 0x00F7C398-0x00F7C3CC
		public TrackBindingTypeAttribute(Type type, TrackBindingFlags flags); // 0x00F7C3CC-0x00F7C408
	}

	[AttributeUsage] // 0x004EEB30-0x004EEB64
	internal class SupportsChildTracksAttribute : Attribute // TypeDefIndex: 2515
	{
		// Fields
		public readonly Type childType; // 0x10
		public readonly int levels; // 0x18
	
		// Constructors
		public SupportsChildTracksAttribute(Type childType = null, int levels = 2147483647 /* Metadata: 0x001F494D */); // 0x00A172A0-0x00A172DC
	}

	[AttributeUsage] // 0x004EEB64-0x004EEB9C
	internal class IgnoreOnPlayableTrackAttribute : Attribute // TypeDefIndex: 2516
	{
		// Constructors
		public IgnoreOnPlayableTrackAttribute(); // 0x00A12860-0x00A12868
	}

	internal class TimeFieldAttribute : PropertyAttribute // TypeDefIndex: 2517
	{
		// Fields
		[CompilerGenerated] // 0x004EFA98-0x004EFAA8
		private readonly UseEditMode _useEditMode_k__BackingField; // 0x10
	
		// Properties
		public UseEditMode useEditMode { [CompilerGenerated] /* 0x004F00F0-0x004F0100 */ get; } // 0x00A17568-0x00A17570 
	
		// Nested types
		public enum UseEditMode // TypeDefIndex: 2518
		{
			None = 0,
			ApplyEditMode = 1
		}
	
		// Constructors
		public TimeFieldAttribute(UseEditMode useEditMode = UseEditMode.ApplyEditMode /* Metadata: 0x001F4951 */); // 0x00A17570-0x00A1759C
	}

	[AttributeUsage] // 0x004EEB9C-0x004EEBD0
	public class HideInMenuAttribute : Attribute // TypeDefIndex: 2519
	{
		// Constructors
		public HideInMenuAttribute(); // 0x00A12858-0x00A12860
	}

	[AttributeUsage] // 0x004EEBD0-0x004EEBE4
	public class CustomStyleAttribute : Attribute // TypeDefIndex: 2520
	{
		// Fields
		public readonly string ussStyle; // 0x10
	
		// Constructors
		public CustomStyleAttribute(string ussStyle); // 0x00A108AC-0x00A108D8
	}

	public interface ITimelineClipAsset // TypeDefIndex: 2521
	{
		// Properties
		ClipCaps clipCaps { get; }
	}

	internal interface ITimelineEvaluateCallback // TypeDefIndex: 2522
	{
		// Methods
		void Evaluate();
	}

	public class TimelinePlayable : PlayableBehaviour // TypeDefIndex: 2523
	{
		// Fields
		private IntervalTree<RuntimeElement> m_IntervalTree; // 0x10
		private List<RuntimeElement> m_ActiveClips; // 0x18
		private List<RuntimeElement> m_CurrentListOfActiveClips; // 0x20
		private int m_ActiveBit; // 0x28
		private List<ITimelineEvaluateCallback> m_EvaluateCallbacks; // 0x30
		private Dictionary<TrackAsset, Playable> m_PlayableCache; // 0x38
		internal static bool muteAudioScrubbing; // 0x00
	
		// Constructors
		public TimelinePlayable(); // 0x00F76874-0x00F7695C
		static TimelinePlayable(); // 0x00F7695C-0x00F769B0
	
		// Methods
		public static ScriptPlayable<TimelinePlayable> Create(PlayableGraph graph, IEnumerable<TrackAsset> tracks, GameObject go, bool autoRebalance, bool createOutputs); // 0x00F74708-0x00F748DC
		public void Compile(PlayableGraph graph, Playable timelinePlayable, IEnumerable<TrackAsset> tracks, GameObject go, bool autoRebalance, bool createOutputs); // 0x00F748DC-0x00F74AE4
		private void CompileTrackList(PlayableGraph graph, Playable timelinePlayable, IEnumerable<TrackAsset> tracks, GameObject go, bool createOutputs); // 0x00F74AE4-0x00F74DFC
		private void CreateTrackOutput(PlayableGraph graph, TrackAsset track, GameObject go, Playable playable, int port); // 0x00F75734-0x00F75D04
		private void EvaluateWeightsForAnimationPlayableOutput(TrackAsset track, AnimationPlayableOutput animOutput); // 0x00F75E28-0x00F75EC0
		private static Playable CreatePlayableGraph(PlayableGraph graph, TrackAsset asset, GameObject go, IntervalTree<RuntimeElement> tree, Playable timelinePlayable); // 0x00F76038-0x00F76064
		private Playable CreateTrackPlayable(PlayableGraph graph, Playable timelinePlayable, TrackAsset track, GameObject go, bool createOutputs); // 0x00F752BC-0x00F75734
		public override void PrepareFrame(Playable playable, FrameData info); // 0x00F763A8-0x00F763E8
		private void Evaluate(Playable playable, FrameData frameData); // 0x00F763E8-0x00F7681C
		private void CacheTrack(TrackAsset track, Playable playable, int port, Playable parent); // 0x00F76328-0x00F763A8
		private static void ForAOTCompilationOnly(); // 0x00F7681C-0x00F76874
	}

	internal static class Extrapolation // TypeDefIndex: 2524
	{
		// Fields
		internal static readonly double kMinExtrapolationTime; // 0x00
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x004EECD0-0x004EECE0
		private sealed class __c // TypeDefIndex: 2525
		{
			// Fields
			public static readonly __c __9; // 0x00
			public static Comparison<TimelineClip> __9__2_0; // 0x08
	
			// Constructors
			static __c(); // 0x00A12500-0x00A12564
			public __c(); // 0x00A12564-0x00A1256C
	
			// Methods
			internal int _SortClipsByStartTime_b__2_0(TimelineClip clip1, TimelineClip clip2); // 0x00A1256C-0x00A125B0
		}
	
		// Constructors
		static Extrapolation(); // 0x00A12478-0x00A12500
	
		// Methods
		private static TimelineClip[] SortClipsByStartTime(TimelineClip[] clips); // 0x00A1230C-0x00A12438
	
		// Extension methods
		internal static void CalculateExtrapolationTimes(this TrackAsset asset); // 0x00A11EE8-0x00A122F0
	}

	internal static class HashUtility // TypeDefIndex: 2526
	{
		// Methods
		public static int CombineHash(int h1, int h2, int h3); // 0x00A12688-0x00A126B4
		public static int CombineHash(int h1, int h2, int h3, int h4); // 0x00A126B4-0x00A126F0
		public static int CombineHash(int h1, int h2, int h3, int h4, int h5); // 0x00A126F0-0x00A1273C
		public static int CombineHash(int h1, int h2, int h3, int h4, int h5, int h6); // 0x00A1273C-0x00A12798
		public static int CombineHash(int h1, int h2, int h3, int h4, int h5, int h6, int h7); // 0x00A12798-0x00A127D0
		public static int CombineHash(int[] hashes); // 0x00A127D0-0x00A12858
	
		// Extension methods
		public static int CombineHash(this int h1, int h2); // 0x00A09384-0x00A093A0
	}

	public interface IPropertyCollector // TypeDefIndex: 2527
	{
		// Methods
		void PushActiveGameObject(GameObject gameObject);
		void PopActiveGameObject();
		void AddFromClip(AnimationClip clip);
		void AddFromClips(IEnumerable<AnimationClip> clips);
		void AddFromName<T>(string name)
			where T : Component;
		void AddFromName(string name);
		void AddFromClip(GameObject obj, AnimationClip clip);
		void AddFromClips(GameObject obj, IEnumerable<AnimationClip> clips);
		void AddFromName<T>(GameObject obj, string name)
			where T : Component;
		void AddFromName(GameObject obj, string name);
		void AddFromName(Component component, string name);
		void AddFromComponent(GameObject obj, Component component);
		void AddObjectProperties(UnityEngine.Object obj, AnimationClip clip);
	}

	public interface IPropertyPreview // TypeDefIndex: 2528
	{
		// Methods
		void GatherProperties(PlayableDirector director, IPropertyCollector driver);
	}

	internal static class NotificationUtilities // TypeDefIndex: 2529
	{
		// Methods
		public static ScriptPlayable<TimeNotificationBehaviour> CreateNotificationsPlayable(PlayableGraph graph, IEnumerable<IMarker> markers, GameObject go); // 0x00A13B90-0x00A14254
		public static bool TrackTypeSupportsNotifications(Type type); // 0x00A143E8-0x00A14564
	}

	internal static class TimelineCreateUtilities // TypeDefIndex: 2530
	{
		// Nested types
		[CompilerGenerated] // 0x004EECE0-0x004EECF0
		private sealed class __c__DisplayClass0_0 // TypeDefIndex: 2531
		{
			// Fields
			public string name; // 0x10
	
			// Constructors
			public __c__DisplayClass0_0(); // 0x00F74670-0x00F74678
	
			// Methods
			internal bool _GenerateUniqueActorName_b__0(ScriptableObject x); // 0x00F74678-0x00F746BC
		}
	
		[CompilerGenerated] // 0x004EECF0-0x004EED00
		private sealed class __c__DisplayClass0_1 // TypeDefIndex: 2532
		{
			// Fields
			public string result; // 0x10
	
			// Constructors
			public __c__DisplayClass0_1(); // 0x00F746BC-0x00F746C4
	
			// Methods
			internal bool _GenerateUniqueActorName_b__1(ScriptableObject x); // 0x00F746C4-0x00F74708
		}
	
		// Methods
		public static string GenerateUniqueActorName(List<ScriptableObject> tracks, string name); // 0x00A1B77C-0x00A1BAC4
		public static void SaveAssetIntoObject(UnityEngine.Object childAsset, UnityEngine.Object masterAsset); // 0x00A1376C-0x00A138A4
		public static AnimationClip CreateAnimationClipForTrack(string name, TrackAsset track, bool isLegacy); // 0x00A08D50-0x00A08F20
		internal static bool ValidateParentTrack(TrackAsset parent, Type childType); // 0x00A1B4C4-0x00A1B77C
	}

	internal static class TimelineUndo // TypeDefIndex: 2533
	{
		// Methods
		public static void PushDestroyUndo(TimelineAsset timeline, UnityEngine.Object thingToDirty, UnityEngine.Object objectToDestroy, string operation); // 0x00F769B0-0x00F76A50
		[Conditional] // 0x004F0120-0x004F0158
		public static void PushUndo(UnityEngine.Object thingToDirty, string operation); // 0x00F76A50-0x00F76A54
		[Conditional] // 0x004F0158-0x004F0190
		public static void RegisterCreatedObjectUndo(UnityEngine.Object thingCreated, string operation); // 0x00F76A54-0x00F76A58
	}

	internal static class TimeUtility // TypeDefIndex: 2534
	{
		// Fields
		public static readonly double kTimeEpsilon; // 0x00
		public static readonly double kFrameRateEpsilon; // 0x08
		public static readonly double k_MaxTimelineDurationInSeconds; // 0x10
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x004EED00-0x004EED10
		private sealed class __c // TypeDefIndex: 2535
		{
			// Fields
			public static readonly __c __9; // 0x00
			public static Func<char, bool> __9__13_0; // 0x08
			public static Func<char, bool> __9__13_1; // 0x10
	
			// Constructors
			static __c(); // 0x00A194A0-0x00A19504
			public __c(); // 0x00A19504-0x00A1950C
	
			// Methods
			internal bool _ParseTimeCode_b__13_0(char c); // 0x00A1950C-0x00A19574
			internal bool _ParseTimeCode_b__13_1(char c); // 0x00A19574-0x00A19590
		}
	
		// Constructors
		static TimeUtility(); // 0x00A19414-0x00A194A0
	
		// Methods
		private static void ValidateFrameRate(double frameRate); // 0x00A181B4-0x00A18270
		public static int ToFrames(double time, double frameRate); // 0x00A18270-0x00A183A0
		public static double ToExactFrames(double time, double frameRate); // 0x00A183A0-0x00A18418
		public static double FromFrames(int frames, double frameRate); // 0x00A18418-0x00A18494
		public static double FromFrames(double frames, double frameRate); // 0x00A18494-0x00A1850C
		public static bool OnFrameBoundary(double time, double frameRate); // 0x00A1850C-0x00A185D0
		public static bool OnFrameBoundary(double time, double frameRate, double epsilon); // 0x00A185D0-0x00A18700
		public static double RoundToFrame(double time, double frameRate); // 0x00A18700-0x00A187C8
		public static string TimeAsFrames(double timeValue, double frameRate, string format = "F2" /* Metadata: 0x001F495D */); // 0x00A187C8-0x00A188C8
		public static string TimeAsTimeCode(double timeValue, double frameRate, string format = "F2" /* Metadata: 0x001F4963 */); // 0x00A188C8-0x00A18D5C
		public static double ParseTimeCode(string timeCode, double frameRate, double defaultValue); // 0x00A18D5C-0x00A192F8
		public static double GetAnimationClipLength(AnimationClip clip); // 0x00A0750C-0x00A076B0
		private static string RemoveChar(string str, Func<char, bool> charToRemoveFunc); // 0x00A192F8-0x00A19414
	}

	internal static class WeightUtility // TypeDefIndex: 2536
	{
		// Methods
		public static float NormalizeMixer(Playable mixer); // 0x00F7C51C-0x00F7C6D0
	}
}

namespace UnityEngine.AI
{
	[MovedFrom] // 0x004F0A20-0x004F0ACC
	[NativeHeader] // 0x004F0A20-0x004F0ACC
	[NativeHeader] // 0x004F0A20-0x004F0ACC
	[StaticAccessor] // 0x004F0A20-0x004F0ACC
	public static class NavMesh // TypeDefIndex: 2538
	{
		// Fields
		public static OnNavMeshPreUpdate onPreUpdate; // 0x00
	
		// Nested types
		public delegate void OnNavMeshPreUpdate(); // TypeDefIndex: 2539; 0x00FB96F8-0x00FB9914
	
		// Methods
		[RequiredByNativeCode] // 0x004F0ACC-0x004F0ADC
		private static void Internal_CallOnNavMeshPreUpdate(); // 0x00FB9698-0x00FB96F8
	}
}

namespace UnityEngine
{
	[NativeType] // 0x004F1C88-0x004F1CC4
	public struct jvalue // TypeDefIndex: 2541
	{
		// Fields
		public bool z; // 0x00
		public sbyte b; // 0x00
		public char c; // 0x00
		public short s; // 0x00
		public int i; // 0x00
		public long j; // 0x00
		public float f; // 0x00
		public double d; // 0x00
		public IntPtr l; // 0x00
	}

	[NativeConditional] // 0x004F1CC4-0x004F1D5C
	[NativeHeader] // 0x004F1CC4-0x004F1D5C
	[StaticAccessor] // 0x004F1CC4-0x004F1D5C
	[UsedByNativeCode] // 0x004F1CC4-0x004F1D5C
	public static class AndroidJNIHelper // TypeDefIndex: 2542
	{
		// Properties
		public static bool debug { get; set; } // 0x00F69F48-0x00F69F7C 0x00F69F7C-0x00F69FBC
	
		// Methods
		public static IntPtr GetConstructorID(IntPtr javaClass); // 0x00F69FBC-0x00F6A00C
		public static IntPtr GetConstructorID(IntPtr javaClass, [UnityEngine.Internal.DefaultValue] /* 0x004F2A1C-0x004F2A54 */ string signature); // 0x00F6A00C-0x00F6A010
		public static IntPtr GetMethodID(IntPtr javaClass, string methodName); // 0x00F6A1CC-0x00F6A230
		public static IntPtr GetMethodID(IntPtr javaClass, string methodName, [UnityEngine.Internal.DefaultValue] /* 0x004F2A54-0x004F2A8C */ string signature); // 0x00F6A238-0x00F6A240
		public static IntPtr GetMethodID(IntPtr javaClass, string methodName, [UnityEngine.Internal.DefaultValue] /* 0x004F2A8C-0x004F2AC4 */ string signature, [UnityEngine.Internal.DefaultValue] /* 0x004F2AC4-0x004F2AFC */ bool isStatic); // 0x00F6A230-0x00F6A238
		public static IntPtr GetFieldID(IntPtr javaClass, string fieldName); // 0x00F6A410-0x00F6A474
		public static IntPtr GetFieldID(IntPtr javaClass, string fieldName, [UnityEngine.Internal.DefaultValue] /* 0x004F2AFC-0x004F2B34 */ string signature); // 0x00F6A47C-0x00F6A484
		public static IntPtr GetFieldID(IntPtr javaClass, string fieldName, [UnityEngine.Internal.DefaultValue] /* 0x004F2B34-0x004F2B6C */ string signature, [UnityEngine.Internal.DefaultValue] /* 0x004F2B6C-0x004F2BA4 */ bool isStatic); // 0x00F6A474-0x00F6A47C
		public static IntPtr CreateJavaRunnable(AndroidJavaRunnable jrunnable); // 0x00F6A670-0x00F6A674
		public static IntPtr CreateJavaProxy(AndroidJavaProxy proxy); // 0x00F6A6D4-0x00F6A7D4
		public static IntPtr ConvertToJNIArray(Array array); // 0x00F6A868-0x00F6A86C
		public static jvalue[] CreateJNIArgArray(object[] args); // 0x00F6B0AC-0x00F6B0B0
		public static void DeleteJNIArgArray(object[] args, jvalue[] jniArgs); // 0x00F6B5A4-0x00F6B5A8
		public static IntPtr GetConstructorID(IntPtr jclass, object[] args); // 0x00F6B6C8-0x00F6B6F4
		public static IntPtr GetMethodID(IntPtr jclass, string methodName, object[] args, bool isStatic); // 0x00F6B720-0x00F6B764
		public static string GetSignature(object obj); // 0x00F6B7A8-0x00F6B7AC
		public static string GetSignature(object[] args); // 0x00F6C290-0x00F6C294
		public static ArrayType ConvertFromJNIArray<ArrayType>(IntPtr array);
		public static IntPtr GetMethodID<ReturnType>(IntPtr jclass, string methodName, object[] args, bool isStatic);
		public static IntPtr GetFieldID<FieldType>(IntPtr jclass, string fieldName, bool isStatic);
		public static string GetSignature<ReturnType>(object[] args);
	}

	[NativeConditional] // 0x004F1D5C-0x004F1DE4
	[NativeHeader] // 0x004F1D5C-0x004F1DE4
	[StaticAccessor] // 0x004F1D5C-0x004F1DE4
	public static class AndroidJNI // TypeDefIndex: 2543
	{
		// Methods
		[ThreadSafe] // 0x004F1DF4-0x004F1E04
		public static int AttachCurrentThread(); // 0x00F66E0C-0x00F66E40
		[ThreadSafe] // 0x004F1E04-0x004F1E14
		public static int DetachCurrentThread(); // 0x00F66E40-0x00F66E74
		[ThreadSafe] // 0x004F1E14-0x004F1E24
		public static int GetVersion(); // 0x00F66E74-0x00F66EA8
		[ThreadSafe] // 0x004F1E24-0x004F1E34
		public static IntPtr FindClass(string name); // 0x00F66EA8-0x00F66EE8
		[ThreadSafe] // 0x004F1E34-0x004F1E44
		public static IntPtr FromReflectedMethod(IntPtr refMethod); // 0x00F66EE8-0x00F66F28
		[ThreadSafe] // 0x004F1E44-0x004F1E54
		public static IntPtr FromReflectedField(IntPtr refField); // 0x00F66F28-0x00F66F68
		[ThreadSafe] // 0x004F1E54-0x004F1E64
		public static IntPtr ToReflectedMethod(IntPtr clazz, IntPtr methodID, bool isStatic); // 0x00F66F68-0x00F66FC0
		[ThreadSafe] // 0x004F1E64-0x004F1E74
		public static IntPtr ToReflectedField(IntPtr clazz, IntPtr fieldID, bool isStatic); // 0x00F66FC0-0x00F67018
		[ThreadSafe] // 0x004F1E74-0x004F1E84
		public static IntPtr GetSuperclass(IntPtr clazz); // 0x00F67018-0x00F67058
		[ThreadSafe] // 0x004F1E84-0x004F1E94
		public static bool IsAssignableFrom(IntPtr clazz1, IntPtr clazz2); // 0x00F67058-0x00F670A8
		[ThreadSafe] // 0x004F1E94-0x004F1EA4
		public static int Throw(IntPtr obj); // 0x00F670A8-0x00F670E8
		[ThreadSafe] // 0x004F1EA4-0x004F1EB4
		public static int ThrowNew(IntPtr clazz, string message); // 0x00F670E8-0x00F67138
		[ThreadSafe] // 0x004F1EB4-0x004F1EC4
		public static IntPtr ExceptionOccurred(); // 0x00F67138-0x00F6716C
		[ThreadSafe] // 0x004F1EC4-0x004F1ED4
		public static void ExceptionDescribe(); // 0x00F6716C-0x00F671A0
		[ThreadSafe] // 0x004F1ED4-0x004F1EE4
		public static void ExceptionClear(); // 0x00F671A0-0x00F671D4
		[ThreadSafe] // 0x004F1EE4-0x004F1EF4
		public static void FatalError(string message); // 0x00F671D4-0x00F67214
		[ThreadSafe] // 0x004F1EF4-0x004F1F04
		public static int PushLocalFrame(int capacity); // 0x00F67214-0x00F67254
		[ThreadSafe] // 0x004F1F04-0x004F1F14
		public static IntPtr PopLocalFrame(IntPtr ptr); // 0x00F67254-0x00F67294
		[ThreadSafe] // 0x004F1F14-0x004F1F24
		public static IntPtr NewGlobalRef(IntPtr obj); // 0x00F67294-0x00F672D4
		[ThreadSafe] // 0x004F1F24-0x004F1F34
		public static void DeleteGlobalRef(IntPtr obj); // 0x00F672D4-0x00F67314
		[ThreadSafe] // 0x004F1F34-0x004F1F44
		public static IntPtr NewWeakGlobalRef(IntPtr obj); // 0x00F67314-0x00F67354
		[ThreadSafe] // 0x004F1F44-0x004F1F54
		public static void DeleteWeakGlobalRef(IntPtr obj); // 0x00F67354-0x00F67394
		[ThreadSafe] // 0x004F1F54-0x004F1F64
		public static IntPtr NewLocalRef(IntPtr obj); // 0x00F67394-0x00F673D4
		[ThreadSafe] // 0x004F1F64-0x004F1F74
		public static void DeleteLocalRef(IntPtr obj); // 0x00F673D4-0x00F67414
		[ThreadSafe] // 0x004F1F74-0x004F1F84
		public static bool IsSameObject(IntPtr obj1, IntPtr obj2); // 0x00F67414-0x00F67464
		[ThreadSafe] // 0x004F1F84-0x004F1F94
		public static int EnsureLocalCapacity(int capacity); // 0x00F67464-0x00F674A4
		[ThreadSafe] // 0x004F1F94-0x004F1FA4
		public static IntPtr AllocObject(IntPtr clazz); // 0x00F674A4-0x00F674E4
		[ThreadSafe] // 0x004F1FA4-0x004F1FB4
		public static IntPtr NewObject(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00F674E4-0x00F6753C
		[ThreadSafe] // 0x004F1FB4-0x004F1FC4
		public static IntPtr GetObjectClass(IntPtr obj); // 0x00F6753C-0x00F6757C
		[ThreadSafe] // 0x004F1FC4-0x004F1FD4
		public static bool IsInstanceOf(IntPtr obj, IntPtr clazz); // 0x00F6757C-0x00F675CC
		[ThreadSafe] // 0x004F1FD4-0x004F1FE4
		public static IntPtr GetMethodID(IntPtr clazz, string name, string sig); // 0x00F675CC-0x00F67624
		[ThreadSafe] // 0x004F1FE4-0x004F1FF4
		public static IntPtr GetFieldID(IntPtr clazz, string name, string sig); // 0x00F67624-0x00F6767C
		[ThreadSafe] // 0x004F1FF4-0x004F2004
		public static IntPtr GetStaticMethodID(IntPtr clazz, string name, string sig); // 0x00F6767C-0x00F676D4
		[ThreadSafe] // 0x004F2004-0x004F2014
		public static IntPtr GetStaticFieldID(IntPtr clazz, string name, string sig); // 0x00F676D4-0x00F6772C
		public static IntPtr NewString(string chars); // 0x00F6772C-0x00F6776C
		[ThreadSafe] // 0x004F2014-0x004F2024
		private static IntPtr NewStringFromStr(string chars); // 0x00F6776C-0x00F677AC
		[ThreadSafe] // 0x004F2024-0x004F2034
		public static IntPtr NewString(char[] chars); // 0x00F677AC-0x00F677EC
		[ThreadSafe] // 0x004F2034-0x004F2044
		public static IntPtr NewStringUTF(string bytes); // 0x00F677EC-0x00F6782C
		[ThreadSafe] // 0x004F2044-0x004F2054
		public static string GetStringChars(IntPtr str); // 0x00F6782C-0x00F6786C
		[ThreadSafe] // 0x004F2054-0x004F2064
		public static int GetStringLength(IntPtr str); // 0x00F6786C-0x00F678AC
		[ThreadSafe] // 0x004F2064-0x004F2074
		public static int GetStringUTFLength(IntPtr str); // 0x00F678AC-0x00F678EC
		[ThreadSafe] // 0x004F2074-0x004F2084
		public static string GetStringUTFChars(IntPtr str); // 0x00F678EC-0x00F6792C
		[ThreadSafe] // 0x004F2084-0x004F2094
		public static string CallStringMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x00F6792C-0x00F67984
		[ThreadSafe] // 0x004F2094-0x004F20A4
		public static IntPtr CallObjectMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x00F67984-0x00F679DC
		[ThreadSafe] // 0x004F20A4-0x004F20B4
		public static int CallIntMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x00F679DC-0x00F67A34
		[ThreadSafe] // 0x004F20B4-0x004F20C4
		public static bool CallBooleanMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x00F67A34-0x00F67A8C
		[ThreadSafe] // 0x004F20C4-0x004F20D4
		public static short CallShortMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x00F67A8C-0x00F67AE4
		[Obsolete] // 0x004F20D4-0x004F210C
		public static byte CallByteMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x00F67AE4-0x00F67B3C
		[ThreadSafe] // 0x004F210C-0x004F211C
		public static sbyte CallSByteMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x00F67B3C-0x00F67B94
		[ThreadSafe] // 0x004F211C-0x004F212C
		public static char CallCharMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x00F67B94-0x00F67BEC
		[ThreadSafe] // 0x004F212C-0x004F213C
		public static float CallFloatMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x00F67BEC-0x00F67C44
		[ThreadSafe] // 0x004F213C-0x004F214C
		public static double CallDoubleMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x00F67C44-0x00F67C9C
		[ThreadSafe] // 0x004F214C-0x004F215C
		public static long CallLongMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x00F67C9C-0x00F67CF4
		[ThreadSafe] // 0x004F215C-0x004F216C
		public static void CallVoidMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x00F67CF4-0x00F67D4C
		[ThreadSafe] // 0x004F216C-0x004F217C
		public static string GetStringField(IntPtr obj, IntPtr fieldID); // 0x00F67D4C-0x00F67D9C
		[ThreadSafe] // 0x004F217C-0x004F218C
		public static IntPtr GetObjectField(IntPtr obj, IntPtr fieldID); // 0x00F67D9C-0x00F67DEC
		[ThreadSafe] // 0x004F218C-0x004F219C
		public static bool GetBooleanField(IntPtr obj, IntPtr fieldID); // 0x00F67DEC-0x00F67E3C
		[Obsolete] // 0x004F219C-0x004F21D4
		public static byte GetByteField(IntPtr obj, IntPtr fieldID); // 0x00F67E3C-0x00F67E8C
		[ThreadSafe] // 0x004F21D4-0x004F21E4
		public static sbyte GetSByteField(IntPtr obj, IntPtr fieldID); // 0x00F67E8C-0x00F67EDC
		[ThreadSafe] // 0x004F21E4-0x004F21F4
		public static char GetCharField(IntPtr obj, IntPtr fieldID); // 0x00F67EDC-0x00F67F2C
		[ThreadSafe] // 0x004F21F4-0x004F2204
		public static short GetShortField(IntPtr obj, IntPtr fieldID); // 0x00F67F2C-0x00F67F7C
		[ThreadSafe] // 0x004F2204-0x004F2214
		public static int GetIntField(IntPtr obj, IntPtr fieldID); // 0x00F67F7C-0x00F67FCC
		[ThreadSafe] // 0x004F2214-0x004F2224
		public static long GetLongField(IntPtr obj, IntPtr fieldID); // 0x00F67FCC-0x00F6801C
		[ThreadSafe] // 0x004F2224-0x004F2234
		public static float GetFloatField(IntPtr obj, IntPtr fieldID); // 0x00F6801C-0x00F6806C
		[ThreadSafe] // 0x004F2234-0x004F2244
		public static double GetDoubleField(IntPtr obj, IntPtr fieldID); // 0x00F6806C-0x00F680BC
		[ThreadSafe] // 0x004F2244-0x004F2254
		public static void SetStringField(IntPtr obj, IntPtr fieldID, string val); // 0x00F680BC-0x00F68114
		[ThreadSafe] // 0x004F2254-0x004F2264
		public static void SetObjectField(IntPtr obj, IntPtr fieldID, IntPtr val); // 0x00F68114-0x00F6816C
		[ThreadSafe] // 0x004F2264-0x004F2274
		public static void SetBooleanField(IntPtr obj, IntPtr fieldID, bool val); // 0x00F6816C-0x00F681C4
		[Obsolete] // 0x004F2274-0x004F22AC
		public static void SetByteField(IntPtr obj, IntPtr fieldID, byte val); // 0x00F681C4-0x00F6821C
		[ThreadSafe] // 0x004F22AC-0x004F22BC
		public static void SetSByteField(IntPtr obj, IntPtr fieldID, sbyte val); // 0x00F6821C-0x00F68274
		[ThreadSafe] // 0x004F22BC-0x004F22CC
		public static void SetCharField(IntPtr obj, IntPtr fieldID, char val); // 0x00F68274-0x00F682CC
		[ThreadSafe] // 0x004F22CC-0x004F22DC
		public static void SetShortField(IntPtr obj, IntPtr fieldID, short val); // 0x00F682CC-0x00F68324
		[ThreadSafe] // 0x004F22DC-0x004F22EC
		public static void SetIntField(IntPtr obj, IntPtr fieldID, int val); // 0x00F68324-0x00F6837C
		[ThreadSafe] // 0x004F22EC-0x004F22FC
		public static void SetLongField(IntPtr obj, IntPtr fieldID, long val); // 0x00F6837C-0x00F683D4
		[ThreadSafe] // 0x004F22FC-0x004F230C
		public static void SetFloatField(IntPtr obj, IntPtr fieldID, float val); // 0x00F683D4-0x00F68434
		[ThreadSafe] // 0x004F230C-0x004F231C
		public static void SetDoubleField(IntPtr obj, IntPtr fieldID, double val); // 0x00F68434-0x00F68494
		[ThreadSafe] // 0x004F231C-0x004F232C
		public static string CallStaticStringMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00F68494-0x00F684EC
		[ThreadSafe] // 0x004F232C-0x004F233C
		public static IntPtr CallStaticObjectMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00F684EC-0x00F68544
		[ThreadSafe] // 0x004F233C-0x004F234C
		public static int CallStaticIntMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00F68544-0x00F6859C
		[ThreadSafe] // 0x004F234C-0x004F235C
		public static bool CallStaticBooleanMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00F6859C-0x00F685F4
		[ThreadSafe] // 0x004F235C-0x004F236C
		public static short CallStaticShortMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00F685F4-0x00F6864C
		[Obsolete] // 0x004F236C-0x004F23A4
		public static byte CallStaticByteMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00F6864C-0x00F686A4
		[ThreadSafe] // 0x004F23A4-0x004F23B4
		public static sbyte CallStaticSByteMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00F686A4-0x00F686FC
		[ThreadSafe] // 0x004F23B4-0x004F23C4
		public static char CallStaticCharMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00F686FC-0x00F68754
		[ThreadSafe] // 0x004F23C4-0x004F23D4
		public static float CallStaticFloatMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00F68754-0x00F687AC
		[ThreadSafe] // 0x004F23D4-0x004F23E4
		public static double CallStaticDoubleMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00F687AC-0x00F68804
		[ThreadSafe] // 0x004F23E4-0x004F23F4
		public static long CallStaticLongMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00F68804-0x00F6885C
		[ThreadSafe] // 0x004F23F4-0x004F2404
		public static void CallStaticVoidMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00F6885C-0x00F688B4
		[ThreadSafe] // 0x004F2404-0x004F2414
		public static string GetStaticStringField(IntPtr clazz, IntPtr fieldID); // 0x00F688B4-0x00F68904
		[ThreadSafe] // 0x004F2414-0x004F2424
		public static IntPtr GetStaticObjectField(IntPtr clazz, IntPtr fieldID); // 0x00F68904-0x00F68954
		[ThreadSafe] // 0x004F2424-0x004F2434
		public static bool GetStaticBooleanField(IntPtr clazz, IntPtr fieldID); // 0x00F68954-0x00F689A4
		[Obsolete] // 0x004F2434-0x004F246C
		public static byte GetStaticByteField(IntPtr clazz, IntPtr fieldID); // 0x00F689A4-0x00F689F4
		[ThreadSafe] // 0x004F246C-0x004F247C
		public static sbyte GetStaticSByteField(IntPtr clazz, IntPtr fieldID); // 0x00F689F4-0x00F68A44
		[ThreadSafe] // 0x004F247C-0x004F248C
		public static char GetStaticCharField(IntPtr clazz, IntPtr fieldID); // 0x00F68A44-0x00F68A94
		[ThreadSafe] // 0x004F248C-0x004F249C
		public static short GetStaticShortField(IntPtr clazz, IntPtr fieldID); // 0x00F68A94-0x00F68AE4
		[ThreadSafe] // 0x004F249C-0x004F24AC
		public static int GetStaticIntField(IntPtr clazz, IntPtr fieldID); // 0x00F68AE4-0x00F68B34
		[ThreadSafe] // 0x004F24AC-0x004F24BC
		public static long GetStaticLongField(IntPtr clazz, IntPtr fieldID); // 0x00F68B34-0x00F68B84
		[ThreadSafe] // 0x004F24BC-0x004F24CC
		public static float GetStaticFloatField(IntPtr clazz, IntPtr fieldID); // 0x00F68B84-0x00F68BD4
		[ThreadSafe] // 0x004F24CC-0x004F24DC
		public static double GetStaticDoubleField(IntPtr clazz, IntPtr fieldID); // 0x00F68BD4-0x00F68C24
		[ThreadSafe] // 0x004F24DC-0x004F24EC
		public static void SetStaticStringField(IntPtr clazz, IntPtr fieldID, string val); // 0x00F68C24-0x00F68C7C
		[ThreadSafe] // 0x004F24EC-0x004F24FC
		public static void SetStaticObjectField(IntPtr clazz, IntPtr fieldID, IntPtr val); // 0x00F68C7C-0x00F68CD4
		[ThreadSafe] // 0x004F24FC-0x004F250C
		public static void SetStaticBooleanField(IntPtr clazz, IntPtr fieldID, bool val); // 0x00F68CD4-0x00F68D2C
		[Obsolete] // 0x004F250C-0x004F2544
		public static void SetStaticByteField(IntPtr clazz, IntPtr fieldID, byte val); // 0x00F68D2C-0x00F68D84
		[ThreadSafe] // 0x004F2544-0x004F2554
		public static void SetStaticSByteField(IntPtr clazz, IntPtr fieldID, sbyte val); // 0x00F68D84-0x00F68DDC
		[ThreadSafe] // 0x004F2554-0x004F2564
		public static void SetStaticCharField(IntPtr clazz, IntPtr fieldID, char val); // 0x00F68DDC-0x00F68E34
		[ThreadSafe] // 0x004F2564-0x004F2574
		public static void SetStaticShortField(IntPtr clazz, IntPtr fieldID, short val); // 0x00F68E34-0x00F68E8C
		[ThreadSafe] // 0x004F2574-0x004F2584
		public static void SetStaticIntField(IntPtr clazz, IntPtr fieldID, int val); // 0x00F68E8C-0x00F68EE4
		[ThreadSafe] // 0x004F2584-0x004F2594
		public static void SetStaticLongField(IntPtr clazz, IntPtr fieldID, long val); // 0x00F68EE4-0x00F68F3C
		[ThreadSafe] // 0x004F2594-0x004F25A4
		public static void SetStaticFloatField(IntPtr clazz, IntPtr fieldID, float val); // 0x00F68F3C-0x00F68F9C
		[ThreadSafe] // 0x004F25A4-0x004F25B4
		public static void SetStaticDoubleField(IntPtr clazz, IntPtr fieldID, double val); // 0x00F68F9C-0x00F68FFC
		[ThreadSafe] // 0x004F25B4-0x004F25C4
		public static IntPtr ToBooleanArray(bool[] array); // 0x00F68FFC-0x00F6903C
		[Obsolete] // 0x004F25C4-0x004F2610
		[ThreadSafe] // 0x004F25C4-0x004F2610
		public static IntPtr ToByteArray(byte[] array); // 0x00F6903C-0x00F6907C
		[ThreadSafe] // 0x004F2610-0x004F2620
		public static IntPtr ToSByteArray(sbyte[] array); // 0x00F6907C-0x00F690BC
		[ThreadSafe] // 0x004F2620-0x004F2630
		public static IntPtr ToCharArray(char[] array); // 0x00F690BC-0x00F690FC
		[ThreadSafe] // 0x004F2630-0x004F2640
		public static IntPtr ToShortArray(short[] array); // 0x00F690FC-0x00F6913C
		[ThreadSafe] // 0x004F2640-0x004F2650
		public static IntPtr ToIntArray(int[] array); // 0x00F6913C-0x00F6917C
		[ThreadSafe] // 0x004F2650-0x004F2660
		public static IntPtr ToLongArray(long[] array); // 0x00F6917C-0x00F691BC
		[ThreadSafe] // 0x004F2660-0x004F2670
		public static IntPtr ToFloatArray(float[] array); // 0x00F691BC-0x00F691FC
		[ThreadSafe] // 0x004F2670-0x004F2680
		public static IntPtr ToDoubleArray(double[] array); // 0x00F691FC-0x00F6923C
		[ThreadSafe] // 0x004F2680-0x004F2690
		public static IntPtr ToObjectArray(IntPtr[] array, IntPtr arrayClass); // 0x00F6923C-0x00F6928C
		public static IntPtr ToObjectArray(IntPtr[] array); // 0x00F6928C-0x00F692F4
		[ThreadSafe] // 0x004F2690-0x004F26A0
		public static bool[] FromBooleanArray(IntPtr array); // 0x00F692F4-0x00F69334
		[Obsolete] // 0x004F26A0-0x004F26EC
		[ThreadSafe] // 0x004F26A0-0x004F26EC
		public static byte[] FromByteArray(IntPtr array); // 0x00F69334-0x00F69374
		[ThreadSafe] // 0x004F26EC-0x004F26FC
		public static sbyte[] FromSByteArray(IntPtr array); // 0x00F69374-0x00F693B4
		[ThreadSafe] // 0x004F26FC-0x004F270C
		public static char[] FromCharArray(IntPtr array); // 0x00F693B4-0x00F693F4
		[ThreadSafe] // 0x004F270C-0x004F271C
		public static short[] FromShortArray(IntPtr array); // 0x00F693F4-0x00F69434
		[ThreadSafe] // 0x004F271C-0x004F272C
		public static int[] FromIntArray(IntPtr array); // 0x00F69434-0x00F69474
		[ThreadSafe] // 0x004F272C-0x004F273C
		public static long[] FromLongArray(IntPtr array); // 0x00F69474-0x00F694B4
		[ThreadSafe] // 0x004F273C-0x004F274C
		public static float[] FromFloatArray(IntPtr array); // 0x00F694B4-0x00F694F4
		[ThreadSafe] // 0x004F274C-0x004F275C
		public static double[] FromDoubleArray(IntPtr array); // 0x00F694F4-0x00F69534
		[ThreadSafe] // 0x004F275C-0x004F276C
		public static IntPtr[] FromObjectArray(IntPtr array); // 0x00F69534-0x00F69574
		[ThreadSafe] // 0x004F276C-0x004F277C
		public static int GetArrayLength(IntPtr array); // 0x00F69574-0x00F695B4
		[ThreadSafe] // 0x004F277C-0x004F278C
		public static IntPtr NewBooleanArray(int size); // 0x00F695B4-0x00F695F4
		[Obsolete] // 0x004F278C-0x004F27C4
		public static IntPtr NewByteArray(int size); // 0x00F695F4-0x00F69634
		[ThreadSafe] // 0x004F27C4-0x004F27D4
		public static IntPtr NewSByteArray(int size); // 0x00F69634-0x00F69674
		[ThreadSafe] // 0x004F27D4-0x004F27E4
		public static IntPtr NewCharArray(int size); // 0x00F69674-0x00F696B4
		[ThreadSafe] // 0x004F27E4-0x004F27F4
		public static IntPtr NewShortArray(int size); // 0x00F696B4-0x00F696F4
		[ThreadSafe] // 0x004F27F4-0x004F2804
		public static IntPtr NewIntArray(int size); // 0x00F696F4-0x00F69734
		[ThreadSafe] // 0x004F2804-0x004F2814
		public static IntPtr NewLongArray(int size); // 0x00F69734-0x00F69774
		[ThreadSafe] // 0x004F2814-0x004F2824
		public static IntPtr NewFloatArray(int size); // 0x00F69774-0x00F697B4
		[ThreadSafe] // 0x004F2824-0x004F2834
		public static IntPtr NewDoubleArray(int size); // 0x00F697B4-0x00F697F4
		[ThreadSafe] // 0x004F2834-0x004F2844
		public static IntPtr NewObjectArray(int size, IntPtr clazz, IntPtr obj); // 0x00F697F4-0x00F6984C
		[ThreadSafe] // 0x004F2844-0x004F2854
		public static bool GetBooleanArrayElement(IntPtr array, int index); // 0x00F6984C-0x00F6989C
		[Obsolete] // 0x004F2854-0x004F288C
		public static byte GetByteArrayElement(IntPtr array, int index); // 0x00F6989C-0x00F698EC
		[ThreadSafe] // 0x004F288C-0x004F289C
		public static sbyte GetSByteArrayElement(IntPtr array, int index); // 0x00F698EC-0x00F6993C
		[ThreadSafe] // 0x004F289C-0x004F28AC
		public static char GetCharArrayElement(IntPtr array, int index); // 0x00F6993C-0x00F6998C
		[ThreadSafe] // 0x004F28AC-0x004F28BC
		public static short GetShortArrayElement(IntPtr array, int index); // 0x00F6998C-0x00F699DC
		[ThreadSafe] // 0x004F28BC-0x004F28CC
		public static int GetIntArrayElement(IntPtr array, int index); // 0x00F699DC-0x00F69A2C
		[ThreadSafe] // 0x004F28CC-0x004F28DC
		public static long GetLongArrayElement(IntPtr array, int index); // 0x00F69A2C-0x00F69A7C
		[ThreadSafe] // 0x004F28DC-0x004F28EC
		public static float GetFloatArrayElement(IntPtr array, int index); // 0x00F69A7C-0x00F69ACC
		[ThreadSafe] // 0x004F28EC-0x004F28FC
		public static double GetDoubleArrayElement(IntPtr array, int index); // 0x00F69ACC-0x00F69B1C
		[ThreadSafe] // 0x004F28FC-0x004F290C
		public static IntPtr GetObjectArrayElement(IntPtr array, int index); // 0x00F69B1C-0x00F69B6C
		[Obsolete] // 0x004F290C-0x004F2944
		public static void SetBooleanArrayElement(IntPtr array, int index, byte val); // 0x00F69B6C-0x00F69BC8
		[ThreadSafe] // 0x004F2944-0x004F2954
		public static void SetBooleanArrayElement(IntPtr array, int index, bool val); // 0x00F69BC8-0x00F69C20
		[Obsolete] // 0x004F2954-0x004F298C
		public static void SetByteArrayElement(IntPtr array, int index, sbyte val); // 0x00F69C20-0x00F69C78
		[ThreadSafe] // 0x004F298C-0x004F299C
		public static void SetSByteArrayElement(IntPtr array, int index, sbyte val); // 0x00F69C78-0x00F69CD0
		[ThreadSafe] // 0x004F299C-0x004F29AC
		public static void SetCharArrayElement(IntPtr array, int index, char val); // 0x00F69CD0-0x00F69D28
		[ThreadSafe] // 0x004F29AC-0x004F29BC
		public static void SetShortArrayElement(IntPtr array, int index, short val); // 0x00F69D28-0x00F69D80
		[ThreadSafe] // 0x004F29BC-0x004F29CC
		public static void SetIntArrayElement(IntPtr array, int index, int val); // 0x00F69D80-0x00F69DD8
		[ThreadSafe] // 0x004F29CC-0x004F29DC
		public static void SetLongArrayElement(IntPtr array, int index, long val); // 0x00F69DD8-0x00F69E30
		[ThreadSafe] // 0x004F29DC-0x004F29EC
		public static void SetFloatArrayElement(IntPtr array, int index, float val); // 0x00F69E30-0x00F69E90
		[ThreadSafe] // 0x004F29EC-0x004F29FC
		public static void SetDoubleArrayElement(IntPtr array, int index, double val); // 0x00F69E90-0x00F69EF0
		[ThreadSafe] // 0x004F29FC-0x004F2A0C
		public static void SetObjectArrayElement(IntPtr array, int index, IntPtr obj); // 0x00F69EF0-0x00F69F48
	}

	internal class AndroidJNISafe // TypeDefIndex: 2544
	{
		// Methods
		public static void CheckException(); // 0x00F6C390-0x00F6C69C
		public static void DeleteGlobalRef(IntPtr globalref); // 0x00F6C7A4-0x00F6C828
		public static void DeleteWeakGlobalRef(IntPtr globalref); // 0x00F6C828-0x00F6C8AC
		public static void DeleteLocalRef(IntPtr localref); // 0x00F6C720-0x00F6C7A4
		public static IntPtr NewString(string chars); // 0x00F6C8AC-0x00F6C92C
		public static string GetStringChars(IntPtr str); // 0x00F6C92C-0x00F6C9AC
		public static IntPtr GetObjectClass(IntPtr ptr); // 0x00F6C9AC-0x00F6CA2C
		public static IntPtr GetStaticMethodID(IntPtr clazz, string name, string sig); // 0x00F6CA2C-0x00F6CAC4
		public static IntPtr GetMethodID(IntPtr obj, string name, string sig); // 0x00F6CAC4-0x00F6CB5C
		public static IntPtr GetFieldID(IntPtr clazz, string name, string sig); // 0x00F6CB5C-0x00F6CBF4
		public static IntPtr GetStaticFieldID(IntPtr clazz, string name, string sig); // 0x00F6CBF4-0x00F6CC8C
		public static IntPtr FromReflectedMethod(IntPtr refMethod); // 0x00F6CC8C-0x00F6CD0C
		public static IntPtr FromReflectedField(IntPtr refField); // 0x00F6CD0C-0x00F6CD8C
		public static IntPtr FindClass(string name); // 0x00F6CD8C-0x00F6CE0C
		public static IntPtr NewObject(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00F6CE0C-0x00F6CEA4
		public static void SetStaticObjectField(IntPtr clazz, IntPtr fieldID, IntPtr val); // 0x00F6CEA4-0x00F6CF40
		public static void SetStaticStringField(IntPtr clazz, IntPtr fieldID, string val); // 0x00F6CF40-0x00F6CFDC
		public static void SetStaticCharField(IntPtr clazz, IntPtr fieldID, char val); // 0x00F6CFDC-0x00F6D078
		public static void SetStaticDoubleField(IntPtr clazz, IntPtr fieldID, double val); // 0x00F6D078-0x00F6D120
		public static void SetStaticFloatField(IntPtr clazz, IntPtr fieldID, float val); // 0x00F6D120-0x00F6D1C8
		public static void SetStaticLongField(IntPtr clazz, IntPtr fieldID, long val); // 0x00F6D1C8-0x00F6D264
		public static void SetStaticShortField(IntPtr clazz, IntPtr fieldID, short val); // 0x00F6D264-0x00F6D300
		public static void SetStaticSByteField(IntPtr clazz, IntPtr fieldID, sbyte val); // 0x00F6D300-0x00F6D39C
		public static void SetStaticBooleanField(IntPtr clazz, IntPtr fieldID, bool val); // 0x00F6D39C-0x00F6D438
		public static void SetStaticIntField(IntPtr clazz, IntPtr fieldID, int val); // 0x00F6D438-0x00F6D4D4
		public static IntPtr GetStaticObjectField(IntPtr clazz, IntPtr fieldID); // 0x00F6D4D4-0x00F6D564
		public static string GetStaticStringField(IntPtr clazz, IntPtr fieldID); // 0x00F6D564-0x00F6D5F4
		public static char GetStaticCharField(IntPtr clazz, IntPtr fieldID); // 0x00F6D5F4-0x00F6D684
		public static double GetStaticDoubleField(IntPtr clazz, IntPtr fieldID); // 0x00F6D684-0x00F6D720
		public static float GetStaticFloatField(IntPtr clazz, IntPtr fieldID); // 0x00F6D720-0x00F6D7BC
		public static long GetStaticLongField(IntPtr clazz, IntPtr fieldID); // 0x00F6D7BC-0x00F6D84C
		public static short GetStaticShortField(IntPtr clazz, IntPtr fieldID); // 0x00F6D84C-0x00F6D8DC
		public static sbyte GetStaticSByteField(IntPtr clazz, IntPtr fieldID); // 0x00F6D8DC-0x00F6D96C
		public static bool GetStaticBooleanField(IntPtr clazz, IntPtr fieldID); // 0x00F6D96C-0x00F6D9FC
		public static int GetStaticIntField(IntPtr clazz, IntPtr fieldID); // 0x00F6D9FC-0x00F6DA8C
		public static void CallStaticVoidMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00F6DA8C-0x00F6DB28
		public static IntPtr CallStaticObjectMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00F6DB28-0x00F6DBC0
		public static string CallStaticStringMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00F6DBC0-0x00F6DC58
		public static char CallStaticCharMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00F6DC58-0x00F6DCF0
		public static double CallStaticDoubleMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00F6DCF0-0x00F6DD94
		public static float CallStaticFloatMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00F6DD94-0x00F6DE38
		public static long CallStaticLongMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00F6DE38-0x00F6DED0
		public static short CallStaticShortMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00F6DED0-0x00F6DF68
		public static sbyte CallStaticSByteMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00F6DF68-0x00F6E000
		public static bool CallStaticBooleanMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00F6E000-0x00F6E098
		public static int CallStaticIntMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x00F6E098-0x00F6E130
		public static void SetObjectField(IntPtr obj, IntPtr fieldID, IntPtr val); // 0x00F6E130-0x00F6E1CC
		public static void SetStringField(IntPtr obj, IntPtr fieldID, string val); // 0x00F6E1CC-0x00F6E268
		public static void SetCharField(IntPtr obj, IntPtr fieldID, char val); // 0x00F6E268-0x00F6E304
		public static void SetDoubleField(IntPtr obj, IntPtr fieldID, double val); // 0x00F6E304-0x00F6E3AC
		public static void SetFloatField(IntPtr obj, IntPtr fieldID, float val); // 0x00F6E3AC-0x00F6E454
		public static void SetLongField(IntPtr obj, IntPtr fieldID, long val); // 0x00F6E454-0x00F6E4F0
		public static void SetShortField(IntPtr obj, IntPtr fieldID, short val); // 0x00F6E4F0-0x00F6E58C
		public static void SetSByteField(IntPtr obj, IntPtr fieldID, sbyte val); // 0x00F6E58C-0x00F6E628
		public static void SetBooleanField(IntPtr obj, IntPtr fieldID, bool val); // 0x00F6E628-0x00F6E6C4
		public static void SetIntField(IntPtr obj, IntPtr fieldID, int val); // 0x00F6E6C4-0x00F6E760
		public static IntPtr GetObjectField(IntPtr obj, IntPtr fieldID); // 0x00F6E760-0x00F6E7F0
		public static string GetStringField(IntPtr obj, IntPtr fieldID); // 0x00F6E7F0-0x00F6E880
		public static char GetCharField(IntPtr obj, IntPtr fieldID); // 0x00F6E880-0x00F6E910
		public static double GetDoubleField(IntPtr obj, IntPtr fieldID); // 0x00F6E910-0x00F6E9AC
		public static float GetFloatField(IntPtr obj, IntPtr fieldID); // 0x00F6E9AC-0x00F6EA48
		public static long GetLongField(IntPtr obj, IntPtr fieldID); // 0x00F6EA48-0x00F6EAD8
		public static short GetShortField(IntPtr obj, IntPtr fieldID); // 0x00F6EAD8-0x00F6EB68
		public static sbyte GetSByteField(IntPtr obj, IntPtr fieldID); // 0x00F6EB68-0x00F6EBF8
		public static bool GetBooleanField(IntPtr obj, IntPtr fieldID); // 0x00F6EBF8-0x00F6EC88
		public static int GetIntField(IntPtr obj, IntPtr fieldID); // 0x00F6EC88-0x00F6ED18
		public static void CallVoidMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x00F6ED18-0x00F6EDB4
		public static IntPtr CallObjectMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x00F6EDB4-0x00F6EE4C
		public static string CallStringMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x00F6EE4C-0x00F6EEE4
		public static char CallCharMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x00F6EEE4-0x00F6EF7C
		public static double CallDoubleMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x00F6EF7C-0x00F6F020
		public static float CallFloatMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x00F6F020-0x00F6F0C4
		public static long CallLongMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x00F6F0C4-0x00F6F15C
		public static short CallShortMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x00F6F15C-0x00F6F1F4
		public static sbyte CallSByteMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x00F6F1F4-0x00F6F28C
		public static bool CallBooleanMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x00F6F28C-0x00F6F324
		public static int CallIntMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x00F6F324-0x00F6F3BC
		public static char[] FromCharArray(IntPtr array); // 0x00F6F3BC-0x00F6F43C
		public static double[] FromDoubleArray(IntPtr array); // 0x00F6F43C-0x00F6F4BC
		public static float[] FromFloatArray(IntPtr array); // 0x00F6F4BC-0x00F6F53C
		public static long[] FromLongArray(IntPtr array); // 0x00F6F53C-0x00F6F5BC
		public static short[] FromShortArray(IntPtr array); // 0x00F6F5BC-0x00F6F63C
		public static byte[] FromByteArray(IntPtr array); // 0x00F6F63C-0x00F6F6BC
		public static sbyte[] FromSByteArray(IntPtr array); // 0x00F6F6BC-0x00F6F73C
		public static bool[] FromBooleanArray(IntPtr array); // 0x00F6F73C-0x00F6F7BC
		public static int[] FromIntArray(IntPtr array); // 0x00F6F7BC-0x00F6F83C
		public static IntPtr ToObjectArray(IntPtr[] array, IntPtr type); // 0x00F6F83C-0x00F6F8CC
		public static IntPtr ToCharArray(char[] array); // 0x00F6F8CC-0x00F6F94C
		public static IntPtr ToDoubleArray(double[] array); // 0x00F6F94C-0x00F6F9CC
		public static IntPtr ToFloatArray(float[] array); // 0x00F6F9CC-0x00F6FA4C
		public static IntPtr ToLongArray(long[] array); // 0x00F6FA4C-0x00F6FACC
		public static IntPtr ToShortArray(short[] array); // 0x00F6FACC-0x00F6FB4C
		public static IntPtr ToByteArray(byte[] array); // 0x00F6FB4C-0x00F6FBCC
		public static IntPtr ToSByteArray(sbyte[] array); // 0x00F6FBCC-0x00F6FC4C
		public static IntPtr ToBooleanArray(bool[] array); // 0x00F6FC4C-0x00F6FCCC
		public static IntPtr ToIntArray(int[] array); // 0x00F6FCCC-0x00F6FD4C
		public static IntPtr GetObjectArrayElement(IntPtr array, int index); // 0x00F6FD4C-0x00F6FDDC
		public static int GetArrayLength(IntPtr array); // 0x00F6FDDC-0x00F6FE5C
	}

	public delegate void AndroidJavaRunnable(); // TypeDefIndex: 2545; 0x00F73050-0x00F7326C

	public sealed class AndroidJavaException : Exception // TypeDefIndex: 2546
	{
		// Fields
		private string mJavaStackTrace; // 0x88
	
		// Properties
		public override string StackTrace { get; } // 0x00F70200-0x00F70230 
	
		// Constructors
		internal AndroidJavaException(string message, string javaStackTrace); // 0x00F6C69C-0x00F6C720
	}

	internal class GlobalJavaObjectRef // TypeDefIndex: 2547
	{
		// Fields
		private bool m_disposed; // 0x10
		protected IntPtr m_jobject; // 0x18
	
		// Constructors
		public GlobalJavaObjectRef(IntPtr jobject); // 0x00F700B8-0x00F7015C
	
		// Methods
		~GlobalJavaObjectRef(); // 0x00F73BEC-0x00F73C58
		public static implicit operator IntPtr(GlobalJavaObjectRef obj); // 0x00F70F7C-0x00F70F94
		public void Dispose(); // 0x00F71048-0x00F710BC
	}

	internal class AndroidJavaRunnableProxy : AndroidJavaProxy // TypeDefIndex: 2548
	{
		// Fields
		private AndroidJavaRunnable mRunnable; // 0x20
	
		// Constructors
		public AndroidJavaRunnableProxy(AndroidJavaRunnable runnable); // 0x00F732AC-0x00F73330
	
		// Methods
		public void run(); // 0x00F73330-0x00F73348
	}

	public class AndroidJavaProxy // TypeDefIndex: 2549
	{
		// Fields
		public readonly AndroidJavaClass javaInterface; // 0x10
		internal IntPtr proxyObject; // 0x18
		private static readonly GlobalJavaObjectRef s_JavaLangSystemClass; // 0x00
		private static readonly IntPtr s_HashCodeMethodID; // 0x08
	
		// Constructors
		public AndroidJavaProxy(string javaInterface); // 0x00F71254-0x00F712C4
		public AndroidJavaProxy(AndroidJavaClass javaInterface); // 0x00F712C4-0x00F71324
		static AndroidJavaProxy(); // 0x00F72F74-0x00F73040
	
		// Methods
		~AndroidJavaProxy(); // 0x00F71324-0x00F71394
		public virtual AndroidJavaObject Invoke(string methodName, object[] args); // 0x00F71394-0x00F71A10
		public virtual AndroidJavaObject Invoke(string methodName, AndroidJavaObject[] javaArgs); // 0x00F72510-0x00F72688
		public virtual bool equals(AndroidJavaObject obj); // 0x00F72D48-0x00F72DD8
		public virtual int hashCode(); // 0x00F72DD8-0x00F72EA0
		public virtual string toString(); // 0x00F72EA0-0x00F72F00
		internal AndroidJavaObject GetProxyObject(); // 0x00F72F00-0x00F72F74
		internal IntPtr GetRawProxy(); // 0x00F722C8-0x00F723E8
	}

	public class AndroidJavaObject : IDisposable // TypeDefIndex: 2550
	{
		// Fields
		private static bool enableDebugPrints; // 0x00
		internal GlobalJavaObjectRef m_jobject; // 0x10
		internal GlobalJavaObjectRef m_jclass; // 0x18
	
		// Constructors
		public AndroidJavaObject(string className, string[] args); // 0x00F70230-0x00F702F4
		public AndroidJavaObject(string className, AndroidJavaObject[] args); // 0x00F704BC-0x00F70580
		public AndroidJavaObject(string className, AndroidJavaClass[] args); // 0x00F70580-0x00F70644
		public AndroidJavaObject(string className, AndroidJavaProxy[] args); // 0x00F70644-0x00F70708
		public AndroidJavaObject(string className, AndroidJavaRunnable[] args); // 0x00F70708-0x00F707CC
		public AndroidJavaObject(string className, params /* 0x004F2BA4-0x004F2BB4 */ object[] args); // 0x00F707CC-0x00F7080C
		internal AndroidJavaObject(IntPtr jobject); // 0x00F7080C-0x00F7090C
		internal AndroidJavaObject(); // 0x00F6FEDC-0x00F6FEE4
		static AndroidJavaObject(); // 0x00F71204-0x00F71254
	
		// Methods
		public void Dispose(); // 0x00F7090C-0x00F70988
		public void Call<T>(string methodName, T[] args);
		public void Call(string methodName, params /* 0x004F2BB4-0x004F2BC4 */ object[] args); // 0x00F70988-0x00F7098C
		public void CallStatic<T>(string methodName, T[] args);
		public void CallStatic(string methodName, params /* 0x004F2BC4-0x004F2BD4 */ object[] args); // 0x00F70AAC-0x00F70AB0
		public FieldType Get<FieldType>(string fieldName);
		public void Set<FieldType>(string fieldName, FieldType val);
		public FieldType GetStatic<FieldType>(string fieldName);
		public void SetStatic<FieldType>(string fieldName, FieldType val);
		public IntPtr GetRawObject(); // 0x00F70BD0-0x00F70BF0
		public IntPtr GetRawClass(); // 0x00F70C10-0x00F70C30
		public ReturnType Call<ReturnType, T>(string methodName, T[] args);
		public ReturnType Call<ReturnType>(string methodName, params /* 0x004F2BD4-0x004F2BE4 */ object[] args);
		public ReturnType CallStatic<ReturnType, T>(string methodName, T[] args);
		public ReturnType CallStatic<ReturnType>(string methodName, params /* 0x004F2BE4-0x004F2BF4 */ object[] args);
		protected void DebugPrint(string msg); // 0x00F7015C-0x00F70200
		protected void DebugPrint(string call, string methodName, string signature, object[] args); // 0x00F70C50-0x00F70F7C
		private void _AndroidJavaObject(string className, params /* 0x004F2BF4-0x004F2C04 */ object[] args); // 0x00F702F4-0x00F704BC
		~AndroidJavaObject(); // 0x00F70F94-0x00F7100C
		protected virtual void Dispose(bool disposing); // 0x00F7100C-0x00F71048
		protected void _Call(string methodName, params /* 0x004F2C04-0x004F2C14 */ object[] args); // 0x00F7098C-0x00F70AAC
		protected ReturnType _Call<ReturnType>(string methodName, params /* 0x004F2C14-0x004F2C24 */ object[] args);
		protected FieldType _Get<FieldType>(string fieldName);
		protected void _Set<FieldType>(string fieldName, FieldType val);
		protected void _CallStatic(string methodName, params /* 0x004F2C24-0x004F2C34 */ object[] args); // 0x00F70AB0-0x00F70BD0
		protected ReturnType _CallStatic<ReturnType>(string methodName, params /* 0x004F2C34-0x004F2C44 */ object[] args);
		protected FieldType _GetStatic<FieldType>(string fieldName);
		protected void _SetStatic<FieldType>(string fieldName, FieldType val);
		internal static AndroidJavaObject AndroidJavaObjectDeleteLocalRef(IntPtr jobject); // 0x00F710BC-0x00F71160
		internal static AndroidJavaClass AndroidJavaClassDeleteLocalRef(IntPtr jclass); // 0x00F71160-0x00F71204
		protected IntPtr _GetRawObject(); // 0x00F70BF0-0x00F70C10
		protected IntPtr _GetRawClass(); // 0x00F70C30-0x00F70C50
	}

	public class AndroidJavaClass : AndroidJavaObject // TypeDefIndex: 2551
	{
		// Constructors
		public AndroidJavaClass(string className); // 0x00F6FE5C-0x00F6FEDC
		internal AndroidJavaClass(IntPtr jclass); // 0x00F6FFB4-0x00F700B8
	
		// Methods
		private void _AndroidJavaClass(string className); // 0x00F6FEE4-0x00F6FFB4
	}

	internal class AndroidReflection // TypeDefIndex: 2552
	{
		// Fields
		private static readonly GlobalJavaObjectRef s_ReflectionHelperClass; // 0x00
		private static readonly IntPtr s_ReflectionHelperGetConstructorID; // 0x08
		private static readonly IntPtr s_ReflectionHelperGetMethodID; // 0x10
		private static readonly IntPtr s_ReflectionHelperGetFieldID; // 0x18
		private static readonly IntPtr s_ReflectionHelperNewProxyInstance; // 0x20
		private static readonly IntPtr s_ReflectionHelperSetNativeExceptionOnProxy; // 0x28
	
		// Constructors
		static AndroidReflection(); // 0x00F73A84-0x00F73BEC
	
		// Methods
		public static bool IsPrimitive(Type t); // 0x00F73348-0x00F73360
		public static bool IsAssignableFrom(Type t, Type from); // 0x00F73360-0x00F73380
		private static IntPtr GetStaticMethodID(string clazz, string methodName, string signature); // 0x00F73380-0x00F73400
		public static IntPtr GetConstructorMember(IntPtr jclass, string signature); // 0x00F73400-0x00F73594
		public static IntPtr GetMethodMember(IntPtr jclass, string methodName, string signature, bool isStatic); // 0x00F73594-0x00F73798
		public static IntPtr GetFieldMember(IntPtr jclass, string fieldName, string signature, bool isStatic); // 0x00F73798-0x00F7399C
		public static IntPtr NewProxyInstance(IntPtr delegateHandle, IntPtr interfaze); // 0x00F7399C-0x00F73A84
		public static void SetNativeExceptionOnProxy(IntPtr proxy, Exception e, bool methodNotFound); // 0x00F723E8-0x00F72510
	}

	[UsedByNativeCode] // 0x004F1DE4-0x004F1DF4
	internal sealed class _AndroidJNIHelper // TypeDefIndex: 2553
	{
		// Constructors
		public _AndroidJNIHelper(); // 0x00F73C58-0x00F73C60
	
		// Methods
		public static IntPtr CreateJavaProxy(IntPtr delegateHandle, AndroidJavaProxy proxy); // 0x00F6A7D4-0x00F6A868
		public static IntPtr CreateJavaRunnable(AndroidJavaRunnable jrunnable); // 0x00F6A674-0x00F6A6D4
		[RequiredByNativeCode] // 0x004F2A0C-0x004F2A1C
		public static IntPtr InvokeJavaProxyMethod(AndroidJavaProxy proxy, IntPtr jmethodName, IntPtr jargs); // 0x00F73C60-0x00F74060
		public static jvalue[] CreateJNIArgArray(object[] args); // 0x00F6B0B0-0x00F6B5A4
		public static object UnboxArray(AndroidJavaObject obj); // 0x00F74060-0x00F74574
		public static object Unbox(AndroidJavaObject obj); // 0x00F72688-0x00F72D48
		public static AndroidJavaObject Box(object obj); // 0x00F71A10-0x00F722C8
		public static void DeleteJNIArgArray(object[] args, jvalue[] jniArgs); // 0x00F6B5A8-0x00F6B6C8
		public static IntPtr ConvertToJNIArray(Array array); // 0x00F6A86C-0x00F6B0AC
		public static ArrayType ConvertFromJNIArray<ArrayType>(IntPtr array);
		public static IntPtr GetConstructorID(IntPtr jclass, object[] args); // 0x00F6B6F4-0x00F6B720
		public static IntPtr GetMethodID(IntPtr jclass, string methodName, object[] args, bool isStatic); // 0x00F6B764-0x00F6B7A8
		public static IntPtr GetMethodID<ReturnType>(IntPtr jclass, string methodName, object[] args, bool isStatic);
		public static IntPtr GetFieldID<ReturnType>(IntPtr jclass, string fieldName, bool isStatic);
		public static IntPtr GetConstructorID(IntPtr jclass, string signature); // 0x00F6A010-0x00F6A1CC
		public static IntPtr GetMethodID(IntPtr jclass, string methodName, string signature, bool isStatic); // 0x00F6A240-0x00F6A410
		private static IntPtr GetMethodIDFallback(IntPtr jclass, string methodName, string signature, bool isStatic); // 0x00F74574-0x00F74670
		public static IntPtr GetFieldID(IntPtr jclass, string fieldName, string signature, bool isStatic); // 0x00F6A484-0x00F6A670
		public static string GetSignature(object obj); // 0x00F6B7AC-0x00F6C290
		public static string GetSignature(object[] args); // 0x00F6C294-0x00F6C390
		public static string GetSignature<ReturnType>(object[] args);
	}
}

namespace UnityEngineInternal.Input
{
	internal unsafe delegate void NativeUpdateCallback(NativeInputUpdateType updateType, NativeInputEventBuffer* buffer); // TypeDefIndex: 2555; 0x00FB86E0-0x00FB893C

	internal struct NativeInputEventBuffer // TypeDefIndex: 2556
	{
		// Fields
		public unsafe void* eventBuffer; // 0x00
		public int eventCount; // 0x08
		public int sizeInBytes; // 0x0C
		public int capacityInBytes; // 0x10
	}

	[Flags] // 0x004F3DF0-0x004F3E00
	internal enum NativeInputUpdateType // TypeDefIndex: 2557
	{
		IgnoreFocus = -2147483648,
		Dynamic = 1,
		Fixed = 2,
		BeforeRender = 4,
		Editor = 8
	}

	[NativeConditional] // 0x004F3E00-0x004F3E84
	[NativeHeader] // 0x004F3E00-0x004F3E84
	[NativeHeader] // 0x004F3E00-0x004F3E84
	internal class NativeInputSystem // TypeDefIndex: 2558
	{
		// Fields
		public static NativeUpdateCallback onUpdate; // 0x00
		public static Action<NativeInputUpdateType> onBeforeUpdate; // 0x08
		public static Func<NativeInputUpdateType, bool> onShouldRunUpdate; // 0x10
		private static Action<int, string> s_OnDeviceDiscoveredCallback; // 0x18
	
		// Properties
		internal static bool hasDeviceDiscoveredCallback { set; } // 0x00FB8570-0x00FB85B0
	
		// Constructors
		static NativeInputSystem(); // 0x00FB8534-0x00FB8570
	
		// Methods
		[RequiredByNativeCode] // 0x004F3E84-0x004F3E94
		internal static void NotifyBeforeUpdate(NativeInputUpdateType updateType); // 0x00FB85B0-0x00FB863C
		[RequiredByNativeCode] // 0x004F3E94-0x004F3EA4
		internal static void NotifyUpdate(NativeInputUpdateType updateType, IntPtr eventBuffer); // 0x00FB863C-0x00FB86E0
		[RequiredByNativeCode] // 0x004F3EA4-0x004F3EB4
		internal static void NotifyDeviceDiscovered(int deviceId, string deviceDescriptor); // 0x00FB893C-0x00FB89DC
		[RequiredByNativeCode] // 0x004F3EB4-0x004F3EC4
		internal static void ShouldRunUpdate(NativeInputUpdateType updateType, out bool retval); // 0x00FB89DC-0x00FB8A7C
	}
}

namespace UnityEngine
{
	[NativeHeader] // 0x004F5094-0x004F5150
	[NativeHeader] // 0x004F5094-0x004F5150
	[NativeHeader] // 0x004F5094-0x004F5150
	[StaticAccessor] // 0x004F5094-0x004F5150
	[UsedByNativeCode] // 0x004F5094-0x004F5150
	public sealed class Terrain : Behaviour // TypeDefIndex: 2560
	{
		// Properties
		public TerrainData terrainData { get; } // 0x00F9BF18-0x00F9BF58 
		public bool allowAutoConnect { get; } // 0x00F9B69C-0x00F9B6DC 
		public int groupingID { get; } // 0x00F9B6DC-0x00F9B71C 
		[NativeProperty] // 0x004F53B4-0x004F53EC
		public static Terrain[] activeTerrains { get; } // 0x00F9B230-0x00F9B264 
	
		// Constructors
		public Terrain(); // 0x00F9D0B0-0x00F9D0B8
	
		// Methods
		public void SetNeighbors(Terrain left, Terrain top, Terrain right, Terrain bottom); // 0x00F9B340-0x00F9B3B0
	}
}

namespace UnityEngine.Experimental.TerrainAPI
{
	public static class TerrainCallbacks // TypeDefIndex: 2561
	{
		// Fields
		[CompilerGenerated] // 0x004F51F0-0x004F522C
		[DebuggerBrowsable] // 0x004F51F0-0x004F522C
		private static HeightmapChangedCallback heightmapChanged; // 0x00
		[CompilerGenerated] // 0x004F522C-0x004F5268
		[DebuggerBrowsable] // 0x004F522C-0x004F5268
		private static TextureChangedCallback textureChanged; // 0x08
	
		// Nested types
		public delegate void HeightmapChangedCallback(Terrain terrain, RectInt heightRegion, bool synched); // TypeDefIndex: 2562; 0x00F9A630-0x00F9AA60
	
		public delegate void TextureChangedCallback(Terrain terrain, string textureName, RectInt texelRegion, bool synched); // TypeDefIndex: 2563; 0x00F9AB88-0x00F9B000
	
		// Methods
		[RequiredByNativeCode] // 0x004F5268-0x004F5278
		internal static void InvokeHeightmapChangedCallback(TerrainData terrainData, RectInt heightRegion, bool synched); // 0x00F9A4D8-0x00F9A5F0
		[RequiredByNativeCode] // 0x004F5278-0x004F5288
		internal static void InvokeTextureChangedCallback(TerrainData terrainData, string textureName, RectInt texelRegion, bool synched); // 0x00F9AA60-0x00F9AB88
	}
}

namespace UnityEngine
{
	[NativeHeader] // 0x004F5150-0x004F51C0
	[NativeHeader] // 0x004F5150-0x004F51C0
	[UsedByNativeCode] // 0x004F5150-0x004F51C0
	public sealed class TerrainData : UnityEngine.Object // TypeDefIndex: 2564
	{
		// Fields
		private static readonly int k_MaximumResolution; // 0x00
		private static readonly int k_MinimumDetailResolutionPerPatch; // 0x04
		private static readonly int k_MaximumDetailResolutionPerPatch; // 0x08
		private static readonly int k_MaximumDetailPatchCount; // 0x0C
		private static readonly int k_MinimumAlphamapResolution; // 0x10
		private static readonly int k_MaximumAlphamapResolution; // 0x14
		private static readonly int k_MinimumBaseMapResolution; // 0x18
		private static readonly int k_MaximumBaseMapResolution; // 0x1C
	
		// Properties
		public Vector3 size { [NativeName] /* 0x004F5310-0x004F5348 */ get; } // 0x00F9BF58-0x00F9BFB8 
		internal Terrain[] users { get; } // 0x00F9A5F0-0x00F9A630 
	
		// Nested types
		private enum BoundaryValueType // TypeDefIndex: 2565
		{
			MaxHeightmapRes = 0,
			MinDetailResPerPatch = 1,
			MaxDetailResPerPatch = 2,
			MaxDetailPatchCount = 3,
			MinAlphamapRes = 4,
			MaxAlphamapRes = 5,
			MinBaseMapRes = 6,
			MaxBaseMapRes = 7
		}
	
		// Constructors
		public TerrainData(); // 0x00F9D0B8-0x00F9D168
		static TerrainData(); // 0x00F9D278-0x00F9D440
	
		// Methods
		[StaticAccessor] // 0x004F5288-0x004F52D8
		[ThreadSafe] // 0x004F5288-0x004F52D8
		private static int GetBoundaryValue(BoundaryValueType type); // 0x00F9D1A8-0x00F9D1E8
		[FreeFunction] // 0x004F52D8-0x004F5310
		private static void Internal_Create([Writable] /* 0x004F53A4-0x004F53B4 */ TerrainData terrainData); // 0x00F9D168-0x00F9D1A8
		[NativeName] // 0x004F5348-0x004F5394
		[RequiredByNativeCode] // 0x004F5348-0x004F5394
		internal float GetAlphamapResolutionInternal(); // 0x00F9D238-0x00F9D278
		private void get_size_Injected(out Vector3 ret); // 0x00F9D1E8-0x00F9D238
	}
}

namespace UnityEngine.Experimental.TerrainAPI
{
	public static class TerrainUtility // TypeDefIndex: 2566
	{
		// Nested types
		public class TerrainMap // TypeDefIndex: 2567
		{
			// Fields
			private Vector3 m_patchSize; // 0x10
			public ErrorCode m_errorCode; // 0x1C
			public Dictionary<TileCoord, Terrain> m_terrainTiles; // 0x20
	
			// Nested types
			public delegate bool TerrainFilter(Terrain terrain); // TypeDefIndex: 2568; 0x00F9C27C-0x00F9C63C
	
			public struct TileCoord // TypeDefIndex: 2569
			{
				// Fields
				public readonly int tileX; // 0x00
				public readonly int tileZ; // 0x04
	
				// Constructors
				public TileCoord(int tileX, int tileZ); // 0x0059656C-0x005969C0
			}
	
			public enum ErrorCode // TypeDefIndex: 2570
			{
				OK = 0,
				Overlapping = 1,
				SizeMismatch = 4,
				EdgeAlignmentMismatch = 8
			}
	
			[CompilerGenerated] // 0x004F51C0-0x004F51D0
			private sealed class _CreateFromPlacement_c__AnonStorey0 // TypeDefIndex: 2571
			{
				// Fields
				internal int groupID; // 0x10
	
				// Constructors
				public _CreateFromPlacement_c__AnonStorey0(); // 0x00F9BF10-0x00F9BF18
	
				// Methods
				internal bool __m__0(Terrain x); // 0x00F9CFF8-0x00F9D060
			}
	
			// Constructors
			public TerrainMap(); // 0x00F9BE90-0x00F9BF10
	
			// Methods
			public Terrain GetTerrain(int tileX, int tileZ); // 0x00F9BD18-0x00F9BDA0
			public static TerrainMap CreateFromPlacement(Terrain originTerrain, TerrainFilter filter = null, bool fullValidation = true /* Metadata: 0x001F499E */); // 0x00F9B72C-0x00F9BA00
			public static TerrainMap CreateFromPlacement(Vector2 gridOrigin, Vector2 gridSize, TerrainFilter filter = null, bool fullValidation = true /* Metadata: 0x001F499F */); // 0x00F9BFB8-0x00F9C27C
			private void AddTerrainInternal(int x, int z, Terrain terrain); // 0x00F9C87C-0x00F9C9E0
			private bool TryToAddTerrain(int tileX, int tileZ, Terrain terrain); // 0x00F9C63C-0x00F9C770
			private void ValidateTerrain(int tileX, int tileZ); // 0x00F9C9E0-0x00F9CFF8
			private ErrorCode Validate(); // 0x00F9C770-0x00F9C87C
		}
	
		public class TerrainGroups : Dictionary<int, TerrainMap> // TypeDefIndex: 2572
		{
			// Constructors
			public TerrainGroups(); // 0x00F9B644-0x00F9B694
		}
	
		[CompilerGenerated] // 0x004F51D0-0x004F51E0
		private sealed class _CollectTerrains_c__AnonStorey1 // TypeDefIndex: 2573
		{
			// Fields
			internal bool onlyAutoConnectedTerrains; // 0x10
	
			// Constructors
			public _CollectTerrains_c__AnonStorey1(); // 0x00F9B63C-0x00F9B644
		}
	
		[CompilerGenerated] // 0x004F51E0-0x004F51F0
		private sealed class _CollectTerrains_c__AnonStorey0 // TypeDefIndex: 2574
		{
			// Fields
			internal Terrain t; // 0x10
			internal _CollectTerrains_c__AnonStorey1 __f__ref_1; // 0x18
	
			// Constructors
			public _CollectTerrains_c__AnonStorey0(); // 0x00F9B694-0x00F9B69C
	
			// Methods
			internal bool __m__0(Terrain x); // 0x00F9BDA0-0x00F9BE90
		}
	
		// Methods
		internal static bool HasValidTerrains(); // 0x00F9B1BC-0x00F9B230
		internal static void ClearConnectivity(); // 0x00F9B264-0x00F9B340
		internal static TerrainGroups CollectTerrains(bool onlyAutoConnectedTerrains = true /* Metadata: 0x001F499D */); // 0x00F9B3B0-0x00F9B63C
		[RequiredByNativeCode] // 0x004F5394-0x004F53A4
		public static void AutoConnect(); // 0x00F9BA00-0x00F9BD18
	}
}

namespace UnityEngine.Tilemaps
{
	[RequiredByNativeCode] // 0x004F65A8-0x004F65B8
	public class ITilemap // TypeDefIndex: 2576
	{
		// Fields
		internal static ITilemap s_Instance; // 0x00
		internal Tilemap m_Tilemap; // 0x10
	
		// Constructors
		internal ITilemap(); // 0x00FB5204-0x00FB520C
	
		// Methods
		public void RefreshTile(Vector3Int position); // 0x00FB520C-0x00FB5228
		[RequiredByNativeCode] // 0x004F6820-0x004F6830
		private static ITilemap CreateInstance(); // 0x00FB5280-0x00FB52F0
	}

	[Serializable]
	[RequiredByNativeCode] // 0x004F65B8-0x004F65C8
	public class Tile : TileBase // TypeDefIndex: 2577
	{
		// Fields
		[SerializeField] // 0x004F67C0-0x004F67D0
		private Sprite m_Sprite; // 0x18
		[SerializeField] // 0x004F67D0-0x004F67E0
		private Color m_Color; // 0x20
		[SerializeField] // 0x004F67E0-0x004F67F0
		private Matrix4x4 m_Transform; // 0x30
		[SerializeField] // 0x004F67F0-0x004F6800
		private GameObject m_InstancedGameObject; // 0x70
		[SerializeField] // 0x004F6800-0x004F6810
		private TileFlags m_Flags; // 0x78
		[SerializeField] // 0x004F6810-0x004F6820
		private ColliderType m_ColliderType; // 0x7C
	
		// Properties
		public Sprite sprite { get; set; } // 0x00FB53B0-0x00FB53B8 0x00FB53B8-0x00FB53C0
		public Color color { get; set; } // 0x00FB53C0-0x00FB53CC 0x00FB53CC-0x00FB53D8
		public Matrix4x4 transform { get; set; } // 0x00FB53D8-0x00FB53FC 0x00FB53FC-0x00FB5410
		public GameObject gameObject { get; set; } // 0x00FB5410-0x00FB5418 0x00FB5418-0x00FB5420
		public TileFlags flags { get; set; } // 0x00FB5420-0x00FB5428 0x00FB5428-0x00FB5430
		public ColliderType colliderType { get; set; } // 0x00FB5430-0x00FB5438 0x00FB5438-0x00FB5440
	
		// Nested types
		public enum ColliderType // TypeDefIndex: 2578
		{
			None = 0,
			Sprite = 1,
			Grid = 2
		}
	
		// Constructors
		public Tile(); // 0x00FB52F0-0x00FB53A8
	
		// Methods
		public override void GetTileData(Vector3Int position, ITilemap tilemap, ref TileData tileData); // 0x00FB5440-0x00FB54DC
	}

	[RequiredByNativeCode] // 0x004F65C8-0x004F65D8
	public abstract class TileBase : ScriptableObject // TypeDefIndex: 2579
	{
		// Constructors
		protected TileBase(); // 0x00FB53A8-0x00FB53B0
	
		// Methods
		[RequiredByNativeCode] // 0x004F6830-0x004F6840
		public virtual void RefreshTile(Vector3Int position, ITilemap tilemap); // 0x00FB54DC-0x00FB54FC
		[RequiredByNativeCode] // 0x004F6840-0x004F6850
		public virtual void GetTileData(Vector3Int position, ITilemap tilemap, ref TileData tileData); // 0x00FB54FC-0x00FB5500
		private TileData GetTileDataNoRef(Vector3Int position, ITilemap tilemap); // 0x00FB5500-0x00FB5584
		[RequiredByNativeCode] // 0x004F6850-0x004F6860
		public virtual bool GetTileAnimationData(Vector3Int position, ITilemap tilemap, ref TileAnimationData tileAnimationData); // 0x00FB5584-0x00FB558C
		private TileAnimationData GetTileAnimationDataNoRef(Vector3Int position, ITilemap tilemap); // 0x00FB558C-0x00FB55C0
		[RequiredByNativeCode] // 0x004F6860-0x004F6870
		public virtual bool StartUp(Vector3Int position, ITilemap tilemap, GameObject go); // 0x00FB55C0-0x00FB55C8
	}

	[NativeHeader] // 0x004F65D8-0x004F6714
	[NativeHeader] // 0x004F65D8-0x004F6714
	[NativeHeader] // 0x004F65D8-0x004F6714
	[NativeHeader] // 0x004F65D8-0x004F6714
	[NativeHeader] // 0x004F65D8-0x004F6714
	[NativeType] // 0x004F65D8-0x004F6714
	[RequireComponent] // 0x004F65D8-0x004F6714
	public sealed class Tilemap : GridLayout // TypeDefIndex: 2580
	{
		// Methods
		[NativeMethod] // 0x004F6870-0x004F68AC
		public void RefreshTile(Vector3Int position); // 0x00FB5228-0x00FB5280
		private void RefreshTile_Injected(ref Vector3Int position); // 0x00FB55C8-0x00FB5618
	}

	[Flags] // 0x004F6714-0x004F6724
	public enum TileFlags // TypeDefIndex: 2581
	{
		None = 0,
		LockColor = 1,
		LockTransform = 2,
		LockAll = 3,
		InstantiateGameObjectRuntimeOnly = 4
	}

	[NativeType] // 0x004F6724-0x004F6770
	[RequiredByNativeCode] // 0x004F6724-0x004F6770
	public struct TileData // TypeDefIndex: 2582
	{
		// Fields
		private Sprite m_Sprite; // 0x00
		private Color m_Color; // 0x08
		private Matrix4x4 m_Transform; // 0x18
		private GameObject m_GameObject; // 0x58
		private TileFlags m_Flags; // 0x60
		private Tile.ColliderType m_ColliderType; // 0x64
	
		// Properties
		public Sprite sprite { set; } // 0x0059A14C-0x0059A154
		public Color color { set; } // 0x0059A154-0x0059A160
		public Matrix4x4 transform { set; } // 0x0059A160-0x0059A17C
		public GameObject gameObject { set; } // 0x0059A17C-0x0059A184
		public TileFlags flags { set; } // 0x0059A184-0x0059A18C
		public Tile.ColliderType colliderType { set; } // 0x0059A18C-0x00608028
	}

	[NativeType] // 0x004F6770-0x004F67C0
	[RequiredByNativeCode] // 0x004F6770-0x004F67C0
	public struct TileAnimationData // TypeDefIndex: 2583
	{
		// Fields
		private Sprite[] m_AnimatedSprites; // 0x00
		private float m_AnimationSpeed; // 0x08
		private float m_AnimationStartTime; // 0x0C
	}
}

namespace UnityEngine.UI
{
	[Serializable]
	public class AnimationTriggers // TypeDefIndex: 2585
	{
		// Fields
		private const string kDefaultNormalAnimName = "Normal"; // Metadata: 0x001F49D0
		private const string kDefaultHighlightedAnimName = "Highlighted"; // Metadata: 0x001F49DA
		private const string kDefaultPressedAnimName = "Pressed"; // Metadata: 0x001F49E9
		private const string kDefaultSelectedAnimName = "Selected"; // Metadata: 0x001F49F4
		private const string kDefaultDisabledAnimName = "Disabled"; // Metadata: 0x001F4A00
		[FormerlySerializedAs] // 0x004F8A58-0x004F8AA4
		[SerializeField] // 0x004F8A58-0x004F8AA4
		private string m_NormalTrigger; // 0x10
		[FormerlySerializedAs] // 0x004F8AA4-0x004F8AF0
		[SerializeField] // 0x004F8AA4-0x004F8AF0
		private string m_HighlightedTrigger; // 0x18
		[FormerlySerializedAs] // 0x004F8AF0-0x004F8B3C
		[SerializeField] // 0x004F8AF0-0x004F8B3C
		private string m_PressedTrigger; // 0x20
		[FormerlySerializedAs] // 0x004F8B3C-0x004F8B88
		[SerializeField] // 0x004F8B3C-0x004F8B88
		private string m_SelectedTrigger; // 0x28
		[FormerlySerializedAs] // 0x004F8B88-0x004F8BD4
		[SerializeField] // 0x004F8B88-0x004F8BD4
		private string m_DisabledTrigger; // 0x30
	
		// Properties
		public string normalTrigger { get; } // 0x0096196C-0x00961974 
		public string highlightedTrigger { get; } // 0x00961974-0x0096197C 
		public string pressedTrigger { get; } // 0x0096197C-0x00961984 
		public string selectedTrigger { get; } // 0x00961984-0x0096198C 
		public string disabledTrigger { get; } // 0x0096198C-0x00961994 
	
		// Constructors
		public AnimationTriggers(); // 0x00961994-0x00961A2C
	}

	[AddComponentMenu] // 0x004F7A58-0x004F7A94
	public class Button : Selectable, IPointerClickHandler, ISubmitHandler // TypeDefIndex: 2586
	{
		// Fields
		[FormerlySerializedAs] // 0x004F8BD4-0x004F8C20
		[SerializeField] // 0x004F8BD4-0x004F8C20
		private ButtonClickedEvent m_OnClick; // 0xE8
	
		// Properties
		public ButtonClickedEvent onClick { get; set; } // 0x0096258C-0x00962594 0x00962594-0x0096259C
	
		// Nested types
		[Serializable]
		public class ButtonClickedEvent : UnityEvent // TypeDefIndex: 2587
		{
			// Constructors
			public ButtonClickedEvent(); // 0x00962584-0x0096258C
		}
	
		[CompilerGenerated] // 0x004F7A94-0x004F7AA4
		private sealed class _OnFinishSubmit_d__9 : IEnumerator<object> // TypeDefIndex: 2588
		{
			// Fields
			private int __1__state; // 0x10
			private object __2__current; // 0x18
			public Button __4__this; // 0x20
			private float _fadeTime_5__2; // 0x28
			private float _elapsedTime_5__3; // 0x2C
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x004FA964-0x004FA974 */ get; } // 0x00962850-0x00962858 
			object IEnumerator.Current { [DebuggerHidden] /* 0x004FA984-0x004FA994 */ get; } // 0x009628BC-0x009628C4 
	
			// Constructors
			[DebuggerHidden] // 0x004FA944-0x004FA954
			public _OnFinishSubmit_d__9(int __1__state); // 0x0096275C-0x00962788
	
			// Methods
			[DebuggerHidden] // 0x004FA954-0x004FA964
			void IDisposable.Dispose(); // 0x00962788-0x0096278C
			private bool MoveNext(); // 0x0096278C-0x00962850
			[DebuggerHidden] // 0x004FA974-0x004FA984
			void IEnumerator.Reset(); // 0x00962858-0x009628BC
		}
	
		// Constructors
		protected Button(); // 0x009624FC-0x00962584
	
		// Methods
		private void Press(); // 0x0096259C-0x0096263C
		public virtual void OnPointerClick(PointerEventData eventData); // 0x0096263C-0x00962660
		public virtual void OnSubmit(BaseEventData eventData); // 0x00962660-0x009626E8
		[IteratorStateMachine] // 0x004FA8E0-0x004FA944
		private IEnumerator OnFinishSubmit(); // 0x009626E8-0x0096275C
	}

	public enum CanvasUpdate // TypeDefIndex: 2589
	{
		Prelayout = 0,
		Layout = 1,
		PostLayout = 2,
		PreRender = 3,
		LatePreRender = 4,
		MaxUpdateValue = 5
	}

	public interface ICanvasElement // TypeDefIndex: 2590
	{
		// Properties
		Transform transform { get; }
	
		// Methods
		void Rebuild(CanvasUpdate executing);
		void LayoutComplete();
		void GraphicUpdateComplete();
		bool IsDestroyed();
	}

	public class CanvasUpdateRegistry // TypeDefIndex: 2591
	{
		// Fields
		private static CanvasUpdateRegistry s_Instance; // 0x00
		private bool m_PerformingLayoutUpdate; // 0x10
		private bool m_PerformingGraphicUpdate; // 0x11
		private readonly IndexedSet<ICanvasElement> m_LayoutRebuildQueue; // 0x18
		private readonly IndexedSet<ICanvasElement> m_GraphicRebuildQueue; // 0x20
		private static readonly Comparison<ICanvasElement> s_SortLayoutFunction; // 0x08
	
		// Properties
		public static CanvasUpdateRegistry instance { get; } // 0x0096323C-0x009632FC 
	
		// Constructors
		protected CanvasUpdateRegistry(); // 0x00963174-0x0096323C
		static CanvasUpdateRegistry(); // 0x009648E8-0x0096496C
	
		// Methods
		private bool ObjectValidForUpdate(ICanvasElement element); // 0x009632FC-0x009633DC
		private void CleanInvalidItems(); // 0x009633DC-0x009636D8
		private void PerformUpdate(); // 0x009636D8-0x00963E28
		private static int ParentCount(Transform child); // 0x00963FBC-0x0096409C
		private static int SortLayoutList(ICanvasElement x, ICanvasElement y); // 0x0096409C-0x0096420C
		public static void RegisterCanvasElementForLayoutRebuild(ICanvasElement element); // 0x0096420C-0x0096427C
		public static bool TryRegisterCanvasElementForLayoutRebuild(ICanvasElement element); // 0x00964318-0x00964388
		private bool InternalRegisterCanvasElementForLayoutRebuild(ICanvasElement element); // 0x0096427C-0x00964318
		public static void RegisterCanvasElementForGraphicRebuild(ICanvasElement element); // 0x00964388-0x009643F8
		private bool InternalRegisterCanvasElementForGraphicRebuild(ICanvasElement element); // 0x009643F8-0x009644C8
		public static void UnRegisterCanvasElementForRebuild(ICanvasElement element); // 0x009644C8-0x00964548
		private void InternalUnRegisterCanvasElementForLayoutRebuild(ICanvasElement element); // 0x00964548-0x009646AC
		private void InternalUnRegisterCanvasElementForGraphicRebuild(ICanvasElement element); // 0x009646AC-0x00964810
		public static bool IsRebuildingLayout(); // 0x00964810-0x0096487C
		public static bool IsRebuildingGraphics(); // 0x0096487C-0x009648E8
	}

	[Serializable]
	public struct ColorBlock : IEquatable<ColorBlock> // TypeDefIndex: 2592
	{
		// Fields
		[FormerlySerializedAs] // 0x004F8C20-0x004F8C6C
		[SerializeField] // 0x004F8C20-0x004F8C6C
		private Color m_NormalColor; // 0x00
		[FormerlySerializedAs] // 0x004F8C6C-0x004F8CB8
		[SerializeField] // 0x004F8C6C-0x004F8CB8
		private Color m_HighlightedColor; // 0x10
		[FormerlySerializedAs] // 0x004F8CB8-0x004F8D04
		[SerializeField] // 0x004F8CB8-0x004F8D04
		private Color m_PressedColor; // 0x20
		[FormerlySerializedAs] // 0x004F8D04-0x004F8D50
		[SerializeField] // 0x004F8D04-0x004F8D50
		private Color m_SelectedColor; // 0x30
		[FormerlySerializedAs] // 0x004F8D50-0x004F8D9C
		[SerializeField] // 0x004F8D50-0x004F8D9C
		private Color m_DisabledColor; // 0x40
		[Range] // 0x004F8D9C-0x004F8DDC
		[SerializeField] // 0x004F8D9C-0x004F8DDC
		private float m_ColorMultiplier; // 0x50
		[FormerlySerializedAs] // 0x004F8DDC-0x004F8E28
		[SerializeField] // 0x004F8DDC-0x004F8E28
		private float m_FadeDuration; // 0x54
	
		// Properties
		public Color normalColor { get; } // 0x00585150-0x0058515C 
		public Color highlightedColor { get; } // 0x0058515C-0x00585168 
		public Color pressedColor { get; } // 0x00585168-0x00585174 
		public Color selectedColor { get; } // 0x00585174-0x00585180 
		public Color disabledColor { get; } // 0x00585180-0x0058518C 
		public float colorMultiplier { get; set; } // 0x0058518C-0x00585194 0x00585194-0x0058519C
		public float fadeDuration { get; set; } // 0x0058519C-0x005851A4 0x005851A4-0x005851AC
		public static ColorBlock defaultColorBlock { get; } // 0x00964D1C-0x009650C8 
	
		// Methods
		public override bool Equals(object obj); // 0x005851AC-0x005851B4
		public bool Equals(ColorBlock other); // 0x005851B4-0x005851F4
		public override int GetHashCode(); // 0x005851F4-0x00585240
	}

	public class ClipperRegistry // TypeDefIndex: 2593
	{
		// Fields
		private static ClipperRegistry s_Instance; // 0x00
		private readonly IndexedSet<IClipper> m_Clippers; // 0x10
	
		// Properties
		public static ClipperRegistry instance { get; } // 0x00963E28-0x00963EA4 
	
		// Constructors
		protected ClipperRegistry(); // 0x0096496C-0x009649DC
	
		// Methods
		public void Cull(); // 0x00963EA4-0x00963FBC
		public static void Register(IClipper c); // 0x009649DC-0x00964A50
		public static void Unregister(IClipper c); // 0x00964A50-0x00964AB4
	}

	public static class Clipping // TypeDefIndex: 2594
	{
		// Methods
		public static Rect FindCullAndClipWorldRect(List<RectMask2D> rectMaskParents, out bool validRect); // 0x00964AB4-0x00964D1C
	}

	public interface IClipper // TypeDefIndex: 2595
	{
		// Methods
		void PerformClipping();
	}

	public interface IClippable // TypeDefIndex: 2596
	{
		// Properties
		GameObject gameObject { get; }
	
		// Methods
		void RecalculateClipping();
		void SetClipRect(Rect value, bool validRect);
	}

	internal class RectangularVertexClipper // TypeDefIndex: 2597
	{
		// Fields
		private readonly Vector3[] m_WorldCorners; // 0x10
		private readonly Vector3[] m_CanvasCorners; // 0x18
	
		// Constructors
		public RectangularVertexClipper(); // 0x00C56934-0x00C569A4
	
		// Methods
		public Rect GetCanvasRect(RectTransform t, Canvas c); // 0x00C566B0-0x00C56840
	}

	[AddComponentMenu] // 0x004F7AA4-0x004F7B30
	[RequireComponent] // 0x004F7AA4-0x004F7B30
	public class Dropdown : Selectable, IPointerClickHandler, ISubmitHandler, ICancelHandler // TypeDefIndex: 2598
	{
		// Fields
		[SerializeField] // 0x004F8E28-0x004F8E38
		private RectTransform m_Template; // 0xE8
		[SerializeField] // 0x004F8E38-0x004F8E48
		private Text m_CaptionText; // 0xF0
		[SerializeField] // 0x004F8E48-0x004F8E58
		private Image m_CaptionImage; // 0xF8
		[SerializeField] // 0x004F8E58-0x004F8E90
		[Space] // 0x004F8E58-0x004F8E90
		private Text m_ItemText; // 0x100
		[SerializeField] // 0x004F8E90-0x004F8EA0
		private Image m_ItemImage; // 0x108
		[SerializeField] // 0x004F8EA0-0x004F8ED8
		[Space] // 0x004F8EA0-0x004F8ED8
		private int m_Value; // 0x110
		[SerializeField] // 0x004F8ED8-0x004F8F10
		[Space] // 0x004F8ED8-0x004F8F10
		private OptionDataList m_Options; // 0x118
		[SerializeField] // 0x004F8F10-0x004F8F48
		[Space] // 0x004F8F10-0x004F8F48
		private DropdownEvent m_OnValueChanged; // 0x120
		[SerializeField] // 0x004F8F48-0x004F8F58
		private float m_AlphaFadeSpeed; // 0x128
		private GameObject m_Dropdown; // 0x130
		private GameObject m_Blocker; // 0x138
		private List<DropdownItem> m_Items; // 0x140
		private TweenRunner<FloatTween> m_AlphaTweenRunner; // 0x148
		private bool validTemplate; // 0x150
		private static OptionData s_NoOptionData; // 0x00
	
		// Properties
		public RectTransform template { get; set; } // 0x00965880-0x00965888 0x00965888-0x00965890
		public Text captionText { get; set; } // 0x00965A9C-0x00965AA4 0x00965AA4-0x00965AAC
		public Image captionImage { get; set; } // 0x00965AAC-0x00965AB4 0x00965AB4-0x00965ABC
		public Text itemText { get; set; } // 0x00965ABC-0x00965AC4 0x00965AC4-0x00965ACC
		public Image itemImage { get; set; } // 0x00965ACC-0x00965AD4 0x00965AD4-0x00965ADC
		public List<OptionData> options { get; set; } // 0x00965ADC-0x00965AFC 0x00965AFC-0x00965B1C
		public DropdownEvent onValueChanged { get; set; } // 0x00965B1C-0x00965B24 0x00965B24-0x00965B2C
		public float alphaFadeSpeed { get; set; } // 0x00965B2C-0x00965B34 0x00965B34-0x00965B3C
		public int value { get; set; } // 0x00965B3C-0x00965B44 0x00965B44-0x00965B4C
	
		// Nested types
		protected internal class DropdownItem : MonoBehaviour, IPointerEnterHandler, ICancelHandler // TypeDefIndex: 2599
		{
			// Fields
			[SerializeField] // 0x004F8F58-0x004F8F68
			private Text m_Text; // 0x18
			[SerializeField] // 0x004F8F68-0x004F8F78
			private Image m_Image; // 0x20
			[SerializeField] // 0x004F8F78-0x004F8F88
			private RectTransform m_RectTransform; // 0x28
			[SerializeField] // 0x004F8F88-0x004F8F98
			private Toggle m_Toggle; // 0x30
	
			// Properties
			public Text text { get; set; } // 0x009687E8-0x009687F0 0x009687F0-0x009687F8
			public Image image { get; set; } // 0x009687F8-0x00968800 0x00968800-0x00968808
			public RectTransform rectTransform { get; set; } // 0x00968808-0x00968810 0x00968810-0x00968818
			public Toggle toggle { get; set; } // 0x00968818-0x00968820 0x00968820-0x00968828
	
			// Constructors
			public DropdownItem(); // 0x00968968-0x00968970
	
			// Methods
			public virtual void OnPointerEnter(PointerEventData eventData); // 0x00968828-0x009688C0
			public virtual void OnCancel(BaseEventData eventData); // 0x009688C0-0x00968968
		}
	
		[Serializable]
		public class OptionData // TypeDefIndex: 2600
		{
			// Fields
			[SerializeField] // 0x004F8F98-0x004F8FA8
			private string m_Text; // 0x10
			[SerializeField] // 0x004F8FA8-0x004F8FB8
			private Sprite m_Image; // 0x18
	
			// Properties
			public string text { get; set; } // 0x00968970-0x00968978 0x00968978-0x00968980
			public Sprite image { get; set; } // 0x00968980-0x00968988 0x00968988-0x00968990
	
			// Constructors
			public OptionData(); // 0x0096868C-0x00968694
			public OptionData(string text); // 0x009662E0-0x0096630C
			public OptionData(Sprite image); // 0x009663FC-0x00966428
		}
	
		[Serializable]
		public class OptionDataList // TypeDefIndex: 2601
		{
			// Fields
			[SerializeField] // 0x004F8FB8-0x004F8FC8
			private List<OptionData> m_Options; // 0x10
	
			// Properties
			public List<OptionData> options { get; set; } // 0x00968990-0x00968998 0x00968998-0x009689A0
	
			// Constructors
			public OptionDataList(); // 0x00965D4C-0x00965DC0
		}
	
		[Serializable]
		public class DropdownEvent : UnityEvent<int> // TypeDefIndex: 2602
		{
			// Constructors
			public DropdownEvent(); // 0x00965DC0-0x00965E10
		}
	
		[CompilerGenerated] // 0x004F7B30-0x004F7B40
		private sealed class __c__DisplayClass62_0 // TypeDefIndex: 2603
		{
			// Fields
			public DropdownItem item; // 0x10
			public Dropdown __4__this; // 0x18
	
			// Constructors
			public __c__DisplayClass62_0(); // 0x009678FC-0x00967904
	
			// Methods
			internal void _Show_b__0(bool x); // 0x00968694-0x009686C0
		}
	
		[CompilerGenerated] // 0x004F7B40-0x004F7B50
		private sealed class _DelayedDestroyDropdownList_d__74 : IEnumerator<object> // TypeDefIndex: 2604
		{
			// Fields
			private int __1__state; // 0x10
			private object __2__current; // 0x18
			public float delay; // 0x20
			public Dropdown __4__this; // 0x28
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x004FAA18-0x004FAA28 */ get; } // 0x00968774-0x0096877C 
			object IEnumerator.Current { [DebuggerHidden] /* 0x004FAA38-0x004FAA48 */ get; } // 0x009687E0-0x009687E8 
	
			// Constructors
			[DebuggerHidden] // 0x004FA9F8-0x004FAA08
			public _DelayedDestroyDropdownList_d__74(int __1__state); // 0x009684A4-0x009684D0
	
			// Methods
			[DebuggerHidden] // 0x004FAA08-0x004FAA18
			void IDisposable.Dispose(); // 0x009686C0-0x009686C4
			private bool MoveNext(); // 0x009686C4-0x00968774
			[DebuggerHidden] // 0x004FAA28-0x004FAA38
			void IEnumerator.Reset(); // 0x0096877C-0x009687E0
		}
	
		// Constructors
		protected Dropdown(); // 0x00965C78-0x00965D4C
		static Dropdown(); // 0x00968620-0x0096868C
	
		// Methods
		public void SetValueWithoutNotify(int input); // 0x00965C70-0x00965C78
		private void Set(int value, bool sendCallback = true /* Metadata: 0x001F4A24 */); // 0x00965B4C-0x00965C70
		protected override void Awake(); // 0x00965E10-0x00965F60
		protected override void Start(); // 0x00965F60-0x00965F64
		protected override void OnDisable(); // 0x00965F64-0x00966008
		public void RefreshShownValue(); // 0x00965890-0x00965A9C
		public void AddOptions(List<OptionData> options); // 0x00966174-0x009661F0
		public void AddOptions(List<string> options); // 0x009661F0-0x009662E0
		public void AddOptions(List<Sprite> options); // 0x0096630C-0x009663FC
		public void ClearOptions(); // 0x00966428-0x00966498
		private void SetupTemplate(); // 0x00966498-0x00966B14
		private static T GetOrAddComponent<T>(GameObject go)
			where T : Component;
		public virtual void OnPointerClick(PointerEventData eventData); // 0x00966B14-0x00966B18
		public virtual void OnSubmit(BaseEventData eventData); // 0x009677D8-0x009677DC
		public virtual void OnCancel(BaseEventData eventData); // 0x009677DC-0x009677E0
		public void Show(); // 0x00966B18-0x009677D8
		protected virtual GameObject CreateBlocker(Canvas rootCanvas); // 0x00967CC4-0x0096812C
		protected virtual void DestroyBlocker(GameObject blocker); // 0x0096812C-0x00968194
		protected virtual GameObject CreateDropdownList(GameObject template); // 0x00968194-0x00968204
		protected virtual void DestroyDropdownList(GameObject dropdownList); // 0x00968204-0x0096826C
		protected virtual DropdownItem CreateItem(DropdownItem itemTemplate); // 0x0096826C-0x009682DC
		protected virtual void DestroyItem(DropdownItem item); // 0x009682DC-0x009682E0
		private DropdownItem AddItem(OptionData data, bool selected, DropdownItem itemTemplate, List<DropdownItem> items); // 0x00967904-0x00967BAC
		private void AlphaFadeList(float duration, float alpha); // 0x009682E0-0x00968368
		private void AlphaFadeList(float duration, float start, float end); // 0x00967BAC-0x00967CC4
		private void SetAlpha(float alpha); // 0x00968368-0x00968420
		public void Hide(); // 0x009677E0-0x009678FC
		[IteratorStateMachine] // 0x004FA994-0x004FA9F8
		private IEnumerator DelayedDestroyDropdownList(float delay); // 0x00968420-0x009684A4
		private void ImmediateDestroyDropdownList(); // 0x00966008-0x00966174
		private void OnSelectItem(Toggle toggle); // 0x009684D0-0x00968620
	}

	[Serializable]
	public class FontData : ISerializationCallbackReceiver // TypeDefIndex: 2605
	{
		// Fields
		[FormerlySerializedAs] // 0x004F8FC8-0x004F9014
		[SerializeField] // 0x004F8FC8-0x004F9014
		private Font m_Font; // 0x10
		[FormerlySerializedAs] // 0x004F9014-0x004F9060
		[SerializeField] // 0x004F9014-0x004F9060
		private int m_FontSize; // 0x18
		[FormerlySerializedAs] // 0x004F9060-0x004F90AC
		[SerializeField] // 0x004F9060-0x004F90AC
		private FontStyle m_FontStyle; // 0x1C
		[SerializeField] // 0x004F90AC-0x004F90BC
		private bool m_BestFit; // 0x20
		[SerializeField] // 0x004F90BC-0x004F90CC
		private int m_MinSize; // 0x24
		[SerializeField] // 0x004F90CC-0x004F90DC
		private int m_MaxSize; // 0x28
		[FormerlySerializedAs] // 0x004F90DC-0x004F9128
		[SerializeField] // 0x004F90DC-0x004F9128
		private TextAnchor m_Alignment; // 0x2C
		[SerializeField] // 0x004F9128-0x004F9138
		private bool m_AlignByGeometry; // 0x30
		[FormerlySerializedAs] // 0x004F9138-0x004F9184
		[SerializeField] // 0x004F9138-0x004F9184
		private bool m_RichText; // 0x31
		[SerializeField] // 0x004F9184-0x004F9194
		private HorizontalWrapMode m_HorizontalOverflow; // 0x34
		[SerializeField] // 0x004F9194-0x004F91A4
		private VerticalWrapMode m_VerticalOverflow; // 0x38
		[SerializeField] // 0x004F91A4-0x004F91B4
		private float m_LineSpacing; // 0x3C
	
		// Properties
		public static FontData defaultFontData { get; } // 0x009689A0-0x00968A38 
		public Font font { get; set; } // 0x00968A40-0x00968A48 0x00968A48-0x00968A50
		public int fontSize { get; set; } // 0x00968A50-0x00968A58 0x00968A58-0x00968A60
		public FontStyle fontStyle { get; set; } // 0x00968A60-0x00968A68 0x00968A68-0x00968A70
		public bool bestFit { get; set; } // 0x00968A70-0x00968A78 0x00968A78-0x00968A84
		public int minSize { get; set; } // 0x00968A84-0x00968A8C 0x00968A8C-0x00968A94
		public int maxSize { get; set; } // 0x00968A94-0x00968A9C 0x00968A9C-0x00968AA4
		public TextAnchor alignment { get; set; } // 0x00968AA4-0x00968AAC 0x00968AAC-0x00968AB4
		public bool alignByGeometry { get; set; } // 0x00968AB4-0x00968ABC 0x00968ABC-0x00968AC8
		public bool richText { get; set; } // 0x00968AC8-0x00968AD0 0x00968AD0-0x00968ADC
		public HorizontalWrapMode horizontalOverflow { get; set; } // 0x00968ADC-0x00968AE4 0x00968AE4-0x00968AEC
		public VerticalWrapMode verticalOverflow { get; set; } // 0x00968AEC-0x00968AF4 0x00968AF4-0x00968AFC
		public float lineSpacing { get; set; } // 0x00968AFC-0x00968B04 0x00968B04-0x00968B0C
	
		// Constructors
		public FontData(); // 0x00968A38-0x00968A40
	
		// Methods
		void ISerializationCallbackReceiver.OnBeforeSerialize(); // 0x00968B0C-0x00968B10
		void ISerializationCallbackReceiver.OnAfterDeserialize(); // 0x00968B10-0x00968BC8
	}

	public static class FontUpdateTracker // TypeDefIndex: 2606
	{
		// Fields
		private static Dictionary<Font, HashSet<Text>> m_Tracked; // 0x00
	
		// Constructors
		static FontUpdateTracker(); // 0x009690F8-0x0096916C
	
		// Methods
		public static void TrackText(Text t); // 0x00968BC8-0x00968DD8
		private static void RebuildForFont(Font f); // 0x00968DD8-0x00968F24
		public static void UntrackText(Text t); // 0x00968F24-0x009690F8
	}

	[DisallowMultipleComponent] // 0x004F7B50-0x004F7BFC
	[ExecuteAlways] // 0x004F7B50-0x004F7BFC
	[RequireComponent] // 0x004F7B50-0x004F7BFC
	[RequireComponent] // 0x004F7B50-0x004F7BFC
	public abstract class Graphic : UIBehaviour, ICanvasElement // TypeDefIndex: 2607
	{
		// Fields
		protected static Material s_DefaultUI; // 0x00
		protected static Texture2D s_WhiteTexture; // 0x08
		[FormerlySerializedAs] // 0x004F91B4-0x004F9200
		[SerializeField] // 0x004F91B4-0x004F9200
		protected Material m_Material; // 0x18
		[SerializeField] // 0x004F9200-0x004F9210
		private Color m_Color; // 0x20
		[NonSerialized]
		protected bool m_SkipLayoutUpdate; // 0x30
		[NonSerialized]
		protected bool m_SkipMaterialUpdate; // 0x31
		[SerializeField] // 0x004F9210-0x004F9220
		private bool m_RaycastTarget; // 0x32
		[NonSerialized]
		private RectTransform m_RectTransform; // 0x38
		[NonSerialized]
		private CanvasRenderer m_CanvasRenderer; // 0x40
		[NonSerialized]
		private Canvas m_Canvas; // 0x48
		[NonSerialized]
		private bool m_VertsDirty; // 0x50
		[NonSerialized]
		private bool m_MaterialDirty; // 0x51
		[NonSerialized]
		protected UnityAction m_OnDirtyLayoutCallback; // 0x58
		[NonSerialized]
		protected UnityAction m_OnDirtyVertsCallback; // 0x60
		[NonSerialized]
		protected UnityAction m_OnDirtyMaterialCallback; // 0x68
		[NonSerialized]
		protected static Mesh s_Mesh; // 0x10
		[NonSerialized]
		private static readonly VertexHelper s_VertexHelper; // 0x18
		[NonSerialized]
		protected Mesh m_CachedMesh; // 0x70
		[NonSerialized]
		protected Vector2[] m_CachedUvs; // 0x78
		[NonSerialized]
		private readonly TweenRunner<ColorTween> m_ColorTweenRunner; // 0x80
		[CompilerGenerated] // 0x004F9220-0x004F9230
		private bool _useLegacyMeshGeneration_k__BackingField; // 0x88
	
		// Properties
		public static Material defaultGraphicMaterial { get; } // 0x0096916C-0x00969264 
		public virtual Color color { get; set; } // 0x00969264-0x00969270 0x00969270-0x009692B8
		public virtual bool raycastTarget { get; set; } // 0x009692B8-0x009692C0 0x009692C0-0x009692CC
		protected bool useLegacyMeshGeneration { [CompilerGenerated] /* 0x004FAA48-0x004FAA58 */ get; [CompilerGenerated] /* 0x004FAA58-0x004FAA68 */ set; } // 0x009692CC-0x009692D4 0x009692D4-0x009692E0
		public int depth { get; } // 0x00969A54-0x00969A74 
		public RectTransform rectTransform { get; } // 0x009694AC-0x0096950C 
		public Canvas canvas { get; } // 0x009697B8-0x0096983C 
		public CanvasRenderer canvasRenderer { get; } // 0x00969A74-0x00969AD4 
		public virtual Material defaultMaterial { get; } // 0x00969AD4-0x00969B30 
		public virtual Material material { get; set; } // 0x00969B30-0x00969BC8 0x00969BC8-0x00969C70
		public virtual Material materialForRendering { get; } // 0x00969C70-0x00969E74 
		public virtual Texture mainTexture { get; } // 0x00969E74-0x00969EDC 
		protected static Mesh workerMesh { get; } // 0x0096AD04-0x0096AE48 
		Transform ICanvasElement.transform { get; } // 0x0096BE60-0x0096BE68 
	
		// Constructors
		protected Graphic(); // 0x009692E0-0x00969390
		static Graphic(); // 0x0096BDDC-0x0096BE60
	
		// Methods
		public virtual void SetAllDirty(); // 0x00969390-0x00969404
		public virtual void SetLayoutDirty(); // 0x00969404-0x009694AC
		public virtual void SetVerticesDirty(); // 0x0096950C-0x009695A8
		public virtual void SetMaterialDirty(); // 0x009695A8-0x00969644
		protected override void OnRectTransformDimensionsChange(); // 0x00969644-0x00969700
		protected override void OnBeforeTransformParentChanged(); // 0x00969700-0x009697B8
		protected override void OnTransformParentChanged(); // 0x0096983C-0x009698F8
		private void CacheCanvas(); // 0x009698F8-0x00969A54
		protected override void OnEnable(); // 0x00969EDC-0x0096A014
		protected override void OnDisable(); // 0x0096A014-0x0096A150
		protected override void OnDestroy(); // 0x0096A150-0x0096A1F8
		protected override void OnCanvasHierarchyChanged(); // 0x0096A1F8-0x0096A324
		public virtual void OnCullingChanged(); // 0x0096A324-0x0096A3C0
		public virtual void Rebuild(CanvasUpdate update); // 0x0096A3C0-0x0096A4B4
		public virtual void LayoutComplete(); // 0x0096A4B4-0x0096A4B8
		public virtual void GraphicUpdateComplete(); // 0x0096A4B8-0x0096A4BC
		protected virtual void UpdateMaterial(); // 0x0096A4BC-0x0096A580
		protected virtual void UpdateGeometry(); // 0x0096A580-0x0096A590
		private void DoMeshGeneration(); // 0x0096A930-0x0096AD04
		private void DoLegacyMeshGeneration(); // 0x0096A590-0x0096A930
		[EditorBrowsable] // 0x004FAA68-0x004FAABC
		[Obsolete] // 0x004FAA68-0x004FAABC
		protected virtual void OnFillVBO(List<UIVertex> vbo); // 0x0096AE48-0x0096AE4C
		[Obsolete] // 0x004FAABC-0x004FAAF8
		protected virtual void OnPopulateMesh(Mesh m); // 0x0096AE4C-0x0096AEF4
		protected virtual void OnPopulateMesh(VertexHelper vh); // 0x0096AEF4-0x0096B160
		protected override void OnDidApplyAnimationProperties(); // 0x0096B298-0x0096B2A8
		public virtual void SetNativeSize(); // 0x0096B2A8-0x0096B2AC
		public virtual bool Raycast(Vector2 sp, Camera eventCamera); // 0x0096B2AC-0x0096B65C
		public Vector2 PixelAdjustPoint(Vector2 point); // 0x0096B65C-0x0096B7A8
		public Rect GetPixelAdjustedRect(); // 0x0096B160-0x0096B298
		public virtual void CrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha); // 0x0096B7A8-0x0096B7C4
		public virtual void CrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha, bool useRGB); // 0x0096B7C4-0x0096BA0C
		private static Color CreateColorFromAlpha(float alpha); // 0x0096BA0C-0x0096BA34
		public virtual void CrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale); // 0x0096BA34-0x0096BADC
		public void RegisterDirtyLayoutCallback(UnityAction action); // 0x0096BADC-0x0096BB5C
		public void UnregisterDirtyLayoutCallback(UnityAction action); // 0x0096BB5C-0x0096BBDC
		public void RegisterDirtyVerticesCallback(UnityAction action); // 0x0096BBDC-0x0096BC5C
		public void UnregisterDirtyVerticesCallback(UnityAction action); // 0x0096BC5C-0x0096BCDC
		public void RegisterDirtyMaterialCallback(UnityAction action); // 0x0096BCDC-0x0096BD5C
		public void UnregisterDirtyMaterialCallback(UnityAction action); // 0x0096BD5C-0x0096BDDC
	}

	[AddComponentMenu] // 0x004F7BFC-0x004F7C84
	[RequireComponent] // 0x004F7BFC-0x004F7C84
	public class GraphicRaycaster : BaseRaycaster // TypeDefIndex: 2608
	{
		// Fields
		protected const int kNoEventMaskSet = -1; // Metadata: 0x001F4A25
		[FormerlySerializedAs] // 0x004F9230-0x004F927C
		[SerializeField] // 0x004F9230-0x004F927C
		private bool m_IgnoreReversedGraphics; // 0x20
		[FormerlySerializedAs] // 0x004F927C-0x004F92C8
		[SerializeField] // 0x004F927C-0x004F92C8
		private BlockingObjects m_BlockingObjects; // 0x24
		[SerializeField] // 0x004F92C8-0x004F92D8
		protected LayerMask m_BlockingMask; // 0x28
		private Canvas m_Canvas; // 0x30
		[NonSerialized]
		private List<Graphic> m_RaycastResults; // 0x38
		[NonSerialized]
		private static readonly List<Graphic> s_SortedGraphics; // 0x00
	
		// Properties
		public override int sortOrderPriority { get; } // 0x0096BE68-0x0096BEBC 
		public override int renderOrderPriority { get; } // 0x0096BF54-0x0096BFB4 
		public bool ignoreReversedGraphics { get; set; } // 0x0096BFB4-0x0096BFBC 0x0096BFBC-0x0096BFC8
		public BlockingObjects blockingObjects { get; set; } // 0x0096BFC8-0x0096BFD0 0x0096BFD0-0x0096BFD8
		private Canvas canvas { get; } // 0x0096BEBC-0x0096BF54 
		public override Camera eventCamera { get; } // 0x0096D2DC-0x0096D424 
	
		// Nested types
		public enum BlockingObjects // TypeDefIndex: 2609
		{
			None = 0,
			TwoD = 1,
			ThreeD = 2,
			All = 3
		}
	
		[Serializable]
		[CompilerGenerated] // 0x004F7C84-0x004F7C94
		private sealed class __c // TypeDefIndex: 2610
		{
			// Fields
			public static readonly __c __9; // 0x00
			public static Comparison<Graphic> __9__24_0; // 0x08
	
			// Constructors
			static __c(); // 0x00B139FC-0x00B13A60
			public __c(); // 0x00B13A60-0x00B13A68
	
			// Methods
			internal int _Raycast_b__24_0(Graphic g1, Graphic g2); // 0x00B13A68-0x00B13AC4
		}
	
		// Constructors
		protected GraphicRaycaster(); // 0x0096BFD8-0x0096C060
		static GraphicRaycaster(); // 0x0096D424-0x0096FB34
	
		// Methods
		public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList); // 0x0096C060-0x0096CE2C
		private static void Raycast(Canvas canvas, Camera eventCamera, Vector2 pointerPosition, IList<Graphic> foundGraphics, List<Graphic> results); // 0x0096CE2C-0x0096D2DC
	}

	public class GraphicRegistry // TypeDefIndex: 2611
	{
		// Fields
		private static GraphicRegistry s_Instance; // 0x00
		private readonly Dictionary<Canvas, IndexedSet<Graphic>> m_Graphics; // 0x10
		private static readonly List<Graphic> s_EmptyList; // 0x08
	
		// Properties
		public static GraphicRegistry instance { get; } // 0x00B13BE4-0x00B13CA4 
	
		// Constructors
		protected GraphicRegistry(); // 0x00B13AC4-0x00B13BE4
		static GraphicRegistry(); // 0x00B14038-0x00B140AC
	
		// Methods
		public static void RegisterGraphicForCanvas(Canvas c, Graphic graphic); // 0x00B13CA4-0x00B13E28
		public static void UnregisterGraphicForCanvas(Canvas c, Graphic graphic); // 0x00B13E28-0x00B13F70
		public static IList<Graphic> GetGraphicsForCanvas(Canvas canvas); // 0x00B13F70-0x00B14038
	}

	[AddComponentMenu] // 0x004F7C94-0x004F7CD0
	public class Image : MaskableGraphic, ISerializationCallbackReceiver, ILayoutElement, ICanvasRaycastFilter // TypeDefIndex: 2612
	{
		// Fields
		protected static Material s_ETC1DefaultUI; // 0x00
		[FormerlySerializedAs] // 0x004F92D8-0x004F9324
		[SerializeField] // 0x004F92D8-0x004F9324
		private Sprite m_Sprite; // 0xC0
		[NonSerialized]
		private Sprite m_OverrideSprite; // 0xC8
		[SerializeField] // 0x004F9324-0x004F9334
		private Type m_Type; // 0xD0
		[SerializeField] // 0x004F9334-0x004F9344
		private bool m_PreserveAspect; // 0xD4
		[SerializeField] // 0x004F9344-0x004F9354
		private bool m_FillCenter; // 0xD5
		[SerializeField] // 0x004F9354-0x004F9364
		private FillMethod m_FillMethod; // 0xD8
		[Range] // 0x004F9364-0x004F93A4
		[SerializeField] // 0x004F9364-0x004F93A4
		private float m_FillAmount; // 0xDC
		[SerializeField] // 0x004F93A4-0x004F93B4
		private bool m_FillClockwise; // 0xE0
		[SerializeField] // 0x004F93B4-0x004F93C4
		private int m_FillOrigin; // 0xE4
		private float m_AlphaHitTestMinimumThreshold; // 0xE8
		private bool m_Tracked; // 0xEC
		[SerializeField] // 0x004F93C4-0x004F93D4
		private bool m_UseSpriteMesh; // 0xED
		[SerializeField] // 0x004F93D4-0x004F93E4
		private float m_PixelsPerUnitMultiplier; // 0xF0
		private float m_CachedReferencePixelsPerUnit; // 0xF4
		private static readonly Vector2[] s_VertScratch; // 0x08
		private static readonly Vector2[] s_UVScratch; // 0x10
		private static readonly Vector3[] s_Xy; // 0x18
		private static readonly Vector3[] s_Uv; // 0x20
		private static List<Image> m_TrackedTexturelessImages; // 0x28
		private static bool s_Initialized; // 0x30
	
		// Properties
		public Sprite sprite { get; set; } // 0x00B16674-0x00B1667C 0x00B1667C-0x00B16994
		public Sprite overrideSprite { get; set; } // 0x00B16AA4-0x00B16AA8 0x00B16B38-0x00B16BC8
		private Sprite activeSprite { get; } // 0x00B16AA8-0x00B16B38 
		public Type type { get; set; } // 0x00B16BC8-0x00B16BD0 0x00B16BD0-0x00B16C58
		public bool preserveAspect { get; set; } // 0x00B16C58-0x00B16C60 0x00B16C60-0x00B16CE8
		public bool fillCenter { get; set; } // 0x00B16CE8-0x00B16CF0 0x00B16CF0-0x00B16D78
		public FillMethod fillMethod { get; set; } // 0x00B16D78-0x00B16D80 0x00B16D80-0x00B16E00
		public float fillAmount { get; set; } // 0x00B16E00-0x00B16E08 0x00B16E08-0x00B16EBC
		public bool fillClockwise { get; set; } // 0x00B16EBC-0x00B16EC4 0x00B16EC4-0x00B16F4C
		public int fillOrigin { get; set; } // 0x00B16F4C-0x00B16F54 0x00B16F54-0x00B16FDC
		[Obsolete] // 0x004FB284-0x004FB2BC
		public float eventAlphaThreshold { get; set; } // 0x00B16FDC-0x00B16FEC 0x00B16FEC-0x00B16FFC
		public float alphaHitTestMinimumThreshold { get; set; } // 0x00B16FFC-0x00B17004 0x00B17004-0x00B1700C
		public bool useSpriteMesh { get; set; } // 0x00B1700C-0x00B17014 0x00B17014-0x00B1709C
		public static Material defaultETC1GraphicMaterial { get; } // 0x00B1719C-0x00B17294 
		public override Texture mainTexture { get; } // 0x00B17294-0x00B17430 
		public bool hasBorder { get; } // 0x00B17430-0x00B174FC 
		public float pixelsPerUnitMultiplier { get; set; } // 0x00B174FC-0x00B17504 0x00B17504-0x00B17588
		public float pixelsPerUnit { get; } // 0x00B17588-0x00B176A4 
		protected float multipliedPixelsPerUnit { get; } // 0x00B176A4-0x00B176CC 
		public override Material material { get; set; } // 0x00B176CC-0x00B17824 0x00B17824-0x00B1782C
		public virtual float minWidth { get; } // 0x00B1C6FC-0x00B1C704 
		public virtual float preferredWidth { get; } // 0x00B1C704-0x00B1C7F8 
		public virtual float flexibleWidth { get; } // 0x00B1C7F8-0x00B1C800 
		public virtual float minHeight { get; } // 0x00B1C800-0x00B1C808 
		public virtual float preferredHeight { get; } // 0x00B1C808-0x00B1C8FC 
		public virtual float flexibleHeight { get; } // 0x00B1C8FC-0x00B1C904 
		public virtual int layoutPriority { get; } // 0x00B1C904-0x00B1C90C 
	
		// Nested types
		public enum Type // TypeDefIndex: 2613
		{
			Simple = 0,
			Sliced = 1,
			Tiled = 2,
			Filled = 3
		}
	
		public enum FillMethod // TypeDefIndex: 2614
		{
			Horizontal = 0,
			Vertical = 1,
			Radial90 = 2,
			Radial180 = 3,
			Radial360 = 4
		}
	
		// Constructors
		protected Image(); // 0x00B1709C-0x00B170E4
		static Image(); // 0x00B1D308-0x00B1D3F8
	
		// Methods
		public void DisableSpriteOptimizations(); // 0x00B16A9C-0x00B16AA4
		public virtual void OnBeforeSerialize(); // 0x00B1782C-0x00B17830
		public virtual void OnAfterDeserialize(); // 0x00B17830-0x00B178EC
		private void PreserveSpriteAspectRatio(ref Rect rect, Vector2 spriteSize); // 0x00B178EC-0x00B17A50
		private Vector4 GetDrawingDimensions(bool shouldPreserveAspect); // 0x00B17A50-0x00B17DC4
		public override void SetNativeSize(); // 0x00B17DC4-0x00B17F70
		protected override void OnRectTransformDimensionsChange(); // 0x00B17F70-0x00B17F98
		protected override void OnTransformParentChanged(); // 0x00B17F98-0x00B17FBC
		protected override void OnPopulateMesh(VertexHelper toFill); // 0x00B1801C-0x00B18170
		private void TrackSprite(); // 0x00B16994-0x00B16A9C
		protected override void OnEnable(); // 0x00B1B4C8-0x00B1B4EC
		protected override void OnDisable(); // 0x00B1B5BC-0x00B1B63C
		protected override void UpdateMaterial(); // 0x00B1B7C4-0x00B1B8E8
		protected override void OnCanvasHierarchyChanged(); // 0x00B1B8E8-0x00B1BA08
		private void GenerateSimpleSprite(VertexHelper vh, bool lPreserveAspect); // 0x00B18170-0x00B184C4
		private void GenerateSprite(VertexHelper vh, bool lPreserveAspect); // 0x00B184C4-0x00B188FC
		private void GenerateSlicedSprite(VertexHelper toFill); // 0x00B188FC-0x00B19060
		private void GenerateTiledSprite(VertexHelper toFill); // 0x00B19060-0x00B1A500
		private static void AddQuad(VertexHelper vertexHelper, Vector3[] quadPositions, Color32 color, Vector3[] quadUVs); // 0x00B1BE78-0x00B1C008
		private static void AddQuad(VertexHelper vertexHelper, Vector2 posMin, Vector2 posMax, Color32 color, Vector2 uvMin, Vector2 uvMax); // 0x00B1BC68-0x00B1BE78
		private Vector4 GetAdjustedBorders(Vector4 border, Rect adjustedRect); // 0x00B1BA68-0x00B1BC68
		private void GenerateFilledSprite(VertexHelper toFill, bool preserveAspect); // 0x00B1A500-0x00B1B390
		private static bool RadialCut(Vector3[] xy, Vector3[] uv, float fill, bool invert, int corner); // 0x00B1C008-0x00B1C174
		private static void RadialCut(Vector3[] xy, float cos, float sin, bool invert, int corner); // 0x00B1C174-0x00B1C6F4
		public virtual void CalculateLayoutInputHorizontal(); // 0x00B1C6F4-0x00B1C6F8
		public virtual void CalculateLayoutInputVertical(); // 0x00B1C6F8-0x00B1C6FC
		public virtual bool IsRaycastLocationValid(Vector2 screenPoint, Camera eventCamera); // 0x00B1C90C-0x00B1CCB8
		private Vector2 MapCoordinate(Vector2 local, Rect rect); // 0x00B1CCB8-0x00B1D1A8
		private static void RebuildImage(SpriteAtlas spriteAtlas); // 0x00B1D1A8-0x00B1D308
		private static void TrackImage(Image g); // 0x00B1B390-0x00B1B4C8
		private static void UnTrackImage(Image g); // 0x00B1B740-0x00B1B7C4
	}

	public interface IMaskable // TypeDefIndex: 2615
	{
		// Methods
		void RecalculateMasking();
	}

	[AddComponentMenu] // 0x004F7CD0-0x004F7D0C
	public class InputField : Selectable, IUpdateSelectedHandler, IBeginDragHandler, IDragHandler, IEndDragHandler, IPointerClickHandler, ISubmitHandler, ICanvasElement, ILayoutElement // TypeDefIndex: 2616
	{
		// Fields
		protected TouchScreenKeyboard m_Keyboard; // 0xE8
		private static readonly char[] kSeparators; // 0x00
		[FormerlySerializedAs] // 0x004F93E4-0x004F9430
		[SerializeField] // 0x004F93E4-0x004F9430
		protected Text m_TextComponent; // 0xF0
		[SerializeField] // 0x004F9430-0x004F9440
		protected Graphic m_Placeholder; // 0xF8
		[SerializeField] // 0x004F9440-0x004F9450
		private ContentType m_ContentType; // 0x100
		[FormerlySerializedAs] // 0x004F9450-0x004F949C
		[SerializeField] // 0x004F9450-0x004F949C
		private InputType m_InputType; // 0x104
		[FormerlySerializedAs] // 0x004F949C-0x004F94E8
		[SerializeField] // 0x004F949C-0x004F94E8
		private char m_AsteriskChar; // 0x108
		[FormerlySerializedAs] // 0x004F94E8-0x004F9534
		[SerializeField] // 0x004F94E8-0x004F9534
		private TouchScreenKeyboardType m_KeyboardType; // 0x10C
		[SerializeField] // 0x004F9534-0x004F9544
		private LineType m_LineType; // 0x110
		[FormerlySerializedAs] // 0x004F9544-0x004F9590
		[SerializeField] // 0x004F9544-0x004F9590
		private bool m_HideMobileInput; // 0x114
		[FormerlySerializedAs] // 0x004F9590-0x004F95DC
		[SerializeField] // 0x004F9590-0x004F95DC
		private CharacterValidation m_CharacterValidation; // 0x118
		[FormerlySerializedAs] // 0x004F95DC-0x004F9628
		[SerializeField] // 0x004F95DC-0x004F9628
		private int m_CharacterLimit; // 0x11C
		[FormerlySerializedAs] // 0x004F9628-0x004F96BC
		[FormerlySerializedAs] // 0x004F9628-0x004F96BC
		[FormerlySerializedAs] // 0x004F9628-0x004F96BC
		[SerializeField] // 0x004F9628-0x004F96BC
		private SubmitEvent m_OnEndEdit; // 0x120
		[FormerlySerializedAs] // 0x004F96BC-0x004F972C
		[FormerlySerializedAs] // 0x004F96BC-0x004F972C
		[SerializeField] // 0x004F96BC-0x004F972C
		private OnChangeEvent m_OnValueChanged; // 0x128
		[FormerlySerializedAs] // 0x004F972C-0x004F9778
		[SerializeField] // 0x004F972C-0x004F9778
		private OnValidateInput m_OnValidateInput; // 0x130
		[FormerlySerializedAs] // 0x004F9778-0x004F97C4
		[SerializeField] // 0x004F9778-0x004F97C4
		private Color m_CaretColor; // 0x138
		[SerializeField] // 0x004F97C4-0x004F97D4
		private bool m_CustomCaretColor; // 0x148
		[SerializeField] // 0x004F97D4-0x004F97E4
		private Color m_SelectionColor; // 0x14C
		[FormerlySerializedAs] // 0x004F97E4-0x004F9830
		[SerializeField] // 0x004F97E4-0x004F9830
		protected string m_Text; // 0x160
		[Range] // 0x004F9830-0x004F9870
		[SerializeField] // 0x004F9830-0x004F9870
		private float m_CaretBlinkRate; // 0x168
		[Range] // 0x004F9870-0x004F98B0
		[SerializeField] // 0x004F9870-0x004F98B0
		private int m_CaretWidth; // 0x16C
		[SerializeField] // 0x004F98B0-0x004F98C0
		private bool m_ReadOnly; // 0x170
		protected int m_CaretPosition; // 0x174
		protected int m_CaretSelectPosition; // 0x178
		private RectTransform caretRectTrans; // 0x180
		protected UIVertex[] m_CursorVerts; // 0x188
		private TextGenerator m_InputTextCache; // 0x190
		private CanvasRenderer m_CachedInputRenderer; // 0x198
		private bool m_PreventFontCallback; // 0x1A0
		[NonSerialized]
		protected Mesh m_Mesh; // 0x1A8
		private bool m_AllowInput; // 0x1B0
		private bool m_ShouldActivateNextUpdate; // 0x1B1
		private bool m_UpdateDrag; // 0x1B2
		private bool m_DragPositionOutOfBounds; // 0x1B3
		private const float kHScrollSpeed = 0.05f; // Metadata: 0x001F4A5E
		private const float kVScrollSpeed = 0.1f; // Metadata: 0x001F4A62
		protected bool m_CaretVisible; // 0x1B4
		private Coroutine m_BlinkCoroutine; // 0x1B8
		private float m_BlinkStartTime; // 0x1C0
		protected int m_DrawStart; // 0x1C4
		protected int m_DrawEnd; // 0x1C8
		private Coroutine m_DragCoroutine; // 0x1D0
		private string m_OriginalText; // 0x1D8
		private bool m_WasCanceled; // 0x1E0
		private bool m_HasDoneFocusTransition; // 0x1E1
		private WaitForSecondsRealtime m_WaitForSecondsRealtime; // 0x1E8
		private bool m_TouchKeyboardAllowsInPlaceEditing; // 0x1F0
		private const string kEmailSpecialCharacters = "!#$%&\'*+-/=?^_`{|}~"; // Metadata: 0x001F4A66
		private Event m_ProcessingEvent; // 0x1F8
		private const int k_MaxTextLength = 16382; // Metadata: 0x001F4A7D
	
		// Properties
		private BaseInput input { get; } // 0x00B1D3F8-0x00B1D538 
		private string compositionString { get; } // 0x00B1D538-0x00B1D5DC 
		protected Mesh mesh { get; } // 0x00B1D8CC-0x00B1D970 
		protected TextGenerator cachedInputTextGenerator { get; } // 0x00B1D970-0x00B1D9DC 
		public bool shouldHideMobileInput { get; set; } // 0x00B1DA3C-0x00B1DA90 0x00B1D9DC-0x00B1DA3C
		private bool shouldActivateOnSelect { get; } // 0x00B1DA90-0x00B1DAB0 
		public string text { get; set; } // 0x00B1DAB0-0x00B1DAB8 0x00B1DAB8-0x00B1DAC0
		public bool isFocused { get; } // 0x00B1E600-0x00B1E608 
		public float caretBlinkRate { get; set; } // 0x00B1E608-0x00B1E610 0x00B1E610-0x00B1E694
		public int caretWidth { get; set; } // 0x00B1E6F4-0x00B1E6FC 0x00B1E6FC-0x00B1E778
		public Text textComponent { get; set; } // 0x00B1E7E0-0x00B1E7E8 0x00B1E7E8-0x00B1EA68
		public Graphic placeholder { get; set; } // 0x00B1EA68-0x00B1EA70 0x00B1EA70-0x00B1EAD0
		public Color caretColor { get; set; } // 0x00B1EAD0-0x00B1EB10 0x00B1EB10-0x00B1EB4C
		public bool customCaretColor { get; set; } // 0x00B1EB4C-0x00B1EB54 0x00B1EB54-0x00B1EB78
		public Color selectionColor { get; set; } // 0x00B1EB78-0x00B1EB8C 0x00B1EB8C-0x00B1EBC8
		public SubmitEvent onEndEdit { get; set; } // 0x00B1EBC8-0x00B1EBD0 0x00B1EBD0-0x00B1EC30
		[Obsolete] // 0x004FB2BC-0x004FB2F4
		public OnChangeEvent onValueChange { get; set; } // 0x00B1EC30-0x00B1EC38 0x00B1EC38-0x00B1EC3C
		public OnChangeEvent onValueChanged { get; set; } // 0x00B1EC9C-0x00B1ECA4 0x00B1EC3C-0x00B1EC9C
		public OnValidateInput onValidateInput { get; set; } // 0x00B1ECA4-0x00B1ECAC 0x00B1ECAC-0x00B1ED0C
		public int characterLimit { get; set; } // 0x00B1ED0C-0x00B1ED14 0x00B1ED14-0x00B1EDD8
		public ContentType contentType { get; set; } // 0x00B1EDD8-0x00B1EDE0 0x00B1EDE0-0x00B1EE5C
		public LineType lineType { get; set; } // 0x00B1EF28-0x00B1EF30 0x00B1EF30-0x00B1EFFC
		public InputType inputType { get; set; } // 0x00B1F074-0x00B1F07C 0x00B1F07C-0x00B1F108
		public TouchScreenKeyboard touchScreenKeyboard { get; } // 0x00B1F120-0x00B1F128 
		public TouchScreenKeyboardType keyboardType { get; set; } // 0x00B1F128-0x00B1F130 0x00B1F130-0x00B1F1BC
		public CharacterValidation characterValidation { get; set; } // 0x00B1F1BC-0x00B1F1C4 0x00B1F1C4-0x00B1F250
		public bool readOnly { get; set; } // 0x00B1F250-0x00B1F258 0x00B1F258-0x00B1F264
		public bool multiLine { get; } // 0x00B1F264-0x00B1F278 
		public char asteriskChar { get; set; } // 0x00B1F278-0x00B1F280 0x00B1F280-0x00B1F2FC
		public bool wasCanceled { get; } // 0x00B1F2FC-0x00B1F304 
		protected int caretPositionInternal { get; set; } // 0x00B1F340-0x00B1F370 0x00B1F370-0x00B1F3AC
		protected int caretSelectPositionInternal { get; set; } // 0x00B1F3AC-0x00B1F3DC 0x00B1F3DC-0x00B1F418
		private new bool hasSelection { get; } // 0x00B1F418-0x00B1F44C 
		public int caretPosition { get; set; } // 0x00B1F44C-0x00B1F47C 0x00B1F47C-0x00B1F4A8
		public int selectionAnchorPosition { get; set; } // 0x00B1F570-0x00B1F5A0 0x00B1F4A8-0x00B1F50C
		public int selectionFocusPosition { get; set; } // 0x00B1F5A0-0x00B1F5D0 0x00B1F50C-0x00B1F570
		private static string clipboard { get; set; } // 0x00B1FF5C-0x00B1FF64 0x00B1FF64-0x00B1FF6C
		public virtual float minWidth { get; } // 0x00B26A48-0x00B26A50 
		public virtual float preferredWidth { get; } // 0x00B26A50-0x00B26BB4 
		public virtual float flexibleWidth { get; } // 0x00B26BB4-0x00B26BBC 
		public virtual float minHeight { get; } // 0x00B26BBC-0x00B26BC4 
		public virtual float preferredHeight { get; } // 0x00B26BC4-0x00B26D48 
		public virtual float flexibleHeight { get; } // 0x00B26D48-0x00B26D50 
		public virtual int layoutPriority { get; } // 0x00B26D50-0x00B26D58 
		Transform ICanvasElement.transform { get; } // 0x00B26DD4-0x00B26DDC 
	
		// Nested types
		public enum ContentType // TypeDefIndex: 2617
		{
			Standard = 0,
			Autocorrected = 1,
			IntegerNumber = 2,
			DecimalNumber = 3,
			Alphanumeric = 4,
			Name = 5,
			EmailAddress = 6,
			Password = 7,
			Pin = 8,
			Custom = 9
		}
	
		public enum InputType // TypeDefIndex: 2618
		{
			Standard = 0,
			AutoCorrect = 1,
			Password = 2
		}
	
		public enum CharacterValidation // TypeDefIndex: 2619
		{
			None = 0,
			Integer = 1,
			Decimal = 2,
			Alphanumeric = 3,
			Name = 4,
			EmailAddress = 5
		}
	
		public enum LineType // TypeDefIndex: 2620
		{
			SingleLine = 0,
			MultiLineSubmit = 1,
			MultiLineNewline = 2
		}
	
		public delegate char OnValidateInput(string text, int charIndex, char addedChar); // TypeDefIndex: 2621; 0x00B1DDAC-0x00B1E1BC
	
		[Serializable]
		public class SubmitEvent : UnityEvent<string> // TypeDefIndex: 2622
		{
			// Constructors
			public SubmitEvent(); // 0x00B1D77C-0x00B1D7CC
		}
	
		[Serializable]
		public class OnChangeEvent : UnityEvent<string> // TypeDefIndex: 2623
		{
			// Constructors
			public OnChangeEvent(); // 0x00B1D7CC-0x00B1D81C
		}
	
		protected enum EditState // TypeDefIndex: 2624
		{
			Continue = 0,
			Finish = 1
		}
	
		[CompilerGenerated] // 0x004F7D0C-0x004F7D1C
		private sealed class _CaretBlink_d__159 : IEnumerator<object> // TypeDefIndex: 2625
		{
			// Fields
			private int __1__state; // 0x10
			private object __2__current; // 0x18
			public InputField __4__this; // 0x20
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x004FAC18-0x004FAC28 */ get; } // 0x00B26F04-0x00B26F0C 
			object IEnumerator.Current { [DebuggerHidden] /* 0x004FAC38-0x004FAC48 */ get; } // 0x00B26F70-0x00B26F78 
	
			// Constructors
			[DebuggerHidden] // 0x004FABF8-0x004FAC08
			public _CaretBlink_d__159(int __1__state); // 0x00B1FC34-0x00B1FC60
	
			// Methods
			[DebuggerHidden] // 0x004FAC08-0x004FAC18
			void IDisposable.Dispose(); // 0x00B26DDC-0x00B26DE0
			private bool MoveNext(); // 0x00B26DE0-0x00B26F04
			[DebuggerHidden] // 0x004FAC28-0x004FAC38
			void IEnumerator.Reset(); // 0x00B26F0C-0x00B26F70
		}
	
		[CompilerGenerated] // 0x004F7D1C-0x004F7D2C
		private sealed class _MouseDragOutsideRect_d__179 : IEnumerator<object> // TypeDefIndex: 2626
		{
			// Fields
			private int __1__state; // 0x10
			private object __2__current; // 0x18
			public PointerEventData eventData; // 0x20
			public InputField __4__this; // 0x28
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x004FAC68-0x004FAC78 */ get; } // 0x00B27220-0x00B27228 
			object IEnumerator.Current { [DebuggerHidden] /* 0x004FAC88-0x004FAC98 */ get; } // 0x00B2728C-0x00B27294 
	
			// Constructors
			[DebuggerHidden] // 0x004FAC48-0x004FAC58
			public _MouseDragOutsideRect_d__179(int __1__state); // 0x00B221C4-0x00B221F0
	
			// Methods
			[DebuggerHidden] // 0x004FAC58-0x004FAC68
			void IDisposable.Dispose(); // 0x00B26F78-0x00B26F7C
			private bool MoveNext(); // 0x00B26F7C-0x00B27220
			[DebuggerHidden] // 0x004FAC78-0x004FAC88
			void IEnumerator.Reset(); // 0x00B27228-0x00B2728C
		}
	
		// Constructors
		protected InputField(); // 0x00B1D5DC-0x00B1D77C
		static InputField(); // 0x00B26D58-0x00B26DD4
	
		// Methods
		public void SetTextWithoutNotify(string input); // 0x00B1DD94-0x00B1DD9C
		private void SetText(string value, bool sendCallback = true /* Metadata: 0x001F4A5D */); // 0x00B1DAC0-0x00B1DD94
		protected void ClampPos(ref int pos); // 0x00B1F304-0x00B1F340
		protected override void OnEnable(); // 0x00B1F5D0-0x00B1F824
		protected override void OnDisable(); // 0x00B1F824-0x00B1FA4C
		[IteratorStateMachine] // 0x004FAAF8-0x004FAB5C
		private IEnumerator CaretBlink(); // 0x00B1FBC0-0x00B1FC34
		private void SetCaretVisible(); // 0x00B1FC60-0x00B1FCA8
		private void SetCaretActive(); // 0x00B1E694-0x00B1E6F4
		private void UpdateCaretMaterial(); // 0x00B1FCA8-0x00B1FDDC
		protected void OnFocus(); // 0x00B1FDDC-0x00B1FDE0
		protected void SelectAll(); // 0x00B1FDE0-0x00B1FE30
		public void MoveTextEnd(bool shift); // 0x00B1FE30-0x00B1FED0
		public void MoveTextStart(bool shift); // 0x00B1FED0-0x00B1FF5C
		private bool InPlaceEditing(); // 0x00B1FF6C-0x00B1FFA8
		private void UpdateCaretFromKeyboard(); // 0x00B1FFA8-0x00B2009C
		protected virtual void LateUpdate(); // 0x00B2009C-0x00B2049C
		[Obsolete] // 0x004FAB5C-0x004FAB94
		public Vector2 ScreenToLocal(Vector2 screen); // 0x00B21458-0x00B21754
		private int GetUnclampedCharacterLineFromPosition(Vector2 pos, TextGenerator generator); // 0x00B21754-0x00B21990
		protected int GetCharacterIndexFromPosition(Vector2 pos); // 0x00B21990-0x00B21C84
		private bool MayDrag(PointerEventData eventData); // 0x00B21E34-0x00B21F28
		public virtual void OnBeginDrag(PointerEventData eventData); // 0x00B21F28-0x00B21F54
		public virtual void OnDrag(PointerEventData eventData); // 0x00B21F54-0x00B22144
		[IteratorStateMachine] // 0x004FAB94-0x004FABF8
		private IEnumerator MouseDragOutsideRect(PointerEventData eventData); // 0x00B22144-0x00B221C4
		public virtual void OnEndDrag(PointerEventData eventData); // 0x00B221F0-0x00B22218
		public override void OnPointerDown(PointerEventData eventData); // 0x00B22218-0x00B2242C
		protected EditState KeyPressed(Event evt); // 0x00B2242C-0x00B22828
		private bool IsValidChar(char c); // 0x00B2300C-0x00B2307C
		public void ProcessEvent(Event e); // 0x00B2307C-0x00B23080
		public virtual void OnUpdateSelected(BaseEventData eventData); // 0x00B23080-0x00B231BC
		private string GetSelectedString(); // 0x00B229DC-0x00B22A90
		private int FindtNextWordBegin(); // 0x00B231BC-0x00B23294
		private void MoveRight(bool shift, bool ctrl); // 0x00B22E50-0x00B22FF4
		private int FindtPrevWordBegin(); // 0x00B23294-0x00B23350
		private void MoveLeft(bool shift, bool ctrl); // 0x00B22CAC-0x00B22E50
		private int DetermineCharacterLine(int charPos, TextGenerator generator); // 0x00B23350-0x00B23478
		private int LineUpCharacterPosition(int originalPos, bool goToFirstChar); // 0x00B23478-0x00B237E8
		private int LineDownCharacterPosition(int originalPos, bool goToLastChar); // 0x00B237E8-0x00B23ABC
		private void MoveDown(bool shift); // 0x00B23000-0x00B2300C
		private void MoveDown(bool shift, bool goToLastChar); // 0x00B23ABC-0x00B23C64
		private void MoveUp(bool shift); // 0x00B22FF4-0x00B23000
		private void MoveUp(bool shift, bool goToFirstChar); // 0x00B23C64-0x00B23E28
		private void Delete(); // 0x00B22A90-0x00B22C54
		private void ForwardSpace(); // 0x00B2292C-0x00B229DC
		private void Backspace(); // 0x00B22828-0x00B2292C
		private void Insert(char c); // 0x00B23E28-0x00B23F28
		private void UpdateTouchKeyboardFromEditChanges(); // 0x00B22C54-0x00B22CAC
		private void SendOnValueChangedAndUpdateLabel(); // 0x00B21434-0x00B21458
		private void SendOnValueChanged(); // 0x00B1E1BC-0x00B1E238
		protected void SendOnSubmit(); // 0x00B23F28-0x00B23FA4
		protected virtual void Append(string input); // 0x00B23FA4-0x00B2406C
		protected virtual void Append(char input); // 0x00B2406C-0x00B241CC
		protected void UpdateLabel(); // 0x00B1E238-0x00B1E600
		private bool IsSelectionVisible(); // 0x00B24DD8-0x00B24E48
		private static int GetLineStartPosition(TextGenerator gen, int line); // 0x00B24E48-0x00B24FDC
		private static int GetLineEndPosition(TextGenerator gen, int line); // 0x00B21C84-0x00B21E34
		private void SetDrawRangeToContainCaretPosition(int caretPos); // 0x00B241CC-0x00B24DD8
		public void ForceLabelUpdate(); // 0x00B24FDC-0x00B24FE0
		private void MarkGeometryAsDirty(); // 0x00B1E778-0x00B1E7E0
		public virtual void Rebuild(CanvasUpdate update); // 0x00B24FE0-0x00B24FF0
		public virtual void LayoutComplete(); // 0x00B253F4-0x00B253F8
		public virtual void GraphicUpdateComplete(); // 0x00B253F8-0x00B253FC
		private void UpdateGeometry(); // 0x00B24FF0-0x00B253F4
		private void AssignPositioningIfNeeded(); // 0x00B2075C-0x00B20DAC
		private void OnFillVBO(Mesh vbo); // 0x00B253FC-0x00B25638
		private void GenerateCaret(VertexHelper vbo, Vector2 roundingOffset); // 0x00B25638-0x00B25D28
		private void CreateCursorVerts(); // 0x00B26690-0x00B267E8
		private void GenerateHighlight(VertexHelper vbo, Vector2 roundingOffset); // 0x00B25D28-0x00B26690
		protected char Validate(string text, int pos, char ch); // 0x00B20DAC-0x00B21434
		public void ActivateInputField(); // 0x00B267E8-0x00B26928
		private void ActivateInputFieldInternal(); // 0x00B2049C-0x00B2075C
		public override void OnSelect(BaseEventData eventData); // 0x00B26928-0x00B2696C
		public virtual void OnPointerClick(PointerEventData eventData); // 0x00B2696C-0x00B26990
		public void DeactivateInputField(); // 0x00B1FA4C-0x00B1FBC0
		public override void OnDeselect(BaseEventData eventData); // 0x00B26990-0x00B269C0
		public virtual void OnSubmit(BaseEventData eventData); // 0x00B269C0-0x00B26A14
		private void EnforceContentType(); // 0x00B1EE5C-0x00B1EF28
		private void EnforceTextHOverflow(); // 0x00B1D81C-0x00B1D8CC
		private void SetToCustomIfContentTypeIsNot(params /* 0x004FB274-0x004FB284 */ ContentType[] allowedContentTypes); // 0x00B1EFFC-0x00B1F074
		private void SetToCustom(); // 0x00B1F108-0x00B1F120
		protected override void DoStateTransition(SelectionState state, bool instant); // 0x00B26A14-0x00B26A40
		public virtual void CalculateLayoutInputHorizontal(); // 0x00B26A40-0x00B26A44
		public virtual void CalculateLayoutInputVertical(); // 0x00B26A44-0x00B26A48
	}

	[AddComponentMenu] // 0x004F7D2C-0x004F7DD8
	[DisallowMultipleComponent] // 0x004F7D2C-0x004F7DD8
	[ExecuteAlways] // 0x004F7D2C-0x004F7DD8
	[RequireComponent] // 0x004F7D2C-0x004F7DD8
	public class AspectRatioFitter : UIBehaviour, ILayoutSelfController // TypeDefIndex: 2627
	{
		// Fields
		[SerializeField] // 0x004F98C0-0x004F98D0
		private AspectMode m_AspectMode; // 0x18
		[SerializeField] // 0x004F98D0-0x004F98E0
		private float m_AspectRatio; // 0x1C
		[NonSerialized]
		private RectTransform m_Rect; // 0x20
		private bool m_DelayedSetDirty; // 0x28
		private DrivenRectTransformTracker m_Tracker; // 0x29
	
		// Properties
		public AspectMode aspectMode { get; set; } // 0x00961A2C-0x00961A34 0x00961A34-0x00961AB0
		public float aspectRatio { get; set; } // 0x00961AB4-0x00961ABC 0x00961ABC-0x00961B38
		private RectTransform rectTransform { get; } // 0x00961B38-0x00961BD0 
	
		// Nested types
		public enum AspectMode // TypeDefIndex: 2628
		{
			None = 0,
			WidthControlsHeight = 1,
			HeightControlsWidth = 2,
			FitInParent = 3,
			EnvelopeParent = 4
		}
	
		// Constructors
		protected AspectRatioFitter(); // 0x00961BD0-0x00961BE0
	
		// Methods
		protected override void OnEnable(); // 0x00961BE0-0x00961BE4
		protected override void OnDisable(); // 0x00961BE4-0x00961C68
		protected virtual void Update(); // 0x00961C68-0x00961C7C
		protected override void OnRectTransformDimensionsChange(); // 0x00961C7C-0x00961C80
		private void UpdateRect(); // 0x00961C80-0x00961F38
		private float GetSizeDeltaToProduceSize(float size, int axis); // 0x00962048-0x009620FC
		private Vector2 GetParentSize(); // 0x00961F38-0x00962048
		public virtual void SetLayoutHorizontal(); // 0x009620FC-0x00962100
		public virtual void SetLayoutVertical(); // 0x00962100-0x00962104
		protected void SetDirty(); // 0x00961AB0-0x00961AB4
	}

	[AddComponentMenu] // 0x004F7DD8-0x004F7E84
	[DisallowMultipleComponent] // 0x004F7DD8-0x004F7E84
	[ExecuteAlways] // 0x004F7DD8-0x004F7E84
	[RequireComponent] // 0x004F7DD8-0x004F7E84
	public class CanvasScaler : UIBehaviour // TypeDefIndex: 2629
	{
		// Fields
		[SerializeField] // 0x004F98E0-0x004F992C
		[Tooltip] // 0x004F98E0-0x004F992C
		private ScaleMode m_UiScaleMode; // 0x18
		[SerializeField] // 0x004F992C-0x004F9978
		[Tooltip] // 0x004F992C-0x004F9978
		protected float m_ReferencePixelsPerUnit; // 0x1C
		[SerializeField] // 0x004F9978-0x004F99C4
		[Tooltip] // 0x004F9978-0x004F99C4
		protected float m_ScaleFactor; // 0x20
		[SerializeField] // 0x004F99C4-0x004F9A10
		[Tooltip] // 0x004F99C4-0x004F9A10
		protected Vector2 m_ReferenceResolution; // 0x24
		[SerializeField] // 0x004F9A10-0x004F9A5C
		[Tooltip] // 0x004F9A10-0x004F9A5C
		protected ScreenMatchMode m_ScreenMatchMode; // 0x2C
		[Range] // 0x004F9A5C-0x004F9AC0
		[SerializeField] // 0x004F9A5C-0x004F9AC0
		[Tooltip] // 0x004F9A5C-0x004F9AC0
		protected float m_MatchWidthOrHeight; // 0x30
		private const float kLogBase = 2f; // Metadata: 0x001F4AF5
		[SerializeField] // 0x004F9AC0-0x004F9B0C
		[Tooltip] // 0x004F9AC0-0x004F9B0C
		protected Unit m_PhysicalUnit; // 0x34
		[SerializeField] // 0x004F9B0C-0x004F9B58
		[Tooltip] // 0x004F9B0C-0x004F9B58
		protected float m_FallbackScreenDPI; // 0x38
		[SerializeField] // 0x004F9B58-0x004F9BA4
		[Tooltip] // 0x004F9B58-0x004F9BA4
		protected float m_DefaultSpriteDPI; // 0x3C
		[SerializeField] // 0x004F9BA4-0x004F9BF0
		[Tooltip] // 0x004F9BA4-0x004F9BF0
		protected float m_DynamicPixelsPerUnit; // 0x40
		private Canvas m_Canvas; // 0x48
		[NonSerialized]
		private float m_PrevScaleFactor; // 0x50
		[NonSerialized]
		private float m_PrevReferencePixelsPerUnit; // 0x54
	
		// Properties
		public ScaleMode uiScaleMode { get; set; } // 0x009628C4-0x009628CC 0x009628CC-0x009628D4
		public float referencePixelsPerUnit { get; set; } // 0x009628D4-0x009628DC 0x009628DC-0x009628E4
		public float scaleFactor { get; set; } // 0x009628E4-0x009628EC 0x009628EC-0x00962970
		public Vector2 referenceResolution { get; set; } // 0x00962970-0x00962978 0x00962978-0x00962A78
		public ScreenMatchMode screenMatchMode { get; set; } // 0x00962A78-0x00962A80 0x00962A80-0x00962A88
		public float matchWidthOrHeight { get; set; } // 0x00962A88-0x00962A90 0x00962A90-0x00962A98
		public Unit physicalUnit { get; set; } // 0x00962A98-0x00962AA0 0x00962AA0-0x00962AA8
		public float fallbackScreenDPI { get; set; } // 0x00962AA8-0x00962AB0 0x00962AB0-0x00962AB8
		public float defaultSpriteDPI { get; set; } // 0x00962AB8-0x00962AC0 0x00962AC0-0x00962B40
		public float dynamicPixelsPerUnit { get; set; } // 0x00962B40-0x00962B48 0x00962B48-0x00962B50
	
		// Nested types
		public enum ScaleMode // TypeDefIndex: 2630
		{
			ConstantPixelSize = 0,
			ScaleWithScreenSize = 1,
			ConstantPhysicalSize = 2
		}
	
		public enum ScreenMatchMode // TypeDefIndex: 2631
		{
			MatchWidthOrHeight = 0,
			Expand = 1,
			Shrink = 2
		}
	
		public enum Unit // TypeDefIndex: 2632
		{
			Centimeters = 0,
			Millimeters = 1,
			Inches = 2,
			Points = 3,
			Picas = 4
		}
	
		// Constructors
		protected CanvasScaler(); // 0x00962B50-0x00962BD4
	
		// Methods
		protected override void OnEnable(); // 0x00962BD4-0x00962C3C
		protected override void OnDisable(); // 0x00962C3C-0x00962C6C
		protected virtual void Update(); // 0x00962D0C-0x00962D1C
		protected virtual void Handle(); // 0x00962D1C-0x00962E28
		protected virtual void HandleWorldCanvas(); // 0x00962E28-0x00962E54
		protected virtual void HandleConstantPixelSize(); // 0x00962E54-0x00962E80
		protected virtual void HandleScaleWithScreenSize(); // 0x00962E80-0x009630FC
		protected virtual void HandleConstantPhysicalSize(); // 0x009630FC-0x00963174
		protected void SetScaleFactor(float scaleFactor); // 0x00962C6C-0x00962CBC
		protected void SetReferencePixelsPerUnit(float referencePixelsPerUnit); // 0x00962CBC-0x00962D0C
	}

	[AddComponentMenu] // 0x004F7E84-0x004F7F20
	[ExecuteAlways] // 0x004F7E84-0x004F7F20
	[RequireComponent] // 0x004F7E84-0x004F7F20
	public class ContentSizeFitter : UIBehaviour, ILayoutSelfController // TypeDefIndex: 2633
	{
		// Fields
		[SerializeField] // 0x004F9BF0-0x004F9C00
		protected FitMode m_HorizontalFit; // 0x18
		[SerializeField] // 0x004F9C00-0x004F9C10
		protected FitMode m_VerticalFit; // 0x1C
		[NonSerialized]
		private RectTransform m_Rect; // 0x20
		private DrivenRectTransformTracker m_Tracker; // 0x28
	
		// Properties
		public FitMode horizontalFit { get; set; } // 0x009650C8-0x009650D0 0x009650D0-0x0096514C
		public FitMode verticalFit { get; set; } // 0x009651E4-0x009651EC 0x009651EC-0x00965268
		private RectTransform rectTransform { get; } // 0x00965268-0x00965300 
	
		// Nested types
		public enum FitMode // TypeDefIndex: 2634
		{
			Unconstrained = 0,
			MinSize = 1,
			PreferredSize = 2
		}
	
		// Constructors
		protected ContentSizeFitter(); // 0x00965300-0x00965308
	
		// Methods
		protected override void OnEnable(); // 0x00965308-0x0096530C
		protected override void OnDisable(); // 0x0096530C-0x00965390
		protected override void OnRectTransformDimensionsChange(); // 0x00965390-0x00965394
		private void HandleSelfFittingAlongAxis(int axis); // 0x00965394-0x00965468
		public virtual void SetLayoutHorizontal(); // 0x00965468-0x00965498
		public virtual void SetLayoutVertical(); // 0x00965498-0x0096564C
		protected void SetDirty(); // 0x0096514C-0x009651E4
	}

	[AddComponentMenu] // 0x004F7F20-0x004F7F5C
	public class GridLayoutGroup : LayoutGroup // TypeDefIndex: 2635
	{
		// Fields
		[SerializeField] // 0x004F9C10-0x004F9C20
		protected Corner m_StartCorner; // 0x58
		[SerializeField] // 0x004F9C20-0x004F9C30
		protected Axis m_StartAxis; // 0x5C
		[SerializeField] // 0x004F9C30-0x004F9C40
		protected Vector2 m_CellSize; // 0x60
		[SerializeField] // 0x004F9C40-0x004F9C50
		protected Vector2 m_Spacing; // 0x68
		[SerializeField] // 0x004F9C50-0x004F9C60
		protected Constraint m_Constraint; // 0x70
		[SerializeField] // 0x004F9C60-0x004F9C70
		protected int m_ConstraintCount; // 0x74
	
		// Properties
		public Corner startCorner { get; set; } // 0x00B140AC-0x00B140B4 0x00B140B4-0x00B14118
		public Axis startAxis { get; set; } // 0x00B14118-0x00B14120 0x00B14120-0x00B14184
		public Vector2 cellSize { get; set; } // 0x00B14184-0x00B1418C 0x00B1418C-0x00B141F8
		public Vector2 spacing { get; set; } // 0x00B141F8-0x00B14200 0x00B14200-0x00B1426C
		public Constraint constraint { get; set; } // 0x00B1426C-0x00B14274 0x00B14274-0x00B142D8
		public int constraintCount { get; set; } // 0x00B142D8-0x00B142E0 0x00B142E0-0x00B14378
	
		// Nested types
		public enum Corner // TypeDefIndex: 2636
		{
			UpperLeft = 0,
			UpperRight = 1,
			LowerLeft = 2,
			LowerRight = 3
		}
	
		public enum Axis // TypeDefIndex: 2637
		{
			Horizontal = 0,
			Vertical = 1
		}
	
		public enum Constraint // TypeDefIndex: 2638
		{
			Flexible = 0,
			FixedColumnCount = 1,
			FixedRowCount = 2
		}
	
		// Constructors
		protected GridLayoutGroup(); // 0x00B14378-0x00B14420
	
		// Methods
		public override void CalculateLayoutInputHorizontal(); // 0x00B14520-0x00B146B8
		public override void CalculateLayoutInputVertical(); // 0x00B14A30-0x00B14C10
		public override void SetLayoutHorizontal(); // 0x00B14CA8-0x00B14CB0
		public override void SetLayoutVertical(); // 0x00B15318-0x00B15320
		private void SetCellsAlongAxis(int axis); // 0x00B14CB0-0x00B15318
	}

	[AddComponentMenu] // 0x004F7F5C-0x004F7F98
	public class HorizontalLayoutGroup : HorizontalOrVerticalLayoutGroup // TypeDefIndex: 2639
	{
		// Constructors
		protected HorizontalLayoutGroup(); // 0x00B15504-0x00B15510
	
		// Methods
		public override void CalculateLayoutInputHorizontal(); // 0x00B1551C-0x00B15548
		public override void CalculateLayoutInputVertical(); // 0x00B157E4-0x00B157F0
		public override void SetLayoutHorizontal(); // 0x00B157F0-0x00B157FC
		public override void SetLayoutVertical(); // 0x00B15E04-0x00B15E10
	}

	[ExecuteAlways] // 0x004F7F98-0x004F7FA8
	public abstract class HorizontalOrVerticalLayoutGroup : LayoutGroup // TypeDefIndex: 2640
	{
		// Fields
		[SerializeField] // 0x004F9C70-0x004F9C80
		protected float m_Spacing; // 0x58
		[SerializeField] // 0x004F9C80-0x004F9C90
		protected bool m_ChildForceExpandWidth; // 0x5C
		[SerializeField] // 0x004F9C90-0x004F9CA0
		protected bool m_ChildForceExpandHeight; // 0x5D
		[SerializeField] // 0x004F9CA0-0x004F9CB0
		protected bool m_ChildControlWidth; // 0x5E
		[SerializeField] // 0x004F9CB0-0x004F9CC0
		protected bool m_ChildControlHeight; // 0x5F
		[SerializeField] // 0x004F9CC0-0x004F9CD0
		protected bool m_ChildScaleWidth; // 0x60
		[SerializeField] // 0x004F9CD0-0x004F9CE0
		protected bool m_ChildScaleHeight; // 0x61
	
		// Properties
		public float spacing { get; set; } // 0x00B15E10-0x00B15E18 0x00B15E18-0x00B15E7C
		public bool childForceExpandWidth { get; set; } // 0x00B15E7C-0x00B15E84 0x00B15E84-0x00B15EE8
		public bool childForceExpandHeight { get; set; } // 0x00B15EE8-0x00B15EF0 0x00B15EF0-0x00B15F54
		public bool childControlWidth { get; set; } // 0x00B15F54-0x00B15F5C 0x00B15F5C-0x00B15FC0
		public bool childControlHeight { get; set; } // 0x00B15FC0-0x00B15FC8 0x00B15FC8-0x00B1602C
		public bool childScaleWidth { get; set; } // 0x00B1602C-0x00B16034 0x00B16034-0x00B16098
		public bool childScaleHeight { get; set; } // 0x00B16098-0x00B160A0 0x00B160A0-0x00B16104
	
		// Constructors
		protected HorizontalOrVerticalLayoutGroup(); // 0x00B15510-0x00B1551C
	
		// Methods
		protected void CalcAlongAxis(int axis, bool isVertical); // 0x00B15548-0x00B157E4
		protected void SetChildrenAlongAxis(int axis, bool isVertical); // 0x00B157FC-0x00B15E04
		private void GetChildSizes(RectTransform child, int axis, bool controlSize, bool childForceExpand, out float min, out float preferred, out float flexible); // 0x00B16104-0x00B16244
	}

	public interface ILayoutElement // TypeDefIndex: 2641
	{
		// Properties
		float minWidth { get; }
		float preferredWidth { get; }
		float flexibleWidth { get; }
		float minHeight { get; }
		float preferredHeight { get; }
		float flexibleHeight { get; }
		int layoutPriority { get; }
	
		// Methods
		void CalculateLayoutInputHorizontal();
		void CalculateLayoutInputVertical();
	}

	public interface ILayoutController // TypeDefIndex: 2642
	{
		// Methods
		void SetLayoutHorizontal();
		void SetLayoutVertical();
	}

	public interface ILayoutGroup : ILayoutController // TypeDefIndex: 2643
	{
	}

	public interface ILayoutSelfController : ILayoutController // TypeDefIndex: 2644
	{
	}

	public interface ILayoutIgnorer // TypeDefIndex: 2645
	{
		// Properties
		bool ignoreLayout { get; }
	}

	[AddComponentMenu] // 0x004F7FA8-0x004F8044
	[ExecuteAlways] // 0x004F7FA8-0x004F8044
	[RequireComponent] // 0x004F7FA8-0x004F8044
	public class LayoutElement : UIBehaviour, ILayoutElement, ILayoutIgnorer // TypeDefIndex: 2646
	{
		// Fields
		[SerializeField] // 0x004F9CE0-0x004F9CF0
		private bool m_IgnoreLayout; // 0x18
		[SerializeField] // 0x004F9CF0-0x004F9D00
		private float m_MinWidth; // 0x1C
		[SerializeField] // 0x004F9D00-0x004F9D10
		private float m_MinHeight; // 0x20
		[SerializeField] // 0x004F9D10-0x004F9D20
		private float m_PreferredWidth; // 0x24
		[SerializeField] // 0x004F9D20-0x004F9D30
		private float m_PreferredHeight; // 0x28
		[SerializeField] // 0x004F9D30-0x004F9D40
		private float m_FlexibleWidth; // 0x2C
		[SerializeField] // 0x004F9D40-0x004F9D50
		private float m_FlexibleHeight; // 0x30
		[SerializeField] // 0x004F9D50-0x004F9D60
		private int m_LayoutPriority; // 0x34
	
		// Properties
		public virtual bool ignoreLayout { get; set; } // 0x00B2737C-0x00B27384 0x00B27384-0x00B27400
		public virtual float minWidth { get; set; } // 0x00B274C4-0x00B274CC 0x00B274CC-0x00B27548
		public virtual float minHeight { get; set; } // 0x00B27548-0x00B27550 0x00B27550-0x00B275CC
		public virtual float preferredWidth { get; set; } // 0x00B275CC-0x00B275D4 0x00B275D4-0x00B27650
		public virtual float preferredHeight { get; set; } // 0x00B27650-0x00B27658 0x00B27658-0x00B276D4
		public virtual float flexibleWidth { get; set; } // 0x00B276D4-0x00B276DC 0x00B276DC-0x00B27758
		public virtual float flexibleHeight { get; set; } // 0x00B27758-0x00B27760 0x00B27760-0x00B277DC
		public virtual int layoutPriority { get; set; } // 0x00B277DC-0x00B277E4 0x00B277E4-0x00B27860
	
		// Constructors
		protected LayoutElement(); // 0x00B27860-0x00B27884
	
		// Methods
		public virtual void CalculateLayoutInputHorizontal(); // 0x00B274BC-0x00B274C0
		public virtual void CalculateLayoutInputVertical(); // 0x00B274C0-0x00B274C4
		protected override void OnEnable(); // 0x00B27884-0x00B278AC
		protected override void OnTransformParentChanged(); // 0x00B278AC-0x00B278B0
		protected override void OnDisable(); // 0x00B278B0-0x00B278D8
		protected override void OnDidApplyAnimationProperties(); // 0x00B278D8-0x00B278DC
		protected override void OnBeforeTransformParentChanged(); // 0x00B278DC-0x00B278E0
		protected void SetDirty(); // 0x00B27400-0x00B274BC
	}

	[DisallowMultipleComponent] // 0x004F8044-0x004F80C8
	[ExecuteAlways] // 0x004F8044-0x004F80C8
	[RequireComponent] // 0x004F8044-0x004F80C8
	public abstract class LayoutGroup : UIBehaviour, ILayoutElement, ILayoutGroup // TypeDefIndex: 2647
	{
		// Fields
		[SerializeField] // 0x004F9D60-0x004F9D70
		protected RectOffset m_Padding; // 0x18
		[SerializeField] // 0x004F9D70-0x004F9D80
		protected TextAnchor m_ChildAlignment; // 0x20
		[NonSerialized]
		private RectTransform m_Rect; // 0x28
		protected DrivenRectTransformTracker m_Tracker; // 0x30
		private Vector2 m_TotalMinSize; // 0x34
		private Vector2 m_TotalPreferredSize; // 0x3C
		private Vector2 m_TotalFlexibleSize; // 0x44
		[NonSerialized]
		private List<RectTransform> m_RectChildren; // 0x50
	
		// Properties
		public RectOffset padding { get; set; } // 0x00B27C9C-0x00B27CA4 0x00B27CA4-0x00B27D08
		public TextAnchor childAlignment { get; set; } // 0x00B27D08-0x00B27D10 0x00B27D10-0x00B27D74
		protected RectTransform rectTransform { get; } // 0x00B14C10-0x00B14CA8 
		protected List<RectTransform> rectChildren { get; } // 0x00B27D74-0x00B27D7C 
		public virtual float minWidth { get; } // 0x00B27D7C-0x00B27D8C 
		public virtual float preferredWidth { get; } // 0x00B27D8C-0x00B27D9C 
		public virtual float flexibleWidth { get; } // 0x00B27D9C-0x00B27DAC 
		public virtual float minHeight { get; } // 0x00B27DAC-0x00B27DBC 
		public virtual float preferredHeight { get; } // 0x00B27DBC-0x00B27DCC 
		public virtual float flexibleHeight { get; } // 0x00B27DCC-0x00B27DDC 
		public virtual int layoutPriority { get; } // 0x00B27DDC-0x00B27DE4 
		private bool isRootLayoutGroup { get; } // 0x00B28044-0x00B28198 
	
		// Nested types
		[CompilerGenerated] // 0x004F80C8-0x004F80D8
		private sealed class _DelayedSetDirty_d__56 : IEnumerator<object> // TypeDefIndex: 2648
		{
			// Fields
			private int __1__state; // 0x10
			private object __2__current; // 0x18
			public RectTransform rectTransform; // 0x20
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x004FAD1C-0x004FAD2C */ get; } // 0x00B28318-0x00B28320 
			object IEnumerator.Current { [DebuggerHidden] /* 0x004FAD3C-0x004FAD4C */ get; } // 0x00B28384-0x00B2838C 
	
			// Constructors
			[DebuggerHidden] // 0x004FACFC-0x004FAD0C
			public _DelayedSetDirty_d__56(int __1__state); // 0x00B28250-0x00B2827C
	
			// Methods
			[DebuggerHidden] // 0x004FAD0C-0x004FAD1C
			void IDisposable.Dispose(); // 0x00B2827C-0x00B28280
			private bool MoveNext(); // 0x00B28280-0x00B28318
			[DebuggerHidden] // 0x004FAD2C-0x004FAD3C
			void IEnumerator.Reset(); // 0x00B28320-0x00B28384
		}
	
		// Constructors
		protected LayoutGroup(); // 0x00B14420-0x00B14520
	
		// Methods
		public virtual void CalculateLayoutInputHorizontal(); // 0x00B146B8-0x00B149D0
		public abstract void CalculateLayoutInputVertical();
		public abstract void SetLayoutHorizontal();
		public abstract void SetLayoutVertical();
		protected override void OnEnable(); // 0x00B27DE4-0x00B27E0C
		protected override void OnDisable(); // 0x00B27EFC-0x00B27F88
		protected override void OnDidApplyAnimationProperties(); // 0x00B27F88-0x00B27F8C
		protected float GetTotalMinSize(int axis); // 0x00B16644-0x00B16650
		protected float GetTotalPreferredSize(int axis); // 0x00B1662C-0x00B16638
		protected float GetTotalFlexibleSize(int axis); // 0x00B16638-0x00B16644
		protected float GetStartOffset(int axis, float requiredSpaceWithoutPadding); // 0x00B15320-0x00B15444
		protected float GetAlignmentOnAxis(int axis); // 0x00B16244-0x00B16290
		protected void SetLayoutInputForAxis(float totalMin, float totalPreferred, float totalFlexible, int axis); // 0x00B149D0-0x00B14A30
		protected void SetChildAlongAxis(RectTransform rect, int axis, float pos); // 0x00B27F8C-0x00B28044
		protected void SetChildAlongAxisWithScale(RectTransform rect, int axis, float pos, float scaleFactor); // 0x00B16468-0x00B1662C
		protected void SetChildAlongAxis(RectTransform rect, int axis, float pos, float size); // 0x00B15444-0x00B15504
		protected void SetChildAlongAxisWithScale(RectTransform rect, int axis, float pos, float size, float scaleFactor); // 0x00B16290-0x00B16468
		protected override void OnRectTransformDimensionsChange(); // 0x00B28198-0x00B281D8
		protected virtual void OnTransformChildrenChanged(); // 0x00B281D8-0x00B281DC
		protected void SetProperty<T>(ref T currentValue, T newValue);
		protected void SetDirty(); // 0x00B27E0C-0x00B27EFC
		[IteratorStateMachine] // 0x004FAC98-0x004FACFC
		private IEnumerator DelayedSetDirty(RectTransform rectTransform); // 0x00B281DC-0x00B28250
	}

	public class LayoutRebuilder : ICanvasElement // TypeDefIndex: 2649
	{
		// Fields
		private RectTransform m_ToRebuild; // 0x10
		private int m_CachedHashFromTransform; // 0x18
		private static ObjectPool<LayoutRebuilder> s_Rebuilders; // 0x00
	
		// Properties
		public Transform transform { get; } // 0x00B28550-0x00B28558 
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x004F80D8-0x004F80E8
		private sealed class __c // TypeDefIndex: 2650
		{
			// Fields
			public static readonly __c __9; // 0x00
			public static Predicate<Component> __9__10_0; // 0x08
			public static UnityAction<Component> __9__12_0; // 0x10
			public static UnityAction<Component> __9__12_1; // 0x18
			public static UnityAction<Component> __9__12_2; // 0x20
			public static UnityAction<Component> __9__12_3; // 0x28
	
			// Constructors
			static __c(); // 0x00B294E4-0x00B29548
			public __c(); // 0x00B29548-0x00B29550
	
			// Methods
			internal void _.cctor_b__5_0(LayoutRebuilder x); // 0x00B29550-0x00B29570
			internal bool _StripDisabledBehavioursFromList_b__10_0(Component e); // 0x00B29570-0x00B29604
			internal void _Rebuild_b__12_0(Component e); // 0x00B29604-0x00B296D0
			internal void _Rebuild_b__12_1(Component e); // 0x00B296D0-0x00B2979C
			internal void _Rebuild_b__12_2(Component e); // 0x00B2979C-0x00B2986C
			internal void _Rebuild_b__12_3(Component e); // 0x00B2986C-0x00B2993C
		}
	
		// Constructors
		static LayoutRebuilder(); // 0x00B283DC-0x00B284EC
		public LayoutRebuilder(); // 0x00B294DC-0x00B294E4
	
		// Methods
		private void Initialize(RectTransform controller); // 0x00B2838C-0x00B283D0
		private void Clear(); // 0x00B283D0-0x00B283DC
		private static void ReapplyDrivenProperties(RectTransform driven); // 0x00B284EC-0x00B28550
		public bool IsDestroyed(); // 0x00B28558-0x00B285C8
		private static void StripDisabledBehavioursFromList(List<Component> components); // 0x00B285C8-0x00B286C0
		public static void ForceRebuildLayoutImmediate(RectTransform layoutRoot); // 0x00B286C0-0x00B287A4
		public void Rebuild(CanvasUpdate executing); // 0x00B287A4-0x00B28A88
		private void PerformLayoutControl(RectTransform rect, UnityAction<Component> action); // 0x00B28D58-0x00B2905C
		private void PerformLayoutCalculation(RectTransform rect, UnityAction<Component> action); // 0x00B28A88-0x00B28D58
		public static void MarkLayoutForRebuild(RectTransform rect); // 0x00B278E0-0x00B27C9C
		private static bool ValidController(RectTransform layoutRoot, List<Component> comps); // 0x00B2905C-0x00B2923C
		private static void MarkLayoutRootForRebuild(RectTransform controller); // 0x00B2923C-0x00B293A0
		public void LayoutComplete(); // 0x00B293A0-0x00B29424
		public void GraphicUpdateComplete(); // 0x00B29424-0x00B29428
		public override int GetHashCode(); // 0x00B29428-0x00B29430
		public override bool Equals(object obj); // 0x00B29430-0x00B29488
		public override string ToString(); // 0x00B29488-0x00B294DC
	}

	public static class LayoutUtility // TypeDefIndex: 2651
	{
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x004F80E8-0x004F80F8
		private sealed class __c // TypeDefIndex: 2652
		{
			// Fields
			public static readonly __c __9; // 0x00
			public static Func<ILayoutElement, float> __9__3_0; // 0x08
			public static Func<ILayoutElement, float> __9__4_0; // 0x10
			public static Func<ILayoutElement, float> __9__4_1; // 0x18
			public static Func<ILayoutElement, float> __9__5_0; // 0x20
			public static Func<ILayoutElement, float> __9__6_0; // 0x28
			public static Func<ILayoutElement, float> __9__7_0; // 0x30
			public static Func<ILayoutElement, float> __9__7_1; // 0x38
			public static Func<ILayoutElement, float> __9__8_0; // 0x40
	
			// Constructors
			static __c(); // 0x00B2A3D0-0x00B2A434
			public __c(); // 0x00B2A434-0x00B2A43C
	
			// Methods
			internal float _GetMinWidth_b__3_0(ILayoutElement e); // 0x00B2A43C-0x00B2A4F0
			internal float _GetPreferredWidth_b__4_0(ILayoutElement e); // 0x00B2A4F0-0x00B2A5A4
			internal float _GetPreferredWidth_b__4_1(ILayoutElement e); // 0x00B2A5A4-0x00B2A658
			internal float _GetFlexibleWidth_b__5_0(ILayoutElement e); // 0x00B2A658-0x00B2A70C
			internal float _GetMinHeight_b__6_0(ILayoutElement e); // 0x00B2A70C-0x00B2A7C0
			internal float _GetPreferredHeight_b__7_0(ILayoutElement e); // 0x00B2A7C0-0x00B2A874
			internal float _GetPreferredHeight_b__7_1(ILayoutElement e); // 0x00B2A874-0x00B2A928
			internal float _GetFlexibleHeight_b__8_0(ILayoutElement e); // 0x00B2A928-0x00B2A9DC
		}
	
		// Methods
		public static float GetMinSize(RectTransform rect, int axis); // 0x00B16650-0x00B1665C
		public static float GetPreferredSize(RectTransform rect, int axis); // 0x00B1665C-0x00B16668
		public static float GetFlexibleSize(RectTransform rect, int axis); // 0x00B16668-0x00B16674
		public static float GetMinWidth(RectTransform rect); // 0x00B2993C-0x00B29A34
		public static float GetPreferredWidth(RectTransform rect); // 0x00B29B2C-0x00B29D00
		public static float GetFlexibleWidth(RectTransform rect); // 0x00B29ED4-0x00B29FCC
		public static float GetMinHeight(RectTransform rect); // 0x00B29A34-0x00B29B2C
		public static float GetPreferredHeight(RectTransform rect); // 0x00B29D00-0x00B29ED4
		public static float GetFlexibleHeight(RectTransform rect); // 0x00B29FCC-0x00B2A0C4
		public static float GetLayoutProperty(RectTransform rect, Func<ILayoutElement, float> property, float defaultValue); // 0x00B2A0C4-0x00B2A0E8
		public static float GetLayoutProperty(RectTransform rect, Func<ILayoutElement, float> property, float defaultValue, out ILayoutElement source); // 0x00B2A0E8-0x00B2A3D0
	}

	[AddComponentMenu] // 0x004F80F8-0x004F8134
	public class VerticalLayoutGroup : HorizontalOrVerticalLayoutGroup // TypeDefIndex: 2653
	{
		// Constructors
		protected VerticalLayoutGroup(); // 0x00C6870C-0x00C68714
	
		// Methods
		public override void CalculateLayoutInputHorizontal(); // 0x00C68714-0x00C68748
		public override void CalculateLayoutInputVertical(); // 0x00C68748-0x00C68758
		public override void SetLayoutHorizontal(); // 0x00C68758-0x00C68768
		public override void SetLayoutVertical(); // 0x00C68768-0x00C68778
	}

	[AddComponentMenu] // 0x004F8134-0x004F81E0
	[DisallowMultipleComponent] // 0x004F8134-0x004F81E0
	[ExecuteAlways] // 0x004F8134-0x004F81E0
	[RequireComponent] // 0x004F8134-0x004F81E0
	public class Mask : UIBehaviour, ICanvasRaycastFilter, IMaterialModifier // TypeDefIndex: 2654
	{
		// Fields
		[NonSerialized]
		private RectTransform m_RectTransform; // 0x18
		[SerializeField] // 0x004F9D80-0x004F9D90
		private bool m_ShowMaskGraphic; // 0x20
		[NonSerialized]
		private Graphic m_Graphic; // 0x28
		[NonSerialized]
		private Material m_MaskMaterial; // 0x30
		[NonSerialized]
		private Material m_UnmaskMaterial; // 0x38
	
		// Properties
		public RectTransform rectTransform { get; } // 0x00B2A9DC-0x00B2AA3C 
		public bool showMaskGraphic { get; set; } // 0x00B2AA3C-0x00B2AA44 0x00B2AA44-0x00B2AB1C
		public Graphic graphic { get; } // 0x00B2AB1C-0x00B2AB7C 
	
		// Constructors
		protected Mask(); // 0x00B2AB7C-0x00B2AB8C
	
		// Methods
		public virtual bool MaskEnabled(); // 0x00B2AB8C-0x00B2AC2C
		[Obsolete] // 0x004FAD4C-0x004FAD84
		public virtual void OnSiblingGraphicEnabledDisabled(); // 0x00B2AC2C-0x00B2AC30
		protected override void OnEnable(); // 0x00B2AC30-0x00B2AD08
		protected override void OnDisable(); // 0x00B2AF68-0x00B2B0A8
		public virtual bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera); // 0x00B2B0A8-0x00B2B170
		public virtual Material GetModifiedMaterial(Material baseMaterial); // 0x00B2B170-0x00B2B41C
	}

	public abstract class MaskableGraphic : Graphic, IClippable, IMaskable, IMaterialModifier // TypeDefIndex: 2655
	{
		// Fields
		[NonSerialized]
		protected bool m_ShouldRecalculateStencil; // 0x89
		[NonSerialized]
		protected Material m_MaskMaterial; // 0x90
		[NonSerialized]
		private RectMask2D m_ParentMask; // 0x98
		[NonSerialized]
		private bool m_Maskable; // 0xA0
		[NonSerialized]
		[EditorBrowsable] // 0x004F9D90-0x004F9DE4
		[Obsolete] // 0x004F9D90-0x004F9DE4
		protected bool m_IncludeForMasking; // 0xA1
		[SerializeField] // 0x004F9DE4-0x004F9DF4
		private CullStateChangedEvent m_OnCullStateChanged; // 0xA8
		[NonSerialized]
		[EditorBrowsable] // 0x004F9DF4-0x004F9E48
		[Obsolete] // 0x004F9DF4-0x004F9E48
		protected bool m_ShouldRecalculate; // 0xB0
		[NonSerialized]
		protected int m_StencilValue; // 0xB4
		private readonly Vector3[] m_Corners; // 0xB8
	
		// Properties
		public CullStateChangedEvent onCullStateChanged { get; set; } // 0x00B2C300-0x00B2C308 0x00B2C308-0x00B2C310
		public bool maskable { get; set; } // 0x00B2C310-0x00B2C318 0x00B2C318-0x00B2C350
		private Rect rootCanvasRect { get; } // 0x00B2C538-0x00B2C894 
		GameObject IClippable.gameObject { get; } // 0x00B2CC00-0x00B2CC08 
	
		// Nested types
		[Serializable]
		public class CullStateChangedEvent : UnityEvent<bool> // TypeDefIndex: 2656
		{
			// Constructors
			public CullStateChangedEvent(); // 0x00C54848-0x00C54898
		}
	
		// Constructors
		protected MaskableGraphic(); // 0x00B170E4-0x00B1719C
	
		// Methods
		public virtual Material GetModifiedMaterial(Material baseMaterial); // 0x00B2C350-0x00B2C4D8
		public virtual void Cull(Rect clipRect, bool validRect); // 0x00B2C4D8-0x00B2C538
		private void UpdateCull(bool cull); // 0x00B2C894-0x00B2C978
		public virtual void SetClipRect(Rect clipRect, bool validRect); // 0x00B2C978-0x00B2C9F4
		protected override void OnEnable(); // 0x00B1B4EC-0x00B1B5BC
		protected override void OnDisable(); // 0x00B1B63C-0x00B1B740
		protected override void OnTransformParentChanged(); // 0x00B17FBC-0x00B1801C
		[EditorBrowsable] // 0x004FAD84-0x004FADD8
		[Obsolete] // 0x004FAD84-0x004FADD8
		public virtual void ParentMaskStateChanged(); // 0x00B2CB6C-0x00B2CB70
		protected override void OnCanvasHierarchyChanged(); // 0x00B1BA08-0x00B1BA68
		private void UpdateClipParent(); // 0x00B2C9F4-0x00B2CB6C
		public virtual void RecalculateClipping(); // 0x00B2CB70-0x00B2CB74
		public virtual void RecalculateMasking(); // 0x00B2CB74-0x00B2CC00
	}

	public class MaskUtilities // TypeDefIndex: 2657
	{
		// Methods
		public static void Notify2DMaskStateChanged(Component mask); // 0x00B2B838-0x00B2BA9C
		public static void NotifyStencilStateChanged(Component mask); // 0x00B2AD08-0x00B2AF68
		public static Transform FindRootSortOverrideCanvas(Transform start); // 0x00B2B41C-0x00B2B59C
		public static int GetStencilDepth(Transform transform, Transform stopAfter); // 0x00B2B59C-0x00B2B838
		public static bool IsDescendantOrSelf(Transform father, Transform child); // 0x00B2BA9C-0x00B2BC20
		public static RectMask2D GetRectMaskForClippable(IClippable clippable); // 0x00B2BC20-0x00B2C008
		public static void GetRectMasksForClip(RectMask2D clipper, List<RectMask2D> masks); // 0x00B2C008-0x00B2C300
	}

	public interface IMaterialModifier // TypeDefIndex: 2658
	{
		// Methods
		Material GetModifiedMaterial(Material baseMaterial);
	}

	internal static class Misc // TypeDefIndex: 2659
	{
		// Methods
		public static void DestroyImmediate(UnityEngine.Object obj); // 0x00C54898-0x00C54970
	}

	internal static class MultipleDisplayUtilities // TypeDefIndex: 2660
	{
		// Methods
		public static bool GetRelativeMousePositionForDrag(PointerEventData eventData, ref Vector2 position); // 0x00C54970-0x00C54AB0
		public static Vector2 GetMousePositionRelativeToMainDisplayResolution(); // 0x00C54AB0-0x00C54CB8
	}

	[Serializable]
	public struct Navigation : IEquatable<Navigation> // TypeDefIndex: 2661
	{
		// Fields
		[SerializeField] // 0x004F9E48-0x004F9E58
		private Mode m_Mode; // 0x00
		[SerializeField] // 0x004F9E58-0x004F9E68
		private Selectable m_SelectOnUp; // 0x08
		[SerializeField] // 0x004F9E68-0x004F9E78
		private Selectable m_SelectOnDown; // 0x10
		[SerializeField] // 0x004F9E78-0x004F9E88
		private Selectable m_SelectOnLeft; // 0x18
		[SerializeField] // 0x004F9E88-0x004F9E98
		private Selectable m_SelectOnRight; // 0x20
	
		// Properties
		public Mode mode { get; set; } // 0x0058F480-0x0058F488 0x0058F488-0x0058F490
		public Selectable selectOnUp { get; set; } // 0x0058F490-0x0058F498 0x0058F498-0x0058F4A0
		public Selectable selectOnDown { get; set; } // 0x0058F4A0-0x0058F4A8 0x0058F4A8-0x0058F4B0
		public Selectable selectOnLeft { get; set; } // 0x0058F4B0-0x0058F4B8 0x0058F4B8-0x0058F4C0
		public Selectable selectOnRight { get; set; } // 0x0058F4C0-0x0058F4C8 0x0058F4C8-0x0058F4D0
		public static Navigation defaultNavigation { get; } // 0x00C54CB8-0x00C54E20 
	
		// Nested types
		[Flags] // 0x004F81E0-0x004F81F0
		public enum Mode // TypeDefIndex: 2662
		{
			None = 0,
			Horizontal = 1,
			Vertical = 2,
			Automatic = 3,
			Explicit = 4
		}
	
		// Methods
		public bool Equals(Navigation other); // 0x0058F4D0-0x0058F7E4
	}

	[AddComponentMenu] // 0x004F81F0-0x004F822C
	public class RawImage : MaskableGraphic // TypeDefIndex: 2663
	{
		// Fields
		[FormerlySerializedAs] // 0x004F9E98-0x004F9EE4
		[SerializeField] // 0x004F9E98-0x004F9EE4
		private Texture m_Texture; // 0xC0
		[SerializeField] // 0x004F9EE4-0x004F9EF4
		private Rect m_UVRect; // 0xC8
	
		// Properties
		public override Texture mainTexture { get; } // 0x00C559E4-0x00C55B64 
		public Texture texture { get; set; } // 0x00C55B64-0x00C55B6C 0x00C55B6C-0x00C55C28
		public Rect uvRect { get; set; } // 0x00C55C28-0x00C55C34 0x00C55C34-0x00C55CC4
	
		// Constructors
		protected RawImage(); // 0x00C55978-0x00C559E4
	
		// Methods
		public override void SetNativeSize(); // 0x00C55CC4-0x00C55E8C
		protected override void OnPopulateMesh(VertexHelper vh); // 0x00C55E8C-0x00C562AC
		protected override void OnDidApplyAnimationProperties(); // 0x00C56484-0x00C564C0
	}

	[AddComponentMenu] // 0x004F822C-0x004F82D8
	[DisallowMultipleComponent] // 0x004F822C-0x004F82D8
	[ExecuteAlways] // 0x004F822C-0x004F82D8
	[RequireComponent] // 0x004F822C-0x004F82D8
	public class RectMask2D : UIBehaviour, IClipper, ICanvasRaycastFilter // TypeDefIndex: 2664
	{
		// Fields
		[NonSerialized]
		private readonly RectangularVertexClipper m_VertexClipper; // 0x18
		[NonSerialized]
		private RectTransform m_RectTransform; // 0x20
		[NonSerialized]
		private HashSet<MaskableGraphic> m_MaskableTargets; // 0x28
		[NonSerialized]
		private HashSet<IClippable> m_ClipTargets; // 0x30
		[NonSerialized]
		private bool m_ShouldRecalculateClipRects; // 0x38
		[NonSerialized]
		private List<RectMask2D> m_Clippers; // 0x40
		[NonSerialized]
		private Rect m_LastClipRectCanvasSpace; // 0x48
		[NonSerialized]
		private bool m_ForceClip; // 0x58
		[NonSerialized]
		private Canvas m_Canvas; // 0x60
		private Vector3[] m_Corners; // 0x68
	
		// Properties
		private Canvas Canvas { get; } // 0x00C564C0-0x00C56600 
		public Rect canvasRect { get; } // 0x00C56600-0x00C56650 
		public RectTransform rectTransform { get; } // 0x00C56650-0x00C566B0 
		private Rect rootCanvasRect { get; } // 0x00C56B58-0x00C56C98 
	
		// Constructors
		protected RectMask2D(); // 0x00C56840-0x00C56934
	
		// Methods
		protected override void OnEnable(); // 0x00C569A4-0x00C569E4
		protected override void OnDisable(); // 0x00C569E4-0x00C56A90
		public virtual bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera); // 0x00C56A90-0x00C56B58
		public virtual void PerformClipping(); // 0x00C56C98-0x00C573D0
		public void AddClippable(IClippable clippable); // 0x00C573D0-0x00C574D8
		public void RemoveClippable(IClippable clippable); // 0x00C574D8-0x00C57660
		protected override void OnTransformParentChanged(); // 0x00C57660-0x00C5768C
		protected override void OnCanvasHierarchyChanged(); // 0x00C5768C-0x00C576BC
	}

	[AddComponentMenu] // 0x004F82D8-0x004F8374
	[ExecuteAlways] // 0x004F82D8-0x004F8374
	[RequireComponent] // 0x004F82D8-0x004F8374
	public class Scrollbar : Selectable, IBeginDragHandler, IDragHandler, IInitializePotentialDragHandler, ICanvasElement // TypeDefIndex: 2665
	{
		// Fields
		[SerializeField] // 0x004F9EF4-0x004F9F04
		private RectTransform m_HandleRect; // 0xE8
		[SerializeField] // 0x004F9F04-0x004F9F14
		private Direction m_Direction; // 0xF0
		[Range] // 0x004F9F14-0x004F9F54
		[SerializeField] // 0x004F9F14-0x004F9F54
		private float m_Value; // 0xF4
		[Range] // 0x004F9F54-0x004F9F94
		[SerializeField] // 0x004F9F54-0x004F9F94
		private float m_Size; // 0xF8
		[Range] // 0x004F9F94-0x004F9FD4
		[SerializeField] // 0x004F9F94-0x004F9FD4
		private int m_NumberOfSteps; // 0xFC
		[SerializeField] // 0x004F9FD4-0x004FA010
		[Space] // 0x004F9FD4-0x004FA010
		private ScrollEvent m_OnValueChanged; // 0x100
		private RectTransform m_ContainerRect; // 0x108
		private Vector2 m_Offset; // 0x110
		private DrivenRectTransformTracker m_Tracker; // 0x118
		private Coroutine m_PointerDownRepeat; // 0x120
		private bool isPointerDownAndNotDragging; // 0x128
		private bool m_DelayedUpdateVisuals; // 0x129
	
		// Properties
		public RectTransform handleRect { get; set; } // 0x00C5E014-0x00C5E01C 0x00C5E01C-0x00C5E0A0
		public Direction direction { get; set; } // 0x00C5E378-0x00C5E380 0x00C5E380-0x00C5E3FC
		public float value { get; set; } // 0x00C5E5EC-0x00C5E6F8 0x00C5C940-0x00C5C948
		public float size { get; set; } // 0x00C5E7D0-0x00C5E7D8 0x00C5C748-0x00C5C7F0
		public int numberOfSteps { get; set; } // 0x00C5E7D8-0x00C5E7E0 0x00C5E7E0-0x00C5E86C
		public ScrollEvent onValueChanged { get; set; } // 0x00C5E86C-0x00C5E874 0x00C5E874-0x00C5E87C
		private float stepSize { get; } // 0x00C5E87C-0x00C5E8A8 
		private Axis axis { get; } // 0x00C5EC30-0x00C5EC40 
		private bool reverseValue { get; } // 0x00C5EC40-0x00C5EC54 
		Transform ICanvasElement.transform { get; } // 0x00C60088-0x00C60090 
	
		// Nested types
		public enum Direction // TypeDefIndex: 2666
		{
			LeftToRight = 0,
			RightToLeft = 1,
			BottomToTop = 2,
			TopToBottom = 3
		}
	
		[Serializable]
		public class ScrollEvent : UnityEvent<float> // TypeDefIndex: 2667
		{
			// Constructors
			public ScrollEvent(); // 0x00C5E4B8-0x00C5E508
		}
	
		private enum Axis // TypeDefIndex: 2668
		{
			Horizontal = 0,
			Vertical = 1
		}
	
		[CompilerGenerated] // 0x004F8374-0x004F8384
		private sealed class _ClickRepeat_d__57 : IEnumerator<object> // TypeDefIndex: 2669
		{
			// Fields
			private int __1__state; // 0x10
			private object __2__current; // 0x18
			public Scrollbar __4__this; // 0x20
			public PointerEventData eventData; // 0x28
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x004FAE5C-0x004FAE6C */ get; } // 0x00C60268-0x00C60270 
			object IEnumerator.Current { [DebuggerHidden] /* 0x004FAE7C-0x004FAE8C */ get; } // 0x00C602D4-0x00C602DC 
	
			// Constructors
			[DebuggerHidden] // 0x004FAE3C-0x004FAE4C
			public _ClickRepeat_d__57(int __1__state); // 0x00C5F59C-0x00C5F5C8
	
			// Methods
			[DebuggerHidden] // 0x004FAE4C-0x004FAE5C
			void IDisposable.Dispose(); // 0x00C60090-0x00C60094
			private bool MoveNext(); // 0x00C60094-0x00C60268
			[DebuggerHidden] // 0x004FAE6C-0x004FAE7C
			void IEnumerator.Reset(); // 0x00C60270-0x00C602D4
		}
	
		// Constructors
		protected Scrollbar(); // 0x00C5E3FC-0x00C5E4B8
	
		// Methods
		public virtual void SetValueWithoutNotify(float input); // 0x00C5E7C8-0x00C5E7D0
		public virtual void Rebuild(CanvasUpdate executing); // 0x00C5E8A8-0x00C5E8AC
		public virtual void LayoutComplete(); // 0x00C5E8AC-0x00C5E8B0
		public virtual void GraphicUpdateComplete(); // 0x00C5E8B0-0x00C5E8B4
		protected override void OnEnable(); // 0x00C5E8B4-0x00C5E8F0
		protected override void OnDisable(); // 0x00C5EB10-0x00C5EB3C
		protected virtual void Update(); // 0x00C5EBD4-0x00C5EBE8
		private void UpdateCachedReferences(); // 0x00C5E0A0-0x00C5E19C
		private void Set(float input, bool sendCallback = true /* Metadata: 0x001F4B69 */); // 0x00C5E6F8-0x00C5E7C8
		protected override void OnRectTransformDimensionsChange(); // 0x00C5EBE8-0x00C5EC30
		private void UpdateVisuals(); // 0x00C5E19C-0x00C5E378
		private void UpdateDrag(PointerEventData eventData); // 0x00C5EC54-0x00C5EF0C
		private void DoUpdateDrag(Vector2 handleCorner, float remainingSize); // 0x00C5EF0C-0x00C5F050
		private bool MayDrag(PointerEventData eventData); // 0x00C5F050-0x00C5F0BC
		public virtual void OnBeginDrag(PointerEventData eventData); // 0x00C5F0BC-0x00C5F2CC
		public virtual void OnDrag(PointerEventData eventData); // 0x00C5F2CC-0x00C5F378
		public override void OnPointerDown(PointerEventData eventData); // 0x00C5F378-0x00C5F3D4
		[IteratorStateMachine] // 0x004FADD8-0x004FAE3C
		protected IEnumerator ClickRepeat(PointerEventData eventData); // 0x00C5F51C-0x00C5F59C
		public override void OnPointerUp(PointerEventData eventData); // 0x00C5F5C8-0x00C5F5EC
		public override void OnMove(AxisEventData eventData); // 0x00C5F614-0x00C5F8AC
		public override Selectable FindSelectableOnLeft(); // 0x00C5F948-0x00C5F96C
		public override Selectable FindSelectableOnRight(); // 0x00C5FAAC-0x00C5FAD0
		public override Selectable FindSelectableOnUp(); // 0x00C5FC10-0x00C5FC34
		public override Selectable FindSelectableOnDown(); // 0x00C5FD74-0x00C5FD98
		public virtual void OnInitializePotentialDrag(PointerEventData eventData); // 0x00C5FED8-0x00C5FEF4
		public void SetDirection(Direction direction, bool includeRectLayouts); // 0x00C5FEF4-0x00C60088
	}

	[AddComponentMenu] // 0x004F8384-0x004F8440
	[DisallowMultipleComponent] // 0x004F8384-0x004F8440
	[ExecuteAlways] // 0x004F8384-0x004F8440
	[RequireComponent] // 0x004F8384-0x004F8440
	[SelectionBase] // 0x004F8384-0x004F8440
	public class ScrollRect : UIBehaviour, IInitializePotentialDragHandler, IBeginDragHandler, IEndDragHandler, IDragHandler, IScrollHandler, ICanvasElement, ILayoutElement, ILayoutGroup // TypeDefIndex: 2670
	{
		// Fields
		[SerializeField] // 0x004FA010-0x004FA020
		private RectTransform m_Content; // 0x18
		[SerializeField] // 0x004FA020-0x004FA030
		private bool m_Horizontal; // 0x20
		[SerializeField] // 0x004FA030-0x004FA040
		private bool m_Vertical; // 0x21
		[SerializeField] // 0x004FA040-0x004FA050
		private MovementType m_MovementType; // 0x24
		[SerializeField] // 0x004FA050-0x004FA060
		private float m_Elasticity; // 0x28
		[SerializeField] // 0x004FA060-0x004FA070
		private bool m_Inertia; // 0x2C
		[SerializeField] // 0x004FA070-0x004FA080
		private float m_DecelerationRate; // 0x30
		[SerializeField] // 0x004FA080-0x004FA090
		private float m_ScrollSensitivity; // 0x34
		[SerializeField] // 0x004FA090-0x004FA0A0
		private RectTransform m_Viewport; // 0x38
		[SerializeField] // 0x004FA0A0-0x004FA0B0
		private Scrollbar m_HorizontalScrollbar; // 0x40
		[SerializeField] // 0x004FA0B0-0x004FA0C0
		private Scrollbar m_VerticalScrollbar; // 0x48
		[SerializeField] // 0x004FA0C0-0x004FA0D0
		private ScrollbarVisibility m_HorizontalScrollbarVisibility; // 0x50
		[SerializeField] // 0x004FA0D0-0x004FA0E0
		private ScrollbarVisibility m_VerticalScrollbarVisibility; // 0x54
		[SerializeField] // 0x004FA0E0-0x004FA0F0
		private float m_HorizontalScrollbarSpacing; // 0x58
		[SerializeField] // 0x004FA0F0-0x004FA100
		private float m_VerticalScrollbarSpacing; // 0x5C
		[SerializeField] // 0x004FA100-0x004FA110
		private ScrollRectEvent m_OnValueChanged; // 0x60
		private Vector2 m_PointerStartLocalCursor; // 0x68
		protected Vector2 m_ContentStartPosition; // 0x70
		private RectTransform m_ViewRect; // 0x78
		protected Bounds m_ContentBounds; // 0x80
		private Bounds m_ViewBounds; // 0x98
		private Vector2 m_Velocity; // 0xB0
		private bool m_Dragging; // 0xB8
		private bool m_Scrolling; // 0xB9
		private Vector2 m_PrevPosition; // 0xBC
		private Bounds m_PrevContentBounds; // 0xC4
		private Bounds m_PrevViewBounds; // 0xDC
		[NonSerialized]
		private bool m_HasRebuiltLayout; // 0xF4
		private bool m_HSliderExpand; // 0xF5
		private bool m_VSliderExpand; // 0xF6
		private float m_HSliderHeight; // 0xF8
		private float m_VSliderWidth; // 0xFC
		[NonSerialized]
		private RectTransform m_Rect; // 0x100
		private RectTransform m_HorizontalScrollbarRect; // 0x108
		private RectTransform m_VerticalScrollbarRect; // 0x110
		private DrivenRectTransformTracker m_Tracker; // 0x118
		private readonly Vector3[] m_Corners; // 0x120
	
		// Properties
		public RectTransform content { get; set; } // 0x00C59CE4-0x00C59CEC 0x00C59CEC-0x00C59CF4
		public bool horizontal { get; set; } // 0x00C59CF4-0x00C59CFC 0x00C59CFC-0x00C59D08
		public bool vertical { get; set; } // 0x00C59D08-0x00C59D10 0x00C59D10-0x00C59D1C
		public MovementType movementType { get; set; } // 0x00C59D1C-0x00C59D24 0x00C59D24-0x00C59D2C
		public float elasticity { get; set; } // 0x00C59D2C-0x00C59D34 0x00C59D34-0x00C59D3C
		public bool inertia { get; set; } // 0x00C59D3C-0x00C59D44 0x00C59D44-0x00C59D50
		public float decelerationRate { get; set; } // 0x00C59D50-0x00C59D58 0x00C59D58-0x00C59D60
		public float scrollSensitivity { get; set; } // 0x00C59D60-0x00C59D68 0x00C59D68-0x00C59D70
		public RectTransform viewport { get; set; } // 0x00C59D70-0x00C59D78 0x00C59D78-0x00C59D80
		public Scrollbar horizontalScrollbar { get; set; } // 0x00C59E44-0x00C59E4C 0x00C59E4C-0x00C59FC4
		public Scrollbar verticalScrollbar { get; set; } // 0x00C59FC4-0x00C59FCC 0x00C59FCC-0x00C5A144
		public ScrollbarVisibility horizontalScrollbarVisibility { get; set; } // 0x00C5A144-0x00C5A14C 0x00C5A14C-0x00C5A154
		public ScrollbarVisibility verticalScrollbarVisibility { get; set; } // 0x00C5A154-0x00C5A15C 0x00C5A15C-0x00C5A164
		public float horizontalScrollbarSpacing { get; set; } // 0x00C5A164-0x00C5A16C 0x00C5A16C-0x00C5A174
		public float verticalScrollbarSpacing { get; set; } // 0x00C5A20C-0x00C5A214 0x00C5A214-0x00C5A21C
		public ScrollRectEvent onValueChanged { get; set; } // 0x00C5A21C-0x00C5A224 0x00C5A224-0x00C5A22C
		protected RectTransform viewRect { get; } // 0x00C5A22C-0x00C5A320 
		public Vector2 velocity { get; set; } // 0x00C5A320-0x00C5A328 0x00C5A328-0x00C5A330
		private RectTransform rectTransform { get; } // 0x00C5A330-0x00C5A3C8 
		public Vector2 normalizedPosition { get; set; } // 0x00C5C6A4-0x00C5C6FC 0x00C5CA98-0x00C5CAEC
		public float horizontalNormalizedPosition { get; set; } // 0x00C5C7F0-0x00C5C940 0x00C5CAEC-0x00C5CB00
		public float verticalNormalizedPosition { get; set; } // 0x00C5C948-0x00C5CA98 0x00C5CB00-0x00C5CB14
		private bool hScrollingNeeded { get; } // 0x00C5CD5C-0x00C5CDC4 
		private bool vScrollingNeeded { get; } // 0x00C5CDC4-0x00C5CE2C 
		public virtual float minWidth { get; } // 0x00C5CE34-0x00C5CE3C 
		public virtual float preferredWidth { get; } // 0x00C5CE3C-0x00C5CE44 
		public virtual float flexibleWidth { get; } // 0x00C5CE44-0x00C5CE4C 
		public virtual float minHeight { get; } // 0x00C5CE4C-0x00C5CE54 
		public virtual float preferredHeight { get; } // 0x00C5CE54-0x00C5CE5C 
		public virtual float flexibleHeight { get; } // 0x00C5CE5C-0x00C5CE64 
		public virtual int layoutPriority { get; } // 0x00C5CE64-0x00C5CE6C 
		Transform ICanvasElement.transform { get; } // 0x00C5E00C-0x00C5E014 
	
		// Nested types
		public enum MovementType // TypeDefIndex: 2671
		{
			Unrestricted = 0,
			Elastic = 1,
			Clamped = 2
		}
	
		public enum ScrollbarVisibility // TypeDefIndex: 2672
		{
			Permanent = 0,
			AutoHide = 1,
			AutoHideAndExpandViewport = 2
		}
	
		[Serializable]
		public class ScrollRectEvent : UnityEvent<Vector2> // TypeDefIndex: 2673
		{
			// Constructors
			public ScrollRectEvent(); // 0x00C5A4B8-0x00C5A508
		}
	
		// Constructors
		protected ScrollRect(); // 0x00C5A3C8-0x00C5A4B8
	
		// Methods
		public virtual void Rebuild(CanvasUpdate executing); // 0x00C5A508-0x00C5A5BC
		public virtual void LayoutComplete(); // 0x00C5B1D8-0x00C5B1DC
		public virtual void GraphicUpdateComplete(); // 0x00C5B1DC-0x00C5B1E0
		private void UpdateCachedData(); // 0x00C5A5BC-0x00C5A984
		protected override void OnEnable(); // 0x00C5B1E0-0x00C5B384
		protected override void OnDisable(); // 0x00C5B384-0x00C5B59C
		public override bool IsActive(); // 0x00C5B59C-0x00C5B62C
		private void EnsureLayoutHasRebuilt(); // 0x00C5B62C-0x00C5B6B0
		public virtual void StopMovement(); // 0x00C5B6B0-0x00C5B71C
		public virtual void OnScroll(PointerEventData data); // 0x00C5B71C-0x00C5B9CC
		public virtual void OnInitializePotentialDrag(PointerEventData eventData); // 0x00C5BA08-0x00C5BA94
		public virtual void OnBeginDrag(PointerEventData eventData); // 0x00C5BA94-0x00C5BBC8
		public virtual void OnEndDrag(PointerEventData eventData); // 0x00C5BBC8-0x00C5BBF0
		public virtual void OnDrag(PointerEventData eventData); // 0x00C5BBF0-0x00C5BE38
		protected virtual void SetContentAnchoredPosition(Vector2 position); // 0x00C5BEE4-0x00C5BFFC
		protected virtual void LateUpdate(); // 0x00C5BFFC-0x00C5C6A4
		protected void UpdatePrevData(); // 0x00C5B0FC-0x00C5B1D8
		private void UpdateScrollbars(Vector2 offset); // 0x00C5AEE0-0x00C5B0FC
		private void SetHorizontalNormalizedPosition(float value); // 0x00C5CB14-0x00C5CB28
		private void SetVerticalNormalizedPosition(float value); // 0x00C5CB28-0x00C5CB3C
		protected virtual void SetNormalizedPosition(float value, int axis); // 0x00C5CB3C-0x00C5CD58
		private static float RubberDelta(float overStretching, float viewSize); // 0x00C5BE38-0x00C5BEE4
		protected override void OnRectTransformDimensionsChange(); // 0x00C5CD58-0x00C5CD5C
		public virtual void CalculateLayoutInputHorizontal(); // 0x00C5CE2C-0x00C5CE30
		public virtual void CalculateLayoutInputVertical(); // 0x00C5CE30-0x00C5CE34
		public virtual void SetLayoutHorizontal(); // 0x00C5CE6C-0x00C5D448
		public virtual void SetLayoutVertical(); // 0x00C5D53C-0x00C5D698
		private void UpdateScrollbarVisibility(); // 0x00C5C6FC-0x00C5C748
		private static void UpdateOneScrollbarVisibility(bool xScrollingNeeded, bool xAxisEnabled, ScrollbarVisibility scrollbarVisibility, Scrollbar scrollbar); // 0x00C5D9C4-0x00C5DACC
		private void UpdateScrollbarLayout(); // 0x00C5D698-0x00C5D9C4
		protected void UpdateBounds(); // 0x00C5A984-0x00C5AEE0
		internal static void AdjustBounds(ref Bounds viewBounds, ref Vector2 contentPivot, ref Vector3 contentSize, ref Vector3 contentPos); // 0x00C5DACC-0x00C5DC0C
		private Bounds GetBounds(); // 0x00C5D448-0x00C5D53C
		internal static Bounds InternalGetBounds(Vector3[] corners, ref Matrix4x4 viewWorldToLocalMatrix); // 0x00C5DC0C-0x00C5DE18
		private Vector2 CalculateOffset(Vector2 delta); // 0x00C5B9CC-0x00C5BA08
		internal static Vector2 InternalCalculateOffset(ref Bounds viewBounds, ref Bounds contentBounds, bool horizontal, bool vertical, MovementType movementType, ref Vector2 delta); // 0x00C5DE18-0x00C5E00C
		protected void SetDirty(); // 0x00C5A174-0x00C5A20C
		protected void SetDirtyCaching(); // 0x00C59D80-0x00C59E44
	}

	[AddComponentMenu] // 0x004F8440-0x004F84B0
	[DisallowMultipleComponent] // 0x004F8440-0x004F84B0
	[ExecuteAlways] // 0x004F8440-0x004F84B0
	[SelectionBase] // 0x004F8440-0x004F84B0
	public class Selectable : UIBehaviour, IMoveHandler, IPointerDownHandler, IPointerUpHandler, IPointerEnterHandler, IPointerExitHandler, ISelectHandler, IDeselectHandler // TypeDefIndex: 2674
	{
		// Fields
		private static Selectable[] s_Selectables; // 0x00
		private static int s_SelectableCount; // 0x08
		private static bool s_IsDirty; // 0x0C
		[FormerlySerializedAs] // 0x004FA110-0x004FA15C
		[SerializeField] // 0x004FA110-0x004FA15C
		private Navigation m_Navigation; // 0x18
		[FormerlySerializedAs] // 0x004FA15C-0x004FA1A8
		[SerializeField] // 0x004FA15C-0x004FA1A8
		private Transition m_Transition; // 0x40
		[FormerlySerializedAs] // 0x004FA1A8-0x004FA1F4
		[SerializeField] // 0x004FA1A8-0x004FA1F4
		private ColorBlock m_Colors; // 0x44
		[FormerlySerializedAs] // 0x004FA1F4-0x004FA240
		[SerializeField] // 0x004FA1F4-0x004FA240
		private SpriteState m_SpriteState; // 0xA0
		[FormerlySerializedAs] // 0x004FA240-0x004FA28C
		[SerializeField] // 0x004FA240-0x004FA28C
		private AnimationTriggers m_AnimationTriggers; // 0xC0
		[SerializeField] // 0x004FA28C-0x004FA2D8
		[Tooltip] // 0x004FA28C-0x004FA2D8
		private bool m_Interactable; // 0xC8
		[FormerlySerializedAs] // 0x004FA2D8-0x004FA348
		[FormerlySerializedAs] // 0x004FA2D8-0x004FA348
		[SerializeField] // 0x004FA2D8-0x004FA348
		private Graphic m_TargetGraphic; // 0xD0
		private bool m_GroupsAllowInteraction; // 0xD8
		private bool m_WillRemove; // 0xD9
		[CompilerGenerated] // 0x004FA348-0x004FA358
		private bool _isPointerInside_k__BackingField; // 0xDA
		[CompilerGenerated] // 0x004FA358-0x004FA368
		private bool _isPointerDown_k__BackingField; // 0xDB
		[CompilerGenerated] // 0x004FA368-0x004FA378
		private bool _hasSelection_k__BackingField; // 0xDC
		private readonly List<CanvasGroup> m_CanvasGroupCache; // 0xE0
	
		// Properties
		public static Selectable[] allSelectablesArray { get; } // 0x00C602DC-0x00C603BC 
		public static int allSelectableCount { get; } // 0x00C605D4-0x00C6063C 
		[Obsolete] // 0x004FB2F4-0x004FB330
		public static List<Selectable> allSelectables { get; } // 0x00C6063C-0x00C606D0 
		public Navigation navigation { get; set; } // 0x00C607F8-0x00C60814 0x00C60814-0x00C608B4
		public Transition transition { get; set; } // 0x00C60924-0x00C6092C 0x00C6092C-0x00C609A8
		public ColorBlock colors { get; set; } // 0x00C609A8-0x00C609B8 0x00C609B8-0x00C60A58
		public SpriteState spriteState { get; set; } // 0x00C60A58-0x00C60A6C 0x00C60A6C-0x00C60AFC
		public AnimationTriggers animationTriggers { get; set; } // 0x00C60AFC-0x00C60B04 0x00C60B04-0x00C60B80
		public Graphic targetGraphic { get; set; } // 0x00C60B80-0x00C60B88 0x00C60B88-0x00C60C04
		public bool interactable { get; set; } // 0x00C60C04-0x00C60C0C 0x00C60C0C-0x00C60D94
		private bool isPointerInside { [CompilerGenerated] /* 0x004FAE8C-0x004FAE9C */ get; [CompilerGenerated] /* 0x004FAE9C-0x004FAEAC */ set; } // 0x00C60D94-0x00C60D9C 0x00C60D9C-0x00C60DA8
		private bool isPointerDown { [CompilerGenerated] /* 0x004FAEAC-0x004FAEBC */ get; [CompilerGenerated] /* 0x004FAEBC-0x004FAECC */ set; } // 0x00C60DA8-0x00C60DB0 0x00C60DB0-0x00C60DBC
		private bool hasSelection { [CompilerGenerated] /* 0x004FAECC-0x004FAEDC */ get; [CompilerGenerated] /* 0x004FAEDC-0x004FAEEC */ set; } // 0x00C60DBC-0x00C60DC4 0x00C60DC4-0x00C60DD0
		public Image image { get; set; } // 0x00C60DD0-0x00C60E54 0x00C60E54-0x00C60E5C
		public Animator animator { get; } // 0x00C60E5C-0x00C60EAC 
		protected SelectionState currentSelectionState { get; } // 0x00C61120-0x00C6117C 
	
		// Nested types
		public enum Transition // TypeDefIndex: 2675
		{
			None = 0,
			ColorTint = 1,
			SpriteSwap = 2,
			Animation = 3
		}
	
		protected enum SelectionState // TypeDefIndex: 2676
		{
			Normal = 0,
			Highlighted = 1,
			Pressed = 2,
			Selected = 3,
			Disabled = 4
		}
	
		// Constructors
		protected Selectable(); // 0x00C5E508-0x00C5E5EC
		static Selectable(); // 0x00C621CC-0x00C62244
	
		// Methods
		public static int AllSelectablesNoAlloc(Selectable[] selectables); // 0x00C606D0-0x00C607F8
		protected override void Awake(); // 0x00C60EAC-0x00C60F3C
		protected override void OnCanvasGroupChanged(); // 0x00C60F3C-0x00C610FC
		public virtual bool IsInteractable(); // 0x00C610FC-0x00C6111C
		protected override void OnDidApplyAnimationProperties(); // 0x00C6111C-0x00C61120
		protected override void OnEnable(); // 0x00C5E8F0-0x00C5EB10
		protected override void OnTransformParentChanged(); // 0x00C6117C-0x00C611B0
		private void OnSetProperty(); // 0x00C608B4-0x00C60924
		protected override void OnDisable(); // 0x00C5EB3C-0x00C5EBD4
		private static void RemoveInvalidSelectables(); // 0x00C603BC-0x00C605D4
		protected virtual void InstantClearState(); // 0x00C611B0-0x00C61244
		protected virtual void DoStateTransition(SelectionState state, bool instant); // 0x00C615A0-0x00C6174C
		public Selectable FindSelectable(Vector3 dir); // 0x00C6174C-0x00C61C04
		private static Vector3 GetPointOnRectEdge(RectTransform rect, Vector2 dir); // 0x00C61C04-0x00C61E3C
		private void Navigate(AxisEventData eventData, Selectable sel); // 0x00C61E3C-0x00C61F08
		public virtual Selectable FindSelectableOnLeft(); // 0x00C5F96C-0x00C5FAAC
		public virtual Selectable FindSelectableOnRight(); // 0x00C5FAD0-0x00C5FC10
		public virtual Selectable FindSelectableOnUp(); // 0x00C5FC34-0x00C5FD74
		public virtual Selectable FindSelectableOnDown(); // 0x00C5FD98-0x00C5FED8
		public virtual void OnMove(AxisEventData eventData); // 0x00C5F8AC-0x00C5F948
		private void StartColorTween(Color targetColor, bool instant); // 0x00C61244-0x00C6133C
		private void DoSpriteSwap(Sprite newSprite); // 0x00C6133C-0x00C613F4
		private void TriggerAnimation(string triggername); // 0x00C613F4-0x00C615A0
		protected bool IsHighlighted(); // 0x00C61F08-0x00C61F70
		protected bool IsPressed(); // 0x00C61F70-0x00C61FC8
		private void EvaluateAndTransitionToSelectionState(); // 0x00C61FC8-0x00C62070
		public virtual void OnPointerDown(PointerEventData eventData); // 0x00C5F3D4-0x00C5F51C
		public virtual void OnPointerUp(PointerEventData eventData); // 0x00C5F5EC-0x00C5F614
		public virtual void OnPointerEnter(PointerEventData eventData); // 0x00C62070-0x00C6207C
		public virtual void OnPointerExit(PointerEventData eventData); // 0x00C6207C-0x00C62084
		public virtual void OnSelect(BaseEventData eventData); // 0x00C62084-0x00C62090
		public virtual void OnDeselect(BaseEventData eventData); // 0x00C62090-0x00C62098
		public virtual void Select(); // 0x00C62098-0x00C621CC
	}

	internal static class SetPropertyUtility // TypeDefIndex: 2677
	{
		// Methods
		public static bool SetColor(ref Color currentValue, Color newValue); // 0x00C62244-0x00C6228C
		public static bool SetStruct<T>(ref T currentValue, T newValue)
			where T : struct;
		public static bool SetClass<T>(ref T currentValue, T newValue)
			where T : class;
	}

	[AddComponentMenu] // 0x004F84B0-0x004F854C
	[ExecuteAlways] // 0x004F84B0-0x004F854C
	[RequireComponent] // 0x004F84B0-0x004F854C
	public class Slider : Selectable, IDragHandler, IInitializePotentialDragHandler, ICanvasElement // TypeDefIndex: 2678
	{
		// Fields
		[SerializeField] // 0x004FA378-0x004FA388
		private RectTransform m_FillRect; // 0xE8
		[SerializeField] // 0x004FA388-0x004FA398
		private RectTransform m_HandleRect; // 0xF0
		[SerializeField] // 0x004FA398-0x004FA3D0
		[Space] // 0x004FA398-0x004FA3D0
		private Direction m_Direction; // 0xF8
		[SerializeField] // 0x004FA3D0-0x004FA3E0
		private float m_MinValue; // 0xFC
		[SerializeField] // 0x004FA3E0-0x004FA3F0
		private float m_MaxValue; // 0x100
		[SerializeField] // 0x004FA3F0-0x004FA400
		private bool m_WholeNumbers; // 0x104
		[SerializeField] // 0x004FA400-0x004FA410
		protected float m_Value; // 0x108
		[SerializeField] // 0x004FA410-0x004FA448
		[Space] // 0x004FA410-0x004FA448
		private SliderEvent m_OnValueChanged; // 0x110
		private Image m_FillImage; // 0x118
		private Transform m_FillTransform; // 0x120
		private RectTransform m_FillContainerRect; // 0x128
		private Transform m_HandleTransform; // 0x130
		private RectTransform m_HandleContainerRect; // 0x138
		private Vector2 m_Offset; // 0x140
		private DrivenRectTransformTracker m_Tracker; // 0x148
		private bool m_DelayedUpdateVisuals; // 0x149
	
		// Properties
		public RectTransform fillRect { get; set; } // 0x00C626A8-0x00C626B0 0x00C626B0-0x00C62734
		public RectTransform handleRect { get; set; } // 0x00C62CC0-0x00C62CC8 0x00C62CC8-0x00C62D4C
		public Direction direction { get; set; } // 0x00C62D4C-0x00C62D54 0x00C62D54-0x00C62DD0
		public float minValue { get; set; } // 0x00C62DD0-0x00C62DD8 0x00C62DD8-0x00C62E70
		public float maxValue { get; set; } // 0x00C62E70-0x00C62E78 0x00C62E78-0x00C62F10
		public bool wholeNumbers { get; set; } // 0x00C62F10-0x00C62F18 0x00C62F18-0x00C62FB0
		public virtual float value { get; set; } // 0x00C62FB0-0x00C6309C 0x00C6309C-0x00C630B0
		public float normalizedValue { get; set; } // 0x00C630C4-0x00C631A8 0x00C631A8-0x00C63244
		public SliderEvent onValueChanged { get; set; } // 0x00C63244-0x00C6324C 0x00C6324C-0x00C63254
		private float stepSize { get; } // 0x00C63254-0x00C6327C 
		private Axis axis { get; } // 0x00C6378C-0x00C6379C 
		private bool reverseValue { get; } // 0x00C63778-0x00C6378C 
		Transform ICanvasElement.transform { get; } // 0x00C6429C-0x00C64400 
	
		// Nested types
		public enum Direction // TypeDefIndex: 2679
		{
			LeftToRight = 0,
			RightToLeft = 1,
			BottomToTop = 2,
			TopToBottom = 3
		}
	
		[Serializable]
		public class SliderEvent : UnityEvent<float> // TypeDefIndex: 2680
		{
			// Constructors
			public SliderEvent(); // 0x00C63334-0x00C63384
		}
	
		private enum Axis // TypeDefIndex: 2681
		{
			Horizontal = 0,
			Vertical = 1
		}
	
		// Constructors
		protected Slider(); // 0x00C6327C-0x00C63334
	
		// Methods
		public virtual void SetValueWithoutNotify(float input); // 0x00C630B0-0x00C630C4
		public virtual void Rebuild(CanvasUpdate executing); // 0x00C63384-0x00C63388
		public virtual void LayoutComplete(); // 0x00C63388-0x00C6338C
		public virtual void GraphicUpdateComplete(); // 0x00C6338C-0x00C63390
		protected override void OnEnable(); // 0x00C63390-0x00C633D8
		protected override void OnDisable(); // 0x00C633D8-0x00C63404
		protected virtual void Update(); // 0x00C63404-0x00C63418
		protected override void OnDidApplyAnimationProperties(); // 0x00C63418-0x00C63650
		private void UpdateCachedReferences(); // 0x00C62734-0x00C629FC
		private float ClampValue(float input); // 0x00C63650-0x00C63778
		protected virtual void Set(float input, bool sendCallback = true /* Metadata: 0x001F4BBE */); // 0x00C6379C-0x00C63868
		protected override void OnRectTransformDimensionsChange(); // 0x00C63868-0x00C638B0
		private void UpdateVisuals(); // 0x00C629FC-0x00C62CC0
		private void UpdateDrag(PointerEventData eventData, Camera cam); // 0x00C638B0-0x00C63B58
		private bool MayDrag(PointerEventData eventData); // 0x00C63B58-0x00C63BC4
		public override void OnPointerDown(PointerEventData eventData); // 0x00C63BC4-0x00C63D90
		public virtual void OnDrag(PointerEventData eventData); // 0x00C63D90-0x00C63DE8
		public override void OnMove(AxisEventData eventData); // 0x00C63DE8-0x00C6405C
		public override Selectable FindSelectableOnLeft(); // 0x00C6405C-0x00C64080
		public override Selectable FindSelectableOnRight(); // 0x00C64080-0x00C640A4
		public override Selectable FindSelectableOnUp(); // 0x00C640A4-0x00C640C8
		public override Selectable FindSelectableOnDown(); // 0x00C640C8-0x00C640EC
		public virtual void OnInitializePotentialDrag(PointerEventData eventData); // 0x00C640EC-0x00C64108
		public void SetDirection(Direction direction, bool includeRectLayouts); // 0x00C64108-0x00C6429C
	}

	[Serializable]
	public struct SpriteState : IEquatable<SpriteState> // TypeDefIndex: 2682
	{
		// Fields
		[SerializeField] // 0x004FA448-0x004FA458
		private Sprite m_HighlightedSprite; // 0x00
		[SerializeField] // 0x004FA458-0x004FA468
		private Sprite m_PressedSprite; // 0x08
		[FormerlySerializedAs] // 0x004FA468-0x004FA4B4
		[SerializeField] // 0x004FA468-0x004FA4B4
		private Sprite m_SelectedSprite; // 0x10
		[SerializeField] // 0x004FA4B4-0x004FA4C4
		private Sprite m_DisabledSprite; // 0x18
	
		// Properties
		public Sprite highlightedSprite { get; } // 0x0058F7E4-0x0058F7EC 
		public Sprite pressedSprite { get; } // 0x0058F7EC-0x0058F7F4 
		public Sprite selectedSprite { get; } // 0x0058F7F4-0x0058F7FC 
		public Sprite disabledSprite { get; } // 0x0058F7FC-0x0058F804 
	
		// Methods
		public bool Equals(SpriteState other); // 0x0058F804-0x0058F83C
	}

	public static class StencilMaterial // TypeDefIndex: 2683
	{
		// Fields
		private static List<MatEntry> m_List; // 0x00
	
		// Nested types
		private class MatEntry // TypeDefIndex: 2684
		{
			// Fields
			public Material baseMat; // 0x10
			public Material customMat; // 0x18
			public int count; // 0x20
			public int stencilId; // 0x24
			public StencilOp operation; // 0x28
			public CompareFunction compareFunction; // 0x2C
			public int readMask; // 0x30
			public int writeMask; // 0x34
			public bool useAlphaClip; // 0x38
			public ColorWriteMask colorMask; // 0x3C
	
			// Constructors
			public MatEntry(); // 0x00C64CC4-0x00C64CD4
		}
	
		// Constructors
		static StencilMaterial(); // 0x00C64E8C-0x00C64F00
	
		// Methods
		public static Material Add(Material baseMat, int stencilID, StencilOp operation, CompareFunction compareFunction, ColorWriteMask colorWriteMask); // 0x00C64400-0x00C6449C
		public static Material Add(Material baseMat, int stencilID, StencilOp operation, CompareFunction compareFunction, ColorWriteMask colorWriteMask, int readMask, int writeMask); // 0x00C6449C-0x00C64CC4
		public static void Remove(Material customMat); // 0x00C64CD4-0x00C64E8C
	}

	[AddComponentMenu] // 0x004F854C-0x004F8588
	public class Text : MaskableGraphic, ILayoutElement // TypeDefIndex: 2685
	{
		// Fields
		[SerializeField] // 0x004FA4C4-0x004FA4D4
		private FontData m_FontData; // 0xC0
		[SerializeField] // 0x004FA4D4-0x004FA514
		[TextArea] // 0x004FA4D4-0x004FA514
		protected string m_Text; // 0xC8
		private TextGenerator m_TextCache; // 0xD0
		private TextGenerator m_TextCacheForLayout; // 0xD8
		protected static Material s_DefaultText; // 0x00
		[NonSerialized]
		protected bool m_DisableFontTextureRebuiltCallback; // 0xE0
		private readonly UIVertex[] m_TempVerts; // 0xE8
	
		// Properties
		public TextGenerator cachedTextGenerator { get; } // 0x00C64F8C-0x00C65028 
		public TextGenerator cachedTextGeneratorForLayout { get; } // 0x00C65028-0x00C65094 
		public override Texture mainTexture { get; } // 0x00C65094-0x00C65284 
		public Font font { get; set; } // 0x00C65284-0x00C652A4 0x00C653C4-0x00C654BC
		public virtual string text { get; set; } // 0x00C654BC-0x00C654C4 0x00C654C4-0x00C655A0
		public bool supportRichText { get; set; } // 0x00C655A0-0x00C655C0 0x00C655C0-0x00C65638
		public bool resizeTextForBestFit { get; set; } // 0x00C65638-0x00C65658 0x00C65658-0x00C656D0
		public int resizeTextMinSize { get; set; } // 0x00C656D0-0x00C656F0 0x00C656F0-0x00C6575C
		public int resizeTextMaxSize { get; set; } // 0x00C6575C-0x00C6577C 0x00C6577C-0x00C657E8
		public TextAnchor alignment { get; set; } // 0x00C657E8-0x00C65808 0x00C65808-0x00C65874
		public bool alignByGeometry { get; set; } // 0x00C65874-0x00C65894 0x00C65894-0x00C658DC
		public int fontSize { get; set; } // 0x00C658DC-0x00C658FC 0x00C658FC-0x00C65968
		public HorizontalWrapMode horizontalOverflow { get; set; } // 0x00C65968-0x00C65988 0x00C65988-0x00C659F4
		public VerticalWrapMode verticalOverflow { get; set; } // 0x00C659F4-0x00C65A14 0x00C65A14-0x00C65A80
		public float lineSpacing { get; set; } // 0x00C65A80-0x00C65AA0 0x00C65AA0-0x00C65B0C
		public FontStyle fontStyle { get; set; } // 0x00C65B0C-0x00C65B2C 0x00C65B2C-0x00C65B98
		public float pixelsPerUnit { get; } // 0x00C65B98-0x00C65D08 
		public virtual float minWidth { get; } // 0x00C669FC-0x00C66A04 
		public virtual float preferredWidth { get; } // 0x00C66A04-0x00C66B00 
		public virtual float flexibleWidth { get; } // 0x00C66B00-0x00C66B08 
		public virtual float minHeight { get; } // 0x00C66B08-0x00C66B10 
		public virtual float preferredHeight { get; } // 0x00C66B10-0x00C66BF8 
		public virtual float flexibleHeight { get; } // 0x00C66BF8-0x00C66C00 
		public virtual int layoutPriority { get; } // 0x00C66C00-0x00C66C08 
	
		// Constructors
		protected Text(); // 0x00C64F00-0x00C64F8C
		static Text(); // 0x00C66C08-0x00C66C0C
	
		// Methods
		public void FontTextureChanged(); // 0x00C652A4-0x00C653C4
		protected override void OnEnable(); // 0x00C65D08-0x00C65D94
		protected override void OnDisable(); // 0x00C65D94-0x00C65E08
		protected override void UpdateGeometry(); // 0x00C65E08-0x00C65EA4
		internal void AssignDefaultFont(); // 0x00C65EA4-0x00C65F08
		public TextGenerationSettings GetGenerationSettings(Vector2 extents); // 0x00C65F08-0x00C66100
		public static Vector2 GetTextAnchorPivot(TextAnchor anchor); // 0x00C66100-0x00C66234
		protected override void OnPopulateMesh(VertexHelper toFill); // 0x00C66234-0x00C668DC
		public virtual void CalculateLayoutInputHorizontal(); // 0x00C669F4-0x00C669F8
		public virtual void CalculateLayoutInputVertical(); // 0x00C669F8-0x00C669FC
	}

	[AddComponentMenu] // 0x004F8588-0x004F8614
	[RequireComponent] // 0x004F8588-0x004F8614
	public class Toggle : Selectable, IPointerClickHandler, ISubmitHandler, ICanvasElement // TypeDefIndex: 2686
	{
		// Fields
		public ToggleTransition toggleTransition; // 0xE8
		public Graphic graphic; // 0xF0
		[SerializeField] // 0x004FA514-0x004FA524
		private ToggleGroup m_Group; // 0xF8
		public ToggleEvent onValueChanged; // 0x100
		[SerializeField] // 0x004FA524-0x004FA570
		[Tooltip] // 0x004FA524-0x004FA570
		private bool m_IsOn; // 0x108
	
		// Properties
		public ToggleGroup group { get; set; } // 0x00C66C0C-0x00C66C14 0x00C66C14-0x00C66C44
		public bool isOn { get; set; } // 0x00C675E8-0x00C675F0 0x00C675F0-0x00C675FC
		Transform ICanvasElement.transform { get; } // 0x00C677D0-0x00C677D8 
	
		// Nested types
		public enum ToggleTransition // TypeDefIndex: 2687
		{
			None = 0,
			Fade = 1
		}
	
		[Serializable]
		public class ToggleEvent : UnityEvent<bool> // TypeDefIndex: 2688
		{
			// Constructors
			public ToggleEvent(); // 0x00C66F10-0x00C66F60
		}
	
		// Constructors
		protected Toggle(); // 0x00C66E88-0x00C66F10
	
		// Methods
		public virtual void Rebuild(CanvasUpdate executing); // 0x00C66F60-0x00C66F64
		public virtual void LayoutComplete(); // 0x00C66F64-0x00C66F68
		public virtual void GraphicUpdateComplete(); // 0x00C66F68-0x00C66F6C
		protected override void OnDestroy(); // 0x00C66F6C-0x00C66FFC
		protected override void OnEnable(); // 0x00C670B4-0x00C670EC
		protected override void OnDisable(); // 0x00C670EC-0x00C67118
		protected override void OnDidApplyAnimationProperties(); // 0x00C67118-0x00C67220
		private void SetToggleGroup(ToggleGroup newGroup, bool setMemberValue); // 0x00C66C44-0x00C66DB4
		public void SetIsOnWithoutNotify(bool value); // 0x00C675FC-0x00C67608
		private void Set(bool value, bool sendCallback = true /* Metadata: 0x001F4BD7 */); // 0x00C67220-0x00C67384
		private void PlayEffect(bool instant); // 0x00C66DB4-0x00C66E88
		protected override void Start(); // 0x00C6773C-0x00C67744
		private void InternalToggle(); // 0x00C67744-0x00C677A8
		public virtual void OnPointerClick(PointerEventData eventData); // 0x00C677A8-0x00C677CC
		public virtual void OnSubmit(BaseEventData eventData); // 0x00C677CC-0x00C677D0
	}

	[AddComponentMenu] // 0x004F8614-0x004F8664
	[DisallowMultipleComponent] // 0x004F8614-0x004F8664
	public class ToggleGroup : UIBehaviour // TypeDefIndex: 2689
	{
		// Fields
		[SerializeField] // 0x004FA570-0x004FA580
		private bool m_AllowSwitchOff; // 0x18
		private List<Toggle> m_Toggles; // 0x20
	
		// Properties
		public bool allowSwitchOff { get; set; } // 0x00C677D8-0x00C677E0 0x00C677E0-0x00C677EC
	
		// Nested types
		[Serializable]
		[CompilerGenerated] // 0x004F8664-0x004F8674
		private sealed class __c // TypeDefIndex: 2690
		{
			// Fields
			public static readonly __c __9; // 0x00
			public static Predicate<Toggle> __9__12_0; // 0x08
			public static Func<Toggle, bool> __9__13_0; // 0x10
	
			// Constructors
			static __c(); // 0x00C67BE0-0x00C67C44
			public __c(); // 0x00C67C44-0x00C67C4C
	
			// Methods
			internal bool _AnyTogglesOn_b__12_0(Toggle x); // 0x00C67C4C-0x00C67C68
			internal bool _ActiveToggles_b__13_0(Toggle x); // 0x00C67C68-0x00C67C84
		}
	
		// Constructors
		protected ToggleGroup(); // 0x00C677EC-0x00C6785C
	
		// Methods
		protected override void Start(); // 0x00C6785C-0x00C67884
		private void ValidateToggleIsInGroup(Toggle toggle); // 0x00C67884-0x00C679E4
		public void NotifyToggleOn(Toggle toggle, bool sendCallback = true /* Metadata: 0x001F4BE0 */); // 0x00C674B4-0x00C675E8
		public void UnregisterToggle(Toggle toggle); // 0x00C67384-0x00C6741C
		public void RegisterToggle(Toggle toggle); // 0x00C6741C-0x00C674B4
		public void EnsureValidState(); // 0x00C66FFC-0x00C670B4
		public bool AnyTogglesOn(); // 0x00C67608-0x00C6773C
		public IEnumerable<Toggle> ActiveToggles(); // 0x00C679E4-0x00C67AD4
		public void SetAllTogglesOff(bool sendCallback = true /* Metadata: 0x001F4BE1 */); // 0x00C67AD4-0x00C67BE0
	}

	internal static class ListPool<T> // TypeDefIndex: 2691
	{
		// Fields
		private static readonly ObjectPool<List<T>> s_ListPool;
	
		// Constructors
		static ListPool();
	
		// Methods
		private static void Clear(List<T> l);
		public static List<T> Get();
		public static void Release(List<T> toRelease);
	}

	internal class ObjectPool<T> // TypeDefIndex: 2692
		where T : new()
	{
		// Fields
		private readonly Stack<T> m_Stack;
		private readonly UnityAction<T> m_ActionOnGet;
		private readonly UnityAction<T> m_ActionOnRelease;
		[CompilerGenerated] // 0x004FA580-0x004FA590
		private int _countAll_k__BackingField;
	
		// Properties
		public int countAll { [CompilerGenerated] /* 0x004FAEEC-0x004FAEFC */ get; [CompilerGenerated] /* 0x004FAEFC-0x004FAF0C */ private set; }
	
		// Constructors
		public ObjectPool(UnityAction<T> actionOnGet, UnityAction<T> actionOnRelease);
	
		// Methods
		public T Get();
		public void Release(T element);
	}

	internal class ReflectionMethodsCache // TypeDefIndex: 2693
	{
		// Fields
		public Raycast3DCallback raycast3D; // 0x10
		public RaycastAllCallback raycast3DAll; // 0x18
		public Raycast2DCallback raycast2D; // 0x20
		public GetRayIntersectionAllCallback getRayIntersectionAll; // 0x28
		public GetRayIntersectionAllNonAllocCallback getRayIntersectionAllNonAlloc; // 0x30
		public GetRaycastNonAllocCallback getRaycastNonAlloc; // 0x38
		private static ReflectionMethodsCache s_ReflectionMethodsCache; // 0x00
	
		// Properties
		public static ReflectionMethodsCache Singleton { get; } // 0x00C581B4-0x00C58230 
	
		// Nested types
		public delegate bool Raycast3DCallback(Ray r, out RaycastHit hit, float f, int i); // TypeDefIndex: 2694; 0x00C593E4-0x00C59764
	
		public delegate RaycastHit2D Raycast2DCallback(Vector2 p1, Vector2 p2, float f, int i); // TypeDefIndex: 2695; 0x00C58FB4-0x00C592A4
	
		public delegate RaycastHit[] RaycastAllCallback(Ray r, float f, int i); // TypeDefIndex: 2696; 0x00C598A0-0x00C59C04
	
		public delegate RaycastHit2D[] GetRayIntersectionAllCallback(Ray r, float f, int i); // TypeDefIndex: 2697; 0x00C58240-0x00C585A4
	
		public delegate int GetRayIntersectionAllNonAllocCallback(Ray r, RaycastHit2D[] results, float f, int i); // TypeDefIndex: 2698; 0x00C58694-0x00C58A10
	
		public delegate int GetRaycastNonAllocCallback(Ray r, RaycastHit[] results, float f, int i); // TypeDefIndex: 2699; 0x00C58B24-0x00C58EA0
	
		// Constructors
		public ReflectionMethodsCache(); // 0x00C576BC-0x00C581B4
	}

	public class VertexHelper : IDisposable // TypeDefIndex: 2700
	{
		// Fields
		private List<Vector3> m_Positions; // 0x10
		private List<Color32> m_Colors; // 0x18
		private List<Vector2> m_Uv0S; // 0x20
		private List<Vector2> m_Uv1S; // 0x28
		private List<Vector2> m_Uv2S; // 0x30
		private List<Vector2> m_Uv3S; // 0x38
		private List<Vector3> m_Normals; // 0x40
		private List<Vector4> m_Tangents; // 0x48
		private List<int> m_Indices; // 0x50
		private static readonly Vector4 s_DefaultTangent; // 0x00
		private static readonly Vector3 s_DefaultNormal; // 0x10
		private bool m_ListsInitalized; // 0x58
	
		// Properties
		public int currentVertCount { get; } // 0x00C55924-0x00C55978 
	
		// Constructors
		public VertexHelper(); // 0x00C67C84-0x00C67C8C
		public VertexHelper(Mesh m); // 0x00C67C8C-0x00C67E6C
		static VertexHelper(); // 0x00C68658-0x00C6870C
	
		// Methods
		private void InitializeListIfRequired(); // 0x00C67E6C-0x00C67FF8
		public void Dispose(); // 0x00C67FF8-0x00C681AC
		public void Clear(); // 0x00C55388-0x00C554A0
		public void PopulateUIVertex(ref UIVertex vertex, int i); // 0x00C555E4-0x00C557D8
		public void SetUIVertex(UIVertex vertex, int i); // 0x00C557D8-0x00C55924
		public void FillMesh(Mesh mesh); // 0x00C681AC-0x00C68318
		public void AddVert(Vector3 position, Color32 color, Vector2 uv0, Vector2 uv1, Vector2 uv2, Vector2 uv3, Vector3 normal, Vector4 tangent); // 0x00C68318-0x00C684DC
		public void AddVert(Vector3 position, Color32 color, Vector2 uv0, Vector2 uv1, Vector3 normal, Vector4 tangent); // 0x00C684DC-0x00C685E8
		public void AddVert(Vector3 position, Color32 color, Vector2 uv0); // 0x00C562AC-0x00C563DC
		public void AddVert(UIVertex v); // 0x00C685E8-0x00C68658
		public void AddTriangle(int idx0, int idx1, int idx2); // 0x00C563DC-0x00C56484
		public void AddUIVertexQuad(UIVertex[] verts); // 0x00C668DC-0x00C669F4
		public void AddUIVertexTriangleStream(List<UIVertex> verts); // 0x00C554A0-0x00C554F8
		public void GetUIVertexStream(List<UIVertex> stream); // 0x00C550C4-0x00C5511C
	}

	[ExecuteAlways] // 0x004F8674-0x004F8684
	public abstract class BaseMeshEffect : UIBehaviour, IMeshModifier // TypeDefIndex: 2701
	{
		// Fields
		[NonSerialized]
		private Graphic m_Graphic; // 0x18
	
		// Properties
		protected Graphic graphic { get; } // 0x00962104-0x0096219C 
	
		// Constructors
		protected BaseMeshEffect(); // 0x009624F4-0x009624FC
	
		// Methods
		protected override void OnEnable(); // 0x0096219C-0x00962248
		protected override void OnDisable(); // 0x00962248-0x009622F4
		protected override void OnDidApplyAnimationProperties(); // 0x009622F4-0x009623A0
		public virtual void ModifyMesh(Mesh mesh); // 0x009623A0-0x009624F4
		public abstract void ModifyMesh(VertexHelper vh);
	}

	public interface IMeshModifier // TypeDefIndex: 2702
	{
		// Methods
		[Obsolete] // 0x004FAF0C-0x004FAF48
		void ModifyMesh(Mesh mesh);
		void ModifyMesh(VertexHelper verts);
	}

	[AddComponentMenu] // 0x004F8684-0x004F86C0
	public class Outline : Shadow // TypeDefIndex: 2703
	{
		// Constructors
		protected Outline(); // 0x00C54E20-0x00C54E24
	
		// Methods
		public override void ModifyMesh(VertexHelper vh); // 0x00C54EB4-0x00C550C4
	}

	[AddComponentMenu] // 0x004F86C0-0x004F86FC
	public class PositionAsUV1 : BaseMeshEffect // TypeDefIndex: 2704
	{
		// Constructors
		protected PositionAsUV1(); // 0x00C554F8-0x00C55500
	
		// Methods
		public override void ModifyMesh(VertexHelper vh); // 0x00C55500-0x00C555E4
	}

	[AddComponentMenu] // 0x004F86FC-0x004F8738
	public class Shadow : BaseMeshEffect // TypeDefIndex: 2705
	{
		// Fields
		[SerializeField] // 0x004FA590-0x004FA5A0
		private Color m_EffectColor; // 0x20
		[SerializeField] // 0x004FA5A0-0x004FA5B0
		private Vector2 m_EffectDistance; // 0x30
		[SerializeField] // 0x004FA5B0-0x004FA5C0
		private bool m_UseGraphicAlpha; // 0x38
		private const float kMaxEffectDistance = 600f; // Metadata: 0x001F4BE2
	
		// Properties
		public Color effectColor { get; set; } // 0x00C6228C-0x00C62298 0x00C62298-0x00C6237C
		public Vector2 effectDistance { get; set; } // 0x00C6237C-0x00C62384 0x00C62384-0x00C624BC
		public bool useGraphicAlpha { get; set; } // 0x00C624BC-0x00C624C4 0x00C624C4-0x00C62590
	
		// Constructors
		protected Shadow(); // 0x00C54E24-0x00C54EB4
	
		// Methods
		protected void ApplyShadowZeroAlloc(List<UIVertex> verts, Color32 color, int start, int end, float x, float y); // 0x00C5511C-0x00C55388
		protected void ApplyShadow(List<UIVertex> verts, Color32 color, int start, int end, float x, float y); // 0x00C62590-0x00C62598
		public override void ModifyMesh(VertexHelper vh); // 0x00C62598-0x00C626A8
	}
}

namespace UnityEngine.UI.Collections
{
	internal class IndexedSet<T> : IList<T> // TypeDefIndex: 2706
	{
		// Fields
		private readonly List<T> m_List;
		private Dictionary<T, int> m_Dictionary;
	
		// Properties
		public int Count { get; }
		public bool IsReadOnly { get; }
		public T this[int index] { get => default; set {} }
	
		// Constructors
		public IndexedSet();
	
		// Methods
		public void Add(T item);
		public bool AddUnique(T item);
		public bool Remove(T item);
		public IEnumerator<T> GetEnumerator();
		IEnumerator IEnumerable.GetEnumerator();
		public void Clear();
		public bool Contains(T item);
		public void CopyTo(T[] array, int arrayIndex);
		public int IndexOf(T item);
		public void Insert(int index, T item);
		public void RemoveAt(int index);
		public void Sort(Comparison<T> sortLayoutFunction);
	}
}

namespace UnityEngine.UI.CoroutineTween
{
	internal interface ITweenValue // TypeDefIndex: 2707
	{
		// Properties
		bool ignoreTimeScale { get; }
		float duration { get; }
	
		// Methods
		void TweenValue(float floatPercentage);
		bool ValidTarget();
	}

	internal struct ColorTween : ITweenValue // TypeDefIndex: 2708
	{
		// Fields
		private ColorTweenCallback m_Target; // 0x00
		private Color m_StartColor; // 0x08
		private Color m_TargetColor; // 0x18
		private ColorTweenMode m_TweenMode; // 0x28
		private float m_Duration; // 0x2C
		private bool m_IgnoreTimeScale; // 0x30
	
		// Properties
		public Color startColor { set; } // 0x00585240-0x0058524C
		public Color targetColor { set; } // 0x0058524C-0x00585258
		public ColorTweenMode tweenMode { set; } // 0x00585258-0x00585260
		public float duration { get; set; } // 0x00585260-0x00585268 0x00585268-0x00585270
		public bool ignoreTimeScale { get; set; } // 0x00585270-0x00585278 0x00585278-0x00585284
	
		// Nested types
		public enum ColorTweenMode // TypeDefIndex: 2709
		{
			All = 0,
			RGB = 1,
			Alpha = 2
		}
	
		public class ColorTweenCallback : UnityEvent<Color> // TypeDefIndex: 2710
		{
			// Constructors
			public ColorTweenCallback(); // 0x0096564C-0x00965830
		}
	
		// Methods
		public void TweenValue(float floatPercentage); // 0x00585284-0x0058528C
		public void AddOnChangedCallback(UnityAction<Color> callback); // 0x0058528C-0x00585294
		public bool ValidTarget(); // 0x00585294-0x005852E8
	}

	internal struct FloatTween : ITweenValue // TypeDefIndex: 2711
	{
		// Fields
		private FloatTweenCallback m_Target; // 0x00
		private float m_StartValue; // 0x08
		private float m_TargetValue; // 0x0C
		private float m_Duration; // 0x10
		private bool m_IgnoreTimeScale; // 0x14
	
		// Properties
		public float startValue { set; } // 0x005852E8-0x005852F0
		public float targetValue { set; } // 0x005852F0-0x005852F8
		public float duration { get; set; } // 0x005852F8-0x00585300 0x00585300-0x00585308
		public bool ignoreTimeScale { get; set; } // 0x00585308-0x00585310 0x00585310-0x0058531C
	
		// Nested types
		public class FloatTweenCallback : UnityEvent<float> // TypeDefIndex: 2712
		{
			// Constructors
			public FloatTweenCallback(); // 0x00965830-0x00965880
		}
	
		// Methods
		public void TweenValue(float floatPercentage); // 0x0058531C-0x00585324
		public void AddOnChangedCallback(UnityAction<float> callback); // 0x00585324-0x0058532C
		public bool ValidTarget(); // 0x0058532C-0x0058533C
	}

	internal class TweenRunner<T> // TypeDefIndex: 2713
		where T : struct, ITweenValue
	{
		// Fields
		protected MonoBehaviour m_CoroutineContainer;
		protected IEnumerator m_Tween;
	
		// Nested types
		[CompilerGenerated] // 0x004F8770-0x004F8780
		private sealed class _Start_d__2 : IEnumerator<object> // TypeDefIndex: 2714
		{
			// Fields
			private int __1__state;
			private object __2__current;
			public T tweenInfo;
			private float _elapsedTime_5__2;
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x004FAFCC-0x004FAFDC */ get; }
			object IEnumerator.Current { [DebuggerHidden] /* 0x004FAFEC-0x004FAFFC */ get; }
	
			// Constructors
			[DebuggerHidden] // 0x004FAFAC-0x004FAFBC
			public _Start_d__2(int __1__state);
	
			// Methods
			[DebuggerHidden] // 0x004FAFBC-0x004FAFCC
			void IDisposable.Dispose();
			private bool MoveNext();
			[DebuggerHidden] // 0x004FAFDC-0x004FAFEC
			void IEnumerator.Reset();
		}
	
		// Constructors
		public TweenRunner();
	
		// Methods
		[IteratorStateMachine] // 0x004FAF48-0x004FAFAC
		private static IEnumerator Start(T tweenInfo);
		public void Init(MonoBehaviour coroutineContainer);
		public void StartTween(T info);
		public void StopTween();
	}
}

namespace UnityEngine.EventSystems
{
	public class AxisEventData : BaseEventData // TypeDefIndex: 2715
	{
		// Fields
		[CompilerGenerated] // 0x004FA5C0-0x004FA5D0
		private Vector2 _moveVector_k__BackingField; // 0x20
		[CompilerGenerated] // 0x004FA5D0-0x004FA5E0
		private MoveDirection _moveDir_k__BackingField; // 0x28
	
		// Properties
		public Vector2 moveVector { [CompilerGenerated] /* 0x004FAFFC-0x004FB00C */ set; } // 0x00956AE8-0x00956AF0
		public MoveDirection moveDir { [CompilerGenerated] /* 0x004FB00C-0x004FB01C */ get; [CompilerGenerated] /* 0x004FB01C-0x004FB02C */ set; } // 0x00956AF0-0x00956AF8 0x00956AF8-0x00956B00
	
		// Constructors
		public AxisEventData(EventSystem eventSystem); // 0x00956B00-0x00956B90
	}

	public abstract class AbstractEventData // TypeDefIndex: 2716
	{
		// Fields
		protected bool m_Used; // 0x10
	
		// Properties
		public virtual bool used { get; } // 0x00956AD8-0x00956AE0 
	
		// Constructors
		protected AbstractEventData(); // 0x00956AE0-0x00956AE8
	
		// Methods
		public virtual void Reset(); // 0x00956AC4-0x00956ACC
		public virtual void Use(); // 0x00956ACC-0x00956AD8
	}

	public class BaseEventData : AbstractEventData // TypeDefIndex: 2717
	{
		// Fields
		private readonly EventSystem m_EventSystem; // 0x18
	
		// Properties
		public GameObject selectedObject { set; } // 0x00956BBC-0x00956BDC
	
		// Constructors
		public BaseEventData(EventSystem eventSystem); // 0x00956B90-0x00956BBC
	}

	public class PointerEventData : BaseEventData // TypeDefIndex: 2718
	{
		// Fields
		[CompilerGenerated] // 0x004FA5E0-0x004FA5F0
		private GameObject _pointerEnter_k__BackingField; // 0x20
		private GameObject m_PointerPress; // 0x28
		[CompilerGenerated] // 0x004FA5F0-0x004FA600
		private GameObject _lastPress_k__BackingField; // 0x30
		[CompilerGenerated] // 0x004FA600-0x004FA610
		private GameObject _rawPointerPress_k__BackingField; // 0x38
		[CompilerGenerated] // 0x004FA610-0x004FA620
		private GameObject _pointerDrag_k__BackingField; // 0x40
		[CompilerGenerated] // 0x004FA620-0x004FA630
		private RaycastResult _pointerCurrentRaycast_k__BackingField; // 0x48
		[CompilerGenerated] // 0x004FA630-0x004FA640
		private RaycastResult _pointerPressRaycast_k__BackingField; // 0x90
		public List<GameObject> hovered; // 0xD8
		[CompilerGenerated] // 0x004FA640-0x004FA650
		private bool _eligibleForClick_k__BackingField; // 0xE0
		[CompilerGenerated] // 0x004FA650-0x004FA660
		private int _pointerId_k__BackingField; // 0xE4
		[CompilerGenerated] // 0x004FA660-0x004FA670
		private Vector2 _position_k__BackingField; // 0xE8
		[CompilerGenerated] // 0x004FA670-0x004FA680
		private Vector2 _delta_k__BackingField; // 0xF0
		[CompilerGenerated] // 0x004FA680-0x004FA690
		private Vector2 _pressPosition_k__BackingField; // 0xF8
		[CompilerGenerated] // 0x004FA690-0x004FA6A0
		private Vector3 _worldPosition_k__BackingField; // 0x100
		[CompilerGenerated] // 0x004FA6A0-0x004FA6B0
		private Vector3 _worldNormal_k__BackingField; // 0x10C
		[CompilerGenerated] // 0x004FA6B0-0x004FA6C0
		private float _clickTime_k__BackingField; // 0x118
		[CompilerGenerated] // 0x004FA6C0-0x004FA6D0
		private int _clickCount_k__BackingField; // 0x11C
		[CompilerGenerated] // 0x004FA6D0-0x004FA6E0
		private Vector2 _scrollDelta_k__BackingField; // 0x120
		[CompilerGenerated] // 0x004FA6E0-0x004FA6F0
		private bool _useDragThreshold_k__BackingField; // 0x128
		[CompilerGenerated] // 0x004FA6F0-0x004FA700
		private bool _dragging_k__BackingField; // 0x129
		[CompilerGenerated] // 0x004FA700-0x004FA710
		private InputButton _button_k__BackingField; // 0x12C
	
		// Properties
		public GameObject pointerEnter { [CompilerGenerated] /* 0x004FB02C-0x004FB03C */ get; [CompilerGenerated] /* 0x004FB03C-0x004FB04C */ set; } // 0x0095C630-0x0095C638 0x0095C638-0x0095C640
		public GameObject lastPress { [CompilerGenerated] /* 0x004FB04C-0x004FB05C */ get; [CompilerGenerated] /* 0x004FB05C-0x004FB06C */ private set; } // 0x0095C640-0x0095C648 0x0095C648-0x0095C650
		public GameObject rawPointerPress { [CompilerGenerated] /* 0x004FB06C-0x004FB07C */ set; } // 0x0095C650-0x0095C658
		public GameObject pointerDrag { [CompilerGenerated] /* 0x004FB07C-0x004FB08C */ get; [CompilerGenerated] /* 0x004FB08C-0x004FB09C */ set; } // 0x0095C658-0x0095C660 0x0095C660-0x0095C668
		public RaycastResult pointerCurrentRaycast { [CompilerGenerated] /* 0x004FB09C-0x004FB0AC */ get; [CompilerGenerated] /* 0x004FB0AC-0x004FB0BC */ set; } // 0x0095C668-0x0095C678 0x0095C678-0x0095C694
		public RaycastResult pointerPressRaycast { [CompilerGenerated] /* 0x004FB0BC-0x004FB0CC */ get; [CompilerGenerated] /* 0x004FB0CC-0x004FB0DC */ set; } // 0x0095C694-0x0095C6A4 0x0095C6A4-0x0095C6C0
		public bool eligibleForClick { [CompilerGenerated] /* 0x004FB0DC-0x004FB0EC */ get; [CompilerGenerated] /* 0x004FB0EC-0x004FB0FC */ set; } // 0x0095C6C0-0x0095C6C8 0x0095C6C8-0x0095C6D4
		public int pointerId { [CompilerGenerated] /* 0x004FB0FC-0x004FB10C */ get; [CompilerGenerated] /* 0x004FB10C-0x004FB11C */ set; } // 0x0095C6D4-0x0095C6DC 0x0095C6DC-0x0095C6E4
		public Vector2 position { [CompilerGenerated] /* 0x004FB11C-0x004FB12C */ get; [CompilerGenerated] /* 0x004FB12C-0x004FB13C */ set; } // 0x0095C6E4-0x0095C6EC 0x0095C6EC-0x0095C6F4
		public Vector2 delta { [CompilerGenerated] /* 0x004FB13C-0x004FB14C */ get; [CompilerGenerated] /* 0x004FB14C-0x004FB15C */ set; } // 0x0095C6F4-0x0095C6FC 0x0095C6FC-0x0095C704
		public Vector2 pressPosition { [CompilerGenerated] /* 0x004FB15C-0x004FB16C */ get; [CompilerGenerated] /* 0x004FB16C-0x004FB17C */ set; } // 0x0095C704-0x0095C70C 0x0095C70C-0x0095C714
		public float clickTime { [CompilerGenerated] /* 0x004FB17C-0x004FB18C */ get; [CompilerGenerated] /* 0x004FB18C-0x004FB19C */ set; } // 0x0095C714-0x0095C71C 0x0095C71C-0x0095C724
		public int clickCount { [CompilerGenerated] /* 0x004FB19C-0x004FB1AC */ get; [CompilerGenerated] /* 0x004FB1AC-0x004FB1BC */ set; } // 0x0095C724-0x0095C72C 0x0095C72C-0x0095C734
		public Vector2 scrollDelta { [CompilerGenerated] /* 0x004FB1BC-0x004FB1CC */ get; [CompilerGenerated] /* 0x004FB1CC-0x004FB1DC */ set; } // 0x0095C734-0x0095C740 0x0095C740-0x0095C74C
		public bool useDragThreshold { [CompilerGenerated] /* 0x004FB1DC-0x004FB1EC */ get; [CompilerGenerated] /* 0x004FB1EC-0x004FB1FC */ set; } // 0x0095C74C-0x0095C754 0x0095C754-0x0095C760
		public bool dragging { [CompilerGenerated] /* 0x004FB1FC-0x004FB20C */ get; [CompilerGenerated] /* 0x004FB20C-0x004FB21C */ set; } // 0x0095C760-0x0095C768 0x0095C768-0x0095C774
		public InputButton button { [CompilerGenerated] /* 0x004FB21C-0x004FB22C */ get; [CompilerGenerated] /* 0x004FB22C-0x004FB23C */ set; } // 0x0095C774-0x0095C77C 0x0095C77C-0x0095C784
		public Camera enterEventCamera { get; } // 0x0095C8E4-0x0095C984 
		public Camera pressEventCamera { get; } // 0x0095C984-0x0095CA24 
		public GameObject pointerPress { get; set; } // 0x0095CA24-0x0095CA2C 0x0095CA2C-0x0095CAB8
	
		// Nested types
		public enum InputButton // TypeDefIndex: 2719
		{
			Left = 0,
			Right = 1,
			Middle = 2
		}
	
		public enum FramePressState // TypeDefIndex: 2720
		{
			Pressed = 0,
			Released = 1,
			PressedAndReleased = 2,
			NotChanged = 3
		}
	
		// Constructors
		public PointerEventData(EventSystem eventSystem); // 0x0095C784-0x0095C878
	
		// Methods
		public bool IsPointerMoving(); // 0x0095C878-0x0095C8AC
		public bool IsScrolling(); // 0x0095C8AC-0x0095C8E4
		public override string ToString(); // 0x0095CAB8-0x0095D3D8
	}

	public interface IEventSystemHandler // TypeDefIndex: 2721
	{
	}

	public interface IPointerEnterHandler : IEventSystemHandler // TypeDefIndex: 2722
	{
		// Methods
		void OnPointerEnter(PointerEventData eventData);
	}

	public interface IPointerExitHandler : IEventSystemHandler // TypeDefIndex: 2723
	{
		// Methods
		void OnPointerExit(PointerEventData eventData);
	}

	public interface IPointerDownHandler : IEventSystemHandler // TypeDefIndex: 2724
	{
		// Methods
		void OnPointerDown(PointerEventData eventData);
	}

	public interface IPointerUpHandler : IEventSystemHandler // TypeDefIndex: 2725
	{
		// Methods
		void OnPointerUp(PointerEventData eventData);
	}

	public interface IPointerClickHandler : IEventSystemHandler // TypeDefIndex: 2726
	{
		// Methods
		void OnPointerClick(PointerEventData eventData);
	}

	public interface IBeginDragHandler : IEventSystemHandler // TypeDefIndex: 2727
	{
		// Methods
		void OnBeginDrag(PointerEventData eventData);
	}

	public interface IInitializePotentialDragHandler : IEventSystemHandler // TypeDefIndex: 2728
	{
		// Methods
		void OnInitializePotentialDrag(PointerEventData eventData);
	}

	public interface IDragHandler : IEventSystemHandler // TypeDefIndex: 2729
	{
		// Methods
		void OnDrag(PointerEventData eventData);
	}

	public interface IEndDragHandler : IEventSystemHandler // TypeDefIndex: 2730
	{
		// Methods
		void OnEndDrag(PointerEventData eventData);
	}

	public interface IDropHandler : IEventSystemHandler // TypeDefIndex: 2731
	{
		// Methods
		void OnDrop(PointerEventData eventData);
	}

	public interface IScrollHandler : IEventSystemHandler // TypeDefIndex: 2732
	{
		// Methods
		void OnScroll(PointerEventData eventData);
	}

	public interface IUpdateSelectedHandler : IEventSystemHandler // TypeDefIndex: 2733
	{
		// Methods
		void OnUpdateSelected(BaseEventData eventData);
	}

	public interface ISelectHandler : IEventSystemHandler // TypeDefIndex: 2734
	{
		// Methods
		void OnSelect(BaseEventData eventData);
	}

	public interface IDeselectHandler : IEventSystemHandler // TypeDefIndex: 2735
	{
		// Methods
		void OnDeselect(BaseEventData eventData);
	}

	public interface IMoveHandler : IEventSystemHandler // TypeDefIndex: 2736
	{
		// Methods
		void OnMove(AxisEventData eventData);
	}

	public interface ISubmitHandler : IEventSystemHandler // TypeDefIndex: 2737
	{
		// Methods
		void OnSubmit(BaseEventData eventData);
	}

	public interface ICancelHandler : IEventSystemHandler // TypeDefIndex: 2738
	{
		// Methods
		void OnCancel(BaseEventData eventData);
	}

	[AddComponentMenu] // 0x004F8780-0x004F87B8
	public class EventSystem : UIBehaviour // TypeDefIndex: 2739
	{
		// Fields
		private List<BaseInputModule> m_SystemInputModules; // 0x18
		private BaseInputModule m_CurrentInputModule; // 0x20
		private static List<EventSystem> m_EventSystems; // 0x00
		[FormerlySerializedAs] // 0x004FA710-0x004FA75C
		[SerializeField] // 0x004FA710-0x004FA75C
		private GameObject m_FirstSelected; // 0x28
		[SerializeField] // 0x004FA75C-0x004FA76C
		private bool m_sendNavigationEvents; // 0x30
		[SerializeField] // 0x004FA76C-0x004FA77C
		private int m_DragThreshold; // 0x34
		private GameObject m_CurrentSelected; // 0x38
		private bool m_HasFocus; // 0x40
		private bool m_SelectionGuard; // 0x41
		private BaseEventData m_DummyData; // 0x48
		private static readonly Comparison<RaycastResult> s_RaycastComparer; // 0x08
	
		// Properties
		public static EventSystem current { get; set; } // 0x00958468-0x0095852C 0x0095852C-0x00958634
		public bool sendNavigationEvents { get; set; } // 0x00958634-0x0095863C 0x0095863C-0x00958648
		public int pixelDragThreshold { get; set; } // 0x00958648-0x00958650 0x00958650-0x00958658
		public BaseInputModule currentInputModule { get; } // 0x00958658-0x00958660 
		public GameObject firstSelectedGameObject { get; set; } // 0x00958660-0x00958668 0x00958668-0x00958670
		public GameObject currentSelectedGameObject { get; } // 0x00958670-0x00958678 
		[Obsolete] // 0x004FB330-0x004FB368
		public GameObject lastSelectedGameObject { get; } // 0x00958678-0x00958680 
		public bool isFocused { get; } // 0x00958680-0x00958688 
		public bool alreadySelecting { get; } // 0x0095870C-0x00958714 
		private BaseEventData baseEventDataCache { get; } // 0x00958714-0x00958784 
	
		// Constructors
		protected EventSystem(); // 0x00958688-0x0095870C
		static EventSystem(); // 0x00959528-0x009595DC
	
		// Methods
		public void UpdateModules(); // 0x0095711C-0x0095726C
		public void SetSelectedGameObject(GameObject selected, BaseEventData pointer); // 0x00956BDC-0x00956DD0
		public void SetSelectedGameObject(GameObject selected); // 0x00958784-0x009587B4
		private static int RaycastComparer(RaycastResult lhs, RaycastResult rhs); // 0x009587B4-0x00958B58
		public void RaycastAll(PointerEventData eventData, List<RaycastResult> raycastResults); // 0x00958B58-0x00958D18
		public bool IsPointerOverGameObject(); // 0x00958D18-0x00958D20
		public bool IsPointerOverGameObject(int pointerId); // 0x00958D20-0x00958DD4
		protected override void OnEnable(); // 0x00958DD4-0x00958E58
		protected override void OnDisable(); // 0x00958E58-0x00958F30
		private void TickModules(); // 0x00958F30-0x0095903C
		protected virtual void OnApplicationFocus(bool hasFocus); // 0x0095903C-0x00959048
		protected virtual void Update(); // 0x00959048-0x009592E0
		private void ChangeEventModule(BaseInputModule module); // 0x009592E0-0x00959400
		public override string ToString(); // 0x00959400-0x00959528
	}

	[AddComponentMenu] // 0x004F87B8-0x004F87F0
	public class EventTrigger : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler, IPointerDownHandler, IPointerUpHandler, IPointerClickHandler, IInitializePotentialDragHandler, IBeginDragHandler, IDragHandler, IEndDragHandler, IDropHandler, IScrollHandler, IUpdateSelectedHandler, ISelectHandler, IDeselectHandler, IMoveHandler, ISubmitHandler, ICancelHandler // TypeDefIndex: 2740
	{
		// Fields
		[FormerlySerializedAs] // 0x004FA77C-0x004FA7C8
		[SerializeField] // 0x004FA77C-0x004FA7C8
		private List<Entry> m_Delegates; // 0x18
	
		// Properties
		[EditorBrowsable] // 0x004FB368-0x004FB3BC
		[Obsolete] // 0x004FB368-0x004FB3BC
		public List<Entry> delegates { get; set; } // 0x009595DC-0x009595E0 0x00959654-0x0095965C
		public List<Entry> triggers { get; set; } // 0x009595E0-0x00959654 0x00959664-0x0095966C
	
		// Nested types
		[Serializable]
		public class TriggerEvent : UnityEvent<BaseEventData> // TypeDefIndex: 2741
		{
			// Constructors
			public TriggerEvent(); // 0x009598D8-0x00959928
		}
	
		[Serializable]
		public class Entry // TypeDefIndex: 2742
		{
			// Fields
			public EventTriggerType eventID; // 0x10
			public TriggerEvent callback; // 0x18
	
			// Constructors
			public Entry(); // 0x0095986C-0x009598D8
		}
	
		// Constructors
		protected EventTrigger(); // 0x0095965C-0x00959664
	
		// Methods
		private void Execute(EventTriggerType id, BaseEventData eventData); // 0x0095966C-0x0095975C
		public virtual void OnPointerEnter(PointerEventData eventData); // 0x0095975C-0x0095976C
		public virtual void OnPointerExit(PointerEventData eventData); // 0x0095976C-0x0095977C
		public virtual void OnDrag(PointerEventData eventData); // 0x0095977C-0x0095978C
		public virtual void OnDrop(PointerEventData eventData); // 0x0095978C-0x0095979C
		public virtual void OnPointerDown(PointerEventData eventData); // 0x0095979C-0x009597AC
		public virtual void OnPointerUp(PointerEventData eventData); // 0x009597AC-0x009597BC
		public virtual void OnPointerClick(PointerEventData eventData); // 0x009597BC-0x009597CC
		public virtual void OnSelect(BaseEventData eventData); // 0x009597CC-0x009597DC
		public virtual void OnDeselect(BaseEventData eventData); // 0x009597DC-0x009597EC
		public virtual void OnScroll(PointerEventData eventData); // 0x009597EC-0x009597FC
		public virtual void OnMove(AxisEventData eventData); // 0x009597FC-0x0095980C
		public virtual void OnUpdateSelected(BaseEventData eventData); // 0x0095980C-0x0095981C
		public virtual void OnInitializePotentialDrag(PointerEventData eventData); // 0x0095981C-0x0095982C
		public virtual void OnBeginDrag(PointerEventData eventData); // 0x0095982C-0x0095983C
		public virtual void OnEndDrag(PointerEventData eventData); // 0x0095983C-0x0095984C
		public virtual void OnSubmit(BaseEventData eventData); // 0x0095984C-0x0095985C
		public virtual void OnCancel(BaseEventData eventData); // 0x0095985C-0x0095986C
	}

	public enum EventTriggerType // TypeDefIndex: 2743
	{
		PointerEnter = 0,
		PointerExit = 1,
		PointerDown = 2,
		PointerUp = 3,
		PointerClick = 4,
		Drag = 5,
		Drop = 6,
		Scroll = 7,
		UpdateSelected = 8,
		Select = 9,
		Deselect = 10,
		Move = 11,
		InitializePotentialDrag = 12,
		BeginDrag = 13,
		EndDrag = 14,
		Submit = 15,
		Cancel = 16
	}

	public static class ExecuteEvents // TypeDefIndex: 2744
	{
		// Fields
		private static readonly EventFunction<IPointerEnterHandler> s_PointerEnterHandler; // 0x00
		private static readonly EventFunction<IPointerExitHandler> s_PointerExitHandler; // 0x08
		private static readonly EventFunction<IPointerDownHandler> s_PointerDownHandler; // 0x10
		private static readonly EventFunction<IPointerUpHandler> s_PointerUpHandler; // 0x18
		private static readonly EventFunction<IPointerClickHandler> s_PointerClickHandler; // 0x20
		private static readonly EventFunction<IInitializePotentialDragHandler> s_InitializePotentialDragHandler; // 0x28
		private static readonly EventFunction<IBeginDragHandler> s_BeginDragHandler; // 0x30
		private static readonly EventFunction<IDragHandler> s_DragHandler; // 0x38
		private static readonly EventFunction<IEndDragHandler> s_EndDragHandler; // 0x40
		private static readonly EventFunction<IDropHandler> s_DropHandler; // 0x48
		private static readonly EventFunction<IScrollHandler> s_ScrollHandler; // 0x50
		private static readonly EventFunction<IUpdateSelectedHandler> s_UpdateSelectedHandler; // 0x58
		private static readonly EventFunction<ISelectHandler> s_SelectHandler; // 0x60
		private static readonly EventFunction<IDeselectHandler> s_DeselectHandler; // 0x68
		private static readonly EventFunction<IMoveHandler> s_MoveHandler; // 0x70
		private static readonly EventFunction<ISubmitHandler> s_SubmitHandler; // 0x78
		private static readonly EventFunction<ICancelHandler> s_CancelHandler; // 0x80
		private static readonly ObjectPool<List<IEventSystemHandler>> s_HandlerListPool; // 0x88
		private static readonly List<Transform> s_InternalTransformList; // 0x90
	
		// Properties
		public static EventFunction<IPointerEnterHandler> pointerEnterHandler { get; } // 0x0095A888-0x0095A8F0 
		public static EventFunction<IPointerExitHandler> pointerExitHandler { get; } // 0x0095A8F0-0x0095A958 
		public static EventFunction<IPointerDownHandler> pointerDownHandler { get; } // 0x0095A958-0x0095A9C0 
		public static EventFunction<IPointerUpHandler> pointerUpHandler { get; } // 0x0095A9C0-0x0095AA28 
		public static EventFunction<IPointerClickHandler> pointerClickHandler { get; } // 0x0095AA28-0x0095AA90 
		public static EventFunction<IInitializePotentialDragHandler> initializePotentialDrag { get; } // 0x0095AA90-0x0095AAF8 
		public static EventFunction<IBeginDragHandler> beginDragHandler { get; } // 0x0095AAF8-0x0095AB60 
		public static EventFunction<IDragHandler> dragHandler { get; } // 0x0095AB60-0x0095ABC8 
		public static EventFunction<IEndDragHandler> endDragHandler { get; } // 0x0095ABC8-0x0095AC30 
		public static EventFunction<IDropHandler> dropHandler { get; } // 0x0095AC30-0x0095AC98 
		public static EventFunction<IScrollHandler> scrollHandler { get; } // 0x0095AC98-0x0095AD00 
		public static EventFunction<IUpdateSelectedHandler> updateSelectedHandler { get; } // 0x0095AD00-0x0095AD68 
		public static EventFunction<ISelectHandler> selectHandler { get; } // 0x0095AD68-0x0095ADD0 
		public static EventFunction<IDeselectHandler> deselectHandler { get; } // 0x0095ADD0-0x0095AE38 
		public static EventFunction<IMoveHandler> moveHandler { get; } // 0x0095AE38-0x0095AEA0 
		public static EventFunction<ISubmitHandler> submitHandler { get; } // 0x0095AEA0-0x0095AF08 
		public static EventFunction<ICancelHandler> cancelHandler { get; } // 0x0095AF08-0x0095AF70 
	
		// Nested types
		public delegate void EventFunction<T1>(T1 handler, BaseEventData eventData); // TypeDefIndex: 2745; 0x00000000-0x00000000
	
		[Serializable]
		[CompilerGenerated] // 0x004F87F0-0x004F8800
		private sealed class __c // TypeDefIndex: 2746
		{
			// Fields
			public static readonly __c __9; // 0x00
	
			// Constructors
			static __c(); // 0x0095B67C-0x0095B6E0
			public __c(); // 0x0095B6E0-0x0095B6E8
	
			// Methods
			internal void _.cctor_b__79_0(List<IEventSystemHandler> l); // 0x0095B6E8-0x0095B744
		}
	
		// Constructors
		static ExecuteEvents(); // 0x0095B124-0x0095B67C
	
		// Methods
		public static T ValidateEventData<T>(BaseEventData data)
			where T : class;
		private static void Execute(IPointerEnterHandler handler, BaseEventData eventData); // 0x00959928-0x00959A20
		private static void Execute(IPointerExitHandler handler, BaseEventData eventData); // 0x00959A20-0x00959B18
		private static void Execute(IPointerDownHandler handler, BaseEventData eventData); // 0x00959B18-0x00959C10
		private static void Execute(IPointerUpHandler handler, BaseEventData eventData); // 0x00959C10-0x00959D08
		private static void Execute(IPointerClickHandler handler, BaseEventData eventData); // 0x00959D08-0x00959E00
		private static void Execute(IInitializePotentialDragHandler handler, BaseEventData eventData); // 0x00959E00-0x00959EF8
		private static void Execute(IBeginDragHandler handler, BaseEventData eventData); // 0x00959EF8-0x00959FF0
		private static void Execute(IDragHandler handler, BaseEventData eventData); // 0x00959FF0-0x0095A0E8
		private static void Execute(IEndDragHandler handler, BaseEventData eventData); // 0x0095A0E8-0x0095A1E0
		private static void Execute(IDropHandler handler, BaseEventData eventData); // 0x0095A1E0-0x0095A2D8
		private static void Execute(IScrollHandler handler, BaseEventData eventData); // 0x0095A2D8-0x0095A3D0
		private static void Execute(IUpdateSelectedHandler handler, BaseEventData eventData); // 0x0095A3D0-0x0095A490
		private static void Execute(ISelectHandler handler, BaseEventData eventData); // 0x0095A490-0x0095A550
		private static void Execute(IDeselectHandler handler, BaseEventData eventData); // 0x0095A550-0x0095A610
		private static void Execute(IMoveHandler handler, BaseEventData eventData); // 0x0095A610-0x0095A708
		private static void Execute(ISubmitHandler handler, BaseEventData eventData); // 0x0095A708-0x0095A7C8
		private static void Execute(ICancelHandler handler, BaseEventData eventData); // 0x0095A7C8-0x0095A888
		private static void GetEventChain(GameObject root, IList<Transform> eventChain); // 0x0095AF70-0x0095B124
		public static bool Execute<T>(GameObject target, BaseEventData eventData, EventFunction<T> functor)
			where T : IEventSystemHandler;
		public static GameObject ExecuteHierarchy<T>(GameObject root, BaseEventData eventData, EventFunction<T> callbackFunction)
			where T : IEventSystemHandler;
		private static bool ShouldSendToComponent<T>(Component component)
			where T : IEventSystemHandler;
		private static void GetEventList<T>(GameObject go, IList<IEventSystemHandler> results)
			where T : IEventSystemHandler;
		public static bool CanHandleEvent<T>(GameObject go)
			where T : IEventSystemHandler;
		public static GameObject GetEventHandler<T>(GameObject root)
			where T : IEventSystemHandler;
	}

	public class BaseInput : UIBehaviour // TypeDefIndex: 2747
	{
		// Properties
		public virtual string compositionString { get; } // 0x00956DD0-0x00956DD8 
		public virtual IMECompositionMode imeCompositionMode { get; set; } // 0x00956DD8-0x00956DE0 0x00956DE0-0x00956DEC
		public virtual Vector2 compositionCursorPos { get; set; } // 0x00956DEC-0x00956DF4 0x00956DF4-0x00956DFC
		public virtual bool mousePresent { get; } // 0x00956DFC-0x00956E04 
		public virtual Vector2 mousePosition { get; } // 0x00956E28-0x00956E30 
		public virtual Vector2 mouseScrollDelta { get; } // 0x00956E30-0x00956E38 
		public virtual bool touchSupported { get; } // 0x00956E38-0x00956E40 
		public virtual int touchCount { get; } // 0x00956E40-0x00956E48 
	
		// Constructors
		public BaseInput(); // 0x00956E6C-0x00956E74
	
		// Methods
		public virtual bool GetMouseButtonDown(int button); // 0x00956E04-0x00956E10
		public virtual bool GetMouseButtonUp(int button); // 0x00956E10-0x00956E1C
		public virtual bool GetMouseButton(int button); // 0x00956E1C-0x00956E28
		public virtual Touch GetTouch(int index); // 0x00956E48-0x00956E54
		public virtual float GetAxisRaw(string axisName); // 0x00956E54-0x00956E60
		public virtual bool GetButtonDown(string buttonName); // 0x00956E60-0x00956E6C
	}

	[RequireComponent] // 0x004F8800-0x004F8864
	public abstract class BaseInputModule : UIBehaviour // TypeDefIndex: 2748
	{
		// Fields
		[NonSerialized]
		protected List<RaycastResult> m_RaycastResultCache; // 0x18
		private AxisEventData m_AxisEventData; // 0x20
		private EventSystem m_EventSystem; // 0x28
		private BaseEventData m_BaseEventData; // 0x30
		protected BaseInput m_InputOverride; // 0x38
		private BaseInput m_DefaultInput; // 0x40
	
		// Properties
		public BaseInput input { get; } // 0x00956E7C-0x009570A0 
		public BaseInput inputOverride { get; set; } // 0x009570A0-0x009570A8 0x009570A8-0x009570B0
		protected EventSystem eventSystem { get; } // 0x009570B0-0x009570B8 
	
		// Constructors
		protected BaseInputModule(); // 0x00957E08-0x00957E78
	
		// Methods
		protected override void OnEnable(); // 0x009570B8-0x00957118
		protected override void OnDisable(); // 0x0095726C-0x00957284
		public abstract void Process();
		protected static RaycastResult FindFirstRaycast(List<RaycastResult> candidates); // 0x00957288-0x009573B8
		protected static MoveDirection DetermineMoveDirection(float x, float y); // 0x009573B8-0x009573C4
		protected static MoveDirection DetermineMoveDirection(float x, float y, float deadZone); // 0x009573C4-0x009574B0
		protected static GameObject FindCommonRoot(GameObject g1, GameObject g2); // 0x009574B0-0x0095765C
		protected void HandlePointerExitAndEnter(PointerEventData currentPointerData, GameObject newEnterTarget); // 0x0095765C-0x00957C08
		protected virtual AxisEventData GetAxisEventData(float x, float y, float moveDeadZone); // 0x00957C08-0x00957D04
		protected virtual BaseEventData GetBaseEventData(); // 0x00957D04-0x00957D9C
		public virtual bool IsPointerOverGameObject(int pointerId); // 0x00957D9C-0x00957DA4
		public virtual bool ShouldActivateModule(); // 0x00957DA4-0x00957DF4
		public virtual void DeactivateModule(); // 0x00957DF4-0x00957DF8
		public virtual void ActivateModule(); // 0x00957DF8-0x00957DFC
		public virtual void UpdateModule(); // 0x00957DFC-0x00957E00
		public virtual bool IsModuleSupported(); // 0x00957E00-0x00957E08
	}

	public abstract class PointerInputModule : BaseInputModule // TypeDefIndex: 2749
	{
		// Fields
		public const int kMouseLeftId = -1; // Metadata: 0x001F4C52
		public const int kMouseRightId = -2; // Metadata: 0x001F4C56
		public const int kMouseMiddleId = -3; // Metadata: 0x001F4C5A
		public const int kFakeTouchesId = -4; // Metadata: 0x001F4C5E
		protected Dictionary<int, PointerEventData> m_PointerData; // 0x48
		private readonly MouseState m_MouseState; // 0x50
	
		// Nested types
		protected class ButtonState // TypeDefIndex: 2750
		{
			// Fields
			private PointerEventData.InputButton m_Button; // 0x10
			private MouseButtonEventData m_EventData; // 0x18
	
			// Properties
			public MouseButtonEventData eventData { get; set; } // 0x0095E650-0x0095E658 0x0095E658-0x0095E660
			public PointerEventData.InputButton button { get; set; } // 0x0095E660-0x0095E668 0x0095E668-0x0095E670
	
			// Constructors
			public ButtonState(); // 0x0095E670-0x0095E678
		}
	
		protected class MouseState // TypeDefIndex: 2751
		{
			// Fields
			private List<ButtonState> m_TrackedButtons; // 0x10
	
			// Constructors
			public MouseState(); // 0x0095E5E0-0x0095E650
	
			// Methods
			public ButtonState GetButtonState(PointerEventData.InputButton button); // 0x0095E6A8-0x0095E8B0
			public void SetButtonState(PointerEventData.InputButton button, PointerEventData.FramePressState stateForMouseButton, PointerEventData data); // 0x0095DC08-0x0095DC54
		}
	
		public class MouseButtonEventData // TypeDefIndex: 2752
		{
			// Fields
			public PointerEventData.FramePressState buttonState; // 0x10
			public PointerEventData buttonData; // 0x18
	
			// Constructors
			public MouseButtonEventData(); // 0x0095E6A0-0x0095E6A8
	
			// Methods
			public bool PressedThisFrame(); // 0x0095E678-0x0095E68C
			public bool ReleasedThisFrame(); // 0x0095E68C-0x0095E6A0
		}
	
		// Constructors
		protected PointerInputModule(); // 0x0095E558-0x0095E5E0
	
		// Methods
		protected bool GetPointerData(int id, out PointerEventData data, bool create); // 0x0095D3D8-0x0095D4C0
		protected void RemovePointerData(PointerEventData data); // 0x0095D4C0-0x0095D530
		protected PointerEventData GetTouchPointerEventData(Touch input, out bool pressed, out bool released); // 0x0095D530-0x0095D7DC
		protected void CopyFromTo(PointerEventData from, PointerEventData to); // 0x0095D7DC-0x0095D844
		protected PointerEventData.FramePressState StateForMouseButton(int buttonId); // 0x0095D844-0x0095D8CC
		protected virtual MouseState GetMousePointerEventData(); // 0x0095D8CC-0x0095D8E0
		protected virtual MouseState GetMousePointerEventData(int id); // 0x0095D8E0-0x0095DC08
		protected PointerEventData GetLastPointerEventData(int id); // 0x0095DC54-0x0095DC80
		private static bool ShouldStartDrag(Vector2 pressPos, Vector2 currentPos, float threshold, bool useDragThreshold); // 0x0095DC80-0x0095DD50
		protected virtual void ProcessMove(PointerEventData pointerEvent); // 0x0095DD50-0x0095DD94
		protected virtual void ProcessDrag(PointerEventData pointerEvent); // 0x0095DD94-0x0095E06C
		public override bool IsPointerOverGameObject(int pointerId); // 0x0095E06C-0x0095E118
		protected void ClearSelection(); // 0x0095E118-0x0095E278
		public override string ToString(); // 0x0095E278-0x0095E468
		protected void DeselectIfSelectionChanged(GameObject currentOverGo, BaseEventData pointerEvent); // 0x0095E468-0x0095E558
	}

	[AddComponentMenu] // 0x004F8864-0x004F889C
	public class StandaloneInputModule : PointerInputModule // TypeDefIndex: 2753
	{
		// Fields
		private float m_PrevActionTime; // 0x58
		private Vector2 m_LastMoveVector; // 0x5C
		private int m_ConsecutiveMoveCount; // 0x64
		private Vector2 m_LastMousePosition; // 0x68
		private Vector2 m_MousePosition; // 0x70
		private GameObject m_CurrentFocusedGameObject; // 0x78
		private PointerEventData m_InputPointerEvent; // 0x80
		[SerializeField] // 0x004FA7C8-0x004FA7D8
		private string m_HorizontalAxis; // 0x88
		[SerializeField] // 0x004FA7D8-0x004FA7E8
		private string m_VerticalAxis; // 0x90
		[SerializeField] // 0x004FA7E8-0x004FA7F8
		private string m_SubmitButton; // 0x98
		[SerializeField] // 0x004FA7F8-0x004FA808
		private string m_CancelButton; // 0xA0
		[SerializeField] // 0x004FA808-0x004FA818
		private float m_InputActionsPerSecond; // 0xA8
		[SerializeField] // 0x004FA818-0x004FA828
		private float m_RepeatDelay; // 0xAC
		[FormerlySerializedAs] // 0x004FA828-0x004FA874
		[SerializeField] // 0x004FA828-0x004FA874
		private bool m_ForceModuleActive; // 0xB0
	
		// Properties
		[Obsolete] // 0x004FB3BC-0x004FB3F8
		public InputMode inputMode { get; } // 0x0095EA18-0x0095EA20 
		[Obsolete] // 0x004FB3F8-0x004FB430
		public bool allowActivationOnMobileDevice { get; set; } // 0x0095EA20-0x0095EA28 0x0095EA28-0x0095EA34
		public bool forceModuleActive { get; set; } // 0x0095EA34-0x0095EA3C 0x0095EA3C-0x0095EA48
		public float inputActionsPerSecond { get; set; } // 0x0095EA48-0x0095EA50 0x0095EA50-0x0095EA58
		public float repeatDelay { get; set; } // 0x0095EA58-0x0095EA60 0x0095EA60-0x0095EA68
		public string horizontalAxis { get; set; } // 0x0095EA68-0x0095EA70 0x0095EA70-0x0095EA78
		public string verticalAxis { get; set; } // 0x0095EA78-0x0095EA80 0x0095EA80-0x0095EA88
		public string submitButton { get; set; } // 0x0095EA88-0x0095EA90 0x0095EA90-0x0095EA98
		public string cancelButton { get; set; } // 0x0095EA98-0x0095EAA0 0x0095EAA0-0x0095EAA8
	
		// Nested types
		[Obsolete] // 0x004F889C-0x004F88D8
		public enum InputMode // TypeDefIndex: 2754
		{
			Mouse = 0,
			Buttons = 1
		}
	
		// Constructors
		protected StandaloneInputModule(); // 0x0095E98C-0x0095EA18
	
		// Methods
		private bool ShouldIgnoreEventsOnNoFocus(); // 0x0095EAA8-0x0095EACC
		public override void UpdateModule(); // 0x0095EACC-0x0095EBC4
		private void ReleaseMouse(PointerEventData pointerEvent, GameObject currentOverGo); // 0x0095EBC4-0x0095EF64
		public override bool IsModuleSupported(); // 0x0095EF64-0x0095EFD4
		public override bool ShouldActivateModule(); // 0x0095EFD4-0x0095F204
		public override void ActivateModule(); // 0x0095F204-0x0095F338
		public override void DeactivateModule(); // 0x0095F338-0x0095F33C
		public override void Process(); // 0x0095F33C-0x0095F400
		private bool ProcessTouchEvents(); // 0x0095F558-0x0095F6CC
		protected void ProcessTouchPress(PointerEventData pointerEvent, bool pressed, bool released); // 0x0095FBA8-0x00960290
		protected bool SendSubmitEventToSelectedObject(); // 0x0095F970-0x0095FBA8
		private Vector2 GetRawMoveVector(); // 0x00960290-0x009603E0
		protected bool SendMoveEventToSelectedObject(); // 0x0095F6D4-0x0095F970
		protected void ProcessMouseEvent(); // 0x0095F6CC-0x0095F6D4
		[Obsolete] // 0x004FB23C-0x004FB274
		protected virtual bool ForceAutoSelect(); // 0x00960660-0x00960668
		protected void ProcessMouseEvent(int id); // 0x009603E0-0x00960660
		protected bool SendUpdateEventToSelectedObject(); // 0x0095F400-0x0095F558
		protected void ProcessMousePress(MouseButtonEventData data); // 0x00960668-0x009609E4
		protected GameObject GetCurrentFocusedGameObject(); // 0x009609E4-0x009609EC
	}

	[AddComponentMenu] // 0x004F88D8-0x004F8938
	[Obsolete] // 0x004F88D8-0x004F8938
	public class TouchInputModule : PointerInputModule // TypeDefIndex: 2755
	{
		// Fields
		private Vector2 m_LastMousePosition; // 0x58
		private Vector2 m_MousePosition; // 0x60
		private PointerEventData m_InputPointerEvent; // 0x68
		[FormerlySerializedAs] // 0x004FA874-0x004FA8C0
		[SerializeField] // 0x004FA874-0x004FA8C0
		private bool m_ForceModuleActive; // 0x70
	
		// Properties
		[Obsolete] // 0x004FB430-0x004FB468
		public bool allowActivationOnStandalone { get; set; } // 0x009609F0-0x009609F8 0x009609F8-0x00960A04
		public bool forceModuleActive { get; set; } // 0x00960A04-0x00960A0C 0x00960A0C-0x00960A18
	
		// Constructors
		protected TouchInputModule(); // 0x009609EC-0x009609F0
	
		// Methods
		public override void UpdateModule(); // 0x00960A18-0x00960B80
		public override bool IsModuleSupported(); // 0x00960B80-0x00960BBC
		public override bool ShouldActivateModule(); // 0x00960BBC-0x00960CFC
		private bool UseFakeInput(); // 0x00960CFC-0x00960D30
		public override void Process(); // 0x00960D30-0x00960D68
		private void FakeTouches(); // 0x00960D68-0x00960EB8
		private void ProcessTouchEvents(); // 0x00960EB8-0x00961014
		protected void ProcessTouchPress(PointerEventData pointerEvent, bool pressed, bool released); // 0x00961014-0x009616FC
		public override void DeactivateModule(); // 0x009616FC-0x00961700
		public override string ToString(); // 0x00961700-0x009618DC
	}

	public enum MoveDirection // TypeDefIndex: 2756
	{
		Left = 0,
		Up = 1,
		Right = 2,
		Down = 3,
		None = 4
	}

	internal static class RaycasterManager // TypeDefIndex: 2757
	{
		// Fields
		private static readonly List<BaseRaycaster> s_Raycasters; // 0x00
	
		// Constructors
		static RaycasterManager(); // 0x0095E918-0x0095E98C
	
		// Methods
		public static void AddRaycaster(BaseRaycaster baseRaycaster); // 0x00958244-0x00958314
		public static List<BaseRaycaster> GetRaycasters(); // 0x0095E8B0-0x0095E918
		public static void RemoveRaycasters(BaseRaycaster baseRaycaster); // 0x00958378-0x00958448
	}

	public abstract class BaseRaycaster : UIBehaviour // TypeDefIndex: 2758
	{
		// Fields
		private BaseRaycaster m_RootRaycaster; // 0x18
	
		// Properties
		public abstract Camera eventCamera { get; }
		[Obsolete] // 0x004FB468-0x004FB4A4
		public virtual int priority { get; } // 0x00957E78-0x00957E80 
		public virtual int sortOrderPriority { get; } // 0x00957E80-0x00957E88 
		public virtual int renderOrderPriority { get; } // 0x00957E88-0x00957E90 
		public BaseRaycaster rootRaycaster { get; } // 0x00957E90-0x00957F58 
	
		// Constructors
		protected BaseRaycaster(); // 0x00958460-0x00958468
	
		// Methods
		public abstract void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList);
		public override string ToString(); // 0x00957F58-0x009581E0
		protected override void OnEnable(); // 0x009581E0-0x00958244
		protected override void OnDisable(); // 0x00958314-0x00958378
		protected override void OnCanvasHierarchyChanged(); // 0x00958448-0x00958450
		protected override void OnTransformParentChanged(); // 0x00958454-0x0095845C
	}

	[AddComponentMenu] // 0x004F8938-0x004F89C0
	[RequireComponent] // 0x004F8938-0x004F89C0
	public class Physics2DRaycaster : PhysicsRaycaster // TypeDefIndex: 2759
	{
		// Fields
		private RaycastHit2D[] m_Hits; // 0x40
	
		// Constructors
		protected Physics2DRaycaster(); // 0x0095B744-0x0095B778
	
		// Methods
		public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList); // 0x0095B7AC-0x0095BC74
	}

	[AddComponentMenu] // 0x004F89C0-0x004F8A48
	[RequireComponent] // 0x004F89C0-0x004F8A48
	public class PhysicsRaycaster : BaseRaycaster // TypeDefIndex: 2760
	{
		// Fields
		protected const int kNoEventMaskSet = -1; // Metadata: 0x001F4C7E
		protected Camera m_EventCamera; // 0x20
		[SerializeField] // 0x004FA8C0-0x004FA8D0
		protected LayerMask m_EventMask; // 0x28
		[SerializeField] // 0x004FA8D0-0x004FA8E0
		protected int m_MaxRayIntersections; // 0x2C
		protected int m_LastMaxRayIntersections; // 0x30
		private RaycastHit[] m_Hits; // 0x38
	
		// Properties
		public override Camera eventCamera { get; } // 0x0095C0A8-0x0095C150 
		public virtual int depth { get; } // 0x0095C150-0x0095C210 
		public int finalEventMask { get; } // 0x0095BFD4-0x0095C0A8 
		public LayerMask eventMask { get; set; } // 0x0095C210-0x0095C218 0x0095C218-0x0095C220
		public int maxRayIntersections { get; set; } // 0x0095C220-0x0095C228 0x0095C228-0x0095C230
	
		// Nested types
		private class RaycastHitComparer : IComparer<RaycastHit> // TypeDefIndex: 2761
		{
			// Fields
			public static RaycastHitComparer instance; // 0x00
	
			// Constructors
			public RaycastHitComparer(); // 0x0095C5C4-0x0095C5CC
			static RaycastHitComparer(); // 0x0095C5CC-0x0095C630
	
			// Methods
			public int Compare(RaycastHit x, RaycastHit y); // 0x0095C580-0x0095C5C4
		}
	
		// Constructors
		protected PhysicsRaycaster(); // 0x0095B778-0x0095B7AC
	
		// Methods
		protected bool ComputeRayAndDistance(PointerEventData eventData, ref Ray ray, ref int eventDisplayIndex, ref float distanceToClipPlane); // 0x0095BC74-0x0095BFD4
		public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList); // 0x0095C230-0x0095C580
	}

	public struct RaycastResult // TypeDefIndex: 2762
	{
		// Fields
		private GameObject m_GameObject; // 0x00
		public BaseRaycaster module; // 0x08
		public float distance; // 0x10
		public float index; // 0x14
		public int depth; // 0x18
		public int sortingLayer; // 0x1C
		public int sortingOrder; // 0x20
		public Vector3 worldPosition; // 0x24
		public Vector3 worldNormal; // 0x30
		public Vector2 screenPosition; // 0x3C
		public int displayIndex; // 0x44
	
		// Properties
		public GameObject gameObject { get; set; } // 0x00585130-0x00585138 0x00585138-0x00585140
		public bool isValid { get; } // 0x00585140-0x00585148 
	
		// Methods
		public override string ToString(); // 0x00585148-0x00585150
	}

	public abstract class UIBehaviour : MonoBehaviour // TypeDefIndex: 2763
	{
		// Constructors
		protected UIBehaviour(); // 0x00956E74-0x00956E7C
	
		// Methods
		protected virtual void Awake(); // 0x009618DC-0x009618E0
		protected virtual void OnEnable(); // 0x00957118-0x0095711C
		protected virtual void Start(); // 0x009618E0-0x009618E4
		protected virtual void OnDisable(); // 0x00957284-0x00957288
		protected virtual void OnDestroy(); // 0x009618E4-0x009618E8
		public virtual bool IsActive(); // 0x009618E8-0x009618F0
		protected virtual void OnRectTransformDimensionsChange(); // 0x009618F0-0x009618F4
		protected virtual void OnBeforeTransformParentChanged(); // 0x009618F4-0x009618F8
		protected virtual void OnTransformParentChanged(); // 0x0095845C-0x00958460
		protected virtual void OnDidApplyAnimationProperties(); // 0x009618F8-0x009618FC
		protected virtual void OnCanvasGroupChanged(); // 0x009618FC-0x00961900
		protected virtual void OnCanvasHierarchyChanged(); // 0x00958450-0x00958454
		public bool IsDestroyed(); // 0x00961900-0x0096196C
	}
}

[CompilerGenerated] // 0x004F8A48-0x004F8A58
internal sealed class _PrivateImplementationDetails_ // TypeDefIndex: 2764
{
	// Fields
	internal static readonly __StaticArrayInitTypeSize_12 _7BBE37982E6C057ED87163CAFC7FD6E5E42EEA46; // 0x00 // Starts with: 20 00 2e 00 2c 00 09 00 - Metadata: 0x001F4C82

	// Nested types
	private struct __StaticArrayInitTypeSize_12 // TypeDefIndex: 2765
	{
	}
}

namespace UnityEngine.UIElements.UIR
{
	[NativeHeader] // 0x004FB680-0x004FB6B8
	internal class Utility // TypeDefIndex: 2767
	{
		// Fields
		[CompilerGenerated] // 0x004FB728-0x004FB764
		[DebuggerBrowsable] // 0x004FB728-0x004FB764
		private static Action<bool> GraphicsResourcesRecreate; // 0x00
		[CompilerGenerated] // 0x004FB764-0x004FB7A0
		[DebuggerBrowsable] // 0x004FB764-0x004FB7A0
		private static Action EngineUpdate; // 0x08
		[CompilerGenerated] // 0x004FB7A0-0x004FB7DC
		[DebuggerBrowsable] // 0x004FB7A0-0x004FB7DC
		private static Action FlushPendingResources; // 0x10
		private static CustomSampler s_RaiseEngineUpdateSampler; // 0x18
	
		// Nested types
		public class GPUBuffer<T> // TypeDefIndex: 2768
			where T : struct
		{
			// Fields
			private IntPtr buffer;
		}
	
		// Constructors
		static Utility(); // 0x00FB3070-0x00FB30F4
	
		// Methods
		[RequiredByNativeCode] // 0x004FB7DC-0x004FB7EC
		internal static void RaiseGraphicsResourcesRecreate(bool recreate); // 0x00FB2E5C-0x00FB2F18
		[RequiredByNativeCode] // 0x004FB7EC-0x004FB7FC
		internal static void RaiseEngineUpdate(); // 0x00FB2F18-0x00FB2FC4
		[RequiredByNativeCode] // 0x004FB7FC-0x004FB80C
		internal static void RaiseFlushPendingResources(); // 0x00FB2FC4-0x00FB3070
	}
}

namespace UnityEngine.Yoga
{
	internal delegate float BaselineFunction(YogaNode node, float width, float height); // TypeDefIndex: 2769; 0x00FB3104-0x00FB350C

	internal delegate YogaSize MeasureFunction(YogaNode node, float width, YogaMeasureMode widthMode, float height, YogaMeasureMode heightMode); // TypeDefIndex: 2770; 0x00FB35FC-0x00FB3A60

	internal enum YogaMeasureMode // TypeDefIndex: 2771
	{
		Undefined = 0,
		Exactly = 1,
		AtMost = 2
	}

	[NativeHeader] // 0x004FB6B8-0x004FB6F0
	internal static class Native // TypeDefIndex: 2772
	{
		// Methods
		public static void YGNodeFree(IntPtr ygNode); // 0x00FB3B78-0x00FB3BFC
		[FreeFunction] // 0x004FB80C-0x004FB850
		private static void YGNodeFreeInternal(IntPtr ygNode); // 0x00FB3BFC-0x00FB3C3C
		[RequiredByNativeCode] // 0x004FB850-0x004FB860
		public static void YGNodeMeasureInvoke(YogaNode node, float width, YogaMeasureMode widthMode, float height, YogaMeasureMode heightMode, IntPtr returnValueAddress); // 0x00FB3C3C-0x00FB3CA4
		[RequiredByNativeCode] // 0x004FB860-0x004FB870
		public static void YGNodeBaselineInvoke(YogaNode node, float width, float height, IntPtr returnValueAddress); // 0x00FB3D64-0x00FB3DB4
	}

	[DefaultMember] // 0x004FB6F0-0x004FB728
	internal class YogaNode // TypeDefIndex: 2773
	{
		// Fields
		internal IntPtr _ygNode; // 0x10
		private MeasureFunction _measureFunction; // 0x18
		private BaselineFunction _baselineFunction; // 0x20
	
		// Methods
		~YogaNode(); // 0x00FB3E5C-0x00FB3F60
		public static YogaSize MeasureInternal(YogaNode node, float width, YogaMeasureMode widthMode, float height, YogaMeasureMode heightMode); // 0x00FB3CA4-0x00FB3D64
		public static float BaselineInternal(YogaNode node, float width, float height); // 0x00FB3DB4-0x00FB3E5C
	}

	internal struct YogaSize // TypeDefIndex: 2774
	{
		// Fields
		public float width; // 0x00
		public float height; // 0x04
	}
}

namespace UnityEngine.Networking.Match
{
	[Obsolete] // 0x004FCA2C-0x004FCA64
	public class MatchInfo // TypeDefIndex: 2776
	{
		// Fields
		[CompilerGenerated] // 0x004FD11C-0x004FD158
		[DebuggerBrowsable] // 0x004FD11C-0x004FD158
		private string _address_k__BackingField; // 0x10
		[CompilerGenerated] // 0x004FD158-0x004FD194
		[DebuggerBrowsable] // 0x004FD158-0x004FD194
		private int _port_k__BackingField; // 0x18
		[CompilerGenerated] // 0x004FD194-0x004FD1D0
		[DebuggerBrowsable] // 0x004FD194-0x004FD1D0
		private int _domain_k__BackingField; // 0x1C
		[CompilerGenerated] // 0x004FD1D0-0x004FD20C
		[DebuggerBrowsable] // 0x004FD1D0-0x004FD20C
		private NetworkID _networkId_k__BackingField; // 0x20
		[CompilerGenerated] // 0x004FD20C-0x004FD248
		[DebuggerBrowsable] // 0x004FD20C-0x004FD248
		private NetworkAccessToken _accessToken_k__BackingField; // 0x28
		[CompilerGenerated] // 0x004FD248-0x004FD284
		[DebuggerBrowsable] // 0x004FD248-0x004FD284
		private NodeID _nodeId_k__BackingField; // 0x30
		[CompilerGenerated] // 0x004FD284-0x004FD2C0
		[DebuggerBrowsable] // 0x004FD284-0x004FD2C0
		private bool _usingRelay_k__BackingField; // 0x32
	
		// Properties
		public string address { [CompilerGenerated] /* 0x004FDFE4-0x004FDFF4 */ get; [CompilerGenerated] /* 0x004FDFF4-0x004FE004 */ private set; } // 0x00F612EC-0x00F612F4 0x00F612F4-0x00F612FC
		public int port { [CompilerGenerated] /* 0x004FE004-0x004FE014 */ get; [CompilerGenerated] /* 0x004FE014-0x004FE024 */ private set; } // 0x00F612FC-0x00F61304 0x00F61304-0x00F6130C
		public int domain { [CompilerGenerated] /* 0x004FE024-0x004FE034 */ get; [CompilerGenerated] /* 0x004FE034-0x004FE044 */ private set; } // 0x00F6130C-0x00F61314 0x00F61314-0x00F6131C
		public NetworkID networkId { [CompilerGenerated] /* 0x004FE044-0x004FE054 */ get; [CompilerGenerated] /* 0x004FE054-0x004FE064 */ private set; } // 0x00F6131C-0x00F61324 0x00F61324-0x00F6132C
		private NetworkAccessToken accessToken { [CompilerGenerated] /* 0x004FE064-0x004FE074 */ set; } // 0x00F6132C-0x00F61334
		public NodeID nodeId { [CompilerGenerated] /* 0x004FE074-0x004FE084 */ get; [CompilerGenerated] /* 0x004FE084-0x004FE094 */ private set; } // 0x00F61334-0x00F6133C 0x00F6133C-0x00F61344
		public bool usingRelay { [CompilerGenerated] /* 0x004FE094-0x004FE0A4 */ get; [CompilerGenerated] /* 0x004FE0A4-0x004FE0B4 */ private set; } // 0x00F61344-0x00F6134C 0x00F6134C-0x00F61358
	
		// Constructors
		internal MatchInfo(CreateMatchResponse matchResponse); // 0x00F61070-0x00F61128
		internal MatchInfo(JoinMatchResponse matchResponse); // 0x00F61234-0x00F612EC
	
		// Methods
		public override string ToString(); // 0x00F61358-0x00F61544
	}

	[Obsolete] // 0x004FCA64-0x004FCA9C
	public class MatchInfoSnapshot // TypeDefIndex: 2777
	{
		// Fields
		[CompilerGenerated] // 0x004FD2C0-0x004FD2FC
		[DebuggerBrowsable] // 0x004FD2C0-0x004FD2FC
		private NetworkID _networkId_k__BackingField; // 0x10
		[CompilerGenerated] // 0x004FD2FC-0x004FD338
		[DebuggerBrowsable] // 0x004FD2FC-0x004FD338
		private NodeID _hostNodeId_k__BackingField; // 0x18
		[CompilerGenerated] // 0x004FD338-0x004FD374
		[DebuggerBrowsable] // 0x004FD338-0x004FD374
		private string _name_k__BackingField; // 0x20
		[CompilerGenerated] // 0x004FD374-0x004FD3B0
		[DebuggerBrowsable] // 0x004FD374-0x004FD3B0
		private int _averageEloScore_k__BackingField; // 0x28
		[CompilerGenerated] // 0x004FD3B0-0x004FD3EC
		[DebuggerBrowsable] // 0x004FD3B0-0x004FD3EC
		private int _maxSize_k__BackingField; // 0x2C
		[CompilerGenerated] // 0x004FD3EC-0x004FD428
		[DebuggerBrowsable] // 0x004FD3EC-0x004FD428
		private int _currentSize_k__BackingField; // 0x30
		[CompilerGenerated] // 0x004FD428-0x004FD464
		[DebuggerBrowsable] // 0x004FD428-0x004FD464
		private bool _isPrivate_k__BackingField; // 0x34
		[CompilerGenerated] // 0x004FD464-0x004FD4A0
		[DebuggerBrowsable] // 0x004FD464-0x004FD4A0
		private Dictionary<string, long> _matchAttributes_k__BackingField; // 0x38
		[CompilerGenerated] // 0x004FD4A0-0x004FD4DC
		[DebuggerBrowsable] // 0x004FD4A0-0x004FD4DC
		private List<MatchInfoDirectConnectSnapshot> _directConnectInfos_k__BackingField; // 0x40
	
		// Properties
		public NetworkID networkId { [CompilerGenerated] /* 0x004FE0B4-0x004FE0C4 */ get; [CompilerGenerated] /* 0x004FE0C4-0x004FE0D4 */ private set; } // 0x00F61774-0x00F6177C 0x00F6177C-0x00F61784
		private NodeID hostNodeId { [CompilerGenerated] /* 0x004FE0D4-0x004FE0E4 */ set; } // 0x00F61784-0x00F6178C
		public string name { [CompilerGenerated] /* 0x004FE0E4-0x004FE0F4 */ get; [CompilerGenerated] /* 0x004FE0F4-0x004FE104 */ private set; } // 0x00F6178C-0x00F61794 0x00F61794-0x00F6179C
		private int averageEloScore { [CompilerGenerated] /* 0x004FE104-0x004FE114 */ set; } // 0x00F6179C-0x00F617A4
		private int maxSize { [CompilerGenerated] /* 0x004FE114-0x004FE124 */ set; } // 0x00F617A4-0x00F617AC
		private int currentSize { [CompilerGenerated] /* 0x004FE124-0x004FE134 */ set; } // 0x00F617AC-0x00F617B4
		private bool isPrivate { [CompilerGenerated] /* 0x004FE134-0x004FE144 */ set; } // 0x00F617B4-0x00F617C0
		private Dictionary<string, long> matchAttributes { [CompilerGenerated] /* 0x004FE144-0x004FE154 */ set; } // 0x00F617C0-0x00F617C8
		public List<MatchInfoDirectConnectSnapshot> directConnectInfos { [CompilerGenerated] /* 0x004FE154-0x004FE164 */ get; [CompilerGenerated] /* 0x004FE164-0x004FE174 */ private set; } // 0x00F61718-0x00F61720 0x00F617C8-0x00F617D0
	
		// Nested types
		public class MatchInfoDirectConnectSnapshot // TypeDefIndex: 2778
		{
			// Fields
			[CompilerGenerated] // 0x004FD4DC-0x004FD518
			[DebuggerBrowsable] // 0x004FD4DC-0x004FD518
			private NodeID _nodeId_k__BackingField; // 0x10
			[CompilerGenerated] // 0x004FD518-0x004FD554
			[DebuggerBrowsable] // 0x004FD518-0x004FD554
			private string _publicAddress_k__BackingField; // 0x18
			[CompilerGenerated] // 0x004FD554-0x004FD590
			[DebuggerBrowsable] // 0x004FD554-0x004FD590
			private string _privateAddress_k__BackingField; // 0x20
			[CompilerGenerated] // 0x004FD590-0x004FD5CC
			[DebuggerBrowsable] // 0x004FD590-0x004FD5CC
			private HostPriority _hostPriority_k__BackingField; // 0x28
	
			// Properties
			private NodeID nodeId { [CompilerGenerated] /* 0x004FE174-0x004FE184 */ set; } // 0x00F617D0-0x00F617D8
			private string publicAddress { [CompilerGenerated] /* 0x004FE184-0x004FE194 */ set; } // 0x00F617D8-0x00F617E0
			private string privateAddress { [CompilerGenerated] /* 0x004FE194-0x004FE1A4 */ set; } // 0x00F617E0-0x00F617E8
			private HostPriority hostPriority { [CompilerGenerated] /* 0x004FE1A4-0x004FE1B4 */ set; } // 0x00F617E8-0x00F617F0
	
			// Constructors
			internal MatchInfoDirectConnectSnapshot(MatchDirectConnectInfo matchDirectConnectInfo); // 0x00F61720-0x00F61774
		}
	
		// Constructors
		internal MatchInfoSnapshot(MatchDesc matchDesc); // 0x00F61544-0x00F61718
	}

	[Obsolete] // 0x004FCA9C-0x004FCAD4
	public class NetworkMatch : MonoBehaviour // TypeDefIndex: 2779
	{
		// Fields
		private Uri m_BaseUri; // 0x18
	
		// Properties
		public Uri baseUri { get; set; } // 0x00F61864-0x00F6186C 0x00F6186C-0x00F61874
	
		// Nested types
		public delegate void BasicResponseDelegate(bool success, string extendedInfo); // TypeDefIndex: 2780; 0x00F62C08-0x00F62E64
	
		public delegate void DataResponseDelegate<T>(bool success, string extendedInfo, T responseData); // TypeDefIndex: 2781; 0x00000000-0x00000000
	
		private delegate void InternalResponseDelegate<T, U>(T response, U userCallback); // TypeDefIndex: 2782; 0x00000000-0x00000000
	
		[CompilerGenerated] // 0x004FCAD4-0x004FCAE4
		private sealed class _ProcessMatchResponse_c__Iterator0<JSONRESPONSE, USERRESPONSEDELEGATETYPE> : IEnumerator<object> // TypeDefIndex: 2783
			where JSONRESPONSE : Response, new()
		{
			// Fields
			internal UnityWebRequest client;
			internal JSONRESPONSE _jsonInterface___0;
			internal InternalResponseDelegate<JSONRESPONSE, USERRESPONSEDELEGATETYPE> internalCallback;
			internal USERRESPONSEDELEGATETYPE userCallback;
			internal object _current;
			internal bool _disposing;
			internal int _PC;
	
			// Properties
			object IEnumerator<object>.Current { [DebuggerHidden] /* 0x004FE228-0x004FE238 */ get; }
			object IEnumerator.Current { [DebuggerHidden] /* 0x004FE238-0x004FE248 */ get; }
	
			// Constructors
			[DebuggerHidden] // 0x004FE218-0x004FE228
			public _ProcessMatchResponse_c__Iterator0();
	
			// Methods
			public bool MoveNext();
			[DebuggerHidden] // 0x004FE248-0x004FE258
			public void Dispose();
			[DebuggerHidden] // 0x004FE258-0x004FE268
			public void Reset();
		}
	
		// Constructors
		public NetworkMatch(); // 0x00F617F0-0x00F61864
	
		// Methods
		[EditorBrowsable] // 0x004FE1B4-0x004FE208
		[Obsolete] // 0x004FE1B4-0x004FE208
		public void SetProgramAppID(AppID programAppID); // 0x00F61874-0x00F61878
		public Coroutine CreateMatch(string matchName, uint matchSize, bool matchAdvertise, string matchPassword, string publicClientAddress, string privateClientAddress, int eloScoreForMatch, int requestDomain, DataResponseDelegate<MatchInfo> callback); // 0x00F61878-0x00F619C0
		internal Coroutine CreateMatch(CreateMatchRequest req, DataResponseDelegate<MatchInfo> callback); // 0x00F619C0-0x00F61E08
		internal virtual void OnMatchCreate(CreateMatchResponse response, DataResponseDelegate<MatchInfo> userCallback); // 0x00F61E40-0x00F61F44
		public Coroutine JoinMatch(NetworkID netId, string matchPassword, string publicClientAddress, string privateClientAddress, int eloScoreForClient, int requestDomain, DataResponseDelegate<MatchInfo> callback); // 0x00F62054-0x00F62114
		internal Coroutine JoinMatch(JoinMatchRequest req, DataResponseDelegate<MatchInfo> callback); // 0x00F62114-0x00F62544
		internal void OnMatchJoined(JoinMatchResponse response, DataResponseDelegate<MatchInfo> userCallback); // 0x00F62544-0x00F62648
		public Coroutine DestroyMatch(NetworkID netId, int requestDomain, BasicResponseDelegate callback); // 0x00F62648-0x00F626DC
		internal Coroutine DestroyMatch(DestroyMatchRequest req, BasicResponseDelegate callback); // 0x00F626DC-0x00F62AA8
		internal void OnMatchDestroyed(BasicResponse response, BasicResponseDelegate userCallback); // 0x00F62BD8-0x00F62C08
		public Coroutine DropConnection(NetworkID netId, NodeID dropNodeId, int requestDomain, BasicResponseDelegate callback); // 0x00F62E64-0x00F62F00
		internal Coroutine DropConnection(DropConnectionRequest req, BasicResponseDelegate callback); // 0x00F62F00-0x00F63320
		internal void OnDropConnection(DropConnectionResponse response, BasicResponseDelegate userCallback); // 0x00F63320-0x00F63350
		public Coroutine ListMatches(int startPageNumber, int resultPageSize, string matchNameFilter, bool filterOutPrivateMatchesFromResults, int eloScoreTarget, int requestDomain, DataResponseDelegate<List<MatchInfoSnapshot>> callback); // 0x00F63350-0x00F63478
		internal Coroutine ListMatches(ListMatchRequest req, DataResponseDelegate<List<MatchInfoSnapshot>> callback); // 0x00F63478-0x00F63874
		internal void OnMatchList(ListMatchResponse response, DataResponseDelegate<List<MatchInfoSnapshot>> userCallback); // 0x00F63874-0x00F63A1C
		public Coroutine SetMatchAttributes(NetworkID networkId, bool isListed, int requestDomain, BasicResponseDelegate callback); // 0x00F63A1C-0x00F63ABC
		internal Coroutine SetMatchAttributes(SetMatchAttributesRequest req, BasicResponseDelegate callback); // 0x00F63B24-0x00F63F10
		internal void OnSetMatchAttributes(BasicResponse response, BasicResponseDelegate userCallback); // 0x00F63F20-0x00F63F50
		[DebuggerHidden] // 0x004FE208-0x004FE218
		private IEnumerator ProcessMatchResponse<JSONRESPONSE, USERRESPONSEDELEGATETYPE>(UnityWebRequest client, InternalResponseDelegate<JSONRESPONSE, USERRESPONSEDELEGATETYPE> internalCallback, USERRESPONSEDELEGATETYPE userCallback)
			where JSONRESPONSE : Response, new();
	}
}

namespace UnityEngine.Networking
{
	[NativeConditional] // 0x004FCAE4-0x004FCBB4
	[NativeHeader] // 0x004FCAE4-0x004FCBB4
	[NativeHeader] // 0x004FCAE4-0x004FCBB4
	[NativeHeader] // 0x004FCAE4-0x004FCBB4
	[Obsolete] // 0x004FCAE4-0x004FCBB4
	public sealed class NetworkTransport // TypeDefIndex: 2784
	{
		// Fields
		private static int s_nextSceneId; // 0x00
	
		// Properties
		public static bool IsStarted { get; } // 0x00F65E30-0x00F65EA8 
	
		// Constructors
		static NetworkTransport(); // 0x00F66CE0-0x00F66D34
	
		// Methods
		public static bool DoesEndPointUsePlatformProtocols(EndPoint endPoint); // 0x00F64258-0x00F64330
		public static int ConnectEndPoint(int hostId, EndPoint endPoint, int exceptionConnectionId, out byte error); // 0x00F64330-0x00F649B8
		public static void Init(); // 0x00F64A28-0x00F64AA0
		public static void Init(GlobalConfig config); // 0x00F64AD4-0x00F64C28
		[FreeFunction] // 0x004FE268-0x004FE2A0
		private static void InitializeClass(); // 0x00F64AA0-0x00F64AD4
		[FreeFunction] // 0x004FE2A0-0x004FE2D8
		private static void InitializeClassWithConfig(GlobalConfigInternal config); // 0x00F64CA8-0x00F64CE8
		public static void Shutdown(); // 0x00F64CE8-0x00F64D60
		public static int AddHostWithSimulator(HostTopology topology, int minTimeout, int maxTimeout, int port, string ip); // 0x00F64D94-0x00F64EB0
		public static int AddHostWithSimulator(HostTopology topology, int minTimeout, int maxTimeout, int port); // 0x00F650F0-0x00F65180
		public static int AddHost(HostTopology topology, int port, string ip); // 0x00F65180-0x00F65204
		[FreeFunction] // 0x004FE2D8-0x004FE310
		private static int AddHostInternal(HostTopologyInternal topologyInt, string ip, int port, int minTimeout, int maxTimeout); // 0x00F65080-0x00F650F0
		public static int AddWebsocketHost(HostTopology topology, int port, string ip); // 0x00F65204-0x00F653C4
		[FreeFunction] // 0x004FE310-0x004FE348
		private static int AddWsHostInternal(HostTopologyInternal topologyInt, string ip, int port); // 0x00F656D4-0x00F6572C
		private static bool IsPortOpen(string ip, int port); // 0x00F653C4-0x00F656D4
		public static void ConnectAsNetworkHost(int hostId, string address, int port, NetworkID network, SourceID source, NodeID node, out byte error); // 0x00F6572C-0x00F657F8
		[FreeFunction] // 0x004FE348-0x004FE380
		private static void ConnectAsNetworkHostInternal(int hostId, string address, int port, ulong network, ulong source, ushort node, out byte error); // 0x00F657F8-0x00F65880
		public static NetworkEventType ReceiveRelayEventFromHost(int hostId, out byte error); // 0x00F65880-0x00F65914
		[FreeFunction] // 0x004FE380-0x004FE3B8
		private static int ReceiveRelayEventFromHostInternal(int hostId, out byte error); // 0x00F65914-0x00F65964
		public static int ConnectToNetworkPeer(int hostId, string address, int port, int exceptionConnectionId, int relaySlotId, NetworkID network, SourceID source, NodeID node, int bytesPerSec, float bucketSizeFactor, out byte error); // 0x00F65964-0x00F65A60
		public static int ConnectToNetworkPeer(int hostId, string address, int port, int exceptionConnectionId, int relaySlotId, NetworkID network, SourceID source, NodeID node, out byte error); // 0x00F65B1C-0x00F65BF4
		[FreeFunction] // 0x004FE3B8-0x004FE3F0
		private static int ConnectToNetworkPeerInternal(int hostId, string address, int port, int exceptionConnectionId, int relaySlotId, ulong network, ulong source, ushort node, int bytesPerSec, float bucketSizeFactor, out byte error); // 0x00F65A60-0x00F65B1C
		[FreeFunction] // 0x004FE3F0-0x004FE428
		public static int GetCurrentRTT(int hostId, int connectionId, out byte error); // 0x00F65BF4-0x00F65C4C
		[FreeFunction] // 0x004FE428-0x004FE460
		public static string GetConnectionInfo(int hostId, int connectionId, out int port, out ulong network, out ushort dstNode, out byte error); // 0x00F65C4C-0x00F65CCC
		public static void GetConnectionInfo(int hostId, int connectionId, out string address, out int port, out NetworkID network, out NodeID dstNode, out byte error); // 0x00F65CCC-0x00F65DBC
		[FreeFunction] // 0x004FE460-0x004FE498
		private static int GetMaxPacketSize(); // 0x00F65DBC-0x00F65DF0
		[FreeFunction] // 0x004FE498-0x004FE4D0
		public static bool RemoveHost(int hostId); // 0x00F65DF0-0x00F65E30
		[FreeFunction] // 0x004FE4D0-0x004FE508
		private static bool IsStartedInternal(); // 0x00F65EA8-0x00F65EDC
		[FreeFunction] // 0x004FE508-0x004FE540
		public static int Connect(int hostId, string address, int port, int exeptionConnectionId, out byte error); // 0x00F65EDC-0x00F65F4C
		[FreeFunction] // 0x004FE540-0x004FE578
		private static int ConnectWithSimulatorInternal(int hostId, string address, int port, int exeptionConnectionId, out byte error, ConnectionSimulatorConfigInternal conf); // 0x00F65F4C-0x00F65FCC
		public static int ConnectWithSimulator(int hostId, string address, int port, int exeptionConnectionId, out byte error, ConnectionSimulatorConfig conf); // 0x00F65FCC-0x00F660AC
		[FreeFunction] // 0x004FE578-0x004FE5B0
		public static bool Disconnect(int hostId, int connectionId, out byte error); // 0x00F660AC-0x00F66104
		[FreeFunction] // 0x004FE5B0-0x004FE5E8
		private static int Internal_ConnectEndPoint(int hostId, out byte[] sockAddrStorage, int sockAddrStorageLen, int exceptionConnectionId, out byte error); // 0x00F649B8-0x00F64A28
		public static bool Send(int hostId, int connectionId, int channelId, byte[] buffer, int size, out byte error); // 0x00F66104-0x00F6620C
		[FreeFunction] // 0x004FE5E8-0x004FE620
		private static bool SendWrapper(int hostId, int connectionId, int channelId, out byte[] buffer, int size, out byte error); // 0x00F6620C-0x00F6628C
		public static NetworkEventType Receive(out int hostId, out int connectionId, out int channelId, byte[] buffer, int bufferSize, out int receivedSize, out byte error); // 0x00F6628C-0x00F66358
		[FreeFunction] // 0x004FE620-0x004FE658
		private static int PopData(out int hostId, out int connectionId, out int channelId, out byte[] buffer, int bufferSize, out int receivedSize, out byte error); // 0x00F66358-0x00F663E0
		public static NetworkEventType ReceiveFromHost(int hostId, out int connectionId, out int channelId, byte[] buffer, int bufferSize, out int receivedSize, out byte error); // 0x00F663E0-0x00F664AC
		[FreeFunction] // 0x004FE658-0x004FE690
		private static int PopDataFromHost(int hostId, out int connectionId, out int channelId, out byte[] buffer, int bufferSize, out int receivedSize, out byte error); // 0x00F664AC-0x00F66534
		[FreeFunction] // 0x004FE690-0x004FE6C8
		public static void SetPacketStat(int direction, int packetStatId, int numMsgs, int numBytes); // 0x00F66534-0x00F6659C
		[FreeFunction] // 0x004FE6C8-0x004FE714
		[NativeThrows] // 0x004FE6C8-0x004FE714
		private static void SetNetworkEventAvailableCallback(Action<int> callback); // 0x00F64C28-0x00F64C68
		[FreeFunction] // 0x004FE714-0x004FE74C
		private static void Cleanup(); // 0x00F64D60-0x00F64D94
		[FreeFunction] // 0x004FE74C-0x004FE798
		[NativeThrows] // 0x004FE74C-0x004FE798
		private static void SetConnectionReadyForSendCallback(Action<int, int> callback); // 0x00F64C68-0x00F64CA8
		[FreeFunction] // 0x004FE798-0x004FE7D0
		private static bool StartBroadcastDiscoveryWithData(int hostId, int broadcastPort, int key, int version, int subversion, out byte[] buffer, int size, int timeout, out byte error); // 0x00F6659C-0x00F6663C
		[FreeFunction] // 0x004FE7D0-0x004FE808
		private static bool StartBroadcastDiscoveryWithoutData(int hostId, int broadcastPort, int key, int version, int subversion, int timeout, out byte error); // 0x00F6663C-0x00F666C4
		public static bool StartBroadcastDiscovery(int hostId, int broadcastPort, int key, int version, int subversion, byte[] buffer, int size, int timeout, out byte error); // 0x00F666C4-0x00F669D0
		[FreeFunction] // 0x004FE808-0x004FE840
		public static void StopBroadcastDiscovery(); // 0x00F669D0-0x00F66A04
		[FreeFunction] // 0x004FE840-0x004FE878
		public static void SetBroadcastCredentials(int hostId, int key, int version, int subversion, out byte error); // 0x00F66A04-0x00F66A74
		[FreeFunction] // 0x004FE878-0x004FE8B0
		public static string GetBroadcastConnectionInfo(int hostId, out int port, out byte error); // 0x00F66A74-0x00F66ACC
		public static void GetBroadcastConnectionInfo(int hostId, out string address, out int port, out byte error); // 0x00F66ACC-0x00F66B7C
		public static void GetBroadcastConnectionMessage(int hostId, byte[] buffer, int bufferSize, out int receivedSize, out byte error); // 0x00F66B7C-0x00F66C30
		[FreeFunction] // 0x004FE8B0-0x004FE8E8
		public static void SetMulticastLock(bool enabled); // 0x00F66CA0-0x00F66CE0
		[FreeFunction] // 0x004FE8E8-0x004FE920
		private static void GetBroadcastConnectionMessageInternal(int hostId, out byte[] buffer, int bufferSize, out int receivedSize, out byte error); // 0x00F66C30-0x00F66CA0
		private static void CheckTopology(HostTopology topology); // 0x00F64EB0-0x00F65080
	}

	public enum NetworkEventType // TypeDefIndex: 2785
	{
		DataEvent = 0,
		ConnectEvent = 1,
		DisconnectEvent = 2,
		Nothing = 3,
		BroadcastEvent = 4
	}

	public enum QosType // TypeDefIndex: 2786
	{
		Unreliable = 0,
		UnreliableFragmented = 1,
		UnreliableSequenced = 2,
		Reliable = 3,
		ReliableFragmented = 4,
		ReliableSequenced = 5,
		StateUpdate = 6,
		ReliableStateUpdate = 7,
		AllCostDelivery = 8,
		UnreliableFragmentedSequenced = 9,
		ReliableFragmentedSequenced = 10
	}

	public enum NetworkError // TypeDefIndex: 2787
	{
		Ok = 0,
		WrongHost = 1,
		WrongConnection = 2,
		WrongChannel = 3,
		NoResources = 4,
		BadMessage = 5,
		Timeout = 6,
		MessageToLong = 7,
		WrongOperation = 8,
		VersionMismatch = 9,
		CRCMismatch = 10,
		DNSFailure = 11,
		UsageError = 12
	}

	public enum ReactorModel // TypeDefIndex: 2788
	{
		SelectReactor = 0,
		FixRateReactor = 1
	}

	public enum ConnectionAcksType // TypeDefIndex: 2789
	{
		Acks32 = 1,
		Acks64 = 2,
		Acks96 = 3,
		Acks128 = 4
	}

	[Serializable]
	[Obsolete] // 0x004FCBB4-0x004FCBEC
	public class ChannelQOS // TypeDefIndex: 2790
	{
		// Fields
		[SerializeField] // 0x004FD5CC-0x004FD5DC
		internal QosType m_Type; // 0x10
		[SerializeField] // 0x004FD5DC-0x004FD5EC
		internal bool m_BelongsSharedOrderChannel; // 0x14
	
		// Properties
		public QosType QOS { get; } // 0x00F5BB2C-0x00F5BB34 
	
		// Constructors
		public ChannelQOS(QosType value); // 0x00F5BA24-0x00F5BA54
		public ChannelQOS(); // 0x00F5BA54-0x00F5BA80
		public ChannelQOS(ChannelQOS channel); // 0x00F5BA80-0x00F5BB2C
	}

	[Serializable]
	[Obsolete] // 0x004FCBEC-0x004FCC24
	public class ConnectionConfig // TypeDefIndex: 2791
	{
		// Fields
		private const int g_MinPacketSize = 128; // Metadata: 0x001F4D26
		[SerializeField] // 0x004FD5EC-0x004FD5FC
		private ushort m_PacketSize; // 0x10
		[SerializeField] // 0x004FD5FC-0x004FD60C
		private ushort m_FragmentSize; // 0x12
		[SerializeField] // 0x004FD60C-0x004FD61C
		private uint m_ResendTimeout; // 0x14
		[SerializeField] // 0x004FD61C-0x004FD62C
		private uint m_DisconnectTimeout; // 0x18
		[SerializeField] // 0x004FD62C-0x004FD63C
		private uint m_ConnectTimeout; // 0x1C
		[SerializeField] // 0x004FD63C-0x004FD64C
		private uint m_MinUpdateTimeout; // 0x20
		[SerializeField] // 0x004FD64C-0x004FD65C
		private uint m_PingTimeout; // 0x24
		[SerializeField] // 0x004FD65C-0x004FD66C
		private uint m_ReducedPingTimeout; // 0x28
		[SerializeField] // 0x004FD66C-0x004FD67C
		private uint m_AllCostTimeout; // 0x2C
		[SerializeField] // 0x004FD67C-0x004FD68C
		private byte m_NetworkDropThreshold; // 0x30
		[SerializeField] // 0x004FD68C-0x004FD69C
		private byte m_OverflowDropThreshold; // 0x31
		[SerializeField] // 0x004FD69C-0x004FD6AC
		private byte m_MaxConnectionAttempt; // 0x32
		[SerializeField] // 0x004FD6AC-0x004FD6BC
		private uint m_AckDelay; // 0x34
		[SerializeField] // 0x004FD6BC-0x004FD6CC
		private uint m_SendDelay; // 0x38
		[SerializeField] // 0x004FD6CC-0x004FD6DC
		private ushort m_MaxCombinedReliableMessageSize; // 0x3C
		[SerializeField] // 0x004FD6DC-0x004FD6EC
		private ushort m_MaxCombinedReliableMessageCount; // 0x3E
		[SerializeField] // 0x004FD6EC-0x004FD6FC
		private ushort m_MaxSentMessageQueueSize; // 0x40
		[SerializeField] // 0x004FD6FC-0x004FD70C
		private ConnectionAcksType m_AcksType; // 0x44
		[SerializeField] // 0x004FD70C-0x004FD71C
		private bool m_UsePlatformSpecificProtocols; // 0x48
		[SerializeField] // 0x004FD71C-0x004FD72C
		private uint m_InitialBandwidth; // 0x4C
		[SerializeField] // 0x004FD72C-0x004FD73C
		private float m_BandwidthPeakFactor; // 0x50
		[SerializeField] // 0x004FD73C-0x004FD74C
		private ushort m_WebSocketReceiveBufferMaxSize; // 0x54
		[SerializeField] // 0x004FD74C-0x004FD75C
		private uint m_UdpSocketReceiveBufferMaxSize; // 0x58
		[SerializeField] // 0x004FD75C-0x004FD76C
		private string m_SSLCertFilePath; // 0x60
		[SerializeField] // 0x004FD76C-0x004FD77C
		private string m_SSLPrivateKeyFilePath; // 0x68
		[SerializeField] // 0x004FD77C-0x004FD78C
		private string m_SSLCAFilePath; // 0x70
		[SerializeField] // 0x004FD78C-0x004FD79C
		internal List<ChannelQOS> m_Channels; // 0x78
		[SerializeField] // 0x004FD79C-0x004FD7AC
		internal List<List<byte>> m_SharedOrderChannels; // 0x80
	
		// Properties
		public ushort PacketSize { get; } // 0x00F5C144-0x00F5C14C 
		public ushort FragmentSize { get; } // 0x00F5C14C-0x00F5C154 
		public uint ResendTimeout { get; } // 0x00F5C154-0x00F5C15C 
		public uint DisconnectTimeout { get; } // 0x00F5C15C-0x00F5C164 
		public uint ConnectTimeout { get; } // 0x00F5C164-0x00F5C16C 
		public uint MinUpdateTimeout { get; set; } // 0x00F5C16C-0x00F5C174 0x00F5C174-0x00F5C208
		public uint PingTimeout { get; } // 0x00F5C208-0x00F5C210 
		public uint ReducedPingTimeout { get; } // 0x00F5C210-0x00F5C218 
		public uint AllCostTimeout { get; } // 0x00F5C218-0x00F5C220 
		public byte NetworkDropThreshold { get; } // 0x00F5C220-0x00F5C228 
		public byte OverflowDropThreshold { get; } // 0x00F5C228-0x00F5C230 
		public byte MaxConnectionAttempt { get; } // 0x00F5C230-0x00F5C238 
		public uint AckDelay { get; } // 0x00F5C238-0x00F5C240 
		public uint SendDelay { get; } // 0x00F5C240-0x00F5C248 
		public ushort MaxCombinedReliableMessageSize { get; } // 0x00F5BFE4-0x00F5BFEC 
		public ushort MaxCombinedReliableMessageCount { get; } // 0x00F5C248-0x00F5C250 
		public ushort MaxSentMessageQueueSize { get; } // 0x00F5C250-0x00F5C258 
		public ConnectionAcksType AcksType { get; } // 0x00F5C258-0x00F5C260 
		public bool UsePlatformSpecificProtocols { get; set; } // 0x00F5C260-0x00F5C268 0x00F5C268-0x00F5C310
		public uint InitialBandwidth { get; } // 0x00F5C310-0x00F5C318 
		public float BandwidthPeakFactor { get; } // 0x00F5C318-0x00F5C320 
		public ushort WebSocketReceiveBufferMaxSize { get; } // 0x00F5C320-0x00F5C328 
		public uint UdpSocketReceiveBufferMaxSize { get; } // 0x00F5C328-0x00F5C330 
		public string SSLCertFilePath { get; } // 0x00F5C330-0x00F5C338 
		public string SSLPrivateKeyFilePath { get; } // 0x00F5C338-0x00F5C340 
		public string SSLCAFilePath { get; } // 0x00F5C340-0x00F5C348 
		public int ChannelCount { get; } // 0x00F5C348-0x00F5C39C 
		public int SharedOrderChannelCount { get; } // 0x00F5C39C-0x00F5C3F0 
		public List<ChannelQOS> Channels { get; } // 0x00F5C7AC-0x00F5C7B4 
	
		// Constructors
		public ConnectionConfig(); // 0x00F5BB34-0x00F5BC48
		public ConnectionConfig(ConnectionConfig config); // 0x00F5BC48-0x00F5BFE4
	
		// Methods
		public static void Validate(ConnectionConfig config); // 0x00F5BFEC-0x00F5C144
		public byte AddChannel(QosType value); // 0x00F5C3F0-0x00F5C5F8
		public QosType GetChannel(byte idx); // 0x00F5C5F8-0x00F5C6CC
		public IList<byte> GetSharedOrderChannels(byte idx); // 0x00F5C6CC-0x00F5C7AC
	}

	[Serializable]
	[Obsolete] // 0x004FCC24-0x004FCC5C
	public class HostTopology // TypeDefIndex: 2792
	{
		// Fields
		[SerializeField] // 0x004FD7AC-0x004FD7BC
		private ConnectionConfig m_DefConfig; // 0x10
		[SerializeField] // 0x004FD7BC-0x004FD7CC
		private int m_MaxDefConnections; // 0x18
		[SerializeField] // 0x004FD7CC-0x004FD7DC
		private List<ConnectionConfig> m_SpecialConnections; // 0x20
		[SerializeField] // 0x004FD7DC-0x004FD7EC
		private ushort m_ReceivedMessagePoolSize; // 0x28
		[SerializeField] // 0x004FD7EC-0x004FD7FC
		private ushort m_SentMessagePoolSize; // 0x2A
		[SerializeField] // 0x004FD7FC-0x004FD80C
		private float m_MessagePoolSizeGrowthFactor; // 0x2C
	
		// Properties
		public ConnectionConfig DefaultConfig { get; } // 0x00F5EA84-0x00F5EA8C 
		public int MaxDefaultConnections { get; } // 0x00F5EA8C-0x00F5EA94 
		public int SpecialConnectionConfigsCount { get; } // 0x00F5EA94-0x00F5EAE8 
		public List<ConnectionConfig> SpecialConnectionConfigs { get; } // 0x00F5EAE8-0x00F5EAF0 
		public ushort ReceivedMessagePoolSize { get; } // 0x00F5EBBC-0x00F5EBC4 
		public ushort SentMessagePoolSize { get; } // 0x00F5EBC4-0x00F5EBCC 
		public float MessagePoolSizeGrowthFactor { get; } // 0x00F5EBCC-0x00F5EBD4 
	
		// Constructors
		public HostTopology(ConnectionConfig defaultConfig, int maxDefaultConnections); // 0x00F5E888-0x00F5EA00
		private HostTopology(); // 0x00F5EA00-0x00F5EA84
	
		// Methods
		public ConnectionConfig GetSpecialConnectionConfig(int i); // 0x00F5EAF0-0x00F5EBBC
	}

	[Serializable]
	[Obsolete] // 0x004FCC5C-0x004FCC94
	public class GlobalConfig // TypeDefIndex: 2793
	{
		// Fields
		private const uint g_MaxTimerTimeout = 12000; // Metadata: 0x001F4D2A
		private const uint g_MaxNetSimulatorTimeout = 12000; // Metadata: 0x001F4D2E
		private const ushort g_MaxHosts = 128; // Metadata: 0x001F4D32
		[SerializeField] // 0x004FD80C-0x004FD81C
		private uint m_ThreadAwakeTimeout; // 0x10
		[SerializeField] // 0x004FD81C-0x004FD82C
		private ReactorModel m_ReactorModel; // 0x14
		[SerializeField] // 0x004FD82C-0x004FD83C
		private ushort m_ReactorMaximumReceivedMessages; // 0x18
		[SerializeField] // 0x004FD83C-0x004FD84C
		private ushort m_ReactorMaximumSentMessages; // 0x1A
		[SerializeField] // 0x004FD84C-0x004FD85C
		private ushort m_MaxPacketSize; // 0x1C
		[SerializeField] // 0x004FD85C-0x004FD86C
		private ushort m_MaxHosts; // 0x1E
		[SerializeField] // 0x004FD86C-0x004FD87C
		private byte m_ThreadPoolSize; // 0x20
		[SerializeField] // 0x004FD87C-0x004FD88C
		private uint m_MinTimerTimeout; // 0x24
		[SerializeField] // 0x004FD88C-0x004FD89C
		private uint m_MaxTimerTimeout; // 0x28
		[SerializeField] // 0x004FD89C-0x004FD8AC
		private uint m_MinNetSimulatorTimeout; // 0x2C
		[SerializeField] // 0x004FD8AC-0x004FD8BC
		private uint m_MaxNetSimulatorTimeout; // 0x30
		[SerializeField] // 0x004FD8BC-0x004FD8CC
		private Action<int, int> m_ConnectionReadyForSend; // 0x38
		[SerializeField] // 0x004FD8CC-0x004FD8DC
		private Action<int> m_NetworkEventAvailable; // 0x40
	
		// Properties
		public uint ThreadAwakeTimeout { get; set; } // 0x00F5DED4-0x00F5DEDC 0x00F5DEDC-0x00F5DF70
		public ReactorModel ReactorModel { get; } // 0x00F5DF70-0x00F5DF78 
		public ushort ReactorMaximumReceivedMessages { get; } // 0x00F5DF78-0x00F5DF80 
		public ushort ReactorMaximumSentMessages { get; } // 0x00F5DF80-0x00F5DF88 
		public ushort MaxPacketSize { get; } // 0x00F5DF88-0x00F5DF90 
		public ushort MaxHosts { get; } // 0x00F5DF90-0x00F5DF98 
		public byte ThreadPoolSize { get; } // 0x00F5DF98-0x00F5DFA0 
		public uint MinTimerTimeout { get; } // 0x00F5DFA0-0x00F5DFA8 
		public uint MaxTimerTimeout { get; } // 0x00F5DFA8-0x00F5DFB0 
		public uint MinNetSimulatorTimeout { get; } // 0x00F5DFB0-0x00F5DFB8 
		public uint MaxNetSimulatorTimeout { get; } // 0x00F5DFB8-0x00F5DFC0 
		public Action<int> NetworkEventAvailable { get; } // 0x00F5DFC0-0x00F5DFC8 
		public Action<int, int> ConnectionReadyForSend { get; } // 0x00F5DFC8-0x00F5DFD0 
	
		// Constructors
		public GlobalConfig(); // 0x00F5DE88-0x00F5DED4
	}

	[Obsolete] // 0x004FCC94-0x004FCCCC
	public class ConnectionSimulatorConfig : IDisposable // TypeDefIndex: 2794
	{
		// Fields
		internal int m_OutMinDelay; // 0x10
		internal int m_OutAvgDelay; // 0x14
		internal int m_InMinDelay; // 0x18
		internal int m_InAvgDelay; // 0x1C
		internal float m_PacketLossPercentage; // 0x20
	
		// Constructors
		public ConnectionSimulatorConfig(int outMinDelay, int outAvgDelay, int inMinDelay, int inAvgDelay, float packetLossPercentage); // 0x00F5DB14-0x00F5DB70
	
		// Methods
		[ThreadAndSerializationSafe] // 0x004FE920-0x004FE930
		public void Dispose(); // 0x00F5DB70-0x00F5DB74
		~ConnectionSimulatorConfig(); // 0x00F5DB74-0x00F5DB7C
	}
}

namespace UnityEngine.Networking.Match
{
	internal abstract class Request // TypeDefIndex: 2795
	{
		// Fields
		public static readonly int currentVersion; // 0x00
		[CompilerGenerated] // 0x004FD8DC-0x004FD918
		[DebuggerBrowsable] // 0x004FD8DC-0x004FD918
		private SourceID _sourceId_k__BackingField; // 0x10
		[CompilerGenerated] // 0x004FD918-0x004FD954
		[DebuggerBrowsable] // 0x004FD918-0x004FD954
		private string _projectId_k__BackingField; // 0x18
		[CompilerGenerated] // 0x004FD954-0x004FD990
		[DebuggerBrowsable] // 0x004FD954-0x004FD990
		private string _accessTokenString_k__BackingField; // 0x20
		[CompilerGenerated] // 0x004FD990-0x004FD9CC
		[DebuggerBrowsable] // 0x004FD990-0x004FD9CC
		private int _domain_k__BackingField; // 0x28
	
		// Properties
		public SourceID sourceId { [CompilerGenerated] /* 0x004FE930-0x004FE940 */ get; } // 0x00F64008-0x00F64010 
		public string projectId { [CompilerGenerated] /* 0x004FE940-0x004FE950 */ get; } // 0x00F64010-0x00F64018 
		public string accessTokenString { [CompilerGenerated] /* 0x004FE950-0x004FE960 */ get; } // 0x00F64018-0x00F64020 
		public int domain { [CompilerGenerated] /* 0x004FE960-0x004FE970 */ get; [CompilerGenerated] /* 0x004FE970-0x004FE980 */ set; } // 0x00F61E38-0x00F61E40 0x00F64020-0x00F64028
	
		// Constructors
		protected Request(); // 0x00F5F188-0x00F5F190
		static Request(); // 0x00F64028-0x00F6407C
	
		// Methods
		public override string ToString(); // 0x00F5F4F0-0x00F5F710
	}

	[Serializable]
	internal abstract class Response // TypeDefIndex: 2796
	{
		// Fields
		public bool success; // 0x10
		public string extendedInfo; // 0x18
	
		// Constructors
		protected Response(); // 0x00F5F118-0x00F5F120
	
		// Methods
		public void SetFailure(string info); // 0x00F6407C-0x00F640AC
		public override string ToString(); // 0x00F5F9BC-0x00F5FB00
	}

	internal class BasicResponse : Response // TypeDefIndex: 2797
	{
		// Constructors
		public BasicResponse(); // 0x00F5F110-0x00F5F118
	}

	internal class CreateMatchRequest : Request // TypeDefIndex: 2798
	{
		// Fields
		[CompilerGenerated] // 0x004FD9CC-0x004FDA08
		[DebuggerBrowsable] // 0x004FD9CC-0x004FDA08
		private string _name_k__BackingField; // 0x30
		[CompilerGenerated] // 0x004FDA08-0x004FDA44
		[DebuggerBrowsable] // 0x004FDA08-0x004FDA44
		private uint _size_k__BackingField; // 0x38
		[CompilerGenerated] // 0x004FDA44-0x004FDA80
		[DebuggerBrowsable] // 0x004FDA44-0x004FDA80
		private string _publicAddress_k__BackingField; // 0x40
		[CompilerGenerated] // 0x004FDA80-0x004FDABC
		[DebuggerBrowsable] // 0x004FDA80-0x004FDABC
		private string _privateAddress_k__BackingField; // 0x48
		[CompilerGenerated] // 0x004FDABC-0x004FDAF8
		[DebuggerBrowsable] // 0x004FDABC-0x004FDAF8
		private int _eloScore_k__BackingField; // 0x50
		[CompilerGenerated] // 0x004FDAF8-0x004FDB34
		[DebuggerBrowsable] // 0x004FDAF8-0x004FDB34
		private bool _advertise_k__BackingField; // 0x54
		[CompilerGenerated] // 0x004FDB34-0x004FDB70
		[DebuggerBrowsable] // 0x004FDB34-0x004FDB70
		private string _password_k__BackingField; // 0x58
		[CompilerGenerated] // 0x004FDB70-0x004FDBAC
		[DebuggerBrowsable] // 0x004FDB70-0x004FDBAC
		private Dictionary<string, long> _matchAttributes_k__BackingField; // 0x60
	
		// Properties
		public string name { [CompilerGenerated] /* 0x004FE980-0x004FE990 */ get; [CompilerGenerated] /* 0x004FE990-0x004FE9A0 */ set; } // 0x00F5F190-0x00F5F198 0x00F5F198-0x00F5F1A0
		public uint size { [CompilerGenerated] /* 0x004FE9A0-0x004FE9B0 */ get; [CompilerGenerated] /* 0x004FE9B0-0x004FE9C0 */ set; } // 0x00F5F1A0-0x00F5F1A8 0x00F5F1A8-0x00F5F1B0
		public string publicAddress { [CompilerGenerated] /* 0x004FE9C0-0x004FE9D0 */ get; [CompilerGenerated] /* 0x004FE9D0-0x004FE9E0 */ set; } // 0x00F5F1B0-0x00F5F1B8 0x00F5F1B8-0x00F5F1C0
		public string privateAddress { [CompilerGenerated] /* 0x004FE9E0-0x004FE9F0 */ get; [CompilerGenerated] /* 0x004FE9F0-0x004FEA00 */ set; } // 0x00F5F1C0-0x00F5F1C8 0x00F5F1C8-0x00F5F1D0
		public int eloScore { [CompilerGenerated] /* 0x004FEA00-0x004FEA10 */ get; [CompilerGenerated] /* 0x004FEA10-0x004FEA20 */ set; } // 0x00F5F1D0-0x00F5F1D8 0x00F5F1D8-0x00F5F1E0
		public bool advertise { [CompilerGenerated] /* 0x004FEA20-0x004FEA30 */ get; [CompilerGenerated] /* 0x004FEA30-0x004FEA40 */ set; } // 0x00F5F1E0-0x00F5F1E8 0x00F5F1E8-0x00F5F1F4
		public string password { [CompilerGenerated] /* 0x004FEA40-0x004FEA50 */ get; [CompilerGenerated] /* 0x004FEA50-0x004FEA60 */ set; } // 0x00F5F1F4-0x00F5F1FC 0x00F5F1FC-0x00F5F204
		public Dictionary<string, long> matchAttributes { [CompilerGenerated] /* 0x004FEA60-0x004FEA70 */ get; } // 0x00F5F204-0x00F5F20C 
	
		// Constructors
		public CreateMatchRequest(); // 0x00F5F120-0x00F5F188
	
		// Methods
		public override string ToString(); // 0x00F5F20C-0x00F5F4F0
	}

	internal class CreateMatchResponse : BasicResponse // TypeDefIndex: 2799
	{
		// Fields
		public string address; // 0x20
		public int port; // 0x28
		public int domain; // 0x2C
		public ulong networkId; // 0x30
		public string accessTokenString; // 0x38
		public NodeID nodeId; // 0x40
		public bool usingRelay; // 0x42
	
		// Constructors
		public CreateMatchResponse(); // 0x00F5F710-0x00F5F71C
	
		// Methods
		public override string ToString(); // 0x00F5F71C-0x00F5F9BC
	}

	internal class JoinMatchRequest : Request // TypeDefIndex: 2800
	{
		// Fields
		[CompilerGenerated] // 0x004FDBAC-0x004FDBE8
		[DebuggerBrowsable] // 0x004FDBAC-0x004FDBE8
		private NetworkID _networkId_k__BackingField; // 0x30
		[CompilerGenerated] // 0x004FDBE8-0x004FDC24
		[DebuggerBrowsable] // 0x004FDBE8-0x004FDC24
		private string _publicAddress_k__BackingField; // 0x38
		[CompilerGenerated] // 0x004FDC24-0x004FDC60
		[DebuggerBrowsable] // 0x004FDC24-0x004FDC60
		private string _privateAddress_k__BackingField; // 0x40
		[CompilerGenerated] // 0x004FDC60-0x004FDC9C
		[DebuggerBrowsable] // 0x004FDC60-0x004FDC9C
		private int _eloScore_k__BackingField; // 0x48
		[CompilerGenerated] // 0x004FDC9C-0x004FDCD8
		[DebuggerBrowsable] // 0x004FDC9C-0x004FDCD8
		private string _password_k__BackingField; // 0x50
	
		// Properties
		public NetworkID networkId { [CompilerGenerated] /* 0x004FEA70-0x004FEA80 */ get; [CompilerGenerated] /* 0x004FEA80-0x004FEA90 */ set; } // 0x00F60090-0x00F60098 0x00F60098-0x00F600A0
		public string publicAddress { [CompilerGenerated] /* 0x004FEA90-0x004FEAA0 */ get; [CompilerGenerated] /* 0x004FEAA0-0x004FEAB0 */ set; } // 0x00F600A0-0x00F600A8 0x00F600A8-0x00F600B0
		public string privateAddress { [CompilerGenerated] /* 0x004FEAB0-0x004FEAC0 */ get; [CompilerGenerated] /* 0x004FEAC0-0x004FEAD0 */ set; } // 0x00F600B0-0x00F600B8 0x00F600B8-0x00F600C0
		public int eloScore { [CompilerGenerated] /* 0x004FEAD0-0x004FEAE0 */ get; [CompilerGenerated] /* 0x004FEAE0-0x004FEAF0 */ set; } // 0x00F600C0-0x00F600C8 0x00F600C8-0x00F600D0
		public string password { [CompilerGenerated] /* 0x004FEAF0-0x004FEB00 */ get; [CompilerGenerated] /* 0x004FEB00-0x004FEB10 */ set; } // 0x00F600D0-0x00F600D8 0x00F600D8-0x00F600E0
	
		// Constructors
		public JoinMatchRequest(); // 0x00F60028-0x00F60090
	
		// Methods
		public override string ToString(); // 0x00F600E0-0x00F60324
	}

	[Serializable]
	internal class JoinMatchResponse : BasicResponse // TypeDefIndex: 2801
	{
		// Fields
		public string address; // 0x20
		public int port; // 0x28
		public int domain; // 0x2C
		public ulong networkId; // 0x30
		public string accessTokenString; // 0x38
		public NodeID nodeId; // 0x40
		public bool usingRelay; // 0x42
	
		// Constructors
		public JoinMatchResponse(); // 0x00F60324-0x00F60330
	
		// Methods
		public override string ToString(); // 0x00F60330-0x00F605D0
	}

	internal class DestroyMatchRequest : Request // TypeDefIndex: 2802
	{
		// Fields
		[CompilerGenerated] // 0x004FDCD8-0x004FDD14
		[DebuggerBrowsable] // 0x004FDCD8-0x004FDD14
		private NetworkID _networkId_k__BackingField; // 0x30
	
		// Properties
		public NetworkID networkId { [CompilerGenerated] /* 0x004FEB10-0x004FEB20 */ get; [CompilerGenerated] /* 0x004FEB20-0x004FEB30 */ set; } // 0x00F5FB68-0x00F5FB70 0x00F5FB70-0x00F5FB78
	
		// Constructors
		public DestroyMatchRequest(); // 0x00F5FB00-0x00F5FB68
	
		// Methods
		public override string ToString(); // 0x00F5FB78-0x00F5FCC0
	}

	internal class DropConnectionRequest : Request // TypeDefIndex: 2803
	{
		// Fields
		[CompilerGenerated] // 0x004FDD14-0x004FDD50
		[DebuggerBrowsable] // 0x004FDD14-0x004FDD50
		private NetworkID _networkId_k__BackingField; // 0x30
		[CompilerGenerated] // 0x004FDD50-0x004FDD8C
		[DebuggerBrowsable] // 0x004FDD50-0x004FDD8C
		private NodeID _nodeId_k__BackingField; // 0x38
	
		// Properties
		public NetworkID networkId { [CompilerGenerated] /* 0x004FEB30-0x004FEB40 */ get; [CompilerGenerated] /* 0x004FEB40-0x004FEB50 */ set; } // 0x00F5FD28-0x00F5FD30 0x00F5FD30-0x00F5FD38
		public NodeID nodeId { [CompilerGenerated] /* 0x004FEB50-0x004FEB60 */ get; [CompilerGenerated] /* 0x004FEB60-0x004FEB70 */ set; } // 0x00F5FD38-0x00F5FD40 0x00F5FD40-0x00F5FD48
	
		// Constructors
		public DropConnectionRequest(); // 0x00F5FCC0-0x00F5FD28
	
		// Methods
		public override string ToString(); // 0x00F5FD48-0x00F5FF14
	}

	[Serializable]
	internal class DropConnectionResponse : Response // TypeDefIndex: 2804
	{
		// Fields
		public ulong networkId; // 0x20
	
		// Constructors
		public DropConnectionResponse(); // 0x00F5FF14-0x00F5FF1C
	
		// Methods
		public override string ToString(); // 0x00F5FF1C-0x00F60028
	}

	internal class ListMatchRequest : Request // TypeDefIndex: 2805
	{
		// Fields
		[CompilerGenerated] // 0x004FDD8C-0x004FDDC8
		[DebuggerBrowsable] // 0x004FDD8C-0x004FDDC8
		private int _pageSize_k__BackingField; // 0x2C
		[CompilerGenerated] // 0x004FDDC8-0x004FDE04
		[DebuggerBrowsable] // 0x004FDDC8-0x004FDE04
		private int _pageNum_k__BackingField; // 0x30
		[CompilerGenerated] // 0x004FDE04-0x004FDE40
		[DebuggerBrowsable] // 0x004FDE04-0x004FDE40
		private string _nameFilter_k__BackingField; // 0x38
		[CompilerGenerated] // 0x004FDE40-0x004FDE7C
		[DebuggerBrowsable] // 0x004FDE40-0x004FDE7C
		private bool _filterOutPrivateMatches_k__BackingField; // 0x40
		[CompilerGenerated] // 0x004FDE7C-0x004FDEB8
		[DebuggerBrowsable] // 0x004FDE7C-0x004FDEB8
		private int _eloScore_k__BackingField; // 0x44
		[CompilerGenerated] // 0x004FDEB8-0x004FDEF4
		[DebuggerBrowsable] // 0x004FDEB8-0x004FDEF4
		private Dictionary<string, long> _matchAttributeFilterLessThan_k__BackingField; // 0x48
		[CompilerGenerated] // 0x004FDEF4-0x004FDF30
		[DebuggerBrowsable] // 0x004FDEF4-0x004FDF30
		private Dictionary<string, long> _matchAttributeFilterEqualTo_k__BackingField; // 0x50
		[CompilerGenerated] // 0x004FDF30-0x004FDF6C
		[DebuggerBrowsable] // 0x004FDF30-0x004FDF6C
		private Dictionary<string, long> _matchAttributeFilterGreaterThan_k__BackingField; // 0x58
	
		// Properties
		public int pageSize { [CompilerGenerated] /* 0x004FEB70-0x004FEB80 */ get; [CompilerGenerated] /* 0x004FEB80-0x004FEB90 */ set; } // 0x00F60638-0x00F60640 0x00F60640-0x00F60648
		public int pageNum { [CompilerGenerated] /* 0x004FEB90-0x004FEBA0 */ get; [CompilerGenerated] /* 0x004FEBA0-0x004FEBB0 */ set; } // 0x00F60648-0x00F60650 0x00F60650-0x00F60658
		public string nameFilter { [CompilerGenerated] /* 0x004FEBB0-0x004FEBC0 */ get; [CompilerGenerated] /* 0x004FEBC0-0x004FEBD0 */ set; } // 0x00F60658-0x00F60660 0x00F60660-0x00F60668
		public bool filterOutPrivateMatches { [CompilerGenerated] /* 0x004FEBD0-0x004FEBE0 */ get; [CompilerGenerated] /* 0x004FEBE0-0x004FEBF0 */ set; } // 0x00F60668-0x00F60670 0x00F60670-0x00F6067C
		public int eloScore { [CompilerGenerated] /* 0x004FEBF0-0x004FEC00 */ get; [CompilerGenerated] /* 0x004FEC00-0x004FEC10 */ set; } // 0x00F6067C-0x00F60684 0x00F60684-0x00F6068C
		public Dictionary<string, long> matchAttributeFilterLessThan { [CompilerGenerated] /* 0x004FEC10-0x004FEC20 */ get; } // 0x00F6068C-0x00F60694 
		public Dictionary<string, long> matchAttributeFilterEqualTo { [CompilerGenerated] /* 0x004FEC20-0x004FEC30 */ get; } // 0x00F60694-0x00F6069C 
		public Dictionary<string, long> matchAttributeFilterGreaterThan { [CompilerGenerated] /* 0x004FEC30-0x004FEC40 */ get; } // 0x00F6069C-0x00F606A4 
	
		// Constructors
		public ListMatchRequest(); // 0x00F605D0-0x00F60638
	
		// Methods
		public override string ToString(); // 0x00F606A4-0x00F609C8
	}

	[Serializable]
	internal class MatchDirectConnectInfo // TypeDefIndex: 2806
	{
		// Fields
		public NodeID nodeId; // 0x10
		public string publicAddress; // 0x18
		public string privateAddress; // 0x20
		public HostPriority hostPriority; // 0x28
	
		// Constructors
		public MatchDirectConnectInfo(); // 0x00F60EB0-0x00F60EB8
	
		// Methods
		public override string ToString(); // 0x00F60EB8-0x00F61070
	}

	[Serializable]
	internal class MatchDesc // TypeDefIndex: 2807
	{
		// Fields
		public ulong networkId; // 0x10
		public string name; // 0x18
		public int averageEloScore; // 0x20
		public int maxSize; // 0x24
		public int currentSize; // 0x28
		public bool isPrivate; // 0x2C
		public Dictionary<string, long> matchAttributes; // 0x30
		public NodeID hostNodeId; // 0x38
		public List<MatchDirectConnectInfo> directConnectInfos; // 0x40
	
		// Constructors
		public MatchDesc(); // 0x00F60B5C-0x00F60B64
	
		// Methods
		public override string ToString(); // 0x00F60B64-0x00F60EB0
	}

	[Serializable]
	internal class ListMatchResponse : BasicResponse // TypeDefIndex: 2808
	{
		// Fields
		public List<MatchDesc> matches; // 0x20
	
		// Constructors
		public ListMatchResponse(); // 0x00F609C8-0x00F60A3C
	
		// Methods
		public override string ToString(); // 0x00F60A3C-0x00F60B5C
	}

	internal class SetMatchAttributesRequest : Request // TypeDefIndex: 2809
	{
		// Fields
		[CompilerGenerated] // 0x004FDF6C-0x004FDFA8
		[DebuggerBrowsable] // 0x004FDF6C-0x004FDFA8
		private NetworkID _networkId_k__BackingField; // 0x30
		[CompilerGenerated] // 0x004FDFA8-0x004FDFE4
		[DebuggerBrowsable] // 0x004FDFA8-0x004FDFE4
		private bool _isListed_k__BackingField; // 0x38
	
		// Properties
		public NetworkID networkId { [CompilerGenerated] /* 0x004FEC40-0x004FEC50 */ get; [CompilerGenerated] /* 0x004FEC50-0x004FEC60 */ set; } // 0x00F63F10-0x00F63F18 0x00F640AC-0x00F640B4
		public bool isListed { [CompilerGenerated] /* 0x004FEC60-0x004FEC70 */ get; [CompilerGenerated] /* 0x004FEC70-0x004FEC80 */ set; } // 0x00F63F18-0x00F63F20 0x00F640B4-0x00F640C0
	
		// Constructors
		public SetMatchAttributesRequest(); // 0x00F63ABC-0x00F63B24
	
		// Methods
		public override string ToString(); // 0x00F640C0-0x00F64258
	}
}

namespace UnityEngine.Networking.Types
{
	[System.ComponentModel.DefaultValue] // 0x004FCCCC-0x004FCD48
	public enum AppID : ulong // TypeDefIndex: 2810
	{
		Invalid = 18446744073709551615
	}

	[System.ComponentModel.DefaultValue] // 0x004FCD48-0x004FCDC4
	public enum SourceID : ulong // TypeDefIndex: 2811
	{
		Invalid = 18446744073709551615
	}

	[System.ComponentModel.DefaultValue] // 0x004FCDC4-0x004FCE40
	public enum NetworkID : ulong // TypeDefIndex: 2812
	{
		Invalid = 18446744073709551615
	}

	[System.ComponentModel.DefaultValue] // 0x004FCE40-0x004FCEB8
	public enum NodeID : ushort // TypeDefIndex: 2813
	{
		Invalid = 0
	}

	[System.ComponentModel.DefaultValue] // 0x004FCEB8-0x004FCF34
	public enum HostPriority // TypeDefIndex: 2814
	{
		Invalid = 2147483647
	}

	public class NetworkAccessToken // TypeDefIndex: 2815
	{
		// Fields
		private const int NETWORK_ACCESS_TOKEN_SIZE = 64; // Metadata: 0x001F4D52
		public byte[] array; // 0x10
	
		// Constructors
		public NetworkAccessToken(); // 0x00F66D34-0x00F66D98
		public NetworkAccessToken(string strArray); // 0x00F61128-0x00F61234
	
		// Methods
		public string GetByteString(); // 0x00F62B6C-0x00F62BD8
	}
}

namespace UnityEngine.Networking
{
	public class Utility // TypeDefIndex: 2816
	{
		// Fields
		private static Dictionary<NetworkID, NetworkAccessToken> s_dictTokens; // 0x00
	
		// Constructors
		static Utility(); // 0x00F66D98-0x00F66E0C
	
		// Methods
		public static SourceID GetSourceID(); // 0x00F61E08-0x00F61E38
		public static void SetAccessTokenForNetwork(NetworkID netId, NetworkAccessToken accessToken); // 0x00F61F44-0x00F62054
		public static NetworkAccessToken GetAccessTokenForNetwork(NetworkID netId); // 0x00F62AA8-0x00F62B6C
	}

	[NativeConditional] // 0x004FCF34-0x004FCFE0
	[NativeHeader] // 0x004FCF34-0x004FCFE0
	[NativeHeader] // 0x004FCF34-0x004FCFE0
	[NativeHeader] // 0x004FCF34-0x004FCFE0
	internal class ConnectionConfigInternal : IDisposable // TypeDefIndex: 2817
	{
		// Fields
		public IntPtr m_Ptr; // 0x10
	
		// Properties
		[NativeProperty] // 0x004FEE30-0x004FEE6C
		private ushort FragmentSize { set; } // 0x00F5D0D4-0x00F5D124
		[NativeProperty] // 0x004FEE6C-0x004FEEA8
		private uint ResendTimeout { set; } // 0x00F5D124-0x00F5D174
		[NativeProperty] // 0x004FEEA8-0x004FEEE4
		private uint DisconnectTimeout { set; } // 0x00F5D174-0x00F5D1C4
		[NativeProperty] // 0x004FEEE4-0x004FEF20
		private uint ConnectTimeout { set; } // 0x00F5D1C4-0x00F5D214
		[NativeProperty] // 0x004FEF20-0x004FEF5C
		private uint MinUpdateTimeout { set; } // 0x00F5D214-0x00F5D264
		[NativeProperty] // 0x004FEF5C-0x004FEF98
		private uint PingTimeout { set; } // 0x00F5D264-0x00F5D2B4
		[NativeProperty] // 0x004FEF98-0x004FEFD4
		private uint ReducedPingTimeout { set; } // 0x00F5D2B4-0x00F5D304
		[NativeProperty] // 0x004FEFD4-0x004FF010
		private uint AllCostTimeout { set; } // 0x00F5D304-0x00F5D354
		[NativeProperty] // 0x004FF010-0x004FF04C
		private byte NetworkDropThreshold { set; } // 0x00F5D354-0x00F5D3A4
		[NativeProperty] // 0x004FF04C-0x004FF088
		private byte OverflowDropThreshold { set; } // 0x00F5D3A4-0x00F5D3F4
		[NativeProperty] // 0x004FF088-0x004FF0C4
		private byte MaxConnectionAttempt { set; } // 0x00F5D3F4-0x00F5D444
		[NativeProperty] // 0x004FF0C4-0x004FF100
		private uint AckDelay { set; } // 0x00F5D444-0x00F5D494
		[NativeProperty] // 0x004FF100-0x004FF13C
		private uint SendDelay { set; } // 0x00F5D494-0x00F5D4E4
		[NativeProperty] // 0x004FF13C-0x004FF178
		private ushort MaxCombinedReliableMessageSize { set; } // 0x00F5D4E4-0x00F5D534
		[NativeProperty] // 0x004FF178-0x004FF1B4
		private ushort MaxCombinedReliableMessageCount { set; } // 0x00F5D534-0x00F5D584
		[NativeProperty] // 0x004FF1B4-0x004FF1F0
		private ushort MaxSentMessageQueueSize { set; } // 0x00F5D584-0x00F5D5D4
		[NativeProperty] // 0x004FF1F0-0x004FF22C
		private byte AcksType { set; } // 0x00F5D5D4-0x00F5D624
		[NativeProperty] // 0x004FF22C-0x004FF268
		private bool UsePlatformSpecificProtocols { set; } // 0x00F5D624-0x00F5D674
		[NativeProperty] // 0x004FF268-0x004FF2A4
		private uint InitialBandwidth { set; } // 0x00F5D674-0x00F5D6C4
		[NativeProperty] // 0x004FF2A4-0x004FF2E0
		private float BandwidthPeakFactor { set; } // 0x00F5D6C4-0x00F5D714
		[NativeProperty] // 0x004FF2E0-0x004FF31C
		private ushort WebSocketReceiveBufferMaxSize { set; } // 0x00F5D714-0x00F5D764
		[NativeProperty] // 0x004FF31C-0x004FF358
		private uint UdpSocketReceiveBufferMaxSize { set; } // 0x00F5D764-0x00F5D7B4
	
		// Constructors
		public ConnectionConfigInternal(ConnectionConfig config); // 0x00F5C7B4-0x00F5D050
	
		// Methods
		protected virtual void Dispose(bool disposing); // 0x00F5D944-0x00F5D9D0
		~ConnectionConfigInternal(); // 0x00F5DA10-0x00F5DA88
		public void Dispose(); // 0x00F5DA88-0x00F5DB14
		private static IntPtr InternalCreate(); // 0x00F5D050-0x00F5D084
		[NativeMethod] // 0x004FEC80-0x004FECB4
		private static void InternalDestroy(IntPtr ptr); // 0x00F5D9D0-0x00F5DA10
		public byte AddChannel(int value); // 0x00F5D8A4-0x00F5D8F4
		public bool SetPacketSize(ushort value); // 0x00F5D084-0x00F5D0D4
		[NativeMethod] // 0x004FECB4-0x004FECEC
		public int SetSSLCertFilePath(string value); // 0x00F5D7B4-0x00F5D804
		[NativeMethod] // 0x004FECEC-0x004FED24
		public int SetSSLPrivateKeyFilePath(string value); // 0x00F5D804-0x00F5D854
		[NativeMethod] // 0x004FED24-0x004FED5C
		public int SetSSLCAFilePath(string value); // 0x00F5D854-0x00F5D8A4
		[NativeMethod] // 0x004FED5C-0x004FED94
		private bool MakeChannelsSharedOrder(byte[] values); // 0x00F5D8F4-0x00F5D944
	}

	[NativeConditional] // 0x004FCFE0-0x004FD044
	[NativeHeader] // 0x004FCFE0-0x004FD044
	internal class HostTopologyInternal : IDisposable // TypeDefIndex: 2818
	{
		// Fields
		public IntPtr m_Ptr; // 0x10
	
		// Properties
		[NativeProperty] // 0x004FF358-0x004FF394
		private ushort ReceivedMessagePoolSize { set; } // 0x00F5EE50-0x00F5EEA0
		[NativeProperty] // 0x004FF394-0x004FF3D0
		private ushort SentMessagePoolSize { set; } // 0x00F5EEA0-0x00F5EEF0
		[NativeProperty] // 0x004FF3D0-0x004FF40C
		private float MessagePoolSizeGrowthFactor { set; } // 0x00F5EEF0-0x00F5EF40
	
		// Constructors
		public HostTopologyInternal(HostTopology topology); // 0x00F5EBD4-0x00F5EDB0
	
		// Methods
		protected virtual void Dispose(bool disposing); // 0x00F5EF40-0x00F5EFCC
		~HostTopologyInternal(); // 0x00F5F00C-0x00F5F084
		public void Dispose(); // 0x00F5F084-0x00F5F110
		private static IntPtr InternalCreate(ConnectionConfigInternal config, int maxDefaultConnections); // 0x00F5EDB0-0x00F5EE00
		[NativeMethod] // 0x004FED94-0x004FEDC8
		private static void InternalDestroy(IntPtr ptr); // 0x00F5EFCC-0x00F5F00C
		public ushort AddSpecialConnectionConfig(ConnectionConfigInternal config); // 0x00F5EE00-0x00F5EE50
	}

	[NativeConditional] // 0x004FD044-0x004FD0A8
	[NativeHeader] // 0x004FD044-0x004FD0A8
	internal class ConnectionSimulatorConfigInternal : IDisposable // TypeDefIndex: 2819
	{
		// Fields
		public IntPtr m_Ptr; // 0x10
	
		// Constructors
		public ConnectionSimulatorConfigInternal(ConnectionSimulatorConfig config); // 0x00F5DB7C-0x00F5DC18
	
		// Methods
		protected virtual void Dispose(bool disposing); // 0x00F5DC90-0x00F5DD44
		~ConnectionSimulatorConfigInternal(); // 0x00F5DD84-0x00F5DDFC
		public void Dispose(); // 0x00F5DDFC-0x00F5DE88
		private static IntPtr InternalCreate(int outMinDelay, int outAvgDelay, int inMinDelay, int inAvgDelay, float packetLossPercentage); // 0x00F5DC18-0x00F5DC90
		[NativeMethod] // 0x004FEDC8-0x004FEDFC
		private static void InternalDestroy(IntPtr ptr); // 0x00F5DD44-0x00F5DD84
	}

	[NativeConditional] // 0x004FD0A8-0x004FD10C
	[NativeHeader] // 0x004FD0A8-0x004FD10C
	internal class GlobalConfigInternal : IDisposable // TypeDefIndex: 2820
	{
		// Fields
		public IntPtr m_Ptr; // 0x10
	
		// Properties
		[NativeProperty] // 0x004FF40C-0x004FF448
		private uint ThreadAwakeTimeout { set; } // 0x00F5E348-0x00F5E398
		[NativeProperty] // 0x004FF448-0x004FF484
		private byte ReactorModel { set; } // 0x00F5E398-0x00F5E3E8
		[NativeProperty] // 0x004FF484-0x004FF4C0
		private ushort ReactorMaximumReceivedMessages { set; } // 0x00F5E3E8-0x00F5E438
		[NativeProperty] // 0x004FF4C0-0x004FF4FC
		private ushort ReactorMaximumSentMessages { set; } // 0x00F5E438-0x00F5E488
		[NativeProperty] // 0x004FF4FC-0x004FF538
		private ushort MaxPacketSize { set; } // 0x00F5E488-0x00F5E4D8
		[NativeProperty] // 0x004FF538-0x004FF574
		private ushort MaxHosts { set; } // 0x00F5E4D8-0x00F5E528
		[NativeProperty] // 0x004FF574-0x004FF5B0
		private byte ThreadPoolSize { set; } // 0x00F5E528-0x00F5E578
		[NativeProperty] // 0x004FF5B0-0x004FF5EC
		private uint MinTimerTimeout { set; } // 0x00F5E578-0x00F5E5C8
		[NativeProperty] // 0x004FF5EC-0x004FF628
		private uint MaxTimerTimeout { set; } // 0x00F5E5C8-0x00F5E618
		[NativeProperty] // 0x004FF628-0x004FF664
		private uint MinNetSimulatorTimeout { set; } // 0x00F5E618-0x00F5E668
		[NativeProperty] // 0x004FF664-0x004FF6A0
		private uint MaxNetSimulatorTimeout { set; } // 0x00F5E668-0x00F5E6B8
	
		// Constructors
		public GlobalConfigInternal(GlobalConfig config); // 0x00F5DFD0-0x00F5E314
	
		// Methods
		protected virtual void Dispose(bool disposing); // 0x00F5E6B8-0x00F5E744
		~GlobalConfigInternal(); // 0x00F5E784-0x00F5E7FC
		public void Dispose(); // 0x00F5E7FC-0x00F5E888
		private static IntPtr InternalCreate(); // 0x00F5E314-0x00F5E348
		[NativeMethod] // 0x004FEDFC-0x004FEE30
		private static void InternalDestroy(IntPtr ptr); // 0x00F5E744-0x00F5E784
	}
}

[CompilerGenerated] // 0x004FD10C-0x004FD11C
internal static class _PrivateImplementationDetails_ // TypeDefIndex: 2821
{
	// Fields
	internal static readonly _ArrayType_4 _field_95D7E9C7483D5AF10DF20044FCD3E580073E1D4B; // 0x00 // Starts with: 5f 24 13 f6 00 00 00 00 - Metadata: 0x001F4D56

	// Nested types
	private struct _ArrayType_4 // TypeDefIndex: 2822
	{
	}
}

namespace UnityEngine.Analytics
{
	[NativeHeader] // 0x0050084C-0x005008BC
	[NativeHeader] // 0x0050084C-0x005008BC
	[RequiredByNativeCode] // 0x0050084C-0x005008BC
	internal class ContinuousEvent // TypeDefIndex: 2824
	{
	}

	[RequiredByNativeCode] // 0x005008BC-0x005008CC
	public enum AnalyticsSessionState // TypeDefIndex: 2825
	{
		kSessionStopped = 0,
		kSessionStarted = 1,
		kSessionPaused = 2,
		kSessionResumed = 3
	}

	[NativeHeader] // 0x005008CC-0x0050093C
	[NativeHeader] // 0x005008CC-0x0050093C
	[RequiredByNativeCode] // 0x005008CC-0x0050093C
	public static class AnalyticsSessionInfo // TypeDefIndex: 2826
	{
		// Fields
		[CompilerGenerated] // 0x00500A1C-0x00500A58
		[DebuggerBrowsable] // 0x00500A1C-0x00500A58
		private static SessionStateChanged sessionStateChanged; // 0x00
	
		// Nested types
		public delegate void SessionStateChanged(AnalyticsSessionState sessionState, long sessionId, long sessionElapsedTime, bool sessionChanged); // TypeDefIndex: 2827; 0x00FB5C58-0x00FB5EEC
	
		// Methods
		[RequiredByNativeCode] // 0x00500B48-0x00500B58
		internal static void CallSessionStateChanged(AnalyticsSessionState sessionState, long sessionId, long sessionElapsedTime, bool sessionChanged); // 0x00FB5BC0-0x00FB5C58
	}
}

namespace UnityEngine
{
	[NativeHeader] // 0x0050093C-0x0050099C
	[NativeHeader] // 0x0050093C-0x0050099C
	public static class RemoteSettings // TypeDefIndex: 2828
	{
		// Fields
		[CompilerGenerated] // 0x00500A58-0x00500A94
		[DebuggerBrowsable] // 0x00500A58-0x00500A94
		private static UpdatedEventHandler Updated; // 0x00
		[CompilerGenerated] // 0x00500A94-0x00500AD0
		[DebuggerBrowsable] // 0x00500A94-0x00500AD0
		private static Action BeforeFetchFromServer; // 0x08
		[CompilerGenerated] // 0x00500AD0-0x00500B0C
		[DebuggerBrowsable] // 0x00500AD0-0x00500B0C
		private static Action<bool, bool, int> Completed; // 0x10
	
		// Nested types
		public delegate void UpdatedEventHandler(); // TypeDefIndex: 2829; 0x00FB6208-0x00FB6424
	
		// Methods
		[RequiredByNativeCode] // 0x00500B58-0x00500B68
		internal static void RemoteSettingsUpdated(bool wasLastUpdatedFromServer); // 0x00FB61A8-0x00FB6208
		[RequiredByNativeCode] // 0x00500B68-0x00500B78
		internal static void RemoteSettingsBeforeFetchFromServer(); // 0x00FB6424-0x00FB6488
		[RequiredByNativeCode] // 0x00500B78-0x00500B88
		internal static void RemoteSettingsUpdateCompleted(bool wasLastUpdatedFromServer, bool settingsChanged, int response); // 0x00FB6488-0x00FB6518
	}

	[ExcludeFromDocs] // 0x0050099C-0x00500A0C
	[NativeHeader] // 0x0050099C-0x00500A0C
	[NativeHeader] // 0x0050099C-0x00500A0C
	public class RemoteConfigSettings // TypeDefIndex: 2830
	{
		// Fields
		[NonSerialized]
		internal IntPtr m_Ptr; // 0x10
		[CompilerGenerated] // 0x00500B0C-0x00500B48
		[DebuggerBrowsable] // 0x00500B0C-0x00500B48
		private Action<bool> Updated; // 0x18
	
		// Methods
		~RemoteConfigSettings(); // 0x00FB5FF0-0x00FB605C
		private void Destroy(); // 0x00FB605C-0x00FB60E8
		[ThreadSafe] // 0x00500B88-0x00500B98
		internal static void Internal_Destroy(IntPtr ptr); // 0x00FB60E8-0x00FB6128
		[RequiredByNativeCode] // 0x00500B98-0x00500BA8
		internal static void RemoteConfigSettingsUpdated(RemoteConfigSettings rcs, bool wasLastUpdatedFromServer); // 0x00FB6128-0x00FB61A8
	}

	internal static class RemoteConfigSettingsHelper // TypeDefIndex: 2831
	{
		// Nested types
		[RequiredByNativeCode] // 0x00500A0C-0x00500A1C
		internal enum Tag // TypeDefIndex: 2832
		{
			kUnknown = 0,
			kIntVal = 1,
			kInt64Val = 2,
			kUInt64Val = 3,
			kDoubleVal = 4,
			kBoolVal = 5,
			kStringVal = 6,
			kArrayVal = 7,
			kMixedArrayVal = 8,
			kMapVal = 9,
			kMaxTags = 10
		}
	}

	[Obsolete] // 0x00501D54-0x00501D8C
	public class WWW : CustomYieldInstruction, IDisposable // TypeDefIndex: 2834
	{
		// Fields
		private UnityWebRequest _uwr; // 0x10
	
		// Properties
		public byte[] bytes { get; } // 0x00FB56C4-0x00FB5760 
		public string error { get; } // 0x00FB5834-0x00FB595C 
		public bool isDone { get; } // 0x00FB595C-0x00FB5978 
		public float progress { get; } // 0x00FB5978-0x00FB59A4 
		public string text { get; } // 0x00FB59A4-0x00FB5A38 
		public Texture2D texture { get; } // 0x00FB5B3C-0x00FB5B44 
		public string url { get; } // 0x00FB5B44-0x00FB5B60 
		public override bool keepWaiting { get; } // 0x00FB5B60-0x00FB5B90 
	
		// Constructors
		public WWW(string url); // 0x00FB5618-0x00FB565C
		public WWW(string url, WWWForm form); // 0x00FB565C-0x00FB56C4
	
		// Methods
		private Texture2D CreateTextureFromDownloadedData(bool markNonReadable); // 0x00FB5A38-0x00FB5B3C
		public void Dispose(); // 0x00FB5B90-0x00FB5BC0
		private bool WaitUntilDoneIfPossible(); // 0x00FB5760-0x00FB5834
	}
}

namespace UnityEngine.Experimental.VFX
{
	[NativeType] // 0x00502F48-0x00502F94
	[RequiredByNativeCode] // 0x00502F48-0x00502F94
	public sealed class VFXEventAttribute // TypeDefIndex: 2836
	{
		// Fields
		private IntPtr m_Ptr; // 0x10
		private bool m_Owner; // 0x18
		private VisualEffectAsset m_VfxAsset; // 0x20
	
		// Methods
		private void Release(); // 0x00FB8084-0x00FB811C
		~VFXEventAttribute(); // 0x00FB815C-0x00FB81C8
		[NativeMethod] // 0x00503350-0x00503384
		internal static void Internal_Destroy(IntPtr ptr); // 0x00FB811C-0x00FB815C
	}

	[NativeType] // 0x00502F94-0x0050300C
	[RequiredByNativeCode] // 0x00502F94-0x0050300C
	[StaticAccessor] // 0x00502F94-0x0050300C
	internal class VFXExpressionMesh // TypeDefIndex: 2837
	{
	}

	[NativeType] // 0x0050300C-0x00503084
	[RequiredByNativeCode] // 0x0050300C-0x00503084
	[StaticAccessor] // 0x0050300C-0x00503084
	internal class VFXExpressionNoise // TypeDefIndex: 2838
	{
	}

	[NativeType] // 0x00503084-0x005030D0
	[RequiredByNativeCode] // 0x00503084-0x005030D0
	public class VFXExpressionValues // TypeDefIndex: 2839
	{
		// Fields
		internal IntPtr m_Ptr; // 0x10
	
		// Constructors
		private VFXExpressionValues(); // 0x00FB81C8-0x00FB81D0
	
		// Methods
		[RequiredByNativeCode] // 0x00503384-0x00503394
		internal static VFXExpressionValues CreateExpressionValuesWrapper(IntPtr ptr); // 0x00FB81D0-0x00FB8240
	}

	[NativeHeader] // 0x005030D0-0x00503144
	[RequiredByNativeCode] // 0x005030D0-0x00503144
	[StaticAccessor] // 0x005030D0-0x00503144
	public static class VFXManager // TypeDefIndex: 2840
	{
	}

	[Serializable]
	[RequiredByNativeCode] // 0x00503144-0x00503154
	public abstract class VFXSpawnerCallbacks : ScriptableObject // TypeDefIndex: 2841
	{
		// Constructors
		protected VFXSpawnerCallbacks(); // 0x00FB8240-0x00FB8248
	
		// Methods
		public abstract void OnPlay(VFXSpawnerState state, VFXExpressionValues vfxValues, VisualEffect vfxComponent);
		public abstract void OnUpdate(VFXSpawnerState state, VFXExpressionValues vfxValues, VisualEffect vfxComponent);
		public abstract void OnStop(VFXSpawnerState state, VFXExpressionValues vfxValues, VisualEffect vfxComponent);
	}

	[NativeType] // 0x00503154-0x005031A0
	[RequiredByNativeCode] // 0x00503154-0x005031A0
	public sealed class VFXSpawnerState : IDisposable // TypeDefIndex: 2842
	{
		// Fields
		private IntPtr m_Ptr; // 0x10
		private bool m_Owner; // 0x18
	
		// Constructors
		internal VFXSpawnerState(IntPtr ptr, bool owner); // 0x00FB8248-0x00FB8288
	
		// Methods
		[RequiredByNativeCode] // 0x00503394-0x005033A4
		internal static VFXSpawnerState CreateSpawnerStateWrapper(); // 0x00FB8288-0x00FB82EC
		[RequiredByNativeCode] // 0x005033A4-0x005033B4
		internal void SetWrapValue(IntPtr ptr); // 0x00FB82EC-0x00FB8384
		private void Release(); // 0x00FB8384-0x00FB8418
		~VFXSpawnerState(); // 0x00FB8458-0x00FB84C4
		public void Dispose(); // 0x00FB84C4-0x00FB8534
		[NativeMethod] // 0x005033B4-0x005033E8
		private static void Internal_Destroy(IntPtr ptr); // 0x00FB8418-0x00FB8458
	}

	[NativeHeader] // 0x005031A0-0x00503234
	[NativeHeader] // 0x005031A0-0x00503234
	[NativeHeader] // 0x005031A0-0x00503234
	[UsedByNativeCode] // 0x005031A0-0x00503234
	public abstract class VisualEffectObject : UnityEngine.Object // TypeDefIndex: 2843
	{
	}

	[NativeHeader] // 0x00503234-0x005032C8
	[NativeHeader] // 0x00503234-0x005032C8
	[NativeHeader] // 0x00503234-0x005032C8
	[UsedByNativeCode] // 0x00503234-0x005032C8
	public class VisualEffectAsset : VisualEffectObject // TypeDefIndex: 2844
	{
	}

	[NativeHeader] // 0x005032C8-0x00503350
	[RequireComponent] // 0x005032C8-0x00503350
	public class VisualEffect : Behaviour // TypeDefIndex: 2845
	{
	}
}

namespace UnityEngine.XR
{
	[NativeConditional] // 0x00504624-0x0050465C
	public static class XRDevice // TypeDefIndex: 2847
	{
		// Fields
		[CompilerGenerated] // 0x0050465C-0x00504698
		[DebuggerBrowsable] // 0x0050465C-0x00504698
		private static Action<string> deviceLoaded; // 0x00
	
		// Constructors
		static XRDevice(); // 0x00FB9A20-0x00FB9A70
	
		// Methods
		[RequiredByNativeCode] // 0x00504698-0x005046A8
		private static void InvokeDeviceLoaded(string loadedDeviceName); // 0x00FB9964-0x00FB9A20
	}
}

namespace UnityEngine.Video
{
	[NativeHeader] // 0x00505854-0x005058A0
	[RequiredByNativeCode] // 0x00505854-0x005058A0
	public sealed class VideoClip : UnityEngine.Object // TypeDefIndex: 2849
	{
	}
}

namespace UnityEngine.Experimental.Video
{
	[NativeHeader] // 0x005058A0-0x00505980
	[NativeHeader] // 0x005058A0-0x00505980
	[NativeHeader] // 0x005058A0-0x00505980
	[NativeHeader] // 0x005058A0-0x00505980
	[RequiredByNativeCode] // 0x005058A0-0x00505980
	[StaticAccessor] // 0x005058A0-0x00505980
	public struct VideoClipPlayable : IPlayable, IEquatable<VideoClipPlayable> // TypeDefIndex: 2850
	{
		// Fields
		private PlayableHandle m_Handle; // 0x00
	
		// Methods
		public PlayableHandle GetHandle(); // 0x005978A8-0x005978B4
		public bool Equals(VideoClipPlayable other); // 0x005978B4-0x0059A14C
	}
}

namespace UnityEngine.Video
{
	[RequiredByNativeCode] // 0x00505980-0x00505990
	public enum VideoRenderMode // TypeDefIndex: 2851
	{
		CameraFarPlane = 0,
		CameraNearPlane = 1,
		RenderTexture = 2,
		MaterialOverride = 3,
		APIOnly = 4
	}

	[RequiredByNativeCode] // 0x00505990-0x005059A0
	public enum Video3DLayout // TypeDefIndex: 2852
	{
		No3D = 0,
		SideBySide3D = 1,
		OverUnder3D = 2
	}

	[RequiredByNativeCode] // 0x005059A0-0x005059B0
	public enum VideoAspectRatio // TypeDefIndex: 2853
	{
		NoScaling = 0,
		FitVertically = 1,
		FitHorizontally = 2,
		FitInside = 3,
		FitOutside = 4,
		Stretch = 5
	}

	[RequiredByNativeCode] // 0x005059B0-0x005059C0
	public enum VideoTimeSource // TypeDefIndex: 2854
	{
		AudioDSPTimeSource = 0,
		GameTimeSource = 1
	}

	[RequiredByNativeCode] // 0x005059C0-0x005059D0
	public enum VideoTimeReference // TypeDefIndex: 2855
	{
		Freerun = 0,
		InternalTime = 1,
		ExternalTime = 2
	}

	[RequiredByNativeCode] // 0x005059D0-0x005059E0
	public enum VideoSource // TypeDefIndex: 2856
	{
		VideoClip = 0,
		Url = 1
	}

	[RequiredByNativeCode] // 0x005059E0-0x005059F0
	public enum VideoAudioOutputMode // TypeDefIndex: 2857
	{
		None = 0,
		AudioSource = 1,
		Direct = 2,
		APIOnly = 3
	}

	[NativeHeader] // 0x005059F0-0x00505A88
	[RequireComponent] // 0x005059F0-0x00505A88
	[RequiredByNativeCode] // 0x005059F0-0x00505A88
	public sealed class VideoPlayer : Behaviour // TypeDefIndex: 2858
	{
		// Fields
		[CompilerGenerated] // 0x00505A88-0x00505AC4
		[DebuggerBrowsable] // 0x00505A88-0x00505AC4
		private EventHandler prepareCompleted; // 0x18
		[CompilerGenerated] // 0x00505AC4-0x00505B00
		[DebuggerBrowsable] // 0x00505AC4-0x00505B00
		private EventHandler loopPointReached; // 0x20
		[CompilerGenerated] // 0x00505B00-0x00505B3C
		[DebuggerBrowsable] // 0x00505B00-0x00505B3C
		private EventHandler started; // 0x28
		[CompilerGenerated] // 0x00505B3C-0x00505B78
		[DebuggerBrowsable] // 0x00505B3C-0x00505B78
		private EventHandler frameDropped; // 0x30
		[CompilerGenerated] // 0x00505B78-0x00505BB4
		[DebuggerBrowsable] // 0x00505B78-0x00505BB4
		private ErrorEventHandler errorReceived; // 0x38
		[CompilerGenerated] // 0x00505BB4-0x00505BF0
		[DebuggerBrowsable] // 0x00505BB4-0x00505BF0
		private EventHandler seekCompleted; // 0x40
		[CompilerGenerated] // 0x00505BF0-0x00505C2C
		[DebuggerBrowsable] // 0x00505BF0-0x00505C2C
		private TimeEventHandler clockResyncOccurred; // 0x48
		[CompilerGenerated] // 0x00505C2C-0x00505C68
		[DebuggerBrowsable] // 0x00505C2C-0x00505C68
		private FrameReadyEventHandler frameReady; // 0x50
	
		// Nested types
		public delegate void EventHandler(VideoPlayer source); // TypeDefIndex: 2859; 0x00FB3F88-0x00FB433C
	
		public delegate void ErrorEventHandler(VideoPlayer source, string message); // TypeDefIndex: 2860; 0x00FB47F4-0x00FB4BD4
	
		public delegate void FrameReadyEventHandler(VideoPlayer source, long frameIdx); // TypeDefIndex: 2861; 0x00FB436C-0x00FB474C
	
		public delegate void TimeEventHandler(VideoPlayer source, double seconds); // TypeDefIndex: 2862; 0x00FB4C24-0x00FB500C
	
		// Methods
		[RequiredByNativeCode] // 0x00505C68-0x00505C78
		private static void InvokePrepareCompletedCallback_Internal(VideoPlayer source); // 0x00FB3F60-0x00FB3F88
		[RequiredByNativeCode] // 0x00505C78-0x00505C88
		private static void InvokeFrameReadyCallback_Internal(VideoPlayer source, long frameIdx); // 0x00FB433C-0x00FB436C
		[RequiredByNativeCode] // 0x00505C88-0x00505C98
		private static void InvokeLoopPointReachedCallback_Internal(VideoPlayer source); // 0x00FB474C-0x00FB4774
		[RequiredByNativeCode] // 0x00505C98-0x00505CA8
		private static void InvokeStartedCallback_Internal(VideoPlayer source); // 0x00FB4774-0x00FB479C
		[RequiredByNativeCode] // 0x00505CA8-0x00505CB8
		private static void InvokeFrameDroppedCallback_Internal(VideoPlayer source); // 0x00FB479C-0x00FB47C4
		[RequiredByNativeCode] // 0x00505CB8-0x00505CC8
		private static void InvokeErrorReceivedCallback_Internal(VideoPlayer source, string errorStr); // 0x00FB47C4-0x00FB47F4
		[RequiredByNativeCode] // 0x00505CC8-0x00505CD8
		private static void InvokeSeekCompletedCallback_Internal(VideoPlayer source); // 0x00FB4BD4-0x00FB4BFC
		[RequiredByNativeCode] // 0x00505CD8-0x00505CE8
		private static void InvokeClockResyncOccurredCallback_Internal(VideoPlayer source, double seconds); // 0x00FB4BFC-0x00FB4C24
	}
}

[AddComponentMenu] // 0x00506F34-0x00506F6C
public class CinemachineCameraOffset : CinemachineExtension // TypeDefIndex: 2864
{
	// Fields
	[Tooltip] // 0x00508FD8-0x00509010
	public Vector3 m_Offset; // 0x28

	// Constructors
	public CinemachineCameraOffset(); // 0x00F99198-0x00F99210

	// Methods
	protected override void PostPipelineStageCallback(CinemachineVirtualCameraBase vcam, CinemachineCore.Stage stage, ref CameraState state, float deltaTime); // 0x00F9902C-0x00F99198
}

public class CinemachineTouchInputMapper : MonoBehaviour // TypeDefIndex: 2865
{
	// Fields
	public float TouchSensitivityX; // 0x18
	public float TouchSensitivityY; // 0x1C
	public string TouchXInputMapTo; // 0x20
	public string TouchYInputMapTo; // 0x28

	// Constructors
	public CinemachineTouchInputMapper(); // 0x00F9A010-0x00F9A084

	// Methods
	private void Start(); // 0x00F99EA4-0x00F99F3C
	private float GetInputAxis(string axisName); // 0x00F99F3C-0x00F9A010
}

internal sealed class CinemachineMixer : PlayableBehaviour // TypeDefIndex: 2866
{
	// Fields
	private CinemachineBrain mBrain; // 0x10
	private int mBrainOverrideId; // 0x18
	private bool mPlaying; // 0x1C
	private float mLastOverrideFrame; // 0x20

	// Nested types
	private struct ClipInfo // TypeDefIndex: 2867
	{
		// Fields
		public ICinemachineCamera vcam; // 0x00
		public float weight; // 0x08
		public double localTime; // 0x10
		public double duration; // 0x18
	}

	// Constructors
	public CinemachineMixer(); // 0x00F99830-0x00F99840

	// Methods
	public override void OnPlayableDestroy(Playable playable); // 0x00F99210-0x00F992B0
	public override void PrepareFrame(Playable playable, FrameData info); // 0x00F992B0-0x00F992E4
	public override void ProcessFrame(Playable playable, FrameData info, object playerData); // 0x00F992E4-0x00F99728
	private float GetDeltaTime(float deltaTime); // 0x00F99798-0x00F99830
}

public sealed class CinemachineShot : PlayableAsset, IPropertyPreview // TypeDefIndex: 2868
{
	// Fields
	public ExposedReference<CinemachineVirtualCameraBase> VirtualCamera; // 0x18

	// Constructors
	public CinemachineShot(); // 0x00F99E94-0x00F99E9C

	// Methods
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner); // 0x00F99840-0x00F99948
	public void GatherProperties(PlayableDirector director, IPropertyCollector driver); // 0x00F99948-0x00F99E94
}

internal sealed class CinemachineShotPlayable : PlayableBehaviour // TypeDefIndex: 2869
{
	// Fields
	public CinemachineVirtualCameraBase VirtualCamera; // 0x10

	// Properties
	public bool IsValid { get; } // 0x00F99728-0x00F99798 

	// Constructors
	public CinemachineShotPlayable(); // 0x00F99E9C-0x00F99EA4
}

[Serializable]
[TrackBindingType] // 0x00506F6C-0x0050801C
[TrackClipType] // 0x00506F6C-0x0050801C
[TrackColor] // 0x00506F6C-0x0050801C
public class CinemachineTrack : TrackAsset // TypeDefIndex: 2870
{
	// Constructors
	public CinemachineTrack(); // 0x00F9A470-0x00F9A4D8

	// Methods
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount); // 0x00F9A084-0x00F9A470
}

namespace Cinemachine
{
	[AddComponentMenu] // 0x0050801C-0x0050808C
	[DisallowMultipleComponent] // 0x0050801C-0x0050808C
	[DocumentationSorting] // 0x0050801C-0x0050808C
	[ExecuteAlways] // 0x0050801C-0x0050808C
	public class CinemachineBlendListCamera : CinemachineVirtualCameraBase // TypeDefIndex: 2871
	{
		// Fields
		[NoSaveDuringPlay] // 0x00509010-0x0050905C
		[Tooltip] // 0x00509010-0x0050905C
		public Transform m_LookAt; // 0x78
		[NoSaveDuringPlay] // 0x0050905C-0x005090A8
		[Tooltip] // 0x0050905C-0x005090A8
		public Transform m_Follow; // 0x80
		[Tooltip] // 0x005090A8-0x005090E0
		public bool m_ShowDebugText; // 0x88
		[HideInInspector] // 0x005090E0-0x00509128
		[NoSaveDuringPlay] // 0x005090E0-0x00509128
		[SerializeField] // 0x005090E0-0x00509128
		internal CinemachineVirtualCameraBase[] m_ChildCameras; // 0x90
		[Tooltip] // 0x00509128-0x00509160
		public Instruction[] m_Instructions; // 0x98
		[CompilerGenerated] // 0x00509160-0x00509170
		private ICinemachineCamera _LiveChild_k__BackingField; // 0xA0
		[CompilerGenerated] // 0x00509170-0x00509180
		private ICinemachineCamera _TransitioningFrom_k__BackingField; // 0xA8
		private CameraState m_State; // 0xB0
		private float mActivationTime; // 0x190
		private int mCurrentInstruction; // 0x194
		private CinemachineBlend mActiveBlend; // 0x198
	
		// Properties
		public override string Description { get; } // 0x0099ED34-0x0099EE80 
		public ICinemachineCamera LiveChild { [CompilerGenerated] /* 0x0050EAF4-0x0050EB04 */ get; [CompilerGenerated] /* 0x0050EAE4-0x0050EAF4 */ set; } // 0x0099EE88-0x0099EE90 0x0099EE80-0x0099EE88
		public override CameraState State { get; } // 0x0099EED0-0x0099EEE0 
		public override Transform LookAt { get; set; } // 0x0099EEE0-0x0099EEEC 0x0099EEEC-0x0099EEF4
		public override Transform Follow { get; set; } // 0x0099EEF4-0x0099EF00 0x0099EF00-0x0099EF08
		private ICinemachineCamera TransitioningFrom { [CompilerGenerated] /* 0x0050EB04-0x0050EB14 */ get; [CompilerGenerated] /* 0x0050EB14-0x0050EB24 */ set; } // 0x0099F218-0x0099F220 0x0099F220-0x0099F228
		public CinemachineVirtualCameraBase[] ChildCameras { get; } // 0x0099FE5C-0x0099FE80 
		public bool IsBlending { get; } // 0x0099FE80-0x0099FE90 
	
		// Nested types
		[Serializable]
		public struct Instruction // TypeDefIndex: 2872
		{
			// Fields
			[Tooltip] // 0x0050DB6C-0x0050DBA4
			public CinemachineVirtualCameraBase m_VirtualCamera; // 0x00
			[Tooltip] // 0x0050DBA4-0x0050DBDC
			public float m_Hold; // 0x08
			[CinemachineBlendDefinitionProperty] // 0x0050DBDC-0x0050DC28
			[Tooltip] // 0x0050DBDC-0x0050DC28
			public CinemachineBlendDefinition m_Blend; // 0x10
		}
	
		// Constructors
		public CinemachineBlendListCamera(); // 0x009A001C-0x009A00B4
	
		// Methods
		public override bool IsLiveChild(ICinemachineCamera vcam); // 0x0099EE90-0x0099EED0
		public override void OnTargetObjectWarped(Transform target, Vector3 positionDelta); // 0x0099EF08-0x0099EFE0
		public override void OnTransitionFromCamera(ICinemachineCamera fromCam, Vector3 worldUp, float deltaTime); // 0x0099F194-0x0099F218
		public override void InternalUpdateCameraState(Vector3 worldUp, float deltaTime); // 0x0099F228-0x0099F698
		protected override void OnEnable(); // 0x0099FAA4-0x0099FBD8
		protected override void OnDisable(); // 0x0099FBE4-0x0099FCB4
		private void OnTransformChildrenChanged(); // 0x0099FCB4-0x0099FCC0
		private void OnGuiHandler(); // 0x0099FCC0-0x0099FE5C
		private void InvalidateListOfChildren(); // 0x0099FBD8-0x0099FBE4
		private void UpdateListOfChildren(); // 0x0099EFE0-0x0099F194
		internal void ValidateInstructions(); // 0x0099FE90-0x009A001C
		private void AdvanceCurrentInstruction(); // 0x0099F698-0x0099F7D8
	}

	[AddComponentMenu] // 0x0050808C-0x0050810C
	[DisallowMultipleComponent] // 0x0050808C-0x0050810C
	[DocumentationSorting] // 0x0050808C-0x0050810C
	[ExecuteAlways] // 0x0050808C-0x0050810C
	[SaveDuringPlay] // 0x0050808C-0x0050810C
	public class CinemachineBrain : MonoBehaviour // TypeDefIndex: 2873
	{
		// Fields
		[Tooltip] // 0x00509180-0x005091B8
		public bool m_ShowDebugText; // 0x18
		[Tooltip] // 0x005091B8-0x005091F0
		public bool m_ShowCameraFrustum; // 0x19
		[Tooltip] // 0x005091F0-0x00509228
		public bool m_IgnoreTimeScale; // 0x1A
		[Tooltip] // 0x00509228-0x00509260
		public Transform m_WorldUpOverride; // 0x20
		[Tooltip] // 0x00509260-0x00509298
		public UpdateMethod m_UpdateMethod; // 0x28
		[CinemachineBlendDefinitionProperty] // 0x00509298-0x005092E4
		[Tooltip] // 0x00509298-0x005092E4
		public CinemachineBlendDefinition m_DefaultBlend; // 0x30
		[Tooltip] // 0x005092E4-0x0050931C
		public CinemachineBlenderSettings m_CustomBlends; // 0x40
		private Camera m_OutputCamera; // 0x48
		[Tooltip] // 0x0050931C-0x00509354
		public BrainEvent m_CameraCutEvent; // 0x50
		[Tooltip] // 0x00509354-0x0050938C
		public VcamActivatedEvent m_CameraActivatedEvent; // 0x58
		private static ICinemachineCamera mSoloCamera; // 0x00
		private Coroutine mPhysicsCoroutine; // 0x60
		private WaitForFixedUpdate mWaitForFixedUpdate; // 0x68
		private List<BrainFrame> mFrameStack; // 0x70
		private int mNextFrameId; // 0x78
		private CinemachineBlend mCurrentLiveCameras; // 0x80
		private ICinemachineCamera mActiveCameraPreviousFrame; // 0x88
		[CompilerGenerated] // 0x0050938C-0x0050939C
		private CameraState _CurrentCameraState_k__BackingField; // 0x90
	
		// Properties
		public Camera OutputCamera { get; } // 0x009A02F0-0x009A0390 
		public static ICinemachineCamera SoloCamera { get; set; } // 0x009A0390-0x009A03E0 0x009A03E0-0x009A0540
		public Vector3 DefaultWorldUp { get; } // 0x009A06AC-0x009A0770 
		public ICinemachineCamera ActiveVirtualCamera { get; } // 0x009A1308-0x009A1370 
		public bool IsBlending { get; } // 0x009A1260-0x009A127C 
		public CinemachineBlend ActiveBlend { get; } // 0x009A127C-0x009A1308 
		public CameraState CurrentCameraState { [CompilerGenerated] /* 0x0050EB88-0x0050EB98 */ get; [CompilerGenerated] /* 0x0050EB98-0x0050EBA8 */ private set; } // 0x009A30E8-0x009A30F8 0x009A30F8-0x009A3114
	
		// Nested types
		[DocumentationSorting] // 0x00508E08-0x00508E1C
		public enum UpdateMethod // TypeDefIndex: 2874
		{
			FixedUpdate = 0,
			LateUpdate = 1,
			SmartUpdate = 2
		}
	
		[Serializable]
		public class BrainEvent : UnityEvent<CinemachineBrain> // TypeDefIndex: 2875
		{
			// Constructors
			public BrainEvent(); // 0x009A3300-0x009A3350
		}
	
		[Serializable]
		public class VcamActivatedEvent : UnityEvent<ICinemachineCamera, ICinemachineCamera> // TypeDefIndex: 2876
		{
			// Constructors
			public VcamActivatedEvent(); // 0x009A3350-0x009A33A0
		}
	
		private class BrainFrame // TypeDefIndex: 2877
		{
			// Fields
			public int id; // 0x10
			public CinemachineBlend blend; // 0x18
			public CinemachineBlend workingBlend; // 0x20
			public BlendSourceVirtualCamera workingBlendSource; // 0x28
			public float deltaTimeOverride; // 0x30
			public float timeOfOverride; // 0x34
	
			// Properties
			public bool Active { get; } // 0x009A20D4-0x009A20EC 
			public bool TimeOverrideExpired { get; } // 0x009A20EC-0x009A2134 
	
			// Constructors
			public BrainFrame(); // 0x009A0938-0x009A09FC
		}
	
		[CompilerGenerated] // 0x00508E1C-0x00508E2C
		private sealed class _AfterPhysics_d__28 : IEnumerator<object> // TypeDefIndex: 2878
		{
			// Fields
			private int __1__state; // 0x10
			private object __2__current; // 0x18
			public CinemachineBrain __4__this; // 0x20
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x0050F378-0x0050F388 */ get; } // 0x009A34A0-0x009A34A8 
			object IEnumerator.Current { [DebuggerHidden] /* 0x0050F398-0x0050F3A8 */ get; } // 0x009A350C-0x009A3514 
	
			// Constructors
			[DebuggerHidden] // 0x0050F358-0x0050F368
			public _AfterPhysics_d__28(int __1__state); // 0x009A1370-0x009A139C
	
			// Methods
			[DebuggerHidden] // 0x0050F368-0x0050F378
			void IDisposable.Dispose(); // 0x009A33A0-0x009A33A4
			private bool MoveNext(); // 0x009A33A4-0x009A34A0
			[DebuggerHidden] // 0x0050F388-0x0050F398
			void IEnumerator.Reset(); // 0x009A34A8-0x009A350C
		}
	
		// Constructors
		public CinemachineBrain(); // 0x009A31E4-0x009A3300
	
		// Methods
		public static Color GetSoloGUIColor(); // 0x009A0630-0x009A06AC
		private void OnEnable(); // 0x009A0770-0x009A0938
		private void OnDisable(); // 0x009A0AE8-0x009A0C04
		private void Start(); // 0x009A0C6C-0x009A0C78
		private void OnGuiHandler(); // 0x009A0ED0-0x009A1260
		[IteratorStateMachine] // 0x0050EB24-0x0050EB88
		private IEnumerator AfterPhysics(); // 0x009A0A74-0x009A0AE8
		private void LateUpdate(); // 0x009A139C-0x009A158C
		private float GetEffectiveDeltaTime(bool fixedDelta); // 0x009A158C-0x009A1744
		private void UpdateVirtualCameras(CinemachineCore.UpdateFilter updateFilter, float deltaTime); // 0x009A0C78-0x009A0ED0
		private static ICinemachineCamera DeepCamBFromBlend(CinemachineBlend blend); // 0x009A2578-0x009A2690
		private int GetBrainFrame(int withId); // 0x009A2690-0x009A27A0
		internal int SetCameraOverride(int overrideId, ICinemachineCamera camA, ICinemachineCamera camB, float weightB, float deltaTime); // 0x009A27A0-0x009A28CC
		internal void ReleaseCameraOverride(int overrideId); // 0x009A28CC-0x009A2998
		private void ProcessActiveCamera(float deltaTime); // 0x009A1E3C-0x009A20D4
		private void UpdateFrame0(float deltaTime); // 0x009A1744-0x009A1A6C
		private void UpdateCurrentLiveCameras(); // 0x009A1A6C-0x009A1E3C
		public bool IsLive(ICinemachineCamera vcam); // 0x009A2F34-0x009A30E8
		private ICinemachineCamera TopCameraFromPriorityQueue(); // 0x009A2BA0-0x009A2D64
		private CinemachineBlendDefinition LookupBlend(ICinemachineCamera fromKey, ICinemachineCamera toKey); // 0x009A2D64-0x009A2F34
		private void PushStateToUnityCamera(CameraState state); // 0x009A2998-0x009A2BA0
	}

	[AddComponentMenu] // 0x0050810C-0x0050817C
	[DisallowMultipleComponent] // 0x0050810C-0x0050817C
	[DocumentationSorting] // 0x0050810C-0x0050817C
	[ExecuteAlways] // 0x0050810C-0x0050817C
	public class CinemachineClearShot : CinemachineVirtualCameraBase // TypeDefIndex: 2879
	{
		// Fields
		[NoSaveDuringPlay] // 0x0050939C-0x005093E8
		[Tooltip] // 0x0050939C-0x005093E8
		public Transform m_LookAt; // 0x78
		[NoSaveDuringPlay] // 0x005093E8-0x00509434
		[Tooltip] // 0x005093E8-0x00509434
		public Transform m_Follow; // 0x80
		[NoSaveDuringPlay] // 0x00509434-0x00509480
		[Tooltip] // 0x00509434-0x00509480
		public bool m_ShowDebugText; // 0x88
		[HideInInspector] // 0x00509480-0x005094C8
		[NoSaveDuringPlay] // 0x00509480-0x005094C8
		[SerializeField] // 0x00509480-0x005094C8
		internal CinemachineVirtualCameraBase[] m_ChildCameras; // 0x90
		[Tooltip] // 0x005094C8-0x00509500
		public float m_ActivateAfter; // 0x98
		[Tooltip] // 0x00509500-0x00509538
		public float m_MinDuration; // 0x9C
		[Tooltip] // 0x00509538-0x00509570
		public bool m_RandomizeChoice; // 0xA0
		[CinemachineBlendDefinitionProperty] // 0x00509570-0x005095BC
		[Tooltip] // 0x00509570-0x005095BC
		public CinemachineBlendDefinition m_DefaultBlend; // 0xA8
		[HideInInspector] // 0x005095BC-0x005095CC
		public CinemachineBlenderSettings m_CustomBlends; // 0xB8
		[CompilerGenerated] // 0x005095CC-0x005095DC
		private ICinemachineCamera _LiveChild_k__BackingField; // 0xC0
		private CameraState m_State; // 0xC8
		private float mActivationTime; // 0x1A8
		private float mPendingActivationTime; // 0x1AC
		private ICinemachineCamera mPendingCamera; // 0x1B0
		private CinemachineBlend mActiveBlend; // 0x1B8
		private bool mRandomizeNow; // 0x1C0
		private CinemachineVirtualCameraBase[] m_RandomizedChilden; // 0x1C8
		[CompilerGenerated] // 0x005095DC-0x005095EC
		private ICinemachineCamera _TransitioningFrom_k__BackingField; // 0x1D0
	
		// Properties
		public override string Description { get; } // 0x009A3514-0x009A3660 
		public ICinemachineCamera LiveChild { [CompilerGenerated] /* 0x0050EBB8-0x0050EBC8 */ get; [CompilerGenerated] /* 0x0050EBA8-0x0050EBB8 */ set; } // 0x009A3668-0x009A3670 0x009A3660-0x009A3668
		public override CameraState State { get; } // 0x009A3670-0x009A3680 
		public override Transform LookAt { get; set; } // 0x009A36C0-0x009A36CC 0x009A36CC-0x009A36D4
		public override Transform Follow { get; set; } // 0x009A36D4-0x009A36E0 0x009A36E0-0x009A36E8
		public bool IsBlending { get; } // 0x009A4814-0x009A4824 
		public CinemachineVirtualCameraBase[] ChildCameras { get; } // 0x009A4824-0x009A4848 
		private ICinemachineCamera TransitioningFrom { [CompilerGenerated] /* 0x0050EBC8-0x0050EBD8 */ get; [CompilerGenerated] /* 0x0050EBD8-0x0050EBE8 */ set; } // 0x009A4B34-0x009A4B3C 0x009A4B3C-0x009A4B44
	
		// Nested types
		private struct Pair // TypeDefIndex: 2880
		{
			// Fields
			public int a; // 0x00
			public float b; // 0x04
		}
	
		[Serializable]
		[CompilerGenerated] // 0x00508E2C-0x00508E3C
		private sealed class __c // TypeDefIndex: 2881
		{
			// Fields
			public static readonly __c __9; // 0x00
			public static Comparison<Pair> __9__46_0; // 0x08
	
			// Constructors
			static __c(); // 0x009A4BD8-0x009A4C3C
			public __c(); // 0x009A4C3C-0x009A4C44
	
			// Methods
			internal int _Randomize_b__46_0(Pair p1, Pair p2); // 0x009A4C44-0x009A4C64
		}
	
		// Constructors
		public CinemachineClearShot(); // 0x009A4B44-0x009A4BD8
	
		// Methods
		public override bool IsLiveChild(ICinemachineCamera vcam); // 0x009A3680-0x009A36C0
		public override void OnTargetObjectWarped(Transform target, Vector3 positionDelta); // 0x009A36E8-0x009A37C0
		public override void InternalUpdateCameraState(Vector3 worldUp, float deltaTime); // 0x009A3960-0x009A3D04
		protected override void OnEnable(); // 0x009A4450-0x009A4588
		protected override void OnDisable(); // 0x009A4598-0x009A4668
		public void OnTransformChildrenChanged(); // 0x009A4668-0x009A4678
		private void OnGuiHandler(); // 0x009A4678-0x009A4814
		private void InvalidateListOfChildren(); // 0x009A4588-0x009A4598
		public void ResetRandomization(); // 0x009A4848-0x009A4858
		private void UpdateListOfChildren(); // 0x009A37C0-0x009A3960
		private ICinemachineCamera ChooseCurrentCamera(Vector3 worldUp, float deltaTime); // 0x009A3D04-0x009A4280
		private CinemachineVirtualCameraBase[] Randomize(CinemachineVirtualCameraBase[] src); // 0x009A4858-0x009A4AB0
		private CinemachineBlendDefinition LookupBlend(ICinemachineCamera fromKey, ICinemachineCamera toKey); // 0x009A4280-0x009A4450
		public override void OnTransitionFromCamera(ICinemachineCamera fromCam, Vector3 worldUp, float deltaTime); // 0x009A4AB0-0x009A4B34
	}

	[AddComponentMenu] // 0x0050817C-0x005081EC
	[DocumentationSorting] // 0x0050817C-0x005081EC
	[ExecuteAlways] // 0x0050817C-0x005081EC
	[SaveDuringPlay] // 0x0050817C-0x005081EC
	public class CinemachineCollider : CinemachineExtension // TypeDefIndex: 2882
	{
		// Fields
		[Header] // 0x005095EC-0x0050964C
		[Tooltip] // 0x005095EC-0x0050964C
		public LayerMask m_CollideAgainst; // 0x28
		[TagField] // 0x0050964C-0x00509698
		[Tooltip] // 0x0050964C-0x00509698
		public string m_IgnoreTag; // 0x30
		[Tooltip] // 0x00509698-0x005096D0
		public LayerMask m_TransparentLayers; // 0x38
		[Tooltip] // 0x005096D0-0x00509708
		public float m_MinimumDistanceFromTarget; // 0x3C
		[FormerlySerializedAs] // 0x00509708-0x00509778
		[Space] // 0x00509708-0x00509778
		[Tooltip] // 0x00509708-0x00509778
		public bool m_AvoidObstacles; // 0x40
		[FormerlySerializedAs] // 0x00509778-0x005097D8
		[Tooltip] // 0x00509778-0x005097D8
		public float m_DistanceLimit; // 0x44
		[Tooltip] // 0x005097D8-0x00509810
		public float m_MinimumOcclusionTime; // 0x48
		[Tooltip] // 0x00509810-0x00509848
		public float m_CameraRadius; // 0x4C
		[Tooltip] // 0x00509848-0x00509880
		public ResolutionStrategy m_Strategy; // 0x50
		[Range] // 0x00509880-0x005098D4
		[Tooltip] // 0x00509880-0x005098D4
		public int m_MaximumEffort; // 0x54
		[Range] // 0x005098D4-0x00509928
		[Tooltip] // 0x005098D4-0x00509928
		public float m_SmoothingTime; // 0x58
		[FormerlySerializedAs] // 0x00509928-0x005099A0
		[Range] // 0x00509928-0x005099A0
		[Tooltip] // 0x00509928-0x005099A0
		public float m_Damping; // 0x5C
		[Range] // 0x005099A0-0x005099F4
		[Tooltip] // 0x005099A0-0x005099F4
		public float m_DampingWhenOccluded; // 0x60
		[Header] // 0x005099F4-0x00509A54
		[Tooltip] // 0x005099F4-0x00509A54
		public float m_OptimalTargetDistance; // 0x64
		private const float PrecisionSlush = 0.001f; // Metadata: 0x001F4E06
		private RaycastHit[] m_CornerBuffer; // 0x68
		private const float AngleThreshold = 0.1f; // Metadata: 0x001F4E0A
		private Collider[] mColliderBuffer; // 0x70
		private static SphereCollider mCameraCollider; // 0x00
		private static GameObject mCameraColliderGameObject; // 0x08
	
		// Properties
		public List<List<Vector3>> DebugPaths { get; } // 0x009A4E20-0x009A4F94 
	
		// Nested types
		public enum ResolutionStrategy // TypeDefIndex: 2883
		{
			PullCameraForward = 0,
			PreserveCameraHeight = 1,
			PreserveCameraDistance = 2
		}
	
		private class VcamExtraState // TypeDefIndex: 2884
		{
			// Fields
			public Vector3 m_previousDisplacement; // 0x10
			public Vector3 m_previousDisplacementCorrection; // 0x1C
			public float colliderDisplacement; // 0x28
			public bool targetObscured; // 0x2C
			public float occlusionStartTime; // 0x30
			public List<Vector3> debugResolutionPath; // 0x38
			private float m_SmoothedDistance; // 0x40
			private float m_SmoothedTime; // 0x44
	
			// Constructors
			public VcamExtraState(); // 0x009A8934-0x009A893C
	
			// Methods
			public void AddPointToDebugPath(Vector3 p); // 0x009A6E50-0x009A6E54
			public float ApplyDistanceSmoothing(float distance, float smoothingTime); // 0x009A74C0-0x009A7588
			public void UpdateDistanceSmoothing(float distance, float smoothingTime); // 0x009A7478-0x009A74C0
			public void ResetDistanceSmoothing(float smoothingTime); // 0x009A5AE8-0x009A5B2C
		}
	
		// Constructors
		public CinemachineCollider(); // 0x009A8860-0x009A892C
	
		// Methods
		public bool IsTargetObscured(ICinemachineCamera vcam); // 0x009A4C64-0x009A4CD4
		public bool CameraWasDisplaced(ICinemachineCamera vcam); // 0x009A4CD4-0x009A4D4C
		private void OnValidate(); // 0x009A4D4C-0x009A4E20
		protected override void PostPipelineStageCallback(CinemachineVirtualCameraBase vcam, CinemachineCore.Stage stage, ref CameraState state, float deltaTime); // 0x009A4F94-0x009A55A0
		private Vector3 PreserveLignOfSight(ref CameraState state, ref VcamExtraState extra); // 0x009A55A0-0x009A5AE8
		private Vector3 PullCameraInFrontOfNearestObstacle(Vector3 cameraPos, Vector3 lookAtPos, int layerMask, ref RaycastHit hitInfo); // 0x009A6AD8-0x009A6E50
		private bool RaycastIgnoreTag(Ray ray, out RaycastHit hitInfo, float rayLength, int layerMask); // 0x009A7588-0x009A7824
		private Vector3 PushCameraBack(Vector3 currentPos, Vector3 pushDir, RaycastHit obstacle, Vector3 lookAtPos, Plane startPlane, float targetDistance, int iterations, ref VcamExtraState extra); // 0x009A6E54-0x009A7478
		private bool GetWalkingDirection(Vector3 pos, Vector3 pushDir, RaycastHit obstacle, ref Vector3 outDir); // 0x009A7824-0x009A7F38
		private float GetPushBackDistance(Ray ray, Plane startPlane, float targetDistance, Vector3 lookAtPos); // 0x009A7F38-0x009A8190
		private float ClampRayToBounds(Ray ray, float distance, Bounds bounds); // 0x009A8190-0x009A8860
		private Vector3 RespectCameraRadius(Vector3 cameraPos, ref CameraState state); // 0x009A5B2C-0x009A6574
		private bool CheckForTargetObstructions(CameraState state); // 0x009A68EC-0x009A6AD8
		private bool IsTargetOffscreen(CameraState state); // 0x009A6574-0x009A68EC
	}

	[AddComponentMenu] // 0x005081EC-0x0050825C
	[DocumentationSorting] // 0x005081EC-0x0050825C
	[ExecuteAlways] // 0x005081EC-0x0050825C
	[SaveDuringPlay] // 0x005081EC-0x0050825C
	public class CinemachineConfiner : CinemachineExtension // TypeDefIndex: 2885
	{
		// Fields
		[Tooltip] // 0x00509A54-0x00509A8C
		public Mode m_ConfineMode; // 0x28
		[Tooltip] // 0x00509A8C-0x00509AC4
		public Collider m_BoundingVolume; // 0x30
		[Tooltip] // 0x00509AC4-0x00509AFC
		public Collider2D m_BoundingShape2D; // 0x38
		[Tooltip] // 0x00509AFC-0x00509B34
		public bool m_ConfineScreenEdges; // 0x40
		[Range] // 0x00509B34-0x00509B88
		[Tooltip] // 0x00509B34-0x00509B88
		public float m_Damping; // 0x44
		private List<List<Vector2>> m_pathCache; // 0x48
	
		// Properties
		public bool IsValid { get; } // 0x009ABD30-0x009ABE04 
	
		// Nested types
		public enum Mode // TypeDefIndex: 2886
		{
			Confine2D = 0,
			Confine3D = 1
		}
	
		private class VcamExtraState // TypeDefIndex: 2887
		{
			// Fields
			public Vector3 m_previousDisplacement; // 0x10
			public float confinerDisplacement; // 0x1C
	
			// Constructors
			public VcamExtraState(); // 0x009ACD44-0x009ACD4C
		}
	
		// Constructors
		public CinemachineConfiner(); // 0x009ACD34-0x009ACD44
	
		// Methods
		public bool CameraWasDisplaced(CinemachineVirtualCameraBase vcam); // 0x009ABC38-0x009ABCB0
		private void OnValidate(); // 0x009ABCB0-0x009ABD30
		protected override void PostPipelineStageCallback(CinemachineVirtualCameraBase vcam, CinemachineCore.Stage stage, ref CameraState state, float deltaTime); // 0x009ABE04-0x009AC024
		public void InvalidatePathCache(); // 0x009AC8EC-0x009AC8F4
		private bool ValidatePathCache(); // 0x009AC8F4-0x009ACD34
		private Vector3 ConfinePoint(Vector3 camPos); // 0x009AC438-0x009AC8EC
		private Vector3 ConfineScreenEdges(CinemachineVirtualCameraBase vcam, ref CameraState state); // 0x009AC024-0x009AC438
	}

	[DocumentationSorting] // 0x0050825C-0x00508298
	[ExecuteAlways] // 0x0050825C-0x00508298
	public class CinemachineDollyCart : MonoBehaviour // TypeDefIndex: 2888
	{
		// Fields
		[Tooltip] // 0x00509B88-0x00509BC0
		public CinemachinePathBase m_Path; // 0x18
		[Tooltip] // 0x00509BC0-0x00509BF8
		public UpdateMethod m_UpdateMethod; // 0x20
		[Tooltip] // 0x00509BF8-0x00509C30
		public CinemachinePathBase.PositionUnits m_PositionUnits; // 0x24
		[FormerlySerializedAs] // 0x00509C30-0x00509C90
		[Tooltip] // 0x00509C30-0x00509C90
		public float m_Speed; // 0x28
		[FormerlySerializedAs] // 0x00509C90-0x00509CF0
		[Tooltip] // 0x00509C90-0x00509CF0
		public float m_Position; // 0x2C
	
		// Nested types
		public enum UpdateMethod // TypeDefIndex: 2889
		{
			Update = 0,
			FixedUpdate = 1,
			LateUpdate = 2
		}
	
		// Constructors
		public CinemachineDollyCart(); // 0x009AE00C-0x009AE01C
	
		// Methods
		private void FixedUpdate(); // 0x009ADDAC-0x009ADE04
		private void Update(); // 0x009ADF38-0x009ADFA0
		private void LateUpdate(); // 0x009ADFA0-0x009AE00C
		private void SetCartPosition(float distanceAlongPath); // 0x009ADE04-0x009ADF38
	}

	[AddComponentMenu] // 0x00508298-0x00508354
	[DisallowMultipleComponent] // 0x00508298-0x00508354
	[DocumentationSorting] // 0x00508298-0x00508354
	[ExecuteAlways] // 0x00508298-0x00508354
	[RequireComponent] // 0x00508298-0x00508354
	public class CinemachineExternalCamera : CinemachineVirtualCameraBase // TypeDefIndex: 2890
	{
		// Fields
		[NoSaveDuringPlay] // 0x00509CF0-0x00509D3C
		[Tooltip] // 0x00509CF0-0x00509D3C
		public Transform m_LookAt; // 0x78
		private Camera m_Camera; // 0x80
		private CameraState m_State; // 0x88
		[CompilerGenerated] // 0x00509D3C-0x00509D4C
		private Transform _Follow_k__BackingField; // 0x168
		[FormerlySerializedAs] // 0x00509D4C-0x00509DAC
		[Tooltip] // 0x00509D4C-0x00509DAC
		public BlendHint m_BlendHint; // 0x170
	
		// Properties
		public override CameraState State { get; } // 0x009AE258-0x009AE268 
		public override Transform LookAt { get; set; } // 0x009AE268-0x009AE270 0x009AE270-0x009AE278
		public override Transform Follow { [CompilerGenerated] /* 0x0050EBE8-0x0050EBF8 */ get; [CompilerGenerated] /* 0x0050EBF8-0x0050EC08 */ set; } // 0x009AE278-0x009AE280 0x009AE280-0x009AE288
	
		// Constructors
		public CinemachineExternalCamera(); // 0x009AE6DC-0x009AE76C
	
		// Methods
		public override void InternalUpdateCameraState(Vector3 worldUp, float deltaTime); // 0x009AE288-0x009AE6DC
	}

	[AddComponentMenu] // 0x00508354-0x005083C4
	[DocumentationSorting] // 0x00508354-0x005083C4
	[ExecuteAlways] // 0x00508354-0x005083C4
	[SaveDuringPlay] // 0x00508354-0x005083C4
	public class CinemachineFollowZoom : CinemachineExtension // TypeDefIndex: 2891
	{
		// Fields
		[Tooltip] // 0x00509DAC-0x00509DE4
		public float m_Width; // 0x28
		[Range] // 0x00509DE4-0x00509E38
		[Tooltip] // 0x00509DE4-0x00509E38
		public float m_Damping; // 0x2C
		[Range] // 0x00509E38-0x00509E90
		[Tooltip] // 0x00509E38-0x00509E90
		public float m_MinFOV; // 0x30
		[Range] // 0x00509E90-0x00509EE8
		[Tooltip] // 0x00509E90-0x00509EE8
		public float m_MaxFOV; // 0x34
	
		// Nested types
		private class VcamExtraState // TypeDefIndex: 2892
		{
			// Fields
			public float m_previousFrameZoom; // 0x10
	
			// Constructors
			public VcamExtraState(); // 0x009AEDFC-0x009AEE04
		}
	
		// Constructors
		public CinemachineFollowZoom(); // 0x009AEDE8-0x009AEDFC
	
		// Methods
		private void OnValidate(); // 0x009AEA44-0x009AEB04
		protected override void PostPipelineStageCallback(CinemachineVirtualCameraBase vcam, CinemachineCore.Stage stage, ref CameraState state, float deltaTime); // 0x009AEB04-0x009AEDE8
	}

	[AddComponentMenu] // 0x005083C4-0x00508434
	[DisallowMultipleComponent] // 0x005083C4-0x00508434
	[DocumentationSorting] // 0x005083C4-0x00508434
	[ExecuteAlways] // 0x005083C4-0x00508434
	public class CinemachineFreeLook : CinemachineVirtualCameraBase // TypeDefIndex: 2893
	{
		// Fields
		[NoSaveDuringPlay] // 0x00509EE8-0x00509F34
		[Tooltip] // 0x00509EE8-0x00509F34
		public Transform m_LookAt; // 0x78
		[NoSaveDuringPlay] // 0x00509F34-0x00509F80
		[Tooltip] // 0x00509F34-0x00509F80
		public Transform m_Follow; // 0x80
		[FormerlySerializedAs] // 0x00509F80-0x00509FE0
		[Tooltip] // 0x00509F80-0x00509FE0
		public bool m_CommonLens; // 0x88
		[FormerlySerializedAs] // 0x00509FE0-0x0050A050
		[LensSettingsProperty] // 0x00509FE0-0x0050A050
		[Tooltip] // 0x00509FE0-0x0050A050
		public LensSettings m_Lens; // 0x8C
		public TransitionParams m_Transitions; // 0xB8
		[FormerlySerializedAs] // 0x0050A050-0x0050A0D0
		[FormerlySerializedAs] // 0x0050A050-0x0050A0D0
		[HideInInspector] // 0x0050A050-0x0050A0D0
		[SerializeField] // 0x0050A050-0x0050A0D0
		private BlendHint m_LegacyBlendHint; // 0xC8
		[AxisStateProperty] // 0x0050A0D0-0x0050A140
		[Header] // 0x0050A0D0-0x0050A140
		[Tooltip] // 0x0050A0D0-0x0050A140
		public AxisState m_YAxis; // 0xD0
		[Tooltip] // 0x0050A140-0x0050A178
		public AxisState.Recentering m_YAxisRecentering; // 0x120
		[AxisStateProperty] // 0x0050A178-0x0050A1C4
		[Tooltip] // 0x0050A178-0x0050A1C4
		public AxisState m_XAxis; // 0x140
		[OrbitalTransposerHeadingProperty] // 0x0050A1C4-0x0050A210
		[Tooltip] // 0x0050A1C4-0x0050A210
		public CinemachineOrbitalTransposer.Heading m_Heading; // 0x190
		[Tooltip] // 0x0050A210-0x0050A248
		public AxisState.Recentering m_RecenterToTargetHeading; // 0x19C
		[Header] // 0x0050A248-0x0050A2A8
		[Tooltip] // 0x0050A248-0x0050A2A8
		public CinemachineTransposer.BindingMode m_BindingMode; // 0x1B8
		[FormerlySerializedAs] // 0x0050A2A8-0x0050A320
		[Range] // 0x0050A2A8-0x0050A320
		[Tooltip] // 0x0050A2A8-0x0050A320
		public float m_SplineCurvature; // 0x1BC
		[Tooltip] // 0x0050A320-0x0050A358
		public Orbit[] m_Orbits; // 0x1C0
		[FormerlySerializedAs] // 0x0050A358-0x0050A3B4
		[HideInInspector] // 0x0050A358-0x0050A3B4
		[SerializeField] // 0x0050A358-0x0050A3B4
		private float m_LegacyHeadingBias; // 0x1C8
		private bool mUseLegacyRigDefinitions; // 0x1CC
		private bool mIsDestroyed; // 0x1CD
		private CameraState m_State; // 0x1D0
		[HideInInspector] // 0x0050A3B4-0x0050A3FC
		[NoSaveDuringPlay] // 0x0050A3B4-0x0050A3FC
		[SerializeField] // 0x0050A3B4-0x0050A3FC
		private CinemachineVirtualCamera[] m_Rigs; // 0x2B0
		private CinemachineOrbitalTransposer[] mOrbitals; // 0x2B8
		private CinemachineBlend mBlendA; // 0x2C0
		private CinemachineBlend mBlendB; // 0x2C8
		public static CreateRigDelegate CreateRigOverride; // 0x00
		public static DestroyRigDelegate DestroyRigOverride; // 0x08
		private Orbit[] m_CachedOrbits; // 0x2D0
		private float m_CachedTension; // 0x2D8
		private Vector4[] m_CachedKnots; // 0x2E0
		private Vector4[] m_CachedCtrl1; // 0x2E8
		private Vector4[] m_CachedCtrl2; // 0x2F0
	
		// Properties
		public static string[] RigNames { get; } // 0x009B18D4-0x009B19E4 
		public override CameraState State { get; } // 0x009B2088-0x009B2098 
		public override Transform LookAt { get; set; } // 0x009B2098-0x009B20A4 0x009B20A4-0x009B20AC
		public override Transform Follow { get; set; } // 0x009B20AC-0x009B20B8 0x009B20B8-0x009B20C0
	
		// Nested types
		[Serializable]
		public struct Orbit // TypeDefIndex: 2894
		{
			// Fields
			public float m_Height; // 0x00
			public float m_Radius; // 0x04
	
			// Constructors
			public Orbit(float h, float r); // 0x00584B40-0x00584CA0
		}
	
		public delegate CinemachineVirtualCamera CreateRigDelegate(CinemachineFreeLook vcam, string name, CinemachineVirtualCamera copyFrom); // TypeDefIndex: 2895; 0x0093C8C0-0x0093CCD0
	
		public delegate void DestroyRigDelegate(GameObject rig); // TypeDefIndex: 2896; 0x0093CD1C-0x0093D0D0
	
		// Constructors
		public CinemachineFreeLook(); // 0x009B46F0-0x009B4A00
	
		// Methods
		protected override void OnValidate(); // 0x009B1218-0x009B12CC
		public CinemachineVirtualCamera GetRig(int i); // 0x009B12D4-0x009B133C
		protected override void OnEnable(); // 0x009B19E4-0x009B1A10
		protected override void OnDestroy(); // 0x009B1A10-0x009B1B68
		private void OnTransformChildrenChanged(); // 0x009B1B68-0x009B1B70
		private void Reset(); // 0x009B1B70-0x009B1B74
		public override bool IsLiveChild(ICinemachineCamera vcam); // 0x009B20C0-0x009B2134
		public override void OnTargetObjectWarped(Transform target, Vector3 positionDelta); // 0x009B2160-0x009B2230
		public override void InternalUpdateCameraState(Vector3 worldUp, float deltaTime); // 0x009B2230-0x009B25E0
		public override void OnTransitionFromCamera(ICinemachineCamera fromCam, Vector3 worldUp, float deltaTime); // 0x009B2D24-0x009B3064
		private float GetYAxisClosestValue(Vector3 cameraPos, Vector3 up); // 0x009B3064-0x009B34E4
		private void InvalidateRigCache(); // 0x009B12CC-0x009B12D4
		private void DestroyRigs(); // 0x009B1B74-0x009B2088
		private CinemachineVirtualCamera[] CreateRigs(CinemachineVirtualCamera[] copyFrom); // 0x009B3708-0x009B3B3C
		private void UpdateRigCache(); // 0x009B133C-0x009B18D4
		private int LocateExistingRigs(string[] rigNames, bool forceOrbital); // 0x009B3B3C-0x009B434C
		private void PushSettingsToRigs(); // 0x009B275C-0x009B2D24
		private float GetYAxisValue(); // 0x009B2134-0x009B2160
		private CameraState CalculateNewState(Vector3 worldUp, float deltaTime); // 0x009B25E0-0x009B275C
		public Vector3 GetLocalPositionForCameraFromInput(float t); // 0x009B34E4-0x009B3708
		private void UpdateCachedSpline(); // 0x009B434C-0x009B46F0
		[CompilerGenerated] // 0x0050EC08-0x0050EC18
		private float _LocateExistingRigs_b__52_0(CinemachineOrbitalTransposer orbital, float deltaTime, Vector3 up); // 0x009B4A00-0x009B5A28
	}

	[AddComponentMenu] // 0x00508434-0x005084A4
	[DisallowMultipleComponent] // 0x00508434-0x005084A4
	[DocumentationSorting] // 0x00508434-0x005084A4
	[ExecuteAlways] // 0x00508434-0x005084A4
	public class CinemachineMixingCamera : CinemachineVirtualCameraBase // TypeDefIndex: 2897
	{
		// Fields
		public const int MaxCameras = 8; // Metadata: 0x001F4E2E
		[Tooltip] // 0x0050A3FC-0x0050A434
		public float m_Weight0; // 0x74
		[Tooltip] // 0x0050A434-0x0050A46C
		public float m_Weight1; // 0x78
		[Tooltip] // 0x0050A46C-0x0050A4A4
		public float m_Weight2; // 0x7C
		[Tooltip] // 0x0050A4A4-0x0050A4DC
		public float m_Weight3; // 0x80
		[Tooltip] // 0x0050A4DC-0x0050A514
		public float m_Weight4; // 0x84
		[Tooltip] // 0x0050A514-0x0050A54C
		public float m_Weight5; // 0x88
		[Tooltip] // 0x0050A54C-0x0050A584
		public float m_Weight6; // 0x8C
		[Tooltip] // 0x0050A584-0x0050A5BC
		public float m_Weight7; // 0x90
		private CameraState m_State; // 0x98
		[CompilerGenerated] // 0x0050A5BC-0x0050A5CC
		private ICinemachineCamera _LiveChild_k__BackingField; // 0x178
		[CompilerGenerated] // 0x0050A5CC-0x0050A5DC
		private Transform _LookAt_k__BackingField; // 0x180
		[CompilerGenerated] // 0x0050A5DC-0x0050A5EC
		private Transform _Follow_k__BackingField; // 0x188
		private CinemachineVirtualCameraBase[] m_ChildCameras; // 0x190
		private Dictionary<CinemachineVirtualCameraBase, int> m_indexMap; // 0x198
	
		// Properties
		private ICinemachineCamera LiveChild { [CompilerGenerated] /* 0x0050EC28-0x0050EC38 */ get; [CompilerGenerated] /* 0x0050EC18-0x0050EC28 */ set; } // 0x00941074-0x0094107C 0x0094106C-0x00941074
		public override CameraState State { get; } // 0x0094107C-0x0094108C 
		public override Transform LookAt { [CompilerGenerated] /* 0x0050EC38-0x0050EC48 */ get; [CompilerGenerated] /* 0x0050EC48-0x0050EC58 */ set; } // 0x0094108C-0x00941094 0x00941094-0x0094109C
		public override Transform Follow { [CompilerGenerated] /* 0x0050EC58-0x0050EC68 */ get; [CompilerGenerated] /* 0x0050EC68-0x0050EC78 */ set; } // 0x0094109C-0x009410A4 0x009410A4-0x009410AC
		public CinemachineVirtualCameraBase[] ChildCameras { get; } // 0x009418A4-0x009418C8 
	
		// Constructors
		public CinemachineMixingCamera(); // 0x00941E2C-0x00941ECC
	
		// Methods
		public float GetWeight(int index); // 0x00940BA0-0x00940CB8
		public void SetWeight(int index, float w); // 0x00940CB8-0x00940DE0
		public float GetWeight(CinemachineVirtualCameraBase vcam); // 0x00940DE0-0x00940F18
		public void SetWeight(CinemachineVirtualCameraBase vcam, float w); // 0x00940F20-0x0094106C
		public override void OnTargetObjectWarped(Transform target, Vector3 positionDelta); // 0x009410AC-0x00941180
		protected override void OnEnable(); // 0x0094143C-0x00941464
		public void OnTransformChildrenChanged(); // 0x00941690-0x0094169C
		protected override void OnValidate(); // 0x0094169C-0x00941750
		public override bool IsLiveChild(ICinemachineCamera vcam); // 0x009417D0-0x009418A4
		protected void InvalidateListOfChildren(); // 0x00941684-0x00941690
		protected void ValidateListOfChildren(); // 0x00941180-0x00941368
		public override void OnTransitionFromCamera(ICinemachineCamera fromCam, Vector3 worldUp, float deltaTime); // 0x009418C8-0x009419F0
		public override void InternalUpdateCameraState(Vector3 worldUp, float deltaTime); // 0x00941A2C-0x00941C60
	}

	[AddComponentMenu] // 0x005084A4-0x00508504
	[DocumentationSorting] // 0x005084A4-0x00508504
	[SaveDuringPlay] // 0x005084A4-0x00508504
	public class CinemachinePath : CinemachinePathBase // TypeDefIndex: 2898
	{
		// Fields
		[Tooltip] // 0x0050A5EC-0x0050A624
		public bool m_Looped; // 0x48
		[Tooltip] // 0x0050A624-0x0050A65C
		public Waypoint[] m_Waypoints; // 0x50
	
		// Properties
		public override float MinPos { get; } // 0x0094576C-0x00945774 
		public override float MaxPos { get; } // 0x00945774-0x009457B8 
		public override bool Looped { get; } // 0x009457B8-0x009457C0 
		public override int DistanceCacheSampleStepsPerSegment { get; } // 0x009457C0-0x009457C8 
	
		// Nested types
		[Serializable]
		[DocumentationSorting] // 0x00508E3C-0x00508E50
		public struct Waypoint // TypeDefIndex: 2899
		{
			// Fields
			[Tooltip] // 0x0050DC28-0x0050DC60
			public Vector3 position; // 0x00
			[Tooltip] // 0x0050DC60-0x0050DC98
			public Vector3 tangent; // 0x0C
			[Tooltip] // 0x0050DC98-0x0050DCD0
			public float roll; // 0x18
		}
	
		// Constructors
		public CinemachinePath(); // 0x00946684-0x009466E0
	
		// Methods
		private float GetBoundingIndices(float pos, out int indexA, out int indexB); // 0x009457C8-0x00945944
		public override Vector3 EvaluatePosition(float pos); // 0x00945944-0x00945B6C
		public override Vector3 EvaluateTangent(float pos); // 0x00945D64-0x00946014
		public override Quaternion EvaluateOrientation(float pos); // 0x00946380-0x00946674
		private void OnValidate(); // 0x00946674-0x00946684
	}

	[AddComponentMenu] // 0x00508504-0x0050853C
	public sealed class CinemachinePipeline : MonoBehaviour // TypeDefIndex: 2900
	{
		// Constructors
		public CinemachinePipeline(); // 0x009475D0-0x009475D8
	}

	[AddComponentMenu] // 0x0050853C-0x0050859C
	[DocumentationSorting] // 0x0050853C-0x0050859C
	[SaveDuringPlay] // 0x0050853C-0x0050859C
	public class CinemachineSmoothPath : CinemachinePathBase // TypeDefIndex: 2901
	{
		// Fields
		[Tooltip] // 0x0050A65C-0x0050A694
		public bool m_Looped; // 0x48
		[Tooltip] // 0x0050A694-0x0050A6CC
		public Waypoint[] m_Waypoints; // 0x50
		private Waypoint[] m_ControlPoints1; // 0x58
		private Waypoint[] m_ControlPoints2; // 0x60
		private bool m_IsLoopedCache; // 0x68
	
		// Properties
		public override float MinPos { get; } // 0x009476D0-0x009476D8 
		public override float MaxPos { get; } // 0x009476D8-0x0094771C 
		public override bool Looped { get; } // 0x0094771C-0x00947724 
		public override int DistanceCacheSampleStepsPerSegment { get; } // 0x00947724-0x0094772C 
	
		// Nested types
		[Serializable]
		[DocumentationSorting] // 0x00508E50-0x00508E64
		public struct Waypoint // TypeDefIndex: 2902
		{
			// Fields
			[Tooltip] // 0x0050DCD0-0x0050DD08
			public Vector3 position; // 0x00
			[Tooltip] // 0x0050DD08-0x0050DD40
			public float roll; // 0x0C
	
			// Properties
			internal Vector4 AsVector4 { get; } // 0x00584D20-0x00584D6C 
	
			// Methods
			internal static Waypoint FromVector4(Vector4 v); // 0x009485C8-0x00948678
		}
	
		// Constructors
		public CinemachineSmoothPath(); // 0x00948FBC-0x00949018
	
		// Methods
		private void OnValidate(); // 0x0094772C-0x0094773C
		public override void InvalidateDistanceCache(); // 0x0094773C-0x0094774C
		private void UpdateControlPoints(); // 0x0094774C-0x00947A18
		private float GetBoundingIndices(float pos, out int indexA, out int indexB); // 0x00948678-0x009487B0
		public override Vector3 EvaluatePosition(float pos); // 0x009487B0-0x00948978
		public override Vector3 EvaluateTangent(float pos); // 0x00948978-0x00948BE4
		public override Quaternion EvaluateOrientation(float pos); // 0x00948BE4-0x00948EDC
	}

	[AddComponentMenu] // 0x0050859C-0x0050860C
	[DisallowMultipleComponent] // 0x0050859C-0x0050860C
	[DocumentationSorting] // 0x0050859C-0x0050860C
	[ExecuteAlways] // 0x0050859C-0x0050860C
	public class CinemachineStateDrivenCamera : CinemachineVirtualCameraBase // TypeDefIndex: 2903
	{
		// Fields
		[NoSaveDuringPlay] // 0x0050A6CC-0x0050A718
		[Tooltip] // 0x0050A6CC-0x0050A718
		public Transform m_LookAt; // 0x78
		[NoSaveDuringPlay] // 0x0050A718-0x0050A764
		[Tooltip] // 0x0050A718-0x0050A764
		public Transform m_Follow; // 0x80
		[NoSaveDuringPlay] // 0x0050A764-0x0050A7C0
		[Space] // 0x0050A764-0x0050A7C0
		[Tooltip] // 0x0050A764-0x0050A7C0
		public Animator m_AnimatedTarget; // 0x88
		[NoSaveDuringPlay] // 0x0050A7C0-0x0050A80C
		[Tooltip] // 0x0050A7C0-0x0050A80C
		public int m_LayerIndex; // 0x90
		[Tooltip] // 0x0050A80C-0x0050A844
		public bool m_ShowDebugText; // 0x94
		[HideInInspector] // 0x0050A844-0x0050A88C
		[NoSaveDuringPlay] // 0x0050A844-0x0050A88C
		[SerializeField] // 0x0050A844-0x0050A88C
		internal CinemachineVirtualCameraBase[] m_ChildCameras; // 0x98
		[Tooltip] // 0x0050A88C-0x0050A8C4
		public Instruction[] m_Instructions; // 0xA0
		[CinemachineBlendDefinitionProperty] // 0x0050A8C4-0x0050A910
		[Tooltip] // 0x0050A8C4-0x0050A910
		public CinemachineBlendDefinition m_DefaultBlend; // 0xA8
		[Tooltip] // 0x0050A910-0x0050A948
		public CinemachineBlenderSettings m_CustomBlends; // 0xB8
		[HideInInspector] // 0x0050A948-0x0050A980
		[SerializeField] // 0x0050A948-0x0050A980
		internal ParentHash[] m_ParentHash; // 0xC0
		[CompilerGenerated] // 0x0050A980-0x0050A990
		private ICinemachineCamera _LiveChild_k__BackingField; // 0xC8
		[CompilerGenerated] // 0x0050A990-0x0050A9A0
		private ICinemachineCamera _TransitioningFrom_k__BackingField; // 0xD0
		private CameraState m_State; // 0xD8
		private Dictionary<AnimationClip, List<HashPair>> mHashCache; // 0x1B8
		private float mActivationTime; // 0x1C0
		private Instruction mActiveInstruction; // 0x1C8
		private float mPendingActivationTime; // 0x1E0
		private Instruction mPendingInstruction; // 0x1E8
		private CinemachineBlend mActiveBlend; // 0x200
		private Dictionary<int, int> mInstructionDictionary; // 0x208
		private Dictionary<int, int> mStateParentLookup; // 0x210
		private List<AnimatorClipInfo> m_clipInfoList; // 0x218
	
		// Properties
		public override string Description { get; } // 0x00949018-0x00949160 
		public ICinemachineCamera LiveChild { [CompilerGenerated] /* 0x0050EC88-0x0050EC98 */ get; [CompilerGenerated] /* 0x0050EC78-0x0050EC88 */ set; } // 0x009492D4-0x009492DC 0x009492CC-0x009492D4
		public override CameraState State { get; } // 0x0094931C-0x0094932C 
		public override Transform LookAt { get; set; } // 0x0094932C-0x00949334 0x00949450-0x00949458
		public override Transform Follow { get; set; } // 0x00949458-0x00949460 0x0094957C-0x00949584
		private ICinemachineCamera TransitioningFrom { [CompilerGenerated] /* 0x0050EC98-0x0050ECA8 */ get; [CompilerGenerated] /* 0x0050ECA8-0x0050ECB8 */ set; } // 0x00949884-0x0094988C 0x0094988C-0x00949894
		public CinemachineVirtualCameraBase[] ChildCameras { get; } // 0x0094AE3C-0x0094AE60 
		public bool IsBlending { get; } // 0x0094AE60-0x0094AE70 
	
		// Nested types
		[Serializable]
		public struct Instruction // TypeDefIndex: 2904
		{
			// Fields
			[Tooltip] // 0x0050DD40-0x0050DD78
			public int m_FullHash; // 0x00
			[Tooltip] // 0x0050DD78-0x0050DDB0
			public CinemachineVirtualCameraBase m_VirtualCamera; // 0x08
			[Tooltip] // 0x0050DDB0-0x0050DDE8
			public float m_ActivateAfter; // 0x10
			[Tooltip] // 0x0050DDE8-0x0050DE20
			public float m_MinDuration; // 0x14
		}
	
		[Serializable]
		[DocumentationSorting] // 0x00508E64-0x00508E78
		internal struct ParentHash // TypeDefIndex: 2905
		{
			// Fields
			public int m_Hash; // 0x00
			public int m_ParentHash; // 0x04
	
			// Constructors
			public ParentHash(int h, int p); // 0x00584D6C-0x00584E0C
		}
	
		private struct HashPair // TypeDefIndex: 2906
		{
			// Fields
			public int parentHash; // 0x00
			public int hash; // 0x04
		}
	
		// Constructors
		public CinemachineStateDrivenCamera(); // 0x0094B4C8-0x0094B5AC
	
		// Methods
		public override bool IsLiveChild(ICinemachineCamera vcam); // 0x009492DC-0x0094931C
		public override void OnTargetObjectWarped(Transform target, Vector3 positionDelta); // 0x00949584-0x00949658
		public override void OnTransitionFromCamera(ICinemachineCamera fromCam, Vector3 worldUp, float deltaTime); // 0x0094981C-0x00949884
		public override void InternalUpdateCameraState(Vector3 worldUp, float deltaTime); // 0x00949894-0x00949CC8
		protected override void OnEnable(); // 0x0094A6F4-0x0094A824
		protected override void OnDisable(); // 0x0094A840-0x0094A904
		public void OnTransformChildrenChanged(); // 0x0094A984-0x0094A990
		private void OnGuiHandler(); // 0x0094A990-0x0094AB1C
		public static int CreateFakeHash(int parentHash, AnimationClip clip); // 0x0094AE70-0x0094AF08
		private int LookupFakeHash(int parentHash, AnimationClip clip); // 0x0094AF08-0x0094B0C4
		private void InvalidateListOfChildren(); // 0x0094A824-0x0094A830
		private void UpdateListOfChildren(); // 0x00949658-0x0094981C
		internal void ValidateInstructions(); // 0x0094B0C4-0x0094B330
		private CinemachineVirtualCameraBase ChooseCurrentCamera(float deltaTime); // 0x00949E00-0x0094A2FC
		private int GetClipHash(int hash, List<AnimatorClipInfo> clips); // 0x0094B330-0x0094B4C8
		private CinemachineBlendDefinition LookupBlend(ICinemachineCamera fromKey, ICinemachineCamera toKey); // 0x0094A3A4-0x0094A578
	}

	[AddComponentMenu] // 0x0050860C-0x0050867C
	[DocumentationSorting] // 0x0050860C-0x0050867C
	[ExecuteAlways] // 0x0050860C-0x0050867C
	[SaveDuringPlay] // 0x0050860C-0x0050867C
	public class CinemachineStoryboard : CinemachineExtension // TypeDefIndex: 2907
	{
		// Fields
		[Tooltip] // 0x0050A9A0-0x0050A9D8
		public bool m_ShowImage; // 0x28
		[Tooltip] // 0x0050A9D8-0x0050AA10
		public Texture m_Image; // 0x30
		[Tooltip] // 0x0050AA10-0x0050AA48
		public FillStrategy m_Aspect; // 0x38
		[Range] // 0x0050AA48-0x0050AA9C
		[Tooltip] // 0x0050AA48-0x0050AA9C
		public float m_Alpha; // 0x3C
		[Tooltip] // 0x0050AA9C-0x0050AAD4
		public Vector2 m_Center; // 0x40
		[Tooltip] // 0x0050AAD4-0x0050AB0C
		public Vector3 m_Rotation; // 0x48
		[Tooltip] // 0x0050AB0C-0x0050AB44
		public Vector2 m_Scale; // 0x54
		[Tooltip] // 0x0050AB44-0x0050AB7C
		public bool m_SyncScale; // 0x5C
		[Tooltip] // 0x0050AB7C-0x0050ABB4
		public bool m_MuteCamera; // 0x5D
		[Range] // 0x0050ABB4-0x0050AC08
		[Tooltip] // 0x0050ABB4-0x0050AC08
		public float m_SplitView; // 0x60
		private List<CanvasInfo> mCanvasInfo; // 0x68
	
		// Properties
		private string CanvasName { get; } // 0x0094BA08-0x0094BA9C 
	
		// Nested types
		public enum FillStrategy // TypeDefIndex: 2908
		{
			BestFit = 0,
			CropImageToFit = 1,
			StretchToFit = 2
		}
	
		private class CanvasInfo // TypeDefIndex: 2909
		{
			// Fields
			public GameObject mCanvas; // 0x10
			public CinemachineBrain mCanvasParent; // 0x18
			public RectTransform mViewport; // 0x20
			public RawImage mRawImage; // 0x28
	
			// Constructors
			public CanvasInfo(); // 0x0094BFD8-0x0094BFE0
		}
	
		// Constructors
		public CinemachineStoryboard(); // 0x0094CD90-0x0094CE88
	
		// Methods
		protected override void PostPipelineStageCallback(CinemachineVirtualCameraBase vcam, CinemachineCore.Stage stage, ref CameraState state, float wipeAmountTime); // 0x0094B5AC-0x0094B6A8
		protected override void ConnectToVcam(bool connect); // 0x0094B6A8-0x0094B810
		private void CameraUpdatedCallback(CinemachineBrain brain); // 0x0094BA9C-0x0094BC6C
		private CanvasInfo LocateMyCanvas(CinemachineBrain parent, bool createIfNotFound); // 0x0094BC6C-0x0094BFD8
		private void CreateCanvas(CanvasInfo ci); // 0x0094BFE0-0x0094C370
		private void DestroyCanvas(); // 0x0094B810-0x0094BA08
		private void PlaceImage(CanvasInfo ci, float alpha); // 0x0094C410-0x0094CA8C
		private static void StaticBlendingHandler(CinemachineBrain brain); // 0x0094CA8C-0x0094CC80
		[RuntimeInitializeOnLoadMethod] // 0x0050ECB8-0x0050ECC8
		private static void InitializeModule(); // 0x0094CC80-0x0094CD90
	}

	[AddComponentMenu] // 0x0050867C-0x005086EC
	[DocumentationSorting] // 0x0050867C-0x005086EC
	[ExecuteAlways] // 0x0050867C-0x005086EC
	[SaveDuringPlay] // 0x0050867C-0x005086EC
	public class CinemachineTargetGroup : MonoBehaviour // TypeDefIndex: 2910
	{
		// Fields
		[Tooltip] // 0x0050AC08-0x0050AC40
		public PositionMode m_PositionMode; // 0x18
		[Tooltip] // 0x0050AC40-0x0050AC78
		public RotationMode m_RotationMode; // 0x1C
		[Tooltip] // 0x0050AC78-0x0050ACB0
		public UpdateMethod m_UpdateMethod; // 0x20
		[NoSaveDuringPlay] // 0x0050ACB0-0x0050ACFC
		[Tooltip] // 0x0050ACB0-0x0050ACFC
		public Target[] m_Targets; // 0x28
		[CompilerGenerated] // 0x0050ACFC-0x0050AD0C
		private Bounds _BoundingBox_k__BackingField; // 0x30
		private float mAverageWeight; // 0x48
		private Vector3 mAveragePos; // 0x4C
	
		// Properties
		public Bounds BoundingBox { [CompilerGenerated] /* 0x0050ECC8-0x0050ECD8 */ get; [CompilerGenerated] /* 0x0050ECD8-0x0050ECE8 */ private set; } // 0x0094CE88-0x0094CE9C 0x0094CE9C-0x0094CEB0
		public BoundingSphere Sphere { get; } // 0x0093DE74-0x0093DFC4 
		public bool IsEmpty { get; } // 0x0094CEB0-0x0094CFC8 
	
		// Nested types
		[Serializable]
		[DocumentationSorting] // 0x00508E78-0x00508E8C
		public struct Target // TypeDefIndex: 2911
		{
			// Fields
			[Tooltip] // 0x0050DE20-0x0050DE58
			public Transform target; // 0x00
			[Tooltip] // 0x0050DE58-0x0050DE90
			public float weight; // 0x08
			[Tooltip] // 0x0050DE90-0x0050DEC8
			public float radius; // 0x0C
		}
	
		[DocumentationSorting] // 0x00508E8C-0x00508EA0
		public enum PositionMode // TypeDefIndex: 2912
		{
			GroupCenter = 0,
			GroupAverage = 1
		}
	
		[DocumentationSorting] // 0x00508EA0-0x00508EB4
		public enum RotationMode // TypeDefIndex: 2913
		{
			Manual = 0,
			GroupAverage = 1
		}
	
		public enum UpdateMethod // TypeDefIndex: 2914
		{
			Update = 0,
			FixedUpdate = 1,
			LateUpdate = 2
		}
	
		// Constructors
		public CinemachineTargetGroup(); // 0x0094DDE8-0x0094DE50
	
		// Methods
		public void AddMember(Transform t, float weight, float radius); // 0x0094CFC8-0x0094D0F4
		public void RemoveMember(Transform t); // 0x0094D0F4-0x0094D1E4
		public int FindMember(Transform t); // 0x0094D1E4-0x0094D2CC
		public BoundingSphere GetWeightedBoundsForMember(int index); // 0x0094D2CC-0x0094D338
		public Bounds GetViewSpaceBoundingBox(Matrix4x4 observer); // 0x0093DFC4-0x0093E1D0
		private static BoundingSphere WeightedMemberBounds(Target t, Vector3 avgPos, float avgWeight); // 0x0094D338-0x0094D4E4
		private void DoUpdate(); // 0x0094D4E4-0x0094D5FC
		private Vector3 CalculateAveragePosition(out float averageWeight); // 0x0094D5FC-0x0094D894
		private Quaternion CalculateAverageOrientation(); // 0x0094DAD8-0x0094DC60
		private Bounds CalculateBoundingBox(Vector3 avgPos, float averageWeight); // 0x0094D894-0x0094DAD8
		private void OnValidate(); // 0x0094DC60-0x0094DD80
		private void FixedUpdate(); // 0x0094DD80-0x0094DD94
		private void Update(); // 0x0094DD94-0x0094DDD4
		private void LateUpdate(); // 0x0094DDD4-0x0094DDE8
		public void GetViewSpaceAngularBounds(Matrix4x4 observer, out Vector2 minAngles, out Vector2 maxAngles, out Vector2 zRange); // 0x0093E7A0-0x0093EC6C
	}

	[AddComponentMenu] // 0x005086EC-0x0050875C
	[DisallowMultipleComponent] // 0x005086EC-0x0050875C
	[DocumentationSorting] // 0x005086EC-0x0050875C
	[ExecuteAlways] // 0x005086EC-0x0050875C
	public class CinemachineVirtualCamera : CinemachineVirtualCameraBase // TypeDefIndex: 2915
	{
		// Fields
		[NoSaveDuringPlay] // 0x0050AD0C-0x0050AD58
		[Tooltip] // 0x0050AD0C-0x0050AD58
		public Transform m_LookAt; // 0x78
		[NoSaveDuringPlay] // 0x0050AD58-0x0050ADA4
		[Tooltip] // 0x0050AD58-0x0050ADA4
		public Transform m_Follow; // 0x80
		[FormerlySerializedAs] // 0x0050ADA4-0x0050AE14
		[LensSettingsProperty] // 0x0050ADA4-0x0050AE14
		[Tooltip] // 0x0050ADA4-0x0050AE14
		public LensSettings m_Lens; // 0x88
		public TransitionParams m_Transitions; // 0xB0
		[FormerlySerializedAs] // 0x0050AE14-0x0050AE94
		[FormerlySerializedAs] // 0x0050AE14-0x0050AE94
		[HideInInspector] // 0x0050AE14-0x0050AE94
		[SerializeField] // 0x0050AE14-0x0050AE94
		private BlendHint m_LegacyBlendHint; // 0xC0
		public const string PipelineName = "cm"; // Metadata: 0x001F4E5A
		public static CreatePipelineDelegate CreatePipelineOverride; // 0x00
		public static DestroyPipelineDelegate DestroyPipelineOverride; // 0x08
		[CompilerGenerated] // 0x0050AE94-0x0050AEA4
		private bool _UserIsDragging_k__BackingField; // 0xC4
		private CameraState m_State; // 0xC8
		private CinemachineComponentBase[] m_ComponentPipeline; // 0x1A8
		[HideInInspector] // 0x0050AEA4-0x0050AEDC
		[SerializeField] // 0x0050AEA4-0x0050AEDC
		private Transform m_ComponentOwner; // 0x1B0
		private Transform mCachedLookAtTarget; // 0x1B8
		private CinemachineVirtualCameraBase mCachedLookAtTargetVcam; // 0x1C0
	
		// Properties
		public override CameraState State { get; } // 0x0094FE7C-0x0094FE8C 
		public override Transform LookAt { get; set; } // 0x0094FE8C-0x0094FE94 0x0094FE94-0x0094FE9C
		public override Transform Follow { get; set; } // 0x0094FE9C-0x0094FEA4 0x0094FEA4-0x0094FEAC
		public bool UserIsDragging { [CompilerGenerated] /* 0x0050ECE8-0x0050ECF8 */ get; [CompilerGenerated] /* 0x0050ECF8-0x0050ED08 */ set; } // 0x00952294-0x0095229C 0x0095229C-0x009522A8
	
		// Nested types
		public delegate Transform CreatePipelineDelegate(CinemachineVirtualCamera vcam, string name, CinemachineComponentBase[] copyFrom); // TypeDefIndex: 2916; 0x00951854-0x00951C64
	
		public delegate void DestroyPipelineDelegate(GameObject pipeline); // TypeDefIndex: 2917; 0x0095132C-0x009516E0
	
		[Serializable]
		[CompilerGenerated] // 0x00508EB4-0x00508EC4
		private sealed class __c // TypeDefIndex: 2918
		{
			// Fields
			public static readonly __c __9; // 0x00
			public static Comparison<CinemachineComponentBase> __9__40_0; // 0x08
	
			// Constructors
			static __c(); // 0x00952908-0x0095296C
			public __c(); // 0x0095296C-0x00952974
	
			// Methods
			internal int _UpdateComponentPipeline_b__40_0(CinemachineComponentBase c1, CinemachineComponentBase c2); // 0x00952974-0x009529CC
		}
	
		// Constructors
		public CinemachineVirtualCamera(); // 0x00952838-0x00952908
	
		// Methods
		public override void InternalUpdateCameraState(Vector3 worldUp, float deltaTime); // 0x0094FEAC-0x009500B0
		protected override void OnEnable(); // 0x00950484-0x00950690
		protected override void OnDestroy(); // 0x009509F0-0x00950D00
		protected override void OnValidate(); // 0x00950D78-0x00950E74
		private void OnTransformChildrenChanged(); // 0x00950E74-0x00950E7C
		private void Reset(); // 0x00950E7C-0x00950E80
		private void DestroyPipeline(); // 0x00950E80-0x0095132C
		private Transform CreatePipeline(CinemachineVirtualCamera copyFrom); // 0x009516E0-0x00951830
		public void InvalidateComponentPipeline(); // 0x009508CC-0x009508D4
		public Transform GetComponentOwner(); // 0x00951C64-0x00951C88
		public CinemachineComponentBase[] GetComponentPipeline(); // 0x00951830-0x00951854
		public CinemachineComponentBase GetCinemachineComponent(CinemachineCore.Stage stage); // 0x00950950-0x009509F0
		public T GetCinemachineComponent<T>()
			where T : CinemachineComponentBase;
		public T AddCinemachineComponent<T>()
			where T : CinemachineComponentBase;
		public void DestroyCinemachineComponent<T>()
			where T : CinemachineComponentBase;
		private void UpdateComponentPipeline(); // 0x00951C88-0x00952294
		internal static void SetFlagsForHiddenChild(GameObject child); // 0x009522A8-0x00952384
		private CameraState CalculateNewState(Vector3 worldUp, float deltaTime); // 0x009500B0-0x0095045C
		private CinemachineCore.Stage AdvancePipelineStage(ref CameraState state, float deltaTime, CinemachineCore.Stage curStage, int maxStage, bool hasAim); // 0x00952384-0x00952420
		internal void SetStateRawPosition(Vector3 pos); // 0x00952420-0x00952430
		public override void OnTargetObjectWarped(Transform target, Vector3 positionDelta); // 0x00952430-0x0095261C
		public override void OnTransitionFromCamera(ICinemachineCamera fromCam, Vector3 worldUp, float deltaTime); // 0x0095261C-0x00952838
	}

	[AddComponentMenu] // 0x0050875C-0x005087BC
	[DocumentationSorting] // 0x0050875C-0x005087BC
	[SaveDuringPlay] // 0x0050875C-0x005087BC
	public class CinemachineBasicMultiChannelPerlin : CinemachineComponentBase // TypeDefIndex: 2919
	{
		// Fields
		[FormerlySerializedAs] // 0x0050AEDC-0x0050AF4C
		[NoiseSettingsProperty] // 0x0050AEDC-0x0050AF4C
		[Tooltip] // 0x0050AEDC-0x0050AF4C
		public NoiseSettings m_NoiseProfile; // 0x50
		[Tooltip] // 0x0050AF4C-0x0050AF84
		public float m_AmplitudeGain; // 0x58
		[Tooltip] // 0x0050AF84-0x0050AFBC
		public float m_FrequencyGain; // 0x5C
		private bool mInitialized; // 0x60
		private float mNoiseTime; // 0x64
		[HideInInspector] // 0x0050AFBC-0x0050AFF4
		[SerializeField] // 0x0050AFBC-0x0050AFF4
		private Vector3 mNoiseOffsets; // 0x68
	
		// Properties
		public override bool IsValid { get; } // 0x0099E00C-0x0099E09C 
		public override CinemachineCore.Stage Stage { get; } // 0x0099E09C-0x0099E0A4 
	
		// Constructors
		public CinemachineBasicMultiChannelPerlin(); // 0x0099E434-0x0099E4B4
	
		// Methods
		public override void MutateCameraState(ref CameraState curState, float deltaTime); // 0x0099E0A4-0x0099E2C0
		public void ReSeed(); // 0x0099E388-0x0099E434
		private void Initialize(); // 0x0099E2C0-0x0099E388
	}

	[AddComponentMenu] // 0x005087BC-0x0050881C
	[DocumentationSorting] // 0x005087BC-0x0050881C
	[SaveDuringPlay] // 0x005087BC-0x0050881C
	public class CinemachineComposer : CinemachineComponentBase // TypeDefIndex: 2920
	{
		// Fields
		[Tooltip] // 0x0050AFF4-0x0050B02C
		public Vector3 m_TrackedObjectOffset; // 0x50
		[Range] // 0x0050B02C-0x0050B090
		[Space] // 0x0050B02C-0x0050B090
		[Tooltip] // 0x0050B02C-0x0050B090
		public float m_LookaheadTime; // 0x5C
		[Range] // 0x0050B090-0x0050B0E4
		[Tooltip] // 0x0050B090-0x0050B0E4
		public float m_LookaheadSmoothing; // 0x60
		[Tooltip] // 0x0050B0E4-0x0050B11C
		public bool m_LookaheadIgnoreY; // 0x64
		[Range] // 0x0050B11C-0x0050B180
		[Space] // 0x0050B11C-0x0050B180
		[Tooltip] // 0x0050B11C-0x0050B180
		public float m_HorizontalDamping; // 0x68
		[Range] // 0x0050B180-0x0050B1D4
		[Tooltip] // 0x0050B180-0x0050B1D4
		public float m_VerticalDamping; // 0x6C
		[Range] // 0x0050B1D4-0x0050B238
		[Space] // 0x0050B1D4-0x0050B238
		[Tooltip] // 0x0050B1D4-0x0050B238
		public float m_ScreenX; // 0x70
		[Range] // 0x0050B238-0x0050B28C
		[Tooltip] // 0x0050B238-0x0050B28C
		public float m_ScreenY; // 0x74
		[Range] // 0x0050B28C-0x0050B2E0
		[Tooltip] // 0x0050B28C-0x0050B2E0
		public float m_DeadZoneWidth; // 0x78
		[Range] // 0x0050B2E0-0x0050B334
		[Tooltip] // 0x0050B2E0-0x0050B334
		public float m_DeadZoneHeight; // 0x7C
		[Range] // 0x0050B334-0x0050B388
		[Tooltip] // 0x0050B334-0x0050B388
		public float m_SoftZoneWidth; // 0x80
		[Range] // 0x0050B388-0x0050B3DC
		[Tooltip] // 0x0050B388-0x0050B3DC
		public float m_SoftZoneHeight; // 0x84
		[Range] // 0x0050B3DC-0x0050B430
		[Tooltip] // 0x0050B3DC-0x0050B430
		public float m_BiasX; // 0x88
		[Range] // 0x0050B430-0x0050B484
		[Tooltip] // 0x0050B430-0x0050B484
		public float m_BiasY; // 0x8C
		[Tooltip] // 0x0050B484-0x0050B4BC
		public bool m_CenterOnActivate; // 0x90
		[CompilerGenerated] // 0x0050B4BC-0x0050B4CC
		private Vector3 _TrackedPoint_k__BackingField; // 0x94
		private Vector3 m_CameraPosPrevFrame; // 0xA0
		private Vector3 m_LookAtPrevFrame; // 0xAC
		private Vector2 m_ScreenOffsetPrevFrame; // 0xB8
		private Quaternion m_CameraOrientationPrevFrame; // 0xC0
		private PositionPredictor m_Predictor; // 0xD0
		private FovCache mCache; // 0xD8
	
		// Properties
		public override bool IsValid { get; } // 0x009AA094-0x009AA130 
		public override CinemachineCore.Stage Stage { get; } // 0x009AA130-0x009AA138 
		public Vector3 TrackedPoint { [CompilerGenerated] /* 0x0050ED08-0x0050ED18 */ get; [CompilerGenerated] /* 0x0050ED18-0x0050ED28 */ private set; } // 0x009AA138-0x009AA144 0x009AA144-0x009AA150
		internal Rect SoftGuideRect { get; set; } // 0x009AAAEC-0x009AAB38 0x009AB1B0-0x009AB2DC
		internal Rect HardGuideRect { get; set; } // 0x009AAB38-0x009AAF60 0x009AB2DC-0x009AB500
	
		// Nested types
		private struct FovCache // TypeDefIndex: 2921
		{
			// Fields
			public Rect mFovSoftGuideRect; // 0x00
			public Rect mFovHardGuideRect; // 0x10
			public float mFovH; // 0x20
			public float mFov; // 0x24
			private float mOrthoSizeOverDistance; // 0x28
			private float mAspect; // 0x2C
			private Rect mSoftGuideRect; // 0x30
			private Rect mHardGuideRect; // 0x40
	
			// Methods
			public void UpdateCache(LensSettings lens, Rect softGuide, Rect hardGuide, float targetDistance); // 0x005876CC-0x00587710
			private Rect ScreenToFOV(Rect rScreen, float fov, float fovH, float aspect); // 0x00587710-0x00587844
		}
	
		// Constructors
		public CinemachineComposer(); // 0x009AB6EC-0x009ABC38
	
		// Methods
		protected virtual Vector3 GetLookAtPointAndSetTrackedPoint(Vector3 lookAt); // 0x009AA150-0x009AA34C
		public override void OnTargetObjectWarped(Transform target, Vector3 positionDelta); // 0x009AA34C-0x009AA4B8
		public override void PrePipelineMutateCameraState(ref CameraState curState); // 0x009AA4B8-0x009AA518
		public override void MutateCameraState(ref CameraState curState, float deltaTime); // 0x009AA518-0x009AAAEC
		private bool RotateToScreenBounds(ref CameraState state, Rect screenRect, ref Quaternion rigOrientation, float fov, float fovH, float deltaTime); // 0x009AAF60-0x009AB1B0
		private bool ClampVerticalBounds(ref Rect r, Vector3 dir, Vector3 up, float fov); // 0x009AB500-0x009AB6EC
	}

	[AddComponentMenu] // 0x0050881C-0x0050887C
	[DocumentationSorting] // 0x0050881C-0x0050887C
	[SaveDuringPlay] // 0x0050881C-0x0050887C
	public class CinemachineFramingTransposer : CinemachineComponentBase // TypeDefIndex: 2922
	{
		// Fields
		[Range] // 0x0050B4CC-0x0050B520
		[Tooltip] // 0x0050B4CC-0x0050B520
		public float m_LookaheadTime; // 0x50
		[Range] // 0x0050B520-0x0050B574
		[Tooltip] // 0x0050B520-0x0050B574
		public float m_LookaheadSmoothing; // 0x54
		[Tooltip] // 0x0050B574-0x0050B5AC
		public bool m_LookaheadIgnoreY; // 0x58
		[Range] // 0x0050B5AC-0x0050B610
		[Space] // 0x0050B5AC-0x0050B610
		[Tooltip] // 0x0050B5AC-0x0050B610
		public float m_XDamping; // 0x5C
		[Range] // 0x0050B610-0x0050B664
		[Tooltip] // 0x0050B610-0x0050B664
		public float m_YDamping; // 0x60
		[Range] // 0x0050B664-0x0050B6B8
		[Tooltip] // 0x0050B664-0x0050B6B8
		public float m_ZDamping; // 0x64
		[Range] // 0x0050B6B8-0x0050B71C
		[Space] // 0x0050B6B8-0x0050B71C
		[Tooltip] // 0x0050B6B8-0x0050B71C
		public float m_ScreenX; // 0x68
		[Range] // 0x0050B71C-0x0050B770
		[Tooltip] // 0x0050B71C-0x0050B770
		public float m_ScreenY; // 0x6C
		[Tooltip] // 0x0050B770-0x0050B7A8
		public float m_CameraDistance; // 0x70
		[Range] // 0x0050B7A8-0x0050B80C
		[Space] // 0x0050B7A8-0x0050B80C
		[Tooltip] // 0x0050B7A8-0x0050B80C
		public float m_DeadZoneWidth; // 0x74
		[Range] // 0x0050B80C-0x0050B860
		[Tooltip] // 0x0050B80C-0x0050B860
		public float m_DeadZoneHeight; // 0x78
		[FormerlySerializedAs] // 0x0050B860-0x0050B8C0
		[Tooltip] // 0x0050B860-0x0050B8C0
		public float m_DeadZoneDepth; // 0x7C
		[Space] // 0x0050B8C0-0x0050B90C
		[Tooltip] // 0x0050B8C0-0x0050B90C
		public bool m_UnlimitedSoftZone; // 0x80
		[Range] // 0x0050B90C-0x0050B960
		[Tooltip] // 0x0050B90C-0x0050B960
		public float m_SoftZoneWidth; // 0x84
		[Range] // 0x0050B960-0x0050B9B4
		[Tooltip] // 0x0050B960-0x0050B9B4
		public float m_SoftZoneHeight; // 0x88
		[Range] // 0x0050B9B4-0x0050BA08
		[Tooltip] // 0x0050B9B4-0x0050BA08
		public float m_BiasX; // 0x8C
		[Range] // 0x0050BA08-0x0050BA5C
		[Tooltip] // 0x0050BA08-0x0050BA5C
		public float m_BiasY; // 0x90
		[Tooltip] // 0x0050BA5C-0x0050BA94
		public bool m_CenterOnActivate; // 0x94
		[FormerlySerializedAs] // 0x0050BA94-0x0050BB04
		[Space] // 0x0050BA94-0x0050BB04
		[Tooltip] // 0x0050BA94-0x0050BB04
		public FramingMode m_GroupFramingMode; // 0x98
		[Tooltip] // 0x0050BB04-0x0050BB3C
		public AdjustmentMode m_AdjustmentMode; // 0x9C
		[Tooltip] // 0x0050BB3C-0x0050BB74
		public float m_GroupFramingSize; // 0xA0
		[Tooltip] // 0x0050BB74-0x0050BBAC
		public float m_MaxDollyIn; // 0xA4
		[Tooltip] // 0x0050BBAC-0x0050BBE4
		public float m_MaxDollyOut; // 0xA8
		[Tooltip] // 0x0050BBE4-0x0050BC1C
		public float m_MinimumDistance; // 0xAC
		[Tooltip] // 0x0050BC1C-0x0050BC54
		public float m_MaximumDistance; // 0xB0
		[Range] // 0x0050BC54-0x0050BCAC
		[Tooltip] // 0x0050BC54-0x0050BCAC
		public float m_MinimumFOV; // 0xB4
		[Range] // 0x0050BCAC-0x0050BD04
		[Tooltip] // 0x0050BCAC-0x0050BD04
		public float m_MaximumFOV; // 0xB8
		[Tooltip] // 0x0050BD04-0x0050BD3C
		public float m_MinimumOrthoSize; // 0xBC
		[Tooltip] // 0x0050BD3C-0x0050BD74
		public float m_MaximumOrthoSize; // 0xC0
		private const float kMinimumCameraDistance = 0.01f; // Metadata: 0x001F4E60
		private Vector3 m_PreviousCameraPosition; // 0xC4
		private PositionPredictor m_Predictor; // 0xD0
		[CompilerGenerated] // 0x0050BD74-0x0050BD84
		private Vector3 _TrackedPoint_k__BackingField; // 0xD8
		private float m_prevFOV; // 0xE4
		[CompilerGenerated] // 0x0050BD84-0x0050BD94
		private Bounds _LastBounds_k__BackingField; // 0xE8
		[CompilerGenerated] // 0x0050BD94-0x0050BDA4
		private Matrix4x4 _LastBoundsMatrix_k__BackingField; // 0x100
	
		// Properties
		internal Rect SoftGuideRect { get; set; } // 0x009AEE04-0x009AEE50 0x009AEE50-0x009AEF7C
		internal Rect HardGuideRect { get; set; } // 0x009AEF7C-0x009AF080 0x009AF080-0x009AF2A4
		public override bool IsValid { get; } // 0x009AF404-0x009AF4A0 
		public override CinemachineCore.Stage Stage { get; } // 0x009AF4A0-0x009AF4A8 
		public Vector3 TrackedPoint { [CompilerGenerated] /* 0x0050ED28-0x0050ED38 */ get; [CompilerGenerated] /* 0x0050ED38-0x0050ED48 */ private set; } // 0x009AF4A8-0x009AF4B4 0x009AF4B4-0x009AF4C0
		public Bounds LastBounds { [CompilerGenerated] /* 0x0050ED48-0x0050ED58 */ get; [CompilerGenerated] /* 0x0050ED58-0x0050ED68 */ private set; } // 0x009AF824-0x009AF838 0x009AF838-0x009AF84C
		public Matrix4x4 LastBoundsMatrix { [CompilerGenerated] /* 0x0050ED68-0x0050ED78 */ get; [CompilerGenerated] /* 0x0050ED78-0x0050ED88 */ private set; } // 0x009AF84C-0x009AF870 0x009AF870-0x009AF884
	
		// Nested types
		[DocumentationSorting] // 0x00508EC4-0x00508ED8
		public enum FramingMode // TypeDefIndex: 2923
		{
			Horizontal = 0,
			Vertical = 1,
			HorizontalAndVertical = 2,
			None = 3
		}
	
		public enum AdjustmentMode // TypeDefIndex: 2924
		{
			ZoomOnly = 0,
			DollyOnly = 1,
			DollyThenZoom = 2
		}
	
		// Constructors
		public CinemachineFramingTransposer(); // 0x009B1128-0x009B1218
	
		// Methods
		private void OnValidate(); // 0x009AF2A4-0x009AF404
		public override void OnTargetObjectWarped(Transform target, Vector3 positionDelta); // 0x009AF4C0-0x009AF5FC
		private Rect ScreenToOrtho(Rect rScreen, float orthoSize, float aspect); // 0x009AF5FC-0x009AF6D8
		private Vector3 OrthoOffsetToScreenBounds(Vector3 targetPos2D, Rect screenRect); // 0x009AF6D8-0x009AF824
		public override void MutateCameraState(ref CameraState curState, float deltaTime); // 0x009AF884-0x009B0634
		private float GetTargetHeight(Vector2 boundsSize); // 0x009B0B0C-0x009B0C24
		private Vector3 ComputeGroupBounds(CinemachineTargetGroup group, ref CameraState curState); // 0x009B0634-0x009B0B0C
		private static Bounds GetScreenSpaceGroupBoundingBox(CinemachineTargetGroup group, ref Vector3 pos, Quaternion orientation); // 0x009B0C24-0x009B1128
	}

	[AddComponentMenu] // 0x0050887C-0x005088DC
	[DocumentationSorting] // 0x0050887C-0x005088DC
	[SaveDuringPlay] // 0x0050887C-0x005088DC
	public class CinemachineGroupComposer : CinemachineComposer // TypeDefIndex: 2925
	{
		// Fields
		[Space] // 0x0050BDA4-0x0050BDF0
		[Tooltip] // 0x0050BDA4-0x0050BDF0
		public float m_GroupFramingSize; // 0x128
		[Tooltip] // 0x0050BDF0-0x0050BE28
		public FramingMode m_FramingMode; // 0x12C
		[Range] // 0x0050BE28-0x0050BE7C
		[Tooltip] // 0x0050BE28-0x0050BE7C
		public float m_FrameDamping; // 0x130
		[Tooltip] // 0x0050BE7C-0x0050BEB4
		public AdjustmentMode m_AdjustmentMode; // 0x134
		[Tooltip] // 0x0050BEB4-0x0050BEEC
		public float m_MaxDollyIn; // 0x138
		[Tooltip] // 0x0050BEEC-0x0050BF24
		public float m_MaxDollyOut; // 0x13C
		[Tooltip] // 0x0050BF24-0x0050BF5C
		public float m_MinimumDistance; // 0x140
		[Tooltip] // 0x0050BF5C-0x0050BF94
		public float m_MaximumDistance; // 0x144
		[Range] // 0x0050BF94-0x0050BFEC
		[Tooltip] // 0x0050BF94-0x0050BFEC
		public float m_MinimumFOV; // 0x148
		[Range] // 0x0050BFEC-0x0050C044
		[Tooltip] // 0x0050BFEC-0x0050C044
		public float m_MaximumFOV; // 0x14C
		[Tooltip] // 0x0050C044-0x0050C07C
		public float m_MinimumOrthoSize; // 0x150
		[Tooltip] // 0x0050C07C-0x0050C0B4
		public float m_MaximumOrthoSize; // 0x154
		private float m_prevFramingDistance; // 0x158
		private float m_prevFOV; // 0x15C
		[CompilerGenerated] // 0x0050C0B4-0x0050C0C4
		private Bounds _LastBounds_k__BackingField; // 0x160
		[CompilerGenerated] // 0x0050C0C4-0x0050C0D4
		private Matrix4x4 _LastBoundsMatrix_k__BackingField; // 0x178
	
		// Properties
		public Bounds LastBounds { [CompilerGenerated] /* 0x0050ED88-0x0050ED98 */ get; [CompilerGenerated] /* 0x0050ED98-0x0050EDA8 */ private set; } // 0x0093D238-0x0093D24C 0x0093D24C-0x0093D260
		public Matrix4x4 LastBoundsMatrix { [CompilerGenerated] /* 0x0050EDA8-0x0050EDB8 */ get; [CompilerGenerated] /* 0x0050EDB8-0x0050EDC8 */ private set; } // 0x0093D260-0x0093D294 0x0093D294-0x0093D2C0
	
		// Nested types
		[DocumentationSorting] // 0x00508ED8-0x00508EEC
		public enum FramingMode // TypeDefIndex: 2926
		{
			Horizontal = 0,
			Vertical = 1,
			HorizontalAndVertical = 2
		}
	
		public enum AdjustmentMode // TypeDefIndex: 2927
		{
			ZoomOnly = 0,
			DollyOnly = 1,
			DollyThenZoom = 2
		}
	
		// Constructors
		public CinemachineGroupComposer(); // 0x0093EC6C-0x0093ECAC
	
		// Methods
		private void OnValidate(); // 0x0093D108-0x0093D238
		public override void MutateCameraState(ref CameraState curState, float deltaTime); // 0x0093D2C0-0x0093DE74
		private float GetTargetHeight(Vector2 boundsSize); // 0x0093E500-0x0093E6A8
		private static Bounds GetScreenSpaceGroupBoundingBox(CinemachineTargetGroup group, Matrix4x4 observer, out Vector3 newFwd); // 0x0093E1D0-0x0093E500
	}

	[AddComponentMenu] // 0x005088DC-0x0050893C
	[DocumentationSorting] // 0x005088DC-0x0050893C
	[SaveDuringPlay] // 0x005088DC-0x0050893C
	public class CinemachineHardLockToTarget : CinemachineComponentBase // TypeDefIndex: 2928
	{
		// Properties
		public override bool IsValid { get; } // 0x0093ECAC-0x0093ED4C 
		public override CinemachineCore.Stage Stage { get; } // 0x0093ED4C-0x0093ED54 
	
		// Constructors
		public CinemachineHardLockToTarget(); // 0x0093ED9C-0x0093EDA4
	
		// Methods
		public override void MutateCameraState(ref CameraState curState, float deltaTime); // 0x0093ED54-0x0093ED9C
	}

	[AddComponentMenu] // 0x0050893C-0x0050899C
	[DocumentationSorting] // 0x0050893C-0x0050899C
	[SaveDuringPlay] // 0x0050893C-0x0050899C
	public class CinemachineHardLookAt : CinemachineComponentBase // TypeDefIndex: 2929
	{
		// Properties
		public override bool IsValid { get; } // 0x0093EDA4-0x0093EE44 
		public override CinemachineCore.Stage Stage { get; } // 0x0093EE44-0x0093EE4C 
	
		// Constructors
		public CinemachineHardLookAt(); // 0x0093F0BC-0x0093F0C4
	
		// Methods
		public override void MutateCameraState(ref CameraState curState, float deltaTime); // 0x0093EE4C-0x0093F0BC
	}

	[AddComponentMenu] // 0x0050899C-0x005089FC
	[DocumentationSorting] // 0x0050899C-0x005089FC
	[SaveDuringPlay] // 0x0050899C-0x005089FC
	public class CinemachineOrbitalTransposer : CinemachineTransposer // TypeDefIndex: 2930
	{
		// Fields
		[OrbitalTransposerHeadingProperty] // 0x0050C0D4-0x0050C130
		[Space] // 0x0050C0D4-0x0050C130
		[Tooltip] // 0x0050C0D4-0x0050C130
		public Heading m_Heading; // 0xB8
		[Tooltip] // 0x0050C130-0x0050C168
		public AxisState.Recentering m_RecenterToTargetHeading; // 0xC4
		[AxisStateProperty] // 0x0050C168-0x0050C1B4
		[Tooltip] // 0x0050C168-0x0050C1B4
		public AxisState m_XAxis; // 0xE0
		[FormerlySerializedAs] // 0x0050C1B4-0x0050C210
		[HideInInspector] // 0x0050C1B4-0x0050C210
		[SerializeField] // 0x0050C1B4-0x0050C210
		private float m_LegacyRadius; // 0x130
		[FormerlySerializedAs] // 0x0050C210-0x0050C26C
		[HideInInspector] // 0x0050C210-0x0050C26C
		[SerializeField] // 0x0050C210-0x0050C26C
		private float m_LegacyHeightOffset; // 0x134
		[FormerlySerializedAs] // 0x0050C26C-0x0050C2C8
		[HideInInspector] // 0x0050C26C-0x0050C2C8
		[SerializeField] // 0x0050C26C-0x0050C2C8
		private float m_LegacyHeadingBias; // 0x138
		[HideInInspector] // 0x0050C2C8-0x0050C300
		[NoSaveDuringPlay] // 0x0050C2C8-0x0050C300
		public bool m_HeadingIsSlave; // 0x13C
		internal UpdateHeadingDelegate HeadingUpdater; // 0x140
		private Vector3 mLastTargetPosition; // 0x148
		private HeadingTracker mHeadingTracker; // 0x158
		private Rigidbody mTargetRigidBody; // 0x160
		[CompilerGenerated] // 0x0050C300-0x0050C310
		private Transform _PreviousTarget_k__BackingField; // 0x168
		private Quaternion mHeadingPrevFrame; // 0x170
		private Vector3 mOffsetPrevFrame; // 0x180
		[CompilerGenerated] // 0x0050C310-0x0050C320
		private float _LastHeading_k__BackingField; // 0x18C
	
		// Properties
		private Transform PreviousTarget { [CompilerGenerated] /* 0x0050EDC8-0x0050EDD8 */ get; [CompilerGenerated] /* 0x0050EDD8-0x0050EDE8 */ set; } // 0x00942A34-0x00942A3C 0x00942A3C-0x00942A44
		private float LastHeading { [CompilerGenerated] /* 0x0050EDE8-0x0050EDF8 */ get; [CompilerGenerated] /* 0x0050EDF8-0x0050EE08 */ set; } // 0x00943240-0x00943248 0x00943248-0x00943250
	
		// Nested types
		[Serializable]
		[DocumentationSorting] // 0x00508EEC-0x00508F00
		public struct Heading // TypeDefIndex: 2931
		{
			// Fields
			[FormerlySerializedAs] // 0x0050DEC8-0x0050DF28
			[Tooltip] // 0x0050DEC8-0x0050DF28
			public HeadingDefinition m_Definition; // 0x00
			[Range] // 0x0050DF28-0x0050DF7C
			[Tooltip] // 0x0050DF28-0x0050DF7C
			public int m_VelocityFilterStrength; // 0x04
			[FormerlySerializedAs] // 0x0050DF7C-0x0050DFFC
			[Range] // 0x0050DF7C-0x0050DFFC
			[Tooltip] // 0x0050DF7C-0x0050DFFC
			public float m_Bias; // 0x08
	
			// Nested types
			[DocumentationSorting] // 0x00508FC4-0x00508FD8
			public enum HeadingDefinition // TypeDefIndex: 2932
			{
				PositionDelta = 0,
				Velocity = 1,
				TargetForward = 2,
				WorldForward = 3
			}
	
			// Constructors
			public Heading(HeadingDefinition def, int filterStrength, float bias); // 0x00584D14-0x00584D20
		}
	
		internal delegate float UpdateHeadingDelegate(CinemachineOrbitalTransposer orbital, float deltaTime, Vector3 up); // TypeDefIndex: 2933; 0x00943924-0x00943D7C
	
		[Serializable]
		[CompilerGenerated] // 0x00508F00-0x00508F10
		private sealed class __c // TypeDefIndex: 2934
		{
			// Fields
			public static readonly __c __9; // 0x00
			public static UpdateHeadingDelegate __9__32_0; // 0x08
	
			// Constructors
			static __c(); // 0x00944C14-0x00944C78
			public __c(); // 0x00944C78-0x00944C80
	
			// Methods
			internal float _.ctor_b__32_0(CinemachineOrbitalTransposer orbital, float deltaTime, Vector3 up); // 0x00944C80-0x00944CA4
		}
	
		// Constructors
		public CinemachineOrbitalTransposer(); // 0x009448E4-0x00944B18
	
		// Methods
		protected override void OnValidate(); // 0x00941F9C-0x009420AC
		public float UpdateHeading(float deltaTime, Vector3 up, ref AxisState axis); // 0x009420D4-0x0094225C
		private void OnEnable(); // 0x009429BC-0x00942A34
		public override void OnTargetObjectWarped(Transform target, Vector3 positionDelta); // 0x00942A44-0x00942B6C
		public override bool OnTransitionFromCamera(ICinemachineCamera fromCam, Vector3 worldUp, float deltaTime, ref CinemachineVirtualCameraBase.TransitionParams transitionParams); // 0x00942C90-0x00942E78
		public float GetAxisClosestValue(Vector3 cameraPos, Vector3 up); // 0x00942E78-0x009431AC
		public override void MutateCameraState(ref CameraState curState, float deltaTime); // 0x00943250-0x009437BC
		private static string GetFullName(GameObject current); // 0x00944298-0x009443FC
		private float GetTargetHeading(float currentHeading, Quaternion targetOrientation, float deltaTime); // 0x0094255C-0x009429BC
	}

	[AddComponentMenu] // 0x005089FC-0x00508A5C
	[DocumentationSorting] // 0x005089FC-0x00508A5C
	[SaveDuringPlay] // 0x005089FC-0x00508A5C
	public class CinemachinePOV : CinemachineComponentBase // TypeDefIndex: 2935
	{
		// Fields
		[AxisStateProperty] // 0x0050C320-0x0050C36C
		[Tooltip] // 0x0050C320-0x0050C36C
		public AxisState m_VerticalAxis; // 0x50
		[Tooltip] // 0x0050C36C-0x0050C3A4
		public AxisState.Recentering m_VerticalRecentering; // 0xA0
		[AxisStateProperty] // 0x0050C3A4-0x0050C3F0
		[Tooltip] // 0x0050C3A4-0x0050C3F0
		public AxisState m_HorizontalAxis; // 0xC0
		[Tooltip] // 0x0050C3F0-0x0050C428
		public AxisState.Recentering m_HorizontalRecentering; // 0x110
	
		// Properties
		public override bool IsValid { get; } // 0x00944D90-0x00944D98 
		public override CinemachineCore.Stage Stage { get; } // 0x00944D98-0x00944DA0 
	
		// Constructors
		public CinemachinePOV(); // 0x009455BC-0x0094576C
	
		// Methods
		private void OnValidate(); // 0x00944DA0-0x00944DE8
		public override void MutateCameraState(ref CameraState curState, float deltaTime); // 0x00944DE8-0x009450E8
		public override bool OnTransitionFromCamera(ICinemachineCamera fromCam, Vector3 worldUp, float deltaTime, ref CinemachineVirtualCameraBase.TransitionParams transitionParams); // 0x009450E8-0x009455BC
	}

	[AddComponentMenu] // 0x00508A5C-0x00508ABC
	[DocumentationSorting] // 0x00508A5C-0x00508ABC
	[SaveDuringPlay] // 0x00508A5C-0x00508ABC
	public class CinemachineSameAsFollowTarget : CinemachineComponentBase // TypeDefIndex: 2936
	{
		// Properties
		public override bool IsValid { get; } // 0x009475D8-0x00947678 
		public override CinemachineCore.Stage Stage { get; } // 0x00947678-0x00947680 
	
		// Constructors
		public CinemachineSameAsFollowTarget(); // 0x009476C8-0x009476D0
	
		// Methods
		public override void MutateCameraState(ref CameraState curState, float deltaTime); // 0x00947680-0x009476C8
	}

	[AddComponentMenu] // 0x00508ABC-0x00508B1C
	[DocumentationSorting] // 0x00508ABC-0x00508B1C
	[SaveDuringPlay] // 0x00508ABC-0x00508B1C
	public class CinemachineTrackedDolly : CinemachineComponentBase // TypeDefIndex: 2937
	{
		// Fields
		[Tooltip] // 0x0050C428-0x0050C460
		public CinemachinePathBase m_Path; // 0x50
		[Tooltip] // 0x0050C460-0x0050C498
		public float m_PathPosition; // 0x58
		[Tooltip] // 0x0050C498-0x0050C4D0
		public CinemachinePathBase.PositionUnits m_PositionUnits; // 0x5C
		[Tooltip] // 0x0050C4D0-0x0050C508
		public Vector3 m_PathOffset; // 0x60
		[Range] // 0x0050C508-0x0050C55C
		[Tooltip] // 0x0050C508-0x0050C55C
		public float m_XDamping; // 0x6C
		[Range] // 0x0050C55C-0x0050C5B0
		[Tooltip] // 0x0050C55C-0x0050C5B0
		public float m_YDamping; // 0x70
		[Range] // 0x0050C5B0-0x0050C604
		[Tooltip] // 0x0050C5B0-0x0050C604
		public float m_ZDamping; // 0x74
		[Tooltip] // 0x0050C604-0x0050C63C
		public CameraUpMode m_CameraUp; // 0x78
		[Range] // 0x0050C63C-0x0050C690
		[Tooltip] // 0x0050C63C-0x0050C690
		public float m_PitchDamping; // 0x7C
		[Range] // 0x0050C690-0x0050C6E4
		[Tooltip] // 0x0050C690-0x0050C6E4
		public float m_YawDamping; // 0x80
		[Range] // 0x0050C6E4-0x0050C738
		[Tooltip] // 0x0050C6E4-0x0050C738
		public float m_RollDamping; // 0x84
		[Tooltip] // 0x0050C738-0x0050C770
		public AutoDolly m_AutoDolly; // 0x88
		private float m_PreviousPathPosition; // 0x98
		private Quaternion m_PreviousOrientation; // 0x9C
		private Vector3 m_PreviousCameraPosition; // 0xAC
	
		// Properties
		public override bool IsValid { get; } // 0x0094DE50-0x0094DEE0 
		public override CinemachineCore.Stage Stage { get; } // 0x0094DEE0-0x0094DEE8 
		private Vector3 AngularDamping { get; } // 0x0094EAF8-0x0094EBC8 
	
		// Nested types
		[DocumentationSorting] // 0x00508F10-0x00508F24
		public enum CameraUpMode // TypeDefIndex: 2938
		{
			Default = 0,
			Path = 1,
			PathNoRoll = 2,
			FollowTarget = 3,
			FollowTargetNoRoll = 4
		}
	
		[Serializable]
		[DocumentationSorting] // 0x00508F24-0x00508F38
		public struct AutoDolly // TypeDefIndex: 2939
		{
			// Fields
			[Tooltip] // 0x0050DFFC-0x0050E034
			public bool m_Enabled; // 0x00
			[Tooltip] // 0x0050E034-0x0050E06C
			public float m_PositionOffset; // 0x04
			[Tooltip] // 0x0050E06C-0x0050E0A4
			public int m_SearchRadius; // 0x08
			[FormerlySerializedAs] // 0x0050E0A4-0x0050E104
			[Tooltip] // 0x0050E0A4-0x0050E104
			public int m_SearchResolution; // 0x0C
	
			// Constructors
			public AutoDolly(bool enabled, float positionOffset, int searchRadius, int stepsPerSegment); // 0x00584E0C-0x00584E64
		}
	
		// Constructors
		public CinemachineTrackedDolly(); // 0x0094EC60-0x0094ED40
	
		// Methods
		public override void MutateCameraState(ref CameraState curState, float deltaTime); // 0x0094DEE8-0x0094E7D4
		private Quaternion GetCameraOrientationAtPathPoint(Quaternion pathOrientation, Vector3 up); // 0x0094E850-0x0094EAF8
	}

	[AddComponentMenu] // 0x00508B1C-0x00508B7C
	[DocumentationSorting] // 0x00508B1C-0x00508B7C
	[SaveDuringPlay] // 0x00508B1C-0x00508B7C
	public class CinemachineTransposer : CinemachineComponentBase // TypeDefIndex: 2940
	{
		// Fields
		[Tooltip] // 0x0050C770-0x0050C7A8
		public BindingMode m_BindingMode; // 0x50
		[Tooltip] // 0x0050C7A8-0x0050C7E0
		public Vector3 m_FollowOffset; // 0x54
		[Range] // 0x0050C7E0-0x0050C834
		[Tooltip] // 0x0050C7E0-0x0050C834
		public float m_XDamping; // 0x60
		[Range] // 0x0050C834-0x0050C888
		[Tooltip] // 0x0050C834-0x0050C888
		public float m_YDamping; // 0x64
		[Range] // 0x0050C888-0x0050C8DC
		[Tooltip] // 0x0050C888-0x0050C8DC
		public float m_ZDamping; // 0x68
		public AngularDampingMode m_AngularDampingMode; // 0x6C
		[Range] // 0x0050C8DC-0x0050C930
		[Tooltip] // 0x0050C8DC-0x0050C930
		public float m_PitchDamping; // 0x70
		[Range] // 0x0050C930-0x0050C984
		[Tooltip] // 0x0050C930-0x0050C984
		public float m_YawDamping; // 0x74
		[Range] // 0x0050C984-0x0050C9D8
		[Tooltip] // 0x0050C984-0x0050C9D8
		public float m_RollDamping; // 0x78
		[Range] // 0x0050C9D8-0x0050CA2C
		[Tooltip] // 0x0050C9D8-0x0050CA2C
		public float m_AngularDamping; // 0x7C
		[CompilerGenerated] // 0x0050CA2C-0x0050CA3C
		private bool _HideOffsetInInspector_k__BackingField; // 0x80
		private Vector3 m_PreviousTargetPosition; // 0x84
		private Quaternion m_PreviousReferenceOrientation; // 0x90
		private Quaternion m_targetOrientationOnAssign; // 0xA0
		private Transform m_previousTarget; // 0xB0
	
		// Properties
		public bool HideOffsetInInspector { [CompilerGenerated] /* 0x0050EE08-0x0050EE18 */ get; [CompilerGenerated] /* 0x0050EE18-0x0050EE28 */ set; } // 0x0094ED40-0x0094ED48 0x0094ED48-0x0094ED54
		public Vector3 EffectiveOffset { get; } // 0x009431AC-0x00943240 
		public override bool IsValid { get; } // 0x0094ED54-0x0094EDF4 
		public override CinemachineCore.Stage Stage { get; } // 0x0094EDF4-0x0094EDFC 
		protected Vector3 Damping { get; } // 0x0094F0B4-0x0094F114 
		protected Vector3 AngularDamping { get; } // 0x0094EFC4-0x0094F0B4 
	
		// Nested types
		[DocumentationSorting] // 0x00508F38-0x00508F4C
		public enum BindingMode // TypeDefIndex: 2941
		{
			LockToTargetOnAssign = 0,
			LockToTargetWithWorldUp = 1,
			LockToTargetNoRoll = 2,
			LockToTarget = 3,
			WorldSpace = 4,
			SimpleFollowWithWorldUp = 5
		}
	
		public enum AngularDampingMode // TypeDefIndex: 2942
		{
			Euler = 0,
			Quaternion = 1
		}
	
		// Constructors
		public CinemachineTransposer(); // 0x00944B28-0x00944C14
	
		// Methods
		protected virtual void OnValidate(); // 0x009420AC-0x009420D4
		public override void MutateCameraState(ref CameraState curState, float deltaTime); // 0x0094EDFC-0x0094EFC4
		public override void OnTargetObjectWarped(Transform target, Vector3 positionDelta); // 0x00942B6C-0x00942C90
		protected void InitPrevFrameStateInfo(ref CameraState curState, float deltaTime); // 0x009437BC-0x00943924
		protected void TrackTarget(float deltaTime, Vector3 up, Vector3 desiredCameraOffset, out Vector3 outTargetPosition, out Quaternion outTargetOrient); // 0x00943D7C-0x00944298
		public Vector3 GetTargetCameraPosition(Vector3 worldUp); // 0x0094F114-0x0094F2B4
		public Quaternion GetReferenceOrientation(Vector3 worldUp); // 0x0094225C-0x0094255C
		private static Quaternion Uppify(Quaternion q, Vector3 up); // 0x0094F2B4-0x0094F3C4
	}

	[Serializable]
	[DocumentationSorting] // 0x00508B7C-0x00508B90
	public struct AxisState // TypeDefIndex: 2943
	{
		// Fields
		[NoSaveDuringPlay] // 0x0050CA3C-0x0050CA88
		[Tooltip] // 0x0050CA3C-0x0050CA88
		public float Value; // 0x00
		[Tooltip] // 0x0050CA88-0x0050CAC0
		public float m_MaxSpeed; // 0x04
		[Tooltip] // 0x0050CAC0-0x0050CAF8
		public float m_AccelTime; // 0x08
		[Tooltip] // 0x0050CAF8-0x0050CB30
		public float m_DecelTime; // 0x0C
		[FormerlySerializedAs] // 0x0050CB30-0x0050CB90
		[Tooltip] // 0x0050CB30-0x0050CB90
		public string m_InputAxisName; // 0x10
		[NoSaveDuringPlay] // 0x0050CB90-0x0050CBDC
		[Tooltip] // 0x0050CB90-0x0050CBDC
		public float m_InputAxisValue; // 0x18
		[FormerlySerializedAs] // 0x0050CBDC-0x0050CC3C
		[Tooltip] // 0x0050CBDC-0x0050CC3C
		public bool m_InvertInput; // 0x1C
		[Tooltip] // 0x0050CC3C-0x0050CC74
		public float m_MinValue; // 0x20
		[Tooltip] // 0x0050CC74-0x0050CCAC
		public float m_MaxValue; // 0x24
		[Tooltip] // 0x0050CCAC-0x0050CCE4
		public bool m_Wrap; // 0x28
		[Tooltip] // 0x0050CCE4-0x0050CD1C
		public Recentering m_Recentering; // 0x2C
		private float mCurrentSpeed; // 0x48
		private const float Epsilon = 0.0001f; // Metadata: 0x001F4EDC
		[CompilerGenerated] // 0x0050CD1C-0x0050CD2C
		private bool _ValueRangeLocked_k__BackingField; // 0x4C
		[CompilerGenerated] // 0x0050CD2C-0x0050CD3C
		private bool _HasRecentering_k__BackingField; // 0x4D
	
		// Properties
		public bool ValueRangeLocked { [CompilerGenerated] /* 0x0050EE28-0x0050EE38 */ get; [CompilerGenerated] /* 0x0050EE38-0x0050EE48 */ set; } // 0x0058732C-0x00587334 0x00587334-0x00587340
		public bool HasRecentering { [CompilerGenerated] /* 0x0050EE48-0x0050EE58 */ get; [CompilerGenerated] /* 0x0050EE58-0x0050EE68 */ set; } // 0x00587340-0x00587348 0x00587348-0x00587354
	
		// Nested types
		[Serializable]
		[DocumentationSorting] // 0x00508F4C-0x00508F60
		public struct Recentering // TypeDefIndex: 2944
		{
			// Fields
			[Tooltip] // 0x0050E104-0x0050E13C
			public bool m_enabled; // 0x00
			[Tooltip] // 0x0050E13C-0x0050E174
			public float m_WaitTime; // 0x04
			[Tooltip] // 0x0050E174-0x0050E1AC
			public float m_RecenteringTime; // 0x08
			private float mLastAxisInputTime; // 0x0C
			private float mRecenteringVelocity; // 0x10
			[FormerlySerializedAs] // 0x0050E1AC-0x0050E208
			[HideInInspector] // 0x0050E1AC-0x0050E208
			[SerializeField] // 0x0050E1AC-0x0050E208
			private int m_LegacyHeadingDefinition; // 0x14
			[FormerlySerializedAs] // 0x0050E208-0x0050E264
			[HideInInspector] // 0x0050E208-0x0050E264
			[SerializeField] // 0x0050E208-0x0050E264
			private int m_LegacyVelocityFilterStrength; // 0x18
	
			// Constructors
			public Recentering(bool enabled, float waitTime, float recenteringTime); // 0x00587354-0x00587370
	
			// Methods
			public void Validate(); // 0x00587370-0x00587378
			public void CancelRecentering(); // 0x00587378-0x005873A4
			public void RecenterNow(); // 0x005873A4-0x005873AC
			public void DoRecentering(ref AxisState axis, float deltaTime, float recenterTarget); // 0x005873AC-0x005873B4
			internal bool LegacyUpgrade(ref int heading, ref int velocityFilter); // 0x005873B4-0x00587434
		}
	
		// Constructors
		public AxisState(float minValue, float maxValue, bool wrap, bool rangeLocked, float maxSpeed, float accelTime, float decelTime, string name, bool invert); // 0x005872A4-0x00587308
	
		// Methods
		public void Validate(); // 0x00587308-0x00587310
		public void Reset(); // 0x00587310-0x0058731C
		public bool Update(float deltaTime); // 0x0058731C-0x00587324
		private float GetMaxSpeed(); // 0x00587324-0x0058732C
	}

	public struct CameraState // TypeDefIndex: 2945
	{
		// Fields
		[CompilerGenerated] // 0x0050CD3C-0x0050CD4C
		private LensSettings _Lens_k__BackingField; // 0x00
		[CompilerGenerated] // 0x0050CD4C-0x0050CD5C
		private Vector3 _ReferenceUp_k__BackingField; // 0x28
		[CompilerGenerated] // 0x0050CD5C-0x0050CD6C
		private Vector3 _ReferenceLookAt_k__BackingField; // 0x34
		public static Vector3 kNoPoint; // 0x00
		[CompilerGenerated] // 0x0050CD6C-0x0050CD7C
		private Vector3 _RawPosition_k__BackingField; // 0x40
		[CompilerGenerated] // 0x0050CD7C-0x0050CD8C
		private Quaternion _RawOrientation_k__BackingField; // 0x4C
		[CompilerGenerated] // 0x0050CD8C-0x0050CD9C
		private Vector3 _PositionDampingBypass_k__BackingField; // 0x5C
		[CompilerGenerated] // 0x0050CD9C-0x0050CDAC
		private float _ShotQuality_k__BackingField; // 0x68
		[CompilerGenerated] // 0x0050CDAC-0x0050CDBC
		private Vector3 _PositionCorrection_k__BackingField; // 0x6C
		[CompilerGenerated] // 0x0050CDBC-0x0050CDCC
		private Quaternion _OrientationCorrection_k__BackingField; // 0x78
		[CompilerGenerated] // 0x0050CDCC-0x0050CDDC
		private BlendHintValue _BlendHint_k__BackingField; // 0x88
		private CustomBlendable mCustom0; // 0x90
		private CustomBlendable mCustom1; // 0xA0
		private CustomBlendable mCustom2; // 0xB0
		private CustomBlendable mCustom3; // 0xC0
		private List<CustomBlendable> m_CustomOverflow; // 0xD0
		[CompilerGenerated] // 0x0050CDDC-0x0050CDEC
		private int _NumCustomBlendables_k__BackingField; // 0xD8
	
		// Properties
		public LensSettings Lens { [CompilerGenerated] /* 0x0050EE68-0x0050EE78 */ get; [CompilerGenerated] /* 0x0050EE78-0x0050EE88 */ set; } // 0x00587434-0x00587450 0x00587450-0x00587464
		public Vector3 ReferenceUp { [CompilerGenerated] /* 0x0050EE88-0x0050EE98 */ get; [CompilerGenerated] /* 0x0050EE98-0x0050EEA8 */ set; } // 0x00587464-0x00587470 0x00587470-0x0058747C
		public Vector3 ReferenceLookAt { [CompilerGenerated] /* 0x0050EEA8-0x0050EEB8 */ get; [CompilerGenerated] /* 0x0050EEB8-0x0050EEC8 */ set; } // 0x0058747C-0x00587488 0x00587488-0x00587494
		public bool HasLookAt { get; } // 0x00587494-0x0058749C 
		public Vector3 RawPosition { [CompilerGenerated] /* 0x0050EEC8-0x0050EED8 */ get; [CompilerGenerated] /* 0x0050EED8-0x0050EEE8 */ set; } // 0x0058749C-0x005874A8 0x005874A8-0x005874B4
		public Quaternion RawOrientation { [CompilerGenerated] /* 0x0050EEE8-0x0050EEF8 */ get; [CompilerGenerated] /* 0x0050EEF8-0x0050EF08 */ set; } // 0x005874B4-0x005874C0 0x005874C0-0x005874CC
		public Vector3 PositionDampingBypass { [CompilerGenerated] /* 0x0050EF08-0x0050EF18 */ get; [CompilerGenerated] /* 0x0050EF18-0x0050EF28 */ set; } // 0x005874CC-0x005874D8 0x005874D8-0x005874E4
		public float ShotQuality { [CompilerGenerated] /* 0x0050EF28-0x0050EF38 */ get; [CompilerGenerated] /* 0x0050EF38-0x0050EF48 */ set; } // 0x005874E4-0x005874EC 0x005874EC-0x005874F4
		public Vector3 PositionCorrection { [CompilerGenerated] /* 0x0050EF48-0x0050EF58 */ get; [CompilerGenerated] /* 0x0050EF58-0x0050EF68 */ set; } // 0x005874F4-0x00587500 0x00587500-0x0058750C
		public Quaternion OrientationCorrection { [CompilerGenerated] /* 0x0050EF68-0x0050EF78 */ get; [CompilerGenerated] /* 0x0050EF78-0x0050EF88 */ set; } // 0x0058750C-0x00587518 0x00587518-0x00587524
		public Vector3 CorrectedPosition { get; } // 0x00587524-0x0058752C 
		public Quaternion CorrectedOrientation { get; } // 0x0058752C-0x00587534 
		public Vector3 FinalPosition { get; } // 0x00587534-0x0058753C 
		public Quaternion FinalOrientation { get; } // 0x0058753C-0x00587544 
		public BlendHintValue BlendHint { [CompilerGenerated] /* 0x0050EF88-0x0050EF98 */ get; [CompilerGenerated] /* 0x0050EF98-0x0050EFA8 */ set; } // 0x00587544-0x0058754C 0x0058754C-0x00587554
		public static CameraState Default { get; } // 0x0099C460-0x0099CAD4 
		public int NumCustomBlendables { [CompilerGenerated] /* 0x0050EFA8-0x0050EFB8 */ get; [CompilerGenerated] /* 0x0050EFB8-0x0050EFC8 */ private set; } // 0x00587554-0x0058755C 0x0058755C-0x00587564
	
		// Nested types
		public enum BlendHintValue // TypeDefIndex: 2946
		{
			Nothing = 0,
			NoPosition = 1,
			NoOrientation = 2,
			NoTransform = 3,
			SphericalPositionBlend = 4,
			CylindricalPositionBlend = 8,
			RadialAimBlend = 16,
			IgnoreLookAtTarget = 32,
			NoLens = 64
		}
	
		public struct CustomBlendable // TypeDefIndex: 2947
		{
			// Fields
			public UnityEngine.Object m_Custom; // 0x00
			public float m_Weight; // 0x08
	
			// Constructors
			public CustomBlendable(UnityEngine.Object custom, float weight); // 0x005875AC-0x005875B8
		}
	
		// Constructors
		static CameraState(); // 0x0099DF84-0x0099E00C
	
		// Methods
		public CustomBlendable GetCustomBlendable(int index); // 0x00587564-0x0058756C
		private int FindCustomBlendable(UnityEngine.Object custom); // 0x0058756C-0x00587574
		public void AddCustomBlendable(CustomBlendable b); // 0x00587574-0x0058757C
		public static CameraState Lerp(CameraState stateA, CameraState stateB, float t); // 0x0099CAD4-0x0099DA24
		private static float InterpolateFOV(float fovA, float fovB, float dA, float dB, float t); // 0x0099DAA8-0x0099DF84
		private static Vector3 ApplyPosBlendHint(Vector3 posA, BlendHintValue hintA, Vector3 posB, BlendHintValue hintB, Vector3 original, Vector3 blended); // 0x0099DA24-0x0099DA64
		private static Quaternion ApplyRotBlendHint(Quaternion rotA, BlendHintValue hintA, Quaternion rotB, BlendHintValue hintB, Quaternion original, Quaternion blended); // 0x0099DA64-0x0099DAA8
		private Vector3 InterpolatePosition(Vector3 posA, Vector3 pivotA, Vector3 posB, Vector3 pivotB, float t); // 0x0058757C-0x005875AC
	}

	public class CinemachineBlend // TypeDefIndex: 2948
	{
		// Fields
		[CompilerGenerated] // 0x0050CDEC-0x0050CDFC
		private ICinemachineCamera _CamA_k__BackingField; // 0x10
		[CompilerGenerated] // 0x0050CDFC-0x0050CE0C
		private ICinemachineCamera _CamB_k__BackingField; // 0x18
		[CompilerGenerated] // 0x0050CE0C-0x0050CE1C
		private AnimationCurve _BlendCurve_k__BackingField; // 0x20
		[CompilerGenerated] // 0x0050CE1C-0x0050CE2C
		private float _TimeInBlend_k__BackingField; // 0x28
		[CompilerGenerated] // 0x0050CE2C-0x0050CE3C
		private float _Duration_k__BackingField; // 0x2C
	
		// Properties
		public ICinemachineCamera CamA { [CompilerGenerated] /* 0x0050EFC8-0x0050EFD8 */ get; [CompilerGenerated] /* 0x0050EFD8-0x0050EFE8 */ set; } // 0x0099E4BC-0x0099E4C4 0x0099E4C4-0x0099E4CC
		public ICinemachineCamera CamB { [CompilerGenerated] /* 0x0050EFE8-0x0050EFF8 */ get; [CompilerGenerated] /* 0x0050EFF8-0x0050F008 */ set; } // 0x0099E4CC-0x0099E4D4 0x0099E4D4-0x0099E4DC
		public AnimationCurve BlendCurve { [CompilerGenerated] /* 0x0050F008-0x0050F018 */ get; [CompilerGenerated] /* 0x0050F018-0x0050F028 */ set; } // 0x0099E4DC-0x0099E4E4 0x0099E4E4-0x0099E4EC
		public float TimeInBlend { [CompilerGenerated] /* 0x0050F028-0x0050F038 */ get; [CompilerGenerated] /* 0x0050F038-0x0050F048 */ set; } // 0x0099E4EC-0x0099E4F4 0x0099E4F4-0x0099E4FC
		public float BlendWeight { get; } // 0x0099E4FC-0x0099E5D0 
		public bool IsValid { get; } // 0x0099B700-0x0099B840 
		public float Duration { [CompilerGenerated] /* 0x0050F048-0x0050F058 */ get; [CompilerGenerated] /* 0x0050F058-0x0050F068 */ set; } // 0x0099E600-0x0099E608 0x0099E608-0x0099E610
		public bool IsComplete { get; } // 0x0099E5D0-0x0099E600 
		public string Description { get; } // 0x0099B358-0x0099B68C 
		public CameraState State { get; } // 0x0099BB4C-0x0099BF64 
	
		// Constructors
		public CinemachineBlend(ICinemachineCamera a, ICinemachineCamera b, AnimationCurve curve, float duration, float t); // 0x0099E720-0x0099ED2C
	
		// Methods
		public bool Uses(ICinemachineCamera cam); // 0x0099E610-0x0099E720
		public void UpdateCameraState(Vector3 worldUp, float deltaTime); // 0x0099B8E0-0x0099BB4C
	}

	[Serializable]
	[DocumentationSorting] // 0x00508B90-0x00508BA4
	public struct CinemachineBlendDefinition // TypeDefIndex: 2949
	{
		// Fields
		[Tooltip] // 0x0050CE3C-0x0050CE74
		public Style m_Style; // 0x00
		[Tooltip] // 0x0050CE74-0x0050CEAC
		public float m_Time; // 0x04
		public AnimationCurve m_CustomCurve; // 0x08
		private static AnimationCurve[] sStandardCurves; // 0x00
	
		// Properties
		public AnimationCurve BlendCurve { get; } // 0x005875CC-0x005876CC 
	
		// Nested types
		[DocumentationSorting] // 0x00508F60-0x00508F74
		public enum Style // TypeDefIndex: 2950
		{
			Cut = 0,
			EaseInOut = 1,
			EaseIn = 2,
			EaseOut = 3,
			HardIn = 4,
			HardOut = 5,
			Linear = 6,
			Custom = 7
		}
	
		// Constructors
		public CinemachineBlendDefinition(Style style, float time); // 0x005875B8-0x005875C8
	
		// Methods
		private void CreateStandardCurves(); // 0x005875C8-0x005875CC
	}

	internal class StaticPointVirtualCamera : ICinemachineCamera // TypeDefIndex: 2951
	{
		// Fields
		[CompilerGenerated] // 0x0050CEAC-0x0050CEBC
		private string _Name_k__BackingField; // 0x10
		[CompilerGenerated] // 0x0050CEBC-0x0050CECC
		private int _Priority_k__BackingField; // 0x18
		[CompilerGenerated] // 0x0050CECC-0x0050CEDC
		private Transform _LookAt_k__BackingField; // 0x20
		[CompilerGenerated] // 0x0050CEDC-0x0050CEEC
		private Transform _Follow_k__BackingField; // 0x28
		[CompilerGenerated] // 0x0050CEEC-0x0050CEFC
		private CameraState _State_k__BackingField; // 0x30
	
		// Properties
		public string Name { [CompilerGenerated] /* 0x0050F068-0x0050F078 */ get; [CompilerGenerated] /* 0x0050F078-0x0050F088 */ private set; } // 0x009539F4-0x009539FC 0x009539FC-0x00953A04
		public string Description { get; } // 0x00953A04-0x00953A4C 
		public int Priority { [CompilerGenerated] /* 0x0050F088-0x0050F098 */ get; [CompilerGenerated] /* 0x0050F098-0x0050F0A8 */ set; } // 0x00953A4C-0x00953A54 0x00953A54-0x00953A5C
		public Transform LookAt { [CompilerGenerated] /* 0x0050F0A8-0x0050F0B8 */ get; [CompilerGenerated] /* 0x0050F0B8-0x0050F0C8 */ set; } // 0x00953A5C-0x00953A64 0x00953A64-0x00953A6C
		public Transform Follow { [CompilerGenerated] /* 0x0050F0C8-0x0050F0D8 */ get; [CompilerGenerated] /* 0x0050F0D8-0x0050F0E8 */ set; } // 0x00953A6C-0x00953A74 0x00953A74-0x00953A7C
		public CameraState State { [CompilerGenerated] /* 0x0050F0E8-0x0050F0F8 */ get; [CompilerGenerated] /* 0x0050F0F8-0x0050F108 */ private set; } // 0x00953A7C-0x00953A8C 0x00953A8C-0x00953AA8
		public GameObject VirtualCameraGameObject { get; } // 0x00953AA8-0x00953AB0 
		public bool IsValid { get; } // 0x00953AB0-0x00953AB8 
		public ICinemachineCamera ParentCamera { get; } // 0x00953AB8-0x00953AC0 
	
		// Constructors
		public StaticPointVirtualCamera(CameraState state, string name); // 0x00952FC0-0x009530F8
	
		// Methods
		public void SetState(CameraState state); // 0x009539D8-0x009539F4
		public bool IsLiveChild(ICinemachineCamera vcam); // 0x00953AC0-0x00953AC8
		public void UpdateCameraState(Vector3 worldUp, float deltaTime); // 0x00953AC8-0x00953ACC
		public void InternalUpdateCameraState(Vector3 worldUp, float deltaTime); // 0x00953ACC-0x00953AD0
		public void OnTransitionFromCamera(ICinemachineCamera fromCam, Vector3 worldUp, float deltaTime); // 0x00953AD0-0x00953AD4
		public void OnTargetObjectWarped(Transform target, Vector3 positionDelta); // 0x00953AD4-0x00953AD8
	}

	internal class BlendSourceVirtualCamera : ICinemachineCamera // TypeDefIndex: 2952
	{
		// Fields
		[CompilerGenerated] // 0x0050CEFC-0x0050CF0C
		private CinemachineBlend _Blend_k__BackingField; // 0x10
		[CompilerGenerated] // 0x0050CF0C-0x0050CF1C
		private int _Priority_k__BackingField; // 0x18
		[CompilerGenerated] // 0x0050CF1C-0x0050CF2C
		private Transform _LookAt_k__BackingField; // 0x20
		[CompilerGenerated] // 0x0050CF2C-0x0050CF3C
		private Transform _Follow_k__BackingField; // 0x28
		[CompilerGenerated] // 0x0050CF3C-0x0050CF4C
		private CameraState _State_k__BackingField; // 0x30
	
		// Properties
		public CinemachineBlend Blend { [CompilerGenerated] /* 0x0050F108-0x0050F118 */ get; [CompilerGenerated] /* 0x0050F118-0x0050F128 */ set; } // 0x0099B2A0-0x0099B2A8 0x0099B2A8-0x0099B2B0
		public string Name { get; } // 0x0099B2B0-0x0099B2F8 
		public string Description { get; } // 0x0099B2F8-0x0099B358 
		public int Priority { [CompilerGenerated] /* 0x0050F128-0x0050F138 */ get; [CompilerGenerated] /* 0x0050F138-0x0050F148 */ set; } // 0x0099B68C-0x0099B694 0x0099B694-0x0099B69C
		public Transform LookAt { [CompilerGenerated] /* 0x0050F148-0x0050F158 */ get; [CompilerGenerated] /* 0x0050F158-0x0050F168 */ set; } // 0x0099B69C-0x0099B6A4 0x0099B6A4-0x0099B6AC
		public Transform Follow { [CompilerGenerated] /* 0x0050F168-0x0050F178 */ get; [CompilerGenerated] /* 0x0050F178-0x0050F188 */ set; } // 0x0099B6AC-0x0099B6B4 0x0099B6B4-0x0099B6BC
		public CameraState State { [CompilerGenerated] /* 0x0050F188-0x0050F198 */ get; [CompilerGenerated] /* 0x0050F198-0x0050F1A8 */ private set; } // 0x0099B6BC-0x0099B6CC 0x0099B6CC-0x0099B6E8
		public GameObject VirtualCameraGameObject { get; } // 0x0099B6E8-0x0099B6F0 
		public bool IsValid { get; } // 0x0099B6F0-0x0099B700 
		public ICinemachineCamera ParentCamera { get; } // 0x0099B840-0x0099B848 
	
		// Constructors
		public BlendSourceVirtualCamera(CinemachineBlend blend); // 0x0099B274-0x0099B2A0
	
		// Methods
		public bool IsLiveChild(ICinemachineCamera vcam); // 0x0099B848-0x0099B87C
		public CameraState CalculateNewState(float deltaTime); // 0x0099B87C-0x0099B88C
		public void UpdateCameraState(Vector3 worldUp, float deltaTime); // 0x0099B88C-0x0099B8E0
		public void InternalUpdateCameraState(Vector3 worldUp, float deltaTime); // 0x0099BF64-0x0099BF68
		public void OnTransitionFromCamera(ICinemachineCamera fromCam, Vector3 worldUp, float deltaTime); // 0x0099BF68-0x0099BF6C
		public void OnTargetObjectWarped(Transform target, Vector3 positionDelta); // 0x0099BF6C-0x0099C460
	}

	[Serializable]
	[DocumentationSorting] // 0x00508BA4-0x00508BB8
	public sealed class CinemachineBlenderSettings : ScriptableObject // TypeDefIndex: 2953
	{
		// Fields
		[Tooltip] // 0x0050CF4C-0x0050CF84
		public CustomBlend[] m_CustomBlends; // 0x18
		public const string kBlendFromAnyCameraLabel = "**ANY CAMERA**"; // Metadata: 0x001F4F24
	
		// Nested types
		[Serializable]
		[DocumentationSorting] // 0x00508F74-0x00508F88
		public struct CustomBlend // TypeDefIndex: 2954
		{
			// Fields
			[Tooltip] // 0x0050E264-0x0050E29C
			public string m_From; // 0x00
			[Tooltip] // 0x0050E29C-0x0050E2D4
			public string m_To; // 0x08
			[CinemachineBlendDefinitionProperty] // 0x0050E2D4-0x0050E320
			[Tooltip] // 0x0050E2D4-0x0050E320
			public CinemachineBlendDefinition m_Blend; // 0x10
		}
	
		// Constructors
		public CinemachineBlenderSettings(); // 0x009A02E8-0x009A02F0
	
		// Methods
		public CinemachineBlendDefinition GetBlendForVirtualCameras(string fromCameraName, string toCameraName, CinemachineBlendDefinition defaultBlend); // 0x009A00B4-0x009A02E8
	}

	[DocumentationSorting] // 0x00508BB8-0x00508BCC
	public abstract class CinemachineComponentBase : MonoBehaviour // TypeDefIndex: 2955
	{
		// Fields
		protected const float Epsilon = 0.0001f; // Metadata: 0x001F4F36
		private CinemachineVirtualCameraBase m_vcamOwner; // 0x18
		private Transform mCachedFollowTarget; // 0x20
		private CinemachineVirtualCameraBase mCachedFollowTargetVcam; // 0x28
		private CinemachineTargetGroup mCachedFollowTargetGroup; // 0x30
		private Transform mCachedLookAtTarget; // 0x38
		private CinemachineVirtualCameraBase mCachedLookAtTargetVcam; // 0x40
		private CinemachineTargetGroup mCachedLookAtTargetGroup; // 0x48
	
		// Properties
		public CinemachineVirtualCameraBase VirtualCamera { get; } // 0x009A9384-0x009A94D8 
		public Transform FollowTarget { get; } // 0x009A94D8-0x009A9588 
		public Transform LookAtTarget { get; } // 0x009A9588-0x009A9638 
		public CinemachineTargetGroup FollowTargetGroup { get; } // 0x009A9708-0x009A97A4 
		public Vector3 FollowTargetPosition { get; } // 0x009A97A4-0x009A9938 
		public Quaternion FollowTargetRotation { get; } // 0x009A9938-0x009A9B0C 
		public CinemachineTargetGroup LookAtTargetGroup { get; } // 0x009A9BDC-0x009A9C78 
		public Vector3 LookAtTargetPosition { get; } // 0x009A9C78-0x009A9E0C 
		public Quaternion LookAtTargetRotation { get; } // 0x009A9E0C-0x009A9FA0 
		public CameraState VcamState { get; } // 0x009A9FA0-0x009AA084 
		public abstract bool IsValid { get; }
		public abstract CinemachineCore.Stage Stage { get; }
	
		// Constructors
		protected CinemachineComponentBase(); // 0x0099E4B4-0x0099E4BC
	
		// Methods
		private void UpdateFollowTargetCache(); // 0x009A9638-0x009A9708
		private void UpdateLookAtTargetCache(); // 0x009A9B0C-0x009A9BDC
		public virtual void PrePipelineMutateCameraState(ref CameraState curState); // 0x009AA084-0x009AA088
		public abstract void MutateCameraState(ref CameraState curState, float deltaTime);
		public virtual bool OnTransitionFromCamera(ICinemachineCamera fromCam, Vector3 worldUp, float deltaTime, ref CinemachineVirtualCameraBase.TransitionParams transitionParams); // 0x009AA088-0x009AA090
		public virtual void OnTargetObjectWarped(Transform target, Vector3 positionDelta); // 0x009AA090-0x009AA094
	}

	public sealed class CinemachineCore // TypeDefIndex: 2956
	{
		// Fields
		public static readonly int kStreamingVersion; // 0x00
		public static readonly string kVersionString; // 0x08
		private static CinemachineCore sInstance; // 0x10
		public static bool sShowHiddenObjects; // 0x18
		public static AxisInputDelegate GetInputAxis; // 0x20
		public static CinemachineBrain.BrainEvent CameraUpdatedEvent; // 0x28
		private List<CinemachineBrain> mActiveBrains; // 0x10
		private List<CinemachineVirtualCameraBase> mActiveCameras; // 0x18
		private List<List<CinemachineVirtualCameraBase>> mAllCameras; // 0x20
		private CinemachineVirtualCameraBase mRoundRobinVcamLastFrame; // 0x28
		private static float mLastUpdateTime; // 0x30
		[CompilerGenerated] // 0x0050CF84-0x0050CF94
		private static int _FixedFrameCount_k__BackingField; // 0x34
		private static Dictionary<CinemachineVirtualCameraBase, UpdateStatus> mUpdateStatus; // 0x38
		[CompilerGenerated] // 0x0050CF94-0x0050CFA4
		private UpdateFilter _CurrentUpdateFilter_k__BackingField; // 0x30
	
		// Properties
		public static CinemachineCore Instance { get; } // 0x0099F7D8-0x0099F894 
		public int BrainCount { get; } // 0x009ACE0C-0x009ACE60 
		public int VirtualCameraCount { get; } // 0x009A3114-0x009A3168 
		private static int FixedFrameCount { [CompilerGenerated] /* 0x0050F1A8-0x0050F1B8 */ get; [CompilerGenerated] /* 0x0050F1B8-0x0050F1C8 */ set; } // 0x009AD25C-0x009AD2C4 0x009AD2C4-0x009AD330
		internal UpdateFilter CurrentUpdateFilter { [CompilerGenerated] /* 0x0050F1D8-0x0050F1E8 */ get; [CompilerGenerated] /* 0x0050F1E8-0x0050F1F8 */ set; } // 0x009AD954-0x009AD95C 0x009AD95C-0x009AD964
	
		// Nested types
		public enum Stage // TypeDefIndex: 2957
		{
			Body = 0,
			Aim = 1,
			Noise = 2,
			Finalize = 3
		}
	
		public delegate float AxisInputDelegate(string axisName); // TypeDefIndex: 2958; 0x0099AAF4-0x0099B26C
	
		private class UpdateStatus // TypeDefIndex: 2959
		{
			// Fields
			public int lastUpdateFrame; // 0x10
			public int lastUpdateFixedFrame; // 0x14
			public UpdateTracker.UpdateClock lastUpdateMode; // 0x18
	
			// Constructors
			public UpdateStatus(); // 0x009AD894-0x009AD8C8
		}
	
		internal enum UpdateFilter // TypeDefIndex: 2960
		{
			Fixed = 0,
			Late = 1,
			Smart = 8,
			SmartFixed = 8,
			SmartLate = 9
		}
	
		// Constructors
		public CinemachineCore(); // 0x009ACD4C-0x009ACE0C
		static CinemachineCore(); // 0x009ADC74-0x009ADD4C
	
		// Methods
		public CinemachineBrain GetActiveBrain(int index); // 0x009ACE60-0x009ACEDC
		internal void AddActiveBrain(CinemachineBrain brain); // 0x009A09FC-0x009A0A74
		internal void RemoveActiveBrain(CinemachineBrain brain); // 0x009A0C04-0x009A0C6C
		public CinemachineVirtualCameraBase GetVirtualCamera(int index); // 0x009A3168-0x009A31E4
		internal void AddActiveCamera(CinemachineVirtualCameraBase vcam); // 0x009ACEDC-0x009ACFC0
		internal void RemoveActiveCamera(CinemachineVirtualCameraBase vcam); // 0x009ACFC0-0x009AD028
		internal void CameraAwakened(CinemachineVirtualCameraBase vcam); // 0x009AD028-0x009AD1A4
		internal void CameraDestroyed(CinemachineVirtualCameraBase vcam); // 0x009AD1A4-0x009AD25C
		internal void UpdateAllActiveVirtualCameras(int layerMask, Vector3 worldUp, float deltaTime); // 0x009A2134-0x009A2578
		internal void UpdateVirtualCamera(CinemachineVirtualCameraBase vcam, Vector3 worldUp, float deltaTime); // 0x009AD330-0x009AD718
		[RuntimeInitializeOnLoadMethod] // 0x0050F1C8-0x0050F1D8
		private static void InitializeModule(); // 0x009AD8C8-0x009AD954
		private static Transform GetUpdateTarget(CinemachineVirtualCameraBase vcam); // 0x009AD718-0x009AD894
		internal UpdateTracker.UpdateClock GetVcamUpdateStatus(CinemachineVirtualCameraBase vcam); // 0x009AD964-0x009ADA40
		public bool IsLive(ICinemachineCamera vcam); // 0x009A0540-0x009A0630
		public void GenerateCameraActivationEvent(ICinemachineCamera vcam, ICinemachineCamera vcamFrom); // 0x0099F894-0x0099F9A4
		public void GenerateCameraCutEvent(ICinemachineCamera vcam); // 0x0099F9A4-0x0099FAA4
		public CinemachineBrain FindPotentialTargetBrain(CinemachineVirtualCameraBase vcam); // 0x009ADA40-0x009ADC74
	}

	[DocumentationSorting] // 0x00508BCC-0x00508BE0
	public abstract class CinemachineExtension : MonoBehaviour // TypeDefIndex: 2961
	{
		// Fields
		protected const float Epsilon = 0.0001f; // Metadata: 0x001F4F5E
		private CinemachineVirtualCameraBase m_vcamOwner; // 0x18
		private Dictionary<ICinemachineCamera, object> mExtraState; // 0x20
	
		// Properties
		public CinemachineVirtualCameraBase VirtualCamera { get; } // 0x009AE04C-0x009AE0E4 
	
		// Constructors
		protected CinemachineExtension(); // 0x009A892C-0x009A8934
	
		// Methods
		protected virtual void Awake(); // 0x009AE0E4-0x009AE0F4
		protected virtual void OnDestroy(); // 0x009AE0F4-0x009AE104
		protected virtual void ConnectToVcam(bool connect); // 0x009AE104-0x009AE248
		public void InvokePostPipelineStageCallback(CinemachineVirtualCameraBase vcam, CinemachineCore.Stage stage, ref CameraState state, float deltaTime); // 0x009AE248-0x009AE254
		protected abstract void PostPipelineStageCallback(CinemachineVirtualCameraBase vcam, CinemachineCore.Stage stage, ref CameraState state, float deltaTime);
		public virtual void OnTargetObjectWarped(Transform target, Vector3 positionDelta); // 0x009AE254-0x009AE258
		protected T GetExtraState<T>(ICinemachineCamera vcam)
			where T : class, new();
		protected List<T> GetAllExtraStates<T>()
			where T : class, new();
	}

	public abstract class CinemachinePathBase : MonoBehaviour // TypeDefIndex: 2962
	{
		// Fields
		[Range] // 0x0050CFA4-0x0050CFFC
		[Tooltip] // 0x0050CFA4-0x0050CFFC
		public int m_Resolution; // 0x18
		[Tooltip] // 0x0050CFFC-0x0050D034
		public Appearance m_Appearance; // 0x20
		private float[] m_DistanceToPos; // 0x28
		private float[] m_PosToDistance; // 0x30
		private int m_CachedSampleSteps; // 0x38
		private float m_PathLength; // 0x3C
		private float m_cachedPosStepSize; // 0x40
		private float m_cachedDistanceStepSize; // 0x44
	
		// Properties
		public abstract float MinPos { get; }
		public abstract float MaxPos { get; }
		public abstract bool Looped { get; }
		public abstract int DistanceCacheSampleStepsPerSegment { get; }
		public float PathLength { get; } // 0x00946BE8-0x00946C54 
	
		// Nested types
		[Serializable]
		[DocumentationSorting] // 0x00508F88-0x00508F9C
		public class Appearance // TypeDefIndex: 2963
		{
			// Fields
			[Tooltip] // 0x0050E320-0x0050E358
			public Color pathColor; // 0x10
			[Tooltip] // 0x0050E358-0x0050E390
			public Color inactivePathColor; // 0x20
			[Range] // 0x0050E390-0x0050E3E4
			[Tooltip] // 0x0050E390-0x0050E3E4
			public float width; // 0x30
	
			// Constructors
			public Appearance(); // 0x00947580-0x009475D0
		}
	
		public enum PositionUnits // TypeDefIndex: 2964
		{
			PathUnits = 0,
			Distance = 1,
			Normalized = 2
		}
	
		// Constructors
		protected CinemachinePathBase(); // 0x009466E0-0x0094674C
	
		// Methods
		public virtual float StandardizePos(float pos); // 0x0094674C-0x00946854
		public abstract Vector3 EvaluatePosition(float pos);
		public abstract Vector3 EvaluateTangent(float pos);
		public abstract Quaternion EvaluateOrientation(float pos);
		public virtual float FindClosestPoint(Vector3 p, int startSegment, int searchRadius, int stepsPerSegment); // 0x00946854-0x00946BA0
		public float MinUnit(PositionUnits units); // 0x00946BA0-0x00946BC0
		public float MaxUnit(PositionUnits units); // 0x00946BC0-0x00946BE8
		public virtual float StandardizeUnit(float pos, PositionUnits units); // 0x00946C54-0x00946CF0
		public Vector3 EvaluatePositionAtUnit(float pos, PositionUnits units); // 0x00946DCC-0x00946DF8
		public Vector3 EvaluateTangentAtUnit(float pos, PositionUnits units); // 0x00946FC8-0x00946FF4
		public Quaternion EvaluateOrientationAtUnit(float pos, PositionUnits units); // 0x00946FF4-0x00947020
		public virtual void InvalidateDistanceCache(); // 0x00947020-0x0094702C
		public bool DistanceCacheIsValid(); // 0x0094702C-0x009470C4
		public float StandardizePathDistance(float distance); // 0x00946CF0-0x00946DCC
		public float ToNativePathUnits(float pos, PositionUnits units); // 0x00946DF8-0x00946FC8
		public float FromPathNativeUnits(float pos, PositionUnits units); // 0x009473F0-0x00947580
		private void ResamplePath(int stepsPerSegment); // 0x009470C4-0x009473F0
	}

	public sealed class AxisStatePropertyAttribute : PropertyAttribute // TypeDefIndex: 2965
	{
		// Constructors
		public AxisStatePropertyAttribute(); // 0x0099B26C-0x0099B274
	}

	public sealed class OrbitalTransposerHeadingPropertyAttribute : PropertyAttribute // TypeDefIndex: 2966
	{
		// Constructors
		public OrbitalTransposerHeadingPropertyAttribute(); // 0x009539C8-0x009539D0
	}

	public sealed class LensSettingsPropertyAttribute : PropertyAttribute // TypeDefIndex: 2967
	{
		// Constructors
		public LensSettingsPropertyAttribute(); // 0x00953528-0x00953530
	}

	public sealed class CinemachineBlendDefinitionPropertyAttribute : PropertyAttribute // TypeDefIndex: 2968
	{
		// Constructors
		public CinemachineBlendDefinitionPropertyAttribute(); // 0x0099ED2C-0x0099ED34
	}

	public sealed class SaveDuringPlayAttribute : Attribute // TypeDefIndex: 2969
	{
		// Constructors
		public SaveDuringPlayAttribute(); // 0x009539D0-0x009539D8
	}

	public sealed class NoSaveDuringPlayAttribute : PropertyAttribute // TypeDefIndex: 2970
	{
		// Constructors
		public NoSaveDuringPlayAttribute(); // 0x00953530-0x00953538
	}

	public sealed class TagFieldAttribute : PropertyAttribute // TypeDefIndex: 2971
	{
		// Constructors
		public TagFieldAttribute(); // 0x00953AD8-0x00953AE0
	}

	public sealed class NoiseSettingsPropertyAttribute : PropertyAttribute // TypeDefIndex: 2972
	{
		// Constructors
		public NoiseSettingsPropertyAttribute(); // 0x009539C0-0x009539C8
	}

	public sealed class CinemachineEmbeddedAssetPropertyAttribute : PropertyAttribute // TypeDefIndex: 2973
	{
		// Fields
		public bool WarnIfNull; // 0x10
	
		// Constructors
		public CinemachineEmbeddedAssetPropertyAttribute(bool warnIfNull = false /* Metadata: 0x001F4F6E */); // 0x009AE01C-0x009AE04C
	}

	[DocumentationSorting] // 0x00508BE0-0x00508BF4
	public sealed class DocumentationSortingAttribute : Attribute // TypeDefIndex: 2974
	{
		// Fields
		[CompilerGenerated] // 0x0050D034-0x0050D044
		private Level _Category_k__BackingField; // 0x10
	
		// Properties
		public Level Category { [CompilerGenerated] /* 0x0050F1F8-0x0050F208 */ get; [CompilerGenerated] /* 0x0050F208-0x0050F218 */ private set; } // 0x009530F8-0x00953100 0x00953100-0x00953108
	
		// Nested types
		public enum Level // TypeDefIndex: 2975
		{
			Undoc = 0,
			API = 1,
			UserRef = 2
		}
	
		// Constructors
		public DocumentationSortingAttribute(Level category); // 0x00953108-0x0095316C
	}

	[SaveDuringPlay] // 0x00508BF4-0x00508C04
	public abstract class CinemachineVirtualCameraBase : MonoBehaviour, ICinemachineCamera // TypeDefIndex: 2976
	{
		// Fields
		[HideInInspector] // 0x0050D044-0x0050D08C
		[NoSaveDuringPlay] // 0x0050D044-0x0050D08C
		[SerializeField] // 0x0050D044-0x0050D08C
		public string[] m_ExcludedPropertiesInInspector; // 0x18
		[HideInInspector] // 0x0050D08C-0x0050D0D4
		[NoSaveDuringPlay] // 0x0050D08C-0x0050D0D4
		[SerializeField] // 0x0050D08C-0x0050D0D4
		public CinemachineCore.Stage[] m_LockStageInInspector; // 0x20
		private int m_ValidatingStreamVersion; // 0x28
		private bool m_OnValidateCalled; // 0x2C
		[HideInInspector] // 0x0050D0D4-0x0050D11C
		[NoSaveDuringPlay] // 0x0050D0D4-0x0050D11C
		[SerializeField] // 0x0050D0D4-0x0050D11C
		private int m_StreamingVersion; // 0x30
		[NoSaveDuringPlay] // 0x0050D11C-0x0050D168
		[Tooltip] // 0x0050D11C-0x0050D168
		public int m_Priority; // 0x34
		[Tooltip] // 0x0050D168-0x0050D1A0
		public StandbyUpdateMode m_StandbyUpdate; // 0x38
		private List<CinemachineExtension> mExtensions; // 0x40
		private bool m_previousStateIsValid; // 0x48
		private Transform m_previousLookAtTarget; // 0x50
		private Transform m_previousFollowTarget; // 0x58
		private bool mSlaveStatusUpdated; // 0x60
		private CinemachineVirtualCameraBase m_parentVcam; // 0x68
		private int m_QueuePriority; // 0x70
	
		// Properties
		public int ValidatingStreamVersion { get; private set; } // 0x009508D4-0x00950950 0x00952A58-0x00952A60
		public string Name { get; } // 0x00940F18-0x00940F20 
		public virtual string Description { get; } // 0x00952BC8-0x00952C10 
		public int Priority { get; set; } // 0x00952C10-0x00952C18 0x00952C18-0x00952C20
		public GameObject VirtualCameraGameObject { get; } // 0x00952C20-0x00952CAC 
		public bool IsValid { get; } // 0x00952CAC-0x00952D24 
		public abstract CameraState State { get; }
		public ICinemachineCamera ParentCamera { get; } // 0x00952B8C-0x00952BC8 
		public abstract Transform LookAt { get; set; }
		public abstract Transform Follow { get; set; }
		public bool PreviousStateIsValid { get; set; } // 0x00949CC8-0x00949E00 0x00952DF4-0x00952E00
	
		// Nested types
		public enum StandbyUpdateMode // TypeDefIndex: 2977
		{
			Never = 0,
			Always = 1,
			RoundRobin = 2
		}
	
		public enum BlendHint // TypeDefIndex: 2978
		{
			None = 0,
			SphericalPosition = 1,
			CylindricalPosition = 2,
			ScreenSpaceAimWhenTargetsDiffer = 3
		}
	
		[Serializable]
		public struct TransitionParams // TypeDefIndex: 2979
		{
			// Fields
			[FormerlySerializedAs] // 0x0050E3E4-0x0050E444
			[Tooltip] // 0x0050E3E4-0x0050E444
			public BlendHint m_BlendHint; // 0x00
			[Tooltip] // 0x0050E444-0x0050E47C
			public bool m_InheritPosition; // 0x04
			[Tooltip] // 0x0050E47C-0x0050E4B4
			public CinemachineBrain.VcamActivatedEvent m_OnCameraLive; // 0x08
		}
	
		// Constructors
		protected CinemachineVirtualCameraBase(); // 0x00941ECC-0x00941F9C
	
		// Methods
		public virtual void AddExtension(CinemachineExtension extension); // 0x00952A60-0x00952B18
		public virtual void RemoveExtension(CinemachineExtension extension); // 0x00952B18-0x00952B8C
		protected void InvokePostPipelineStageCallback(CinemachineVirtualCameraBase vcam, CinemachineCore.Stage stage, ref CameraState newState, float deltaTime); // 0x00941C60-0x00941E2C
		protected void ApplyPositionBlendMethod(ref CameraState state, BlendHint hint); // 0x0095045C-0x00950484
		public virtual bool IsLiveChild(ICinemachineCamera vcam); // 0x00952DEC-0x00952DF4
		public void UpdateCameraState(Vector3 worldUp, float deltaTime); // 0x0094A2FC-0x0094A3A4
		public abstract void InternalUpdateCameraState(Vector3 worldUp, float deltaTime);
		public virtual void OnTransitionFromCamera(ICinemachineCamera fromCam, Vector3 worldUp, float deltaTime); // 0x009419F0-0x00941A2C
		protected virtual void OnDestroy(); // 0x00950D00-0x00950D78
		protected virtual void OnTransformParentChanged(); // 0x00952E00-0x00952EA0
		protected virtual void Start(); // 0x00952FA4-0x00952FA8
		protected virtual void OnValidate(); // 0x00941750-0x009417D0
		protected virtual void OnEnable(); // 0x00941464-0x00941684
		protected virtual void OnDisable(); // 0x0094A904-0x0094A984
		protected virtual void Update(); // 0x00952FA8-0x00952FC0
		private void UpdateSlaveStatus(); // 0x00952D24-0x00952DEC
		protected Transform ResolveLookAt(Transform localLookAt); // 0x00949334-0x00949450
		protected Transform ResolveFollow(Transform localFollow); // 0x00949460-0x0094957C
		private void UpdateVcamPoolStatus(); // 0x00952EA0-0x00952FA4
		public void MoveToTopOfPrioritySubqueue(); // 0x0094FE78-0x0094FE7C
		public virtual void OnTargetObjectWarped(Transform target, Vector3 positionDelta); // 0x00941368-0x0094143C
		protected CinemachineBlend CreateBlend(ICinemachineCamera camA, ICinemachineCamera camB, CinemachineBlendDefinition blendDef, CinemachineBlend activeBlend); // 0x0094A578-0x0094A6F4
		protected CameraState PullStateFromVirtualCamera(Vector3 worldUp, ref LensSettings lens); // 0x00950690-0x009508CC
	}

	public interface ICinemachineCamera // TypeDefIndex: 2980
	{
		// Properties
		string Name { get; }
		string Description { get; }
		int Priority { get; set; }
		Transform LookAt { get; set; }
		Transform Follow { get; set; }
		CameraState State { get; }
		GameObject VirtualCameraGameObject { get; }
		bool IsValid { get; }
		ICinemachineCamera ParentCamera { get; }
	
		// Methods
		bool IsLiveChild(ICinemachineCamera vcam);
		void UpdateCameraState(Vector3 worldUp, float deltaTime);
		void InternalUpdateCameraState(Vector3 worldUp, float deltaTime);
		void OnTransitionFromCamera(ICinemachineCamera fromCam, Vector3 worldUp, float deltaTime);
		void OnTargetObjectWarped(Transform target, Vector3 positionDelta);
	}

	[Serializable]
	[DocumentationSorting] // 0x00508C04-0x00508C18
	public struct LensSettings // TypeDefIndex: 2981
	{
		// Fields
		public static LensSettings Default; // 0x00
		[Range] // 0x0050D1A0-0x0050D1F8
		[Tooltip] // 0x0050D1A0-0x0050D1F8
		public float FieldOfView; // 0x00
		[Tooltip] // 0x0050D1F8-0x0050D230
		public float OrthographicSize; // 0x04
		[Tooltip] // 0x0050D230-0x0050D268
		public float NearClipPlane; // 0x08
		[Tooltip] // 0x0050D268-0x0050D2A0
		public float FarClipPlane; // 0x0C
		[Range] // 0x0050D2A0-0x0050D2FC
		[Tooltip] // 0x0050D2A0-0x0050D2FC
		public float Dutch; // 0x10
		[CompilerGenerated] // 0x0050D2FC-0x0050D30C
		private bool _Orthographic_k__BackingField; // 0x14
		[CompilerGenerated] // 0x0050D30C-0x0050D31C
		private bool _IsPhysicalCamera_k__BackingField; // 0x15
		[CompilerGenerated] // 0x0050D31C-0x0050D32C
		private Vector2 _SensorSize_k__BackingField; // 0x18
		public Vector2 LensShift; // 0x20
	
		// Properties
		public bool Orthographic { [CompilerGenerated] /* 0x0050F218-0x0050F228 */ get; [CompilerGenerated] /* 0x0050F228-0x0050F238 */ set; } // 0x00584F64-0x00584F6C 0x00584F6C-0x00584F78
		public bool IsPhysicalCamera { [CompilerGenerated] /* 0x0050F238-0x0050F248 */ get; [CompilerGenerated] /* 0x0050F248-0x0050F258 */ set; } // 0x00584F78-0x00584F80 0x00584F80-0x00584F8C
		public Vector2 SensorSize { [CompilerGenerated] /* 0x0050F258-0x0050F268 */ get; [CompilerGenerated] /* 0x0050F268-0x0050F278 */ set; } // 0x00584F8C-0x00584F94 0x00584F94-0x00584F9C
		public float Aspect { get; } // 0x00584F9C-0x00584FB4 
	
		// Constructors
		public LensSettings(float fov, float orthographicSize, float nearClip, float farClip, float dutch); // 0x00584FD8-0x00584FF4
		static LensSettings(); // 0x009534C8-0x00953528
	
		// Methods
		public static LensSettings FromCamera(Camera fromCamera); // 0x0095316C-0x009532F0
		public void SnapshotCameraReadOnlyProperties(Camera camera); // 0x00584FB4-0x00584FBC
		public void SnapshotCameraReadOnlyProperties(ref LensSettings lens); // 0x00584FBC-0x00584FD8
		public static LensSettings Lerp(LensSettings lensA, LensSettings lensB, float t); // 0x009532F0-0x009534C8
		public void Validate(); // 0x00584FF4-0x00585040
	}

	[DocumentationSorting] // 0x00508C18-0x00508C2C
	public sealed class NoiseSettings : SignalSourceAsset // TypeDefIndex: 2982
	{
		// Fields
		[FormerlySerializedAs] // 0x0050D32C-0x0050D38C
		[Tooltip] // 0x0050D32C-0x0050D38C
		public TransformNoiseParams[] PositionNoise; // 0x18
		[FormerlySerializedAs] // 0x0050D38C-0x0050D3EC
		[Tooltip] // 0x0050D38C-0x0050D3EC
		public TransformNoiseParams[] OrientationNoise; // 0x20
	
		// Properties
		public override float SignalDuration { get; } // 0x00953734-0x0095373C 
	
		// Nested types
		[Serializable]
		[DocumentationSorting] // 0x00508F9C-0x00508FB0
		public struct NoiseParams // TypeDefIndex: 2983
		{
			// Fields
			[Tooltip] // 0x0050E4B4-0x0050E4EC
			public float Frequency; // 0x00
			[Tooltip] // 0x0050E4EC-0x0050E524
			public float Amplitude; // 0x04
			[Tooltip] // 0x0050E524-0x0050E55C
			public bool Constant; // 0x08
	
			// Methods
			public float GetValueAt(float time, float timeOffset); // 0x00585040-0x005850D8
		}
	
		[Serializable]
		[DocumentationSorting] // 0x00508FB0-0x00508FC4
		public struct TransformNoiseParams // TypeDefIndex: 2984
		{
			// Fields
			[Tooltip] // 0x0050E55C-0x0050E594
			public NoiseParams X; // 0x00
			[Tooltip] // 0x0050E594-0x0050E5CC
			public NoiseParams Y; // 0x0C
			[Tooltip] // 0x0050E5CC-0x0050E604
			public NoiseParams Z; // 0x18
	
			// Methods
			public Vector3 GetValueAt(float time, Vector3 timeOffsets); // 0x005850D8-0x00585130
		}
	
		// Constructors
		public NoiseSettings(); // 0x00953870-0x009538E0
	
		// Methods
		public static Vector3 GetCombinedFilterResults(TransformNoiseParams[] noiseParams, float time, Vector3 timeOffsets); // 0x00953538-0x00953734
		public override void GetSignal(float timeSinceSignalStart, out Vector3 pos, out Quaternion rot); // 0x0095373C-0x00953870
	}

	[DocumentationSorting] // 0x00508C2C-0x00508C40
	public static class RuntimeUtility // TypeDefIndex: 2985
	{
		// Methods
		public static void DestroyObject(UnityEngine.Object obj); // 0x0094C370-0x0094C410
	}

	public interface ISignalSource6D // TypeDefIndex: 2986
	{
		// Properties
		float SignalDuration { get; }
	
		// Methods
		void GetSignal(float timeSinceSignalStart, out Vector3 pos, out Quaternion rot);
	}

	[DocumentationSorting] // 0x00508C40-0x00508C54
	public abstract class SignalSourceAsset : ScriptableObject, ISignalSource6D // TypeDefIndex: 2987
	{
		// Properties
		public abstract float SignalDuration { get; }
	
		// Constructors
		protected SignalSourceAsset(); // 0x009538E0-0x009539C0
	
		// Methods
		public abstract void GetSignal(float timeSinceSignalStart, out Vector3 pos, out Quaternion rot);
	}

	[DocumentationSorting] // 0x00508C54-0x00508C68
	internal class UpdateTracker // TypeDefIndex: 2988
	{
		// Fields
		private static Dictionary<Transform, UpdateStatus> mUpdateStatus; // 0x00
		private static List<Transform> sToDelete; // 0x08
		private static float mLastUpdateTime; // 0x10
	
		// Nested types
		public enum UpdateClock // TypeDefIndex: 2989
		{
			Fixed = 0,
			Late = 1
		}
	
		private class UpdateStatus // TypeDefIndex: 2990
		{
			// Fields
			private const int kWindowSize = 30; // Metadata: 0x001F4F9F
			private int windowStart; // 0x10
			private int numWindowLateUpdateMoves; // 0x14
			private int numWindowFixedUpdateMoves; // 0x18
			private int numWindows; // 0x1C
			private int lastFrameUpdated; // 0x20
			private Matrix4x4 lastPos; // 0x24
			[CompilerGenerated] // 0x0050E604-0x0050E614
			private UpdateClock _PreferredUpdate_k__BackingField; // 0x64
	
			// Properties
			public UpdateClock PreferredUpdate { [CompilerGenerated] /* 0x0050F3A8-0x0050F3B8 */ get; [CompilerGenerated] /* 0x0050F3B8-0x0050F3C8 */ private set; } // 0x00954338-0x00954340 0x00954340-0x00954348
	
			// Constructors
			public UpdateStatus(int currentFrame, Matrix4x4 pos); // 0x0095416C-0x009541D0
	
			// Methods
			public void OnUpdate(int currentFrame, UpdateClock currentClock, Matrix4x4 pos); // 0x00953DFC-0x00953F9C
		}
	
		// Constructors
		public UpdateTracker(); // 0x0095428C-0x00954294
		static UpdateTracker(); // 0x00954294-0x00954338
	
		// Methods
		[RuntimeInitializeOnLoadMethod] // 0x0050F278-0x0050F288
		private static void InitializeModule(); // 0x00953AE0-0x00953B5C
		private static void UpdateTargets(UpdateClock currentClock); // 0x00953B5C-0x00953DFC
		public static UpdateClock GetPreferredUpdate(Transform target); // 0x00953F9C-0x0095416C
		public static void OnUpdate(UpdateClock currentClock); // 0x009541D0-0x0095428C
	}

	[DocumentationSorting] // 0x00508C68-0x00508CA4
	[SaveDuringPlay] // 0x00508C68-0x00508CA4
	public class CinemachineTriggerAction : MonoBehaviour // TypeDefIndex: 2991
	{
		// Fields
		[Header] // 0x0050D3EC-0x0050D44C
		[Tooltip] // 0x0050D3EC-0x0050D44C
		public LayerMask m_LayerMask; // 0x18
		[TagField] // 0x0050D44C-0x0050D498
		[Tooltip] // 0x0050D44C-0x0050D498
		public string m_WithTag; // 0x20
		[TagField] // 0x0050D498-0x0050D4E4
		[Tooltip] // 0x0050D498-0x0050D4E4
		public string m_WithoutTag; // 0x28
		[NoSaveDuringPlay] // 0x0050D4E4-0x0050D530
		[Tooltip] // 0x0050D4E4-0x0050D530
		public int m_SkipFirst; // 0x30
		[Tooltip] // 0x0050D530-0x0050D568
		public bool m_Repeating; // 0x34
		public ActionSettings m_OnObjectEnter; // 0x38
		public ActionSettings m_OnObjectExit; // 0x60
		private HashSet<GameObject> m_ActiveTriggerObjects; // 0x88
	
		// Nested types
		[Serializable]
		public struct ActionSettings // TypeDefIndex: 2992
		{
			// Fields
			[Tooltip] // 0x0050E614-0x0050E64C
			public Mode m_Action; // 0x00
			[Tooltip] // 0x0050E64C-0x0050E684
			public UnityEngine.Object m_Target; // 0x08
			[Tooltip] // 0x0050E684-0x0050E6BC
			public int m_BoostAmount; // 0x10
			[Tooltip] // 0x0050E6BC-0x0050E6F4
			public float m_StartTime; // 0x14
			[Tooltip] // 0x0050E6F4-0x0050E72C
			public TimeMode m_Mode; // 0x18
			[Tooltip] // 0x0050E72C-0x0050E764
			public TriggerEvent m_Event; // 0x20
	
			// Nested types
			public enum Mode // TypeDefIndex: 2993
			{
				Custom = 0,
				PriorityBoost = 1,
				Activate = 2,
				Deactivate = 3,
				Enable = 4,
				Disable = 5,
				Play = 6,
				Stop = 7
			}
	
			[Serializable]
			public class TriggerEvent : UnityEvent // TypeDefIndex: 2994
			{
				// Constructors
				public TriggerEvent(); // 0x0094FE70-0x0094FE78
			}
	
			public enum TimeMode // TypeDefIndex: 2995
			{
				FromStart = 0,
				FromEnd = 1,
				BeforeNow = 2,
				AfterNow = 3
			}
	
			// Constructors
			public ActionSettings(Mode action); // 0x00584E64-0x00584E6C
	
			// Methods
			public void Invoke(); // 0x00584E6C-0x00584F64
		}
	
		// Constructors
		public CinemachineTriggerAction(); // 0x0094FCDC-0x0094FE70
	
		// Methods
		private bool Filter(GameObject other); // 0x0094F3C4-0x0094F484
		private void InternalDoTriggerEnter(GameObject other); // 0x0094F484-0x0094FA48
		private void InternalDoTriggerExit(GameObject other); // 0x0094FA48-0x0094FAF8
		private void OnTriggerEnter(Collider other); // 0x0094FAF8-0x0094FB34
		private void OnTriggerExit(Collider other); // 0x0094FB34-0x0094FB70
		private void OnTriggerEnter2D(Collider2D other); // 0x0094FB70-0x0094FBAC
		private void OnTriggerExit2D(Collider2D other); // 0x0094FBAC-0x0094FBE8
		private void OnCollisionEnter(Collision other); // 0x0094FBE8-0x0094FC24
		private void OnCollisionExit(Collision other); // 0x0094FC24-0x0094FC60
		private void OnCollisionEnter2D(Collision2D other); // 0x0094FC60-0x0094FC9C
		private void OnCollisionExit2D(Collision2D other); // 0x0094FC9C-0x0094FCD8
		private void OnEnable(); // 0x0094FCD8-0x0094FCDC
	}

	[DocumentationSorting] // 0x00508CA4-0x00508CE0
	[SaveDuringPlay] // 0x00508CA4-0x00508CE0
	public class CinemachineCollisionImpulseSource : CinemachineImpulseSource // TypeDefIndex: 2996
	{
		// Fields
		[Header] // 0x0050D568-0x0050D5C8
		[Tooltip] // 0x0050D568-0x0050D5C8
		public LayerMask m_LayerMask; // 0x20
		[TagField] // 0x0050D5C8-0x0050D614
		[Tooltip] // 0x0050D5C8-0x0050D614
		public string m_IgnoreTag; // 0x28
		[Header] // 0x0050D614-0x0050D674
		[Tooltip] // 0x0050D614-0x0050D674
		public bool m_UseImpactDirection; // 0x30
		[Tooltip] // 0x0050D674-0x0050D6AC
		public bool m_ScaleImpactWithMass; // 0x31
		[Tooltip] // 0x0050D6AC-0x0050D6E4
		public bool m_ScaleImpactWithSpeed; // 0x32
		private Rigidbody mRigidBody; // 0x38
		private Rigidbody2D mRigidBody2D; // 0x40
	
		// Constructors
		public CinemachineCollisionImpulseSource(); // 0x009A9314-0x009A9384
	
		// Methods
		private void Start(); // 0x009A893C-0x009A89AC
		private void OnEnable(); // 0x009A89AC-0x009A89B0
		private void OnCollisionEnter(Collision c); // 0x009A89B0-0x009A8A0C
		private void OnTriggerEnter(Collider c); // 0x009A8CC0-0x009A8D40
		private void OnCollisionEnter2D(Collision2D c); // 0x009A8D40-0x009A8E00
		private void OnTriggerEnter2D(Collider2D c); // 0x009A8E00-0x009A8E80
		private float GetMassAndVelocity(Collider other, Collider2D other2d, ref Vector3 vel); // 0x009A8E80-0x009A9314
		private void GenerateImpactEvent(Collider other, Collider2D other2d, Vector3 vel); // 0x009A8A0C-0x009A8CC0
	}

	[DocumentationSorting] // 0x00508CE0-0x00508CF4
	public class CinemachineFixedSignal : SignalSourceAsset // TypeDefIndex: 2997
	{
		// Fields
		[Tooltip] // 0x0050D6E4-0x0050D71C
		public AnimationCurve m_XCurve; // 0x18
		[Tooltip] // 0x0050D71C-0x0050D754
		public AnimationCurve m_YCurve; // 0x20
		[Tooltip] // 0x0050D754-0x0050D78C
		public AnimationCurve m_ZCurve; // 0x28
	
		// Properties
		public override float SignalDuration { get; } // 0x009AE76C-0x009AE81C 
	
		// Constructors
		public CinemachineFixedSignal(); // 0x009AEA3C-0x009AEA44
	
		// Methods
		private float AxisDuration(AnimationCurve axis); // 0x009AE81C-0x009AE8E8
		public override void GetSignal(float timeSinceSignalStart, out Vector3 pos, out Quaternion rot); // 0x009AE8E8-0x009AE9E0
		private float AxisValue(AnimationCurve axis, float time); // 0x009AE9E0-0x009AEA3C
	}

	public sealed class CinemachineImpulseDefinitionPropertyAttribute : PropertyAttribute // TypeDefIndex: 2998
	{
		// Constructors
		public CinemachineImpulseDefinitionPropertyAttribute(); // 0x0093FA3C-0x0093FA44
	}

	[Serializable]
	[DocumentationSorting] // 0x00508CF4-0x00508D08
	public class CinemachineImpulseDefinition // TypeDefIndex: 2999
	{
		// Fields
		[CinemachineImpulseChannelProperty] // 0x0050D78C-0x0050D7D8
		[Tooltip] // 0x0050D78C-0x0050D7D8
		public int m_ImpulseChannel; // 0x10
		[CinemachineEmbeddedAssetProperty] // 0x0050D7D8-0x0050D84C
		[Header] // 0x0050D7D8-0x0050D84C
		[Tooltip] // 0x0050D7D8-0x0050D84C
		public SignalSourceAsset m_RawSignal; // 0x18
		[Tooltip] // 0x0050D84C-0x0050D884
		public float m_AmplitudeGain; // 0x20
		[Tooltip] // 0x0050D884-0x0050D8BC
		public float m_FrequencyGain; // 0x24
		[Tooltip] // 0x0050D8BC-0x0050D8F4
		public RepeatMode m_RepeatMode; // 0x28
		[Tooltip] // 0x0050D8F4-0x0050D92C
		public bool m_Randomize; // 0x2C
		[CinemachineImpulseEnvelopeProperty] // 0x0050D92C-0x0050D978
		[Tooltip] // 0x0050D92C-0x0050D978
		public CinemachineImpulseManager.EnvelopeDefinition m_TimeEnvelope; // 0x30
		[Header] // 0x0050D978-0x0050D9D8
		[Tooltip] // 0x0050D978-0x0050D9D8
		public float m_ImpactRadius; // 0x50
		[Tooltip] // 0x0050D9D8-0x0050DA10
		public CinemachineImpulseManager.ImpulseEvent.DirectionMode m_DirectionMode; // 0x54
		[Tooltip] // 0x0050DA10-0x0050DA48
		public CinemachineImpulseManager.ImpulseEvent.DissipationMode m_DissipationMode; // 0x58
		[Tooltip] // 0x0050DA48-0x0050DA80
		public float m_DissipationDistance; // 0x5C
	
		// Nested types
		public enum RepeatMode // TypeDefIndex: 3000
		{
			Stretch = 0,
			Loop = 1
		}
	
		private class SignalSource : ISignalSource6D // TypeDefIndex: 3001
		{
			// Fields
			private CinemachineImpulseDefinition m_Def; // 0x10
			private Vector3 m_Velocity; // 0x18
			private float m_StartTimeOffset; // 0x24
	
			// Properties
			public float SignalDuration { get; } // 0x0093F7D0-0x0093F800 
	
			// Constructors
			public SignalSource(CinemachineImpulseDefinition def, Vector3 velocity); // 0x0093F5F0-0x0093F68C
	
			// Methods
			public void GetSignal(float timeSinceSignalStart, out Vector3 pos, out Quaternion rot); // 0x0093F800-0x0093FA3C
		}
	
		// Constructors
		public CinemachineImpulseDefinition(); // 0x0093F748-0x0093F7A0
	
		// Methods
		public void OnValidate(); // 0x0093F0CC-0x0093F20C
		public void CreateEvent(Vector3 position, Vector3 velocity); // 0x0093F20C-0x0093F498
	}

	[AddComponentMenu] // 0x00508D08-0x00508D78
	[DocumentationSorting] // 0x00508D08-0x00508D78
	[ExecuteAlways] // 0x00508D08-0x00508D78
	[SaveDuringPlay] // 0x00508D08-0x00508D78
	public class CinemachineImpulseListener : CinemachineExtension // TypeDefIndex: 3002
	{
		// Fields
		[CinemachineImpulseChannelProperty] // 0x0050DA80-0x0050DACC
		[Tooltip] // 0x0050DA80-0x0050DACC
		public int m_ChannelMask; // 0x28
		[Tooltip] // 0x0050DACC-0x0050DB04
		public float m_Gain; // 0x2C
		[Tooltip] // 0x0050DB04-0x0050DB3C
		public bool m_Use2DDistance; // 0x30
	
		// Constructors
		public CinemachineImpulseListener(); // 0x0093FFEC-0x00940000
	
		// Methods
		protected override void PostPipelineStageCallback(CinemachineVirtualCameraBase vcam, CinemachineCore.Stage stage, ref CameraState state, float deltaTime); // 0x0093FA4C-0x0093FC78
	}

	public sealed class CinemachineImpulseEnvelopePropertyAttribute : PropertyAttribute // TypeDefIndex: 3003
	{
		// Constructors
		public CinemachineImpulseEnvelopePropertyAttribute(); // 0x0093FA44-0x0093FA4C
	}

	public sealed class CinemachineImpulseChannelPropertyAttribute : PropertyAttribute // TypeDefIndex: 3004
	{
		// Constructors
		public CinemachineImpulseChannelPropertyAttribute(); // 0x0093F0C4-0x0093F0CC
	}

	[DocumentationSorting] // 0x00508D78-0x00508D8C
	public class CinemachineImpulseManager // TypeDefIndex: 3005
	{
		// Fields
		private static CinemachineImpulseManager sInstance; // 0x00
		private const float Epsilon = 0.0001f; // Metadata: 0x001F4FDB
		private List<ImpulseEvent> m_ExpiredEvents; // 0x10
		private List<ImpulseEvent> m_ActiveEvents; // 0x18
	
		// Properties
		public static CinemachineImpulseManager Instance { get; } // 0x0093F498-0x0093F55C 
	
		// Nested types
		[Serializable]
		public struct EnvelopeDefinition // TypeDefIndex: 3006
		{
			// Fields
			[Tooltip] // 0x0050E764-0x0050E79C
			public AnimationCurve m_AttackShape; // 0x00
			[Tooltip] // 0x0050E79C-0x0050E7D4
			public AnimationCurve m_DecayShape; // 0x08
			[Tooltip] // 0x0050E7D4-0x0050E80C
			public float m_AttackTime; // 0x10
			[Tooltip] // 0x0050E80C-0x0050E844
			public float m_SustainTime; // 0x14
			[Tooltip] // 0x0050E844-0x0050E87C
			public float m_DecayTime; // 0x18
			[Tooltip] // 0x0050E87C-0x0050E8B4
			public bool m_ScaleWithImpact; // 0x1C
			[Tooltip] // 0x0050E8B4-0x0050E8EC
			public bool m_HoldForever; // 0x1D
	
			// Properties
			public float Duration { get; } // 0x00584CA0-0x00584CC4 
	
			// Methods
			public static EnvelopeDefinition Default(); // 0x0093F7A0-0x0093F7D0
			public float GetValueAt(float offset); // 0x00584CC4-0x00584CCC
			public void ChangeStopTime(float offset, bool forceNoDecay); // 0x00584CCC-0x00584CFC
			public void Clear(); // 0x00584CFC-0x00584D0C
			public void Validate(); // 0x00584D0C-0x00584D14
		}
	
		public class ImpulseEvent // TypeDefIndex: 3007
		{
			// Fields
			[Tooltip] // 0x0050E8EC-0x0050E924
			public float m_StartTime; // 0x10
			[Tooltip] // 0x0050E924-0x0050E95C
			public EnvelopeDefinition m_Envelope; // 0x18
			[Tooltip] // 0x0050E95C-0x0050E994
			public ISignalSource6D m_SignalSource; // 0x38
			[Tooltip] // 0x0050E994-0x0050E9CC
			public Vector3 m_Position; // 0x40
			[Tooltip] // 0x0050E9CC-0x0050EA04
			public float m_Radius; // 0x4C
			[Tooltip] // 0x0050EA04-0x0050EA3C
			public DirectionMode m_DirectionMode; // 0x50
			[Tooltip] // 0x0050EA3C-0x0050EA74
			public int m_Channel; // 0x54
			[Tooltip] // 0x0050EA74-0x0050EAAC
			public DissipationMode m_DissipationMode; // 0x58
			[Tooltip] // 0x0050EAAC-0x0050EAE4
			public float m_DissipationDistance; // 0x5C
	
			// Properties
			public bool Expired { get; } // 0x00940008-0x00940060 
	
			// Nested types
			public enum DirectionMode // TypeDefIndex: 3008
			{
				Fixed = 0,
				RotateTowardSource = 1
			}
	
			public enum DissipationMode // TypeDefIndex: 3009
			{
				LinearDecay = 0,
				SoftDecay = 1,
				ExponentialDecay = 2
			}
	
			// Constructors
			internal ImpulseEvent(); // 0x00940614-0x0094061C
	
			// Methods
			public void Cancel(float time, bool forceNoDecay); // 0x0094084C-0x00940884
			public float DistanceDecay(float distance); // 0x00940884-0x009409DC
			public bool GetDecayedSignal(Vector3 listenerPosition, bool use2D, out Vector3 pos, out Quaternion rot); // 0x009400F8-0x00940614
			public void Clear(); // 0x00940060-0x009400F8
		}
	
		// Constructors
		private CinemachineImpulseManager(); // 0x00940000-0x00940008
		static CinemachineImpulseManager(); // 0x009406D8-0x0094084C
	
		// Methods
		public bool GetImpulseAt(Vector3 listenerLocation, bool distance2D, int channelMask, out Vector3 pos, out Quaternion rot); // 0x0093FC78-0x0093FFEC
		public ImpulseEvent NewImpulseEvent(); // 0x0093F55C-0x0093F5F0
		public void AddImpulseEvent(ImpulseEvent e); // 0x0093F68C-0x0093F748
		public void Clear(); // 0x0094061C-0x009406D8
	}

	[DocumentationSorting] // 0x00508D8C-0x00508DC8
	[SaveDuringPlay] // 0x00508D8C-0x00508DC8
	public class CinemachineImpulseSource : MonoBehaviour // TypeDefIndex: 3010
	{
		// Fields
		[CinemachineImpulseDefinitionProperty] // 0x0050DB3C-0x0050DB4C
		public CinemachineImpulseDefinition m_ImpulseDefinition; // 0x18
	
		// Constructors
		public CinemachineImpulseSource(); // 0x00940AE8-0x00940BA0
	
		// Methods
		private void OnValidate(); // 0x009409DC-0x009409F4
		public void GenerateImpulseAt(Vector3 position, Vector3 velocity); // 0x009409F4-0x00940A04
		public void GenerateImpulse(Vector3 velocity); // 0x00940A04-0x00940A7C
		public void GenerateImpulse(); // 0x00940A7C-0x00940AE8
	}
}

namespace Cinemachine.Utility
{
	public class CinemachineDebug // TypeDefIndex: 3011
	{
		// Fields
		private static HashSet<UnityEngine.Object> mClients; // 0x00
		public static OnGUIDelegate OnGUIHandlers; // 0x08
		private static List<StringBuilder> mAvailableStringBuilders; // 0x10
	
		// Nested types
		public delegate void OnGUIDelegate(); // TypeDefIndex: 3012; 0x00954350-0x0095456C
	
		// Constructors
		public CinemachineDebug(); // 0x00954348-0x00954350
	
		// Methods
		public static void ReleaseScreenPos(UnityEngine.Object client); // 0x0094AB1C-0x0094ABBC
		public static Rect GetScreenPos(UnityEngine.Object client, string text, GUIStyle style); // 0x0094ABBC-0x0094AE3C
		public static StringBuilder SBFromPool(); // 0x00949160-0x0094921C
		public static void ReturnToPool(StringBuilder sb); // 0x0094921C-0x009492CC
	}

	internal abstract class GaussianWindow1d<T> // TypeDefIndex: 3013
	{
		// Fields
		protected T[] mData;
		protected float[] mKernel;
		protected float mKernelSum;
		protected int mCurrentPos;
		[CompilerGenerated] // 0x0050DB4C-0x0050DB5C
		private float _Sigma_k__BackingField;
	
		// Properties
		public float Sigma { [CompilerGenerated] /* 0x0050F288-0x0050F298 */ get; [CompilerGenerated] /* 0x0050F298-0x0050F2A8 */ private set; }
		public int KernelSize { get; }
		public int BufferLength { get; }
	
		// Constructors
		public GaussianWindow1d(float sigma, int maxKernelRadius = 10 /* Metadata: 0x001F4FF3 */);
	
		// Methods
		private void GenerateKernel(float sigma, int maxKernelRadius);
		protected abstract T Compute(int windowPos);
		public void Reset();
		public bool IsEmpty();
		public void AddValue(T v);
		public T Filter(T v);
		public T Value();
		public void SetBufferValue(int index, T value);
		public T GetBufferValue(int index);
	}

	internal class GaussianWindow1D_Vector3 : GaussianWindow1d<Vector3> // TypeDefIndex: 3014
	{
		// Constructors
		public GaussianWindow1D_Vector3(float sigma, int maxKernelRadius = 10 /* Metadata: 0x001F4FF7 */); // 0x00954CB8-0x00954D28
	
		// Methods
		protected override Vector3 Compute(int windowPos); // 0x00954D28-0x00954F10
	}

	internal class GaussianWindow1D_Quaternion : GaussianWindow1d<Quaternion> // TypeDefIndex: 3015
	{
		// Constructors
		public GaussianWindow1D_Quaternion(float sigma, int maxKernelRadius = 10 /* Metadata: 0x001F4FFB */); // 0x00954994-0x00954A04
	
		// Methods
		protected override Quaternion Compute(int windowPos); // 0x00954A04-0x00954CB8
	}

	internal class GaussianWindow1D_CameraRotation : GaussianWindow1d<Vector2> // TypeDefIndex: 3016
	{
		// Constructors
		public GaussianWindow1D_CameraRotation(float sigma, int maxKernelRadius = 10 /* Metadata: 0x001F4FFF */); // 0x009546AC-0x0095471C
	
		// Methods
		protected override Vector2 Compute(int windowPos); // 0x0095471C-0x00954994
	}

	public class PositionPredictor // TypeDefIndex: 3017
	{
		// Fields
		private Vector3 m_Position; // 0x10
		private const float kSmoothingDefault = 10f; // Metadata: 0x001F5003
		private float mSmoothing; // 0x1C
		[CompilerGenerated] // 0x0050DB5C-0x0050DB6C
		private bool _IgnoreY_k__BackingField; // 0x20
		private GaussianWindow1D_Vector3 m_Velocity; // 0x28
		private GaussianWindow1D_Vector3 m_Accel; // 0x30
	
		// Properties
		public float Smoothing { get; set; } // 0x009551A4-0x009551AC 0x009551AC-0x009552A0
		public bool IgnoreY { [CompilerGenerated] /* 0x0050F2A8-0x0050F2B8 */ get; [CompilerGenerated] /* 0x0050F2B8-0x0050F2C8 */ set; } // 0x009552A0-0x009552A8 0x009552A8-0x009552B4
		public bool IsEmpty { get; } // 0x009552B4-0x0095530C 
	
		// Constructors
		public PositionPredictor(); // 0x00955930-0x009559D4
	
		// Methods
		public void ApplyTransformDelta(Vector3 positionDelta); // 0x0095530C-0x009553C0
		public void Reset(); // 0x009553C0-0x00955428
		public void AddPosition(Vector3 pos); // 0x00955428-0x00955630
		public Vector3 PredictPosition(float lookaheadTime); // 0x00955630-0x00955930
	}

	public static class Damper // TypeDefIndex: 3018
	{
		// Fields
		private const float Epsilon = 0.0001f; // Metadata: 0x001F5007
		public const float kNegligibleResidual = 0.01f; // Metadata: 0x001F500B
		private const float kLogNegligibleResidual = -4.6051702f; // Metadata: 0x001F500F
	
		// Methods
		private static float DecayConstant(float time, float residual); // 0x009545AC-0x00954628
		private static float DecayedRemainder(float initial, float decayConstant, float deltaTime); // 0x00954628-0x009546AC
		public static float Damp(float initial, float dampTime, float deltaTime); // 0x0093E6A8-0x0093E7A0
		public static Vector3 Damp(Vector3 initial, Vector3 dampTime, float deltaTime); // 0x0094EBC8-0x0094EC60
		public static Vector3 Damp(Vector3 initial, float dampTime, float deltaTime); // 0x0094E7D4-0x0094E850
	}

	public class HeadingTracker // TypeDefIndex: 3019
	{
		// Fields
		private Item[] mHistory; // 0x10
		private int mTop; // 0x18
		private int mBottom; // 0x1C
		private int mCount; // 0x20
		private Vector3 mHeadingSum; // 0x24
		private float mWeightSum; // 0x30
		private float mWeightTime; // 0x34
		private Vector3 mLastGoodHeading; // 0x38
		private static float mDecayExponent; // 0x00
	
		// Properties
		public int FilterSize { get; } // 0x009443FC-0x0094441C 
	
		// Nested types
		private struct Item // TypeDefIndex: 3020
		{
			// Fields
			public Vector3 velocity; // 0x00
			public float weight; // 0x0C
			public float time; // 0x10
		}
	
		// Constructors
		public HeadingTracker(int filterSize); // 0x0094441C-0x00944514
	
		// Methods
		private void ClearHistory(); // 0x00954F10-0x00954F8C
		private static float Decay(float time); // 0x00954F8C-0x0095500C
		public void Add(Vector3 velocity); // 0x009445FC-0x009447C8
		private void PopBottom(); // 0x0095500C-0x009551A4
		public void DecayHistory(); // 0x00944514-0x009445FC
		public Vector3 GetReliableHeading(); // 0x009447C8-0x009448E4
	}

	internal static class SplineHelpers // TypeDefIndex: 3021
	{
		// Methods
		public static Vector3 Bezier3(float t, Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3); // 0x00945B6C-0x00945D64
		public static Vector3 BezierTangent3(float t, Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3); // 0x00946014-0x00946380
		public static float Bezier1(float t, float p0, float p1, float p2, float p3); // 0x00948EDC-0x00948FBC
		public static float BezierTangent1(float t, float p0, float p1, float p2, float p3); // 0x009559D4-0x00956AC4
		public static void ComputeSmoothControlPoints(ref Vector4[] knot, ref Vector4[] ctrl1, ref Vector4[] ctrl2); // 0x00947D60-0x009485C8
		public static void ComputeSmoothControlPointsLooped(ref Vector4[] knot, ref Vector4[] ctrl1, ref Vector4[] ctrl2); // 0x00947A18-0x00947D60
	}

	public static class UnityVectorExtensions // TypeDefIndex: 3022
	{
		// Fields
		public const float Epsilon = 0.0001f; // Metadata: 0x001F5013
	
		// Methods
		public static float Angle(Vector3 v1, Vector3 v2); // 0x00F98C14-0x00F98D78
		public static float SignedAngle(Vector3 v1, Vector3 v2, Vector3 up); // 0x00F98578-0x00F986B4
		public static Vector3 SlerpWithReferenceUp(Vector3 vA, Vector3 vB, float t, Vector3 up); // 0x00F98D78-0x00F9902C
	
		// Extension methods
		public static float ClosestPointOnSegment(this Vector3 p, Vector3 s0, Vector3 s1); // 0x00F9889C-0x00F98A10
		public static float ClosestPointOnSegment(this Vector2 p, Vector2 s0, Vector2 s1); // 0x00F98A10-0x00F98B6C
		public static Vector3 ProjectOntoPlane(this Vector3 vector, Vector3 planeNormal); // 0x00F98020-0x00F980FC
		public static Vector3 Abs(this Vector3 v); // 0x00F98B6C-0x00F98C14
		public static bool AlmostZero(this Vector3 v); // 0x00F980FC-0x00F98138
	}

	public static class UnityQuaternionExtensions // TypeDefIndex: 3023
	{
		// Methods
		public static Quaternion SlerpWithReferenceUp(Quaternion qA, Quaternion qB, float t, Vector3 up); // 0x00F97CB0-0x00F98020
	
		// Extension methods
		public static Quaternion Normalized(this Quaternion q); // 0x00F98138-0x00F98190
		public static Vector2 GetCameraRotationToTarget(this Quaternion orient, Vector3 lookAtDir, Vector3 worldUp); // 0x00F98190-0x00F98578
		public static Quaternion ApplyCameraRotation(this Quaternion orient, Vector2 rot, Vector3 worldUp); // 0x00F986B4-0x00F987EC
	}

	public static class UnityRectExtensions // TypeDefIndex: 3024
	{
		// Extension methods
		public static Rect Inflated(this Rect r, Vector2 delta); // 0x00F987EC-0x00F9889C
	}
}

[CompilerGenerated] // 0x00508DF8-0x00508E08
internal sealed class _PrivateImplementationDetails_ // TypeDefIndex: 3025
{
	// Fields
	internal static readonly __StaticArrayInitTypeSize_12 _78517443912BB49729313EC23065D9970ABC80E3; // 0x00 // Starts with: 00 00 00 3f cd cc 0c 3f - Metadata: 0x001F5017

	// Nested types
	private struct __StaticArrayInitTypeSize_12 // TypeDefIndex: 3026
	{
	}
}

namespace UnityEngine.Networking
{
	internal class ChannelBuffer : IDisposable // TypeDefIndex: 3029
	{
		// Fields
		private NetworkConnection m_Connection; // 0x10
		private ChannelPacket m_CurrentPacket; // 0x18
		private float m_LastFlushTime; // 0x30
		private byte m_ChannelId; // 0x34
		private int m_MaxPacketSize; // 0x38
		private bool m_IsReliable; // 0x3C
		private bool m_AllowFragmentation; // 0x3D
		private bool m_IsBroken; // 0x3E
		private int m_MaxPendingPacketCount; // 0x40
		private const int k_MaxFreePacketCount = 512; // Metadata: 0x001F5023
		public const int MaxPendingPacketCount = 16; // Metadata: 0x001F5027
		public const int MaxBufferedPackets = 512; // Metadata: 0x001F502B
		private Queue<ChannelPacket> m_PendingPackets; // 0x48
		private static List<ChannelPacket> s_FreePackets; // 0x00
		internal static int pendingPacketCount; // 0x08
		public float maxDelay; // 0x50
		private float m_LastBufferedMessageCountTimer; // 0x54
		[CompilerGenerated] // 0x00510858-0x00510868
		private int _numMsgsOut_k__BackingField; // 0x58
		[CompilerGenerated] // 0x00510868-0x00510878
		private int _numBufferedMsgsOut_k__BackingField; // 0x5C
		[CompilerGenerated] // 0x00510878-0x00510888
		private int _numBytesOut_k__BackingField; // 0x60
		[CompilerGenerated] // 0x00510888-0x00510898
		private int _numMsgsIn_k__BackingField; // 0x64
		[CompilerGenerated] // 0x00510898-0x005108A8
		private int _numBytesIn_k__BackingField; // 0x68
		[CompilerGenerated] // 0x005108A8-0x005108B8
		private int _numBufferedPerSecond_k__BackingField; // 0x6C
		[CompilerGenerated] // 0x005108B8-0x005108C8
		private int _lastBufferedPerSecond_k__BackingField; // 0x70
		private static NetworkWriter s_SendWriter; // 0x10
		private static NetworkWriter s_FragmentWriter; // 0x18
		private const int k_PacketHeaderReserveSize = 100; // Metadata: 0x001F502F
		private bool m_Disposed; // 0x74
		internal NetBuffer fragmentBuffer; // 0x78
		private bool readingFragment; // 0x80
	
		// Properties
		public int numMsgsOut { [CompilerGenerated] /* 0x00510FB8-0x00510FC8 */ get; [CompilerGenerated] /* 0x00510FC8-0x00510FD8 */ private set; } // 0x009B5A28-0x009B5A30 0x009B5A30-0x009B5A38
		public int numBufferedMsgsOut { [CompilerGenerated] /* 0x00510FD8-0x00510FE8 */ get; [CompilerGenerated] /* 0x00510FE8-0x00510FF8 */ private set; } // 0x009B5A38-0x009B5A40 0x009B5A40-0x009B5A48
		public int numBytesOut { [CompilerGenerated] /* 0x00510FF8-0x00511008 */ get; [CompilerGenerated] /* 0x00511008-0x00511018 */ private set; } // 0x009B5A48-0x009B5A50 0x009B5A50-0x009B5A58
		public int numMsgsIn { [CompilerGenerated] /* 0x00511018-0x00511028 */ get; [CompilerGenerated] /* 0x00511028-0x00511038 */ private set; } // 0x009B5A58-0x009B5A60 0x009B5A60-0x009B5A68
		public int numBytesIn { [CompilerGenerated] /* 0x00511038-0x00511048 */ get; [CompilerGenerated] /* 0x00511048-0x00511058 */ private set; } // 0x009B5A68-0x009B5A70 0x009B5A70-0x009B5A78
		public int numBufferedPerSecond { [CompilerGenerated] /* 0x00511058-0x00511068 */ get; [CompilerGenerated] /* 0x00511068-0x00511078 */ private set; } // 0x009B5A78-0x009B5A80 0x009B5A80-0x009B5A88
		public int lastBufferedPerSecond { [CompilerGenerated] /* 0x00511078-0x00511088 */ get; [CompilerGenerated] /* 0x00511088-0x00511098 */ private set; } // 0x009B5A88-0x009B5A90 0x009B5A90-0x009B5A98
	
		// Constructors
		public ChannelBuffer(NetworkConnection conn, int bufferSize, byte cid, bool isReliable, bool isSequenced); // 0x009B5A98-0x009B5C40
		static ChannelBuffer(); // 0x009B791C-0x009B79B0
	
		// Methods
		public void Dispose(); // 0x009B5D18-0x009B5D94
		protected virtual void Dispose(bool disposing); // 0x009B5D94-0x009B5F10
		public bool SetOption(ChannelOption option, int value); // 0x009B5F10-0x009B62CC
		public void CheckInternalBuffer(); // 0x009B634C-0x009B63D0
		public bool SendWriter(NetworkWriter writer); // 0x009B65D4-0x009B6654
		public bool Send(short msgType, MessageBase msg); // 0x009B6BF8-0x009B6CE4
		internal bool HandleFragment(NetworkReader reader); // 0x009B6CE4-0x009B6D78
		internal bool SendFragmentBytes(byte[] bytes, int bytesToSend); // 0x009B6E90-0x009B7534
		internal bool SendBytes(byte[] bytes, int bytesToSend); // 0x009B6654-0x009B6BF8
		private void QueuePacket(); // 0x009B7534-0x009B7658
		private ChannelPacket AllocPacket(); // 0x009B7658-0x009B77A8
		private static void FreePacket(ChannelPacket packet); // 0x009B77A8-0x009B78AC
		public bool SendInternalBuffer(); // 0x009B63D0-0x009B65D4
	}

	internal struct ChannelPacket // TypeDefIndex: 3030
	{
		// Fields
		private int m_Position; // 0x00
		private byte[] m_Buffer; // 0x08
		private bool m_IsReliable; // 0x10
	
		// Constructors
		public ChannelPacket(int packetSize, bool isReliable); // 0x00587844-0x00587850
	
		// Methods
		public void Reset(); // 0x00587850-0x00587858
		public bool IsEmpty(); // 0x00587858-0x00587868
		public void Write(byte[] bytes, int numBytes); // 0x00587868-0x005878B0
		public bool HasSpace(int numBytes); // 0x005878B0-0x005878E0
		public bool SendToTransport(NetworkConnection conn, int channelId); // 0x005878E0-0x00587ADC
	}

	[Obsolete] // 0x0050F4A0-0x0050F4D8
	public class ClientScene // TypeDefIndex: 3031
	{
		// Fields
		private static List<PlayerController> s_LocalPlayers; // 0x00
		private static NetworkConnection s_ReadyConnection; // 0x08
		private static Dictionary<NetworkSceneId, NetworkIdentity> s_SpawnableObjects; // 0x10
		private static bool s_IsReady; // 0x18
		private static bool s_IsSpawnFinished; // 0x19
		private static NetworkScene s_NetworkScene; // 0x20
		private static ObjectSpawnSceneMessage s_ObjectSpawnSceneMessage; // 0x28
		private static ObjectSpawnFinishedMessage s_ObjectSpawnFinishedMessage; // 0x30
		private static ObjectDestroyMessage s_ObjectDestroyMessage; // 0x38
		private static ObjectSpawnMessage s_ObjectSpawnMessage; // 0x40
		private static OwnerMessage s_OwnerMessage; // 0x48
		private static ClientAuthorityMessage s_ClientAuthorityMessage; // 0x50
		public const int ReconnectIdInvalid = -1; // Metadata: 0x001F5033
		public const int ReconnectIdHost = 0; // Metadata: 0x001F5037
		private static int s_ReconnectId; // 0x58
		private static PeerInfoMessage[] s_Peers; // 0x60
		private static List<PendingOwner> s_PendingOwnerIds; // 0x68
	
		// Properties
		public static List<PlayerController> localPlayers { get; } // 0x009B7C28-0x009B7C90 
		public static bool ready { get; } // 0x009B7C90-0x009B7CF8 
		public static NetworkConnection readyConnection { get; } // 0x009B7CF8-0x009B7D60 
		public static int reconnectId { get; } // 0x009B7D60-0x009B7DC8 
		public static Dictionary<NetworkInstanceId, NetworkIdentity> objects { get; } // 0x009B7DC8-0x009B7E40 
		public static Dictionary<NetworkHash128, GameObject> prefabs { get; } // 0x009B7E40-0x009B7EE4 
		public static Dictionary<NetworkSceneId, NetworkIdentity> spawnableObjects { get; } // 0x009B7EE4-0x009B7F4C 
	
		// Nested types
		private struct PendingOwner // TypeDefIndex: 3032
		{
			// Fields
			public NetworkInstanceId netId; // 0x00
			public short playerControllerId; // 0x04
		}
	
		// Constructors
		public ClientScene(); // 0x009BEAAC-0x009BEAB4
		static ClientScene(); // 0x009BEAB4-0x009BEC7C
	
		// Methods
		private static bool hasMigrationPending(); // 0x009B79D0-0x009B7A40
		public static void SetReconnectId(int newReconnectId, PeerInfoMessage[] peers); // 0x009B7A40-0x009B7B50
		internal static void SetNotReady(); // 0x009B7BC0-0x009B7C28
		internal static void Shutdown(); // 0x009B7F4C-0x009B81DC
		internal static bool GetPlayerController(short playerControllerId, out PlayerController player); // 0x009B81DC-0x009B853C
		internal static void InternalAddPlayer(NetworkIdentity view, short playerControllerId); // 0x009B853C-0x009B8898
		public static bool AddPlayer(short playerControllerId); // 0x009B8960-0x009B89C8
		public static bool AddPlayer(NetworkConnection readyConn, short playerControllerId); // 0x009B89C8-0x009B8A40
		public static bool AddPlayer(NetworkConnection readyConn, short playerControllerId, MessageBase extraMessage); // 0x009B8A40-0x009B9234
		public static bool SendReconnectMessage(MessageBase extraMessage); // 0x009B9368-0x009B9780
		public static bool RemovePlayer(short playerControllerId); // 0x009B9780-0x009B9B78
		public static bool Ready(NetworkConnection conn); // 0x009B9D20-0x009B9F3C
		public static NetworkClient ConnectLocalServer(); // 0x009B9F3C-0x009B9FE4
		internal static NetworkClient ReconnectLocalServer(); // 0x009BA24C-0x009BA2F4
		internal static void ClearLocalPlayers(); // 0x009BA2F4-0x009BA370
		internal static void HandleClientDisconnect(NetworkConnection conn); // 0x009BA370-0x009BA430
		internal static void PrepareToSpawnSceneObjects(); // 0x009BA430-0x009BA694
		internal static NetworkIdentity SpawnSceneObject(NetworkSceneId sceneId); // 0x009BA694-0x009BA7A0
		internal static void RegisterSystemHandlers(NetworkClient client, bool localClient); // 0x009BA7A0-0x009BAB98
		internal static string GetStringForAssetId(NetworkHash128 assetId); // 0x009BABB4-0x009BACA8
		public static void RegisterPrefab(GameObject prefab, NetworkHash128 newAssetId); // 0x009BACD4-0x009BAD54
		public static void RegisterPrefab(GameObject prefab); // 0x009BAD54-0x009BADBC
		public static void RegisterPrefab(GameObject prefab, SpawnDelegate spawnHandler, UnSpawnDelegate unspawnHandler); // 0x009BADBC-0x009BAE3C
		public static void UnregisterPrefab(GameObject prefab); // 0x009BAE3C-0x009BAEA4
		public static void RegisterSpawnHandler(NetworkHash128 assetId, SpawnDelegate spawnHandler, UnSpawnDelegate unspawnHandler); // 0x009BAEA4-0x009BAF34
		public static void UnregisterSpawnHandler(NetworkHash128 assetId); // 0x009BAF34-0x009BAFAC
		public static void ClearSpawners(); // 0x009BAFAC-0x009BB00C
		public static void DestroyAllClientObjects(); // 0x009BB00C-0x009BB080
		public static void SetLocalObject(NetworkInstanceId netId, GameObject obj); // 0x009BB080-0x009BB114
		public static GameObject FindLocalObject(NetworkInstanceId netId); // 0x009BB114-0x009BB190
		private static void ApplySpawnPayload(NetworkIdentity uv, Vector3 position, byte[] payload, NetworkInstanceId netId, GameObject newGameObject, NetworkMessage netMsg); // 0x009BB190-0x009BB394
		private static void OnObjectSpawn(NetworkMessage netMsg); // 0x009BB668-0x009BC4D8
		private static void OnObjectSpawnScene(NetworkMessage netMsg); // 0x009BC4D8-0x009BCC2C
		private static void OnObjectSpawnFinished(NetworkMessage netMsg); // 0x009BCC2C-0x009BCF08
		private static void OnObjectDestroy(NetworkMessage netMsg); // 0x009BCF08-0x009BD2DC
		private static void OnLocalClientObjectDestroy(NetworkMessage netMsg); // 0x009BD2DC-0x009BD468
		private static void OnLocalClientObjectHide(NetworkMessage netMsg); // 0x009BD468-0x009BD614
		private static void OnLocalClientObjectSpawn(NetworkMessage netMsg); // 0x009BD614-0x009BD6EC
		private static void OnLocalClientObjectSpawnScene(NetworkMessage netMsg); // 0x009BD6EC-0x009BD7C4
		private static void OnUpdateVarsMessage(NetworkMessage netMsg); // 0x009BD7C4-0x009BDABC
		private static void OnRPCMessage(NetworkMessage netMsg); // 0x009BDB2C-0x009BDEB8
		private static void OnSyncEventMessage(NetworkMessage netMsg); // 0x009BDFEC-0x009BE1FC
		private static void OnSyncListMessage(NetworkMessage netMsg); // 0x009BE1FC-0x009BE40C
		private static void OnClientAuthority(NetworkMessage netMsg); // 0x009BE40C-0x009BE6F0
		private static void OnOwnerMessage(NetworkMessage netMsg); // 0x009BE6F0-0x009BEAAC
		private static void CheckForOwner(NetworkIdentity uv); // 0x009BB394-0x009BB668
	}

	internal class ConnectionArray // TypeDefIndex: 3033
	{
		// Fields
		private List<NetworkConnection> m_LocalConnections; // 0x10
		private List<NetworkConnection> m_Connections; // 0x18
	
		// Properties
		internal List<NetworkConnection> localConnections { get; } // 0x009BEC84-0x009BEC8C 
		internal List<NetworkConnection> connections { get; } // 0x009BEC8C-0x009BEC94 
		public int Count { get; } // 0x009BEC94-0x009BECE8 
		public int LocalIndex { get; } // 0x009BECE8-0x009BED40 
	
		// Constructors
		public ConnectionArray(); // 0x009BED40-0x009BEDD4
	
		// Methods
		public int Add(int connId, NetworkConnection conn); // 0x009BEDD4-0x009BEFA4
		public NetworkConnection Get(int connId); // 0x009BEFA4-0x009BF100
		public NetworkConnection GetUnsafe(int connId); // 0x009BF100-0x009BF18C
		public void Remove(int connId); // 0x009BF18C-0x009BF2F4
		public int AddLocal(NetworkConnection conn); // 0x009BF2F4-0x009BF380
		public bool ContainsPlayer(GameObject player, out NetworkConnection conn); // 0x009BF380-0x009BF52C
	}

	[AttributeUsage] // 0x0050F4D8-0x0050F528
	[Obsolete] // 0x0050F4D8-0x0050F528
	public class NetworkSettingsAttribute : Attribute // TypeDefIndex: 3034
	{
		// Fields
		public int channel; // 0x10
		public float sendInterval; // 0x14
	
		// Constructors
		public NetworkSettingsAttribute(); // 0x00AA91C4-0x00AA91D8
	}

	[AttributeUsage] // 0x0050F528-0x0050F578
	[Obsolete] // 0x0050F528-0x0050F578
	public class SyncVarAttribute : Attribute // TypeDefIndex: 3035
	{
		// Fields
		public string hook; // 0x10
	
		// Constructors
		public SyncVarAttribute(); // 0x00FB2610-0x00FB2618
	}

	[AttributeUsage] // 0x0050F578-0x0050F5C8
	[Obsolete] // 0x0050F578-0x0050F5C8
	public class CommandAttribute : Attribute // TypeDefIndex: 3036
	{
		// Fields
		public int channel; // 0x10
	
		// Constructors
		public CommandAttribute(); // 0x009BEC7C-0x009BEC84
	}

	[AttributeUsage] // 0x0050F5C8-0x0050F618
	[Obsolete] // 0x0050F5C8-0x0050F618
	public class ClientRpcAttribute : Attribute // TypeDefIndex: 3037
	{
		// Fields
		public int channel; // 0x10
	
		// Constructors
		public ClientRpcAttribute(); // 0x009B79C8-0x009B79D0
	}

	[AttributeUsage] // 0x0050F618-0x0050F668
	[Obsolete] // 0x0050F618-0x0050F668
	public class TargetRpcAttribute : Attribute // TypeDefIndex: 3038
	{
		// Fields
		public int channel; // 0x10
	
		// Constructors
		public TargetRpcAttribute(); // 0x00FB2618-0x00FB2620
	}

	[AttributeUsage] // 0x0050F668-0x0050F6B8
	[Obsolete] // 0x0050F668-0x0050F6B8
	public class SyncEventAttribute : Attribute // TypeDefIndex: 3039
	{
		// Fields
		public int channel; // 0x10
	
		// Constructors
		public SyncEventAttribute(); // 0x00AB3650-0x00AB3658
	}

	[AttributeUsage] // 0x0050F6B8-0x0050F708
	[Obsolete] // 0x0050F6B8-0x0050F708
	public class ServerAttribute : Attribute // TypeDefIndex: 3040
	{
		// Constructors
		public ServerAttribute(); // 0x00AB32B0-0x00AB32B8
	}

	[AttributeUsage] // 0x0050F708-0x0050F758
	[Obsolete] // 0x0050F708-0x0050F758
	public class ServerCallbackAttribute : Attribute // TypeDefIndex: 3041
	{
		// Constructors
		public ServerCallbackAttribute(); // 0x00AB32B8-0x00AB32C0
	}

	[AttributeUsage] // 0x0050F758-0x0050F7A8
	[Obsolete] // 0x0050F758-0x0050F7A8
	public class ClientAttribute : Attribute // TypeDefIndex: 3042
	{
		// Constructors
		public ClientAttribute(); // 0x009B79B8-0x009B79C0
	}

	[AttributeUsage] // 0x0050F7A8-0x0050F7F8
	[Obsolete] // 0x0050F7A8-0x0050F7F8
	public class ClientCallbackAttribute : Attribute // TypeDefIndex: 3043
	{
		// Constructors
		public ClientCallbackAttribute(); // 0x009B79C0-0x009B79C8
	}

	[Obsolete] // 0x0050F7F8-0x0050F830
	internal class DefaultNetworkTransport : INetworkTransport // TypeDefIndex: 3044
	{
		// Properties
		public bool IsStarted { get; } // 0x009BF534-0x009BF594 
	
		// Constructors
		public DefaultNetworkTransport(); // 0x009BF52C-0x009BF534
	
		// Methods
		public int AddHost(HostTopology topology, int port, string ip); // 0x009BF594-0x009BF614
		public int AddHostWithSimulator(HostTopology topology, int minTimeout, int maxTimeout, int port); // 0x009BF614-0x009BF6A4
		public int AddWebsocketHost(HostTopology topology, int port, string ip); // 0x009BF6A4-0x009BF724
		public int Connect(int hostId, string address, int port, int specialConnectionId, out byte error); // 0x009BF724-0x009BF7BC
		public void ConnectAsNetworkHost(int hostId, string address, int port, NetworkID network, SourceID source, NodeID node, out byte error); // 0x009BF7BC-0x009BF86C
		public int ConnectEndPoint(int hostId, EndPoint endPoint, int specialConnectionId, out byte error); // 0x009BF86C-0x009BF8FC
		public int ConnectToNetworkPeer(int hostId, string address, int port, int specialConnectionId, int relaySlotId, NetworkID network, SourceID source, NodeID node, out byte error); // 0x009BF8FC-0x009BF9C0
		public int ConnectWithSimulator(int hostId, string address, int port, int specialConnectionId, out byte error, ConnectionSimulatorConfig conf); // 0x009BF9C0-0x009BFA68
		public bool Disconnect(int hostId, int connectionId, out byte error); // 0x009BFA68-0x009BFAE8
		public bool DoesEndPointUsePlatformProtocols(EndPoint endPoint); // 0x009BFAE8-0x009BFB50
		public void GetBroadcastConnectionInfo(int hostId, out string address, out int port, out byte error); // 0x009BFB50-0x009BFBE0
		public void GetBroadcastConnectionMessage(int hostId, byte[] buffer, int bufferSize, out int receivedSize, out byte error); // 0x009BFBE0-0x009BFC78
		public void GetConnectionInfo(int hostId, int connectionId, out string address, out int port, out NetworkID network, out NodeID dstNode, out byte error); // 0x009BFC78-0x009BFD28
		public int GetCurrentRTT(int hostId, int connectionId, out byte error); // 0x009BFD28-0x009BFDA8
		public void Init(); // 0x009BFDA8-0x009BFE08
		public void Init(GlobalConfig config); // 0x009BFE08-0x009BFE70
		public NetworkEventType Receive(out int hostId, out int connectionId, out int channelId, byte[] buffer, int bufferSize, out int receivedSize, out byte error); // 0x009BFE70-0x009BFF20
		public NetworkEventType ReceiveFromHost(int hostId, out int connectionId, out int channelId, byte[] buffer, int bufferSize, out int receivedSize, out byte error); // 0x009BFF20-0x009BFFD0
		public NetworkEventType ReceiveRelayEventFromHost(int hostId, out byte error); // 0x009BFFD0-0x009C0048
		public bool RemoveHost(int hostId); // 0x009C0048-0x009C00B0
		public bool Send(int hostId, int connectionId, int channelId, byte[] buffer, int size, out byte error); // 0x009C00B0-0x009C0158
		public void SetBroadcastCredentials(int hostId, int key, int version, int subversion, out byte error); // 0x009C0158-0x009C01F0
		public void SetPacketStat(int direction, int packetStatId, int numMsgs, int numBytes); // 0x009C01F0-0x009C0280
		public void Shutdown(); // 0x009C0280-0x009C02E0
		public bool StartBroadcastDiscovery(int hostId, int broadcastPort, int key, int version, int subversion, byte[] buffer, int size, int timeout, out byte error); // 0x009C02E0-0x009C03A4
		public void StopBroadcastDiscovery(); // 0x009C03A4-0x009C0404
	}

	internal static class DotNetCompatibility // TypeDefIndex: 3045
	{
		// Extension methods
		internal static string GetMethodName(this Delegate func); // 0x009BACA8-0x009BACD4
		internal static Type GetBaseType(this Type type); // 0x009C0404-0x009C0424
		internal static string GetErrorCode(this SocketException e); // 0x009C0424-0x009C0464
	}

	[Obsolete] // 0x0050F840-0x0050F878
	public interface INetworkTransport // TypeDefIndex: 3046
	{
		// Properties
		bool IsStarted { get; }
	
		// Methods
		void Init();
		void Init(GlobalConfig config);
		void Shutdown();
		int AddHost(HostTopology topology, int port, string ip);
		int AddWebsocketHost(HostTopology topology, int port, string ip);
		int ConnectWithSimulator(int hostId, string address, int port, int specialConnectionId, out byte error, ConnectionSimulatorConfig conf);
		int Connect(int hostId, string address, int port, int specialConnectionId, out byte error);
		void ConnectAsNetworkHost(int hostId, string address, int port, NetworkID network, SourceID source, NodeID node, out byte error);
		int ConnectToNetworkPeer(int hostId, string address, int port, int specialConnectionId, int relaySlotId, NetworkID network, SourceID source, NodeID node, out byte error);
		int ConnectEndPoint(int hostId, EndPoint endPoint, int specialConnectionId, out byte error);
		bool DoesEndPointUsePlatformProtocols(EndPoint endPoint);
		int AddHostWithSimulator(HostTopology topology, int minTimeout, int maxTimeout, int port);
		bool RemoveHost(int hostId);
		bool Send(int hostId, int connectionId, int channelId, byte[] buffer, int size, out byte error);
		NetworkEventType Receive(out int hostId, out int connectionId, out int channelId, byte[] buffer, int bufferSize, out int receivedSize, out byte error);
		NetworkEventType ReceiveFromHost(int hostId, out int connectionId, out int channelId, byte[] buffer, int bufferSize, out int receivedSize, out byte error);
		NetworkEventType ReceiveRelayEventFromHost(int hostId, out byte error);
		int GetCurrentRTT(int hostId, int connectionId, out byte error);
		void GetConnectionInfo(int hostId, int connectionId, out string address, out int port, out NetworkID network, out NodeID dstNode, out byte error);
		bool Disconnect(int hostId, int connectionId, out byte error);
		void SetBroadcastCredentials(int hostId, int key, int version, int subversion, out byte error);
		bool StartBroadcastDiscovery(int hostId, int broadcastPort, int key, int version, int subversion, byte[] buffer, int size, int timeout, out byte error);
		void GetBroadcastConnectionInfo(int hostId, out string address, out int port, out byte error);
		void GetBroadcastConnectionMessage(int hostId, byte[] buffer, int bufferSize, out int receivedSize, out byte error);
		void StopBroadcastDiscovery();
		void SetPacketStat(int direction, int packetStatId, int numMsgs, int numBytes);
	}

	internal sealed class LocalClient : NetworkClient // TypeDefIndex: 3047
	{
		// Fields
		private const int k_InitialFreeMessagePoolSize = 64; // Metadata: 0x001F503B
		private List<InternalMsg> m_InternalMsgs; // 0x80
		private List<InternalMsg> m_InternalMsgs2; // 0x88
		private Stack<InternalMsg> m_FreeMessages; // 0x90
		private NetworkServer m_LocalServer; // 0x98
		private bool m_Connected; // 0xA0
		private NetworkMessage s_InternalMessage; // 0xA8
	
		// Nested types
		private struct InternalMsg // TypeDefIndex: 3048
		{
			// Fields
			internal byte[] buffer; // 0x00
			internal int channelId; // 0x08
		}
	
		// Constructors
		public LocalClient(); // 0x009B9FE4-0x009BA0B0
	
		// Methods
		public override void Disconnect(); // 0x009C0480-0x009C0520
		internal void InternalConnectLocalServer(bool generateConnectMsg); // 0x009BA0B0-0x009BA24C
		internal override void Update(); // 0x009C085C-0x009C0860
		internal void AddLocalPlayer(PlayerController localPlayer); // 0x009C0A90-0x009C0D54
		private void PostInternalMessage(byte[] buffer, int channelId); // 0x009C0D54-0x009C0DF4
		private void PostInternalMessage(short msgType); // 0x009C0520-0x009C05C8
		private void ProcessInternalMessages(); // 0x009C0860-0x009C0A90
		internal void InvokeHandlerOnClient(short msgType, MessageBase msg, int channelId); // 0x009C0EA4-0x009C0F74
		internal void InvokeBytesOnClient(byte[] buffer, int channelId); // 0x009C0F74-0x009C0F78
	}

	internal class ULocalConnectionToClient : NetworkConnection // TypeDefIndex: 3049
	{
		// Fields
		private LocalClient m_LocalClient; // 0x88
	
		// Properties
		public LocalClient localClient { get; } // 0x00FB2620-0x00FB2628 
	
		// Constructors
		public ULocalConnectionToClient(LocalClient localClient); // 0x00FB2628-0x00FB2694
	
		// Methods
		public override bool Send(short msgType, MessageBase msg); // 0x00FB2694-0x00FB26C0
		public override bool SendUnreliable(short msgType, MessageBase msg); // 0x00FB26C0-0x00FB26EC
		public override bool SendByChannel(short msgType, MessageBase msg, int channelId); // 0x00FB26EC-0x00FB2714
		public override bool SendBytes(byte[] bytes, int numBytes, int channelId); // 0x00FB2714-0x00FB2740
		public override bool SendWriter(NetworkWriter writer, int channelId); // 0x00FB2740-0x00FB2794
		public override void GetStatsOut(out int numMsgs, out int numBufferedMsgs, out int numBytes, out int lastBufferedPerSecond); // 0x00FB2794-0x00FB27A8
		public override void GetStatsIn(out int numMsgs, out int numBytes); // 0x00FB27A8-0x00FB27B4
	}

	internal class ULocalConnectionToServer : NetworkConnection // TypeDefIndex: 3050
	{
		// Fields
		private NetworkServer m_LocalServer; // 0x88
	
		// Constructors
		public ULocalConnectionToServer(NetworkServer localServer); // 0x00FB27B4-0x00FB2820
	
		// Methods
		public override bool Send(short msgType, MessageBase msg); // 0x00FB2820-0x00FB2858
		public override bool SendUnreliable(short msgType, MessageBase msg); // 0x00FB2858-0x00FB2890
		public override bool SendByChannel(short msgType, MessageBase msg, int channelId); // 0x00FB2890-0x00FB28CC
		public override bool SendBytes(byte[] bytes, int numBytes, int channelId); // 0x00FB28CC-0x00FB29C8
		public override bool SendWriter(NetworkWriter writer, int channelId); // 0x00FB29C8-0x00FB2A48
		public override void GetStatsOut(out int numMsgs, out int numBufferedMsgs, out int numBytes, out int lastBufferedPerSecond); // 0x00FB2A48-0x00FB2A5C
		public override void GetStatsIn(out int numMsgs, out int numBytes); // 0x00FB2A5C-0x00FB2A68
	}

	[Obsolete] // 0x0050F878-0x0050F8B0
	public class LogFilter // TypeDefIndex: 3051
	{
		// Fields
		internal const int Developer = 0; // Metadata: 0x001F503F
		internal const int SetInScripting = -1; // Metadata: 0x001F5043
		public const int Debug = 1; // Metadata: 0x001F5047
		public const int Info = 2; // Metadata: 0x001F504B
		public const int Warn = 3; // Metadata: 0x001F504F
		public const int Error = 4; // Metadata: 0x001F5053
		public const int Fatal = 5; // Metadata: 0x001F5057
		[Obsolete] // 0x005108C8-0x00510900
		public static FilterLevel current; // 0x00
		private static int s_CurrentLogLevel; // 0x04
	
		// Properties
		public static int currentLogLevel { get; set; } // 0x009C1144-0x009C11AC 0x009C11AC-0x009C1218
		internal static bool logDev { get; } // 0x009BDABC-0x009BDB2C 
		public static bool logDebug { get; } // 0x009B7B50-0x009B7BC0 
		public static bool logInfo { get; } // 0x009C1218-0x009C1288 
		public static bool logWarn { get; } // 0x009B78AC-0x009B791C 
		public static bool logError { get; } // 0x009B62CC-0x009B634C 
		public static bool logFatal { get; } // 0x009C1288-0x009C12F8 
	
		// Nested types
		public enum FilterLevel // TypeDefIndex: 3052
		{
			SetInScripting = -1,
			Developer = 0,
			Debug = 1,
			Info = 2,
			Warn = 3,
			Error = 4,
			Fatal = 5
		}
	
		// Constructors
		public LogFilter(); // 0x009C12F8-0x009C1300
		static LogFilter(); // 0x009C1300-0x009C1360
	}

	[Obsolete] // 0x0050F8B0-0x0050F8E8
	public abstract class MessageBase // TypeDefIndex: 3053
	{
		// Constructors
		protected MessageBase(); // 0x009C1368-0x009C1370
	
		// Methods
		public virtual void Deserialize(NetworkReader reader); // 0x009C1360-0x009C1364
		public virtual void Serialize(NetworkWriter writer); // 0x009C1364-0x009C1368
	}

	[AddComponentMenu] // 0x0050F8E8-0x0050F9CC
	[DisallowMultipleComponent] // 0x0050F8E8-0x0050F9CC
	[Obsolete] // 0x0050F8E8-0x0050F9CC
	[RequireComponent] // 0x0050F8E8-0x0050F9CC
	[RequireComponent] // 0x0050F8E8-0x0050F9CC
	public class NetworkAnimator : NetworkBehaviour // TypeDefIndex: 3054
	{
		// Fields
		[SerializeField] // 0x00510900-0x00510910
		private Animator m_Animator; // 0x30
		[SerializeField] // 0x00510910-0x00510920
		private uint m_ParameterSendBits; // 0x38
		private static AnimationMessage s_AnimationMessage; // 0x00
		private static AnimationParametersMessage s_AnimationParametersMessage; // 0x08
		private static AnimationTriggerMessage s_AnimationTriggerMessage; // 0x10
		private int m_AnimationHash; // 0x3C
		private int m_TransitionHash; // 0x40
		private NetworkWriter m_ParameterWriter; // 0x48
		private float m_SendTimer; // 0x50
		public string param0; // 0x58
		public string param1; // 0x60
		public string param2; // 0x68
		public string param3; // 0x70
		public string param4; // 0x78
		public string param5; // 0x80
	
		// Properties
		public Animator animator { get; set; } // 0x009C29F4-0x009C29FC 0x009C29FC-0x009C2A04
		private bool sendMessagesAllowed { get; } // 0x009C2AC0-0x009C2B88 
	
		// Constructors
		public NetworkAnimator(); // 0x009C4DF8-0x009C4E60
		static NetworkAnimator(); // 0x009C4E68-0x009C4F24
	
		// Methods
		public void SetParameterAutoSend(int index, bool value); // 0x009C2A7C-0x009C2AA4
		public bool GetParameterAutoSend(int index); // 0x009C2AA4-0x009C2AC0
		internal void ResetParameterOptions(); // 0x009C2A04-0x009C2A7C
		private void FixedUpdate(); // 0x009C2BEC-0x009C2D0C
		private bool CheckAnimStateChanged(out int stateHash, out float normalizedTime); // 0x009C2E3C-0x009C2F84
		private void CheckSendRate(); // 0x009C2D0C-0x009C2E3C
		private void SendMessage(short type, MessageBase msg); // 0x009C32E4-0x009C3480
		private void SetSendTrackingParam(string p, int i); // 0x009C3480-0x009C3538
		private void SetRecvTrackingParam(string p, int i); // 0x009C3538-0x009C35F0
		internal void HandleAnimMsg(AnimationMessage msg, NetworkReader reader); // 0x009C35F0-0x009C366C
		internal void HandleAnimParamsMsg(AnimationParametersMessage msg, NetworkReader reader); // 0x009C3950-0x009C3990
		internal void HandleAnimTriggerMsg(int hash); // 0x009C3990-0x009C39AC
		private void WriteParameters(NetworkWriter writer, bool autoSend); // 0x009C2FA4-0x009C32E4
		private void ReadParameters(NetworkReader reader, bool autoSend); // 0x009C366C-0x009C3950
		public override bool OnSerialize(NetworkWriter writer, bool forceAll); // 0x009C39AC-0x009C3AE0
		public override void OnDeserialize(NetworkReader reader, bool initialState); // 0x009C3AE0-0x009C3B7C
		public void SetTrigger(string triggerName); // 0x009C3B7C-0x009C3BAC
		public void SetTrigger(int hash); // 0x009C3BAC-0x009C3DB4
		internal static void OnAnimationServerMessage(NetworkMessage netMsg); // 0x009C3DB4-0x009C4174
		internal static void OnAnimationParametersServerMessage(NetworkMessage netMsg); // 0x009C4174-0x009C4538
		internal static void OnAnimationTriggerServerMessage(NetworkMessage netMsg); // 0x009C4538-0x009C48C0
		internal static void OnAnimationClientMessage(NetworkMessage netMsg); // 0x009C48C0-0x009C4A8C
		internal static void OnAnimationParametersClientMessage(NetworkMessage netMsg); // 0x009C4A8C-0x009C4C5C
		internal static void OnAnimationTriggerClientMessage(NetworkMessage netMsg); // 0x009C4C5C-0x009C4DF8
	}

	[AddComponentMenu] // 0x0050F9CC-0x0050FA78
	[Obsolete] // 0x0050F9CC-0x0050FA78
	[RequireComponent] // 0x0050F9CC-0x0050FA78
	public class NetworkBehaviour : MonoBehaviour // TypeDefIndex: 3055
	{
		// Fields
		private uint m_SyncVarDirtyBits; // 0x18
		private float m_LastSendTime; // 0x1C
		private bool m_SyncVarGuard; // 0x20
		private const float k_DefaultSendInterval = 0.1f; // Metadata: 0x001F5077
		private NetworkIdentity m_MyView; // 0x28
		private static Dictionary<int, Invoker> s_CmdHandlerDelegates; // 0x00
	
		// Properties
		public bool localPlayerAuthority { get; } // 0x009C2BA8-0x009C2BC8 
		public bool isServer { get; } // 0x009C2B88-0x009C2BA8 
		public bool isClient { get; } // 0x009C504C-0x009C506C 
		public bool isLocalPlayer { get; } // 0x009C506C-0x009C508C 
		public bool hasAuthority { get; } // 0x009C2BCC-0x009C2BEC 
		public NetworkInstanceId netId { get; } // 0x009C2F84-0x009C2FA4 
		public NetworkConnection connectionToServer { get; } // 0x009C508C-0x009C50AC 
		public NetworkConnection connectionToClient { get; } // 0x009C50AC-0x009C50CC 
		public short playerControllerId { get; } // 0x009C50CC-0x009C50EC 
		protected uint syncVarDirtyBits { get; } // 0x009C50EC-0x009C50F4 
		protected bool syncVarHookGuard { get; set; } // 0x009C50F4-0x009C50FC 0x009C50FC-0x009C5108
		internal NetworkIdentity netIdentity { get; } // 0x009C2BC8-0x009C2BCC 
		private NetworkIdentity myView { get; } // 0x009C4F24-0x009C504C 
	
		// Nested types
		public delegate void CmdDelegate(NetworkBehaviour obj, NetworkReader reader); // TypeDefIndex: 3056; 0x009C73F0-0x009C77D0
	
		protected delegate void EventDelegate(List<Delegate> targets, NetworkReader reader); // TypeDefIndex: 3057; 0x009C81C0-0x009C85A0
	
		protected enum UNetInvokeType // TypeDefIndex: 3058
		{
			Command = 0,
			ClientRpc = 1,
			SyncEvent = 2,
			SyncList = 3
		}
	
		protected class Invoker // TypeDefIndex: 3059
		{
			// Fields
			public UNetInvokeType invokeType; // 0x10
			public Type invokeClass; // 0x18
			public CmdDelegate invokeFunction; // 0x20
	
			// Constructors
			public Invoker(); // 0x009C5F78-0x009C5F80
	
			// Methods
			public string DebugString(); // 0x009C680C-0x009C69A8
		}
	
		// Constructors
		public NetworkBehaviour(); // 0x009C4E60-0x009C4E68
		static NetworkBehaviour(); // 0x009C80F0-0x009C8164
	
		// Methods
		[EditorBrowsable] // 0x005110C8-0x005110DC
		protected void SendCommandInternal(NetworkWriter writer, int channelId, string cmdName); // 0x009C5108-0x009C5388
		[EditorBrowsable] // 0x005110DC-0x005110F0
		public virtual bool InvokeCommand(int cmdHash, NetworkReader reader); // 0x009C5388-0x009C538C
		[EditorBrowsable] // 0x005110F0-0x00511104
		protected void SendRPCInternal(NetworkWriter writer, int channelId, string rpcName); // 0x009C5510-0x009C5640
		[EditorBrowsable] // 0x00511104-0x00511118
		protected void SendTargetRPCInternal(NetworkConnection conn, NetworkWriter writer, int channelId, string rpcName); // 0x009C5640-0x009C5758
		[EditorBrowsable] // 0x00511118-0x0051112C
		public virtual bool InvokeRPC(int cmdHash, NetworkReader reader); // 0x009C5758-0x009C575C
		[EditorBrowsable] // 0x0051112C-0x00511140
		protected void SendEventInternal(NetworkWriter writer, int channelId, string eventName); // 0x009C58E4-0x009C5A7C
		[EditorBrowsable] // 0x00511140-0x00511154
		public virtual bool InvokeSyncEvent(int cmdHash, NetworkReader reader); // 0x009C5A7C-0x009C5A80
		[EditorBrowsable] // 0x00511154-0x00511168
		public virtual bool InvokeSyncList(int cmdHash, NetworkReader reader); // 0x009C5B88-0x009C5B8C
		[EditorBrowsable] // 0x00511168-0x0051117C
		protected static void RegisterCommandDelegate(Type invokeClass, int cmdHash, CmdDelegate func); // 0x009C5CEC-0x009C5F78
		[EditorBrowsable] // 0x0051117C-0x00511190
		protected static void RegisterRpcDelegate(Type invokeClass, int cmdHash, CmdDelegate func); // 0x009C5F80-0x009C6210
		[EditorBrowsable] // 0x00511190-0x005111A4
		protected static void RegisterEventDelegate(Type invokeClass, int cmdHash, CmdDelegate func); // 0x009C6210-0x009C64A0
		[EditorBrowsable] // 0x005111A4-0x005111B8
		protected static void RegisterSyncListDelegate(Type invokeClass, int cmdHash, CmdDelegate func); // 0x009C64A0-0x009C6730
		internal static string GetInvoker(int cmdHash); // 0x009C6730-0x009C680C
		internal static bool GetInvokerForHashCommand(int cmdHash, out Type invokeClass, out CmdDelegate invokeFunction); // 0x009C69A8-0x009C6A28
		internal static bool GetInvokerForHashClientRpc(int cmdHash, out Type invokeClass, out CmdDelegate invokeFunction); // 0x009C6CA8-0x009C6D28
		internal static bool GetInvokerForHashSyncList(int cmdHash, out Type invokeClass, out CmdDelegate invokeFunction); // 0x009C6D28-0x009C6DA8
		internal static bool GetInvokerForHashSyncEvent(int cmdHash, out Type invokeClass, out CmdDelegate invokeFunction); // 0x009C6DA8-0x009C6E28
		private static bool GetInvokerForHash(int cmdHash, UNetInvokeType invokeType, out Type invokeClass, out CmdDelegate invokeFunction); // 0x009C6A28-0x009C6CA8
		internal static void DumpInvokers(); // 0x009C6E28-0x009C736C
		internal bool ContainsCommandDelegate(int cmdHash); // 0x009C736C-0x009C73F0
		internal bool InvokeCommandDelegate(int cmdHash, NetworkReader reader); // 0x009C538C-0x009C5510
		internal bool InvokeRpcDelegate(int cmdHash, NetworkReader reader); // 0x009C575C-0x009C58E4
		internal bool InvokeSyncEventDelegate(int cmdHash, NetworkReader reader); // 0x009C5A80-0x009C5B88
		internal bool InvokeSyncListDelegate(int cmdHash, NetworkReader reader); // 0x009C5B8C-0x009C5CEC
		internal static string GetCmdHashHandlerName(int cmdHash); // 0x009BDEB8-0x009BDFEC
		private static string GetCmdHashPrefixName(int cmdHash, string prefix); // 0x009C77D0-0x009C7910
		internal static string GetCmdHashCmdName(int cmdHash); // 0x009C7910-0x009C7980
		internal static string GetCmdHashRpcName(int cmdHash); // 0x009C7980-0x009C79F0
		internal static string GetCmdHashEventName(int cmdHash); // 0x009C79F0-0x009C7A60
		internal static string GetCmdHashListName(int cmdHash); // 0x009C7A60-0x009C7AD0
		[EditorBrowsable] // 0x005111B8-0x005111CC
		protected void SetSyncVarGameObject(GameObject newGameObject, ref GameObject gameObjectField, uint dirtyBit, ref NetworkInstanceId netIdField); // 0x009C7AD0-0x009C7F94
		[EditorBrowsable] // 0x005111CC-0x005111E0
		protected void SetSyncVar<T>(T value, ref T fieldValue, uint dirtyBit);
		public void SetDirtyBit(uint dirtyBit); // 0x009C7F94-0x009C7FA4
		public void ClearAllDirtyBits(); // 0x009C7FA4-0x009C7FD0
		internal int GetDirtyChannel(); // 0x009C7FD0-0x009C8050
		public virtual bool OnSerialize(NetworkWriter writer, bool initialState); // 0x009C8050-0x009C8084
		public virtual void OnDeserialize(NetworkReader reader, bool initialState); // 0x009C8084-0x009C80AC
		[EditorBrowsable] // 0x005111E0-0x005111F4
		public virtual void PreStartClient(); // 0x009C80AC-0x009C80B0
		public virtual void OnNetworkDestroy(); // 0x009C80B0-0x009C80B4
		public virtual void OnStartServer(); // 0x009C80B4-0x009C80B8
		public virtual void OnStartClient(); // 0x009C80B8-0x009C80BC
		public virtual void OnStartLocalPlayer(); // 0x009C80BC-0x009C80C0
		public virtual void OnStartAuthority(); // 0x009C80C0-0x009C80C4
		public virtual void OnStopAuthority(); // 0x009C80C4-0x009C80C8
		public virtual bool OnRebuildObservers(HashSet<NetworkConnection> observers, bool initialize); // 0x009C80C8-0x009C80D0
		public virtual void OnSetLocalVisibility(bool vis); // 0x009C80D0-0x009C80D4
		public virtual bool OnCheckObserver(NetworkConnection conn); // 0x009C80D4-0x009C80DC
		public virtual int GetNetworkChannel(); // 0x009C80DC-0x009C80E4
		public virtual float GetNetworkSendInterval(); // 0x009C80E4-0x009C80F0
	}

	internal class NetBuffer // TypeDefIndex: 3060
	{
		// Fields
		private byte[] m_Buffer; // 0x10
		private uint m_Pos; // 0x18
		private const int k_InitialSize = 64; // Metadata: 0x001F508B
		private const float k_GrowthFactor = 1.5f; // Metadata: 0x001F508F
		private const int k_BufferSizeWarning = 134217728; // Metadata: 0x001F5093
	
		// Properties
		public uint Position { get; } // 0x009C1E80-0x009C1E88 
		public int Length { get; } // 0x009C1E88-0x009C1EA8 
	
		// Constructors
		public NetBuffer(); // 0x009B5C40-0x009B5D18
		public NetBuffer(byte[] buffer); // 0x009C1EA8-0x009C1ED4
	
		// Methods
		public byte ReadByte(); // 0x009C1ED4-0x009C1FCC
		public void ReadBytes(byte[] buffer, uint count); // 0x009C1FCC-0x009C2200
		internal ArraySegment<byte> AsArraySegment(); // 0x009C2200-0x009C2270
		public void WriteByte(byte value); // 0x009C2270-0x009C22DC
		public void WriteByte2(byte value0, byte value1); // 0x009C24A8-0x009C2544
		public void WriteByte4(byte value0, byte value1, byte value2, byte value3); // 0x009C2544-0x009C2638
		public void WriteByte8(byte value0, byte value1, byte value2, byte value3, byte value4, byte value5, byte value6, byte value7); // 0x009C2638-0x009C27D4
		public void WriteBytesAtOffset(byte[] buffer, ushort targetOffset, ushort count); // 0x009C27D4-0x009C28D4
		public void WriteBytes(byte[] buffer, ushort count); // 0x009B6D80-0x009B6E90
		private void WriteCheckForSpace(ushort count); // 0x009C22DC-0x009C24A8
		public void FinishMessage(); // 0x009C28D4-0x009C2934
		public void SeekZero(); // 0x009B6D78-0x009B6D80
		public void Replace(byte[] buffer); // 0x009C2934-0x009C2940
		public override string ToString(); // 0x009C2940-0x009C29F4
	}

	internal struct UIntFloat // TypeDefIndex: 3061
	{
		// Fields
		public float floatValue; // 0x00
		public uint intValue; // 0x00
		public double doubleValue; // 0x00
		public ulong longValue; // 0x00
	}

	internal struct UIntDecimal // TypeDefIndex: 3062
	{
		// Fields
		public ulong longValue1; // 0x00
		public ulong longValue2; // 0x08
		public decimal decimalValue; // 0x00
	}

	internal class FloatConversion // TypeDefIndex: 3063
	{
		// Constructors
		public FloatConversion(); // 0x009C0478-0x009C0480
	
		// Methods
		public static float ToSingle(uint value); // 0x009C0464-0x009C046C
		public static double ToDouble(ulong value); // 0x009C046C-0x009C0474
		public static decimal ToDecimal(ulong value1, ulong value2); // 0x009C0474-0x009C0478
	}

	public class NetworkCallbacks : MonoBehaviour // TypeDefIndex: 3064
	{
		// Constructors
		public NetworkCallbacks(); // 0x009C946C-0x009C9474
	
		// Methods
		private void LateUpdate(); // 0x009C940C-0x009C946C
	}

	[Obsolete] // 0x0050FA78-0x0050FAB0
	public class NetworkClient // TypeDefIndex: 3065
	{
		// Fields
		private Type m_NetworkConnectionClass; // 0x10
		private const int k_MaxEventsPerFrame = 500; // Metadata: 0x001F5097
		private static List<NetworkClient> s_Clients; // 0x00
		private static bool s_IsActive; // 0x08
		private HostTopology m_HostTopology; // 0x18
		private int m_HostPort; // 0x20
		private bool m_UseSimulator; // 0x24
		private int m_SimulatedLatency; // 0x28
		private float m_PacketLoss; // 0x2C
		private string m_ServerIp; // 0x30
		private int m_ServerPort; // 0x38
		private int m_ClientId; // 0x3C
		private int m_ClientConnectionId; // 0x40
		private int m_StatResetTime; // 0x44
		private EndPoint m_RemoteEndPoint; // 0x48
		private static CRCMessage s_CRCMessage; // 0x10
		private NetworkMessageHandlers m_MessageHandlers; // 0x50
		protected NetworkConnection m_Connection; // 0x58
		private byte[] m_MsgBuffer; // 0x60
		private NetworkReader m_MsgReader; // 0x68
		protected ConnectState m_AsyncConnect; // 0x70
		private string m_RequestedServerHost; // 0x78
	
		// Properties
		public static List<NetworkClient> allClients { get; } // 0x009C9474-0x009C94DC 
		public static bool active { get; } // 0x009C94DC-0x009C9544 
		public string serverIp { get; } // 0x009C9568-0x009C9570 
		public int serverPort { get; } // 0x009C9570-0x009C9578 
		public NetworkConnection connection { get; } // 0x009C9578-0x009C9580 
		[Obsolete] // 0x005113C0-0x005113F8
		public PeerInfoMessage[] peers { get; } // 0x009C9580-0x009C9588 
		internal int hostId { get; } // 0x009C9588-0x009C9590 
		public Dictionary<short, NetworkMessageDelegate> handlers { get; } // 0x009C9590-0x009C95B0 
		public int numChannels { get; } // 0x009C95B0-0x009C95DC 
		public HostTopology hostTopology { get; } // 0x009C95DC-0x009C95E4 
		public int hostPort { get; set; } // 0x009C95E4-0x009C95EC 0x009C95EC-0x009C96A4
		public bool isConnected { get; } // 0x009C96A4-0x009C96B4 
		public Type networkConnectionClass { get; } // 0x009C96B4-0x009C96BC 
	
		// Nested types
		protected enum ConnectState // TypeDefIndex: 3066
		{
			None = 0,
			Resolving = 1,
			Resolved = 2,
			Connecting = 3,
			Connected = 4,
			Disconnected = 5,
			Failed = 6
		}
	
		// Constructors
		public NetworkClient(); // 0x009C0F78-0x009C1144
		public NetworkClient(NetworkConnection conn); // 0x009C9740-0x009C9958
		static NetworkClient(); // 0x009CE8C4-0x009CE960
	
		// Methods
		internal void SetHandlers(NetworkConnection conn); // 0x009C05C8-0x009C05F8
		public void SetNetworkConnectionClass<T>()
			where T : NetworkConnection;
		public bool Configure(ConnectionConfig config, int maxConnections); // 0x009C9958-0x009C99D4
		public bool Configure(HostTopology topology); // 0x009C99D4-0x009C99E4
		public void Connect(MatchInfo matchInfo); // 0x009C99E4-0x009C9A14
		public bool ReconnectToNewHost(string serverIp, int serverPort); // 0x009C9D34-0x009CA288
		public bool ReconnectToNewHost(EndPoint secureTunnelEndPoint); // 0x009CA41C-0x009CAC14
		public void ConnectWithSimulator(string serverIp, int serverPort, int latency, float packetLoss); // 0x009CAF70-0x009CAF84
		private static bool IsValidIpV6(string address); // 0x009CAF84-0x009CB038
		public void Connect(string serverIp, int serverPort); // 0x009CAC14-0x009CAF70
		public void Connect(EndPoint secureTunnelEndPoint); // 0x009CB038-0x009CB6AC
		private void PrepareForConnect(); // 0x009C9A14-0x009C9A1C
		private void PrepareForConnect(bool usePlatformSpecificProtocols); // 0x009CB6AC-0x009CBB5C
		internal static void GetHostAddressesCallback(IAsyncResult ar); // 0x009CBB5C-0x009CC280
		internal void ContinueConnect(); // 0x009CC280-0x009CC774
		private void ConnectWithRelay(MatchInfo info); // 0x009C9A1C-0x009C9D34
		public virtual void Disconnect(); // 0x009CC774-0x009CC90C
		public bool Send(short msgType, MessageBase msg); // 0x009CC988-0x009CCAC0
		public bool SendWriter(NetworkWriter writer, int channelId); // 0x009CCAC0-0x009CCBF8
		public bool SendBytes(byte[] data, int numBytes, int channelId); // 0x009CCBF8-0x009CCD44
		public bool SendUnreliable(short msgType, MessageBase msg); // 0x009CCD44-0x009CCE7C
		public bool SendByChannel(short msgType, MessageBase msg, int channelId); // 0x009CCE7C-0x009CCFC8
		public void SetMaxDelay(float seconds); // 0x009CCFC8-0x009CD098
		public void Shutdown(); // 0x009CD0F8-0x009CD32C
		internal virtual void Update(); // 0x009CD3B0-0x009CDB00
		private void GenerateConnectError(int error); // 0x009CDB00-0x009CDBE8
		private void GenerateDataError(int error); // 0x009CDBF8-0x009CDCE0
		private void GenerateDisconnectError(int error); // 0x009CDCE0-0x009CDDC8
		private void GenerateError(int error); // 0x009CDE38-0x009CDFBC
		public void GetStatsOut(out int numMsgs, out int numBufferedMsgs, out int numBytes, out int lastBufferedPerSecond); // 0x009CDFBC-0x009CDFE4
		public void GetStatsIn(out int numMsgs, out int numBytes); // 0x009CDFE4-0x009CE008
		public Dictionary<short, NetworkConnection.PacketStat> GetConnectionStats(); // 0x009CE008-0x009CE020
		public void ResetConnectionStats(); // 0x009CE020-0x009CE024
		public int GetRTT(); // 0x009CE024-0x009CE174
		internal void RegisterSystemHandlers(bool localClient); // 0x009C0778-0x009C085C
		private void OnCRC(NetworkMessage netMsg); // 0x009CE174-0x009CE230
		public void RegisterHandler(short msgType, NetworkMessageDelegate handler); // 0x009CE230-0x009CE24C
		public void RegisterHandlerSafe(short msgType, NetworkMessageDelegate handler); // 0x009BAB98-0x009BABB4
		public void UnregisterHandler(short msgType); // 0x009CE24C-0x009CE268
		public static Dictionary<short, NetworkConnection.PacketStat> GetTotalConnectionStats(); // 0x009CE268-0x009CE5C8
		internal static void AddClient(NetworkClient client); // 0x009C96BC-0x009C9740
		internal static bool RemoveClient(NetworkClient client); // 0x009CD32C-0x009CD3B0
		internal static void UpdateClients(); // 0x009CE614-0x009CE78C
		public static void ShutdownAll(); // 0x009CE78C-0x009CE8C4
		internal static void SetActive(bool state); // 0x009C05F8-0x009C0778
	}

	[Obsolete] // 0x0050FAB0-0x0050FAE8
	public class NetworkConnection : IDisposable // TypeDefIndex: 3067
	{
		// Fields
		private ChannelBuffer[] m_Channels; // 0x10
		private List<PlayerController> m_PlayerControllers; // 0x18
		private NetworkMessage m_NetMsg; // 0x20
		private HashSet<NetworkIdentity> m_VisList; // 0x28
		private NetworkWriter m_Writer; // 0x30
		private Dictionary<short, NetworkMessageDelegate> m_MessageHandlersDict; // 0x38
		private NetworkMessageHandlers m_MessageHandlers; // 0x40
		private HashSet<NetworkInstanceId> m_ClientOwnedObjects; // 0x48
		private NetworkMessage m_MessageInfo; // 0x50
		private const int k_MaxMessageLogSize = 150; // Metadata: 0x001F50B7
		private NetworkError error; // 0x58
		public int hostId; // 0x5C
		public int connectionId; // 0x60
		public bool isReady; // 0x64
		public string address; // 0x68
		public float lastMessageTime; // 0x70
		public bool logNetworkMessages; // 0x74
		private Dictionary<short, PacketStat> m_PacketStats; // 0x78
		private bool m_Disposed; // 0x80
	
		// Properties
		internal HashSet<NetworkIdentity> visList { get; } // 0x009CE960-0x009CE968 
		public List<PlayerController> playerControllers { get; } // 0x009CE968-0x009CE970 
		public HashSet<NetworkInstanceId> clientOwnedObjects { get; } // 0x009CE970-0x009CE978 
		public bool isConnected { get; } // 0x009CE978-0x009CE988 
		public NetworkError lastError { get; internal set; } // 0x009CE988-0x009CE990 0x009CE990-0x009CE998
		internal Dictionary<short, PacketStat> packetStats { get; } // 0x009CE998-0x009CE9A0 
	
		// Nested types
		public class PacketStat // TypeDefIndex: 3068
		{
			// Fields
			public short msgType; // 0x10
			public int count; // 0x14
			public int bytes; // 0x18
	
			// Constructors
			public PacketStat(); // 0x009D0AE0-0x009D0B0C
			public PacketStat(PacketStat s); // 0x009CE5C8-0x009CE614
	
			// Methods
			public override string ToString(); // 0x009D0B0C-0x009D0CEC
		}
	
		// Constructors
		public NetworkConnection(); // 0x009CEFAC-0x009CF0D8
	
		// Methods
		public virtual void Initialize(string networkAddress, int networkHostId, int networkConnectionId, HostTopology hostTopology); // 0x009CE9A0-0x009CEC84
		~NetworkConnection(); // 0x009CECC0-0x009CED38
		public void Dispose(); // 0x009CC90C-0x009CC988
		protected virtual void Dispose(bool disposing); // 0x009CED38-0x009CEF4C
		private static bool IsSequencedQoS(QosType qos); // 0x009CECA8-0x009CECC0
		private static bool IsReliableQoS(QosType qos); // 0x009CEC84-0x009CECA8
		public bool SetChannelOption(int channelId, ChannelOption option, int value); // 0x009CEF4C-0x009CEFAC
		public void Disconnect(); // 0x009CA288-0x009CA41C
		internal void SetHandlers(NetworkMessageHandlers handlers); // 0x009C9544-0x009C9568
		public bool CheckHandler(short msgType); // 0x009CF1F4-0x009CF25C
		public bool InvokeHandlerNoData(short msgType); // 0x009CDBEC-0x009CDBF8
		public bool InvokeHandler(short msgType, NetworkReader reader, int channelId); // 0x009CF25C-0x009CF3DC
		public bool InvokeHandler(NetworkMessage netMsg); // 0x009C0DF4-0x009C0EA4
		internal void HandleFragment(NetworkReader reader, int channelId); // 0x009CF3DC-0x009CF4F0
		public void RegisterHandler(short msgType, NetworkMessageDelegate handler); // 0x009CF4F0-0x009CF50C
		public void UnregisterHandler(short msgType); // 0x009CF50C-0x009CF528
		internal void SetPlayerController(PlayerController player); // 0x009B8898-0x009B8960
		internal void RemovePlayerController(short playerControllerId); // 0x009B9B78-0x009B9D20
		internal bool GetPlayerController(short playerControllerId, out PlayerController playerController); // 0x009B9234-0x009B9368
		public void FlushChannels(); // 0x009CDDC8-0x009CDE38
		public void SetMaxDelay(float seconds); // 0x009CD098-0x009CD0F8
		public virtual bool Send(short msgType, MessageBase msg); // 0x009CF528-0x009CF538
		public virtual bool SendUnreliable(short msgType, MessageBase msg); // 0x009CF538-0x009CF548
		public virtual bool SendByChannel(short msgType, MessageBase msg, int channelId); // 0x009CF548-0x009CF5CC
		public virtual bool SendBytes(byte[] bytes, int numBytes, int channelId); // 0x009CF5CC-0x009CF678
		public virtual bool SendWriter(NetworkWriter writer, int channelId); // 0x009CFC98-0x009CFD4C
		private void LogSend(byte[] bytes); // 0x009CF678-0x009CF9F4
		private bool CheckChannel(int channelId); // 0x009CF9F4-0x009CFC98
		public void ResetStats(); // 0x009CDBE8-0x009CDBEC
		protected void HandleBytes(byte[] buffer, int receivedSize, int channelId); // 0x009CFD4C-0x009CFDD8
		protected void HandleReader(NetworkReader reader, int receivedSize, int channelId); // 0x009CFDD8-0x009D03E4
		public virtual void GetStatsOut(out int numMsgs, out int numBufferedMsgs, out int numBytes, out int lastBufferedPerSecond); // 0x009D03E4-0x009D0490
		public virtual void GetStatsIn(out int numMsgs, out int numBytes); // 0x009D0490-0x009D0514
		public override string ToString(); // 0x009D0514-0x009D06D0
		internal void AddToVisList(NetworkIdentity uv); // 0x009D06D0-0x009D0768
		internal void RemoveFromVisList(NetworkIdentity uv, bool isDestroyed); // 0x009D0768-0x009D0818
		internal void RemoveObservers(); // 0x009CF0D8-0x009CF1F4
		public virtual void TransportReceive(byte[] bytes, int numBytes, int channelId); // 0x009D0818-0x009D081C
		[Obsolete] // 0x005111F4-0x00511230
		public virtual void TransportRecieve(byte[] bytes, int numBytes, int channelId); // 0x009D081C-0x009D082C
		public virtual bool TransportSend(byte[] bytes, int numBytes, int channelId, out byte error); // 0x009D082C-0x009D098C
		internal void AddOwnedObject(NetworkIdentity obj); // 0x009D098C-0x009D0A2C
		internal void RemoveOwnedObject(NetworkIdentity obj); // 0x009D0A2C-0x009D0AAC
		internal static void OnFragment(NetworkMessage netMsg); // 0x009D0AAC-0x009D0AE0
	}

	[Obsolete] // 0x0050FAE8-0x0050FB20
	public class NetworkCRC // TypeDefIndex: 3069
	{
		// Fields
		internal static NetworkCRC s_Singleton; // 0x00
		private Dictionary<string, int> m_Scripts; // 0x10
		private bool m_ScriptCRCCheck; // 0x18
	
		// Properties
		internal static NetworkCRC singleton { get; } // 0x009C85DC-0x009C8658 
		public Dictionary<string, int> scripts { get; } // 0x009C86C8-0x009C86D0 
		public static bool scriptCRCCheck { get; set; } // 0x009C86D0-0x009C86F0 0x009C86F0-0x009C8720
	
		// Constructors
		public NetworkCRC(); // 0x009C8658-0x009C86C8
	
		// Methods
		public static void ReinitializeScriptCRCs(Assembly callingAssembly); // 0x009C8720-0x009C88D4
		public static void RegisterBehaviour(string name, int channel); // 0x009C88D4-0x009C8948
		internal static bool Validate(CRCMessageEntry[] scripts, int numChannels); // 0x009C8948-0x009C897C
		private bool ValidateInternal(CRCMessageEntry[] remoteScripts, int numChannels); // 0x009C897C-0x009C8F64
		private void Dump(CRCMessageEntry[] remoteScripts); // 0x009C8F64-0x009C940C
	}

	[Obsolete] // 0x0050FB20-0x0050FB58
	public struct NetworkBroadcastResult // TypeDefIndex: 3070
	{
		// Fields
		public string serverAddress; // 0x00
		public byte[] broadcastData; // 0x08
	}

	[AddComponentMenu] // 0x0050FB58-0x0050FBC8
	[DisallowMultipleComponent] // 0x0050FB58-0x0050FBC8
	[Obsolete] // 0x0050FB58-0x0050FBC8
	public class NetworkDiscovery : MonoBehaviour // TypeDefIndex: 3071
	{
		// Fields
		private const int k_MaxBroadcastMsgSize = 1024; // Metadata: 0x001F50BB
		[SerializeField] // 0x00510920-0x00510930
		private int m_BroadcastPort; // 0x18
		[SerializeField] // 0x00510930-0x00510940
		private int m_BroadcastKey; // 0x1C
		[SerializeField] // 0x00510940-0x00510950
		private int m_BroadcastVersion; // 0x20
		[SerializeField] // 0x00510950-0x00510960
		private int m_BroadcastSubVersion; // 0x24
		[SerializeField] // 0x00510960-0x00510970
		private int m_BroadcastInterval; // 0x28
		[SerializeField] // 0x00510970-0x00510980
		private bool m_UseNetworkManager; // 0x2C
		[SerializeField] // 0x00510980-0x00510990
		private string m_BroadcastData; // 0x30
		[SerializeField] // 0x00510990-0x005109A0
		private bool m_ShowGUI; // 0x38
		[SerializeField] // 0x005109A0-0x005109B0
		private int m_OffsetX; // 0x3C
		[SerializeField] // 0x005109B0-0x005109C0
		private int m_OffsetY; // 0x40
		private int m_HostId; // 0x44
		private bool m_Running; // 0x48
		private bool m_IsServer; // 0x49
		private bool m_IsClient; // 0x4A
		private byte[] m_MsgOutBuffer; // 0x50
		private byte[] m_MsgInBuffer; // 0x58
		private HostTopology m_DefaultTopology; // 0x60
		private Dictionary<string, NetworkBroadcastResult> m_BroadcastsReceived; // 0x68
	
		// Properties
		public int broadcastPort { get; set; } // 0x009D0CEC-0x009D0CF4 0x009D0CF4-0x009D0CFC
		public int broadcastKey { get; set; } // 0x009D0CFC-0x009D0D04 0x009D0D04-0x009D0D0C
		public int broadcastVersion { get; set; } // 0x009D0D0C-0x009D0D14 0x009D0D14-0x009D0D1C
		public int broadcastSubVersion { get; set; } // 0x009D0D1C-0x009D0D24 0x009D0D24-0x009D0D2C
		public int broadcastInterval { get; set; } // 0x009D0D2C-0x009D0D34 0x009D0D34-0x009D0D3C
		public bool useNetworkManager { get; set; } // 0x009D0D3C-0x009D0D44 0x009D0D44-0x009D0D50
		public string broadcastData { get; set; } // 0x009D0D50-0x009D0D58 0x009D0D58-0x009D0E24
		public bool showGUI { get; set; } // 0x009D0EB8-0x009D0EC0 0x009D0EC0-0x009D0ECC
		public int offsetX { get; set; } // 0x009D0ECC-0x009D0ED4 0x009D0ED4-0x009D0EDC
		public int offsetY { get; set; } // 0x009D0EDC-0x009D0EE4 0x009D0EE4-0x009D0EEC
		public int hostId { get; set; } // 0x009D0EEC-0x009D0EF4 0x009D0EF4-0x009D0EFC
		public bool running { get; set; } // 0x009D0EFC-0x009D0F04 0x009D0F04-0x009D0F10
		public bool isServer { get; set; } // 0x009D0F10-0x009D0F18 0x009D0F18-0x009D0F24
		public bool isClient { get; set; } // 0x009D0F24-0x009D0F2C 0x009D0F2C-0x009D0F38
		public Dictionary<string, NetworkBroadcastResult> broadcastsReceived { get; } // 0x009D0F38-0x009D0F40 
	
		// Constructors
		public NetworkDiscovery(); // 0x009D3040-0x009D40BC
	
		// Methods
		private static byte[] StringToBytes(string str); // 0x009D0E24-0x009D0EB8
		private static string BytesToString(byte[] bytes); // 0x009D0F40-0x009D0FD8
		public bool Initialize(); // 0x009D0FD8-0x009D1570
		public bool StartAsClient(); // 0x009D1A58-0x009D1E64
		public bool StartAsServer(); // 0x009D1570-0x009D1A58
		public void StopBroadcast(); // 0x009D1E64-0x009D21DC
		private void Update(); // 0x009D21DC-0x009D25A4
		private void OnDestroy(); // 0x009D25A4-0x009D28E4
		public virtual void OnReceivedBroadcast(string fromAddress, string data); // 0x009D28E4-0x009D28E8
		private void OnGUI(); // 0x009D28E8-0x009D3040
	}

	[Serializable]
	[Obsolete] // 0x0050FBC8-0x0050FC00
	public struct NetworkHash128 // TypeDefIndex: 3072
	{
		// Fields
		public byte i0; // 0x00
		public byte i1; // 0x01
		public byte i2; // 0x02
		public byte i3; // 0x03
		public byte i4; // 0x04
		public byte i5; // 0x05
		public byte i6; // 0x06
		public byte i7; // 0x07
		public byte i8; // 0x08
		public byte i9; // 0x09
		public byte i10; // 0x0A
		public byte i11; // 0x0B
		public byte i12; // 0x0C
		public byte i13; // 0x0D
		public byte i14; // 0x0E
		public byte i15; // 0x0F
	
		// Methods
		public void Reset(); // 0x005886DC-0x005886E4
		public bool IsValid(); // 0x005886E4-0x005886EC
		private static int HexToNumber(char c); // 0x00A1FBD4-0x00A1FC24
		public static NetworkHash128 Parse(string text); // 0x00A1FC24-0x00A20D48
		public override string ToString(); // 0x005886EC-0x005886F4
	}

	[AddComponentMenu] // 0x0050FC00-0x0050FC80
	[DisallowMultipleComponent] // 0x0050FC00-0x0050FC80
	[ExecuteInEditMode] // 0x0050FC00-0x0050FC80
	[Obsolete] // 0x0050FC00-0x0050FC80
	public sealed class NetworkIdentity : MonoBehaviour // TypeDefIndex: 3073
	{
		// Fields
		[SerializeField] // 0x005109C0-0x005109D0
		private NetworkSceneId m_SceneId; // 0x18
		[SerializeField] // 0x005109D0-0x005109E0
		private NetworkHash128 m_AssetId; // 0x1C
		[SerializeField] // 0x005109E0-0x005109F0
		private bool m_ServerOnly; // 0x2C
		[SerializeField] // 0x005109F0-0x00510A00
		private bool m_LocalPlayerAuthority; // 0x2D
		private bool m_IsClient; // 0x2E
		private bool m_IsServer; // 0x2F
		private bool m_HasAuthority; // 0x30
		private NetworkInstanceId m_NetId; // 0x34
		private bool m_IsLocalPlayer; // 0x38
		private NetworkConnection m_ConnectionToServer; // 0x40
		private NetworkConnection m_ConnectionToClient; // 0x48
		private short m_PlayerId; // 0x50
		private NetworkBehaviour[] m_NetworkBehaviours; // 0x58
		private HashSet<int> m_ObserverConnections; // 0x60
		private List<NetworkConnection> m_Observers; // 0x68
		private NetworkConnection m_ClientAuthorityOwner; // 0x70
		private bool m_Reset; // 0x78
		private static uint s_NextNetworkId; // 0x00
		private static NetworkWriter s_UpdateWriter; // 0x08
		public static ClientAuthorityCallback clientAuthorityCallback; // 0x10
	
		// Properties
		public bool isClient { get; } // 0x00A20D48-0x00A20D50 
		public bool isServer { get; } // 0x00A20D50-0x00A20E10 
		public bool hasAuthority { get; } // 0x00A20E10-0x00A20E18 
		public NetworkInstanceId netId { get; } // 0x00A20E18-0x00A20E20 
		public NetworkSceneId sceneId { get; } // 0x00A20E20-0x00A20E28 
		public bool serverOnly { get; set; } // 0x00A20E28-0x00A20E30 0x00A20E30-0x00A20E3C
		public bool localPlayerAuthority { get; set; } // 0x00A20E3C-0x00A20E44 0x00A20E44-0x00A20E50
		public NetworkConnection clientAuthorityOwner { get; } // 0x00A20E50-0x00A20E58 
		public NetworkHash128 assetId { get; } // 0x00A20E58-0x00A20E68 
		public bool isLocalPlayer { get; } // 0x00A21464-0x00A2146C 
		public short playerControllerId { get; } // 0x00A2146C-0x00A21474 
		public NetworkConnection connectionToServer { get; } // 0x00A21474-0x00A2147C 
		public NetworkConnection connectionToClient { get; } // 0x00A2147C-0x00A21484 
		public ReadOnlyCollection<NetworkConnection> observers { get; } // 0x00A21484-0x00A21500 
	
		// Nested types
		public delegate void ClientAuthorityCallback(NetworkConnection conn, NetworkIdentity uv, bool authorityState); // TypeDefIndex: 3074; 0x00A26238-0x00A26640
	
		// Constructors
		public NetworkIdentity(); // 0x00A26D60-0x00A26D70
		static NetworkIdentity(); // 0x00A26D70-0x00A26DEC
	
		// Methods
		internal void SetDynamicAssetId(NetworkHash128 newAssetId); // 0x00A20E68-0x00A20FF0
		internal void SetClientOwner(NetworkConnection conn); // 0x00A20FF0-0x00A210C0
		internal void ClearClientOwner(); // 0x00A210C0-0x00A210C8
		internal void ForceAuthority(bool authority); // 0x00A210C8-0x00A210F4
		internal static NetworkInstanceId GetNextNetworkId(); // 0x00A21500-0x00A21570
		private void CacheBehaviours(); // 0x00A21570-0x00A215D0
		internal static void AddNetworkId(uint id); // 0x00A215D0-0x00A21668
		internal void SetNetworkInstanceId(NetworkInstanceId newNetId); // 0x00A21668-0x00A2167C
		public void ForceSceneId(int newSceneId); // 0x00A2167C-0x00A21684
		internal void UpdateClientServer(bool isClientFlag, bool isServerFlag); // 0x00A21684-0x00A216B8
		internal void SetNotLocalPlayer(); // 0x00A216B8-0x00A21794
		internal void RemoveObserverInternal(NetworkConnection conn); // 0x00A21794-0x00A21830
		private void OnDestroy(); // 0x00A21830-0x00A21930
		internal void OnStartServer(bool allowNonZeroNetId); // 0x00A21930-0x00A21FD4
		internal void OnStartClient(); // 0x00A21FD4-0x00A223C0
		internal void OnStartAuthority(); // 0x00A210F4-0x00A212AC
		internal void OnStopAuthority(); // 0x00A212AC-0x00A21464
		internal void OnSetLocalVisibility(bool vis); // 0x00A223C0-0x00A2258C
		internal bool OnCheckObserver(NetworkConnection conn); // 0x00A2258C-0x00A22764
		internal void UNetSerializeAllVars(NetworkWriter writer); // 0x00A22764-0x00A227F0
		internal void HandleClientAuthority(bool authority); // 0x00A227F0-0x00A228FC
		private bool GetInvokeComponent(int cmdHash, Type invokeClass, out NetworkBehaviour invokeComponent); // 0x00A228FC-0x00A22CA8
		internal void HandleSyncEvent(int cmdHash, NetworkReader reader); // 0x00A22CA8-0x00A2329C
		internal void HandleSyncList(int cmdHash, NetworkReader reader); // 0x00A2329C-0x00A23890
		internal void HandleCommand(int cmdHash, NetworkReader reader); // 0x00A23890-0x00A23E84
		internal void HandleRPC(int cmdHash, NetworkReader reader); // 0x00A23E84-0x00A24478
		public void UNetUpdate(); // 0x00A24478-0x00A249E0
		private NetworkBehaviour[] GetBehavioursOfSameChannel(int channelId, bool initialState); // 0x00A249E0-0x00A24B28
		internal void OnUpdateVars(NetworkReader reader, bool initialState, NetworkMessage netMsg); // 0x00A24B28-0x00A24BCC
		internal void SetLocalPlayer(short localPlayerControllerId); // 0x00A24BCC-0x00A24C8C
		internal void SetConnectionToServer(NetworkConnection conn); // 0x00A24C8C-0x00A24C94
		internal void SetConnectionToClient(NetworkConnection conn, short newPlayerControllerId); // 0x00A24C94-0x00A24CA0
		internal void OnNetworkDestroy(); // 0x00A24CA0-0x00A24D14
		internal void ClearObservers(); // 0x00A24D14-0x00A24DF8
		internal void AddObserver(NetworkConnection conn); // 0x00A24DF8-0x00A25228
		internal void RemoveObserver(NetworkConnection conn); // 0x00A25228-0x00A252D8
		public void RebuildObservers(bool initialize); // 0x00A252D8-0x00A25F44
		public bool RemoveClientAuthority(NetworkConnection conn); // 0x00A25F44-0x00A26238
		public bool AssignClientAuthority(NetworkConnection conn); // 0x00A26640-0x00A26940
		internal void MarkForReset(); // 0x00A26940-0x00A2694C
		internal void Reset(); // 0x00A2694C-0x00A269F0
		[RuntimeInitializeOnLoadMethod] // 0x00511230-0x00511240
		private static void OnRuntimeInitializeOnLoad(); // 0x00A269F0-0x00A26AC4
		internal static void UNetStaticUpdate(); // 0x00A26AC4-0x00A26B70
	}

	[Serializable]
	[Obsolete] // 0x0050FC80-0x0050FCB8
	public struct NetworkInstanceId : IEquatable<NetworkInstanceId> // TypeDefIndex: 3075
	{
		// Fields
		[SerializeField] // 0x00510A00-0x00510A10
		private readonly uint m_Value; // 0x00
		public static NetworkInstanceId Invalid; // 0x00
		internal static NetworkInstanceId Zero; // 0x04
	
		// Properties
		public uint Value { get; } // 0x00588754-0x00588828 
	
		// Constructors
		public NetworkInstanceId(uint value); // 0x005886F4-0x005886FC
		static NetworkInstanceId(); // 0x00A2700C-0x00A2706C
	
		// Methods
		public bool IsEmpty(); // 0x005886FC-0x0058870C
		public override int GetHashCode(); // 0x0058870C-0x00588714
		public override bool Equals(object obj); // 0x00588714-0x0058871C
		public bool Equals(NetworkInstanceId other); // 0x0058871C-0x00588728
		public static bool operator ==(NetworkInstanceId c1, NetworkInstanceId c2); // 0x00A26FC0-0x00A26FCC
		public static bool operator !=(NetworkInstanceId c1, NetworkInstanceId c2); // 0x00A26FCC-0x00A2700C
		public override string ToString(); // 0x00588728-0x00588754
	}

	[AddComponentMenu] // 0x0050FCB8-0x0050FD18
	[Obsolete] // 0x0050FCB8-0x0050FD18
	public class NetworkLobbyManager : NetworkManager // TypeDefIndex: 3076
	{
		// Fields
		[SerializeField] // 0x00510A10-0x00510A20
		private bool m_ShowLobbyGUI; // 0xF8
		[SerializeField] // 0x00510A20-0x00510A30
		private int m_MaxPlayers; // 0xFC
		[SerializeField] // 0x00510A30-0x00510A40
		private int m_MaxPlayersPerConnection; // 0x100
		[SerializeField] // 0x00510A40-0x00510A50
		private int m_MinPlayers; // 0x104
		[SerializeField] // 0x00510A50-0x00510A60
		private NetworkLobbyPlayer m_LobbyPlayerPrefab; // 0x108
		[SerializeField] // 0x00510A60-0x00510A70
		private GameObject m_GamePlayerPrefab; // 0x110
		[SerializeField] // 0x00510A70-0x00510A80
		private string m_LobbyScene; // 0x118
		[SerializeField] // 0x00510A80-0x00510A90
		private string m_PlayScene; // 0x120
		private List<PendingPlayer> m_PendingPlayers; // 0x128
		public NetworkLobbyPlayer[] lobbySlots; // 0x130
		private static LobbyReadyToBeginMessage s_ReadyToBeginMessage; // 0x00
		private static IntegerMessage s_SceneLoadedMessage; // 0x08
		private static LobbyReadyToBeginMessage s_LobbyReadyToBeginMessage; // 0x10
	
		// Properties
		public bool showLobbyGUI { get; set; } // 0x00A2706C-0x00A27074 0x00A27074-0x00A27080
		public int maxPlayers { get; set; } // 0x00A27080-0x00A27088 0x00A27088-0x00A27090
		public int maxPlayersPerConnection { get; set; } // 0x00A27090-0x00A27098 0x00A27098-0x00A270A0
		public int minPlayers { get; set; } // 0x00A270A0-0x00A270A8 0x00A270A8-0x00A270B0
		public NetworkLobbyPlayer lobbyPlayerPrefab { get; set; } // 0x00A270B0-0x00A270B8 0x00A270B8-0x00A270C0
		public GameObject gamePlayerPrefab { get; set; } // 0x00A270C0-0x00A270C8 0x00A270C8-0x00A270D0
		public string lobbyScene { get; set; } // 0x00A270D0-0x00A270D8 0x00A270D8-0x00A270E4
		public string playScene { get; set; } // 0x00A270E4-0x00A270EC 0x00A270EC-0x00A270F4
	
		// Nested types
		private struct PendingPlayer // TypeDefIndex: 3077
		{
			// Fields
			public NetworkConnection conn; // 0x00
			public GameObject lobbyPlayer; // 0x08
		}
	
		// Constructors
		public NetworkLobbyManager(); // 0x00A2AF9C-0x00A2B04C
		static NetworkLobbyManager(); // 0x00A2B17C-0x00A2B238
	
		// Methods
		private new void OnValidate(); // 0x00A270F4-0x00A2730C
		private byte FindSlot(); // 0x00A2730C-0x00A273F8
		private void SceneLoadedForPlayer(NetworkConnection conn, GameObject lobbyPlayerGameObject); // 0x00A273F8-0x00A27874
		private static int CheckConnectionIsReadyToBegin(NetworkConnection conn); // 0x00A27BA8-0x00A27C84
		public void CheckReadyToBegin(); // 0x00A27C84-0x00A27E2C
		public void ServerReturnToLobby(); // 0x00A27E2C-0x00A27F30
		private void CallOnClientEnterLobby(); // 0x00A27F30-0x00A28024
		private void CallOnClientExitLobby(); // 0x00A28024-0x00A28114
		public bool SendReturnToLobby(); // 0x00A28114-0x00A281AC
		public override void OnServerConnect(NetworkConnection conn); // 0x00A281AC-0x00A283E8
		public override void OnServerDisconnect(NetworkConnection conn); // 0x00A2853C-0x00A286AC
		public override void OnServerAddPlayer(NetworkConnection conn, short playerControllerId); // 0x00A287CC-0x00A28BB8
		public override void OnServerRemovePlayer(NetworkConnection conn, PlayerController player); // 0x00A28BB8-0x00A28DA8
		public override void ServerChangeScene(string sceneName); // 0x00A28E64-0x00A290AC
		public override void OnServerSceneChanged(string sceneName); // 0x00A292BC-0x00A29394
		private void OnServerReadyToBeginMessage(NetworkMessage netMsg); // 0x00A29394-0x00A29658
		private void OnServerSceneLoadedMessage(NetworkMessage netMsg); // 0x00A29658-0x00A2985C
		private void OnServerReturnToLobbyMessage(NetworkMessage netMsg); // 0x00A2985C-0x00A29900
		public override void OnStartServer(); // 0x00A29900-0x00A29B40
		public override void OnStartHost(); // 0x00A29B50-0x00A29B60
		public override void OnStopHost(); // 0x00A29B60-0x00A29B70
		public override void OnStartClient(NetworkClient lobbyClient); // 0x00A29B70-0x00A29E64
		public override void OnClientConnect(NetworkConnection conn); // 0x00A29E64-0x00A29EA4
		public override void OnClientDisconnect(NetworkConnection conn); // 0x00A29F5C-0x00A29F94
		public override void OnStopClient(); // 0x00A2A094-0x00A2A0C4
		public override void OnClientSceneChanged(NetworkConnection conn); // 0x00A2A0C4-0x00A2A168
		private void OnClientReadyToBegin(NetworkMessage netMsg); // 0x00A2A3D0-0x00A2A704
		private void OnClientAddPlayerFailedMessage(NetworkMessage netMsg); // 0x00A2A704-0x00A2A7B4
		public virtual void OnLobbyStartHost(); // 0x00A2A7B4-0x00A2A7B8
		public virtual void OnLobbyStopHost(); // 0x00A2A7B8-0x00A2A7BC
		public virtual void OnLobbyStartServer(); // 0x00A2A7BC-0x00A2A7C0
		public virtual void OnLobbyServerConnect(NetworkConnection conn); // 0x00A2A7C0-0x00A2A7C4
		public virtual void OnLobbyServerDisconnect(NetworkConnection conn); // 0x00A2A7C4-0x00A2A7C8
		public virtual void OnLobbyServerSceneChanged(string sceneName); // 0x00A2A7C8-0x00A2A7CC
		public virtual GameObject OnLobbyServerCreateLobbyPlayer(NetworkConnection conn, short playerControllerId); // 0x00A2A7CC-0x00A2A7D4
		public virtual GameObject OnLobbyServerCreateGamePlayer(NetworkConnection conn, short playerControllerId); // 0x00A2A7D4-0x00A2A7DC
		public virtual void OnLobbyServerPlayerRemoved(NetworkConnection conn, short playerControllerId); // 0x00A2A7DC-0x00A2A7E0
		public virtual bool OnLobbyServerSceneLoadedForPlayer(GameObject lobbyPlayer, GameObject gamePlayer); // 0x00A2A7E0-0x00A2A7E8
		public virtual void OnLobbyServerPlayersReady(); // 0x00A2A7E8-0x00A2A7F8
		public virtual void OnLobbyClientEnter(); // 0x00A2A7F8-0x00A2A7FC
		public virtual void OnLobbyClientExit(); // 0x00A2A7FC-0x00A2A800
		public virtual void OnLobbyClientConnect(NetworkConnection conn); // 0x00A2A800-0x00A2A804
		public virtual void OnLobbyClientDisconnect(NetworkConnection conn); // 0x00A2A804-0x00A2A808
		public virtual void OnLobbyStartClient(NetworkClient lobbyClient); // 0x00A2A808-0x00A2A80C
		public virtual void OnLobbyStopClient(); // 0x00A2A80C-0x00A2A810
		public virtual void OnLobbyClientSceneChanged(NetworkConnection conn); // 0x00A2A810-0x00A2A814
		public virtual void OnLobbyClientAddPlayerFailed(); // 0x00A2A814-0x00A2A818
		private void OnGUI(); // 0x00A2A818-0x00A2A9E4
		public void TryToAddPlayer(); // 0x00A2A9E4-0x00A2AF9C
	}

	[AddComponentMenu] // 0x0050FD18-0x0050FD88
	[DisallowMultipleComponent] // 0x0050FD18-0x0050FD88
	[Obsolete] // 0x0050FD18-0x0050FD88
	public class NetworkLobbyPlayer : NetworkBehaviour // TypeDefIndex: 3078
	{
		// Fields
		[SerializeField] // 0x00510A90-0x00510ADC
		[Tooltip] // 0x00510A90-0x00510ADC
		public bool ShowLobbyGUI; // 0x30
		private byte m_Slot; // 0x31
		private bool m_ReadyToBegin; // 0x32
	
		// Properties
		public byte slot { get; set; } // 0x00A2B238-0x00A2B240 0x00A2B240-0x00A2B248
		public bool readyToBegin { get; set; } // 0x00A2B248-0x00A2B250 0x00A2B250-0x00A2B25C
	
		// Constructors
		public NetworkLobbyPlayer(); // 0x00A2C180-0x00A2C1F0
	
		// Methods
		private void Start(); // 0x00A2B25C-0x00A2B2D8
		private void OnEnable(); // 0x00A2B2D8-0x00A2B354
		private void OnDisable(); // 0x00A2B354-0x00A2B3D0
		public override void OnStartClient(); // 0x00A2B3D0-0x00A2B500
		public void SendReadyToBeginMessage(); // 0x00A2B5A8-0x00A2B6F4
		public void SendNotReadyToBeginMessage(); // 0x00A2B6F4-0x00A2B83C
		public void SendSceneLoadedMessage(); // 0x00A2B83C-0x00A2B984
		private void OnSceneLoaded(Scene scene, LoadSceneMode mode); // 0x00A2B984-0x00A2BA4C
		private NetworkLobbyManager GetLobbyManager(); // 0x00A2B500-0x00A2B5A8
		public void RemovePlayer(); // 0x00A2BA4C-0x00A2BB5C
		public virtual void OnClientEnterLobby(); // 0x00A2BB5C-0x00A2BB60
		public virtual void OnClientExitLobby(); // 0x00A2BB60-0x00A2BB64
		public virtual void OnClientReady(bool readyState); // 0x00A2BB64-0x00A2BB68
		public override bool OnSerialize(NetworkWriter writer, bool initialState); // 0x00A2BB68-0x00A2BBC8
		public override void OnDeserialize(NetworkReader reader, bool initialState); // 0x00A2BBC8-0x00A2BC1C
		private void OnGUI(); // 0x00A2BD6C-0x00A2C180
	}

	public enum PlayerSpawnMethod // TypeDefIndex: 3079
	{
		Random = 0,
		RoundRobin = 1
	}

	[AddComponentMenu] // 0x0050FD88-0x0050FDE8
	[Obsolete] // 0x0050FD88-0x0050FDE8
	public class NetworkManager : MonoBehaviour // TypeDefIndex: 3080
	{
		// Fields
		[SerializeField] // 0x00510ADC-0x00510AEC
		private int m_NetworkPort; // 0x18
		[SerializeField] // 0x00510AEC-0x00510AFC
		private bool m_ServerBindToIP; // 0x1C
		[SerializeField] // 0x00510AFC-0x00510B0C
		private string m_ServerBindAddress; // 0x20
		[SerializeField] // 0x00510B0C-0x00510B1C
		private string m_NetworkAddress; // 0x28
		[SerializeField] // 0x00510B1C-0x00510B2C
		private bool m_DontDestroyOnLoad; // 0x30
		[SerializeField] // 0x00510B2C-0x00510B3C
		private bool m_RunInBackground; // 0x31
		[SerializeField] // 0x00510B3C-0x00510B4C
		private bool m_ScriptCRCCheck; // 0x32
		[SerializeField] // 0x00510B4C-0x00510B5C
		private float m_MaxDelay; // 0x34
		[SerializeField] // 0x00510B5C-0x00510B6C
		private LogFilter.FilterLevel m_LogLevel; // 0x38
		[SerializeField] // 0x00510B6C-0x00510B7C
		private GameObject m_PlayerPrefab; // 0x40
		[SerializeField] // 0x00510B7C-0x00510B8C
		private bool m_AutoCreatePlayer; // 0x48
		[SerializeField] // 0x00510B8C-0x00510B9C
		private PlayerSpawnMethod m_PlayerSpawnMethod; // 0x4C
		[SerializeField] // 0x00510B9C-0x00510BAC
		private string m_OfflineScene; // 0x50
		[SerializeField] // 0x00510BAC-0x00510BBC
		private string m_OnlineScene; // 0x58
		[SerializeField] // 0x00510BBC-0x00510BCC
		private List<GameObject> m_SpawnPrefabs; // 0x60
		[SerializeField] // 0x00510BCC-0x00510BDC
		private bool m_CustomConfig; // 0x68
		[SerializeField] // 0x00510BDC-0x00510BEC
		private int m_MaxConnections; // 0x6C
		[SerializeField] // 0x00510BEC-0x00510BFC
		private ConnectionConfig m_ConnectionConfig; // 0x70
		[SerializeField] // 0x00510BFC-0x00510C0C
		private GlobalConfig m_GlobalConfig; // 0x78
		[SerializeField] // 0x00510C0C-0x00510C1C
		private List<QosType> m_Channels; // 0x80
		[SerializeField] // 0x00510C1C-0x00510C2C
		private bool m_UseWebSockets; // 0x88
		[SerializeField] // 0x00510C2C-0x00510C3C
		private bool m_UseSimulator; // 0x89
		[SerializeField] // 0x00510C3C-0x00510C4C
		private int m_SimulatedLatency; // 0x8C
		[SerializeField] // 0x00510C4C-0x00510C5C
		private float m_PacketLossPercentage; // 0x90
		[SerializeField] // 0x00510C5C-0x00510C6C
		private int m_MaxBufferedPackets; // 0x94
		[SerializeField] // 0x00510C6C-0x00510C7C
		private bool m_AllowFragmentation; // 0x98
		[SerializeField] // 0x00510C7C-0x00510C8C
		private string m_MatchHost; // 0xA0
		[SerializeField] // 0x00510C8C-0x00510C9C
		private int m_MatchPort; // 0xA8
		[SerializeField] // 0x00510C9C-0x00510CAC
		public string matchName; // 0xB0
		[SerializeField] // 0x00510CAC-0x00510CBC
		public uint matchSize; // 0xB8
		private NetworkMigrationManager m_MigrationManager; // 0xC0
		private EndPoint m_EndPoint; // 0xC8
		private bool m_ClientLoadedScene; // 0xD0
		private static INetworkTransport s_ActiveTransport; // 0x00
		public static string networkSceneName; // 0x08
		public bool isNetworkActive; // 0xD1
		public NetworkClient client; // 0xD8
		private static List<Transform> s_StartPositions; // 0x10
		private static int s_StartPositionIndex; // 0x18
		public MatchInfo matchInfo; // 0xE0
		public NetworkMatch matchMaker; // 0xE8
		public List<MatchInfoSnapshot> matches; // 0xF0
		public static NetworkManager singleton; // 0x20
		private static AddPlayerMessage s_AddPlayerMessage; // 0x28
		private static RemovePlayerMessage s_RemovePlayerMessage; // 0x30
		private static UnityEngine.Networking.NetworkSystem.ErrorMessage s_ErrorMessage; // 0x38
		private static AsyncOperation s_LoadingSceneAsync; // 0x40
		private static NetworkConnection s_ClientReadyConnection; // 0x48
		private static string s_Address; // 0x50
	
		// Properties
		public int networkPort { get; set; } // 0x00A2C1F0-0x00A2C1F8 0x00A2C1F8-0x00A2C200
		public bool serverBindToIP { get; set; } // 0x00A2C200-0x00A2C208 0x00A2C208-0x00A2C214
		public string serverBindAddress { get; set; } // 0x00A2C214-0x00A2C21C 0x00A2C21C-0x00A2C224
		public string networkAddress { get; set; } // 0x00A2C224-0x00A2C22C 0x00A2C22C-0x00A2C234
		public bool dontDestroyOnLoad { get; set; } // 0x00A2C234-0x00A2C23C 0x00A2C23C-0x00A2C248
		public bool runInBackground { get; set; } // 0x00A2C248-0x00A2C250 0x00A2C250-0x00A2C25C
		public bool scriptCRCCheck { get; set; } // 0x00A2C25C-0x00A2C264 0x00A2C264-0x00A2C270
		[Obsolete] // 0x005113F8-0x00511430
		public bool sendPeerInfo { get; set; } // 0x00A2C270-0x00A2C278 0x00A2C278-0x00A2C27C
		public float maxDelay { get; set; } // 0x00A2C27C-0x00A2C284 0x00A2C284-0x00A2C28C
		public LogFilter.FilterLevel logLevel { get; set; } // 0x00A2C28C-0x00A2C294 0x00A2C294-0x00A2C34C
		public GameObject playerPrefab { get; set; } // 0x00A2C34C-0x00A2C354 0x00A2C354-0x00A2C35C
		public bool autoCreatePlayer { get; set; } // 0x00A2C35C-0x00A2C364 0x00A2C364-0x00A2C370
		public PlayerSpawnMethod playerSpawnMethod { get; set; } // 0x00A2C370-0x00A2C378 0x00A2C378-0x00A2C380
		public string offlineScene { get; set; } // 0x00A2C380-0x00A2C388 0x00A2C388-0x00A2C390
		public string onlineScene { get; set; } // 0x00A2C390-0x00A2C398 0x00A2C398-0x00A2C3A0
		public List<GameObject> spawnPrefabs { get; } // 0x00A2C3A0-0x00A2C3A8 
		public List<Transform> startPositions { get; } // 0x00A2C3A8-0x00A2C410 
		public bool customConfig { get; set; } // 0x00A2C410-0x00A2C418 0x00A2C418-0x00A2C424
		public ConnectionConfig connectionConfig { get; } // 0x00A2C424-0x00A2C490 
		public GlobalConfig globalConfig { get; } // 0x00A2C490-0x00A2C4FC 
		public int maxConnections { get; set; } // 0x00A2C4FC-0x00A2C504 0x00A2C504-0x00A2C50C
		public List<QosType> channels { get; } // 0x00A2C50C-0x00A2C514 
		public EndPoint secureTunnelEndpoint { get; set; } // 0x00A2C514-0x00A2C51C 0x00A2C51C-0x00A2C524
		public bool useWebSockets { get; set; } // 0x00A2C524-0x00A2C52C 0x00A2C52C-0x00A2C538
		public bool useSimulator { get; set; } // 0x00A2C538-0x00A2C540 0x00A2C540-0x00A2C54C
		public int simulatedLatency { get; set; } // 0x00A2C54C-0x00A2C554 0x00A2C554-0x00A2C55C
		public float packetLossPercentage { get; set; } // 0x00A2C55C-0x00A2C564 0x00A2C564-0x00A2C56C
		public string matchHost { get; set; } // 0x00A2C56C-0x00A2C574 0x00A2C574-0x00A2C57C
		public int matchPort { get; set; } // 0x00A2C57C-0x00A2C584 0x00A2C584-0x00A2C58C
		public bool clientLoadedScene { get; set; } // 0x00A2C58C-0x00A2C594 0x00A2C594-0x00A2C5A0
		public NetworkMigrationManager migrationManager { get; } // 0x00A2C5A0-0x00A2C5A8 
		public int numPlayers { get; } // 0x00A283E8-0x00A28538 
		public static INetworkTransport defaultTransport { get; } // 0x00A2C5A8-0x00A2C604 
		public static INetworkTransport activeTransport { get; set; } // 0x00A2C604-0x00A2C66C 0x00A2C66C-0x00A2C814
	
		// Constructors
		public NetworkManager(); // 0x00A2B04C-0x00A2B17C
		static NetworkManager(); // 0x00A328E0-0x00A32A0C
	
		// Methods
		private void Awake(); // 0x00A2C814-0x00A2C818
		private void InitializeSingleton(); // 0x00A2C818-0x00A2CC84
		private void OnValidate(); // 0x00A2CC84-0x00A2CFF4
		internal void RegisterServerMessages(); // 0x00A2CFF4-0x00A2D198
		public void SetupMigrationManager(NetworkMigrationManager man); // 0x00A2D198-0x00A2D1A0
		public bool StartServer(ConnectionConfig config, int maxConnections); // 0x00A2D1A0-0x00A2D1B8
		public bool StartServer(); // 0x00A2D738-0x00A2D748
		public bool StartServer(MatchInfo info); // 0x00A2D748-0x00A2D754
		private bool StartServer(MatchInfo info, ConnectionConfig config, int maxConnections); // 0x00A2D1B8-0x00A2D738
		internal void RegisterClientMessages(NetworkClient client); // 0x00A2D754-0x00A2D9D4
		public void UseExternalClient(NetworkClient externalClient); // 0x00A2D9D4-0x00A2DB18
		public NetworkClient StartClient(MatchInfo info, ConnectionConfig config, int hostPort); // 0x00A2DD68-0x00A2E428
		public NetworkClient StartClient(MatchInfo matchInfo); // 0x00A2E5BC-0x00A2E5C8
		public NetworkClient StartClient(); // 0x00A2E5D0-0x00A2E5E0
		public NetworkClient StartClient(MatchInfo info, ConnectionConfig config); // 0x00A2E5C8-0x00A2E5D0
		public virtual NetworkClient StartHost(ConnectionConfig config, int maxConnections); // 0x00A2E5E0-0x00A2E680
		public virtual NetworkClient StartHost(MatchInfo info); // 0x00A2E7FC-0x00A2E878
		public virtual NetworkClient StartHost(); // 0x00A2E878-0x00A2E8E8
		private NetworkClient ConnectLocalClient(); // 0x00A2E680-0x00A2E7FC
		public void StopHost(); // 0x00A2E8E8-0x00A2EA14
		public void StopServer(); // 0x00A2EA14-0x00A2EB9C
		public void StopClient(); // 0x00A2EB9C-0x00A2ECD0
		public virtual void ServerChangeScene(string newSceneName); // 0x00A290AC-0x00A292BC
		private void CleanupNetworkIdentities(); // 0x00A2F024-0x00A2F0C8
		internal void ClientChangeScene(string newSceneName, bool forceReload); // 0x00A2DB18-0x00A2DD68
		private void FinishLoadScene(); // 0x00A2F0C8-0x00A2F314
		internal static void UpdateScene(); // 0x00A26B70-0x00A26D60
		private void OnDestroy(); // 0x00A2F328-0x00A2F3CC
		public static void RegisterStartPosition(Transform start); // 0x00A2F3CC-0x00A2F60C
		public static void UnRegisterStartPosition(Transform start); // 0x00A2F60C-0x00A2F84C
		public bool IsClientConnected(); // 0x00A2F314-0x00A2F328
		public static void Shutdown(); // 0x00A2F84C-0x00A2F958
		internal void OnServerConnectInternal(NetworkMessage netMsg); // 0x00A2F958-0x00A2FC14
		internal void OnServerDisconnectInternal(NetworkMessage netMsg); // 0x00A302FC-0x00A3040C
		internal void OnServerReadyMessageInternal(NetworkMessage netMsg); // 0x00A3040C-0x00A304D4
		internal void OnServerAddPlayerMessageInternal(NetworkMessage netMsg); // 0x00A304D4-0x00A306F4
		internal void OnServerRemovePlayerMessageInternal(NetworkMessage netMsg); // 0x00A30770-0x00A30918
		internal void OnServerErrorInternal(NetworkMessage netMsg); // 0x00A30918-0x00A30A38
		internal void OnClientConnectInternal(NetworkMessage netMsg); // 0x00A30A38-0x00A30BB0
		internal void OnClientDisconnectInternal(NetworkMessage netMsg); // 0x00A30BB0-0x00A30E08
		internal void OnClientNotReadyMessageInternal(NetworkMessage netMsg); // 0x00A31128-0x00A3121C
		internal void OnClientErrorInternal(NetworkMessage netMsg); // 0x00A3121C-0x00A3133C
		internal void OnClientSceneInternal(NetworkMessage netMsg); // 0x00A3133C-0x00A314A4
		public virtual void OnServerConnect(NetworkConnection conn); // 0x00A28538-0x00A2853C
		public virtual void OnServerDisconnect(NetworkConnection conn); // 0x00A286AC-0x00A287CC
		public virtual void OnServerReady(NetworkConnection conn); // 0x00A3164C-0x00A31730
		public virtual void OnServerAddPlayer(NetworkConnection conn, short playerControllerId, NetworkReader extraMessageReader); // 0x00A31730-0x00A31734
		public virtual void OnServerAddPlayer(NetworkConnection conn, short playerControllerId); // 0x00A31B90-0x00A31B94
		private void OnServerAddPlayerInternal(NetworkConnection conn, short playerControllerId); // 0x00A31734-0x00A31B90
		public Transform GetStartPosition(); // 0x00A27874-0x00A27BA8
		public virtual void OnServerRemovePlayer(NetworkConnection conn, PlayerController player); // 0x00A28DA8-0x00A28E64
		public virtual void OnServerError(NetworkConnection conn, int errorCode); // 0x00A31B94-0x00A31B98
		public virtual void OnServerSceneChanged(string sceneName); // 0x00A31B98-0x00A31B9C
		public virtual void OnClientConnect(NetworkConnection conn); // 0x00A29EA4-0x00A29F5C
		public virtual void OnClientDisconnect(NetworkConnection conn); // 0x00A29F94-0x00A2A094
		public virtual void OnClientError(NetworkConnection conn, int errorCode); // 0x00A31B9C-0x00A31BA0
		public virtual void OnClientNotReady(NetworkConnection conn); // 0x00A31BA0-0x00A31BA4
		public virtual void OnClientSceneChanged(NetworkConnection conn); // 0x00A2A168-0x00A2A3D0
		public void StartMatchMaker(); // 0x00A31BA4-0x00A31C58
		public void StopMatchMaker(); // 0x00A2EE60-0x00A2F024
		public void SetMatchHost(string newHost, int port, bool https); // 0x00A31C58-0x00A31FA8
		public virtual void OnStartHost(); // 0x00A31FA8-0x00A31FAC
		public virtual void OnStartServer(); // 0x00A31FAC-0x00A31FB0
		public virtual void OnStartClient(NetworkClient client); // 0x00A31FB0-0x00A31FB4
		public virtual void OnStopServer(); // 0x00A31FB4-0x00A31FB8
		public virtual void OnStopClient(); // 0x00A31FB8-0x00A31FBC
		public virtual void OnStopHost(); // 0x00A31FBC-0x00A31FC0
		public virtual void OnMatchCreate(bool success, string extendedInfo, MatchInfo matchInfo); // 0x00A31FC0-0x00A32170
		public virtual void OnMatchList(bool success, string extendedInfo, List<MatchInfoSnapshot> matchList); // 0x00A32170-0x00A32328
		public virtual void OnMatchJoined(bool success, string extendedInfo, MatchInfo matchInfo); // 0x00A32328-0x00A324D8
		public virtual void OnDestroyMatch(bool success, string extendedInfo); // 0x00A324D8-0x00A32630
		public virtual void OnDropConnection(bool success, string extendedInfo); // 0x00A32630-0x00A32788
		public virtual void OnSetMatchAttributes(bool success, string extendedInfo); // 0x00A32788-0x00A328E0
	}

	[AddComponentMenu] // 0x0050FDE8-0x0050FEA8
	[EditorBrowsable] // 0x0050FDE8-0x0050FEA8
	[Obsolete] // 0x0050FDE8-0x0050FEA8
	[RequireComponent] // 0x0050FDE8-0x0050FEA8
	public class NetworkManagerHUD : MonoBehaviour // TypeDefIndex: 3081
	{
		// Fields
		public NetworkManager manager; // 0x18
		[SerializeField] // 0x00510CBC-0x00510CCC
		public bool showGUI; // 0x20
		[SerializeField] // 0x00510CCC-0x00510CDC
		public int offsetX; // 0x24
		[SerializeField] // 0x00510CDC-0x00510CEC
		public int offsetY; // 0x28
		private bool m_ShowServer; // 0x2C
	
		// Constructors
		public NetworkManagerHUD(); // 0x00A34160-0x00A34170
	
		// Methods
		private void Awake(); // 0x00A32A0C-0x00A32A64
		private void Update(); // 0x00A32A64-0x00A32CE0
		private void OnGUI(); // 0x00A32CE0-0x00A34160
	}

	internal class NetworkMessageHandlers // TypeDefIndex: 3082
	{
		// Fields
		private Dictionary<short, NetworkMessageDelegate> m_MsgHandlers; // 0x10
	
		// Constructors
		public NetworkMessageHandlers(); // 0x00A34E5C-0x00A34ECC
	
		// Methods
		internal void RegisterHandlerSafe(short msgType, NetworkMessageDelegate handler); // 0x00A34660-0x00A34914
		public void RegisterHandler(short msgType, NetworkMessageDelegate handler); // 0x00A34914-0x00A34D00
		public void UnregisterHandler(short msgType); // 0x00A34D00-0x00A34D68
		internal NetworkMessageDelegate GetHandler(short msgType); // 0x00A34D68-0x00A34DFC
		internal Dictionary<short, NetworkMessageDelegate> GetHandlers(); // 0x00A34DFC-0x00A34E04
		internal void ClearMessageHandlers(); // 0x00A34E04-0x00A34E5C
	}

	[AddComponentMenu] // 0x0050FEA8-0x0050FF08
	[Obsolete] // 0x0050FEA8-0x0050FF08
	public class NetworkMigrationManager : MonoBehaviour // TypeDefIndex: 3083
	{
		// Fields
		[SerializeField] // 0x00510CEC-0x00510CFC
		private bool m_HostMigration; // 0x18
		[SerializeField] // 0x00510CFC-0x00510D0C
		private bool m_ShowGUI; // 0x19
		[SerializeField] // 0x00510D0C-0x00510D1C
		private int m_OffsetX; // 0x1C
		[SerializeField] // 0x00510D1C-0x00510D2C
		private int m_OffsetY; // 0x20
		private NetworkClient m_Client; // 0x28
		private bool m_WaitingToBecomeNewHost; // 0x30
		private bool m_WaitingReconnectToNewHost; // 0x31
		private bool m_DisconnectedFromHost; // 0x32
		private bool m_HostWasShutdown; // 0x33
		private MatchInfo m_MatchInfo; // 0x38
		private int m_OldServerConnectionId; // 0x40
		private string m_NewHostAddress; // 0x48
		private PeerInfoMessage m_NewHostInfo; // 0x50
		private PeerListMessage m_PeerListMessage; // 0x58
		private PeerInfoMessage[] m_Peers; // 0x60
		private Dictionary<int, ConnectionPendingPlayers> m_PendingPlayers; // 0x68
	
		// Properties
		public bool hostMigration { get; set; } // 0x00A35188-0x00A35190 0x00A35190-0x00A3519C
		public bool showGUI { get; set; } // 0x00A3519C-0x00A351A4 0x00A351A4-0x00A351B0
		public int offsetX { get; set; } // 0x00A351B0-0x00A351B8 0x00A351B8-0x00A351C0
		public int offsetY { get; set; } // 0x00A351C0-0x00A351C8 0x00A351C8-0x00A351D0
		public NetworkClient client { get; } // 0x00A351D0-0x00A351D8 
		public bool waitingToBecomeNewHost { get; set; } // 0x00A351D8-0x00A351E0 0x00A351E0-0x00A351EC
		public bool waitingReconnectToNewHost { get; set; } // 0x00A351EC-0x00A351F4 0x00A351F4-0x00A35200
		public bool disconnectedFromHost { get; } // 0x00A35200-0x00A35208 
		public bool hostWasShutdown { get; } // 0x00A35208-0x00A35210 
		public MatchInfo matchInfo { get; } // 0x00A35210-0x00A35218 
		public int oldServerConnectionId { get; } // 0x00A35218-0x00A35220 
		public string newHostAddress { get; set; } // 0x00A35220-0x00A35228 0x00A35228-0x00A35230
		public PeerInfoMessage[] peers { get; } // 0x00A35230-0x00A35238 
		public Dictionary<int, ConnectionPendingPlayers> pendingPlayers { get; } // 0x00A35238-0x00A35240 
	
		// Nested types
		public enum SceneChangeOption // TypeDefIndex: 3084
		{
			StayInOnlineScene = 0,
			SwitchToOfflineScene = 1
		}
	
		public struct PendingPlayerInfo // TypeDefIndex: 3085
		{
			// Fields
			public NetworkInstanceId netId; // 0x00
			public short playerControllerId; // 0x04
			public GameObject obj; // 0x08
		}
	
		public struct ConnectionPendingPlayers // TypeDefIndex: 3086
		{
			// Fields
			public List<PendingPlayerInfo> players; // 0x00
		}
	
		// Constructors
		public NetworkMigrationManager(); // 0x00A385DC-0x00A386A8
	
		// Methods
		private void AddPendingPlayer(GameObject obj, int connectionId, NetworkInstanceId netId, short playerControllerId); // 0x00A34ECC-0x00A34FD0
		private GameObject FindPendingPlayer(int connectionId, NetworkInstanceId netId, short playerControllerId); // 0x00A34FD0-0x00A35120
		private void RemovePendingPlayer(int connectionId); // 0x00A35120-0x00A35188
		private void Start(); // 0x00A35240-0x00A35248
		public void Reset(int reconnectId); // 0x00A35248-0x00A3536C
		internal void AssignAuthorityCallback(NetworkConnection conn, NetworkIdentity uv, bool authorityState); // 0x00A3536C-0x00A35544
		public void Initialize(NetworkClient newClient, MatchInfo newMatchInfo); // 0x00A2E428-0x00A2E5BC
		public void DisablePlayerObjects(); // 0x00A35544-0x00A35AAC
		public void SendPeerInfo(); // 0x00A2FC14-0x00A302FC
		private void OnPeerClientAuthority(NetworkMessage netMsg); // 0x00A35AAC-0x00A35E10
		private void OnPeerInfo(NetworkMessage netMsg); // 0x00A35E10-0x00A3613C
		private void OnServerReconnectPlayerMessage(NetworkMessage netMsg); // 0x00A3613C-0x00A367A8
		public bool ReconnectObjectForConnection(NetworkConnection newConnection, GameObject oldObject, int oldConnectionId); // 0x00A367A8-0x00A36C18
		public bool ReconnectPlayerForConnection(NetworkConnection newConnection, GameObject oldPlayer, int oldConnectionId, short playerControllerId); // 0x00A36C18-0x00A370B0
		public bool LostHostOnClient(NetworkConnection conn); // 0x00A30E08-0x00A31128
		public void LostHostOnHost(); // 0x00A2ECD0-0x00A2EE60
		public bool BecomeNewHost(int port); // 0x00A370B0-0x00A3739C
		protected virtual void OnClientDisconnectedFromHost(NetworkConnection conn, out SceneChangeOption sceneChange); // 0x00A3739C-0x00A373A4
		protected virtual void OnServerHostShutdown(); // 0x00A373A4-0x00A373A8
		protected virtual void OnServerReconnectPlayer(NetworkConnection newConnection, GameObject oldPlayer, int oldConnectionId, short playerControllerId); // 0x00A373A8-0x00A373AC
		protected virtual void OnServerReconnectPlayer(NetworkConnection newConnection, GameObject oldPlayer, int oldConnectionId, short playerControllerId, NetworkReader extraMessageReader); // 0x00A373AC-0x00A373B0
		protected virtual void OnServerReconnectObject(NetworkConnection newConnection, GameObject oldObject, int oldConnectionId); // 0x00A373B0-0x00A373B4
		protected virtual void OnPeersUpdated(PeerListMessage peers); // 0x00A373B4-0x00A374A8
		protected virtual void OnAuthorityUpdated(GameObject go, int connectionId, bool authorityState); // 0x00A374A8-0x00A376E4
		public virtual bool FindNewHost(out PeerInfoMessage newHostInfo, out bool youAreNewHost); // 0x00A376E4-0x00A37998
		private void OnGUIHost(); // 0x00A37998-0x00A37F00
		private void OnGUIClient(); // 0x00A37F00-0x00A385AC
		private void OnGUI(); // 0x00A385AC-0x00A385DC
	}

	[AddComponentMenu] // 0x0050FF08-0x0050FFB4
	[Obsolete] // 0x0050FF08-0x0050FFB4
	[RequireComponent] // 0x0050FF08-0x0050FFB4
	public class NetworkProximityChecker : NetworkBehaviour // TypeDefIndex: 3087
	{
		// Fields
		[Tooltip] // 0x00510D2C-0x00510D64
		public int visRange; // 0x30
		[Tooltip] // 0x00510D64-0x00510D9C
		public float visUpdateInterval; // 0x34
		[Tooltip] // 0x00510D9C-0x00510DD4
		public CheckMethod checkMethod; // 0x38
		[Tooltip] // 0x00510DD4-0x00510E0C
		public bool forceHidden; // 0x3C
		private float m_VisUpdateTime; // 0x40
	
		// Nested types
		public enum CheckMethod // TypeDefIndex: 3088
		{
			Physics3D = 0,
			Physics2D = 1
		}
	
		// Constructors
		public NetworkProximityChecker(); // 0x00A38E04-0x00A38E78
	
		// Methods
		private void Update(); // 0x00A386A8-0x00A387A8
		public override bool OnCheckObserver(NetworkConnection newObserver); // 0x00A387A8-0x00A389A8
		public override bool OnRebuildObservers(HashSet<NetworkConnection> observers, bool initial); // 0x00A389A8-0x00A38CAC
		public override void OnSetLocalVisibility(bool vis); // 0x00A38CAC-0x00A38CD4
		private static void SetVis(GameObject go, bool vis); // 0x00A38CD4-0x00A38E04
	}

	[Obsolete] // 0x0050FFB4-0x0050FFEC
	public class NetworkReader // TypeDefIndex: 3089
	{
		// Fields
		private NetBuffer m_buf; // 0x10
		private const int k_MaxStringLength = 32768; // Metadata: 0x001F50D7
		private const int k_InitialStringBufferSize = 1024; // Metadata: 0x001F50DB
		private static byte[] s_StringReaderBuffer; // 0x00
		private static Encoding s_Encoding; // 0x08
	
		// Properties
		public uint Position { get; } // 0x00A3901C-0x00A3903C 
		public int Length { get; } // 0x00A3903C-0x00A39058 
	
		// Constructors
		public NetworkReader(); // 0x00A38E78-0x00A38EE4
		public NetworkReader(NetworkWriter writer); // 0x00A38F80-0x00A3901C
		public NetworkReader(byte[] buffer); // 0x00A306F4-0x00A30770
	
		// Methods
		private static void Initialize(); // 0x00A38EE4-0x00A38F80
		public void SeekZero(); // 0x00A39058-0x00A39074
		internal void Replace(byte[] buffer); // 0x00A39074-0x00A39090
		public uint ReadPackedUInt32(); // 0x00A2BC1C-0x00A2BD20
		public ulong ReadPackedUInt64(); // 0x00A39090-0x00A392D0
		public NetworkInstanceId ReadNetworkId(); // 0x00A392D0-0x00A392E8
		public NetworkSceneId ReadSceneId(); // 0x00A392E8-0x00A39300
		public byte ReadByte(); // 0x00A2BD20-0x00A2BD3C
		public sbyte ReadSByte(); // 0x00A39300-0x00A3931C
		public short ReadInt16(); // 0x00A3931C-0x00A3937C
		public ushort ReadUInt16(); // 0x00A3937C-0x00A393DC
		public int ReadInt32(); // 0x00A393DC-0x00A3947C
		public uint ReadUInt32(); // 0x00A3947C-0x00A3951C
		public long ReadInt64(); // 0x00A3951C-0x00A3965C
		public ulong ReadUInt64(); // 0x00A3965C-0x00A3979C
		public decimal ReadDecimal(); // 0x00A3979C-0x00A3988C
		public float ReadSingle(); // 0x00A3988C-0x00A398A4
		public double ReadDouble(); // 0x00A398A4-0x00A398BC
		public string ReadString(); // 0x00A314A4-0x00A3164C
		public char ReadChar(); // 0x00A398BC-0x00A398E4
		public bool ReadBoolean(); // 0x00A2BD3C-0x00A2BD6C
		public byte[] ReadBytes(int count); // 0x00A398E4-0x00A399E8
		public byte[] ReadBytesAndSize(); // 0x00A399E8-0x00A39A54
		public Vector2 ReadVector2(); // 0x00A39A54-0x00A39ABC
		public Vector3 ReadVector3(); // 0x00A39ABC-0x00A39B44
		public Vector4 ReadVector4(); // 0x00A39B44-0x00A39BE8
		public Color ReadColor(); // 0x00A39BE8-0x00A39C8C
		public Color32 ReadColor32(); // 0x00A39C8C-0x00A39D04
		public Quaternion ReadQuaternion(); // 0x00A39D04-0x00A39DA8
		public Rect ReadRect(); // 0x00A39DA8-0x00A39E4C
		public Plane ReadPlane(); // 0x00A39E4C-0x00A39EC8
		public Ray ReadRay(); // 0x00A39EC8-0x00A39F38
		public Matrix4x4 ReadMatrix4x4(); // 0x00A39F38-0x00A3A100
		public NetworkHash128 ReadNetworkHash128(); // 0x00A3A100-0x00A3A254
		public Transform ReadTransform(); // 0x00A3A254-0x00A3A3D4
		public GameObject ReadGameObject(); // 0x00A3A3D4-0x00A3A5D0
		public NetworkIdentity ReadNetworkIdentity(); // 0x00A3A5D0-0x00A3A7F0
		public override string ToString(); // 0x00A3A7F0-0x00A3A810
		public TMsg ReadMessage<TMsg>()
			where TMsg : MessageBase, new();
	}

	internal class NetworkScene // TypeDefIndex: 3090
	{
		// Fields
		private Dictionary<NetworkInstanceId, NetworkIdentity> m_LocalObjects; // 0x10
		private static Dictionary<NetworkHash128, GameObject> s_GuidToPrefab; // 0x00
		private static Dictionary<NetworkHash128, SpawnDelegate> s_SpawnHandlers; // 0x08
		private static Dictionary<NetworkHash128, UnSpawnDelegate> s_UnspawnHandlers; // 0x10
	
		// Properties
		internal Dictionary<NetworkInstanceId, NetworkIdentity> localObjects { get; } // 0x00A3A810-0x00A3A818 
		internal static Dictionary<NetworkHash128, GameObject> guidToPrefab { get; } // 0x00A3A818-0x00A3A880 
		internal static Dictionary<NetworkHash128, SpawnDelegate> spawnHandlers { get; } // 0x00A3A880-0x00A3A8E8 
		internal static Dictionary<NetworkHash128, UnSpawnDelegate> unspawnHandlers { get; } // 0x00A3A8E8-0x00A3A950 
	
		// Constructors
		public NetworkScene(); // 0x00A3CFC0-0x00A3D030
		static NetworkScene(); // 0x00A3D030-0x00A3E104
	
		// Methods
		internal void Shutdown(); // 0x00A3A950-0x00A3A9B8
		internal void SetLocalObject(NetworkInstanceId netId, GameObject obj, bool isClient, bool isServer); // 0x00A3AACC-0x00A3ADF4
		internal GameObject FindLocalObject(NetworkInstanceId netId); // 0x00A3ADF4-0x00A3AEE8
		internal bool GetNetworkIdentity(NetworkInstanceId netId, out NetworkIdentity uv); // 0x00A3AEE8-0x00A3AFEC
		internal bool RemoveLocalObject(NetworkInstanceId netId); // 0x00A3AFEC-0x00A3B054
		internal bool RemoveLocalObjectAndDestroy(NetworkInstanceId netId); // 0x00A3B054-0x00A3B150
		internal void ClearLocalObjects(); // 0x00A3A9B8-0x00A3AA10
		internal static void RegisterPrefab(GameObject prefab, NetworkHash128 newAssetId); // 0x00A3B150-0x00A3B490
		internal static void RegisterPrefab(GameObject prefab); // 0x00A3B490-0x00A3B870
		internal static bool GetPrefab(NetworkHash128 assetId, out GameObject prefab); // 0x00A3B870-0x00A3BA68
		internal static void ClearSpawners(); // 0x00A3AA10-0x00A3AACC
		public static void UnregisterSpawnHandler(NetworkHash128 assetId); // 0x00A3BA68-0x00A3BB24
		internal static void RegisterSpawnHandler(NetworkHash128 assetId, SpawnDelegate spawnHandler, UnSpawnDelegate unspawnHandler); // 0x00A3BB24-0x00A3BE80
		internal static void UnregisterPrefab(GameObject prefab); // 0x00A3BE80-0x00A3C034
		internal static void RegisterPrefab(GameObject prefab, SpawnDelegate spawnHandler, UnSpawnDelegate unspawnHandler); // 0x00A3C034-0x00A3C5E4
		internal static bool GetSpawnHandler(NetworkHash128 assetId, out SpawnDelegate handler); // 0x00A3C5E4-0x00A3C6DC
		internal static bool InvokeUnSpawnHandler(NetworkHash128 assetId, GameObject obj); // 0x00A3C6DC-0x00A3C81C
		internal void DestroyAllClientObjects(); // 0x00A3C81C-0x00A3CAEC
		internal void DumpAllClientObjects(); // 0x00A3CAEC-0x00A3CFC0
	}

	[Serializable]
	[Obsolete] // 0x0050FFEC-0x00510024
	public struct NetworkSceneId : IEquatable<NetworkSceneId> // TypeDefIndex: 3091
	{
		// Fields
		[SerializeField] // 0x00510E0C-0x00510E1C
		private uint m_Value; // 0x00
	
		// Properties
		public uint Value { get; } // 0x0058937C-0x005894E4 
	
		// Constructors
		public NetworkSceneId(uint value); // 0x00589338-0x00589340
	
		// Methods
		public bool IsEmpty(); // 0x00589340-0x00589350
		public override int GetHashCode(); // 0x00589350-0x00589358
		public override bool Equals(object obj); // 0x00589358-0x00589360
		public bool Equals(NetworkSceneId other); // 0x00589360-0x00589370
		public static bool operator ==(NetworkSceneId c1, NetworkSceneId c2); // 0x00A9B87C-0x00A9B888
		public static bool operator !=(NetworkSceneId c1, NetworkSceneId c2); // 0x00A9B888-0x00A9B8A4
		public override string ToString(); // 0x00589370-0x0058937C
	}

	[Obsolete] // 0x00510024-0x0051005C
	public sealed class NetworkServer // TypeDefIndex: 3092
	{
		// Fields
		private static bool s_Active; // 0x00
		private static NetworkServer s_Instance; // 0x08
		private static object s_Sync; // 0x10
		private static bool m_DontListen; // 0x18
		private bool m_LocalClientActive; // 0x10
		private List<NetworkConnection> m_LocalConnectionsFakeList; // 0x18
		private ULocalConnectionToClient m_LocalConnection; // 0x20
		private NetworkScene m_NetworkScene; // 0x28
		private HashSet<int> m_ExternalConnections; // 0x30
		private ServerSimpleWrapper m_SimpleServerSimple; // 0x38
		private float m_MaxDelay; // 0x40
		private HashSet<NetworkInstanceId> m_RemoveList; // 0x48
		private int m_RemoveListCount; // 0x50
		private const int k_RemoveListInterval = 100; // Metadata: 0x001F50DF
		internal static ushort maxPacketSize; // 0x1A
		private static RemovePlayerMessage s_RemovePlayerMessage; // 0x20
	
		// Properties
		public static List<NetworkConnection> localConnections { get; } // 0x00A9B8A4-0x00A9B910 
		public static int listenPort { get; } // 0x00A9BAD0-0x00A9BB4C 
		public static int serverHostId { get; } // 0x00A9BB4C-0x00A9BBC8 
		public static ReadOnlyCollection<NetworkConnection> connections { get; } // 0x00A9BBC8-0x00A9BC44 
		public static Dictionary<short, NetworkMessageDelegate> handlers { get; } // 0x00A9BC44-0x00A9BCC8 
		public static HostTopology hostTopology { get; } // 0x00A9BCE8-0x00A9BD64 
		public static Dictionary<NetworkInstanceId, NetworkIdentity> objects { get; } // 0x00A9BD64-0x00A9BDE0 
		[Obsolete] // 0x00511430-0x00511468
		public static bool sendPeerInfo { get; set; } // 0x00A9BDE0-0x00A9BDE8 0x00A9BDE8-0x00A9BDEC
		public static bool dontListen { get; set; } // 0x00A9BDEC-0x00A9BE54 0x00A9BE54-0x00A9BEC4
		public static bool useWebSockets { get; set; } // 0x00A9BEC4-0x00A9BF40 0x00A9BF40-0x00A9BFC4
		internal static NetworkServer instance { get; } // 0x00A9B910-0x00A9BAD0 
		public static bool active { get; } // 0x00A9C250-0x00A9C2B8 
		public static bool localClientActive { get; } // 0x00A9C2B8-0x00A9C324 
		public static int numChannels { get; } // 0x00A9C324-0x00A9C3B4 
		public static float maxDelay { get; set; } // 0x00A9C3B4-0x00A9C420 0x00A9C420-0x00A9C498
		public static Type networkConnectionClass { get; } // 0x00A9C58C-0x00A9C608 
	
		// Nested types
		private class ServerSimpleWrapper : NetworkServerSimple // TypeDefIndex: 3093
		{
			// Fields
			private NetworkServer m_Server; // 0x60
	
			// Constructors
			public ServerSimpleWrapper(NetworkServer server); // 0x00A9C608-0x00A9C630
	
			// Methods
			public override void OnConnectError(int connectionId, byte error); // 0x00AA7F94-0x00AA7FB0
			public override void OnDataError(NetworkConnection conn, byte error); // 0x00AA7FB0-0x00AA7FD0
			public override void OnDisconnectError(NetworkConnection conn, byte error); // 0x00AA7FD0-0x00AA7FF0
			public override void OnConnected(NetworkConnection conn); // 0x00AA7FF0-0x00AA8008
			public override void OnDisconnected(NetworkConnection conn); // 0x00AA8008-0x00AA8024
			public override void OnData(NetworkConnection conn, int receivedSize, int channelId); // 0x00AA8024-0x00AA803C
		}
	
		// Constructors
		private NetworkServer(); // 0x00A9BFC4-0x00A9C250
		static NetworkServer(); // 0x00AA7DE8-0x00AA7E7C
	
		// Methods
		public static void SetNetworkConnectionClass<T>()
			where T : NetworkConnection;
		public static bool Configure(ConnectionConfig config, int maxConnections); // 0x00A9C630-0x00A9C6C0
		public static bool Configure(HostTopology topology); // 0x00A9C73C-0x00A9C7C0
		public static void Reset(); // 0x00A9C7D0-0x00A9C9D4
		public static void Shutdown(); // 0x00A9C9D4-0x00A9CB14
		public static bool Listen(MatchInfo matchInfo, int listenPort); // 0x00A9CD00-0x00A9CE64
		internal void RegisterMessageHandlers(); // 0x00A9D034-0x00A9D2F0
		public static void ListenRelay(string relayIp, int relayPort, NetworkID netGuid, SourceID sourceId, NodeID nodeId); // 0x00A9D30C-0x00A9D3AC
		private void InternalListenRelay(string relayIp, int relayPort, NetworkID netGuid, SourceID sourceId, NodeID nodeId); // 0x00A9CF70-0x00A9D034
		public static bool Listen(int serverPort); // 0x00A9D774-0x00A9D7E8
		public static bool Listen(string ipAddress, int serverPort); // 0x00A9D7E8-0x00A9D868
		internal bool InternalListen(string ipAddress, int serverPort); // 0x00A9CE64-0x00A9CF70
		public static NetworkClient BecomeHost(NetworkClient oldClient, int port, MatchInfo matchInfo, int oldConnectionId, PeerInfoMessage[] peers); // 0x00A9DC0C-0x00A9DCAC
		internal NetworkClient BecomeHostInternal(NetworkClient oldClient, int port, MatchInfo matchInfo, int oldConnectionId, PeerInfoMessage[] peers); // 0x00A9DCAC-0x00A9E52C
		private void InternalSetMaxDelay(float seconds); // 0x00A9C498-0x00A9C58C
		internal int AddLocalClient(LocalClient localClient); // 0x00A9E52C-0x00A9E63C
		internal void RemoveLocalClient(NetworkConnection localClientConnection); // 0x00A9E730-0x00A9E82C
		internal void SetLocalObjectOnServer(NetworkInstanceId netId, GameObject obj); // 0x00A9E8B8-0x00A9EAA4
		internal void ActivateLocalClientScene(); // 0x00A9EAA4-0x00A9EEA4
		public static bool SendToAll(short msgType, MessageBase msg); // 0x00A9EEA4-0x00A9F03C
		private static bool SendToObservers(GameObject contextObj, short msgType, MessageBase msg); // 0x00A9F03C-0x00A9F234
		public static bool SendToReady(GameObject contextObj, short msgType, MessageBase msg); // 0x00A9F234-0x00A9F504
		public static void SendWriterToReady(GameObject contextObj, NetworkWriter writer, int channelId); // 0x00A9F504-0x00A9F5FC
		public static void SendBytesToReady(GameObject contextObj, byte[] buffer, int numBytes, int channelId); // 0x00A9F618-0x00A9FA34
		public static void SendBytesToPlayer(GameObject player, byte[] buffer, int numBytes, int channelId); // 0x00A9FA34-0x00A9FC0C
		public static bool SendUnreliableToAll(short msgType, MessageBase msg); // 0x00A9FC1C-0x00A9FDB4
		public static bool SendUnreliableToReady(GameObject contextObj, short msgType, MessageBase msg); // 0x00A9FDB4-0x00AA0040
		public static bool SendByChannelToAll(short msgType, MessageBase msg, int channelId); // 0x00AA0040-0x00AA01E8
		public static bool SendByChannelToReady(GameObject contextObj, short msgType, MessageBase msg, int channelId); // 0x00AA01E8-0x00AA0488
		public static void DisconnectAll(); // 0x00AA0488-0x00AA04F0
		internal void InternalDisconnectAll(); // 0x00A9CB14-0x00A9CB68
		internal static void Update(); // 0x00AA059C-0x00AA0650
		private void UpdateServerObjects(); // 0x00AA06E0-0x00AA0908
		private void CheckForNullObjects(); // 0x00AA0908-0x00AA0C48
		internal void InternalUpdate(); // 0x00AA0650-0x00AA06E0
		private void OnConnected(NetworkConnection conn); // 0x00AA13D8-0x00AA1518
		private void OnDisconnected(NetworkConnection conn); // 0x00AA1758-0x00AA1948
		private void OnData(NetworkConnection conn, int receivedSize, int channelId); // 0x00AA1948-0x00AA1984
		private void GenerateConnectError(int error); // 0x00AA1984-0x00AA1A6C
		private void GenerateDataError(NetworkConnection conn, int error); // 0x00AA1B9C-0x00AA1C88
		private void GenerateDisconnectError(NetworkConnection conn, int error); // 0x00AA1C88-0x00AA1EE4
		private void GenerateError(NetworkConnection conn, int error); // 0x00AA1A6C-0x00AA1B9C
		public static void RegisterHandler(short msgType, NetworkMessageDelegate handler); // 0x00AA1FB8-0x00AA2040
		public static void UnregisterHandler(short msgType); // 0x00AA205C-0x00AA20D4
		public static void ClearHandlers(); // 0x00AA20F0-0x00AA2160
		public static void ClearSpawners(); // 0x00AA217C-0x00AA21DC
		public static void GetStatsOut(out int numMsgs, out int numBufferedMsgs, out int numBytes, out int lastBufferedPerSecond); // 0x00AA21DC-0x00AA2340
		public static void GetStatsIn(out int numMsgs, out int numBytes); // 0x00AA2340-0x00AA2468
		public static void SendToClientOfPlayer(GameObject player, short msgType, MessageBase msg); // 0x00AA2468-0x00AA2710
		public static void SendToClient(int connectionId, short msgType, MessageBase msg); // 0x00AA2710-0x00AA28A8
		public static bool ReplacePlayerForConnection(NetworkConnection conn, GameObject player, short playerControllerId, NetworkHash128 assetId); // 0x00AA28A8-0x00AA2994
		public static bool ReplacePlayerForConnection(NetworkConnection conn, GameObject player, short playerControllerId); // 0x00AA2F64-0x00AA2FEC
		public static bool AddPlayerForConnection(NetworkConnection conn, GameObject player, short playerControllerId, NetworkHash128 assetId); // 0x00AA2FEC-0x00AA30D8
		public static bool AddPlayerForConnection(NetworkConnection conn, GameObject player, short playerControllerId); // 0x00AA3584-0x00AA360C
		internal bool InternalAddPlayerForConnection(NetworkConnection conn, GameObject playerGameObject, short playerControllerId); // 0x00AA30D8-0x00AA3584
		private static bool CheckPlayerControllerIdForConnection(NetworkConnection conn, short playerControllerId); // 0x00AA360C-0x00AA3958
		private bool SetupLocalPlayerForConnection(NetworkConnection conn, NetworkIdentity uv, PlayerController newPlayerController); // 0x00AA3A58-0x00AA3C8C
		private static void FinishPlayerForConnection(NetworkConnection conn, NetworkIdentity uv, GameObject playerGameObject); // 0x00AA3C8C-0x00AA3D80
		internal bool InternalReplacePlayerForConnection(NetworkConnection conn, GameObject playerGameObject, short playerControllerId); // 0x00AA2AA8-0x00AA2F64
		private static bool GetNetworkIdentity(GameObject go, out NetworkIdentity view); // 0x00AA2994-0x00AA2AA8
		public static void SetClientReady(NetworkConnection conn); // 0x00AA39E8-0x00AA3A58
		internal void SetClientReadyInternal(NetworkConnection conn); // 0x00AA4068-0x00AA4B80
		internal static void ShowForConnection(NetworkIdentity uv, NetworkConnection conn); // 0x00AA4B88-0x00AA4C28
		internal static void HideForConnection(NetworkIdentity uv, NetworkConnection conn); // 0x00AA4C28-0x00AA4CC0
		public static void SetAllClientsNotReady(); // 0x00AA4CC8-0x00AA4DC0
		public static void SetClientNotReady(NetworkConnection conn); // 0x00AA4DC0-0x00AA4E30
		internal void InternalSetClientNotReady(NetworkConnection conn); // 0x00AA4E30-0x00AA4F48
		private static void OnClientReadyMessage(NetworkMessage netMsg); // 0x00AA4F50-0x00AA5044
		private static void OnRemovePlayerMessage(NetworkMessage netMsg); // 0x00AA5044-0x00AA5224
		private static void OnCommandMessage(NetworkMessage netMsg); // 0x00AA5288-0x00AA577C
		internal void SpawnObject(GameObject obj); // 0x00AA57F8-0x00AA5C48
		internal void SendSpawnMessage(NetworkIdentity uv, NetworkConnection conn); // 0x00AA3D80-0x00AA3FD0
		public static void DestroyPlayersForConnection(NetworkConnection conn); // 0x00AA5D30-0x00AA6040
		private static void UnSpawnObject(GameObject obj); // 0x00AA649C-0x00AA65D4
		private static void UnSpawnObject(NetworkIdentity uv); // 0x00AA65D4-0x00AA663C
		private static void DestroyObject(GameObject obj); // 0x00AA6040-0x00AA617C
		private static void DestroyObject(NetworkIdentity uv, bool destroyServerObject); // 0x00AA617C-0x00AA649C
		public static void ClearLocalObjects(); // 0x00AA663C-0x00AA66B0
		public static void Spawn(GameObject obj); // 0x00AA3FD0-0x00AA4060
		private static bool CheckForPrefab(GameObject obj); // 0x00AA6710-0x00AA6718
		private static bool VerifyCanSpawn(GameObject obj); // 0x00AA66B0-0x00AA6710
		public static bool SpawnWithClientAuthority(GameObject obj, GameObject player); // 0x00AA6718-0x00AA6868
		public static bool SpawnWithClientAuthority(GameObject obj, NetworkConnection conn); // 0x00AA6868-0x00AA69AC
		public static bool SpawnWithClientAuthority(GameObject obj, NetworkHash128 assetId, NetworkConnection conn); // 0x00AA69AC-0x00AA6ACC
		public static void Spawn(GameObject obj, NetworkHash128 assetId); // 0x00AA6ACC-0x00AA6BBC
		public static void Destroy(GameObject obj); // 0x00AA5224-0x00AA5288
		public static void UnSpawn(GameObject obj); // 0x00AA6BBC-0x00AA6C20
		internal bool InvokeBytes(ULocalConnectionToServer conn, byte[] buffer, int numBytes, int channelId); // 0x00AA6C20-0x00AA6D24
		internal bool InvokeHandlerOnServer(ULocalConnectionToServer conn, short msgType, MessageBase msg, int channelId); // 0x00AA6D24-0x00AA6FEC
		public static GameObject FindLocalObject(NetworkInstanceId netId); // 0x00AA577C-0x00AA57F8
		public static Dictionary<short, NetworkConnection.PacketStat> GetConnectionStats(); // 0x00AA6FEC-0x00AA735C
		public static void ResetConnectionStats(); // 0x00AA735C-0x00AA7430
		public static bool AddExternalConnection(NetworkConnection conn); // 0x00AA7430-0x00AA74A0
		private bool AddExternalConnectionInternal(NetworkConnection conn); // 0x00AA74A0-0x00AA76F8
		public static void RemoveExternalConnection(int connectionId); // 0x00AA76F8-0x00AA7768
		private bool RemoveExternalConnectionInternal(int connectionId); // 0x00AA7768-0x00AA7930
		private static bool ValidateSceneObject(NetworkIdentity netId); // 0x00AA79BC-0x00AA7A34
		public static bool SpawnObjects(); // 0x00AA7A34-0x00AA7DDC
		private static void SendCrc(NetworkConnection targetConnection); // 0x00AA1518-0x00AA1758
		[Obsolete] // 0x00511240-0x00511278
		public void SendNetworkInfo(NetworkConnection targetConnection); // 0x00AA7DE4-0x00AA7DE8
	}

	[Obsolete] // 0x0051005C-0x00510094
	public class NetworkServerSimple // TypeDefIndex: 3094
	{
		// Fields
		private bool m_Initialized; // 0x10
		private int m_ListenPort; // 0x14
		private int m_ServerHostId; // 0x18
		private int m_RelaySlotId; // 0x1C
		private bool m_UseWebSockets; // 0x20
		private byte[] m_MsgBuffer; // 0x28
		private NetworkReader m_MsgReader; // 0x30
		private Type m_NetworkConnectionClass; // 0x38
		private HostTopology m_HostTopology; // 0x40
		private List<NetworkConnection> m_Connections; // 0x48
		private ReadOnlyCollection<NetworkConnection> m_ConnectionsReadOnly; // 0x50
		private NetworkMessageHandlers m_MessageHandlers; // 0x58
	
		// Properties
		public int listenPort { get; set; } // 0x00AA803C-0x00AA8044 0x00AA8044-0x00AA804C
		public int serverHostId { get; set; } // 0x00AA804C-0x00AA8054 0x00AA8054-0x00AA805C
		public HostTopology hostTopology { get; } // 0x00AA805C-0x00AA8064 
		public bool useWebSockets { get; set; } // 0x00AA8064-0x00AA806C 0x00AA806C-0x00AA8078
		public ReadOnlyCollection<NetworkConnection> connections { get; } // 0x00AA8078-0x00AA8080 
		public Dictionary<short, NetworkMessageDelegate> handlers { get; } // 0x00A9BCC8-0x00A9BCE8 
		public byte[] messageBuffer { get; } // 0x00AA8080-0x00AA8088 
		public NetworkReader messageReader { get; } // 0x00AA8088-0x00AA8090 
		public Type networkConnectionClass { get; } // 0x00AA8090-0x00AA8098 
	
		// Constructors
		public NetworkServerSimple(); // 0x00AA7E84-0x00AA7F94
	
		// Methods
		public void SetNetworkConnectionClass<T>()
			where T : NetworkConnection;
		public virtual void Initialize(); // 0x00AA8098-0x00AA82E8
		public bool Configure(ConnectionConfig config, int maxConnections); // 0x00A9C6C0-0x00A9C73C
		public bool Configure(HostTopology topology); // 0x00A9C7C0-0x00A9C7D0
		public bool Listen(string ipAddress, int serverListenPort); // 0x00A9D868-0x00A9DC0C
		public bool Listen(int serverListenPort); // 0x00AA82E8-0x00AA82F0
		public bool Listen(int serverListenPort, HostTopology topology); // 0x00AA82F0-0x00AA85BC
		public void ListenRelay(string relayIp, int relayPort, NetworkID netGuid, SourceID sourceId, NodeID nodeId); // 0x00A9D3AC-0x00A9D774
		public void Stop(); // 0x00A9CB68-0x00A9CD00
		internal void RegisterHandlerSafe(short msgType, NetworkMessageDelegate handler); // 0x00A9D2F0-0x00A9D30C
		public void RegisterHandler(short msgType, NetworkMessageDelegate handler); // 0x00AA2040-0x00AA205C
		public void UnregisterHandler(short msgType); // 0x00AA20D4-0x00AA20F0
		public void ClearHandlers(); // 0x00AA2160-0x00AA217C
		public void UpdateConnections(); // 0x00AA133C-0x00AA13D8
		public void Update(); // 0x00AA0C48-0x00AA133C
		public NetworkConnection FindConnection(int connectionId); // 0x00AA7930-0x00AA79BC
		public bool SetConnectionAtIndex(NetworkConnection conn); // 0x00A9E63C-0x00A9E730
		public bool RemoveConnectionAtIndex(int connectionId); // 0x00A9E82C-0x00A9E8B8
		private void HandleConnect(int connectionId, byte error); // 0x00AA85BC-0x00AA88CC
		private void HandleDisconnect(int connectionId, byte error); // 0x00AA8A58-0x00AA8E04
		private void HandleData(int connectionId, int channelId, int receivedSize, byte error); // 0x00AA88CC-0x00AA8A58
		public void SendBytesTo(int connectionId, byte[] bytes, int numBytes, int channelId); // 0x00AA8E04-0x00AA8E5C
		public void SendWriterTo(int connectionId, NetworkWriter writer, int channelId); // 0x00AA8E5C-0x00AA8EA0
		public void Disconnect(int connectionId); // 0x00AA8EA0-0x00AA8F34
		public void DisconnectAllConnections(); // 0x00AA04F0-0x00AA059C
		public virtual void OnConnectError(int connectionId, byte error); // 0x00AA8F34-0x00AA8FE4
		public virtual void OnDataError(NetworkConnection conn, byte error); // 0x00AA8FE4-0x00AA9094
		public virtual void OnDisconnectError(NetworkConnection conn, byte error); // 0x00AA9094-0x00AA9144
		public virtual void OnConnected(NetworkConnection conn); // 0x00AA9144-0x00AA916C
		public virtual void OnDisconnected(NetworkConnection conn); // 0x00AA916C-0x00AA9194
		public virtual void OnData(NetworkConnection conn, int receivedSize, int channelId); // 0x00AA9194-0x00AA91C4
	}

	[AddComponentMenu] // 0x00510094-0x00510104
	[DisallowMultipleComponent] // 0x00510094-0x00510104
	[Obsolete] // 0x00510094-0x00510104
	public class NetworkStartPosition : MonoBehaviour // TypeDefIndex: 3095
	{
		// Constructors
		public NetworkStartPosition(); // 0x00AA92D0-0x00AA92D8
	
		// Methods
		public void Awake(); // 0x00AA91D8-0x00AA9254
		public void OnDestroy(); // 0x00AA9254-0x00AA92D0
	}

	[AddComponentMenu] // 0x00510104-0x00510164
	[Obsolete] // 0x00510104-0x00510164
	public class NetworkTransformChild : NetworkBehaviour // TypeDefIndex: 3096
	{
		// Fields
		[SerializeField] // 0x00510E1C-0x00510E2C
		private Transform m_Target; // 0x30
		[SerializeField] // 0x00510E2C-0x00510E3C
		private uint m_ChildIndex; // 0x38
		private NetworkTransform m_Root; // 0x40
		[SerializeField] // 0x00510E3C-0x00510E4C
		private float m_SendInterval; // 0x48
		[SerializeField] // 0x00510E4C-0x00510E5C
		private NetworkTransform.AxisSyncMode m_SyncRotationAxis; // 0x4C
		[SerializeField] // 0x00510E5C-0x00510E6C
		private NetworkTransform.CompressionSyncMode m_RotationSyncCompression; // 0x50
		[SerializeField] // 0x00510E6C-0x00510E7C
		private float m_MovementThreshold; // 0x54
		[SerializeField] // 0x00510E7C-0x00510E8C
		private float m_InterpolateRotation; // 0x58
		[SerializeField] // 0x00510E8C-0x00510E9C
		private float m_InterpolateMovement; // 0x5C
		[SerializeField] // 0x00510E9C-0x00510EAC
		private NetworkTransform.ClientMoveCallback3D m_ClientMoveCallback3D; // 0x60
		private Vector3 m_TargetSyncPosition; // 0x68
		private Quaternion m_TargetSyncRotation3D; // 0x74
		private float m_LastClientSyncTime; // 0x84
		private float m_LastClientSendTime; // 0x88
		private Vector3 m_PrevPosition; // 0x8C
		private Quaternion m_PrevRotation; // 0x98
		private const float k_LocalMovementThreshold = 1E-05f; // Metadata: 0x001F50E3
		private const float k_LocalRotationThreshold = 1E-05f; // Metadata: 0x001F50E7
		private NetworkWriter m_LocalTransformWriter; // 0xA8
	
		// Properties
		public Transform target { get; set; } // 0x00AAF918-0x00AAF920 0x00AAF920-0x00AAF928
		public uint childIndex { get; } // 0x00AAFD38-0x00AAFD40 
		public float sendInterval { get; set; } // 0x00AAFD40-0x00AAFD48 0x00AAFD48-0x00AAFD50
		public NetworkTransform.AxisSyncMode syncRotationAxis { get; set; } // 0x00AAFD50-0x00AAFD58 0x00AAFD58-0x00AAFD60
		public NetworkTransform.CompressionSyncMode rotationSyncCompression { get; set; } // 0x00AAFD60-0x00AAFD68 0x00AAFD68-0x00AAFD70
		public float movementThreshold { get; set; } // 0x00AAFD70-0x00AAFD78 0x00AAFD78-0x00AAFD80
		public float interpolateRotation { get; set; } // 0x00AAFD80-0x00AAFD88 0x00AAFD88-0x00AAFD90
		public float interpolateMovement { get; set; } // 0x00AAFD90-0x00AAFD98 0x00AAFD98-0x00AAFDA0
		public NetworkTransform.ClientMoveCallback3D clientMoveCallback3D { get; set; } // 0x00AAFDA0-0x00AAFDA8 0x00AAFDA8-0x00AAFDB0
		public float lastSyncTime { get; } // 0x00AAFDB0-0x00AAFDB8 
		public Vector3 targetSyncPosition { get; } // 0x00AAFDB8-0x00AAFDC4 
		public Quaternion targetSyncRotation3D { get; } // 0x00AAFDC4-0x00AAFDD0 
	
		// Constructors
		public NetworkTransformChild(); // 0x00AB10DC-0x00AB116C
	
		// Methods
		private void OnValidate(); // 0x00AAF928-0x00AAFD38
		private void Awake(); // 0x00AAFDD0-0x00AAFE70
		public override bool OnSerialize(NetworkWriter writer, bool initialState); // 0x00AAFE70-0x00AAFED8
		private void SerializeModeTransform(NetworkWriter writer); // 0x00AAFED8-0x00AAFF74
		public override void OnDeserialize(NetworkReader reader, bool initialState); // 0x00AAFF74-0x00AB0038
		private void UnserializeModeTransform(NetworkReader reader, bool initialState); // 0x00AB0038-0x00AB0210
		private void FixedUpdate(); // 0x00AB0210-0x00AB0260
		private void FixedUpdateServer(); // 0x00AB0260-0x00AB0490
		private void FixedUpdateClient(); // 0x00AB0490-0x00AB07A0
		private void Update(); // 0x00AB07A0-0x00AB08C0
		private bool HasMoved(); // 0x00AB0AB0-0x00AB0C2C
		[Client] // 0x00511278-0x00511288
		private void SendTransform(); // 0x00AB08C0-0x00AB0AB0
		internal static void HandleChildTransform(NetworkMessage netMsg); // 0x00AB0C2C-0x00AB10CC
		public override int GetNetworkChannel(); // 0x00AB10CC-0x00AB10D4
		public override float GetNetworkSendInterval(); // 0x00AB10D4-0x00AB10DC
	}

	[AddComponentMenu] // 0x00510164-0x005101D4
	[DisallowMultipleComponent] // 0x00510164-0x005101D4
	[Obsolete] // 0x00510164-0x005101D4
	public class NetworkTransform : NetworkBehaviour // TypeDefIndex: 3097
	{
		// Fields
		[SerializeField] // 0x00510EAC-0x00510EBC
		private TransformSyncMode m_TransformSyncMode; // 0x30
		[SerializeField] // 0x00510EBC-0x00510ECC
		private float m_SendInterval; // 0x34
		[SerializeField] // 0x00510ECC-0x00510EDC
		private AxisSyncMode m_SyncRotationAxis; // 0x38
		[SerializeField] // 0x00510EDC-0x00510EEC
		private CompressionSyncMode m_RotationSyncCompression; // 0x3C
		[SerializeField] // 0x00510EEC-0x00510EFC
		private bool m_SyncSpin; // 0x40
		[SerializeField] // 0x00510EFC-0x00510F0C
		private float m_MovementTheshold; // 0x44
		[SerializeField] // 0x00510F0C-0x00510F1C
		private float m_VelocityThreshold; // 0x48
		[SerializeField] // 0x00510F1C-0x00510F2C
		private float m_SnapThreshold; // 0x4C
		[SerializeField] // 0x00510F2C-0x00510F3C
		private float m_InterpolateRotation; // 0x50
		[SerializeField] // 0x00510F3C-0x00510F4C
		private float m_InterpolateMovement; // 0x54
		[SerializeField] // 0x00510F4C-0x00510F5C
		private ClientMoveCallback3D m_ClientMoveCallback3D; // 0x58
		[SerializeField] // 0x00510F5C-0x00510F6C
		private ClientMoveCallback2D m_ClientMoveCallback2D; // 0x60
		private Rigidbody m_RigidBody3D; // 0x68
		private Rigidbody2D m_RigidBody2D; // 0x70
		private CharacterController m_CharacterController; // 0x78
		private bool m_Grounded; // 0x80
		private Vector3 m_TargetSyncPosition; // 0x84
		private Vector3 m_TargetSyncVelocity; // 0x90
		private Vector3 m_FixedPosDiff; // 0x9C
		private Quaternion m_TargetSyncRotation3D; // 0xA8
		private Vector3 m_TargetSyncAngularVelocity3D; // 0xB8
		private float m_TargetSyncRotation2D; // 0xC4
		private float m_TargetSyncAngularVelocity2D; // 0xC8
		private float m_LastClientSyncTime; // 0xCC
		private float m_LastClientSendTime; // 0xD0
		private Vector3 m_PrevPosition; // 0xD4
		private Quaternion m_PrevRotation; // 0xE0
		private float m_PrevRotation2D; // 0xF0
		private float m_PrevVelocity; // 0xF4
		private const float k_LocalMovementThreshold = 1E-05f; // Metadata: 0x001F50EB
		private const float k_LocalRotationThreshold = 1E-05f; // Metadata: 0x001F50EF
		private const float k_LocalVelocityThreshold = 1E-05f; // Metadata: 0x001F50F3
		private const float k_MoveAheadRatio = 0.1f; // Metadata: 0x001F50F7
		private NetworkWriter m_LocalTransformWriter; // 0xF8
	
		// Properties
		public TransformSyncMode transformSyncMode { get; set; } // 0x00AAAED0-0x00AAAED8 0x00AAAED8-0x00AAAEE0
		public float sendInterval { get; set; } // 0x00AAAEE0-0x00AAAEE8 0x00AAAEE8-0x00AAAEF0
		public AxisSyncMode syncRotationAxis { get; set; } // 0x00AAAEF0-0x00AAAEF8 0x00AAAEF8-0x00AAAF00
		public CompressionSyncMode rotationSyncCompression { get; set; } // 0x00AAAF00-0x00AAAF08 0x00AAAF08-0x00AAAF10
		public bool syncSpin { get; set; } // 0x00AAAF10-0x00AAAF18 0x00AAAF18-0x00AAAF24
		public float movementTheshold { get; set; } // 0x00AAAF24-0x00AAAF2C 0x00AAAF2C-0x00AAAF34
		public float velocityThreshold { get; set; } // 0x00AAAF34-0x00AAAF3C 0x00AAAF3C-0x00AAAF44
		public float snapThreshold { get; set; } // 0x00AAAF44-0x00AAAF4C 0x00AAAF4C-0x00AAAF54
		public float interpolateRotation { get; set; } // 0x00AAAF54-0x00AAAF5C 0x00AAAF5C-0x00AAAF64
		public float interpolateMovement { get; set; } // 0x00AAAF64-0x00AAAF6C 0x00AAAF6C-0x00AAAF74
		public ClientMoveCallback3D clientMoveCallback3D { get; set; } // 0x00AAAF74-0x00AAAF7C 0x00AAAF7C-0x00AAAF84
		public ClientMoveCallback2D clientMoveCallback2D { get; set; } // 0x00AAAF84-0x00AAAF8C 0x00AAAF8C-0x00AAAF94
		public CharacterController characterContoller { get; } // 0x00AAAF94-0x00AAAF9C 
		public Rigidbody rigidbody3D { get; } // 0x00AAAF9C-0x00AAAFA4 
		public Rigidbody2D rigidbody2D { get; } // 0x00AAAFA4-0x00AAAFAC 
		public float lastSyncTime { get; } // 0x00AAAFAC-0x00AAAFB4 
		public Vector3 targetSyncPosition { get; } // 0x00AAAFB4-0x00AAAFC0 
		public Vector3 targetSyncVelocity { get; } // 0x00AAAFC0-0x00AAAFCC 
		public Quaternion targetSyncRotation3D { get; } // 0x00AAAFCC-0x00AAAFD8 
		public float targetSyncRotation2D { get; } // 0x00AAAFD8-0x00AAAFE0 
		public bool grounded { get; set; } // 0x00AAAFE0-0x00AAAFE8 0x00AAAFE8-0x00AAAFF4
	
		// Nested types
		public enum TransformSyncMode // TypeDefIndex: 3098
		{
			SyncNone = 0,
			SyncTransform = 1,
			SyncRigidbody2D = 2,
			SyncRigidbody3D = 3,
			SyncCharacterController = 4
		}
	
		public enum AxisSyncMode // TypeDefIndex: 3099
		{
			None = 0,
			AxisX = 1,
			AxisY = 2,
			AxisZ = 3,
			AxisXY = 4,
			AxisXZ = 5,
			AxisYZ = 6,
			AxisXYZ = 7
		}
	
		public enum CompressionSyncMode // TypeDefIndex: 3100
		{
			None = 0,
			Low = 1,
			High = 2
		}
	
		public delegate bool ClientMoveCallback3D(ref Vector3 position, ref Vector3 velocity, ref Quaternion rotation); // TypeDefIndex: 3101; 0x00AAD1D4-0x00AAD45C
	
		public delegate bool ClientMoveCallback2D(ref Vector2 position, ref Vector2 velocity, ref float rotation); // TypeDefIndex: 3102; 0x00AAD64C-0x00AAD8D4
	
		// Constructors
		public NetworkTransform(); // 0x00AAF644-0x00AAF6D8
	
		// Methods
		private void OnValidate(); // 0x00AAAFF4-0x00AAB094
		private void Awake(); // 0x00AAB094-0x00AAB190
		public override void OnStartServer(); // 0x00AAB190-0x00AAB198
		public override bool OnSerialize(NetworkWriter writer, bool initialState); // 0x00AAB198-0x00AAB254
		private void SerializeModeTransform(NetworkWriter writer); // 0x00AAB254-0x00AAB310
		private void VerifySerializeComponentExists(); // 0x00AAB8D0-0x00AABBDC
		private void SerializeMode3D(NetworkWriter writer); // 0x00AAB310-0x00AAB480
		private void SerializeModeCharacterController(NetworkWriter writer); // 0x00AAB6D0-0x00AAB7D8
		private void SerializeMode2D(NetworkWriter writer); // 0x00AAB480-0x00AAB6D0
		public override void OnDeserialize(NetworkReader reader, bool initialState); // 0x00AABD1C-0x00AABE3C
		private void UnserializeModeTransform(NetworkReader reader, bool initialState); // 0x00AABE3C-0x00AAC054
		private void UnserializeMode3D(NetworkReader reader, bool initialState); // 0x00AAC054-0x00AAC50C
		private void UnserializeMode2D(NetworkReader reader, bool initialState); // 0x00AAC50C-0x00AACAB0
		private void UnserializeModeCharacterController(NetworkReader reader, bool initialState); // 0x00AACAB0-0x00AACF9C
		private void FixedUpdate(); // 0x00AAD8D4-0x00AAD924
		private void FixedUpdateServer(); // 0x00AAD924-0x00AADB70
		private bool CheckVelocityChanged(); // 0x00AADD40-0x00AADEC4
		private void FixedUpdateClient(); // 0x00AADB70-0x00AADD40
		private void InterpolateTransformMode3D(); // 0x00AADEC4-0x00AAE120
		private void InterpolateTransformModeCharacterController(); // 0x00AAE444-0x00AAE76C
		private void InterpolateTransformMode2D(); // 0x00AAE120-0x00AAE444
		private void Update(); // 0x00AAE76C-0x00AAE88C
		private bool HasMoved(); // 0x00AAEC34-0x00AAF070
		[Client] // 0x00511288-0x00511298
		private void SendTransform(); // 0x00AAE88C-0x00AAEC34
		public static void HandleTransform(NetworkMessage netMsg); // 0x00AAF0D4-0x00AAF4CC
		private static void WriteAngle(NetworkWriter writer, float angle, CompressionSyncMode compression); // 0x00AAF4CC-0x00AAF510
		private static float ReadAngle(NetworkReader reader, CompressionSyncMode compression); // 0x00AAF530-0x00AAF580
		public static void SerializeVelocity3D(NetworkWriter writer, Vector3 velocity, CompressionSyncMode compression); // 0x00AABBDC-0x00AABBF0
		public static void SerializeVelocity2D(NetworkWriter writer, Vector2 velocity, CompressionSyncMode compression); // 0x00AABCD4-0x00AABD14
		public static void SerializeRotation3D(NetworkWriter writer, Quaternion rot, AxisSyncMode mode, CompressionSyncMode compression); // 0x00AAB7D8-0x00AAB8D0
		public static void SerializeRotation2D(NetworkWriter writer, float rot, CompressionSyncMode compression); // 0x00AABD14-0x00AABD18
		public static void SerializeSpin3D(NetworkWriter writer, Vector3 angularVelocity, AxisSyncMode mode, CompressionSyncMode compression); // 0x00AABBF0-0x00AABCA0
		public static void SerializeSpin2D(NetworkWriter writer, float angularVelocity, CompressionSyncMode compression); // 0x00AABD18-0x00AABD1C
		public static Vector3 UnserializeVelocity3D(NetworkReader reader, CompressionSyncMode compression); // 0x00AAF580-0x00AAF598
		public static Vector3 UnserializeVelocity2D(NetworkReader reader, CompressionSyncMode compression); // 0x00AAF598-0x00AAF62C
		public static Quaternion UnserializeRotation3D(NetworkReader reader, AxisSyncMode mode, CompressionSyncMode compression); // 0x00AACF9C-0x00AAD1D4
		public static float UnserializeRotation2D(NetworkReader reader, CompressionSyncMode compression); // 0x00AAD644-0x00AAD648
		public static Vector3 UnserializeSpin3D(NetworkReader reader, AxisSyncMode mode, CompressionSyncMode compression); // 0x00AAD45C-0x00AAD644
		public static float UnserializeSpin2D(NetworkReader reader, CompressionSyncMode compression); // 0x00AAD648-0x00AAD64C
		public override int GetNetworkChannel(); // 0x00AAF62C-0x00AAF634
		public override float GetNetworkSendInterval(); // 0x00AAF634-0x00AAF63C
		public override void OnStartAuthority(); // 0x00AAF63C-0x00AAF644
	}

	[AddComponentMenu] // 0x005101D4-0x005102A4
	[DisallowMultipleComponent] // 0x005101D4-0x005102A4
	[EditorBrowsable] // 0x005101D4-0x005102A4
	[Obsolete] // 0x005101D4-0x005102A4
	[RequireComponent] // 0x005101D4-0x005102A4
	public class NetworkTransformVisualizer : NetworkBehaviour // TypeDefIndex: 3103
	{
		// Fields
		[SerializeField] // 0x00510F6C-0x00510FB8
		[Tooltip] // 0x00510F6C-0x00510FB8
		private GameObject m_VisualizerPrefab; // 0x30
		private NetworkTransform m_NetworkTransform; // 0x38
		private GameObject m_Visualizer; // 0x40
		private static Material s_LineMaterial; // 0x00
	
		// Properties
		public GameObject visualizerPrefab { get; set; } // 0x00AB116C-0x00AB1174 0x00AB1174-0x00AB117C
	
		// Constructors
		public NetworkTransformVisualizer(); // 0x00AB2070-0x00AB20D8
	
		// Methods
		public override void OnStartClient(); // 0x00AB117C-0x00AB12E8
		public override void OnStartLocalPlayer(); // 0x00AB1474-0x00AB1550
		private void OnDestroy(); // 0x00AB1550-0x00AB1604
		[ClientCallback] // 0x00511298-0x005112A8
		private void FixedUpdate(); // 0x00AB1604-0x00AB1AC4
		private void OnRenderObject(); // 0x00AB1AC4-0x00AB1C5C
		private void DrawRotationInterpolation(); // 0x00AB1C5C-0x00AB2070
		private static void CreateLineMaterial(); // 0x00AB12E8-0x00AB1474
	}

	[Obsolete] // 0x005102A4-0x005102DC
	public class NetworkWriter // TypeDefIndex: 3104
	{
		// Fields
		private const int k_MaxStringLength = 32768; // Metadata: 0x001F513B
		private NetBuffer m_Buffer; // 0x10
		private static Encoding s_Encoding; // 0x00
		private static byte[] s_StringWriteBuffer; // 0x08
		private static UIntFloat s_FloatConverter; // 0x10
	
		// Properties
		public short Position { get; } // 0x00AA5C50-0x00AA5C70 
	
		// Constructors
		public NetworkWriter(); // 0x00AA1EEC-0x00AA1FB8
		public NetworkWriter(byte[] buffer); // 0x00AB20D8-0x00AB21B4
	
		// Methods
		public byte[] ToArray(); // 0x00AA5C70-0x00AA5D28
		public byte[] AsArray(); // 0x00AB21B4-0x00AB21F8
		internal ArraySegment<byte> AsArraySegment(); // 0x00A9F5FC-0x00A9F618
		public void WritePackedUInt32(uint value); // 0x00AA95DC-0x00AA96C8
		public void WritePackedUInt64(ulong value); // 0x00AB21F8-0x00AB247C
		public void Write(NetworkInstanceId value); // 0x00AA95D8-0x00AA95DC
		public void Write(NetworkSceneId value); // 0x00AAA3D4-0x00AAA3D8
		public void Write(char value); // 0x00AB247C-0x00AB2498
		public void Write(byte value); // 0x00AA9BBC-0x00AA9BD8
		public void Write(sbyte value); // 0x00AB2498-0x00AB24B4
		public void Write(short value); // 0x00AAF510-0x00AAF530
		public void Write(ushort value); // 0x00AA937C-0x00AA939C
		public void Write(int value); // 0x00AB24B4-0x00AB24DC
		public void Write(uint value); // 0x00AB24DC-0x00AB2504
		public void Write(long value); // 0x00AB2504-0x00AB2550
		public void Write(ulong value); // 0x00AB2550-0x00AB259C
		public void Write(float value); // 0x00AA96C8-0x00AA9734
		public void Write(double value); // 0x00AB259C-0x00AB2608
		public void Write(decimal value); // 0x00AB2608-0x00AB26FC
		public void Write(string value); // 0x00AA9A24-0x00AA9BBC
		public void Write(bool value); // 0x00AA9C68-0x00AA9C98
		public void Write(byte[] buffer, int count); // 0x00AB26FC-0x00AB2828
		public void Write(byte[] buffer, int offset, int count); // 0x00AB2828-0x00AB295C
		public void WriteBytesAndSize(byte[] buffer, int count); // 0x00AA939C-0x00AA94F8
		public void WriteBytesFull(byte[] buffer); // 0x00AAA164-0x00AAA2AC
		public void Write(Vector2 value); // 0x00AABCA0-0x00AABCD4
		public void Write(Vector3 value); // 0x00AAA120-0x00AAA164
		public void Write(Vector4 value); // 0x00AB295C-0x00AB29B8
		public void Write(Color value); // 0x00AB29B8-0x00AB2A14
		public void Write(Color32 value); // 0x00AB2A14-0x00AB2A6C
		public void Write(Quaternion value); // 0x00AAA2AC-0x00AAA308
		public void Write(Rect value); // 0x00AB2A6C-0x00AB2AE8
		public void Write(Plane value); // 0x00AB2AE8-0x00AB2B3C
		public void Write(Ray value); // 0x00AB2B3C-0x00AB2B80
		public void Write(Matrix4x4 value); // 0x00AB2B80-0x00AB2C58
		public void Write(NetworkHash128 value); // 0x00AAA01C-0x00AAA120
		public void Write(NetworkIdentity value); // 0x00AB2C58-0x00AB2D04
		public void Write(Transform value); // 0x00AB2D04-0x00AB2ED4
		public void Write(GameObject value); // 0x00AB2ED4-0x00AB3054
		public void Write(MessageBase msg); // 0x00AB3054-0x00AB3080
		public void SeekZero(); // 0x00AB3080-0x00AB309C
		public void StartMessage(short msgType); // 0x00AAF070-0x00AAF0B8
		public void FinishMessage(); // 0x00AAF0B8-0x00AAF0D4
	}

	[Obsolete] // 0x005102DC-0x00510314
	public class PlayerController // TypeDefIndex: 3105
	{
		// Fields
		internal const short kMaxLocalPlayers = 8; // Metadata: 0x001F513F
		public short playerControllerId; // 0x10
		public NetworkIdentity unetView; // 0x18
		public GameObject gameObject; // 0x20
		public const int MaxPlayersPerClient = 32; // Metadata: 0x001F5141
	
		// Properties
		public bool IsValid { get; } // 0x00A9FC0C-0x00A9FC1C 
	
		// Constructors
		public PlayerController(); // 0x00AB309C-0x00AB30AC
		internal PlayerController(GameObject go, short playerControllerId); // 0x00AA3958-0x00AA39E8
	
		// Methods
		public override string ToString(); // 0x00AB30AC-0x00AB32B0
	}

	[Obsolete] // 0x00510314-0x0051034C
	public sealed class SyncListString : SyncList<string> // TypeDefIndex: 3106
	{
		// Constructors
		public SyncListString(); // 0x00AB405C-0x00AB40AC
	
		// Methods
		protected override void SerializeItem(NetworkWriter writer, string item); // 0x00AB3F4C-0x00AB3F6C
		protected override string DeserializeItem(NetworkReader reader); // 0x00AB3F6C-0x00AB3F8C
		[Obsolete] // 0x005112A8-0x005112E0
		public static SyncListString ReadInstance(NetworkReader reader); // 0x00AB3F8C-0x00AB405C
		public static void ReadReference(NetworkReader reader, SyncListString syncList); // 0x00AB40AC-0x00AB4174
		public static void WriteInstance(NetworkWriter writer, SyncListString items); // 0x00AB4174-0x00AB424C
	}

	[Obsolete] // 0x0051034C-0x00510384
	public sealed class SyncListFloat : SyncList<float> // TypeDefIndex: 3107
	{
		// Constructors
		public SyncListFloat(); // 0x00AB3A64-0x00AB3AB4
	
		// Methods
		protected override void SerializeItem(NetworkWriter writer, float item); // 0x00AB395C-0x00AB3978
		protected override float DeserializeItem(NetworkReader reader); // 0x00AB3978-0x00AB3998
		[Obsolete] // 0x005112E0-0x00511318
		public static SyncListFloat ReadInstance(NetworkReader reader); // 0x00AB3998-0x00AB3A64
		public static void ReadReference(NetworkReader reader, SyncListFloat syncList); // 0x00AB3AB4-0x00AB3B78
		public static void WriteInstance(NetworkWriter writer, SyncListFloat items); // 0x00AB3B78-0x00AB3C4C
	}

	[Obsolete] // 0x00510384-0x005103BC
	public class SyncListInt : SyncList<int> // TypeDefIndex: 3108
	{
		// Constructors
		public SyncListInt(); // 0x00AB3D5C-0x00AB3DAC
	
		// Methods
		protected override void SerializeItem(NetworkWriter writer, int item); // 0x00AB3C4C-0x00AB3C6C
		protected override int DeserializeItem(NetworkReader reader); // 0x00AB3C6C-0x00AB3C8C
		[Obsolete] // 0x00511318-0x00511350
		public static SyncListInt ReadInstance(NetworkReader reader); // 0x00AB3C8C-0x00AB3D5C
		public static void ReadReference(NetworkReader reader, SyncListInt syncList); // 0x00AB3DAC-0x00AB3E74
		public static void WriteInstance(NetworkWriter writer, SyncListInt items); // 0x00AB3E74-0x00AB3F4C
	}

	[Obsolete] // 0x005103BC-0x005103F4
	public class SyncListUInt : SyncList<uint> // TypeDefIndex: 3109
	{
		// Constructors
		public SyncListUInt(); // 0x00AB435C-0x00AB43AC
	
		// Methods
		protected override void SerializeItem(NetworkWriter writer, uint item); // 0x00AB424C-0x00AB426C
		protected override uint DeserializeItem(NetworkReader reader); // 0x00AB426C-0x00AB428C
		[Obsolete] // 0x00511350-0x00511388
		public static SyncListUInt ReadInstance(NetworkReader reader); // 0x00AB428C-0x00AB435C
		public static void ReadReference(NetworkReader reader, SyncListUInt syncList); // 0x00AB43AC-0x00AB4474
		public static void WriteInstance(NetworkWriter writer, SyncListUInt items); // 0x00AB4474-0x00AB554C
	}

	[Obsolete] // 0x005103F4-0x0051042C
	public class SyncListBool : SyncList<bool> // TypeDefIndex: 3110
	{
		// Constructors
		public SyncListBool(); // 0x00AB376C-0x00AB37BC
	
		// Methods
		protected override void SerializeItem(NetworkWriter writer, bool item); // 0x00AB3658-0x00AB367C
		protected override bool DeserializeItem(NetworkReader reader); // 0x00AB367C-0x00AB369C
		[Obsolete] // 0x00511388-0x005113C0
		public static SyncListBool ReadInstance(NetworkReader reader); // 0x00AB369C-0x00AB376C
		public static void ReadReference(NetworkReader reader, SyncListBool syncList); // 0x00AB37BC-0x00AB3884
		public static void WriteInstance(NetworkWriter writer, SyncListBool items); // 0x00AB3884-0x00AB395C
	}

	[Obsolete] // 0x0051042C-0x00510464
	public class SyncListStruct<T> : SyncList<T> // TypeDefIndex: 3111
		where T : struct
	{
		// Properties
		public new ushort Count { get; }
	
		// Constructors
		public SyncListStruct();
	
		// Methods
		public new void AddInternal(T item);
		protected override void SerializeItem(NetworkWriter writer, T item);
		protected override T DeserializeItem(NetworkReader reader);
		public T GetItem(int i);
	}

	[EditorBrowsable] // 0x00510464-0x005104D8
	[Obsolete] // 0x00510464-0x005104D8
	public abstract class SyncList<T> : IList<T> // TypeDefIndex: 3112
	{
		// Fields
		private List<T> m_Objects;
		private NetworkBehaviour m_Behaviour;
		private int m_CmdHash;
		private SyncListChanged m_Callback;
	
		// Properties
		public int Count { get; }
		public bool IsReadOnly { get; }
		public SyncListChanged Callback { get; set; }
		public T this[int i] { get => default; set {} }
	
		// Nested types
		public delegate void SyncListChanged(Operation<T> op, int itemIndex); // TypeDefIndex: 3113; 0x00000000-0x00000000
	
		public enum Operation // TypeDefIndex: 3114
		{
			OP_ADD = 0,
			OP_CLEAR = 1,
			OP_INSERT = 2,
			OP_REMOVE = 3,
			OP_REMOVEAT = 4,
			OP_SET = 5,
			OP_DIRTY = 6
		}
	
		// Constructors
		protected SyncList();
	
		// Methods
		protected abstract void SerializeItem(NetworkWriter writer, T item);
		protected abstract T DeserializeItem(NetworkReader reader);
		public void InitializeBehaviour(NetworkBehaviour beh, int cmdHash);
		private void SendMsg(Operation op, int itemIndex, T item);
		private void SendMsg(Operation op, int itemIndex);
		public void HandleMsg(NetworkReader reader);
		internal void AddInternal(T item);
		public void Add(T item);
		public void Clear();
		public bool Contains(T item);
		public void CopyTo(T[] array, int index);
		public int IndexOf(T item);
		public void Insert(int index, T item);
		public bool Remove(T item);
		public void RemoveAt(int index);
		public void Dirty(int index);
		public IEnumerator<T> GetEnumerator();
		IEnumerator IEnumerable.GetEnumerator();
	}

	public delegate void NetworkMessageDelegate(NetworkMessage netMsg); // TypeDefIndex: 3115; 0x00A3427C-0x00A34630

	public delegate GameObject SpawnDelegate(Vector3 position, NetworkHash128 assetId); // TypeDefIndex: 3116; 0x00AB32D0-0x00AB3594

	public delegate void UnSpawnDelegate(GameObject spawned); // TypeDefIndex: 3117; 0x00FB2A78-0x00FB2E2C

	[Obsolete] // 0x005104D8-0x00510510
	public class MsgType // TypeDefIndex: 3118
	{
		// Fields
		public const short ObjectDestroy = 1; // Metadata: 0x001F5161
		public const short Rpc = 2; // Metadata: 0x001F5163
		public const short ObjectSpawn = 3; // Metadata: 0x001F5165
		public const short Owner = 4; // Metadata: 0x001F5167
		public const short Command = 5; // Metadata: 0x001F5169
		public const short LocalPlayerTransform = 6; // Metadata: 0x001F516B
		public const short SyncEvent = 7; // Metadata: 0x001F516D
		public const short UpdateVars = 8; // Metadata: 0x001F516F
		public const short SyncList = 9; // Metadata: 0x001F5171
		public const short ObjectSpawnScene = 10; // Metadata: 0x001F5173
		public const short NetworkInfo = 11; // Metadata: 0x001F5175
		public const short SpawnFinished = 12; // Metadata: 0x001F5177
		public const short ObjectHide = 13; // Metadata: 0x001F5179
		public const short CRC = 14; // Metadata: 0x001F517B
		public const short LocalClientAuthority = 15; // Metadata: 0x001F517D
		public const short LocalChildTransform = 16; // Metadata: 0x001F517F
		public const short Fragment = 17; // Metadata: 0x001F5181
		public const short PeerClientAuthority = 18; // Metadata: 0x001F5183
		internal const short UserMessage = 0; // Metadata: 0x001F5185
		internal const short HLAPIMsg = 28; // Metadata: 0x001F5187
		internal const short LLAPIMsg = 29; // Metadata: 0x001F5189
		internal const short HLAPIResend = 30; // Metadata: 0x001F518B
		internal const short HLAPIPending = 31; // Metadata: 0x001F518D
		public const short InternalHighest = 31; // Metadata: 0x001F518F
		public const short Connect = 32; // Metadata: 0x001F5191
		public const short Disconnect = 33; // Metadata: 0x001F5193
		public const short Error = 34; // Metadata: 0x001F5195
		public const short Ready = 35; // Metadata: 0x001F5197
		public const short NotReady = 36; // Metadata: 0x001F5199
		public const short AddPlayer = 37; // Metadata: 0x001F519B
		public const short RemovePlayer = 38; // Metadata: 0x001F519D
		public const short Scene = 39; // Metadata: 0x001F519F
		public const short Animation = 40; // Metadata: 0x001F51A1
		public const short AnimationParameters = 41; // Metadata: 0x001F51A3
		public const short AnimationTrigger = 42; // Metadata: 0x001F51A5
		public const short LobbyReadyToBegin = 43; // Metadata: 0x001F51A7
		public const short LobbySceneLoaded = 44; // Metadata: 0x001F51A9
		public const short LobbyAddPlayerFailed = 45; // Metadata: 0x001F51AB
		public const short LobbyReturnToLobby = 46; // Metadata: 0x001F51AD
		public const short ReconnectPlayer = 47; // Metadata: 0x001F51AF
		public const short Highest = 47; // Metadata: 0x001F51B1
		internal static string[] msgLabels; // 0x00
	
		// Constructors
		public MsgType(); // 0x009C1494-0x009C149C
		static MsgType(); // 0x009C149C-0x009C1E80
	
		// Methods
		public static string MsgTypeToString(short value); // 0x009C1370-0x009C1494
	}

	[Obsolete] // 0x00510510-0x00510548
	public class NetworkMessage // TypeDefIndex: 3119
	{
		// Fields
		public const int MaxMessageSize = 65535; // Metadata: 0x001F51B3
		public short msgType; // 0x10
		public NetworkConnection conn; // 0x18
		public NetworkReader reader; // 0x20
		public int channelId; // 0x28
	
		// Constructors
		public NetworkMessage(); // 0x00A34274-0x00A3427C
	
		// Methods
		public static string Dump(byte[] payload, int sz); // 0x00A34170-0x00A34274
		public TMsg ReadMessage<TMsg>()
			where TMsg : MessageBase, new();
		public void ReadMessage<TMsg>(TMsg msg)
			where TMsg : MessageBase;
	}

	public enum Version // TypeDefIndex: 3120
	{
		Current = 1
	}

	[Obsolete] // 0x00510548-0x00510580
	public class Channels // TypeDefIndex: 3121
	{
		// Fields
		public const int DefaultReliable = 0; // Metadata: 0x001F51BB
		public const int DefaultUnreliable = 1; // Metadata: 0x001F51BF
	
		// Constructors
		public Channels(); // 0x009B79B0-0x009B79B8
	}

	public enum ChannelOption // TypeDefIndex: 3122
	{
		MaxPendingBuffers = 1,
		AllowFragmentation = 2,
		MaxPacketSize = 3
	}
}

namespace UnityEngine.Networking.NetworkSystem
{
	[Obsolete] // 0x00510580-0x005105B8
	public class StringMessage : MessageBase // TypeDefIndex: 3123
	{
		// Fields
		public string value; // 0x10
	
		// Constructors
		public StringMessage(); // 0x00AAAE40-0x00AAAE48
		public StringMessage(string v); // 0x00AAAE48-0x00AAAE74
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AAAE74-0x00AAAEAC
		public override void Serialize(NetworkWriter writer); // 0x00AAAEAC-0x00AAAED0
	}

	[Obsolete] // 0x005105B8-0x005105F0
	public class IntegerMessage : MessageBase // TypeDefIndex: 3124
	{
		// Fields
		public int value; // 0x10
	
		// Constructors
		public IntegerMessage(); // 0x00AA9D10-0x00AA9D18
		public IntegerMessage(int v); // 0x00AA9D18-0x00AA9D44
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AA9D44-0x00AA9D7C
		public override void Serialize(NetworkWriter writer); // 0x00AA9D7C-0x00AA9DA0
	}

	[Obsolete] // 0x005105F0-0x00510628
	public class EmptyMessage : MessageBase // TypeDefIndex: 3125
	{
		// Constructors
		public EmptyMessage(); // 0x00AA9CA8-0x00AA9CB0
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AA9CA0-0x00AA9CA4
		public override void Serialize(NetworkWriter writer); // 0x00AA9CA4-0x00AA9CA8
	}

	[Obsolete] // 0x00510628-0x00510660
	public class ErrorMessage : MessageBase // TypeDefIndex: 3126
	{
		// Fields
		public int errorCode; // 0x10
	
		// Constructors
		public ErrorMessage(); // 0x00AA1EE4-0x00AA1EEC
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AA9CB0-0x00AA9CEC
		public override void Serialize(NetworkWriter writer); // 0x00AA9CEC-0x00AA9D10
	}

	[Obsolete] // 0x00510660-0x00510698
	public class ReadyMessage : EmptyMessage // TypeDefIndex: 3127
	{
		// Constructors
		public ReadyMessage(); // 0x00AAAD00-0x00AAAD08
	}

	[Obsolete] // 0x00510698-0x005106D0
	public class NotReadyMessage : EmptyMessage // TypeDefIndex: 3128
	{
		// Constructors
		public NotReadyMessage(); // 0x00AA4F48-0x00AA4F50
	}

	[Obsolete] // 0x005106D0-0x00510708
	public class AddPlayerMessage : MessageBase // TypeDefIndex: 3129
	{
		// Fields
		public short playerControllerId; // 0x10
		public int msgSize; // 0x14
		public byte[] msgData; // 0x18
	
		// Constructors
		public AddPlayerMessage(); // 0x00AA94F8-0x00AA9500
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AA92D8-0x00AA9338
		public override void Serialize(NetworkWriter writer); // 0x00AA9338-0x00AA937C
	}

	[Obsolete] // 0x00510708-0x00510740
	public class RemovePlayerMessage : MessageBase // TypeDefIndex: 3130
	{
		// Fields
		public short playerControllerId; // 0x10
	
		// Constructors
		public RemovePlayerMessage(); // 0x00AA7E7C-0x00AA7E84
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AAADE4-0x00AAAE1C
		public override void Serialize(NetworkWriter writer); // 0x00AAAE1C-0x00AAAE40
	}

	[Obsolete] // 0x00510740-0x00510778
	public class PeerAuthorityMessage : MessageBase // TypeDefIndex: 3131
	{
		// Fields
		public int connectionId; // 0x10
		public NetworkInstanceId netId; // 0x14
		public bool authorityState; // 0x18
	
		// Constructors
		public PeerAuthorityMessage(); // 0x00AAA5E0-0x00AAA5E8
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AAA534-0x00AAA594
		public override void Serialize(NetworkWriter writer); // 0x00AAA594-0x00AAA5E0
	}

	[Obsolete] // 0x00510778-0x005107B0
	public struct PeerInfoPlayer // TypeDefIndex: 3132
	{
		// Fields
		public NetworkInstanceId netId; // 0x00
		public short playerControllerId; // 0x04
	}

	[Obsolete] // 0x005107B0-0x005107E8
	public class PeerInfoMessage : MessageBase // TypeDefIndex: 3133
	{
		// Fields
		public int connectionId; // 0x10
		public string address; // 0x18
		public int port; // 0x20
		public bool isHost; // 0x24
		public bool isYou; // 0x25
		public PeerInfoPlayer[] playerIds; // 0x28
	
		// Constructors
		public PeerInfoMessage(); // 0x00AAAB10-0x00AAAB18
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AAA5E8-0x00AAA748
		public override void Serialize(NetworkWriter writer); // 0x00AAA748-0x00AAA858
		public override string ToString(); // 0x00AAA858-0x00AAAB10
	}

	[Obsolete] // 0x005107E8-0x00510820
	public class PeerListMessage : MessageBase // TypeDefIndex: 3134
	{
		// Fields
		public PeerInfoMessage[] peers; // 0x10
		public int oldServerConnectionId; // 0x18
	
		// Constructors
		public PeerListMessage(); // 0x00AAACF8-0x00AAAD00
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AAAB18-0x00AAAC4C
		public override void Serialize(NetworkWriter writer); // 0x00AAAC4C-0x00AAACF8
	}

	[Obsolete] // 0x00510820-0x00510858
	public class ReconnectMessage : MessageBase // TypeDefIndex: 3135
	{
		// Fields
		public int oldConnectionId; // 0x10
		public short playerControllerId; // 0x14
		public NetworkInstanceId netId; // 0x18
		public int msgSize; // 0x1C
		public byte[] msgData; // 0x20
	
		// Constructors
		public ReconnectMessage(); // 0x00AAADDC-0x00AAADE4
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AAAD08-0x00AAAD80
		public override void Serialize(NetworkWriter writer); // 0x00AAAD80-0x00AAADDC
	}

	internal class ObjectSpawnMessage : MessageBase // TypeDefIndex: 3136
	{
		// Fields
		public NetworkInstanceId netId; // 0x10
		public NetworkHash128 assetId; // 0x14
		public Vector3 position; // 0x24
		public byte[] payload; // 0x30
		public Quaternion rotation; // 0x38
	
		// Constructors
		public ObjectSpawnMessage(); // 0x00AA5C48-0x00AA5C50
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AA9EF0-0x00AA9FAC
		public override void Serialize(NetworkWriter writer); // 0x00AA9FAC-0x00AAA01C
	}

	internal class ObjectSpawnSceneMessage : MessageBase // TypeDefIndex: 3137
	{
		// Fields
		public NetworkInstanceId netId; // 0x10
		public NetworkSceneId sceneId; // 0x14
		public Vector3 position; // 0x18
		public byte[] payload; // 0x28
	
		// Constructors
		public ObjectSpawnSceneMessage(); // 0x00AA5D28-0x00AA5D30
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AAA308-0x00AAA378
		public override void Serialize(NetworkWriter writer); // 0x00AAA378-0x00AAA3D4
	}

	internal class ObjectSpawnFinishedMessage : MessageBase // TypeDefIndex: 3138
	{
		// Fields
		public uint state; // 0x10
	
		// Constructors
		public ObjectSpawnFinishedMessage(); // 0x00AA4B80-0x00AA4B88
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AA9E94-0x00AA9ECC
		public override void Serialize(NetworkWriter writer); // 0x00AA9ECC-0x00AA9EF0
	}

	internal class ObjectDestroyMessage : MessageBase // TypeDefIndex: 3139
	{
		// Fields
		public NetworkInstanceId netId; // 0x10
	
		// Constructors
		public ObjectDestroyMessage(); // 0x00AA4CC0-0x00AA4CC8
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AA9E38-0x00AA9E70
		public override void Serialize(NetworkWriter writer); // 0x00AA9E70-0x00AA9E94
	}

	internal class OwnerMessage : MessageBase // TypeDefIndex: 3140
	{
		// Fields
		public NetworkInstanceId netId; // 0x10
		public short playerControllerId; // 0x14
	
		// Constructors
		public OwnerMessage(); // 0x00AA4060-0x00AA4068
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AAA4A8-0x00AAA4F4
		public override void Serialize(NetworkWriter writer); // 0x00AAA4F4-0x00AAA534
	}

	internal class ClientAuthorityMessage : MessageBase // TypeDefIndex: 3141
	{
		// Fields
		public NetworkInstanceId netId; // 0x10
		public bool authority; // 0x14
	
		// Constructors
		public ClientAuthorityMessage(); // 0x00AA9C98-0x00AA9CA0
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AA9BD8-0x00AA9C28
		public override void Serialize(NetworkWriter writer); // 0x00AA9C28-0x00AA9C68
	}

	internal class OverrideTransformMessage : MessageBase // TypeDefIndex: 3142
	{
		// Fields
		public NetworkInstanceId netId; // 0x10
		public byte[] payload; // 0x18
		public bool teleport; // 0x20
		public int time; // 0x24
	
		// Constructors
		public OverrideTransformMessage(); // 0x00AAA4A0-0x00AAA4A8
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AAA3D8-0x00AAA448
		public override void Serialize(NetworkWriter writer); // 0x00AAA448-0x00AAA4A0
	}

	internal class AnimationMessage : MessageBase // TypeDefIndex: 3143
	{
		// Fields
		public NetworkInstanceId netId; // 0x10
		public int stateHash; // 0x14
		public float normalizedTime; // 0x18
		public byte[] parameters; // 0x20
	
		// Constructors
		public AnimationMessage(); // 0x00AA9734-0x00AA973C
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AA9500-0x00AA956C
		public override void Serialize(NetworkWriter writer); // 0x00AA956C-0x00AA95D8
	}

	internal class AnimationParametersMessage : MessageBase // TypeDefIndex: 3144
	{
		// Fields
		public NetworkInstanceId netId; // 0x10
		public byte[] parameters; // 0x18
	
		// Constructors
		public AnimationParametersMessage(); // 0x00AA97DC-0x00AA97E4
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AA973C-0x00AA9788
		public override void Serialize(NetworkWriter writer); // 0x00AA9788-0x00AA97DC
	}

	internal class AnimationTriggerMessage : MessageBase // TypeDefIndex: 3145
	{
		// Fields
		public NetworkInstanceId netId; // 0x10
		public int hash; // 0x14
	
		// Constructors
		public AnimationTriggerMessage(); // 0x00AA9870-0x00AA9878
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AA97E4-0x00AA9830
		public override void Serialize(NetworkWriter writer); // 0x00AA9830-0x00AA9870
	}

	internal class LobbyReadyToBeginMessage : MessageBase // TypeDefIndex: 3146
	{
		// Fields
		public byte slotId; // 0x10
		public bool readyState; // 0x11
	
		// Constructors
		public LobbyReadyToBeginMessage(); // 0x00AA9E30-0x00AA9E38
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AA9DA0-0x00AA9DF0
		public override void Serialize(NetworkWriter writer); // 0x00AA9DF0-0x00AA9E30
	}

	internal struct CRCMessageEntry // TypeDefIndex: 3147
	{
		// Fields
		public string name; // 0x00
		public byte channel; // 0x08
	}

	internal class CRCMessage : MessageBase // TypeDefIndex: 3148
	{
		// Fields
		public CRCMessageEntry[] scripts; // 0x10
	
		// Constructors
		public CRCMessage(); // 0x00AA7DDC-0x00AA7DE4
	
		// Methods
		public override void Deserialize(NetworkReader reader); // 0x00AA9878-0x00AA9968
		public override void Serialize(NetworkWriter writer); // 0x00AA9968-0x00AA9A24
	}
}

[ExecuteInEditMode] // 0x005116C4-0x00511738
[RequireComponent] // 0x005116C4-0x00511738
public class MeshLightmapSetting : MonoBehaviour // TypeDefIndex: 3150
{
	// Fields
	public int lightmapIndex; // 0x18
	public Vector4 lightmapScaleOffset; // 0x1C

	// Constructors
	public MeshLightmapSetting(); // 0x00FB6984-0x00FB698C

	// Methods
	public void SaveSettings(); // 0x00FB67F8-0x00FB687C
	public void LoadSettings(); // 0x00FB687C-0x00FB68FC
	private void Start(); // 0x00FB68FC-0x00FB6984
}

[ExecuteInEditMode] // 0x00511738-0x00511748
public class SerializedLightmapSetting : MonoBehaviour // TypeDefIndex: 3151
{
	// Fields
	public LightmapsMode mode; // 0x18

	// Constructors
	public SerializedLightmapSetting(); // 0x00FB6B94-0x00FB6B9C

	// Methods
	public void RefreshLightmapSettings(Texture2D[] lightmapFar, Texture2D[] lightmapNear); // 0x00FB698C-0x00FB6B94
}

namespace InAppPurchase.Internal
{
	public class AndroidPurchaseProviderCallbackListener : MonoBehaviour // TypeDefIndex: 3152
	{
		// Fields
		public int[] pass; // 0x18
		public string data; // 0x20
		public string result; // 0x28
	
		// Constructors
		public AndroidPurchaseProviderCallbackListener(); // 0x00FB6780-0x00FB67F8
	
		// Methods
		[ContextMenu] // 0x00511758-0x00511790
		public void From(); // 0x00FB6568-0x00FB6590
		[ContextMenu] // 0x00511790-0x005117C8
		public void To(); // 0x00FB6670-0x00FB6698
		private string To(string data); // 0x00FB6698-0x00FB6780
		private string From(string data); // 0x00FB6590-0x00FB6670
	}
}

[CompilerGenerated] // 0x00511748-0x00511758
internal sealed class _PrivateImplementationDetails_ // TypeDefIndex: 3153
{
	// Fields
	internal static readonly __StaticArrayInitTypeSize_132 BE25BA0BC18783B4969D1CCDE5564C4AE34E59A7; // 0x00 // Starts with: 03 00 00 00 01 00 00 00 - Metadata: 0x001F51CF

	// Nested types
	private struct __StaticArrayInitTypeSize_132 // TypeDefIndex: 3154
	{
	}
}

public class AddChar : MonoBehaviour // TypeDefIndex: 3156
{
	// Fields
	public SkinnedMeshRenderer[] childSkins; // 0x18
	public Transform parent; // 0x20

	// Constructors
	public AddChar(); // 0x0070B804-0x0070B80C

	// Methods
	[ContextMenu] // 0x0051CBA0-0x0051CBD8
	public void ResetBonesForAllchild(); // 0x0070B2D8-0x0070B354
	public void ResetSkinnedMeshBones(SkinnedMeshRenderer childSkin); // 0x0070B354-0x0070B4DC
	private Transform FindNameInChild(string name, Transform parentRoot); // 0x0070B4DC-0x0070B804
}

public class AchievementScrollView : ScrollViewRecycle<AchievementCell, int> // TypeDefIndex: 3157
{
	// Constructors
	public AchievementScrollView(); // 0x0070671C-0x0070676C

	// Methods
	protected override void RefreshUI(int cellIndex, int index); // 0x0070668C-0x0070671C
}

public class BattlePassManager // TypeDefIndex: 3158
{
	// Fields
	private static BattlePassManager instance; // 0x00
	private float packTime; // 0x10
	public DateTime startPackTime; // 0x18
	public DateTime endPackTime; // 0x20
	private static DateTime lastLocalTime; // 0x08
	public bool campaignInfoFromServer; // 0x28
	public string season; // 0x30
	public bool haveseason; // 0x38
	private List<BattlePassItemData> BattlePassData; // 0x40

	// Properties
	public static BattlePassManager Instance { get; } // 0x007183B4-0x00718430 
	public bool IsInBattlePass { get; } // 0x00719008-0x007191E8 

	// Nested types
	public class BattlePassItemData // TypeDefIndex: 3159
	{
		// Fields
		public int idx; // 0x10
		public int distance; // 0x14
		public RewardType Freereward; // 0x18
		public int FreerewardNum; // 0x1C

		// Constructors
		public BattlePassItemData(); // 0x00718D04-0x00718D14

		// Methods
		public void InitItemData(Dictionary<string, object> dict); // 0x00718D14-0x00718EEC
		public static RewardType GetRewardType(int val); // 0x007191F0-0x00719208
	}

	// Constructors
	public BattlePassManager(); // 0x00718430-0x007184B0

	// Methods
	public void RequestBattlePassInfo(); // 0x007184B0-0x007185DC
	private bool Analysis(string Data, bool server); // 0x007185DC-0x00718D04
	public BattlePassItemData GetBattlePassItemData(int idx); // 0x00718EEC-0x00719008
	[CompilerGenerated] // 0x0051CBD8-0x0051CBE8
	private void _RequestBattlePassInfo_b__10_0(string data); // 0x007191E8-0x007191F0
}

public class CollectionManage // TypeDefIndex: 3160
{
	// Fields
	private static CollectionManage instance; // 0x00
	private float packTime; // 0x10
	private static DateTime lastLocalTime; // 0x08
	public bool campaignInfoFromServer; // 0x14
	public const string CampaignKey = "CampaignKey"; // Metadata: 0x001F5253
	public List<Pack> packs; // 0x18
	public bool getInfoFromServer; // 0x20

	// Properties
	public static CollectionManage Instance { get; } // 0x0066CFCC-0x0066D04C 

	// Nested types
	public class Good // TypeDefIndex: 3161
	{
		// Fields
		public int type; // 0x10
		public int id; // 0x14
		public int number; // 0x18

		// Constructors
		public Good(); // 0x00674474-0x0067447C
	}

	[Serializable]
	public class Pack // TypeDefIndex: 3162
	{
		// Fields
		public string title; // 0x10
		public DateTime startPackTime; // 0x18
		public DateTime endPackTime; // 0x20
		public int cgId; // 0x28
		public string version; // 0x30
		public List<Good> goods; // 0x38

		// Constructors
		public Pack(); // 0x0067446C-0x00674474

		// Methods
		public bool Check(); // 0x00672DF4-0x00672FF0
		public bool CheckGift(); // 0x00674754-0x00674878
	}

	// Constructors
	public CollectionManage(); // 0x006731E8-0x006731F0

	// Methods
	public void RequestCollectionInfo(); // 0x006731F0-0x0067331C
	private bool Analysis(string data, bool server); // 0x0067331C-0x006736BC
	private bool Analysis(IDictionary<string, object> dict); // 0x006736BC-0x0067446C
	public Pack GetCurCollection(); // 0x0066D04C-0x0066D13C
	public Pack GetCurGift(); // 0x0067447C-0x0067456C
	public Pack GetCurDoubleCoinGift(); // 0x0067456C-0x0067465C
	public Pack GetCurRoleCoinGift(); // 0x0067465C-0x0067474C
	[CompilerGenerated] // 0x0051CBE8-0x0051CBF8
	private void _RequestCollectionInfo_b__9_0(string data); // 0x0067474C-0x00674754
}

public class Constants // TypeDefIndex: 3163
{
	// Fields
	public const string serverWeekRankTag = "allrank"; // Metadata: 0x001F5262
	public const string serverVIPRankTag = "viprank"; // Metadata: 0x001F526D
	public const string pid = "2699"; // Metadata: 0x001F5278
	public const int topIndex_global = 100; // Metadata: 0x001F5280
	public const int topIndex_vip = 50; // Metadata: 0x001F5284
	public const string subscriptionKey = "subscription"; // Metadata: 0x001F5288
	public const string playerLevelKey = "playerLevel"; // Metadata: 0x001F5298
	public const string playerNameKey = "playerName"; // Metadata: 0x001F52A7
	public const string facebookIDKey = "facebookID"; // Metadata: 0x001F52B5
	public const string countryCodeKey = "countryCode"; // Metadata: 0x001F52C3
	public const string rankInfo = "AURun"; // Metadata: 0x001F52D2
	public const string pictureUrlKey = "pictureUrl"; // Metadata: 0x001F52DB
	public const int pullInterval = 60; // Metadata: 0x001F52E9
	public const int pullingDuration = 30; // Metadata: 0x001F52ED

	// Constructors
	public Constants(); // 0x00674B7C-0x00674B84
}

public class DateManager // TypeDefIndex: 3164
{
	// Constructors
	public DateManager(); // 0x0067A310-0x0067A318

	// Methods
	public static int TheDayAfterTomorrow(); // 0x00679834-0x006798EC
	public static int NextSaturday(); // 0x006798EC-0x00679A44
	public static double CalcDeltaTime(long timeL); // 0x00679A44-0x00679A58
	public static double CalcDeltaTime(DateTime now); // 0x00679AB8-0x00679BBC
	public static string CalcWeekRankString(long time); // 0x00679BBC-0x00679BD0
	public static string CalcWeekRankString(DateTime now); // 0x00679BD0-0x00679D98
	private static int CalcWeekOfYear(DateTime date, bool fremdness); // 0x00679D98-0x00679E64
	public static DateTime TranslateServeTimeStampToDateTime(long timeStamp); // 0x00679A58-0x00679AB8
	public static int TranslateDateTimeToTimeStamp(DateTime time); // 0x00679E64-0x00679F18
	private static TimeSpan CalcRemainTimeToWeekend(DateTime date, bool fremdness); // 0x00679F18-0x0067A058
	public static TimeSpan CalcRemainTimeToWeekend(long ticks, float time); // 0x0067A058-0x0067A0A0
	public static string TopRunRemainTimeToString(long ticks, float time); // 0x0067A0A0-0x0067A310
}

public class FadeShowFadeHide : MonoBehaviour // TypeDefIndex: 3165
{
	// Fields
	public float duration; // 0x18
	private Material material; // 0x20
	private float from; // 0x28
	private float to; // 0x2C
	private bool willFadeOut; // 0x30
	private Animation playFadeShow; // 0x38
	public float AlphaFade; // 0x40
	public AnimationClip Clip; // 0x48

	// Properties
	public Material Material { get; } // 0x00686480-0x0068656C 

	// Nested types
	[CompilerGenerated] // 0x00513F50-0x00513F60
	private sealed class _Hide_C_d__11 : IEnumerator<object> // TypeDefIndex: 3166
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public FadeShowFadeHide __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00524E48-0x00524E58 */ get; } // 0x00686824-0x0068682C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00524E68-0x00524E78 */ get; } // 0x00686890-0x00686898 

		// Constructors
		[DebuggerHidden] // 0x00524E28-0x00524E38
		public _Hide_C_d__11(int __1__state); // 0x00686664-0x00686690

		// Methods
		[DebuggerHidden] // 0x00524E38-0x00524E48
		void IDisposable.Dispose(); // 0x006866AC-0x006866B0
		private bool MoveNext(); // 0x006866B0-0x00686824
		[DebuggerHidden] // 0x00524E58-0x00524E68
		void IEnumerator.Reset(); // 0x0068682C-0x00686890
	}

	// Constructors
	public FadeShowFadeHide(); // 0x00686690-0x006866AC

	// Methods
	private void Start(); // 0x006862C0-0x00686408
	public void Show(); // 0x00686408-0x00686480
	public void Hide(); // 0x0068656C-0x006865F0
	[IteratorStateMachine] // 0x0051CBF8-0x0051CC5C
	private IEnumerator Hide_C(); // 0x006865F0-0x00686664
}

public class IvyApp // TypeDefIndex: 3167
{
	// Fields
	private string customUrl; // 0x10
	private string url; // 0x18
	private static IvyApp _instance; // 0x00

	// Properties
	public static IvyApp Instance { get; } // 0x006EC800-0x006EC87C 

	// Nested types
	public enum RequestCommand // TypeDefIndex: 3168
	{
		Statistics = 0,
		Redcode = 1,
		Level = 2,
		Other = 3,
		addResponse = 4,
		Email = 5,
		MultiEmail = 6,
		DeleteEmail = 7,
		DeleteMultiEmail = 8
	}

	// Constructors
	public IvyApp(); // 0x006EC87C-0x006EC8E4

	// Methods
	private string GetUrl(RequestCommand command); // 0x006EC8E4-0x006EC9D4
	public void ResPonse(string data, Action<string> listener); // 0x006EC9D4-0x006ECB68
	public void Recode(string recode, Action<string> listener); // 0x006ECD5C-0x006ECEAC
	public void Statistics(string event1, string event2, string event3, int version, int number = 0 /* Metadata: 0x001F52F1 */, Action<string> listener = null); // 0x006ECEAC-0x006ED0F0
	public void Level(int level_id, int durtime, Action<string> listener = null); // 0x006ED184-0x006ED350
	public string get_uft8(string unicodeString); // 0x006ED0F0-0x006ED184
	public void FisrtStatic(string key); // 0x006ED350-0x006ED3E4
	public void PlayerRunMeters(int meters); // 0x006ED3E4-0x006ED5AC
	public bool DurationInt(int min, int Max, int val); // 0x006ED5AC-0x006ED5C4
	public void Email(int lid, Action<string> listener); // 0x006ED5C4-0x006ED70C
	public void DeleteEmail(string id, Action<string> listener); // 0x006ED70C-0x006ED844
	public void MultiEmail(int lid, Action<string> listener); // 0x006ED844-0x006ED98C
	public void DeleteMultiEmail(string id, Action<string> listener); // 0x006ED98C-0x006EDAC4
}

public class IvyHttpHelper : MonoBehaviour // TypeDefIndex: 3169
{
	// Fields
	private static IvyHttpHelper _Instance; // 0x00

	// Properties
	public static IvyHttpHelper Instance { get; } // 0x006ECB68-0x006ECC44 

	// Nested types
	private class PostRequestData // TypeDefIndex: 3170
	{
		// Fields
		public string url; // 0x10
		public Dictionary<string, string> post; // 0x18
		public Action<string> callback; // 0x20

		// Constructors
		public PostRequestData(string url, Dictionary<string, string> post, Action<string> callback); // 0x006EDB94-0x006EDBD4
	}

	[CompilerGenerated] // 0x00513F60-0x00513F70
	private sealed class _PostRequest_d__5 : IEnumerator<object> // TypeDefIndex: 3171
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public PostRequestData data; // 0x20
		private WWW _www_5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00524E98-0x00524EA8 */ get; } // 0x006EE50C-0x006EE514 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00524EB8-0x00524EC8 */ get; } // 0x006EE578-0x006EE580 

		// Constructors
		[DebuggerHidden] // 0x00524E78-0x00524E88
		public _PostRequest_d__5(int __1__state); // 0x006EDC48-0x006EDC74

		// Methods
		[DebuggerHidden] // 0x00524E88-0x00524E98
		void IDisposable.Dispose(); // 0x006EE270-0x006EE274
		private bool MoveNext(); // 0x006EE274-0x006EE50C
		[DebuggerHidden] // 0x00524EA8-0x00524EB8
		void IEnumerator.Reset(); // 0x006EE514-0x006EE578
	}

	[CompilerGenerated] // 0x00513F70-0x00513F80
	private sealed class _GetRequest_C_d__7 : IEnumerator<object> // TypeDefIndex: 3172
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public PostRequestData data; // 0x20
		private WWW _www_5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00524EE8-0x00524EF8 */ get; } // 0x006EE1FC-0x006EE204 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00524F08-0x00524F18 */ get; } // 0x006EE268-0x006EE270 

		// Constructors
		[DebuggerHidden] // 0x00524EC8-0x00524ED8
		public _GetRequest_C_d__7(int __1__state); // 0x006EDE00-0x006EDE2C

		// Methods
		[DebuggerHidden] // 0x00524ED8-0x00524EE8
		void IDisposable.Dispose(); // 0x006EDEB8-0x006EDEBC
		private bool MoveNext(); // 0x006EDEBC-0x006EE1FC
		[DebuggerHidden] // 0x00524EF8-0x00524F08
		void IEnumerator.Reset(); // 0x006EE204-0x006EE268
	}

	// Constructors
	public IvyHttpHelper(); // 0x006EDEB0-0x006EDEB8

	// Methods
	private void Awake(); // 0x006EDAC4-0x006EDB94
	public Coroutine MakeRequest(string url, Action<string> callback, Dictionary<string, string> param); // 0x006ECC44-0x006ECD5C
	[IteratorStateMachine] // 0x0051CC5C-0x0051CCC0
	private IEnumerator PostRequest(PostRequestData data); // 0x006EDBD4-0x006EDC48
	public Coroutine GetRequest(string url, Action<string> callback, Dictionary<string, string> param); // 0x006EDC74-0x006EDD8C
	[IteratorStateMachine] // 0x0051CCC0-0x0051CD24
	private IEnumerator GetRequest_C(PostRequestData data); // 0x006EDD8C-0x006EDE00
	public float GetProgress(WWW www); // 0x006EDE2C-0x006EDEB0
}

[AddComponentMenu] // 0x00511824-0x0051185C
public class EquipItems : MonoBehaviour // TypeDefIndex: 3173
{
	// Fields
	public int[] itemIDs; // 0x18

	// Constructors
	public EquipItems(); // 0x006835D8-0x006835E0

	// Methods
	private void Start(); // 0x00683338-0x006835D8
}

[AddComponentMenu] // 0x0051185C-0x00511894
public class EquipRandomItem : MonoBehaviour // TypeDefIndex: 3174
{
	// Fields
	public InvEquipment equipment; // 0x18

	// Constructors
	public EquipRandomItem(); // 0x00683790-0x00683798

	// Methods
	private void OnClick(); // 0x006835E0-0x00683790
}

[AddComponentMenu] // 0x00511894-0x0051191C
[RequireComponent] // 0x00511894-0x0051191C
public class UICursor : MonoBehaviour // TypeDefIndex: 3175
{
	// Fields
	public static UICursor instance; // 0x00
	public Camera uiCamera; // 0x18
	private Transform mTrans; // 0x20
	private UISprite mSprite; // 0x28
	private UIAtlas mAtlas; // 0x30
	private string mSpriteName; // 0x38

	// Constructors
	public UICursor(); // 0x00829EBC-0x00829EC4

	// Methods
	private void Awake(); // 0x0082965C-0x008296B0
	private void OnDestroy(); // 0x008296B0-0x00829700
	private void Start(); // 0x00829700-0x00829868
	private void Update(); // 0x00829868-0x00829C50
	public static void Clear(); // 0x00829C50-0x00829D48
	public static void Set(UIAtlas atlas, string sprite); // 0x00829D48-0x00829EBC
}

[AddComponentMenu] // 0x0051191C-0x00511954
public class UIEquipmentSlot : UIItemSlot // TypeDefIndex: 3176
{
	// Fields
	public InvEquipment equipment; // 0x58
	public InvBaseItem.Slot slot; // 0x60

	// Properties
	protected override InvGameItem observedItem { get; } // 0x00833140-0x008331DC 

	// Constructors
	public UIEquipmentSlot(); // 0x0083328C-0x00833294

	// Methods
	protected override InvGameItem Replace(InvGameItem item); // 0x008331DC-0x0083328C
}

public abstract class UIItemSlot : MonoBehaviour // TypeDefIndex: 3177
{
	// Fields
	public UISprite icon; // 0x18
	public UIWidget background; // 0x20
	public UILabel label; // 0x28
	public AudioClip grabSound; // 0x30
	public AudioClip placeSound; // 0x38
	public AudioClip errorSound; // 0x40
	private InvGameItem mItem; // 0x48
	private string mText; // 0x50
	private static InvGameItem mDraggedItem; // 0x00

	// Properties
	protected abstract InvGameItem observedItem { get; }

	// Constructors
	protected UIItemSlot(); // 0x0084437C-0x008443D4

	// Methods
	protected abstract InvGameItem Replace(InvGameItem item);
	private void OnTooltip(bool show); // 0x00843868-0x00843D88
	private void OnClick(); // 0x00843D88-0x00843E64
	private void OnDrag(Vector2 delta); // 0x00844010-0x00844118
	private void OnDrop(GameObject go); // 0x00843E64-0x00843F48
	private void UpdateCursor(); // 0x00843F48-0x00844010
	private void Update(); // 0x00844118-0x0084437C
}

[AddComponentMenu] // 0x00511954-0x0051198C
public class UIItemStorage : MonoBehaviour // TypeDefIndex: 3178
{
	// Fields
	public int maxItemCount; // 0x18
	public int maxRows; // 0x1C
	public int maxColumns; // 0x20
	public GameObject template; // 0x28
	public UIWidget background; // 0x30
	public int spacing; // 0x38
	public int padding; // 0x3C
	private List<InvGameItem> mItems; // 0x40

	// Properties
	public List<InvGameItem> items { get; } // 0x008443D4-0x00844450 

	// Constructors
	public UIItemStorage(); // 0x0084489C-0x0084492C

	// Methods
	public InvGameItem GetItem(int slot); // 0x00844450-0x008444F0
	public InvGameItem Replace(int slot, InvGameItem item); // 0x008444F0-0x008445A8
	private void Start(); // 0x008445A8-0x0084489C
}

[AddComponentMenu] // 0x0051198C-0x005119C4
public class UIStorageSlot : UIItemSlot // TypeDefIndex: 3179
{
	// Fields
	public UIItemStorage storage; // 0x58
	public int slot; // 0x60

	// Properties
	protected override InvGameItem observedItem { get; } // 0x00809D64-0x00809E00 

	// Constructors
	public UIStorageSlot(); // 0x00809EB0-0x00809EB8

	// Methods
	protected override InvGameItem Replace(InvGameItem item); // 0x00809E00-0x00809EB0
}

[AddComponentMenu] // 0x005119C4-0x005119FC
public class InvAttachmentPoint : MonoBehaviour // TypeDefIndex: 3180
{
	// Fields
	public InvBaseItem.Slot slot; // 0x18
	private GameObject mPrefab; // 0x20
	private GameObject mChild; // 0x28

	// Constructors
	public InvAttachmentPoint(); // 0x006E98BC-0x006E98C4

	// Methods
	public GameObject Attach(GameObject prefab); // 0x006E9638-0x006E98BC
}

[Serializable]
public class InvBaseItem // TypeDefIndex: 3181
{
	// Fields
	public int id16; // 0x10
	public string name; // 0x18
	public string description; // 0x20
	public Slot slot; // 0x28
	public int minItemLevel; // 0x2C
	public int maxItemLevel; // 0x30
	public List<InvStat> stats; // 0x38
	public GameObject attachment; // 0x40
	public Color color; // 0x48
	public UIAtlas iconAtlas; // 0x58
	public string iconName; // 0x60

	// Nested types
	public enum Slot // TypeDefIndex: 3182
	{
		None = 0,
		Weapon = 1,
		Shield = 2,
		Body = 3,
		Shoulders = 4,
		Bracers = 5,
		Boots = 6,
		Trinket = 7,
		_LastDoNotUse = 8
	}

	// Constructors
	public InvBaseItem(); // 0x006E98C4-0x006E9960
}

[AddComponentMenu] // 0x005119FC-0x00511A48
[ExecuteInEditMode] // 0x005119FC-0x00511A48
public class InvDatabase : MonoBehaviour // TypeDefIndex: 3183
{
	// Fields
	private static InvDatabase[] mList; // 0x00
	private static bool mIsDirty; // 0x08
	public int databaseID; // 0x18
	public List<InvBaseItem> items; // 0x20
	public UIAtlas iconAtlas; // 0x28

	// Properties
	public static InvDatabase[] list { get; } // 0x006E9960-0x006E9A4C 

	// Constructors
	public InvDatabase(); // 0x006EA01C-0x006EA08C
	static InvDatabase(); // 0x006EA08C-0x006EB0E0

	// Methods
	private void OnEnable(); // 0x006E9A4C-0x006E9AB8
	private void OnDisable(); // 0x006E9AB8-0x006E9B24
	private InvBaseItem GetItem(int id16); // 0x006E9B24-0x006E9BE0
	private static InvDatabase GetDatabase(int dbID); // 0x006E9BE0-0x006E9CCC
	public static InvBaseItem FindByID(int id32); // 0x006E9CCC-0x006E9D94
	public static InvBaseItem FindByName(string exact); // 0x006E9D94-0x006E9EF8
	public static int FindItemID(InvBaseItem item); // 0x006E9EF8-0x006EA01C
}

[AddComponentMenu] // 0x00511A48-0x00511A80
public class InvEquipment : MonoBehaviour // TypeDefIndex: 3184
{
	// Fields
	private InvGameItem[] mItems; // 0x18
	private InvAttachmentPoint[] mAttachments; // 0x20

	// Properties
	public InvGameItem[] equippedItems { get; } // 0x006EB0E0-0x006EB0E8 

	// Constructors
	public InvEquipment(); // 0x006EB794-0x006EB79C

	// Methods
	public InvGameItem Replace(InvBaseItem.Slot slot, InvGameItem item); // 0x006EB0E8-0x006EB3B8
	public InvGameItem Equip(InvGameItem item); // 0x006EB500-0x006EB5E8
	public InvGameItem Unequip(InvGameItem item); // 0x006EB5E8-0x006EB634
	public InvGameItem Unequip(InvBaseItem.Slot slot); // 0x006EB634-0x006EB63C
	public bool HasEquipped(InvGameItem item); // 0x006EB63C-0x006EB6A0
	public bool HasEquipped(InvBaseItem.Slot slot); // 0x006EB6A0-0x006EB748
	public InvGameItem GetItem(InvBaseItem.Slot slot); // 0x006EB748-0x006EB794
}

[Serializable]
public class InvGameItem // TypeDefIndex: 3185
{
	// Fields
	[SerializeField] // 0x00514DF0-0x00514E00
	private int mBaseItemID; // 0x10
	public Quality quality; // 0x14
	public int itemLevel; // 0x18
	private InvBaseItem mBaseItem; // 0x20

	// Properties
	public int baseItemID { get; } // 0x006EB79C-0x006EB7A4 
	public InvBaseItem baseItem { get; } // 0x006EB3B8-0x006EB434 
	public string name { get; } // 0x006EB434-0x006EB500 
	public float statMultiplier { get; } // 0x006EB7A4-0x006EB858 
	public Color color { get; } // 0x006EB858-0x006EB968 

	// Nested types
	public enum Quality // TypeDefIndex: 3186
	{
		Broken = 0,
		Cursed = 1,
		Damaged = 2,
		Worn = 3,
		Sturdy = 4,
		Polished = 5,
		Improved = 6,
		Crafted = 7,
		Superior = 8,
		Enchanted = 9,
		Epic = 10,
		Legendary = 11,
		_LastDoNotUse = 12
	}

	// Constructors
	public InvGameItem(int id); // 0x006EB968-0x006EB9A0
	public InvGameItem(int id, InvBaseItem bi); // 0x006EB9A0-0x006EB9E8

	// Methods
	public List<InvStat> CalculateStats(); // 0x006EB9E8-0x006EBC4C
}

[Serializable]
public class InvStat // TypeDefIndex: 3187
{
	// Fields
	public Identifier id; // 0x10
	public Modifier modifier; // 0x14
	public int amount; // 0x18

	// Nested types
	public enum Identifier // TypeDefIndex: 3188
	{
		Strength = 0,
		Constitution = 1,
		Agility = 2,
		Intelligence = 3,
		Damage = 4,
		Crit = 5,
		Armor = 6,
		Health = 7,
		Mana = 8,
		Other = 9
	}

	public enum Modifier // TypeDefIndex: 3189
	{
		Added = 0,
		Percent = 1
	}

	// Constructors
	public InvStat(); // 0x006EBC4C-0x006EBC54

	// Methods
	public static string GetName(Identifier i); // 0x006EBC54-0x006EBCDC
	public static string GetDescription(Identifier i); // 0x006EBCDC-0x006EBDB0
	public static int CompareArmor(InvStat a, InvStat b); // 0x006EBDB0-0x006EBE6C
	public static int CompareWeapon(InvStat a, InvStat b); // 0x006EBE6C-0x006EBF28
}

[AddComponentMenu] // 0x00511A80-0x00511B08
[RequireComponent] // 0x00511A80-0x00511B08
public class ChatInput : MonoBehaviour // TypeDefIndex: 3190
{
	// Fields
	public UITextList textList; // 0x18
	public bool fillWithDummyData; // 0x20
	private UIInput mInput; // 0x28

	// Constructors
	public ChatInput(); // 0x00669558-0x00669560

	// Methods
	private void Start(); // 0x00669200-0x0066943C
	public void OnSubmit(); // 0x0066943C-0x00669558
}

[RequireComponent] // 0x00511B08-0x00511B6C
public class DownloadTexture : MonoBehaviour // TypeDefIndex: 3191
{
	// Fields
	public string url; // 0x18
	public bool pixelPerfect; // 0x20
	private Texture2D mTex; // 0x28

	// Nested types
	[CompilerGenerated] // 0x00513F80-0x00513F90
	private sealed class _Start_d__3 : IEnumerator<object> // TypeDefIndex: 3192
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public DownloadTexture __4__this; // 0x20
		private WWW _www_5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00524F38-0x00524F48 */ get; } // 0x0067D6E8-0x0067D6F0 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00524F58-0x00524F68 */ get; } // 0x0067D754-0x0067E75C 

		// Constructors
		[DebuggerHidden] // 0x00524F18-0x00524F28
		public _Start_d__3(int __1__state); // 0x0067D440-0x0067D46C

		// Methods
		[DebuggerHidden] // 0x00524F28-0x00524F38
		void IDisposable.Dispose(); // 0x0067D580-0x0067D584
		private bool MoveNext(); // 0x0067D584-0x0067D6E8
		[DebuggerHidden] // 0x00524F48-0x00524F58
		void IEnumerator.Reset(); // 0x0067D6F0-0x0067D754
	}

	// Constructors
	public DownloadTexture(); // 0x0067D520-0x0067D580

	// Methods
	[IteratorStateMachine] // 0x0051CD24-0x0051CD88
	private IEnumerator Start(); // 0x0067D3CC-0x0067D440
	private void OnDestroy(); // 0x0067D46C-0x0067D520
}

[AddComponentMenu] // 0x00511B6C-0x00511BF4
[RequireComponent] // 0x00511B6C-0x00511BF4
public class EnvelopContent : MonoBehaviour // TypeDefIndex: 3193
{
	// Fields
	public Transform targetRoot; // 0x18
	public int padLeft; // 0x20
	public int padRight; // 0x24
	public int padBottom; // 0x28
	public int padTop; // 0x2C
	private bool mStarted; // 0x30

	// Constructors
	public EnvelopContent(); // 0x00683310-0x00683318

	// Methods
	private void Start(); // 0x00683084-0x00683090
	private void OnEnable(); // 0x00683300-0x00683310
	[ContextMenu] // 0x0051CD88-0x0051CDC0
	public void Execute(); // 0x00683090-0x00683300
}

[AddComponentMenu] // 0x00511BF4-0x00511C2C
public class ExampleDragDropItem : UIDragDropItem // TypeDefIndex: 3194
{
	// Fields
	public GameObject prefab; // 0x88

	// Constructors
	public ExampleDragDropItem(); // 0x00686248-0x006862B0

	// Methods
	protected override void OnDragDropRelease(GameObject surface); // 0x00685F50-0x00686248
}

[AddComponentMenu] // 0x00511C2C-0x00511C64
public class ExampleDragDropSurface : MonoBehaviour // TypeDefIndex: 3195
{
	// Fields
	public bool rotatePlacedObject; // 0x18

	// Constructors
	public ExampleDragDropSurface(); // 0x006862B0-0x006862B8
}

public class LagPosition : MonoBehaviour // TypeDefIndex: 3196
{
	// Fields
	public Vector3 speed; // 0x18
	public bool ignoreTimeScale; // 0x24
	private Transform mTrans; // 0x28
	private Vector3 mRelative; // 0x30
	private Vector3 mAbsolute; // 0x3C
	private bool mStarted; // 0x48

	// Constructors
	public LagPosition(); // 0x006F1894-0x006F18F4

	// Methods
	public void OnRepositionEnd(); // 0x006F1548-0x006F1554
	private void Interpolate(float delta); // 0x006F1554-0x006F17C4
	private void Awake(); // 0x006F17C4-0x006F17EC
	private void OnEnable(); // 0x006F17EC-0x006F17FC
	private void Start(); // 0x006F184C-0x006F1858
	public void ResetPosition(); // 0x006F17FC-0x006F184C
	private void Update(); // 0x006F1858-0x006F1894
}

[AddComponentMenu] // 0x00511C64-0x00511C9C
public class LagRotation : MonoBehaviour // TypeDefIndex: 3197
{
	// Fields
	public float speed; // 0x18
	public bool ignoreTimeScale; // 0x1C
	private Transform mTrans; // 0x20
	private Quaternion mRelative; // 0x28
	private Quaternion mAbsolute; // 0x38

	// Constructors
	public LagRotation(); // 0x006F1B90-0x006F1BA0

	// Methods
	public void OnRepositionEnd(); // 0x006F18F4-0x006F1900
	private void Interpolate(float delta); // 0x006F1900-0x006F1AFC
	private void Start(); // 0x006F1AFC-0x006F1B54
	private void Update(); // 0x006F1B54-0x006F1B90
}

[AddComponentMenu] // 0x00511C9C-0x00511CD4
public class LoadLevelOnClick : MonoBehaviour // TypeDefIndex: 3198
{
	// Fields
	public string levelName; // 0x18

	// Constructors
	public LoadLevelOnClick(); // 0x006F4FF4-0x006F4FFC

	// Methods
	private void OnClick(); // 0x006F4FB4-0x006F4FF4
}

[AddComponentMenu] // 0x00511CD4-0x00511D0C
public class LookAtTarget : MonoBehaviour // TypeDefIndex: 3199
{
	// Fields
	public int level; // 0x18
	public Transform target; // 0x20
	public float speed; // 0x28
	private Transform mTrans; // 0x30

	// Constructors
	public LookAtTarget(); // 0x006F9B64-0x006F9B74

	// Methods
	private void Start(); // 0x006F9910-0x006F9938
	private void LateUpdate(); // 0x006F9938-0x006F9B64
}

public class OpenURLOnClick : MonoBehaviour // TypeDefIndex: 3200
{
	// Constructors
	public OpenURLOnClick(); // 0x006A241C-0x006A2424

	// Methods
	private void OnClick(); // 0x006A2320-0x006A241C
}

[AddComponentMenu] // 0x00511D0C-0x00511D44
public class PanWithMouse : MonoBehaviour // TypeDefIndex: 3201
{
	// Fields
	public Vector2 degrees; // 0x18
	public float range; // 0x20
	private Transform mTrans; // 0x28
	private Quaternion mStart; // 0x30
	private Vector2 mRot; // 0x40

	// Constructors
	public PanWithMouse(); // 0x006A5330-0x006A53D8

	// Methods
	private void Start(); // 0x006A5084-0x006A50C4
	private void Update(); // 0x006A50C4-0x006A5330
}

[AddComponentMenu] // 0x00511D44-0x00511D7C
public class PlayIdleAnimations : MonoBehaviour // TypeDefIndex: 3202
{
	// Fields
	private Animation mAnim; // 0x18
	private AnimationClip mIdle; // 0x20
	private List<AnimationClip> mBreaks; // 0x28
	private float mNextBreak; // 0x30
	private int mLastIndex; // 0x34

	// Constructors
	public PlayIdleAnimations(); // 0x006A7EBC-0x006A7F2C

	// Methods
	private void Start(); // 0x006A7860-0x006A7D30
	private void Update(); // 0x006A7D30-0x006A7EBC
}

[RequireComponent] // 0x00511D7C-0x00511DE0
public class SetColorPickerColor : MonoBehaviour // TypeDefIndex: 3203
{
	// Fields
	[NonSerialized]
	private UIWidget mWidget; // 0x18

	// Constructors
	public SetColorPickerColor(); // 0x006C52E8-0x006C52F0

	// Methods
	public void SetToCurrent(); // 0x006C51D4-0x006C52E8
}

[AddComponentMenu] // 0x00511DE0-0x00511E18
public class Spin : MonoBehaviour // TypeDefIndex: 3204
{
	// Fields
	public Vector3 rotationsPerSecond; // 0x18
	public bool ignoreTimeScale; // 0x24
	private Rigidbody mRb; // 0x28
	private Transform mTrans; // 0x30

	// Constructors
	public Spin(); // 0x00FBB220-0x00FBB284

	// Methods
	private void Start(); // 0x00FBAE44-0x00FBAEAC
	private void Update(); // 0x00FBAEAC-0x00FBAF50
	private void FixedUpdate(); // 0x00FBB190-0x00FBB220
	public void ApplyDelta(float delta); // 0x00FBAF50-0x00FBB190
}

[AddComponentMenu] // 0x00511E18-0x00511E50
public class SpinWithMouse : MonoBehaviour // TypeDefIndex: 3205
{
	// Fields
	public Transform target; // 0x18
	public float speed; // 0x20
	private Transform mTrans; // 0x28

	// Constructors
	public SpinWithMouse(); // 0x00FBB450-0x00FBB460

	// Methods
	private void Start(); // 0x00FBB284-0x00FBB2AC
	private void OnDrag(Vector2 delta); // 0x00FBB2AC-0x00FBB450
}

public class Tutorial5 : MonoBehaviour // TypeDefIndex: 3206
{
	// Constructors
	public Tutorial5(); // 0x007E3764-0x007E376C

	// Methods
	public void SetDurationToCurrentProgress(); // 0x007E3634-0x007E3764
}

[AddComponentMenu] // 0x00511E50-0x00511E88
public class UISliderColors : MonoBehaviour // TypeDefIndex: 3207
{
	// Fields
	public UISprite sprite; // 0x18
	public Color[] colors; // 0x20
	private UIProgressBar mBar; // 0x28
	private UIBasicSprite mSprite; // 0x30

	// Constructors
	public UISliderColors(); // 0x008055D8-0x008056A8

	// Methods
	private void Start(); // 0x008052C0-0x00805334
	private void Update(); // 0x00805334-0x00805540
}

[AddComponentMenu] // 0x00511E88-0x00511EC0
public class WindowAutoYaw : MonoBehaviour // TypeDefIndex: 3208
{
	// Fields
	public int updateOrder; // 0x18
	public Camera uiCamera; // 0x20
	public float yawAmount; // 0x28
	private Transform mTrans; // 0x30

	// Constructors
	public WindowAutoYaw(); // 0x00A99E38-0x00A99E48

	// Methods
	private void OnDisable(); // 0x00A99BC4-0x00A99C44
	private void OnEnable(); // 0x00A99C44-0x00A99D20
	private void Update(); // 0x00A99D20-0x00A99E38
}

[AddComponentMenu] // 0x00511EC0-0x00511EF8
public class WindowDragTilt : MonoBehaviour // TypeDefIndex: 3209
{
	// Fields
	public int updateOrder; // 0x18
	public float degrees; // 0x1C
	private Vector3 mLastPos; // 0x20
	private Transform mTrans; // 0x30
	private float mAngle; // 0x38

	// Constructors
	public WindowDragTilt(); // 0x00A99FEC-0x00A99FFC

	// Methods
	private void OnEnable(); // 0x00A99E48-0x00A99E88
	private void Update(); // 0x00A99E88-0x00A99FEC
}

[AddComponentMenu] // 0x00511EF8-0x00511F80
[RequireComponent] // 0x00511EF8-0x00511F80
public class LanguageSelection : MonoBehaviour // TypeDefIndex: 3210
{
	// Fields
	private UIPopupList mList; // 0x18

	// Nested types
	[Serializable]
	[CompilerGenerated] // 0x00513F90-0x00513FA0
	private sealed class __c // TypeDefIndex: 3211
	{
		// Fields
		public static readonly __c __9; // 0x00
		public static EventDelegate.Callback __9__2_0; // 0x08

		// Constructors
		static __c(); // 0x006F2094-0x006F20F8
		public __c(); // 0x006F20F8-0x006F2100

		// Methods
		internal void _Start_b__2_0(); // 0x006F2100-0x006F219C
	}

	// Constructors
	public LanguageSelection(); // 0x006F208C-0x006F2094

	// Methods
	private void Awake(); // 0x006F1BA0-0x006F1BFC
	private void Start(); // 0x006F1DB4-0x006F1EC4
	public void Refresh(); // 0x006F1BFC-0x006F1DB4
}

[AddComponentMenu] // 0x00511F80-0x00512008
[RequireComponent] // 0x00511F80-0x00512008
public class TypewriterEffect : MonoBehaviour // TypeDefIndex: 3212
{
	// Fields
	public static TypewriterEffect current; // 0x00
	public int charsPerSecond; // 0x18
	public float fadeInTime; // 0x1C
	public float delayOnPeriod; // 0x20
	public float delayOnNewLine; // 0x24
	public UIScrollView scrollView; // 0x28
	public bool keepFullDimensions; // 0x30
	public List<EventDelegate> onFinished; // 0x38
	private UILabel mLabel; // 0x40
	private string mFullText; // 0x48
	private int mCurrentOffset; // 0x50
	private float mNextChar; // 0x54
	private bool mReset; // 0x58
	private bool mActive; // 0x59
	private BetterList<FadeEntry> mFade; // 0x60

	// Properties
	public bool isActive { get; } // 0x007E742C-0x007E7434 

	// Nested types
	private struct FadeEntry // TypeDefIndex: 3213
	{
		// Fields
		public int index; // 0x00
		public string text; // 0x08
		public float alpha; // 0x10
	}

	// Constructors
	public TypewriterEffect(); // 0x007E7CEC-0x007E7DA4

	// Methods
	public void ResetToBeginning(); // 0x007E7434-0x007E7464
	public void Finish(); // 0x007E7464-0x007E759C
	private void OnEnable(); // 0x007E7CDC-0x007E7CE8
	private void OnDisable(); // 0x007E7CE8-0x007E7CEC
	private void Update(); // 0x007E759C-0x007E7CDC
}

[AddComponentMenu] // 0x00512008-0x00512040
public class UIButton : UIButtonColor // TypeDefIndex: 3214
{
	// Fields
	public static UIButton current; // 0x00
	public bool dragHighlight; // 0x84
	public string hoverSprite; // 0x88
	public string pressedSprite; // 0x90
	public string disabledSprite; // 0x98
	public Sprite hoverSprite2D; // 0xA0
	public Sprite pressedSprite2D; // 0xA8
	public Sprite disabledSprite2D; // 0xB0
	public bool pixelSnap; // 0xB8
	public List<EventDelegate> onClick; // 0xC0
	[NonSerialized]
	private UISprite mSprite; // 0xC8
	[NonSerialized]
	private UI2DSprite mSprite2D; // 0xD0
	[NonSerialized]
	private string mNormalSprite; // 0xD8
	[NonSerialized]
	private Sprite mNormalSprite2D; // 0xE0

	// Properties
	public override bool isEnabled { get; set; } // 0x007F30F8-0x007F3234 0x007F3234-0x007F3488
	public string normalSprite { get; set; } // 0x007F3488-0x007F34C0 0x007F34C0-0x007F3600
	public Sprite normalSprite2D { get; set; } // 0x007F36F8-0x007F3730 0x007F3730-0x007F3880

	// Constructors
	public UIButton(); // 0x007F471C-0x007F4788

	// Methods
	protected override void OnInit(); // 0x007F39AC-0x007F3B24
	protected override void OnEnable(); // 0x007F3DB4-0x007F3ECC
	protected override void OnDragOver(); // 0x007F4074-0x007F4170
	protected override void OnDragOut(); // 0x007F4238-0x007F4334
	protected virtual void OnClick(); // 0x007F43FC-0x007F44E8
	public override void SetState(State state, bool immediate); // 0x007F44E8-0x007F46A8
	protected void SetSprite(string sp); // 0x007F3600-0x007F36F8
	protected void SetSprite(Sprite sp); // 0x007F3880-0x007F39AC
}

[AddComponentMenu] // 0x00512040-0x00512078
public class UIButtonActivate : MonoBehaviour // TypeDefIndex: 3215
{
	// Fields
	public GameObject target; // 0x18
	public bool state; // 0x20

	// Constructors
	public UIButtonActivate(); // 0x007F4924-0x007F4934

	// Methods
	private void OnClick(); // 0x007F4868-0x007F4924
}

[AddComponentMenu] // 0x00512078-0x005120C4
[ExecuteInEditMode] // 0x00512078-0x005120C4
public class UIButtonColor : UIWidgetContainer // TypeDefIndex: 3216
{
	// Fields
	public GameObject tweenTarget; // 0x18
	public Color hover; // 0x20
	public Color pressed; // 0x30
	public Color disabledColor; // 0x40
	public float duration; // 0x50
	[NonSerialized]
	protected Color mStartingColor; // 0x54
	[NonSerialized]
	protected Color mDefaultColor; // 0x64
	[NonSerialized]
	protected bool mInitDone; // 0x74
	[NonSerialized]
	protected UIWidget mWidget; // 0x78
	[NonSerialized]
	protected State mState; // 0x80

	// Properties
	public State state { get; set; } // 0x007F4BF4-0x007F4BFC 0x007F4BFC-0x007F4C10
	public Color defaultColor { get; set; } // 0x007F4C10-0x007F4C4C 0x007F4C4C-0x007F4CC8
	public virtual bool isEnabled { get; set; } // 0x007F4CC8-0x007F4CD0 0x007F4CD0-0x007F4CDC

	// Nested types
	public enum State // TypeDefIndex: 3217
	{
		Normal = 0,
		Hover = 1,
		Pressed = 2,
		Disabled = 3
	}

	// Constructors
	public UIButtonColor(); // 0x007F4788-0x007F4868

	// Methods
	public void ResetDefaultColor(); // 0x007F4CDC-0x007F4CE8
	public void CacheDefaultColor(); // 0x007F4CE8-0x007F4D00
	private void Start(); // 0x007F4D00-0x007F4D6C
	protected virtual void OnInit(); // 0x007F3B24-0x007F3DB4
	protected virtual void OnEnable(); // 0x007F4D6C-0x007F4F58
	protected virtual void OnDisable(); // 0x007F4FF0-0x007F511C
	protected virtual void OnHover(bool isOver); // 0x007F511C-0x007F51F4
	protected virtual void OnPress(bool isPressed); // 0x007F51F4-0x007F5448
	protected virtual void OnDragOver(); // 0x007F4170-0x007F4238
	protected virtual void OnDragOut(); // 0x007F4334-0x007F43FC
	public virtual void SetState(State state, bool instant); // 0x007F46A8-0x007F471C
	public void UpdateColor(bool instant); // 0x007F54E8-0x007F5644
}

[AddComponentMenu] // 0x005120C4-0x00512110
[ExecuteInEditMode] // 0x005120C4-0x00512110
public class UIButtonKeys : UIKeyNavigation // TypeDefIndex: 3218
{
	// Fields
	public UIButtonKeys selectOnClick; // 0x58
	public UIButtonKeys selectOnUp; // 0x60
	public UIButtonKeys selectOnDown; // 0x68
	public UIButtonKeys selectOnLeft; // 0x70
	public UIButtonKeys selectOnRight; // 0x78

	// Constructors
	public UIButtonKeys(); // 0x007F5BA0-0x007F5C08

	// Methods
	protected override void OnEnable(); // 0x007F57E4-0x007F580C
	public void Upgrade(); // 0x007F580C-0x007F5BA0
}

[AddComponentMenu] // 0x00512110-0x00512148
public class UIButtonMessage : MonoBehaviour // TypeDefIndex: 3219
{
	// Fields
	public GameObject target; // 0x18
	public string functionName; // 0x20
	public Trigger trigger; // 0x28
	public bool includeChildren; // 0x2C
	private bool mStarted; // 0x2D

	// Nested types
	public enum Trigger // TypeDefIndex: 3220
	{
		OnClick = 0,
		OnMouseOver = 1,
		OnMouseOut = 2,
		OnPress = 3,
		OnRelease = 4,
		OnDoubleClick = 5
	}

	// Constructors
	public UIButtonMessage(); // 0x007F601C-0x007F6024

	// Methods
	private void Start(); // 0x007F5C08-0x007F5C14
	private void OnEnable(); // 0x007F5C14-0x007F5CAC
	private void OnHover(bool isOver); // 0x007F5CAC-0x007F5D00
	private void OnPress(bool isPressed); // 0x007F5EA0-0x007F5EF4
	private void OnSelect(bool isSelected); // 0x007F5EF4-0x007F5F98
	private void OnClick(); // 0x007F5F98-0x007F5FD8
	private void OnDoubleClick(); // 0x007F5FD8-0x007F601C
	private void Send(); // 0x007F5D00-0x007F5EA0
}

[AddComponentMenu] // 0x00512148-0x00512180
public class UIButtonOffset : MonoBehaviour // TypeDefIndex: 3221
{
	// Fields
	public Transform tweenTarget; // 0x18
	public Vector3 hover; // 0x20
	public Vector3 pressed; // 0x2C
	public float duration; // 0x38
	[NonSerialized]
	private Vector3 mPos; // 0x3C
	[NonSerialized]
	private bool mStarted; // 0x48
	[NonSerialized]
	private bool mPressed; // 0x49

	// Constructors
	public UIButtonOffset(); // 0x007F6738-0x007F67F0

	// Methods
	private void Start(); // 0x007F6024-0x007F60E0
	private void OnEnable(); // 0x007F60E0-0x007F6178
	private void OnDisable(); // 0x007F62A0-0x007F63B0
	private void OnPress(bool isPressed); // 0x007F63B0-0x007F6540
	private void OnHover(bool isOver); // 0x007F6178-0x007F62A0
	private void OnDragOver(); // 0x007F6540-0x007F6644
	private void OnDragOut(); // 0x007F6644-0x007F6694
	private void OnSelect(bool isSelected); // 0x007F6694-0x007F6738
}

[AddComponentMenu] // 0x00512180-0x005121B8
public class UIButtonRotation : MonoBehaviour // TypeDefIndex: 3222
{
	// Fields
	public Transform tweenTarget; // 0x18
	public Vector3 hover; // 0x20
	public Vector3 pressed; // 0x2C
	public float duration; // 0x38
	private Quaternion mRot; // 0x3C
	private bool mStarted; // 0x4C

	// Constructors
	public UIButtonRotation(); // 0x007F78BC-0x007F7950

	// Methods
	private void Start(); // 0x007F72B8-0x007F7374
	private void OnEnable(); // 0x007F7374-0x007F740C
	private void OnDisable(); // 0x007F755C-0x007F766C
	private void OnPress(bool isPressed); // 0x007F766C-0x007F7818
	private void OnHover(bool isOver); // 0x007F740C-0x007F755C
	private void OnSelect(bool isSelected); // 0x007F7818-0x007F78BC
}

[AddComponentMenu] // 0x005121B8-0x005121F0
public class UIButtonScale : MonoBehaviour // TypeDefIndex: 3223
{
	// Fields
	public Transform tweenTarget; // 0x18
	public Vector3 hover; // 0x20
	public Vector3 pressed; // 0x2C
	public float duration; // 0x38
	private Vector3 mScale; // 0x3C
	private bool mStarted; // 0x48

	// Constructors
	public UIButtonScale(); // 0x007F7F08-0x007F7FA8

	// Methods
	private void Start(); // 0x007F7950-0x007F7A0C
	private void OnEnable(); // 0x007F7A0C-0x007F7AA4
	private void OnDisable(); // 0x007F7BCC-0x007F7CDC
	private void OnPress(bool isPressed); // 0x007F7CDC-0x007F7E64
	private void OnHover(bool isOver); // 0x007F7AA4-0x007F7BCC
	private void OnSelect(bool isSelected); // 0x007F7E64-0x007F7F08
}

[AddComponentMenu] // 0x005121F0-0x00512228
public class UICenterOnChild : MonoBehaviour // TypeDefIndex: 3224
{
	// Fields
	public float springStrength; // 0x18
	public float nextPageThreshold; // 0x1C
	public SpringPanel.OnFinished onFinished; // 0x20
	public OnCenterCallback onCenter; // 0x28
	private UIScrollView mScrollView; // 0x30
	private GameObject mCenteredObject; // 0x38

	// Properties
	public GameObject centeredObject { get; } // 0x00822620-0x00822628 

	// Nested types
	public delegate void OnCenterCallback(GameObject centeredObject); // TypeDefIndex: 3225; 0x008237B0-0x00823B64

	// Constructors
	public UICenterOnChild(); // 0x00823D00-0x00823D10

	// Methods
	private void Start(); // 0x00822628-0x0082262C
	private void OnEnable(); // 0x0082331C-0x008233B4
	private void OnDisable(); // 0x008233B4-0x0082343C
	private void OnDragFinished(); // 0x0082343C-0x00823474
	private void OnValidate(); // 0x00823474-0x008234E8
	[ContextMenu] // 0x0051CDC0-0x0051CDF8
	public void Recenter(); // 0x0082262C-0x0082331C
	private void CenterOn(Transform target, Vector3 panelCenter); // 0x008234E8-0x008237B0
	public void CenterOn(Transform target); // 0x00823B64-0x00823D00
}

[AddComponentMenu] // 0x00512228-0x00512260
public class UICenterOnClick : MonoBehaviour // TypeDefIndex: 3226
{
	// Constructors
	public UICenterOnClick(); // 0x00823FFC-0x00824004

	// Methods
	private void OnClick(); // 0x00823D50-0x00823FFC
}

[AddComponentMenu] // 0x00512260-0x005122AC
[ExecuteInEditMode] // 0x00512260-0x005122AC
public class UIDragCamera : MonoBehaviour // TypeDefIndex: 3227
{
	// Fields
	public UIDraggableCamera draggableCamera; // 0x18

	// Constructors
	public UIDragCamera(); // 0x0082ADB8-0x0082ADC0

	// Methods
	private void Awake(); // 0x0082A4A8-0x0082A56C
	private void OnPress(bool isPressed); // 0x0082A56C-0x0082A664
	private void OnDrag(Vector2 delta); // 0x0082A7E4-0x0082A8E4
	private void OnScroll(float delta); // 0x0082ABB8-0x0082ACB0
}

[AddComponentMenu] // 0x005122AC-0x005122E4
public class UIDragDropContainer : MonoBehaviour // TypeDefIndex: 3228
{
	// Fields
	public Transform reparentTarget; // 0x18

	// Constructors
	public UIDragDropContainer(); // 0x0082AE48-0x0082AE50

	// Methods
	protected virtual void Start(); // 0x0082ADC0-0x0082AE48
}

[AddComponentMenu] // 0x005122E4-0x0051231C
public class UIDragDropItem : MonoBehaviour // TypeDefIndex: 3229
{
	// Fields
	public Restriction restriction; // 0x18
	public bool cloneOnDrag; // 0x1C
	[HideInInspector] // 0x00514E00-0x00514E10
	public float pressAndHoldDelay; // 0x20
	private bool interactable; // 0x24
	[NonSerialized]
	protected Transform mTrans; // 0x28
	[NonSerialized]
	protected Transform mParent; // 0x30
	[NonSerialized]
	protected Collider mCollider; // 0x38
	[NonSerialized]
	protected Collider2D mCollider2D; // 0x40
	[NonSerialized]
	protected UIButton mButton; // 0x48
	[NonSerialized]
	protected UIRoot mRoot; // 0x50
	[NonSerialized]
	protected UIGrid mGrid; // 0x58
	[NonSerialized]
	protected UITable mTable; // 0x60
	[NonSerialized]
	protected float mDragStartTime; // 0x68
	[NonSerialized]
	protected UIDragScrollView mDragScrollView; // 0x70
	[NonSerialized]
	protected bool mPressed; // 0x78
	[NonSerialized]
	protected bool mDragging; // 0x79
	[NonSerialized]
	protected UICamera.MouseOrTouch mTouch; // 0x80
	public static List<UIDragDropItem> draggedItems; // 0x00

	// Nested types
	public enum Restriction // TypeDefIndex: 3230
	{
		None = 0,
		Horizontal = 1,
		Vertical = 2,
		PressAndHold = 3
	}

	[CompilerGenerated] // 0x00513FA0-0x00513FB0
	private sealed class _EnableDragScrollView_d__34 : IEnumerator<object> // TypeDefIndex: 3231
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public UIDragDropItem __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00524F88-0x00524F98 */ get; } // 0x0082C5BC-0x0082C5C4 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00524FA8-0x00524FB8 */ get; } // 0x0082C628-0x0082C630 

		// Constructors
		[DebuggerHidden] // 0x00524F68-0x00524F78
		public _EnableDragScrollView_d__34(int __1__state); // 0x0082C414-0x0082C440

		// Methods
		[DebuggerHidden] // 0x00524F78-0x00524F88
		void IDisposable.Dispose(); // 0x0082C4CC-0x0082C4D0
		private bool MoveNext(); // 0x0082C4D0-0x0082C5BC
		[DebuggerHidden] // 0x00524F98-0x00524FA8
		void IEnumerator.Reset(); // 0x0082C5C4-0x0082C628
	}

	// Constructors
	public UIDragDropItem(); // 0x0082C440-0x0082C458
	static UIDragDropItem(); // 0x0082C458-0x0082C4CC

	// Methods
	protected virtual void Awake(); // 0x0082AE50-0x0082AEEC
	protected virtual void OnEnable(); // 0x0082AEEC-0x0082AEF0
	protected virtual void OnDisable(); // 0x0082AEF0-0x0082AF8C
	protected virtual void Start(); // 0x0082AFAC-0x0082B01C
	protected virtual void OnPress(bool isPressed); // 0x0082B01C-0x0082B154
	protected virtual void Update(); // 0x0082B154-0x0082B1C4
	protected virtual void OnDragStart(); // 0x0082B1C4-0x0082B324
	public virtual void StartDragging(); // 0x0082B324-0x0082B72C
	protected virtual void OnDrag(Vector2 delta); // 0x0082B72C-0x0082B858
	protected virtual void OnDragEnd(); // 0x0082B858-0x0082B93C
	public void StopDragging(GameObject go); // 0x0082AF8C-0x0082AFAC
	protected virtual void OnDragDropStart(); // 0x0082B93C-0x0082BDC8
	protected virtual void OnDragDropMove(Vector2 delta); // 0x0082BDC8-0x0082BED4
	protected virtual void OnDragDropRelease(GameObject surface); // 0x0082BED4-0x0082C31C
	protected virtual void OnDragDropEnd(); // 0x0082C390-0x0082C414
	[IteratorStateMachine] // 0x0051CDF8-0x0051CE5C
	protected IEnumerator EnableDragScrollView(); // 0x0082C31C-0x0082C390
}

[AddComponentMenu] // 0x0051231C-0x00512354
public class UIDragDropRoot : MonoBehaviour // TypeDefIndex: 3232
{
	// Fields
	public static Transform root; // 0x00

	// Constructors
	public UIDragDropRoot(); // 0x0082C740-0x0082C748

	// Methods
	private void OnEnable(); // 0x0082C630-0x0082C690
	private void OnDisable(); // 0x0082C690-0x0082C740
}

[AddComponentMenu] // 0x00512354-0x005123DC
[RequireComponent] // 0x00512354-0x005123DC
public class UIDraggableCamera : MonoBehaviour // TypeDefIndex: 3233
{
	// Fields
	public Transform rootForBounds; // 0x18
	public Vector2 scale; // 0x20
	public float scrollWheelFactor; // 0x28
	public UIDragObject.DragEffect dragEffect; // 0x2C
	public bool smoothDragStart; // 0x30
	public float momentumAmount; // 0x34
	private Camera mCam; // 0x38
	private Transform mTrans; // 0x40
	private bool mPressed; // 0x48
	private Vector2 mMomentum; // 0x4C
	private Bounds mBounds; // 0x54
	private float mScroll; // 0x6C
	private UIRoot mRoot; // 0x70
	private bool mDragStarted; // 0x78

	// Properties
	public Vector2 currentMomentum { get; set; } // 0x0082EC04-0x0082EC0C 0x0082EC0C-0x0082EC14

	// Constructors
	public UIDraggableCamera(); // 0x0082F634-0x0082F6CC

	// Methods
	private void Start(); // 0x0082EC14-0x0082EDA8
	private Vector3 CalculateConstrainOffset(); // 0x0082EDA8-0x0082F0E0
	public bool ConstrainToBounds(bool immediate); // 0x0082F0E0-0x0082F304
	public void Press(bool isPressed); // 0x0082A664-0x0082A7E4
	public void Drag(Vector2 delta); // 0x0082A8E4-0x0082ABB8
	public void Scroll(float delta); // 0x0082ACB0-0x0082ADB8
	private void Update(); // 0x0082F304-0x0082F634
}

[AddComponentMenu] // 0x005123DC-0x00512428
[ExecuteInEditMode] // 0x005123DC-0x00512428
public class UIDragObject : MonoBehaviour // TypeDefIndex: 3234
{
	// Fields
	public Transform target; // 0x18
	public UIPanel panelRegion; // 0x20
	public Vector3 scrollMomentum; // 0x28
	public bool restrictWithinPanel; // 0x34
	public UIRect contentRect; // 0x38
	public DragEffect dragEffect; // 0x40
	public float momentumAmount; // 0x44
	[SerializeField] // 0x00514E10-0x00514E20
	protected Vector3 scale; // 0x48
	[HideInInspector] // 0x00514E20-0x00514E58
	[SerializeField] // 0x00514E20-0x00514E58
	private float scrollWheelFactor; // 0x54
	private Plane mPlane; // 0x58
	private Vector3 mTargetPos; // 0x68
	private Vector3 mLastPos; // 0x74
	private Vector3 mMomentum; // 0x80
	private Vector3 mScroll; // 0x8C
	private Bounds mBounds; // 0x98
	private int mTouchID; // 0xB0
	private bool mStarted; // 0xB4
	private bool mPressed; // 0xB5

	// Properties
	public Vector3 dragMovement { get; set; } // 0x0082C748-0x0082C754 0x0082C754-0x0082C760

	// Nested types
	public enum DragEffect // TypeDefIndex: 3235
	{
		None = 0,
		Momentum = 1,
		MomentumAndSpring = 2
	}

	// Constructors
	public UIDragObject(); // 0x0082DF9C-0x0082E07C

	// Methods
	private void OnEnable(); // 0x0082C760-0x0082C94C
	private void OnDisable(); // 0x0082C94C-0x0082C954
	private void FindPanel(); // 0x0082C954-0x0082CA64
	private void UpdateBounds(); // 0x0082CA64-0x0082CC94
	private void OnPress(bool pressed); // 0x0082CC94-0x0082D0DC
	private void OnDrag(Vector2 delta); // 0x0082D370-0x0082D868
	private void Move(Vector3 worldDelta); // 0x0082D868-0x0082DBB4
	private void LateUpdate(); // 0x0082DBB4-0x0082DE6C
	public void CancelMovement(); // 0x0082D0DC-0x0082D2B4
	public void CancelSpring(); // 0x0082D2B4-0x0082D370
	private void OnScroll(float delta); // 0x0082DE6C-0x0082DF9C
}

[AddComponentMenu] // 0x00512428-0x00512460
public class UIDragResize : MonoBehaviour // TypeDefIndex: 3236
{
	// Fields
	public UIWidget target; // 0x18
	public UIWidget.Pivot pivot; // 0x20
	public int minWidth; // 0x24
	public int minHeight; // 0x28
	public int maxWidth; // 0x2C
	public int maxHeight; // 0x30
	private bool updateAnchors; // 0x34
	private Plane mPlane; // 0x38
	private Vector3 mRayPos; // 0x48
	private Vector3 mLocalPos; // 0x54
	private int mWidth; // 0x60
	private int mHeight; // 0x64
	private bool mDragging; // 0x68

	// Constructors
	public UIDragResize(); // 0x0082E56C-0x0082E58C

	// Methods
	private void OnDragStart(); // 0x0082E07C-0x0082E258
	private void OnDrag(Vector2 delta); // 0x0082E258-0x0082E564
	private void OnDragEnd(); // 0x0082E564-0x0082E56C
}

[AddComponentMenu] // 0x00512460-0x00512498
public class UIDragScrollView : MonoBehaviour // TypeDefIndex: 3237
{
	// Fields
	public UIScrollView scrollView; // 0x18
	[HideInInspector] // 0x00514E58-0x00514E90
	[SerializeField] // 0x00514E58-0x00514E90
	private UIScrollView draggablePanel; // 0x20
	private Transform mTrans; // 0x28
	private UIScrollView mScroll; // 0x30
	private bool mAutoFind; // 0x38
	private bool mStarted; // 0x39

	// Constructors
	public UIDragScrollView(); // 0x0082EBFC-0x0082EC04

	// Methods
	private void OnEnable(); // 0x0082E58C-0x0082E6A8
	private void Start(); // 0x0082E7E8-0x0082E7F4
	private void FindScrollView(); // 0x0082E6A8-0x0082E7E8
	private void OnPress(bool pressed); // 0x0082E7F4-0x0082E98C
	private void OnDrag(Vector2 delta); // 0x0082E98C-0x0082EA4C
	private void OnScroll(float delta); // 0x0082EA4C-0x0082EB20
	public void OnPan(Vector2 delta); // 0x0082EB20-0x0082EBFC
}

[AddComponentMenu] // 0x00512498-0x005124D0
public class UIEventTrigger : MonoBehaviour // TypeDefIndex: 3238
{
	// Fields
	public static UIEventTrigger current; // 0x00
	public List<EventDelegate> onHoverOver; // 0x18
	public List<EventDelegate> onHoverOut; // 0x20
	public List<EventDelegate> onPress; // 0x28
	public List<EventDelegate> onRelease; // 0x30
	public List<EventDelegate> onSelect; // 0x38
	public List<EventDelegate> onDeselect; // 0x40
	public List<EventDelegate> onClick; // 0x48
	public List<EventDelegate> onDoubleClick; // 0x50
	public List<EventDelegate> onDragStart; // 0x58
	public List<EventDelegate> onDragEnd; // 0x60
	public List<EventDelegate> onDragOver; // 0x68
	public List<EventDelegate> onDragOut; // 0x70
	public List<EventDelegate> onDrag; // 0x78

	// Properties
	public bool isColliderEnabled { get; } // 0x00835414-0x00835538 

	// Constructors
	public UIEventTrigger(); // 0x00835E50-0x00835FE8

	// Methods
	private void OnHover(bool isOver); // 0x00835538-0x00835638
	private void OnPress(bool pressed); // 0x00835638-0x00835738
	private void OnSelect(bool selected); // 0x00835738-0x00835838
	private void OnClick(); // 0x00835838-0x0083591C
	private void OnDoubleClick(); // 0x0083591C-0x00835A00
	private void OnDragStart(); // 0x00835A00-0x00835AD8
	private void OnDragEnd(); // 0x00835AD8-0x00835BB0
	private void OnDragOver(GameObject go); // 0x00835BB0-0x00835C94
	private void OnDragOut(GameObject go); // 0x00835C94-0x00835D78
	private void OnDrag(Vector2 delta); // 0x00835D78-0x00835E50
}

[AddComponentMenu] // 0x005124D0-0x00512508
public class UIForwardEvents : MonoBehaviour // TypeDefIndex: 3239
{
	// Fields
	public GameObject target; // 0x18
	public bool onHover; // 0x20
	public bool onPress; // 0x21
	public bool onClick; // 0x22
	public bool onDoubleClick; // 0x23
	public bool onSelect; // 0x24
	public bool onDrag; // 0x25
	public bool onDrop; // 0x26
	public bool onSubmit; // 0x27
	public bool onScroll; // 0x28

	// Constructors
	public UIForwardEvents(); // 0x0083AE1C-0x0083AE24

	// Methods
	private void OnHover(bool isOver); // 0x0083A71C-0x0083A7F4
	private void OnPress(bool pressed); // 0x0083A7F4-0x0083A8CC
	private void OnClick(); // 0x0083A8CC-0x0083A978
	private void OnDoubleClick(); // 0x0083A978-0x0083AA24
	private void OnSelect(bool selected); // 0x0083AA24-0x0083AAFC
	private void OnDrag(Vector2 delta); // 0x0083AAFC-0x0083ABDC
	private void OnDrop(GameObject go); // 0x0083ABDC-0x0083AC9C
	private void OnSubmit(); // 0x0083AC9C-0x0083AD48
	private void OnScroll(float delta); // 0x0083AD48-0x0083AE1C
}

[AddComponentMenu] // 0x00512508-0x00512540
public class UIGrid : UIWidgetContainer // TypeDefIndex: 3240
{
	// Fields
	public Arrangement arrangement; // 0x18
	public Sorting sorting; // 0x1C
	public UIWidget.Pivot pivot; // 0x20
	public int maxPerLine; // 0x24
	public float cellWidth; // 0x28
	public float cellHeight; // 0x2C
	public bool animateSmoothly; // 0x30
	public bool hideInactive; // 0x31
	public bool keepWithinPanel; // 0x32
	public OnReposition onReposition; // 0x38
	public Comparison<Transform> onCustomSort; // 0x40
	[HideInInspector] // 0x00514E90-0x00514EC8
	[SerializeField] // 0x00514E90-0x00514EC8
	private bool sorted; // 0x48
	protected bool mReposition; // 0x49
	protected UIPanel mPanel; // 0x50
	protected bool mInitDone; // 0x58

	// Properties
	public bool repositionNow { set; } // 0x0083CB30-0x0083CB4C

	// Nested types
	public delegate void OnReposition(); // TypeDefIndex: 3241; 0x0083D560-0x0083D77C

	public enum Arrangement // TypeDefIndex: 3242
	{
		Horizontal = 0,
		Vertical = 1,
		CellSnap = 2
	}

	public enum Sorting // TypeDefIndex: 3243
	{
		None = 0,
		Alphabetic = 1,
		Horizontal = 2,
		Vertical = 3,
		Custom = 4
	}

	// Constructors
	public UIGrid(); // 0x0083DD30-0x0083DD44

	// Methods
	public List<Transform> GetChildList(); // 0x0083CB4C-0x0083CDBC
	public Transform GetChild(int index); // 0x0083CDBC-0x0083CE48
	public int GetIndex(Transform trans); // 0x0083CE48-0x0083CEB4
	public void AddChild(Transform trans); // 0x0083CEB4-0x0083CEBC
	public void AddChild(Transform trans, bool sort); // 0x0083CEBC-0x0083CF8C
	public bool RemoveChild(Transform t); // 0x0083CF8C-0x0083D028
	protected virtual void Init(); // 0x0083D028-0x0083D0BC
	protected virtual void Start(); // 0x0083D0BC-0x0083D118
	protected virtual void Update(); // 0x0083D118-0x0083D14C
	private void OnValidate(); // 0x0083D14C-0x0083D1E0
	public static int SortByName(Transform a, Transform b); // 0x0083D1E0-0x0083D234
	public static int SortHorizontal(Transform a, Transform b); // 0x0083D234-0x0083D29C
	public static int SortVertical(Transform a, Transform b); // 0x0083D29C-0x0083D310
	protected virtual void Sort(List<Transform> list); // 0x0083D310-0x0083D314
	[ContextMenu] // 0x0051CE5C-0x0051CE94
	public virtual void Reposition(); // 0x0083D314-0x0083D444
	public void ConstrainWithinPanel(); // 0x0083D444-0x0083D560
	protected virtual void ResetPosition(List<Transform> list); // 0x0083D7F8-0x0083DD30
}

[AddComponentMenu] // 0x00512540-0x00512578
public class UIImageButton : MonoBehaviour // TypeDefIndex: 3244
{
	// Fields
	public UISprite target; // 0x18
	public string normalSprite; // 0x20
	public string hoverSprite; // 0x28
	public string pressedSprite; // 0x30
	public string disabledSprite; // 0x38
	public bool pixelSnap; // 0x40

	// Properties
	public bool isEnabled { get; set; } // 0x0083E750-0x0083E810 0x0083E810-0x0083E8FC

	// Constructors
	public UIImageButton(); // 0x0083ED3C-0x0083ED4C

	// Methods
	private void OnEnable(); // 0x0083E9EC-0x0083EA80
	private void OnValidate(); // 0x0083EA80-0x0083EB80
	private void UpdateImage(); // 0x0083E8FC-0x0083E9EC
	private void OnHover(bool isOver); // 0x0083EC74-0x0083ED2C
	private void OnPress(bool pressed); // 0x0083ED2C-0x0083ED3C
	private void SetSprite(string sprite); // 0x0083EB80-0x0083EC74
}

[AddComponentMenu] // 0x00512578-0x005125B0
public class UIKeyBinding : MonoBehaviour // TypeDefIndex: 3245
{
	// Fields
	private static List<UIKeyBinding> mList; // 0x00
	public KeyCode keyCode; // 0x18
	public Modifier modifier; // 0x1C
	public Action action; // 0x20
	[NonSerialized]
	private bool mIgnoreUp; // 0x24
	[NonSerialized]
	private bool mIsInput; // 0x25
	[NonSerialized]
	private bool mPress; // 0x26

	// Nested types
	public enum Action // TypeDefIndex: 3246
	{
		PressAndClick = 0,
		Select = 1,
		All = 2
	}

	public enum Modifier // TypeDefIndex: 3247
	{
		Any = 0,
		Shift = 1,
		Control = 2,
		Alt = 3,
		None = 4
	}

	// Constructors
	public UIKeyBinding(); // 0x00845484-0x0084548C
	static UIKeyBinding(); // 0x0084548C-0x00845500

	// Methods
	public static bool IsBound(KeyCode key); // 0x0084492C-0x00844A6C
	protected virtual void OnEnable(); // 0x00844A6C-0x00844AF0
	protected virtual void OnDisable(); // 0x00844AF0-0x00844B74
	protected virtual void Start(); // 0x00844B74-0x00844C98
	protected virtual void OnSubmit(); // 0x00844C98-0x00844D70
	protected virtual bool IsModifierActive(); // 0x00844D70-0x0084509C
	protected virtual void Update(); // 0x0084509C-0x00845340
	protected virtual void OnBindingPress(bool pressed); // 0x00845340-0x008453F8
	protected virtual void OnBindingClick(); // 0x008453F8-0x00845484
}

[AddComponentMenu] // 0x005125B0-0x005125E8
public class UIKeyNavigation : MonoBehaviour // TypeDefIndex: 3248
{
	// Fields
	public static BetterList<UIKeyNavigation> list; // 0x00
	public Constraint constraint; // 0x18
	public GameObject onUp; // 0x20
	public GameObject onDown; // 0x28
	public GameObject onLeft; // 0x30
	public GameObject onRight; // 0x38
	public GameObject onClick; // 0x40
	private GameObject onTab; // 0x48
	public bool startsSelected; // 0x50
	[NonSerialized]
	private bool mStarted; // 0x51

	// Properties
	public static UIKeyNavigation current { get; } // 0x00845500-0x008455C8 
	public bool isColliderEnabled { get; } // 0x008455C8-0x0084571C 

	// Nested types
	public enum Constraint // TypeDefIndex: 3249
	{
		None = 0,
		Vertical = 1,
		Horizontal = 2,
		Explicit = 3
	}

	// Constructors
	public UIKeyNavigation(); // 0x008468BC-0x008468C4
	static UIKeyNavigation(); // 0x008468C4-0x00846938

	// Methods
	protected virtual void OnEnable(); // 0x0084571C-0x008457BC
	private void Start(); // 0x008457BC-0x00845860
	protected virtual void OnDisable(); // 0x00845860-0x008458E4
	private static bool IsActive(GameObject go); // 0x008458E4-0x00845A44
	public GameObject GetLeft(); // 0x00845A44-0x00845B10
	public GameObject GetRight(); // 0x00845EA0-0x00845F6C
	public GameObject GetUp(); // 0x00845F6C-0x00846038
	public GameObject GetDown(); // 0x00846038-0x00846104
	public GameObject Get(Vector3 myDir, float x = 1f /* Metadata: 0x001F5425 */, float y = 1f /* Metadata: 0x001F5429 */); // 0x00845B10-0x00845EA0
	protected static Vector3 GetCenter(GameObject go); // 0x00846104-0x008463F8
	public virtual void OnNavigate(KeyCode key); // 0x008463F8-0x00846534
	public virtual void OnKey(KeyCode key); // 0x00846534-0x00846810
	protected virtual void OnClick(); // 0x00846810-0x008468BC
}

[AddComponentMenu] // 0x005125E8-0x00512634
[ExecuteInEditMode] // 0x005125E8-0x00512634
public class UIPlayAnimation : MonoBehaviour // TypeDefIndex: 3250
{
	// Fields
	public static UIPlayAnimation current; // 0x00
	public Animation target; // 0x18
	public Animator animator; // 0x20
	public string clipName; // 0x28
	public Trigger trigger; // 0x30
	public Direction playDirection; // 0x34
	public bool resetOnPlay; // 0x38
	public bool clearSelection; // 0x39
	public EnableCondition ifDisabledOnPlay; // 0x3C
	public DisableCondition disableWhenFinished; // 0x40
	public List<EventDelegate> onFinished; // 0x48
	[HideInInspector] // 0x00514EC8-0x00514F00
	[SerializeField] // 0x00514EC8-0x00514F00
	private GameObject eventReceiver; // 0x50
	[HideInInspector] // 0x00514F00-0x00514F38
	[SerializeField] // 0x00514F00-0x00514F38
	private string callWhenFinished; // 0x58
	private bool mStarted; // 0x60
	private bool mActivated; // 0x61
	private bool dragHighlight; // 0x62

	// Properties
	private bool dualState { get; } // 0x007578E8-0x007578FC 

	// Constructors
	public UIPlayAnimation(); // 0x00758C44-0x00758CBC
	static UIPlayAnimation(); // 0x00758CBC-0x00758CC0

	// Methods
	private void Awake(); // 0x007578FC-0x00757A14
	private void Start(); // 0x00757A14-0x00757BEC
	private void OnEnable(); // 0x00757BEC-0x00757E90
	private void OnDisable(); // 0x00757F08-0x00758018
	private void OnHover(bool isOver); // 0x00757E90-0x00757F08
	private void OnPress(bool isPressed); // 0x007582D4-0x007583D8
	private void OnClick(); // 0x007583D8-0x007584A0
	private void OnDoubleClick(); // 0x007584A0-0x0075856C
	private void OnSelect(bool isSelected); // 0x0075856C-0x007585E4
	private void OnToggle(); // 0x007585E4-0x00758784
	private void OnDragOver(); // 0x00758784-0x007588A0
	private void OnDragOut(); // 0x007588A0-0x00758998
	private void OnDrop(GameObject go); // 0x00758998-0x00758A9C
	public void Play(bool forward); // 0x00758A9C-0x00758AA8
	public void Play(bool forward, bool onlyIfDifferent); // 0x00758018-0x007582D4
	public void PlayForward(); // 0x00758AA8-0x00758AB4
	public void PlayReverse(); // 0x00758AB4-0x00758AC0
	private void OnFinished(); // 0x00758AC0-0x00758C44
}

[AddComponentMenu] // 0x00512634-0x0051266C
public class UIPlaySound : MonoBehaviour // TypeDefIndex: 3251
{
	// Fields
	public AudioClip audioClip; // 0x18
	public Trigger trigger; // 0x20
	[Range] // 0x00514F38-0x00514F50
	public float volume; // 0x24
	[Range] // 0x00514F50-0x00514F68
	public float pitch; // 0x28
	private bool mIsOver; // 0x2C

	// Properties
	private bool canPlay { get; } // 0x00758CC0-0x00758D90 

	// Nested types
	public enum Trigger // TypeDefIndex: 3252
	{
		OnClick = 0,
		OnMouseOver = 1,
		OnMouseOut = 2,
		OnPress = 3,
		OnRelease = 4,
		Custom = 5,
		OnEnable = 6,
		OnDisable = 7
	}

	// Constructors
	public UIPlaySound(); // 0x00759268-0x00759278

	// Methods
	private void OnEnable(); // 0x00758D90-0x00758E2C
	private void OnDisable(); // 0x00758E2C-0x00758EC8
	private void OnHover(bool isOver); // 0x00758EC8-0x00758FB4
	private void OnPress(bool isPressed); // 0x00758FB4-0x007590A0
	private void OnClick(); // 0x007590A0-0x00759144
	private void OnSelect(bool isSelected); // 0x00759144-0x007591E8
	public void Play(); // 0x007591E8-0x00759268
}

[AddComponentMenu] // 0x0051266C-0x005126B8
[ExecuteInEditMode] // 0x0051266C-0x005126B8
public class UIPlayTween : MonoBehaviour // TypeDefIndex: 3253
{
	// Fields
	public static UIPlayTween current; // 0x00
	public GameObject tweenTarget; // 0x18
	public int tweenGroup; // 0x20
	public Trigger trigger; // 0x24
	public Direction playDirection; // 0x28
	public bool resetOnPlay; // 0x2C
	public bool resetIfDisabled; // 0x2D
	public EnableCondition ifDisabledOnPlay; // 0x30
	public DisableCondition disableWhenFinished; // 0x34
	public bool includeChildren; // 0x38
	public List<EventDelegate> onFinished; // 0x40
	[HideInInspector] // 0x00514F68-0x00514FA0
	[SerializeField] // 0x00514F68-0x00514FA0
	private GameObject eventReceiver; // 0x48
	[HideInInspector] // 0x00514FA0-0x00514FD8
	[SerializeField] // 0x00514FA0-0x00514FD8
	private string callWhenFinished; // 0x50
	private UITweener[] mTweens; // 0x58
	private bool mStarted; // 0x60
	private int mActive; // 0x64
	private bool mActivated; // 0x68

	// Constructors
	public UIPlayTween(); // 0x0075A1C4-0x0075A23C

	// Methods
	private void Awake(); // 0x00759278-0x00759334
	private void Start(); // 0x00759334-0x007593C4
	private void OnEnable(); // 0x007593C4-0x00759668
	private void OnDisable(); // 0x007596E0-0x007597F0
	private void OnDragOver(); // 0x007597F0-0x00759808
	private void OnHover(bool isOver); // 0x00759668-0x007596E0
	private void OnDragOut(); // 0x00759BF8-0x00759C40
	private void OnPress(bool isPressed); // 0x00759C40-0x00759CB8
	private void OnClick(); // 0x00759CB8-0x00759CFC
	private void OnDoubleClick(); // 0x00759CFC-0x00759D44
	private void OnSelect(bool isSelected); // 0x00759D44-0x00759DBC
	private void OnToggle(); // 0x00759DBC-0x00759F4C
	private void Update(); // 0x00759F4C-0x0075A07C
	public void Play(bool forward); // 0x00759808-0x00759BF8
	private void OnFinished(); // 0x0075A07C-0x0075A1C4
}

[AddComponentMenu] // 0x005126B8-0x00512704
[ExecuteInEditMode] // 0x005126B8-0x00512704
public class UIPopupList : UIWidgetContainer // TypeDefIndex: 3254
{
	// Fields
	public static UIPopupList current; // 0x00
	private static GameObject mChild; // 0x08
	private static float mFadeOutComplete; // 0x10
	private const float animSpeed = 0.15f; // Metadata: 0x001F545D
	public UIAtlas atlas; // 0x18
	public UIFont bitmapFont; // 0x20
	public Font trueTypeFont; // 0x28
	public int fontSize; // 0x30
	public FontStyle fontStyle; // 0x34
	public string backgroundSprite; // 0x38
	public string highlightSprite; // 0x40
	public Position position; // 0x48
	public NGUIText.Alignment alignment; // 0x4C
	public List<string> items; // 0x50
	public List<object> itemData; // 0x58
	public Vector2 padding; // 0x60
	public Color textColor; // 0x68
	public Color backgroundColor; // 0x78
	public Color highlightColor; // 0x88
	public bool isAnimated; // 0x98
	public bool isLocalized; // 0x99
	public OpenOn openOn; // 0x9C
	public List<EventDelegate> onChange; // 0xA0
	[HideInInspector] // 0x00514FD8-0x00515010
	[SerializeField] // 0x00514FD8-0x00515010
	private string mSelectedItem; // 0xA8
	[NonSerialized]
	[HideInInspector] // 0x00515010-0x00515020
	private UIPanel mPanel; // 0xB0
	[NonSerialized]
	[HideInInspector] // 0x00515020-0x00515030
	private UISprite mBackground; // 0xB8
	[NonSerialized]
	[HideInInspector] // 0x00515030-0x00515040
	private UISprite mHighlight; // 0xC0
	[NonSerialized]
	[HideInInspector] // 0x00515040-0x00515050
	private UILabel mHighlightedLabel; // 0xC8
	[NonSerialized]
	[HideInInspector] // 0x00515050-0x00515060
	private List<UILabel> mLabelList; // 0xD0
	[NonSerialized]
	[HideInInspector] // 0x00515060-0x00515070
	private float mBgBorder; // 0xD8
	[NonSerialized]
	private GameObject mSelection; // 0xE0
	[NonSerialized]
	private int mOpenFrame; // 0xE8
	[HideInInspector] // 0x00515070-0x005150A8
	[SerializeField] // 0x00515070-0x005150A8
	private GameObject eventReceiver; // 0xF0
	[HideInInspector] // 0x005150A8-0x005150E0
	[SerializeField] // 0x005150A8-0x005150E0
	private string functionName; // 0xF8
	[HideInInspector] // 0x005150E0-0x00515118
	[SerializeField] // 0x005150E0-0x00515118
	private float textScale; // 0x100
	[HideInInspector] // 0x00515118-0x00515150
	[SerializeField] // 0x00515118-0x00515150
	private UIFont font; // 0x108
	[HideInInspector] // 0x00515150-0x00515188
	[SerializeField] // 0x00515150-0x00515188
	private UILabel textLabel; // 0x110
	private LegacyEvent mLegacyEvent; // 0x118
	[NonSerialized]
	private bool mExecuting; // 0x120
	private bool mUseDynamicFont; // 0x121
	private bool mTweening; // 0x122
	public GameObject source; // 0x128

	// Properties
	public UnityEngine.Object ambigiousFont { get; set; } // 0x0075A23C-0x0075A300 0x0075A300-0x0075A3A8
	[Obsolete] // 0x00528AB4-0x00528AEC
	public LegacyEvent onSelectionChange { get; set; } // 0x0075A3A8-0x0075A3B0 0x0075A3B0-0x0075A3B8
	public static bool isOpen { get; } // 0x0075A3B8-0x0075A500 
	public string value { get; set; } // 0x0075A500-0x0075A508 0x0075A508-0x0075A518
	public object data { get; } // 0x0075A6A8-0x0075A750 
	public bool isColliderEnabled { get; } // 0x0075A750-0x0075A874 
	[Obsolete] // 0x00528AEC-0x00528B24
	public string selection { get; set; } // 0x0075A874-0x0075A87C 0x0075A87C-0x0075A88C
	private bool isValid { get; } // 0x0075A88C-0x0075A948 
	private int activeFontSize { get; } // 0x0075A948-0x0075AA1C 
	private float activeFontScale { get; } // 0x0075AA1C-0x0075AB00 

	// Nested types
	public enum Position // TypeDefIndex: 3255
	{
		Auto = 0,
		Above = 1,
		Below = 2
	}

	public enum OpenOn // TypeDefIndex: 3256
	{
		ClickOrTap = 0,
		RightClick = 1,
		DoubleClick = 2,
		Manual = 3
	}

	public delegate void LegacyEvent(string val); // TypeDefIndex: 3257; 0x0075ADF4-0x0075B1A8

	[CompilerGenerated] // 0x00513FB0-0x00513FC0
	private sealed class _UpdateTweenPosition_d__80 : IEnumerator<object> // TypeDefIndex: 3258
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public UIPopupList __4__this; // 0x20
		private TweenPosition _tp_5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00524FD8-0x00524FE8 */ get; } // 0x0075E554-0x0075E55C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00524FF8-0x00525008 */ get; } // 0x0075E5C0-0x0075E5C8 

		// Constructors
		[DebuggerHidden] // 0x00524FB8-0x00524FC8
		public _UpdateTweenPosition_d__80(int __1__state); // 0x0075BB1C-0x0075BB48

		// Methods
		[DebuggerHidden] // 0x00524FC8-0x00524FD8
		void IDisposable.Dispose(); // 0x0075E3B4-0x0075E3B8
		private bool MoveNext(); // 0x0075E3B8-0x0075E554
		[DebuggerHidden] // 0x00524FE8-0x00524FF8
		void IEnumerator.Reset(); // 0x0075E55C-0x0075E5C0
	}

	[CompilerGenerated] // 0x00513FC0-0x00513FD0
	private sealed class _CloseIfUnselected_d__96 : IEnumerator<object> // TypeDefIndex: 3259
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public UIPopupList __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525028-0x00525038 */ get; } // 0x0075E340-0x0075E348 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525048-0x00525058 */ get; } // 0x0075E3AC-0x0075E3B4 

		// Constructors
		[DebuggerHidden] // 0x00525008-0x00525018
		public _CloseIfUnselected_d__96(int __1__state); // 0x0075E00C-0x0075E038

		// Methods
		[DebuggerHidden] // 0x00525018-0x00525028
		void IDisposable.Dispose(); // 0x0075E240-0x0075E244
		private bool MoveNext(); // 0x0075E244-0x0075E340
		[DebuggerHidden] // 0x00525038-0x00525048
		void IEnumerator.Reset(); // 0x0075E348-0x0075E3AC
	}

	// Constructors
	public UIPopupList(); // 0x0075E068-0x0075E23C
	static UIPopupList(); // 0x0075E23C-0x0075E240

	// Methods
	public void Clear(); // 0x0075AB00-0x0075AB70
	public void AddItem(string text); // 0x0075AB70-0x0075ABF4
	public void AddItem(string text, object data); // 0x0075ABF4-0x0075AC7C
	public void RemoveItem(string text); // 0x0075AC7C-0x0075AD38
	public void RemoveItemByData(object data); // 0x0075AD38-0x0075ADF4
	protected void TriggerCallbacks(); // 0x0075A518-0x0075A6A8
	private void OnEnable(); // 0x0075B1A8-0x0075B420
	private void OnValidate(); // 0x0075B420-0x0075B580
	private void Start(); // 0x0075B580-0x0075B6C4
	private void OnLocalize(); // 0x0075B6C4-0x0075B6D4
	private void Highlight(UILabel lbl, bool instant); // 0x0075B6D4-0x0075B854
	private Vector3 GetHighlightPosition(); // 0x0075B854-0x0075BA18
	[IteratorStateMachine] // 0x0051CE94-0x0051CEF8
	private IEnumerator UpdateTweenPosition(); // 0x0075BAA8-0x0075BB1C
	private void OnItemHover(GameObject go, bool isOver); // 0x0075BB48-0x0075BBD8
	private void OnItemPress(GameObject go, bool isPressed); // 0x0075BBD8-0x0075BD80
	private void Select(UILabel lbl, bool instant); // 0x0075BD80-0x0075BD88
	private void OnNavigate(KeyCode key); // 0x0075C168-0x0075C2E4
	private void OnKey(KeyCode key); // 0x0075C2E4-0x0075C42C
	private void OnDisable(); // 0x0075C438-0x0075C43C
	private void OnSelect(bool isSelected); // 0x0075C42C-0x0075C438
	public static void Close(); // 0x0075C43C-0x0075C518
	public void CloseSelf(); // 0x0075BD88-0x0075C168
	private void AnimateColor(UIWidget widget); // 0x0075C518-0x0075C5CC
	private void AnimatePosition(UIWidget widget, bool placeAbove, float bottom); // 0x0075C5CC-0x0075C6D4
	private void AnimateScale(UIWidget widget, bool placeAbove, float bottom); // 0x0075C6D4-0x0075C8C0
	private void Animate(UIWidget widget, bool placeAbove, float bottom); // 0x0075C8C0-0x0075C8FC
	private void OnClick(); // 0x0075C8FC-0x0075CA7C
	private void OnDoubleClick(); // 0x0075DF84-0x0075DF98
	[IteratorStateMachine] // 0x0051CEF8-0x0051CF5C
	private IEnumerator CloseIfUnselected(); // 0x0075DF98-0x0075E00C
	public void Show(); // 0x0075CA7C-0x0075DF84
}

[AddComponentMenu] // 0x00512704-0x00512750
[ExecuteInEditMode] // 0x00512704-0x00512750
public class UIProgressBar : UIWidgetContainer // TypeDefIndex: 3260
{
	// Fields
	public static UIProgressBar current; // 0x00
	public OnDragFinished onDragFinished; // 0x18
	public Transform thumb; // 0x20
	[HideInInspector] // 0x00515188-0x005151C0
	[SerializeField] // 0x00515188-0x005151C0
	protected UIWidget mBG; // 0x28
	[HideInInspector] // 0x005151C0-0x005151F8
	[SerializeField] // 0x005151C0-0x005151F8
	protected UIWidget mFG; // 0x30
	[HideInInspector] // 0x005151F8-0x00515230
	[SerializeField] // 0x005151F8-0x00515230
	protected float mValue; // 0x38
	[HideInInspector] // 0x00515230-0x00515268
	[SerializeField] // 0x00515230-0x00515268
	protected FillDirection mFill; // 0x3C
	protected Transform mTrans; // 0x40
	protected bool mIsDirty; // 0x48
	protected Camera mCam; // 0x50
	protected float mOffset; // 0x58
	public int numberOfSteps; // 0x5C
	public List<EventDelegate> onChange; // 0x60

	// Properties
	public Transform cachedTransform { get; } // 0x00760C4C-0x00760CDC 
	public Camera cachedCamera { get; } // 0x00760CDC-0x00760DB0 
	public UIWidget foregroundWidget { get; set; } // 0x00760DB0-0x00760DB8 0x00760DB8-0x00760E48
	public UIWidget backgroundWidget { get; set; } // 0x00760E48-0x00760E50 0x00760E50-0x00760EE0
	public FillDirection fillDirection { get; set; } // 0x00760EE0-0x00760EE8 0x00760EE8-0x00760F08
	public float value { get; set; } // 0x00760F08-0x00761014 0x00760848-0x007609B4
	public float alpha { get; set; } // 0x00761014-0x007610F4 0x007610F4-0x00761618
	protected bool isHorizontal { get; } // 0x00761618-0x00761628 
	protected bool isInverted { get; } // 0x00761628-0x0076163C 

	// Nested types
	public enum FillDirection // TypeDefIndex: 3261
	{
		LeftToRight = 0,
		RightToLeft = 1,
		BottomToTop = 2,
		TopToBottom = 3
	}

	public delegate void OnDragFinished(); // TypeDefIndex: 3262; 0x00762950-0x00762B6C

	// Constructors
	public UIProgressBar(); // 0x007628C8-0x00762940

	// Methods
	protected void Start(); // 0x0076163C-0x0076179C
	protected virtual void Upgrade(); // 0x0076179C-0x007617A0
	protected virtual void OnStart(); // 0x007617A0-0x007617A4
	protected void Update(); // 0x007617A4-0x007617BC
	protected void OnValidate(); // 0x007617BC-0x00761928
	protected float ScreenToValue(Vector2 screenPos); // 0x00761928-0x00761B9C
	protected virtual float LocalToValue(Vector2 localPos); // 0x00761B9C-0x00761D38
	public virtual void ForceUpdate(); // 0x00761D38-0x00762454
	protected void SetThumbPosition(Vector3 worldPos); // 0x00762454-0x00762784
	public virtual void OnPan(Vector2 delta); // 0x00762784-0x007628C8
}

[AddComponentMenu] // 0x00512750-0x00512788
public class UISavedOption : MonoBehaviour // TypeDefIndex: 3263
{
	// Fields
	public string keyName; // 0x18
	private UIPopupList mList; // 0x20
	private UIToggle mCheck; // 0x28
	private UIProgressBar mSlider; // 0x30

	// Properties
	private string key { get; } // 0x0076613C-0x007661C0 

	// Constructors
	public UISavedOption(); // 0x007669F8-0x00766A00

	// Methods
	private void Awake(); // 0x007661C0-0x00766248
	private void OnEnable(); // 0x00766248-0x007665E8
	private void OnDisable(); // 0x007665E8-0x00766850
	public void SaveSelection(); // 0x00766850-0x007668E4
	public void SaveState(); // 0x007668E4-0x0076697C
	public void SaveProgress(); // 0x0076697C-0x007669F8
}

[AddComponentMenu] // 0x00512788-0x005127D4
[ExecuteInEditMode] // 0x00512788-0x005127D4
public class UIScrollBar : UISlider // TypeDefIndex: 3264
{
	// Fields
	[HideInInspector] // 0x00515268-0x005152A0
	[SerializeField] // 0x00515268-0x005152A0
	protected float mSize; // 0x7C
	[HideInInspector] // 0x005152A0-0x005152D8
	[SerializeField] // 0x005152A0-0x005152D8
	private float mScroll; // 0x80
	[HideInInspector] // 0x005152D8-0x00515310
	[SerializeField] // 0x005152D8-0x00515310
	private Direction mDir; // 0x84

	// Properties
	[Obsolete] // 0x00528B24-0x00528B5C
	public float scrollValue { get; set; } // 0x0076BB18-0x0076BB1C 0x0076BB1C-0x0076BB20
	public float barSize { get; set; } // 0x0076BB20-0x0076BB28 0x0076BB28-0x0076BCA8

	// Nested types
	private enum Direction // TypeDefIndex: 3265
	{
		Horizontal = 0,
		Vertical = 1,
		Upgraded = 2
	}

	// Constructors
	public UIScrollBar(); // 0x0076C488-0x0076C4A0

	// Methods
	protected override void Upgrade(); // 0x0076BCA8-0x0076BCDC
	protected override void OnStart(); // 0x0076BCDC-0x0076BF4C
	protected override float LocalToValue(Vector2 localPos); // 0x0076BF4C-0x0076C1D8
	public override void ForceUpdate(); // 0x0076C1D8-0x0076C488
}

[AddComponentMenu] // 0x005127D4-0x0051286C
[ExecuteInEditMode] // 0x005127D4-0x0051286C
[RequireComponent] // 0x005127D4-0x0051286C
public class UIScrollView : MonoBehaviour // TypeDefIndex: 3266
{
	// Fields
	public static BetterList<UIScrollView> list; // 0x00
	public Movement movement; // 0x18
	public DragEffect dragEffect; // 0x1C
	public bool restrictWithinPanel; // 0x20
	public bool disableDragIfFits; // 0x21
	public bool smoothDragStart; // 0x22
	public bool iOSDragEmulation; // 0x23
	public float scrollWheelFactor; // 0x24
	public float momentumAmount; // 0x28
	private float dampenStrength; // 0x2C
	public UIProgressBar horizontalScrollBar; // 0x30
	public UIProgressBar verticalScrollBar; // 0x38
	public ShowCondition showScrollBars; // 0x40
	public Vector2 customMovement; // 0x44
	public UIWidget.Pivot contentPivot; // 0x4C
	public OnDragNotification onDragStarted; // 0x50
	public OnDragNotification onDragFinished; // 0x58
	public OnDragNotification onMomentumMove; // 0x60
	public OnDragNotification onStoppedMoving; // 0x68
	[HideInInspector] // 0x00515310-0x00515348
	[SerializeField] // 0x00515310-0x00515348
	private Vector3 scale; // 0x70
	[HideInInspector] // 0x00515348-0x00515380
	[SerializeField] // 0x00515348-0x00515380
	private Vector2 relativePositionOnReset; // 0x7C
	protected Transform mTrans; // 0x88
	protected UIPanel mPanel; // 0x90
	protected Plane mPlane; // 0x98
	protected Vector3 mLastPos; // 0xA8
	protected bool mPressed; // 0xB4
	protected Vector3 mMomentum; // 0xB8
	protected float mScroll; // 0xC4
	protected Bounds mBounds; // 0xC8
	protected bool mCalculatedBounds; // 0xE0
	protected bool mShouldMove; // 0xE1
	protected bool mIgnoreCallbacks; // 0xE2
	protected int mDragID; // 0xE4
	protected Vector2 mDragStartOffset; // 0xE8
	protected bool mDragStarted; // 0xF0
	[NonSerialized]
	private bool mStarted; // 0xF1
	[HideInInspector] // 0x00515380-0x00515390
	public UICenterOnChild centerOnChild; // 0xF8

	// Properties
	public UIPanel panel { get; } // 0x0076C650-0x0076C658 
	public bool isDragging { get; } // 0x0076C658-0x0076C678 
	public virtual Bounds bounds { get; } // 0x0076C678-0x0076C6FC 
	public bool canMoveHorizontally { get; } // 0x0076C6FC-0x0076C734 
	public bool canMoveVertically { get; } // 0x0076C734-0x0076C76C 
	public virtual bool shouldMoveHorizontally { get; } // 0x0076C76C-0x0076C85C 
	public virtual bool shouldMoveVertically { get; } // 0x0076C85C-0x0076C94C 
	protected virtual bool shouldMove { get; } // 0x0076C94C-0x0076CB48 
	public Vector3 currentMomentum { get; set; } // 0x0076CB48-0x0076CB54 0x0076CB54-0x0076CB68

	// Nested types
	public enum Movement // TypeDefIndex: 3267
	{
		Horizontal = 0,
		Vertical = 1,
		Unrestricted = 2,
		Custom = 3
	}

	public enum DragEffect // TypeDefIndex: 3268
	{
		None = 0,
		Momentum = 1,
		MomentumAndSpring = 2
	}

	public enum ShowCondition // TypeDefIndex: 3269
	{
		Always = 0,
		OnlyIfNeeded = 1,
		WhenDragging = 2
	}

	public delegate void OnDragNotification(); // TypeDefIndex: 3270; 0x0076F12C-0x0076F348

	// Constructors
	public UIScrollView(); // 0x007703EC-0x0077053C
	static UIScrollView(); // 0x0077053C-0x007705B0

	// Methods
	protected virtual void Awake(); // 0x0076CB68-0x0076CD78
	private void OnEnable(); // 0x0076CD78-0x0076CE24
	protected virtual void Start(); // 0x0076D060-0x0076D0A0
	private void CheckScrollbars(); // 0x0076CE24-0x0076D060
	private void OnDisable(); // 0x0076D0A0-0x0076D124
	public bool RestrictWithinBounds(bool instant); // 0x0076D124-0x0076D134
	public bool RestrictWithinBounds(bool instant, bool horizontal, bool vertical); // 0x0076D134-0x0076D568
	public void DisableSpring(); // 0x0076D568-0x0076D61C
	public void UpdateScrollbars(); // 0x0076D61C-0x0076D62C
	public virtual void UpdateScrollbars(bool recalculateBounds); // 0x0076D62C-0x0076DACC
	protected void UpdateScrollbars(UIProgressBar slider, float contentMin, float contentMax, float contentSize, float viewSize, bool inverted); // 0x0076DACC-0x0076DD70
	public virtual void SetDragAmount(float x, float y, bool updateScrollbars); // 0x0076DD70-0x0076E0EC
	public void InvalidateBounds(); // 0x0076E0EC-0x0076E0F4
	[ContextMenu] // 0x0051CF5C-0x0051CF94
	public void ResetPosition(); // 0x0076E0F4-0x0076E1CC
	public void UpdatePosition(); // 0x0076E1CC-0x0076E36C
	public void OnScrollBar(); // 0x0076E36C-0x0076E47C
	public virtual void MoveRelative(Vector3 relative); // 0x0076E47C-0x0076E584
	public void MoveAbsolute(Vector3 absolute); // 0x0076E584-0x0076E67C
	public void ResetZero(); // 0x0076E67C-0x0076EAC4
	public void Press(bool pressed); // 0x0076EAC4-0x0076F12C
	public void Drag(); // 0x0076F348-0x0076FA84
	public void Scroll(float delta); // 0x0076FA84-0x0076FBC8
	private void LateUpdate(); // 0x0076FBC8-0x00770250
	public void OnPan(Vector2 delta); // 0x00770250-0x007703EC
}

public class UIShowControlScheme : MonoBehaviour // TypeDefIndex: 3271
{
	// Fields
	public GameObject target; // 0x18
	public bool mouse; // 0x20
	public bool touch; // 0x21
	public bool controller; // 0x22

	// Constructors
	public UIShowControlScheme(); // 0x00771A60-0x00771A70

	// Methods
	private void OnEnable(); // 0x007717B0-0x00771890
	private void OnDisable(); // 0x00771984-0x00771A60
	private void OnScheme(); // 0x00771890-0x00771984
}

[AddComponentMenu] // 0x0051286C-0x005128B8
[ExecuteInEditMode] // 0x0051286C-0x005128B8
public class UISlider : UIProgressBar // TypeDefIndex: 3272
{
	// Fields
	[HideInInspector] // 0x00515390-0x005153C8
	[SerializeField] // 0x00515390-0x005153C8
	private Transform foreground; // 0x68
	[HideInInspector] // 0x005153C8-0x00515400
	[SerializeField] // 0x005153C8-0x00515400
	private float rawValue; // 0x70
	[HideInInspector] // 0x00515400-0x00515438
	[SerializeField] // 0x00515400-0x00515438
	private Direction direction; // 0x74
	[HideInInspector] // 0x00515438-0x00515470
	[SerializeField] // 0x00515438-0x00515470
	protected bool mInverted; // 0x78

	// Properties
	public bool isColliderEnabled { get; } // 0x00804864-0x00804988 
	[Obsolete] // 0x00528B5C-0x00528B94
	public float sliderValue { get; set; } // 0x00804988-0x00804990 0x00804990-0x00804998
	[Obsolete] // 0x00528B94-0x00528BCC
	public bool inverted { get; set; } // 0x00804998-0x008049A0 0x008049A0-0x008049A4

	// Nested types
	private enum Direction // TypeDefIndex: 3273
	{
		Horizontal = 0,
		Vertical = 1,
		Upgraded = 2
	}

	// Constructors
	public UISlider(); // 0x008052AC-0x008052C0

	// Methods
	protected override void Upgrade(); // 0x008049A4-0x00804A74
	protected override void OnStart(); // 0x00804A74-0x00804E7C
	protected void OnPressBackground(GameObject go, bool isPressed); // 0x00804E7C-0x00804F60
	protected void OnDragBackground(GameObject go, Vector2 delta); // 0x00804F60-0x00805020
	protected void OnPressForeground(GameObject go, bool isPressed); // 0x00805020-0x00805174
	protected void OnDragForeground(GameObject go, Vector2 delta); // 0x00805174-0x00805248
	public override void OnPan(Vector2 delta); // 0x00805248-0x008052AC
}

[AddComponentMenu] // 0x005128B8-0x00512940
[RequireComponent] // 0x005128B8-0x00512940
public class UISoundVolume : MonoBehaviour // TypeDefIndex: 3274
{
	// Constructors
	public UISoundVolume(); // 0x00807248-0x00807250

	// Methods
	private void Awake(); // 0x008070B4-0x008071B4
	private void OnChange(); // 0x008071B4-0x00807248
}

[AddComponentMenu] // 0x00512940-0x00512978
public class UITable : UIWidgetContainer // TypeDefIndex: 3275
{
	// Fields
	public int columns; // 0x18
	public Direction direction; // 0x1C
	public Sorting sorting; // 0x20
	public UIWidget.Pivot pivot; // 0x24
	public UIWidget.Pivot cellAlignment; // 0x28
	public bool hideInactive; // 0x2C
	public bool keepWithinPanel; // 0x2D
	public Vector2 padding; // 0x30
	public OnReposition onReposition; // 0x38
	public Comparison<Transform> onCustomSort; // 0x40
	protected UIPanel mPanel; // 0x48
	protected bool mInitDone; // 0x50
	protected bool mReposition; // 0x51

	// Properties
	public bool repositionNow { set; } // 0x0080B07C-0x0080B098

	// Nested types
	public delegate void OnReposition(); // TypeDefIndex: 3276; 0x0080BFA8-0x0080C1C4

	public enum Direction // TypeDefIndex: 3277
	{
		Down = 0,
		Up = 1
	}

	public enum Sorting // TypeDefIndex: 3278
	{
		None = 0,
		Alphabetic = 1,
		Horizontal = 2,
		Vertical = 3,
		Custom = 4
	}

	// Constructors
	public UITable(); // 0x0080C1C4-0x0080C240

	// Methods
	public List<Transform> GetChildList(); // 0x0080B098-0x0080B2FC
	protected virtual void Sort(List<Transform> list); // 0x0080B2FC-0x0080B390
	protected virtual void Start(); // 0x0080B390-0x0080B3D4
	protected virtual void Init(); // 0x0080B3D4-0x0080B468
	protected virtual void LateUpdate(); // 0x0080B468-0x0080B4A8
	private void OnValidate(); // 0x0080B4A8-0x0080B53C
	protected void RepositionVariableSize(List<Transform> children); // 0x0080B53C-0x0080BDF0
	[ContextMenu] // 0x0051CF94-0x0051CFCC
	public virtual void Reposition(); // 0x0080BDF0-0x0080BFA8
}

[AddComponentMenu] // 0x00512978-0x005129C4
[ExecuteInEditMode] // 0x00512978-0x005129C4
public class UIToggle : UIWidgetContainer // TypeDefIndex: 3279
{
	// Fields
	public static BetterList<UIToggle> list; // 0x00
	public static UIToggle current; // 0x08
	public int group; // 0x18
	public UIWidget activeSprite; // 0x20
	public Animation activeAnimation; // 0x28
	private Animator animator; // 0x30
	public bool startsActive; // 0x38
	public bool instantTween; // 0x39
	public bool optionCanBeNone; // 0x3A
	public List<EventDelegate> onChange; // 0x40
	private Validate validator; // 0x48
	[HideInInspector] // 0x00515470-0x005154A8
	[SerializeField] // 0x00515470-0x005154A8
	private UISprite checkSprite; // 0x50
	[HideInInspector] // 0x005154A8-0x005154E0
	[SerializeField] // 0x005154A8-0x005154E0
	private Animation checkAnimation; // 0x58
	[HideInInspector] // 0x005154E0-0x00515518
	[SerializeField] // 0x005154E0-0x00515518
	private GameObject eventReceiver; // 0x60
	[HideInInspector] // 0x00515518-0x00515550
	[SerializeField] // 0x00515518-0x00515550
	private string functionName; // 0x68
	[HideInInspector] // 0x00515550-0x00515588
	[SerializeField] // 0x00515550-0x00515588
	private bool startsChecked; // 0x70
	private bool mIsActive; // 0x71
	private bool mStarted; // 0x72

	// Properties
	public bool value { get; set; } // 0x0080F104-0x0080F120 0x0080F120-0x0080F154
	public bool isColliderEnabled { get; } // 0x0080F74C-0x0080F870 
	[Obsolete] // 0x00528BCC-0x00528C04
	public bool isChecked { get; set; } // 0x0080F870-0x0080F88C 0x0080F88C-0x0080F894

	// Nested types
	public delegate bool Validate(bool choice); // TypeDefIndex: 3280; 0x0080FDA8-0x0080FFF8

	// Constructors
	public UIToggle(); // 0x0080FFF8-0x00810080
	static UIToggle(); // 0x00810080-0x008100F4

	// Methods
	public static UIToggle GetActiveToggle(int group); // 0x0080F894-0x0080F9CC
	private void OnEnable(); // 0x0080F9CC-0x0080FA50
	private void OnDisable(); // 0x0080FA50-0x0080FAD4
	private void Start(); // 0x0080FAD4-0x0080FCE8
	private void OnClick(); // 0x0080FCE8-0x0080FDA8
	public void Set(bool state); // 0x0080F154-0x0080F74C
}

[AddComponentMenu] // 0x005129C4-0x00512A5C
[ExecuteInEditMode] // 0x005129C4-0x00512A5C
[RequireComponent] // 0x005129C4-0x00512A5C
public class UIToggledComponents : MonoBehaviour // TypeDefIndex: 3281
{
	// Fields
	public List<MonoBehaviour> activate; // 0x18
	public List<MonoBehaviour> deactivate; // 0x20
	[HideInInspector] // 0x00515588-0x005155C0
	[SerializeField] // 0x00515588-0x005155C0
	private MonoBehaviour target; // 0x28
	[HideInInspector] // 0x005155C0-0x005155F8
	[SerializeField] // 0x005155C0-0x005155F8
	private bool inverse; // 0x30

	// Constructors
	public UIToggledComponents(); // 0x0081049C-0x008104A4

	// Methods
	private void Awake(); // 0x008101C0-0x00810308
	public void Toggle(); // 0x00810308-0x0081049C
}

[AddComponentMenu] // 0x00512A5C-0x00512A94
public class UIToggledObjects : MonoBehaviour // TypeDefIndex: 3282
{
	// Fields
	public List<GameObject> activate; // 0x18
	public List<GameObject> deactivate; // 0x20
	[HideInInspector] // 0x005155F8-0x00515630
	[SerializeField] // 0x005155F8-0x00515630
	private GameObject target; // 0x28
	[HideInInspector] // 0x00515630-0x00515668
	[SerializeField] // 0x00515630-0x00515668
	private bool inverse; // 0x30

	// Constructors
	public UIToggledObjects(); // 0x008107F0-0x008107F8

	// Methods
	private void Awake(); // 0x008104A4-0x008105EC
	public void Toggle(); // 0x008105EC-0x00810734
	private void Set(GameObject go, bool state); // 0x00810734-0x008107F0
}

[AddComponentMenu] // 0x00512A94-0x00512ACC
public class UIWidgetContainer : MonoBehaviour // TypeDefIndex: 3283
{
	// Constructors
	public UIWidgetContainer(); // 0x0080C240-0x0080C248
}

[AddComponentMenu] // 0x00512ACC-0x00512B04
public class UIWrapContent : MonoBehaviour // TypeDefIndex: 3284
{
	// Fields
	public int itemSize; // 0x18
	public bool cullContent; // 0x1C
	public int minIndex; // 0x20
	public int maxIndex; // 0x24
	public OnInitializeItem onInitializeItem; // 0x28
	private Transform mTrans; // 0x30
	private UIPanel mPanel; // 0x38
	private UIScrollView mScroll; // 0x40
	private bool mHorizontal; // 0x48
	private bool mFirstTime; // 0x49
	private List<Transform> mChildren; // 0x50

	// Nested types
	public delegate void OnInitializeItem(GameObject go, int wrapIndex, int realIndex); // TypeDefIndex: 3285; 0x008181D0-0x008185D8

	// Constructors
	public UIWrapContent(); // 0x008185D8-0x0081865C

	// Methods
	protected virtual void Start(); // 0x00817450-0x00817540
	protected virtual void OnMove(UIPanel panel); // 0x00817CFC-0x00817D00
	[ContextMenu] // 0x0051CFCC-0x0051D004
	public void SortBasedOnScrollMovement(); // 0x00817540-0x00817694
	[ContextMenu] // 0x0051D004-0x0051D03C
	public void SortAlphabetically(); // 0x00817F5C-0x00818094
	protected bool CacheScrollView(); // 0x00817D00-0x00817E2C
	private void ResetChildPositions(); // 0x00817E2C-0x00817F5C
	public void WrapContent(); // 0x00817694-0x00817CFC
	private void OnValidate(); // 0x00818094-0x008180B8
	protected virtual void UpdateItem(Transform item, int index); // 0x008180B8-0x008181D0
}

[AddComponentMenu] // 0x00512B04-0x00512B3C
public class ActiveAnimation : MonoBehaviour // TypeDefIndex: 3286
{
	// Fields
	public static ActiveAnimation current; // 0x00
	public List<EventDelegate> onFinished; // 0x18
	[HideInInspector] // 0x00515668-0x00515678
	public GameObject eventReceiver; // 0x20
	[HideInInspector] // 0x00515678-0x00515688
	public string callWhenFinished; // 0x28
	private Animation mAnim; // 0x30
	private Direction mLastDirection; // 0x38
	private Direction mDisableDirection; // 0x3C
	private bool mNotify; // 0x40
	private Animator mAnimator; // 0x48
	private string mClip; // 0x50

	// Properties
	private float playbackTime { get; } // 0x00707444-0x0070750C 
	public bool isPlaying { get; } // 0x0070750C-0x007078EC 

	// Constructors
	public ActiveAnimation(); // 0x00709114-0x00709194

	// Methods
	public void Finish(); // 0x007078EC-0x00707C54
	public void Reset(); // 0x00707C54-0x00707F9C
	private void Start(); // 0x00707F9C-0x00708058
	private void Update(); // 0x00708058-0x00708620
	private void Play(string clipName, Direction playDirection); // 0x00708620-0x00708B80
	public static ActiveAnimation Play(Animation anim, string clipName, Direction playDirection, EnableCondition enableBeforePlay, DisableCondition disableCondition); // 0x00708B80-0x00708E30
	public static ActiveAnimation Play(Animation anim, string clipName, Direction playDirection); // 0x00708E30-0x00708E3C
	public static ActiveAnimation Play(Animation anim, Direction playDirection); // 0x00708E3C-0x00708E54
	public static ActiveAnimation Play(Animator anim, string clipName, Direction playDirection, EnableCondition enableBeforePlay, DisableCondition disableCondition); // 0x00708E54-0x00709114
}

public class BetterList<T> // TypeDefIndex: 3287
{
	// Fields
	public T[] buffer;
	public int size;

	// Properties
	[DebuggerHidden] // 0x00528C04-0x00528C14
	public T this[int i] { get => default; set {} }

	// Nested types
	public delegate int CompareFunc(T left, T right); // TypeDefIndex: 3288; 0x00000000-0x00000000

	[CompilerGenerated] // 0x00513FD0-0x00513FE0
	private sealed class _GetEnumerator_d__2 : IEnumerator<T> // TypeDefIndex: 3289
	{
		// Fields
		private int __1__state;
		private T __2__current;
		public BetterList<T> __4__this;
		private int _i_5__2;

		// Properties
		T IEnumerator<T>.Current { [DebuggerHidden] /* 0x005250B0-0x005250C0 */ get; }
		object IEnumerator.Current { [DebuggerHidden] /* 0x005250D0-0x005250E0 */ get; }

		// Constructors
		[DebuggerHidden] // 0x00525058-0x00525068
		public _GetEnumerator_d__2(int __1__state);

		// Methods
		[DebuggerHidden] // 0x00525068-0x00525078
		void IDisposable.Dispose();
		[DebuggerHidden] // 0x00525078-0x005250B0
		[DebuggerStepThrough] // 0x00525078-0x005250B0
		private bool MoveNext();
		[DebuggerHidden] // 0x005250C0-0x005250D0
		void IEnumerator.Reset();
	}

	// Constructors
	public BetterList();

	// Methods
	[DebuggerHidden] // 0x0051D03C-0x0051D0C0
	[DebuggerStepThrough] // 0x0051D03C-0x0051D0C0
	[IteratorStateMachine] // 0x0051D03C-0x0051D0C0
	public IEnumerator<T> GetEnumerator();
	private void AllocateMore();
	private void Trim();
	public void Clear();
	public void Release();
	public void Add(T item);
	public void Insert(int index, T item);
	public bool Contains(T item);
	public int IndexOf(T item);
	public bool Remove(T item);
	public void RemoveAt(int index);
	public T Pop();
	public T[] ToArray();
	[DebuggerHidden] // 0x0051D0C0-0x0051D0F8
	[DebuggerStepThrough] // 0x0051D0C0-0x0051D0F8
	public void Sort(CompareFunc comparer);
}

[Serializable]
public class BMFont // TypeDefIndex: 3290
{
	// Fields
	[HideInInspector] // 0x00515688-0x005156C0
	[SerializeField] // 0x00515688-0x005156C0
	private int mSize; // 0x10
	[HideInInspector] // 0x005156C0-0x005156F8
	[SerializeField] // 0x005156C0-0x005156F8
	private int mBase; // 0x14
	[HideInInspector] // 0x005156F8-0x00515730
	[SerializeField] // 0x005156F8-0x00515730
	private int mWidth; // 0x18
	[HideInInspector] // 0x00515730-0x00515768
	[SerializeField] // 0x00515730-0x00515768
	private int mHeight; // 0x1C
	[HideInInspector] // 0x00515768-0x005157A0
	[SerializeField] // 0x00515768-0x005157A0
	private string mSpriteName; // 0x20
	[HideInInspector] // 0x005157A0-0x005157D8
	[SerializeField] // 0x005157A0-0x005157D8
	private List<BMGlyph> mSaved; // 0x28
	private Dictionary<int, BMGlyph> mDict; // 0x30

	// Properties
	public bool isValid { get; } // 0x0071798C-0x007179E8 
	public int charSize { get; set; } // 0x007179E8-0x007179F0 0x007179F0-0x007179F8
	public int baseOffset { get; set; } // 0x007179F8-0x00717A00 0x00717A00-0x00717A08
	public int texWidth { get; set; } // 0x00717A08-0x00717A10 0x00717A10-0x00717A18
	public int texHeight { get; set; } // 0x00717A18-0x00717A20 0x00717A20-0x00717A28
	public int glyphCount { get; } // 0x00717A28-0x00717A90 
	public string spriteName { get; set; } // 0x00717A90-0x00717A98 0x00717A98-0x00717AA0
	public List<BMGlyph> glyphs { get; } // 0x00717AA0-0x00717AA8 

	// Constructors
	public BMFont(); // 0x00717E1C-0x00717EBC

	// Methods
	public BMGlyph GetGlyph(int index, bool createIfMissing); // 0x00717AA8-0x00717C30
	public BMGlyph GetGlyph(int index); // 0x00717C38-0x00717C40
	public void Clear(); // 0x00717C40-0x00717CB0
	public void Trim(int xMin, int yMin, int xMax, int yMax); // 0x00717CB0-0x00717D90
}

[Serializable]
public class BMGlyph // TypeDefIndex: 3291
{
	// Fields
	public int index; // 0x10
	public int x; // 0x14
	public int y; // 0x18
	public int width; // 0x1C
	public int height; // 0x20
	public int offsetX; // 0x24
	public int offsetY; // 0x28
	public int advance; // 0x2C
	public int channel; // 0x30
	public List<int> kerning; // 0x38

	// Constructors
	public BMGlyph(); // 0x00717C30-0x00717C38

	// Methods
	public int GetKerning(int previousChar); // 0x00717EBC-0x00717FB0
	public void SetKerning(int previousChar, int amount); // 0x00717FB0-0x007180E4
	public void Trim(int xMin, int yMin, int xMax, int yMax); // 0x00717D90-0x00717E1C
}

[Serializable]
public class BMSymbol // TypeDefIndex: 3292
{
	// Fields
	public string sequence; // 0x10
	public string spriteName; // 0x18
	private UISpriteData mSprite; // 0x20
	private bool mIsValid; // 0x28
	private int mLength; // 0x2C
	private int mOffsetX; // 0x30
	private int mOffsetY; // 0x34
	private int mWidth; // 0x38
	private int mHeight; // 0x3C
	private int mAdvance; // 0x40
	private Rect mUV; // 0x44

	// Properties
	public int length { get; } // 0x007180E4-0x00718114 
	public int offsetX { get; } // 0x00718114-0x0071811C 
	public int offsetY { get; } // 0x0071811C-0x00718124 
	public int width { get; } // 0x00718124-0x0071812C 
	public int height { get; } // 0x0071812C-0x00718134 
	public int advance { get; } // 0x00718134-0x0071813C 
	public Rect uvRect { get; } // 0x0071813C-0x00718148 

	// Constructors
	public BMSymbol(); // 0x007183A4-0x007183AC

	// Methods
	public void MarkAsChanged(); // 0x00718148-0x00718150
	public bool Validate(UIAtlas atlas); // 0x00718150-0x007183A4
}

public class ByteReader // TypeDefIndex: 3293
{
	// Fields
	private byte[] mBuffer; // 0x10
	private int mOffset; // 0x18
	private static BetterList<string> mTemp; // 0x00

	// Properties
	public bool canRead { get; } // 0x00773600-0x00773624 

	// Constructors
	public ByteReader(byte[] bytes); // 0x00773474-0x007734A0
	public ByteReader(TextAsset asset); // 0x007734A0-0x007734E4
	static ByteReader(); // 0x00773D88-0x00773DFC

	// Methods
	public static ByteReader Open(string path); // 0x007734E4-0x00773600
	private static string ReadLine(byte[] buffer, int start, int count); // 0x00773624-0x00773678
	public string ReadLine(); // 0x00773678-0x00773680
	public string ReadLine(bool skipEmptyLines); // 0x00773680-0x007737CC
	public Dictionary<string, string> ReadDictionary(); // 0x007737CC-0x0077398C
	public BetterList<string> ReadCSV(); // 0x0077398C-0x00773D88
}

[Serializable]
public class EventDelegate // TypeDefIndex: 3294
{
	// Fields
	[SerializeField] // 0x005157D8-0x005157E8
	private MonoBehaviour mTarget; // 0x10
	[SerializeField] // 0x005157E8-0x005157F8
	private string mMethodName; // 0x18
	[SerializeField] // 0x005157F8-0x00515808
	private Parameter[] mParameters; // 0x20
	public bool oneShot; // 0x28
	[NonSerialized]
	private Callback mCachedCallback; // 0x30
	[NonSerialized]
	private bool mRawDelegate; // 0x38
	[NonSerialized]
	private bool mCached; // 0x39
	[NonSerialized]
	private MethodInfo mMethod; // 0x40
	[NonSerialized]
	private ParameterInfo[] mParameterInfos; // 0x48
	[NonSerialized]
	private object[] mArgs; // 0x50
	private static int s_Hash; // 0x00

	// Properties
	public MonoBehaviour target { get; set; } // 0x00683798-0x006837A0 0x006837A0-0x006837B8
	public string methodName { get; set; } // 0x006837B8-0x006837C0 0x006837C0-0x006837D4
	public Parameter[] parameters { get; } // 0x006837D4-0x00683804 
	public bool isValid { get; } // 0x00683F20-0x00683FDC 
	public bool isEnabled { get; } // 0x00683FDC-0x006840DC 

	// Nested types
	[Serializable]
	public class Parameter // TypeDefIndex: 3295
	{
		// Fields
		public UnityEngine.Object obj; // 0x10
		public string field; // 0x18
		[NonSerialized]
		private object mValue; // 0x20
		[NonSerialized]
		public Type expectedType; // 0x28
		[NonSerialized]
		public bool cached; // 0x30
		[NonSerialized]
		public PropertyInfo propInfo; // 0x38
		[NonSerialized]
		public FieldInfo fieldInfo; // 0x40

		// Properties
		public object value { get; set; } // 0x00684E74-0x006850D4 0x00685F48-0x00685F50
		public Type type { get; } // 0x006850D4-0x006851A4 

		// Constructors
		public Parameter(); // 0x00684584-0x00684608
		public Parameter(UnityEngine.Object obj, string field); // 0x00685E14-0x00685EB0
		public Parameter(object val); // 0x00685EB0-0x00685F48
	}

	public delegate void Callback(); // TypeDefIndex: 3296; 0x00684C58-0x00684E74

	// Constructors
	public EventDelegate(); // 0x006840DC-0x006840E4
	public EventDelegate(Callback call); // 0x006840E4-0x00684114
	public EventDelegate(MonoBehaviour target, string methodName); // 0x0068426C-0x006842B8
	static EventDelegate(); // 0x00685D54-0x00685DC4

	// Methods
	private static string GetMethodName(Callback callback); // 0x006842D4-0x00684300
	private static bool IsValid(Callback callback); // 0x00684300-0x00684328
	public override bool Equals(object obj); // 0x00684328-0x00684500
	public override int GetHashCode(); // 0x00684500-0x00684568
	private void Set(Callback call); // 0x00684114-0x0068426C
	public void Set(MonoBehaviour target, string methodName); // 0x006842B8-0x006842D4
	private void Cache(); // 0x00683804-0x00683F20
	public bool Execute(); // 0x00684608-0x00684C58
	public void Clear(); // 0x00684568-0x00684584
	public override string ToString(); // 0x006851A4-0x006852E0
	public static void Execute(List<EventDelegate> list); // 0x006852E0-0x006854BC
	public static bool IsValid(List<EventDelegate> list); // 0x006854BC-0x00685564
	public static EventDelegate Set(List<EventDelegate> list, Callback callback); // 0x00685564-0x00685614
	public static void Set(List<EventDelegate> list, EventDelegate del); // 0x00685614-0x0068569C
	public static EventDelegate Add(List<EventDelegate> list, Callback callback); // 0x0068569C-0x00685714
	public static EventDelegate Add(List<EventDelegate> list, Callback callback, bool oneShot); // 0x00685714-0x00685864
	public static void Add(List<EventDelegate> list, EventDelegate ev); // 0x00685864-0x006858F0
	public static void Add(List<EventDelegate> list, EventDelegate ev, bool oneShot); // 0x006858F0-0x00685BB4
	public static bool Remove(List<EventDelegate> list, Callback callback); // 0x00685BB4-0x00685C84
	public static bool Remove(List<EventDelegate> list, EventDelegate ev); // 0x00685C84-0x00685D54
}

public static class Localization // TypeDefIndex: 3297
{
	// Fields
	public static LoadFunction loadFunction; // 0x00
	public static OnLocalizeNotification onLocalize; // 0x08
	public static bool localizationHasBeenSet; // 0x10
	private static string[] mLanguages; // 0x18
	private static Dictionary<string, string> mOldDictionary; // 0x20
	private static Dictionary<string, string[]> mDictionary; // 0x28
	private static Dictionary<string, string> mReplacement; // 0x30
	private static int mLanguageIndex; // 0x38
	private static string mLanguage; // 0x40
	private static bool mMerging; // 0x48

	// Properties
	public static Dictionary<string, string[]> dictionary { get; set; } // 0x006F5E24-0x006F5EFC 0x006F61D8-0x006F6254
	public static string[] knownLanguages { get; } // 0x006F1EC4-0x006F1F9C 
	public static string language { get; set; } // 0x006F1F9C-0x006F208C 0x006F219C-0x006F224C
	[Obsolete] // 0x00528C14-0x00528C4C
	public static bool isActive { get; } // 0x006F89A0-0x006F89A8 

	// Nested types
	public delegate byte[] LoadFunction(string path); // TypeDefIndex: 3298; 0x006F6404-0x006F67C0

	public delegate void OnLocalizeNotification(); // TypeDefIndex: 3299; 0x006F7C80-0x006F7E9C

	// Constructors
	static Localization(); // 0x006F8BF8-0x006F8CEC

	// Methods
	private static bool LoadDictionary(string value); // 0x006F5EFC-0x006F61D8
	private static bool LoadAndSelect(string value); // 0x006F6254-0x006F6404
	public static void Load(TextAsset asset); // 0x006F6B18-0x006F6BD4
	public static void Set(string languageName, byte[] bytes); // 0x006F6834-0x006F68E8
	public static void ReplaceKey(string key, string val); // 0x006F6D5C-0x006F6E48
	public static void ClearReplacements(); // 0x006F6E48-0x006F6EC4
	public static bool LoadCSV(TextAsset asset, bool merge = false /* Metadata: 0x001F54E9 */); // 0x006F6EC4-0x006F6F58
	public static bool LoadCSV(byte[] bytes, bool merge = false /* Metadata: 0x001F54EA */); // 0x006F67C0-0x006F6834
	private static bool HasLanguage(string languageName); // 0x006F7898-0x006F79A4
	private static bool LoadCSV(byte[] bytes, TextAsset asset, bool merge = false /* Metadata: 0x001F54EB */); // 0x006F6F58-0x006F7898
	private static void AddCSV(BetterList<string> newValues, string[] newLanguages, Dictionary<string, int> languageIndices); // 0x006F79A4-0x006F7C80
	private static string[] ExtractStrings(BetterList<string> added, string[] newLanguages, Dictionary<string, int> languageIndices); // 0x006F7E9C-0x006F8190
	private static bool SelectLanguage(string language); // 0x006F68E8-0x006F6B18
	public static void Set(string languageName, Dictionary<string, string> dictionary); // 0x006F6BD4-0x006F6D5C
	public static void Set(string key, string value); // 0x006F8190-0x006F82B0
	public static string Get(string key); // 0x006F82B0-0x006F8924
	public static string Format(string key, params /* 0x00528A84-0x00528A94 */ object[] parameters); // 0x006F8924-0x006F89A0
	[Obsolete] // 0x0051D0F8-0x0051D130
	public static string Localize(string key); // 0x006F89A8-0x006F8A0C
	public static bool Exists(string key); // 0x006F8A0C-0x006F8BF8
}

[AddComponentMenu] // 0x00512B74-0x00512BAC
public class NGUIDebug : MonoBehaviour // TypeDefIndex: 3300
{
	// Fields
	private static bool mRayDebug; // 0x00
	private static List<string> mLines; // 0x08
	private static NGUIDebug mInstance; // 0x10

	// Properties
	public static bool debugRaycast { get; set; } // 0x008943E8-0x00894450 0x00894450-0x008944F4

	// Constructors
	public NGUIDebug(); // 0x00895688-0x00895690
	static NGUIDebug(); // 0x00895690-0x00895718

	// Methods
	public static void CreateInstance(); // 0x008944F4-0x00894640
	private static void LogString(string text); // 0x00894640-0x0089477C
	public static void Log(params /* 0x00528A94-0x00528AA4 */ object[] objs); // 0x0089477C-0x0089488C
	public static void Clear(); // 0x0089488C-0x00894908
	public static void DrawBounds(Bounds b); // 0x00894908-0x00894C54
	private void OnGUI(); // 0x00894C54-0x00895524
}

public static class NGUIMath // TypeDefIndex: 3301
{
	// Methods
	[DebuggerHidden] // 0x0051D130-0x0051D168
	[DebuggerStepThrough] // 0x0051D130-0x0051D168
	public static float Lerp(float from, float to, float factor); // 0x00895718-0x00895730
	[DebuggerHidden] // 0x0051D168-0x0051D1A0
	[DebuggerStepThrough] // 0x0051D168-0x0051D1A0
	public static int ClampIndex(int val, int max); // 0x00895730-0x0089574C
	[DebuggerHidden] // 0x0051D1A0-0x0051D1D8
	[DebuggerStepThrough] // 0x0051D1A0-0x0051D1D8
	public static int RepeatIndex(int val, int max); // 0x0089574C-0x0089577C
	[DebuggerHidden] // 0x0051D1D8-0x0051D210
	[DebuggerStepThrough] // 0x0051D1D8-0x0051D210
	public static float WrapAngle(float angle); // 0x0089577C-0x008957C8
	[DebuggerHidden] // 0x0051D210-0x0051D248
	[DebuggerStepThrough] // 0x0051D210-0x0051D248
	public static float Wrap01(float val); // 0x008957C8-0x00895844
	[DebuggerHidden] // 0x0051D248-0x0051D280
	[DebuggerStepThrough] // 0x0051D248-0x0051D280
	public static int HexToDecimal(char ch); // 0x00895844-0x008958A4
	[DebuggerHidden] // 0x0051D280-0x0051D2B8
	[DebuggerStepThrough] // 0x0051D280-0x0051D2B8
	public static char DecimalToHexChar(int num); // 0x008958A4-0x008958CC
	[DebuggerHidden] // 0x0051D2B8-0x0051D2F0
	[DebuggerStepThrough] // 0x0051D2B8-0x0051D2F0
	public static string DecimalToHex8(int num); // 0x008958CC-0x00895938
	[DebuggerHidden] // 0x0051D2F0-0x0051D328
	[DebuggerStepThrough] // 0x0051D2F0-0x0051D328
	public static string DecimalToHex24(int num); // 0x00895938-0x008959A4
	[DebuggerHidden] // 0x0051D328-0x0051D360
	[DebuggerStepThrough] // 0x0051D328-0x0051D360
	public static string DecimalToHex32(int num); // 0x008959A4-0x008959FC
	[DebuggerHidden] // 0x0051D360-0x0051D398
	[DebuggerStepThrough] // 0x0051D360-0x0051D398
	public static int ColorToInt(Color c); // 0x008959FC-0x00895ADC
	[DebuggerHidden] // 0x0051D398-0x0051D3D0
	[DebuggerStepThrough] // 0x0051D398-0x0051D3D0
	public static Color IntToColor(int val); // 0x00895ADC-0x00895B38
	[DebuggerHidden] // 0x0051D3D0-0x0051D408
	[DebuggerStepThrough] // 0x0051D3D0-0x0051D408
	public static string IntToBinary(int val, int bits); // 0x00895B38-0x00895C30
	[DebuggerHidden] // 0x0051D408-0x0051D440
	[DebuggerStepThrough] // 0x0051D408-0x0051D440
	public static Color HexToColor(uint val); // 0x00895C30-0x00895C34
	public static Rect ConvertToTexCoords(Rect rect, int width, int height); // 0x00895C34-0x00895CF8
	public static Rect ConvertToPixels(Rect rect, int width, int height, bool round); // 0x00895CF8-0x00895EBC
	public static Rect MakePixelPerfect(Rect rect); // 0x00895EBC-0x00895FD0
	public static Rect MakePixelPerfect(Rect rect, int width, int height); // 0x00895FD0-0x00896140
	public static Vector2 ConstrainRect(Vector2 minRect, Vector2 maxRect, Vector2 minArea, Vector2 maxArea); // 0x00896140-0x0089625C
	public static Bounds CalculateAbsoluteWidgetBounds(Transform trans); // 0x0089625C-0x00896598
	public static Bounds CalculateRelativeWidgetBounds(Transform trans); // 0x00896598-0x008965A8
	public static Bounds CalculateRelativeWidgetBounds(Transform trans, bool considerInactive); // 0x0089683C-0x0089684C
	public static Bounds CalculateRelativeWidgetBounds(Transform relativeTo, Transform content); // 0x0089684C-0x00896858
	public static Bounds CalculateRelativeWidgetBounds(Transform relativeTo, Transform content, bool considerInactive, bool considerChildren = true /* Metadata: 0x001F54EC */); // 0x008965A8-0x0089683C
	[DebuggerHidden] // 0x0051D440-0x0051D478
	[DebuggerStepThrough] // 0x0051D440-0x0051D478
	private static void CalculateRelativeWidgetBounds(Transform content, bool considerInactive, bool isRoot, ref Matrix4x4 toLocal, ref Vector3 vMin, ref Vector3 vMax, ref bool isSet, bool considerChildren); // 0x00896858-0x00896C60
	public static Vector3 SpringDampen(ref Vector3 velocity, float strength, float deltaTime); // 0x00896CF4-0x00896E48
	public static Vector2 SpringDampen(ref Vector2 velocity, float strength, float deltaTime); // 0x00896E48-0x00896F7C
	public static float SpringLerp(float strength, float deltaTime); // 0x00896F7C-0x00897070
	public static float SpringLerp(float from, float to, float strength, float deltaTime); // 0x00897070-0x0089715C
	public static Vector2 SpringLerp(Vector2 from, Vector2 to, float strength, float deltaTime); // 0x0089715C-0x00897210
	public static Vector3 SpringLerp(Vector3 from, Vector3 to, float strength, float deltaTime); // 0x00897210-0x008972DC
	public static Quaternion SpringLerp(Quaternion from, Quaternion to, float strength, float deltaTime); // 0x008972DC-0x008973B0
	public static float RotateTowards(float from, float to, float maxAngle); // 0x008973B0-0x008974AC
	private static float DistancePointToLineSegment(Vector2 point, Vector2 a, Vector2 b); // 0x008974AC-0x008976F8
	public static float DistanceToRectangle(Vector2[] screenPoints, Vector2 mousePos); // 0x008976F8-0x008979A8
	public static float DistanceToRectangle(Vector3[] worldPoints, Vector2 mousePos, Camera cam); // 0x008979A8-0x00897B00
	public static Vector2 GetPivotOffset(UIWidget.Pivot pv); // 0x00897B00-0x00897B9C
	public static UIWidget.Pivot GetPivot(Vector2 offset); // 0x00897B9C-0x00897C18
	public static void MoveWidget(UIRect w, float x, float y); // 0x00897C18-0x00897C1C
	public static void MoveRect(UIRect rect, float x, float y); // 0x00897C1C-0x00897EBC
	public static void ResizeWidget(UIWidget w, UIWidget.Pivot pivot, float x, float y, int minWidth, int minHeight); // 0x00897EBC-0x00897ED8
	public static void ResizeWidget(UIWidget w, UIWidget.Pivot pivot, float x, float y, int minWidth, int minHeight, int maxWidth, int maxHeight); // 0x00897ED8-0x00898190
	public static void AdjustWidget(UIWidget w, float left, float bottom, float right, float top); // 0x00898C2C-0x00898C48
	public static void AdjustWidget(UIWidget w, float left, float bottom, float right, float top, int minWidth, int minHeight); // 0x00898190-0x008981A4
	public static void AdjustWidget(UIWidget w, float left, float bottom, float right, float top, int minWidth, int minHeight, int maxWidth, int maxHeight); // 0x008981A4-0x00898C2C
	public static int AdjustByDPI(float height); // 0x00898C48-0x00898D18
	public static Vector2 ScreenToPixels(Vector2 pos, Transform relativeTo); // 0x00898D18-0x00898ED0
	public static Vector2 ScreenToParentPixels(Vector2 pos, Transform relativeTo); // 0x0089913C-0x008993C0
	public static Vector3 WorldToLocalPoint(Vector3 worldPos, Camera worldCam, Camera uiCam, Transform relativeTo); // 0x008993C0-0x00899518

	// Extension methods
	public static void OverlayPosition(this Transform trans, Vector3 worldPos, Camera worldCam, Camera myCam); // 0x00899518-0x0089964C
	public static void OverlayPosition(this Transform trans, Vector3 worldPos, Camera worldCam); // 0x0089964C-0x00899774
	public static void OverlayPosition(this Transform trans, Transform target); // 0x00899774-0x008998D4
}

public static class NGUIText // TypeDefIndex: 3302
{
	// Fields
	public static UIFont bitmapFont; // 0x00
	public static Font dynamicFont; // 0x08
	public static GlyphInfo glyph; // 0x10
	public static int fontSize; // 0x18
	public static float fontScale; // 0x1C
	public static float pixelDensity; // 0x20
	public static FontStyle fontStyle; // 0x24
	public static Alignment alignment; // 0x28
	public static Color tint; // 0x2C
	public static int rectWidth; // 0x3C
	public static int rectHeight; // 0x40
	public static int regionWidth; // 0x44
	public static int regionHeight; // 0x48
	public static int maxLines; // 0x4C
	public static bool gradient; // 0x50
	public static Color gradientBottom; // 0x54
	public static Color gradientTop; // 0x64
	public static bool encoding; // 0x74
	public static float spacingX; // 0x78
	public static float spacingY; // 0x7C
	public static bool premultiply; // 0x80
	public static SymbolStyle symbolStyle; // 0x84
	public static int finalSize; // 0x88
	public static float finalSpacingX; // 0x8C
	public static float finalLineHeight; // 0x90
	public static float baseline; // 0x94
	public static bool useSymbols; // 0x98
	private static Color mInvisible; // 0x9C
	private static BetterList<Color> mColors; // 0xB0
	private static float mAlpha; // 0xB8
	private static CharacterInfo mTempChar; // 0xBC
	private static BetterList<float> mSizes; // 0xF0
	private static Color32 s_c0; // 0xF8
	private static Color32 s_c1; // 0xFC
	private static float[] mBoldOffset; // 0x100

	// Nested types
	public enum Alignment // TypeDefIndex: 3303
	{
		Automatic = 0,
		Left = 1,
		Center = 2,
		Right = 3,
		Justified = 4
	}

	public enum SymbolStyle // TypeDefIndex: 3304
	{
		None = 0,
		Normal = 1,
		Colored = 2
	}

	public class GlyphInfo // TypeDefIndex: 3305
	{
		// Fields
		public Vector2 v0; // 0x10
		public Vector2 v1; // 0x18
		public Vector2 u0; // 0x20
		public Vector2 u1; // 0x28
		public Vector2 u2; // 0x30
		public Vector2 u3; // 0x38
		public float advance; // 0x40
		public int channel; // 0x44
		public bool rotatedUVs; // 0x48

		// Constructors
		public GlyphInfo(); // 0x008A2064-0x008A206C
	}

	// Constructors
	static NGUIText(); // 0x008A1E0C-0x008A2064

	// Methods
	public static void Update(); // 0x008999B4-0x00899A14
	public static void Update(bool request); // 0x00899A14-0x00899E68
	public static void Prepare(string text); // 0x00899E68-0x00899F60
	public static BMSymbol GetSymbol(string text, int index, int textLength); // 0x00899F60-0x0089A070
	public static float GetGlyphWidth(int ch, int prev); // 0x0089A070-0x0089A2DC
	public static GlyphInfo GetGlyph(int ch, int prev); // 0x0089A2DC-0x0089AC00
	[DebuggerHidden] // 0x0051D4A8-0x0051D4E0
	[DebuggerStepThrough] // 0x0051D4A8-0x0051D4E0
	public static float ParseAlpha(string text, int index); // 0x0089AC00-0x0089ACC4
	[DebuggerHidden] // 0x0051D4E0-0x0051D518
	[DebuggerStepThrough] // 0x0051D4E0-0x0051D518
	public static Color ParseColor(string text, int offset); // 0x0089ACC4-0x0089AD38
	[DebuggerHidden] // 0x0051D518-0x0051D550
	[DebuggerStepThrough] // 0x0051D518-0x0051D550
	public static Color ParseColor24(string text, int offset); // 0x0089AD38-0x0089AE40
	[DebuggerHidden] // 0x0051D550-0x0051D588
	[DebuggerStepThrough] // 0x0051D550-0x0051D588
	public static Color ParseColor32(string text, int offset); // 0x0089AE40-0x0089AF80
	[DebuggerHidden] // 0x0051D588-0x0051D5C0
	[DebuggerStepThrough] // 0x0051D588-0x0051D5C0
	public static string EncodeColor(Color c); // 0x0089AF80-0x0089B014
	[DebuggerHidden] // 0x0051D5C0-0x0051D5F8
	[DebuggerStepThrough] // 0x0051D5C0-0x0051D5F8
	public static string EncodeColor(string text, Color c); // 0x0089B02C-0x0089B1FC
	[DebuggerHidden] // 0x0051D5F8-0x0051D630
	[DebuggerStepThrough] // 0x0051D5F8-0x0051D630
	public static string EncodeAlpha(float a); // 0x0089B1FC-0x0089B288
	[DebuggerHidden] // 0x0051D630-0x0051D668
	[DebuggerStepThrough] // 0x0051D630-0x0051D668
	public static string EncodeColor24(Color c); // 0x0089B014-0x0089B02C
	[DebuggerHidden] // 0x0051D668-0x0051D6A0
	[DebuggerStepThrough] // 0x0051D668-0x0051D6A0
	public static string EncodeColor32(Color c); // 0x0089B288-0x0089B29C
	public static bool ParseSymbol(string text, ref int index); // 0x0089B29C-0x0089B360
	[DebuggerHidden] // 0x0051D6A0-0x0051D6D8
	[DebuggerStepThrough] // 0x0051D6A0-0x0051D6D8
	public static bool IsHex(char ch); // 0x0089BC60-0x0089BC9C
	public static bool ParseSymbol(string text, ref int index, BetterList<Color> colors, bool premultiply, ref int sub, ref bool bold, ref bool italic, ref bool underline, ref bool strike, ref bool ignoreColor); // 0x0089B360-0x0089BC60
	public static string StripSymbols(string text); // 0x0089BC9C-0x0089BDF0
	public static void Align(BetterList<Vector3> verts, int indexOffset, float printedWidth, int elements = 4 /* Metadata: 0x001F54ED */); // 0x0089BDF0-0x0089C400
	public static int GetExactCharacterIndex(BetterList<Vector3> verts, BetterList<int> indices, Vector2 pos); // 0x0089C400-0x0089C538
	public static int GetApproximateCharacterIndex(BetterList<Vector3> verts, BetterList<int> indices, Vector2 pos); // 0x0089C538-0x0089C6B4
	[DebuggerHidden] // 0x0051D6D8-0x0051D710
	[DebuggerStepThrough] // 0x0051D6D8-0x0051D710
	private static bool IsSpace(int ch); // 0x0089C6B4-0x0089C6E4
	[DebuggerHidden] // 0x0051D710-0x0051D748
	[DebuggerStepThrough] // 0x0051D710-0x0051D748
	public static void EndLine(ref StringBuilder s); // 0x0089C6E4-0x0089C7E8
	[DebuggerHidden] // 0x0051D748-0x0051D780
	[DebuggerStepThrough] // 0x0051D748-0x0051D780
	private static void ReplaceSpaceWithNewline(ref StringBuilder s); // 0x0089C7E8-0x0089C8DC
	public static Vector2 CalculatePrintedSize(string text); // 0x0089C8DC-0x0089CD60
	public static int CalculateOffsetToFit(string text); // 0x0089CD60-0x0089D0F8
	public static string GetEndOfLineThatFits(string text); // 0x0089D0F8-0x0089D184
	public static bool WrapText(string text, out string finalText, bool wrapLineColors = false /* Metadata: 0x001F54F1 */); // 0x0089D184-0x0089D204
	public static bool WrapText(string text, out string finalText, bool keepCharCount, bool wrapLineColors); // 0x0089D204-0x0089E344
	public static void Print(string text, BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols); // 0x0089E344-0x008A01CC
	public static void PrintApproximateCharacterPositions(string text, BetterList<Vector3> verts, BetterList<int> indices); // 0x008A01CC-0x008A08AC
	public static void PrintExactCharacterPositions(string text, BetterList<Vector3> verts, BetterList<int> indices); // 0x008A08AC-0x008A0ECC
	public static void PrintCaretAndSelection(string text, int start, int end, BetterList<Vector3> caret, BetterList<Vector3> highlight); // 0x008A0ECC-0x008A1E0C
}

public static class NGUITools // TypeDefIndex: 3306
{
	// Fields
	private static AudioListener mListener; // 0x00
	private static bool mLoaded; // 0x08
	private static float mGlobalVolume; // 0x0C
	private static float mLastTimestamp; // 0x10
	private static AudioClip mLastClip; // 0x18
	private static Vector3[] mSides; // 0x20
	public static KeyCode[] keys; // 0x28

	// Properties
	public static float soundVolume { get; set; } // 0x008A206C-0x008A2140 0x008A2140-0x008A220C
	public static bool fileAccess { get; } // 0x008A220C-0x008A222C 
	public static string cliphelm { get; set; } // 0x008A6E30-0x008A6EB4 0x008A6EB4-0x008A6F68
	public static Vector2 screenSize { get; } // 0x008A79C8-0x008A7A10 

	// Constructors
	static NGUITools(); // 0x008A8B7C-0x008A9C38

	// Methods
	public static AudioSource PlaySound(AudioClip clip); // 0x008A222C-0x008A2294
	public static AudioSource PlaySound(AudioClip clip, float volume); // 0x008A2940-0x008A29A8
	public static AudioSource PlaySound(AudioClip clip, float volume, float pitch); // 0x008A2294-0x008A2940
	public static int RandomRange(int min, int max); // 0x008A2A58-0x008A2A70
	public static string GetHierarchy(GameObject obj); // 0x00895524-0x00895688
	public static T[] FindActive<T>()
		where T : Component;
	public static Camera FindCameraForLayer(int layer); // 0x00898ED0-0x0089913C
	public static void AddWidgetCollider(GameObject go); // 0x008A2A70-0x008A2AD8
	public static void AddWidgetCollider(GameObject go, bool considerInactive); // 0x008A2AD8-0x008A2E94
	public static void UpdateWidgetCollider(GameObject go); // 0x008A3490-0x008A34F8
	public static void UpdateWidgetCollider(GameObject go, bool considerInactive); // 0x008A34F8-0x008A3684
	public static void UpdateWidgetCollider(BoxCollider box, bool considerInactive); // 0x008A2E94-0x008A31AC
	public static void UpdateWidgetCollider(BoxCollider2D box, bool considerInactive); // 0x008A31AC-0x008A3490
	public static string GetTypeName<T>();
	public static string GetTypeName(UnityEngine.Object obj); // 0x008A3684-0x008A3790
	public static void RegisterUndo(UnityEngine.Object obj, string name); // 0x008A3790-0x008A3794
	public static void SetDirty(UnityEngine.Object obj); // 0x008A3794-0x008A3798
	public static GameObject AddChild(GameObject parent); // 0x008A3798-0x008A3800
	public static GameObject AddChild(GameObject parent, bool undo); // 0x008A3800-0x008A3974
	public static GameObject AddChild(GameObject parent, GameObject prefab); // 0x008A3974-0x008A3B10
	public static int CalculateRaycastDepth(GameObject go); // 0x008A3B10-0x008A3CBC
	public static int CalculateNextDepth(GameObject go); // 0x008A3CBC-0x008A3DF4
	public static int CalculateNextDepth(GameObject go, bool ignoreChildrenWithColliders); // 0x008A3DF4-0x008A4050
	public static int AdjustDepth(GameObject go, int adjustment); // 0x008A4050-0x008A42C4
	public static void BringForward(GameObject go); // 0x008A42C4-0x008A4388
	public static void PushBack(GameObject go); // 0x008A4560-0x008A4624
	public static void NormalizeDepths(); // 0x008A4624-0x008A4684
	public static void NormalizeWidgetDepths(); // 0x008A44F4-0x008A4560
	public static void NormalizeWidgetDepths(GameObject go); // 0x008A47BC-0x008A4848
	public static void NormalizeWidgetDepths(UIWidget[] list); // 0x008A4684-0x008A47BC
	public static void NormalizePanelDepths(); // 0x008A4388-0x008A44F4
	public static UIPanel CreateUI(bool advanced3D); // 0x008A4848-0x008A48B4
	public static UIPanel CreateUI(bool advanced3D, int layer); // 0x008A538C-0x008A5404
	public static UIPanel CreateUI(Transform trans, bool advanced3D, int layer); // 0x008A48B4-0x008A538C
	public static void SetChildLayer(Transform t, int layer); // 0x008A5534-0x008A5628
	public static T AddChild<T>(GameObject parent)
		where T : Component;
	public static T AddChild<T>(GameObject parent, bool undo)
		where T : Component;
	public static T AddWidget<T>(GameObject go)
		where T : UIWidget;
	public static T AddWidget<T>(GameObject go, int depth)
		where T : UIWidget;
	public static UISprite AddSprite(GameObject go, UIAtlas atlas, string spriteName); // 0x008A5628-0x008A5768
	public static GameObject GetRoot(GameObject go); // 0x008A5768-0x008A5824
	public static T FindInParents<T>(GameObject go)
		where T : Component;
	public static T FindInParents<T>(Transform trans)
		where T : Component;
	public static void Destroy(UnityEngine.Object obj); // 0x008A5824-0x008A5A28
	public static void DestroyImmediate(UnityEngine.Object obj); // 0x008A5B54-0x008A5C2C
	public static void Broadcast(string funcName); // 0x008A5C2C-0x008A5D54
	public static void Broadcast(string funcName, object param); // 0x008A5D54-0x008A5E8C
	public static bool IsChild(Transform parent, Transform child); // 0x008A5404-0x008A5534
	private static void Activate(Transform t); // 0x008A5E8C-0x008A5EF4
	private static void Activate(Transform t, bool compatibilityMode); // 0x008A5EF4-0x008A6058
	private static void Deactivate(Transform t); // 0x008A6074-0x008A6104
	public static void SetActive(GameObject go, bool state); // 0x008A6104-0x008A617C
	public static void SetActive(GameObject go, bool state, bool compatibilityMode); // 0x008A617C-0x008A6290
	[DebuggerHidden] // 0x0051D790-0x0051D7C8
	[DebuggerStepThrough] // 0x0051D790-0x0051D7C8
	private static void CallCreatePanel(Transform t); // 0x008A6290-0x008A63B4
	public static void SetActiveChildren(GameObject go, bool state); // 0x008A63B4-0x008A64EC
	[Obsolete] // 0x0051D7C8-0x0051D800
	public static bool IsActive(Behaviour mb); // 0x008A64EC-0x008A65A0
	[DebuggerHidden] // 0x0051D800-0x0051D838
	[DebuggerStepThrough] // 0x0051D800-0x0051D838
	public static bool GetActive(Behaviour mb); // 0x008A29A8-0x008A2A58
	[DebuggerHidden] // 0x0051D838-0x0051D870
	[DebuggerStepThrough] // 0x0051D838-0x0051D870
	public static bool GetActive(GameObject go); // 0x00896C60-0x00896CF4
	[DebuggerHidden] // 0x0051D870-0x0051D8A8
	[DebuggerStepThrough] // 0x0051D870-0x0051D8A8
	public static void SetActiveSelf(GameObject go, bool state); // 0x008A6058-0x008A6074
	public static void SetLayer(GameObject go, int layer); // 0x008A65A0-0x008A669C
	public static Vector3 Round(Vector3 v); // 0x008A669C-0x008A6880
	public static void MakePixelPerfect(Transform t); // 0x008A6880-0x008A6ABC
	public static bool Save(string fileName, byte[] bytes); // 0x008A6ABC-0x008A6C94
	public static byte[] Load(string fileName); // 0x008A6C94-0x008A6D4C
	public static Color ApplyPMA(Color c); // 0x008A6D4C-0x008A6D68
	public static void MarkParentAsChanged(GameObject go); // 0x008A6D68-0x008A6E30
	[Obsolete] // 0x0051D8A8-0x0051D8E0
	public static string EncodeColor(Color c); // 0x008A6F68-0x008A6FFC
	[Obsolete] // 0x0051D8E0-0x0051D918
	public static Color ParseColor(string text, int offset); // 0x008A6FFC-0x008A7070
	[Obsolete] // 0x0051D918-0x0051D950
	public static string StripSymbols(string text); // 0x008A7070-0x008A70D4
	public static string GetFuncName(object obj, string method); // 0x008A8290-0x008A837C
	public static void Execute<T>(GameObject go, string funcName)
		where T : Component;
	public static void ExecuteAll<T>(GameObject root, string funcName)
		where T : Component;
	public static void ImmediatelyCreateDrawCalls(GameObject root); // 0x008A837C-0x008A8458
	public static string KeyToCaption(KeyCode key); // 0x008A8458-0x008A8B7C

	// Extension methods
	public static void DestroyChildren(this Transform t); // 0x008A5A28-0x008A5B54
	public static T AddMissingComponent<T>(this GameObject go)
		where T : Component;
	public static Vector3[] GetSides(this Camera cam); // 0x008A70D4-0x008A71AC
	public static Vector3[] GetSides(this Camera cam, float depth); // 0x008A786C-0x008A78E4
	public static Vector3[] GetSides(this Camera cam, Transform relativeTo); // 0x008A78E4-0x008A79C8
	public static Vector3[] GetSides(this Camera cam, float depth, Transform relativeTo); // 0x008A71AC-0x008A786C
	public static Vector3[] GetWorldCorners(this Camera cam); // 0x008A7A10-0x008A7AE8
	public static Vector3[] GetWorldCorners(this Camera cam, float depth); // 0x008A8134-0x008A81AC
	public static Vector3[] GetWorldCorners(this Camera cam, Transform relativeTo); // 0x008A81AC-0x008A8290
	public static Vector3[] GetWorldCorners(this Camera cam, float depth, Transform relativeTo); // 0x008A7AE8-0x008A8134
}

[AddComponentMenu] // 0x00512BCC-0x00512C18
[ExecuteInEditMode] // 0x00512BCC-0x00512C18
public class PropertyBinding : MonoBehaviour // TypeDefIndex: 3307
{
	// Fields
	public PropertyReference source; // 0x18
	public PropertyReference target; // 0x20
	public Direction direction; // 0x28
	public UpdateCondition update; // 0x2C
	public bool editMode; // 0x30
	private object mLastValue; // 0x38

	// Nested types
	public enum UpdateCondition // TypeDefIndex: 3308
	{
		OnStart = 0,
		OnUpdate = 1,
		OnLateUpdate = 2,
		OnFixedUpdate = 3
	}

	public enum Direction // TypeDefIndex: 3309
	{
		SourceUpdatesTarget = 0,
		TargetUpdatesSource = 1,
		BiDirectional = 2
	}

	// Constructors
	public PropertyBinding(); // 0x00725FB8-0x00725FCC

	// Methods
	private void Start(); // 0x00725738-0x00725778
	private void Update(); // 0x00725928-0x0072593C
	private void LateUpdate(); // 0x0072593C-0x00725950
	private void FixedUpdate(); // 0x00725950-0x00725964
	private void OnValidate(); // 0x00725964-0x00725980
	[ContextMenu] // 0x0051D9E0-0x0051DA18
	public void UpdateTarget(); // 0x00725778-0x00725928
}

[Serializable]
public class PropertyReference // TypeDefIndex: 3310
{
	// Fields
	[SerializeField] // 0x00515808-0x00515818
	private Component mTarget; // 0x10
	[SerializeField] // 0x00515818-0x00515828
	private string mName; // 0x18
	private FieldInfo mField; // 0x20
	private PropertyInfo mProperty; // 0x28
	private static int s_Hash; // 0x00

	// Properties
	public Component target { get; set; } // 0x00725FCC-0x00725FD4 0x00725FD4-0x00725FE0
	public string name { get; set; } // 0x00725FE0-0x00725FE8 0x00725FE8-0x00725FF4
	public bool isValid { get; } // 0x00725988-0x00725A1C 
	public bool isEnabled { get; } // 0x00725FF4-0x00726114 

	// Constructors
	public PropertyReference(); // 0x00726114-0x0072611C
	public PropertyReference(Component target, string fieldName); // 0x0072611C-0x00726154
	static PropertyReference(); // 0x00726B40-0x00726BB0

	// Methods
	public Type GetPropertyType(); // 0x00725EA4-0x00725FB8
	public override bool Equals(object obj); // 0x00726264-0x00726358
	public override int GetHashCode(); // 0x00726358-0x007263C0
	public void Set(Component target, string methodName); // 0x007263C0-0x007263C8
	public void Clear(); // 0x007263C8-0x007263D0
	public void Reset(); // 0x00725980-0x00725988
	public override string ToString(); // 0x007263D0-0x00726440
	public static string ToString(Component comp, string property); // 0x00726440-0x0072657C
	[DebuggerHidden] // 0x0051DA18-0x0051DA50
	[DebuggerStepThrough] // 0x0051DA18-0x0051DA50
	public object Get(); // 0x00725A1C-0x00725B0C
	[DebuggerHidden] // 0x0051DA50-0x0051DA88
	[DebuggerStepThrough] // 0x0051DA50-0x0051DA88
	public bool Set(object value); // 0x00725B0C-0x00725EA4
	[DebuggerHidden] // 0x0051DA88-0x0051DAC0
	[DebuggerStepThrough] // 0x0051DA88-0x0051DAC0
	private bool Cache(); // 0x00726154-0x00726264
	private bool Convert(ref object value); // 0x0072657C-0x00726688
	public static bool Convert(Type from, Type to); // 0x007269EC-0x00726A70
	public static bool Convert(object value, Type to); // 0x00726A70-0x00726B40
	public static bool Convert(ref object value, Type from, Type to); // 0x00726688-0x007269EC
}

public class RealTime : MonoBehaviour // TypeDefIndex: 3311
{
	// Properties
	public static float time { get; } // 0x0072CF78-0x0072CF80 
	public static float deltaTime { get; } // 0x0072CF80-0x0072CF88 

	// Constructors
	public RealTime(); // 0x0072CF88-0x0072CF90
}

[AddComponentMenu] // 0x00512C18-0x00512CA0
[RequireComponent] // 0x00512C18-0x00512CA0
public class SpringPanel : MonoBehaviour // TypeDefIndex: 3312
{
	// Fields
	public static SpringPanel current; // 0x00
	public Vector3 target; // 0x18
	public float strength; // 0x24
	public OnFinished onFinished; // 0x28
	private UIPanel mPanel; // 0x30
	private Transform mTrans; // 0x38
	private UIScrollView mDrag; // 0x40

	// Nested types
	public delegate void OnFinished(); // TypeDefIndex: 3313; 0x00FBD174-0x00FBD390

	// Constructors
	public SpringPanel(); // 0x00FBD488-0x00FBD508

	// Methods
	private void Start(); // 0x00FBCE88-0x00FBCF08
	private void Update(); // 0x00FBCF08-0x00FBCF14
	protected virtual void AdvanceTowardsPosition(); // 0x00FBCF14-0x00FBD174
	public static SpringPanel Begin(GameObject go, Vector3 pos, float strength); // 0x00FBD390-0x00FBD488
}

public abstract class UIBasicSprite : UIWidget // TypeDefIndex: 3314
{
	// Fields
	[HideInInspector] // 0x00515828-0x00515860
	[SerializeField] // 0x00515828-0x00515860
	protected Type mType; // 0x180
	[HideInInspector] // 0x00515860-0x00515898
	[SerializeField] // 0x00515860-0x00515898
	protected FillDirection mFillDirection; // 0x184
	[HideInInspector] // 0x00515898-0x005158E8
	[Range] // 0x00515898-0x005158E8
	[SerializeField] // 0x00515898-0x005158E8
	protected float mFillAmount; // 0x188
	[HideInInspector] // 0x005158E8-0x00515920
	[SerializeField] // 0x005158E8-0x00515920
	protected bool mInvert; // 0x18C
	[HideInInspector] // 0x00515920-0x00515958
	[SerializeField] // 0x00515920-0x00515958
	protected Flip mFlip; // 0x190
	[NonSerialized]
	private Rect mInnerUV; // 0x194
	[NonSerialized]
	private Rect mOuterUV; // 0x1A4
	public AdvancedType centerType; // 0x1B4
	public AdvancedType leftType; // 0x1B8
	public AdvancedType rightType; // 0x1BC
	public AdvancedType bottomType; // 0x1C0
	public AdvancedType topType; // 0x1C4
	protected static Vector2[] mTempPos; // 0x00
	protected static Vector2[] mTempUVs; // 0x08

	// Properties
	public virtual Type type { get; set; } // 0x007EE54C-0x007EE554 0x007EE554-0x007EE578
	public Flip flip { get; set; } // 0x007EE578-0x007EE580 0x007EE580-0x007EE5A4
	public FillDirection fillDirection { get; set; } // 0x007EE5A4-0x007EE5AC 0x007EE5AC-0x007EE5C8
	public float fillAmount { get; set; } // 0x007EE5C8-0x007EE5D0 0x007EE5D0-0x007EE660
	public override int minWidth { get; } // 0x007EE660-0x007EE808 
	public override int minHeight { get; } // 0x007EE808-0x007EE9B0 
	public bool invert { get; set; } // 0x007EE9B0-0x007EE9B8 0x007EE9B8-0x007EE9E0
	public bool hasBorder { get; } // 0x007E8E40-0x007E8E84 
	public virtual bool premultipliedAlpha { get; } // 0x007EE9E0-0x007EE9E8 
	public virtual float pixelSize { get; } // 0x007EE9E8-0x007EE9F0 
	private Vector4 drawingUVs { get; } // 0x007EE9F0-0x007EEB38 
	private Color32 drawingColor { get; } // 0x007EEB38-0x007EEC6C 

	// Nested types
	public enum Type // TypeDefIndex: 3315
	{
		Simple = 0,
		Sliced = 1,
		Tiled = 2,
		Filled = 3,
		Advanced = 4
	}

	public enum FillDirection // TypeDefIndex: 3316
	{
		Horizontal = 0,
		Vertical = 1,
		Radial90 = 2,
		Radial180 = 3,
		Radial360 = 4
	}

	public enum AdvancedType // TypeDefIndex: 3317
	{
		Invisible = 0,
		Sliced = 1,
		Tiled = 2
	}

	public enum Flip // TypeDefIndex: 3318
	{
		Nothing = 0,
		Horizontally = 1,
		Vertically = 2,
		Both = 3
	}

	// Constructors
	protected UIBasicSprite(); // 0x007E93F0-0x007E941C
	static UIBasicSprite(); // 0x007F307C-0x007F30F8

	// Methods
	protected void Fill(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols, Rect outer, Rect inner); // 0x007E91F8-0x007E931C
	private void SimpleFill(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols); // 0x007EEC6C-0x007EEF08
	private void SlicedFill(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols); // 0x007EEF08-0x007EFB48
	private void TiledFill(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols); // 0x007F0B78-0x007F10E4
	private void FilledFill(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols); // 0x007EFB48-0x007F0B78
	private void HalfFill(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols); // 0x007F2444-0x007F288C
	private void AdvancedFill(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols); // 0x007F10E4-0x007F22D8
	private static bool RadialCut(Vector2[] xy, Vector2[] uv, float fill, bool invert, int corner); // 0x007F22D8-0x007F2444
	private static void RadialCut(Vector2[] xy, float cos, float sin, bool invert, int corner); // 0x007F2B58-0x007F307C
	private static void Fill(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols, float v0x, float v1x, float v0y, float v1y, float u0x, float u1x, float u0y, float u1y, Color col); // 0x007F288C-0x007F2B58
}

[AddComponentMenu] // 0x00512CA0-0x00512CEC
[ExecuteInEditMode] // 0x00512CA0-0x00512CEC
public class UIDrawCall : MonoBehaviour // TypeDefIndex: 3319
{
	// Fields
	private static BetterList<UIDrawCall> mActiveList; // 0x00
	private static BetterList<UIDrawCall> mInactiveList; // 0x08
	[NonSerialized]
	[HideInInspector] // 0x00515958-0x00515968
	public int widgetCount; // 0x18
	[NonSerialized]
	[HideInInspector] // 0x00515968-0x00515978
	public int depthStart; // 0x1C
	[NonSerialized]
	[HideInInspector] // 0x00515978-0x00515988
	public int depthEnd; // 0x20
	[NonSerialized]
	[HideInInspector] // 0x00515988-0x00515998
	public UIPanel manager; // 0x28
	[NonSerialized]
	[HideInInspector] // 0x00515998-0x005159A8
	public UIPanel panel; // 0x30
	[NonSerialized]
	[HideInInspector] // 0x005159A8-0x005159B8
	public Texture2D clipTexture; // 0x38
	[NonSerialized]
	[HideInInspector] // 0x005159B8-0x005159C8
	public bool alwaysOnScreen; // 0x40
	[NonSerialized]
	[HideInInspector] // 0x005159C8-0x005159D8
	public BetterList<Vector3> verts; // 0x48
	[NonSerialized]
	[HideInInspector] // 0x005159D8-0x005159E8
	public BetterList<Vector3> norms; // 0x50
	[NonSerialized]
	[HideInInspector] // 0x005159E8-0x005159F8
	public BetterList<Vector4> tans; // 0x58
	[NonSerialized]
	[HideInInspector] // 0x005159F8-0x00515A08
	public BetterList<Vector2> uvs; // 0x60
	[NonSerialized]
	[HideInInspector] // 0x00515A08-0x00515A18
	public BetterList<Color32> cols; // 0x68
	private Material mMaterial; // 0x70
	private Texture mTexture; // 0x78
	private Shader mShader; // 0x80
	private int mClipCount; // 0x88
	private Transform mTrans; // 0x90
	private Mesh mMesh; // 0x98
	private MeshFilter mFilter; // 0xA0
	private MeshRenderer mRenderer; // 0xA8
	private Material mDynamicMat; // 0xB0
	private int[] mIndices; // 0xB8
	private bool mRebuildMat; // 0xC0
	private bool mLegacyShader; // 0xC1
	private int mRenderQueue; // 0xC4
	private int mTriangles; // 0xC8
	[NonSerialized]
	public bool isDirty; // 0xCC
	[NonSerialized]
	private bool mTextureClip; // 0xCD
	public OnRenderCallback onRender; // 0xD0
	private const int maxIndexBufferCache = 10; // Metadata: 0x001F5572
	private static List<int[]> mCache; // 0x10
	private static int[] ClipRange; // 0x18
	private static int[] ClipArgs; // 0x20

	// Properties
	[Obsolete] // 0x00528C4C-0x00528C84
	public static BetterList<UIDrawCall> list { get; } // 0x0082F6CC-0x0082F734 
	public static BetterList<UIDrawCall> activeList { get; } // 0x0082F734-0x0082F79C 
	public static BetterList<UIDrawCall> inactiveList { get; } // 0x0082F79C-0x0082F804 
	public int renderQueue { get; set; } // 0x0082F804-0x0082F80C 0x0082F80C-0x0082F8C4
	public int sortingOrder { get; set; } // 0x0082F8C4-0x0082F95C 0x0082F95C-0x0082FA1C
	public int finalRenderQueue { get; } // 0x0082FA1C-0x0082FAB4 
	public Transform cachedTransform { get; } // 0x0082FAB4-0x0082FB44 
	public Material baseMaterial { get; set; } // 0x0082FB44-0x0082FB4C 0x0082FB4C-0x0082FBDC
	public Material dynamicMaterial { get; } // 0x0082FBDC-0x0082FBE4 
	public Texture mainTexture { get; set; } // 0x0082FBE4-0x0082FBEC 0x0082FBEC-0x0082FC98
	public Shader shader { get; set; } // 0x0082FC98-0x0082FCA0 0x0082FCA0-0x0082FD30
	public int triangles { get; } // 0x0082FD30-0x0082FDB4 
	public bool isClipped { get; } // 0x0082FDB4-0x0082FDC4 

	// Nested types
	public enum Clipping // TypeDefIndex: 3320
	{
		None = 0,
		TextureMask = 1,
		SoftClip = 3,
		ConstrainButDontClip = 4
	}

	public delegate void OnRenderCallback(Material mat); // TypeDefIndex: 3321; 0x00831A98-0x00831E4C

	// Constructors
	public UIDrawCall(); // 0x00832F00-0x00833020
	static UIDrawCall(); // 0x00833020-0x00833100

	// Methods
	private void CreateMaterial(); // 0x0082FDC4-0x00830598
	private Material RebuildMaterial(); // 0x00830598-0x0083072C
	private void UpdateMaterials(); // 0x0083072C-0x008308D8
	public void UpdateGeometry(int widgetCount); // 0x008308D8-0x0083120C
	private int[] GenerateCachedIndexBuffer(int vertexCount, int indexCount); // 0x0083120C-0x008314BC
	private void OnWillRenderObject(); // 0x008314BC-0x00831A98
	private void SetClipping(int index, Vector4 cr, Vector2 soft, float angle); // 0x00831E4C-0x008320A4
	private void Awake(); // 0x008320A4-0x008322EC
	private void OnEnable(); // 0x008322EC-0x008322F8
	private void OnDisable(); // 0x008322F8-0x008323EC
	private void OnDestroy(); // 0x008323EC-0x00832460
	public static UIDrawCall Create(UIPanel panel, Material mat, Texture tex, Shader shader); // 0x00832460-0x008324F0
	private static UIDrawCall Create(string name, UIPanel pan, Material mat, Texture tex, Shader shader); // 0x008324F0-0x00832610
	private static UIDrawCall Create(string name); // 0x00832610-0x00832814
	public static void ClearAll(); // 0x00832814-0x008329F0
	public static void ReleaseAll(); // 0x008329F0-0x00832A50
	public static void ReleaseInactive(); // 0x00832A50-0x00832BE0
	public static int Count(UIPanel panel); // 0x00832BE0-0x00832D10
	public static void Destroy(UIDrawCall dc); // 0x00832D10-0x00832F00
}

[AddComponentMenu] // 0x00512CEC-0x00512D24
public class UIEventListener : MonoBehaviour // TypeDefIndex: 3322
{
	// Fields
	public object parameter; // 0x18
	public VoidDelegate onSubmit; // 0x20
	public VoidDelegate onClick; // 0x28
	public VoidDelegate onDoubleClick; // 0x30
	public BoolDelegate onHover; // 0x38
	public BoolDelegate onPress; // 0x40
	public BoolDelegate onSelect; // 0x48
	public FloatDelegate onScroll; // 0x50
	public VoidDelegate onDragStart; // 0x58
	public VectorDelegate onDrag; // 0x60
	public VoidDelegate onDragOver; // 0x68
	public VoidDelegate onDragOut; // 0x70
	public VoidDelegate onDragEnd; // 0x78
	public ObjectDelegate onDrop; // 0x80
	public KeyCodeDelegate onKey; // 0x88
	public BoolDelegate onTooltip; // 0x90

	// Properties
	private bool isColliderEnabled { get; } // 0x00833294-0x008333B8 

	// Nested types
	public delegate void VoidDelegate(GameObject go); // TypeDefIndex: 3323; 0x00833404-0x008337B8

	public delegate void BoolDelegate(GameObject go, bool state); // TypeDefIndex: 3324; 0x008338B0-0x00833C90

	public delegate void FloatDelegate(GameObject go, float delta); // TypeDefIndex: 3325; 0x00833DB0-0x00834198

	public delegate void VectorDelegate(GameObject go, Vector2 delta); // TypeDefIndex: 3326; 0x0083422C-0x0083462C

	public delegate void ObjectDelegate(GameObject go, GameObject obj); // TypeDefIndex: 3327; 0x00834760-0x00834B40

	public delegate void KeyCodeDelegate(GameObject go, KeyCode key); // TypeDefIndex: 3328; 0x00834BA0-0x00834F80

	// Constructors
	public UIEventListener(); // 0x0083509C-0x008350A4

	// Methods
	private void OnSubmit(); // 0x008333B8-0x00833404
	private void OnClick(); // 0x008337B8-0x00833804
	private void OnDoubleClick(); // 0x00833804-0x00833850
	private void OnHover(bool isOver); // 0x00833850-0x008338B0
	private void OnPress(bool isPressed); // 0x00833C90-0x00833CF0
	private void OnSelect(bool selected); // 0x00833CF0-0x00833D50
	private void OnScroll(float delta); // 0x00833D50-0x00833DB0
	private void OnDragStart(); // 0x00834198-0x008341D4
	private void OnDrag(Vector2 delta); // 0x008341D4-0x0083422C
	private void OnDragOver(); // 0x0083462C-0x00834678
	private void OnDragOut(); // 0x00834678-0x008346C4
	private void OnDragEnd(); // 0x008346C4-0x00834700
	private void OnDrop(GameObject go); // 0x00834700-0x00834760
	private void OnKey(KeyCode key); // 0x00834B40-0x00834BA0
	private void OnTooltip(bool show); // 0x00834F80-0x00834FE0
	public static UIEventListener Get(GameObject go); // 0x00834FE0-0x0083509C
}

public class UIGeometry // TypeDefIndex: 3329
{
	// Fields
	public BetterList<Vector3> verts; // 0x10
	public BetterList<Vector2> uvs; // 0x18
	public BetterList<Color32> cols; // 0x20
	private BetterList<Vector3> mRtpVerts; // 0x28
	private Vector3 mRtpNormal; // 0x30
	private Vector4 mRtpTan; // 0x3C

	// Properties
	public bool hasVertices { get; } // 0x0083C500-0x0083C528 
	public bool hasTransformed { get; } // 0x0083C528-0x0083C56C 

	// Constructors
	public UIGeometry(); // 0x0083CA50-0x0083CB30

	// Methods
	public void Clear(); // 0x0083C56C-0x0083C604
	public void ApplyTransform(Matrix4x4 widgetToPanel, bool generateNormals = true /* Metadata: 0x001F5586 */); // 0x0083C604-0x0083C7BC
	public void WriteToBuffers(BetterList<Vector3> v, BetterList<Vector2> u, BetterList<Color32> c, BetterList<Vector3> n, BetterList<Vector4> t); // 0x0083C7BC-0x0083CA50
}

public abstract class UIRect : MonoBehaviour // TypeDefIndex: 3330
{
	// Fields
	public AnchorPoint leftAnchor; // 0x18
	public AnchorPoint rightAnchor; // 0x20
	public AnchorPoint bottomAnchor; // 0x28
	public AnchorPoint topAnchor; // 0x30
	public AnchorUpdate updateAnchors; // 0x38
	protected GameObject mGo; // 0x40
	protected Transform mTrans; // 0x48
	protected BetterList<UIRect> mChildren; // 0x50
	protected bool mChanged; // 0x58
	protected bool mStarted; // 0x59
	protected bool mParentFound; // 0x5A
	[NonSerialized]
	private bool mUpdateAnchors; // 0x5B
	[NonSerialized]
	private int mUpdateFrame; // 0x5C
	[NonSerialized]
	private bool mAnchorsCached; // 0x60
	[NonSerialized]
	private UIRoot mRoot; // 0x68
	[NonSerialized]
	private UIRect mParent; // 0x70
	[NonSerialized]
	private bool mRootSet; // 0x78
	[NonSerialized]
	protected Camera mCam; // 0x80
	[NonSerialized]
	public float finalAlpha; // 0x88
	protected static Vector3[] mSides; // 0x00

	// Properties
	public GameObject cachedGameObject { get; } // 0x00762BAC-0x00762C3C 
	public Transform cachedTransform { get; } // 0x0075BA18-0x0075BAA8 
	public Camera anchorCamera { get; } // 0x0075E038-0x0075E068 
	public bool isFullyAnchored { get; } // 0x00762E90-0x00762FC4 
	public virtual bool isAnchoredHorizontally { get; } // 0x00762FC4-0x00763090 
	public virtual bool isAnchoredVertically { get; } // 0x00763090-0x0076315C 
	public virtual bool canBeAnchored { get; } // 0x0076315C-0x00763164 
	public UIRect parent { get; } // 0x00763164-0x00763214 
	public UIRoot root { get; } // 0x00763214-0x0076331C 
	public bool isAnchored { get; } // 0x0076331C-0x00763464 
	public abstract float alpha { get; set; }
	public abstract Vector3[] localCorners { get; }
	public abstract Vector3[] worldCorners { get; }
	protected float cameraRayDistance { get; } // 0x00763464-0x0076375C 

	// Nested types
	[Serializable]
	public class AnchorPoint // TypeDefIndex: 3331
	{
		// Fields
		public Transform target; // 0x10
		public float relative; // 0x18
		public int absolute; // 0x1C
		[NonSerialized]
		public UIRect rect; // 0x20
		[NonSerialized]
		public Camera targetCam; // 0x28

		// Constructors
		public AnchorPoint(); // 0x00764940-0x00764948
		public AnchorPoint(float relative); // 0x00764948-0x0076497C

		// Methods
		public void Set(float relative, float absolute); // 0x007649E0-0x00764A68
		public void Set(Transform target, float relative, float absolute); // 0x00764A68-0x00764B00
		public void SetToNearest(float abs0, float abs1, float abs2); // 0x00764B00-0x00764B1C
		public void SetToNearest(float rel0, float rel1, float rel2, float abs0, float abs1, float abs2); // 0x00764B1C-0x00764C04
		public void SetHorizontal(Transform parent, float localPos); // 0x00764C04-0x00764DD0
		public void SetVertical(Transform parent, float localPos); // 0x00764DD0-0x00764F98
		public Vector3[] GetSides(Transform relativeTo); // 0x00764F98-0x0076512C
	}

	public enum AnchorUpdate // TypeDefIndex: 3332
	{
		OnEnable = 0,
		OnUpdate = 1,
		OnStart = 2,
		None = 3
	}

	// Constructors
	protected UIRect(); // 0x00764838-0x00764940
	static UIRect(); // 0x0076497C-0x007649E0

	// Methods
	public abstract float CalculateFinalAlpha(int frameID);
	public virtual void Invalidate(bool includeChildren); // 0x0076375C-0x007637F4
	public virtual Vector3[] GetSides(Transform relativeTo); // 0x007637F4-0x00763A78
	protected Vector3 GetLocalPos(AnchorPoint ac, Transform trans); // 0x00763A78-0x00763CF8
	protected virtual void OnEnable(); // 0x00763CF8-0x00763D54
	protected virtual void OnInit(); // 0x00763D54-0x00763E1C
	protected virtual void OnDisable(); // 0x00763E1C-0x00763EC8
	protected void Start(); // 0x00763EC8-0x00763F0C
	public void ForceUpdate(); // 0x00763F0C-0x00763F18
	public void Update(); // 0x00763F18-0x00763F98
	protected void UpdateAnchorsInternal(int frame); // 0x00763F98-0x00764274
	public void UpdateAnchors(); // 0x00764274-0x007642C4
	protected abstract void OnAnchor();
	public void SetAnchor(Transform t); // 0x007642C4-0x00764324
	public void SetAnchor(GameObject go); // 0x00764324-0x00764400
	public void SetAnchor(GameObject go, int left, int bottom, int right, int top); // 0x00764400-0x00764564
	public void ResetAnchors(); // 0x00762C3C-0x00762E90
	public void ResetAndUpdateAnchors(); // 0x00764684-0x007646A8
	public abstract void SetRect(float x, float y, float width, float height);
	private void FindCameraFor(AnchorPoint ap); // 0x00764564-0x00764684
	public virtual void ParentHasChanged(); // 0x007646A8-0x00764834
	protected abstract void OnStart();
	protected virtual void OnUpdate(); // 0x00764834-0x00764838
}

[AddComponentMenu] // 0x00512D24-0x00512D70
[ExecuteInEditMode] // 0x00512D24-0x00512D70
public class UISnapshotPoint : MonoBehaviour // TypeDefIndex: 3333
{
	// Fields
	public bool isOrthographic; // 0x18
	public float nearClip; // 0x1C
	public float farClip; // 0x20
	[Range] // 0x00515A18-0x00515A34
	public int fieldOfView; // 0x24
	public float orthoSize; // 0x28
	public Texture2D thumbnail; // 0x30

	// Constructors
	public UISnapshotPoint(); // 0x0080708C-0x008070B4

	// Methods
	private void Start(); // 0x00807010-0x0080708C
}

[AddComponentMenu] // 0x00512D70-0x00512DBC
[ExecuteInEditMode] // 0x00512D70-0x00512DBC
public class UIWidget : UIRect // TypeDefIndex: 3334
{
	// Fields
	[HideInInspector] // 0x00515A34-0x00515A6C
	[SerializeField] // 0x00515A34-0x00515A6C
	protected Color mColor; // 0x8C
	[HideInInspector] // 0x00515A6C-0x00515AA4
	[SerializeField] // 0x00515A6C-0x00515AA4
	protected Pivot mPivot; // 0x9C
	[HideInInspector] // 0x00515AA4-0x00515ADC
	[SerializeField] // 0x00515AA4-0x00515ADC
	protected int mWidth; // 0xA0
	[HideInInspector] // 0x00515ADC-0x00515B14
	[SerializeField] // 0x00515ADC-0x00515B14
	protected int mHeight; // 0xA4
	[HideInInspector] // 0x00515B14-0x00515B4C
	[SerializeField] // 0x00515B14-0x00515B4C
	protected int mDepth; // 0xA8
	public OnDimensionsChanged onChange; // 0xB0
	public OnPostFillCallback onPostFill; // 0xB8
	public UIDrawCall.OnRenderCallback mOnRender; // 0xC0
	public bool autoResizeBoxCollider; // 0xC8
	public bool hideIfOffScreen; // 0xC9
	public AspectRatioSource keepAspectRatio; // 0xCC
	public float aspectRatio; // 0xD0
	public HitCheck hitCheck; // 0xD8
	[NonSerialized]
	public UIPanel panel; // 0xE0
	[NonSerialized]
	public UIGeometry geometry; // 0xE8
	[NonSerialized]
	public bool fillGeometry; // 0xF0
	[NonSerialized]
	protected bool mPlayMode; // 0xF1
	[NonSerialized]
	protected Vector4 mDrawRegion; // 0xF4
	[NonSerialized]
	private Matrix4x4 mLocalToPanel; // 0x104
	[NonSerialized]
	private bool mIsVisibleByAlpha; // 0x144
	[NonSerialized]
	private bool mIsVisibleByPanel; // 0x145
	[NonSerialized]
	private bool mIsInFront; // 0x146
	[NonSerialized]
	private float mLastAlpha; // 0x148
	[NonSerialized]
	private bool mMoved; // 0x14C
	[NonSerialized]
	public UIDrawCall drawCall; // 0x150
	[NonSerialized]
	protected Vector3[] mCorners; // 0x158
	[NonSerialized]
	private int mAlphaFrameID; // 0x160
	private int mMatrixFrame; // 0x164
	private Vector3 mOldV0; // 0x168
	private Vector3 mOldV1; // 0x174

	// Properties
	public UIDrawCall.OnRenderCallback onRender { get; set; } // 0x00813414-0x0081341C 0x0081341C-0x0081356C
	public Vector4 drawRegion { get; set; } // 0x0081356C-0x00813578 0x0080E4F4-0x0080E5FC
	public Vector2 pivotOffset { get; } // 0x008081D0-0x008081DC 
	public int width { get; set; } // 0x00813628-0x00813630 0x00808734-0x00808964
	public int height { get; set; } // 0x00813780-0x00813788 0x00808964-0x00808B84
	public Color color { get; set; } // 0x00813788-0x00813794 0x00805540-0x008055D8
	public override float alpha { get; set; } // 0x00813794-0x0081379C 0x0081379C-0x008137C0
	public bool isVisible { get; } // 0x008137C0-0x00813864 
	public bool hasVertices { get; } // 0x00813864-0x00813878 
	public Pivot rawPivot { get; set; } // 0x00813878-0x00813880 0x00813880-0x008138D8
	public Pivot pivot { get; set; } // 0x008138D8-0x008138E0 0x0080CB9C-0x0080CE44
	public int depth { get; set; } // 0x008138E0-0x008138E8 0x0080EFD4-0x0080F0FC
	public int raycastDepth { get; } // 0x008138E8-0x008139C4 
	public override Vector3[] localCorners { get; } // 0x00813B74-0x00813D00 
	public virtual Vector2 localSize { get; } // 0x00813D00-0x00813E1C 
	public Vector3 localCenter { get; } // 0x00813E1C-0x00813F00 
	public override Vector3[] worldCorners { get; } // 0x00813F00-0x00814074 
	public Vector3 worldCenter { get; } // 0x00814074-0x008140B8 
	public virtual Vector4 drawingDimensions { get; } // 0x008140B8-0x00814298 
	public virtual Material material { get; set; } // 0x00814298-0x008142A0 0x008142A0-0x00814334
	public virtual Texture mainTexture { get; set; } // 0x00814334-0x008143E8 0x008143E8-0x0081447C
	public virtual Shader shader { get; set; } // 0x0081447C-0x00814530 0x00814530-0x008145C4
	[Obsolete] // 0x00528C84-0x00528CBC
	public Vector2 relativeSize { get; } // 0x008145C4-0x00814624 
	public bool hasBoxCollider { get; } // 0x00814624-0x00814754 
	public virtual int minWidth { get; } // 0x00816C88-0x00816C90 
	public virtual int minHeight { get; } // 0x00816C90-0x00816C98 
	public virtual Vector4 border { get; set; } // 0x00807918-0x00807978 0x00816C98-0x00816C9C

	// Nested types
	public enum Pivot // TypeDefIndex: 3335
	{
		TopLeft = 0,
		Top = 1,
		TopRight = 2,
		Left = 3,
		Center = 4,
		Right = 5,
		BottomLeft = 6,
		Bottom = 7,
		BottomRight = 8
	}

	public delegate void OnDimensionsChanged(); // TypeDefIndex: 3336; 0x0081660C-0x00816828

	public delegate void OnPostFillCallback(UIWidget widget, int bufferOffset, BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols); // TypeDefIndex: 3337; 0x00809010-0x00809464

	public enum AspectRatioSource // TypeDefIndex: 3338
	{
		Free = 0,
		BasedOnWidth = 1,
		BasedOnHeight = 2
	}

	public delegate bool HitCheck(Vector3 worldPos); // TypeDefIndex: 3339; 0x00816DD8-0x00817068

	// Constructors
	public UIWidget(); // 0x00816CA0-0x00816DC8

	// Methods
	public void SetDimensions(int w, int h); // 0x00813630-0x00813780
	public override Vector3[] GetSides(Transform relativeTo); // 0x00814754-0x008149A8
	public override float CalculateFinalAlpha(int frameID); // 0x008149A8-0x008149E0
	protected void UpdateFinalAlpha(int frameID); // 0x008149E0-0x00814ABC
	public override void Invalidate(bool includeChildren); // 0x00814ABC-0x00814C2C
	public float CalculateCumulativeAlpha(int frameID); // 0x00814C2C-0x00814CF0
	public override void SetRect(float x, float y, float width, float height); // 0x00814D40-0x008150E0
	public void ResizeCollider(); // 0x00813578-0x00813628
	[DebuggerHidden] // 0x0051DAC0-0x0051DAF8
	[DebuggerStepThrough] // 0x0051DAC0-0x0051DAF8
	public static int FullCompareFunc(UIWidget left, UIWidget right); // 0x008150E0-0x00815190
	[DebuggerHidden] // 0x0051DAF8-0x0051DB30
	[DebuggerStepThrough] // 0x0051DAF8-0x0051DB30
	public static int PanelCompareFunc(UIWidget left, UIWidget right); // 0x00815190-0x00815308
	public Bounds CalculateBounds(); // 0x00815308-0x00815310
	public Bounds CalculateBounds(Transform relativeParent); // 0x0080AD44-0x0080AFE8
	public void SetDirty(); // 0x00815310-0x008153D4
	public void RemoveFromPanel(); // 0x008074D0-0x00807568
	public virtual void MarkAsChanged(); // 0x008153D4-0x008154FC
	public UIPanel CreatePanel(); // 0x008139C4-0x00813B74
	public void CheckLayer(); // 0x008154FC-0x00815644
	public override void ParentHasChanged(); // 0x00815644-0x0081578C
	protected virtual void Awake(); // 0x0081578C-0x008157C4
	protected override void OnInit(); // 0x00808BA0-0x00808CD4
	protected virtual void UpgradeFrom265(); // 0x008157C4-0x008158C0
	protected override void OnStart(); // 0x008158C0-0x008158C4
	protected override void OnAnchor(); // 0x008158C4-0x0081628C
	protected override void OnUpdate(); // 0x00808D14-0x00808D9C
	private void OnApplicationPause(bool paused); // 0x0081628C-0x008162A4
	protected override void OnDisable(); // 0x008162A4-0x008162CC
	private void OnDestroy(); // 0x008162CC-0x008162D0
	public bool UpdateVisibility(bool visibleByAlpha, bool visibleByPanel); // 0x00814CF0-0x00814D40
	public bool UpdateTransform(int frame); // 0x008162D0-0x0081660C
	public bool UpdateGeometry(int frame); // 0x00816828-0x00816C6C
	public void WriteToBuffers(BetterList<Vector3> v, BetterList<Vector2> u, BetterList<Color32> c, BetterList<Vector3> n, BetterList<Vector4> t); // 0x00816C6C-0x00816C88
	public virtual void MakePixelPerfect(); // 0x00808468-0x00808714
	public virtual void OnFill(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols); // 0x00816C9C-0x00816CA0
}

[ExecuteInEditMode] // 0x00512DBC-0x00512DCC
public class AnimatedAlpha : MonoBehaviour // TypeDefIndex: 3340
{
	// Fields
	[Range] // 0x00515B4C-0x00515B64
	public float alpha; // 0x18
	private UIWidget mWidget; // 0x20
	private UIPanel mPanel; // 0x28

	// Constructors
	public AnimatedAlpha(); // 0x0070BDE8-0x0070BDF8

	// Methods
	private void OnEnable(); // 0x0070BC84-0x0070BCF8
	private void LateUpdate(); // 0x0070BCF8-0x0070BDE8
}

[ExecuteInEditMode] // 0x00512DCC-0x00512E40
[RequireComponent] // 0x00512DCC-0x00512E40
public class AnimatedColor : MonoBehaviour // TypeDefIndex: 3341
{
	// Fields
	public Color color; // 0x18
	private UIWidget mWidget; // 0x28

	// Constructors
	public AnimatedColor(); // 0x0070BE7C-0x0070BEB0

	// Methods
	private void OnEnable(); // 0x0070BDF8-0x0070BE54
	private void LateUpdate(); // 0x0070BE54-0x0070BE7C
}

[ExecuteInEditMode] // 0x00512E40-0x00512E50
public class AnimatedWidget : MonoBehaviour // TypeDefIndex: 3342
{
	// Fields
	public float width; // 0x18
	public float height; // 0x1C
	private UIWidget mWidget; // 0x20

	// Constructors
	public AnimatedWidget(); // 0x0070C00C-0x0070C01C

	// Methods
	private void OnEnable(); // 0x0070BEB0-0x0070BF0C
	private void LateUpdate(); // 0x0070BF0C-0x0070C00C
}

[AddComponentMenu] // 0x00512E50-0x00512E88
public class SpringPosition : MonoBehaviour // TypeDefIndex: 3343
{
	// Fields
	public static SpringPosition current; // 0x00
	public Vector3 target; // 0x18
	public float strength; // 0x24
	public bool worldSpace; // 0x28
	public bool ignoreTimeScale; // 0x29
	public bool updateScrollView; // 0x2A
	public OnFinished onFinished; // 0x30
	[HideInInspector] // 0x00515B64-0x00515B9C
	[SerializeField] // 0x00515B64-0x00515B9C
	private GameObject eventReceiver; // 0x38
	[HideInInspector] // 0x00515B9C-0x00515BD4
	[SerializeField] // 0x00515B9C-0x00515BD4
	public string callWhenFinished; // 0x40
	private Transform mTrans; // 0x48
	private float mThreshold; // 0x50
	private UIScrollView mSv; // 0x58

	// Nested types
	public delegate void OnFinished(); // TypeDefIndex: 3344; 0x00FBDAC8-0x00FBDCE4

	// Constructors
	public SpringPosition(); // 0x00FBDDF0-0x00FBDE70

	// Methods
	private void Start(); // 0x00FBD558-0x00FBD5FC
	private void Update(); // 0x00FBD5FC-0x00FBD9EC
	private void NotifyListeners(); // 0x00FBD9EC-0x00FBDAC8
	public static SpringPosition Begin(GameObject go, Vector3 pos, float strength); // 0x00FBDCE4-0x00FBDDF0
}

[AddComponentMenu] // 0x00512E88-0x00512EC0
public class TweenAlpha : UITweener // TypeDefIndex: 3345
{
	// Fields
	[Range] // 0x00515BD4-0x00515BEC
	public float from; // 0x78
	[Range] // 0x00515BEC-0x00515C04
	public float to; // 0x7C
	private bool mCached; // 0x80
	private UIRect mRect; // 0x88
	private Material mMat; // 0x90
	private SpriteRenderer mSr; // 0x98

	// Properties
	[Obsolete] // 0x00528CBC-0x00528CF4
	public float alpha { get; set; } // 0x007E4008-0x007E400C 0x007E4150-0x007E4154
	public float value { get; set; } // 0x007E400C-0x007E4150 0x007E4154-0x007E42E4

	// Constructors
	public TweenAlpha(); // 0x007E4608-0x007E4618

	// Methods
	private void Cache(); // 0x007E42E4-0x007E4480
	protected override void OnUpdate(float factor, bool isFinished); // 0x007E4480-0x007E4510
	public static TweenAlpha Begin(GameObject go, float duration, float alpha); // 0x007E4510-0x007E45C0
	public override void SetStartToCurrentValue(); // 0x007E45C0-0x007E45E4
	public override void SetEndToCurrentValue(); // 0x007E45E4-0x007E4608
}

[AddComponentMenu] // 0x00512EC0-0x00512EF8
public class TweenColor : UITweener // TypeDefIndex: 3346
{
	// Fields
	public Color from; // 0x78
	public Color to; // 0x88
	private bool mCached; // 0x98
	private UIWidget mWidget; // 0xA0
	private Material mMat; // 0xA8
	private Light mLight; // 0xB0
	private SpriteRenderer mSr; // 0xB8

	// Properties
	[Obsolete] // 0x00528CF4-0x00528D2C
	public Color color { get; set; } // 0x007E47C8-0x007E47CC 0x007E4970-0x007E4974
	public Color value { get; set; } // 0x007E47CC-0x007E4970 0x007E4974-0x007E4BB0

	// Constructors
	public TweenColor(); // 0x007E4D38-0x007E4D7C

	// Methods
	private void Cache(); // 0x007E4618-0x007E47C8
	protected override void OnUpdate(float factor, bool isFinished); // 0x007E4BB0-0x007E4BF8
	public static TweenColor Begin(GameObject go, float duration, Color color); // 0x007E4BF8-0x007E4CD0
	[ContextMenu] // 0x0051DB30-0x0051DB68
	public override void SetStartToCurrentValue(); // 0x007E4CD0-0x007E4CF8
	[ContextMenu] // 0x0051DB68-0x0051DBA0
	public override void SetEndToCurrentValue(); // 0x007E4CF8-0x007E4D20
	[ContextMenu] // 0x0051DBA0-0x0051DBD8
	private void SetCurrentValueToStart(); // 0x007E4D20-0x007E4D2C
	[ContextMenu] // 0x0051DBD8-0x0051DC10
	private void SetCurrentValueToEnd(); // 0x007E4D2C-0x007E4D38
}

[AddComponentMenu] // 0x00512EF8-0x00512F80
[RequireComponent] // 0x00512EF8-0x00512F80
public class TweenFOV : UITweener // TypeDefIndex: 3347
{
	// Fields
	public float from; // 0x78
	public float to; // 0x7C
	private Camera mCam; // 0x80

	// Properties
	public Camera cachedCamera { get; } // 0x007E4D7C-0x007E4E14 
	[Obsolete] // 0x00528D2C-0x00528D64
	public float fov { get; set; } // 0x007E4E14-0x007E4E18 0x007E4E38-0x007E4E3C
	public float value { get; set; } // 0x007E4E18-0x007E4E38 0x007E4E3C-0x007E4E6C

	// Constructors
	public TweenFOV(); // 0x007E4F90-0x007E4FA4

	// Methods
	protected override void OnUpdate(float factor, bool isFinished); // 0x007E4E6C-0x007E4E88
	public static TweenFOV Begin(GameObject go, float duration, float to); // 0x007E4E88-0x007E4F38
	[ContextMenu] // 0x0051DC10-0x0051DC48
	public override void SetStartToCurrentValue(); // 0x007E4F38-0x007E4F5C
	[ContextMenu] // 0x0051DC48-0x0051DC80
	public override void SetEndToCurrentValue(); // 0x007E4F5C-0x007E4F80
	[ContextMenu] // 0x0051DC80-0x0051DCB8
	private void SetCurrentValueToStart(); // 0x007E4F80-0x007E4F88
	[ContextMenu] // 0x0051DCB8-0x0051DCF0
	private void SetCurrentValueToEnd(); // 0x007E4F88-0x007E4F90
}

[AddComponentMenu] // 0x00512F80-0x00513008
[RequireComponent] // 0x00512F80-0x00513008
public class TweenHeight : UITweener // TypeDefIndex: 3348
{
	// Fields
	public int from; // 0x78
	public int to; // 0x7C
	public bool updateTable; // 0x80
	private UIWidget mWidget; // 0x88
	private UITable mTable; // 0x90

	// Properties
	public UIWidget cachedWidget { get; } // 0x007E4FA4-0x007E503C 
	[Obsolete] // 0x00528D64-0x00528D9C
	public int height { get; set; } // 0x007E503C-0x007E5040 0x007E5060-0x007E5064
	public int value { get; set; } // 0x007E5040-0x007E5060 0x007E5064-0x007E5094

	// Constructors
	public TweenHeight(); // 0x007E5340-0x007E5354

	// Methods
	protected override void OnUpdate(float factor, bool isFinished); // 0x007E5094-0x007E5224
	public static TweenHeight Begin(UIWidget widget, float duration, int height); // 0x007E5224-0x007E52E8
	[ContextMenu] // 0x0051DCF0-0x0051DD28
	public override void SetStartToCurrentValue(); // 0x007E52E8-0x007E530C
	[ContextMenu] // 0x0051DD28-0x0051DD60
	public override void SetEndToCurrentValue(); // 0x007E530C-0x007E5330
	[ContextMenu] // 0x0051DD60-0x0051DD98
	private void SetCurrentValueToStart(); // 0x007E5330-0x007E5338
	[ContextMenu] // 0x0051DD98-0x0051DDD0
	private void SetCurrentValueToEnd(); // 0x007E5338-0x007E5340
}

[AddComponentMenu] // 0x00513008-0x00513090
[RequireComponent] // 0x00513008-0x00513090
public class TweenOrthoSize : UITweener // TypeDefIndex: 3349
{
	// Fields
	public float from; // 0x78
	public float to; // 0x7C
	private Camera mCam; // 0x80

	// Properties
	public Camera cachedCamera { get; } // 0x007E5354-0x007E53EC 
	[Obsolete] // 0x00528D9C-0x00528DD4
	public float orthoSize { get; set; } // 0x007E53EC-0x007E53F0 0x007E5410-0x007E5414
	public float value { get; set; } // 0x007E53F0-0x007E5410 0x007E5414-0x007E5444

	// Constructors
	public TweenOrthoSize(); // 0x007E5558-0x007E5568

	// Methods
	protected override void OnUpdate(float factor, bool isFinished); // 0x007E5444-0x007E5460
	public static TweenOrthoSize Begin(GameObject go, float duration, float to); // 0x007E5460-0x007E5510
	public override void SetStartToCurrentValue(); // 0x007E5510-0x007E5534
	public override void SetEndToCurrentValue(); // 0x007E5534-0x007E5558
}

[AddComponentMenu] // 0x00513090-0x005130C8
public class TweenPosition : UITweener // TypeDefIndex: 3350
{
	// Fields
	public Vector3 from; // 0x78
	public Vector3 to; // 0x84
	[HideInInspector] // 0x00515C04-0x00515C14
	public bool worldSpace; // 0x90
	private Transform mTrans; // 0x98
	private UIRect mRect; // 0xA0

	// Properties
	public Transform cachedTransform { get; } // 0x007E5568-0x007E55F8 
	[Obsolete] // 0x00528DD4-0x00528E0C
	public Vector3 position { get; set; } // 0x007E55F8-0x007E55FC 0x007E563C-0x007E5640
	public Vector3 value { get; set; } // 0x007E55FC-0x007E563C 0x007E5640-0x007E57C8

	// Constructors
	public TweenPosition(); // 0x007E5B0C-0x007E5B14

	// Methods
	private void Awake(); // 0x007E57C8-0x007E5820
	protected override void OnUpdate(float factor, bool isFinished); // 0x007E5820-0x007E5900
	public static TweenPosition Begin(GameObject go, float duration, Vector3 pos); // 0x007E5900-0x007E59C8
	public static TweenPosition Begin(GameObject go, float duration, Vector3 pos, bool worldSpace); // 0x007E59C8-0x007E5AA4
	[ContextMenu] // 0x0051DDD0-0x0051DE08
	public override void SetStartToCurrentValue(); // 0x007E5AA4-0x007E5ACC
	[ContextMenu] // 0x0051DE08-0x0051DE40
	public override void SetEndToCurrentValue(); // 0x007E5ACC-0x007E5AF4
	[ContextMenu] // 0x0051DE40-0x0051DE78
	private void SetCurrentValueToStart(); // 0x007E5AF4-0x007E5B00
	[ContextMenu] // 0x0051DE78-0x0051DEB0
	private void SetCurrentValueToEnd(); // 0x007E5B00-0x007E5B0C
}

[AddComponentMenu] // 0x005130C8-0x00513100
public class TweenRotation : UITweener // TypeDefIndex: 3351
{
	// Fields
	public Vector3 from; // 0x78
	public Vector3 to; // 0x84
	private bool quaternionLerp; // 0x90
	private Transform mTrans; // 0x98

	// Properties
	public Transform cachedTransform { get; } // 0x007E5B14-0x007E5BA4 
	[Obsolete] // 0x00528E0C-0x00528E44
	public Quaternion rotation { get; set; } // 0x007E5BA4-0x007E5BA8 0x007E5BC8-0x007E5BCC
	public Quaternion value { get; set; } // 0x007E5BA8-0x007E5BC8 0x007E5BCC-0x007E5C1C

	// Constructors
	public TweenRotation(); // 0x007E6070-0x007E6078

	// Methods
	protected override void OnUpdate(float factor, bool isFinished); // 0x007E5C1C-0x007E5DDC
	public static TweenRotation Begin(GameObject go, float duration, Quaternion rot); // 0x007E5DDC-0x007E5EC8
	[ContextMenu] // 0x0051DEB0-0x0051DEE8
	public override void SetStartToCurrentValue(); // 0x007E5EC8-0x007E5F0C
	[ContextMenu] // 0x0051DEE8-0x0051DF20
	public override void SetEndToCurrentValue(); // 0x007E5F0C-0x007E5F50
	[ContextMenu] // 0x0051DF20-0x0051DF58
	private void SetCurrentValueToStart(); // 0x007E5F50-0x007E5FE0
	[ContextMenu] // 0x0051DF58-0x0051DF90
	private void SetCurrentValueToEnd(); // 0x007E5FE0-0x007E6070
}

[AddComponentMenu] // 0x00513100-0x00513138
public class TweenScale : UITweener // TypeDefIndex: 3352
{
	// Fields
	public Vector3 from; // 0x78
	public Vector3 to; // 0x84
	public bool updateTable; // 0x90
	private Transform mTrans; // 0x98
	private UITable mTable; // 0xA0

	// Properties
	public Transform cachedTransform { get; } // 0x007E6078-0x007E6108 
	public Vector3 value { get; set; } // 0x007E6108-0x007E6128 0x007E6128-0x007E6170
	[Obsolete] // 0x00528E44-0x00528E7C
	public Vector3 scale { get; set; } // 0x007E6170-0x007E6174 0x007E6174-0x007E6178

	// Constructors
	public TweenScale(); // 0x007E6480-0x007E6508

	// Methods
	protected override void OnUpdate(float factor, bool isFinished); // 0x007E6178-0x007E6350
	public static TweenScale Begin(GameObject go, float duration, Vector3 scale); // 0x007E6350-0x007E6418
	[ContextMenu] // 0x0051DF90-0x0051DFC8
	public override void SetStartToCurrentValue(); // 0x007E6418-0x007E6440
	[ContextMenu] // 0x0051DFC8-0x0051E000
	public override void SetEndToCurrentValue(); // 0x007E6440-0x007E6468
	[ContextMenu] // 0x0051E000-0x0051E038
	private void SetCurrentValueToStart(); // 0x007E6468-0x007E6474
	[ContextMenu] // 0x0051E038-0x0051E070
	private void SetCurrentValueToEnd(); // 0x007E6474-0x007E6480
}

[AddComponentMenu] // 0x00513138-0x00513170
public class TweenTransform : UITweener // TypeDefIndex: 3353
{
	// Fields
	public Transform from; // 0x78
	public Transform to; // 0x80
	public bool parentWhenFinished; // 0x88
	private Transform mTrans; // 0x90
	private Vector3 mPos; // 0x98
	private Quaternion mRot; // 0xA4
	private Vector3 mScale; // 0xB4

	// Constructors
	public TweenTransform(); // 0x007E6A7C-0x007E6A84

	// Methods
	protected override void OnUpdate(float factor, bool isFinished); // 0x007E6508-0x007E69B8
	public static TweenTransform Begin(GameObject go, float duration, Transform to); // 0x007E69B8-0x007E69C8
	public static TweenTransform Begin(GameObject go, float duration, Transform from, Transform to); // 0x007E69C8-0x007E6A7C
}

[AddComponentMenu] // 0x00513170-0x005131F8
[RequireComponent] // 0x00513170-0x005131F8
public class TweenVolume : UITweener // TypeDefIndex: 3354
{
	// Fields
	[Range] // 0x00515C14-0x00515C2C
	public float from; // 0x78
	[Range] // 0x00515C2C-0x00515C44
	public float to; // 0x7C
	private AudioSource mSource; // 0x80

	// Properties
	public AudioSource audioSource { get; } // 0x007E6A84-0x007E6BD8 
	[Obsolete] // 0x00528E7C-0x00528EB4
	public float volume { get; set; } // 0x007E6BD8-0x007E6BDC 0x007E6C80-0x007E6C84
	public float value { get; set; } // 0x007E6BDC-0x007E6C80 0x007E6C84-0x007E6D38

	// Constructors
	public TweenVolume(); // 0x007E6E70-0x007E6E80

	// Methods
	protected override void OnUpdate(float factor, bool isFinished); // 0x007E6D38-0x007E6DA4
	public static TweenVolume Begin(GameObject go, float duration, float targetVolume); // 0x007E6DA4-0x007E6E28
	public override void SetStartToCurrentValue(); // 0x007E6E28-0x007E6E4C
	public override void SetEndToCurrentValue(); // 0x007E6E4C-0x007E6E70
}

[AddComponentMenu] // 0x005131F8-0x00513280
[RequireComponent] // 0x005131F8-0x00513280
public class TweenWidth : UITweener // TypeDefIndex: 3355
{
	// Fields
	public int from; // 0x78
	public int to; // 0x7C
	public bool updateTable; // 0x80
	private UIWidget mWidget; // 0x88
	private UITable mTable; // 0x90

	// Properties
	public UIWidget cachedWidget { get; } // 0x007E6E80-0x007E6F18 
	[Obsolete] // 0x00528EB4-0x00528EEC
	public int width { get; set; } // 0x007E6F18-0x007E6F1C 0x007E6F3C-0x007E6F40
	public int value { get; set; } // 0x007E6F1C-0x007E6F3C 0x007E6F40-0x007E6F70

	// Constructors
	public TweenWidth(); // 0x007E721C-0x007E7230

	// Methods
	protected override void OnUpdate(float factor, bool isFinished); // 0x007E6F70-0x007E7100
	public static TweenWidth Begin(UIWidget widget, float duration, int width); // 0x007E7100-0x007E71C4
	[ContextMenu] // 0x0051E070-0x0051E0A8
	public override void SetStartToCurrentValue(); // 0x007E71C4-0x007E71E8
	[ContextMenu] // 0x0051E0A8-0x0051E0E0
	public override void SetEndToCurrentValue(); // 0x007E71E8-0x007E720C
	[ContextMenu] // 0x0051E0E0-0x0051E118
	private void SetCurrentValueToStart(); // 0x007E720C-0x007E7214
	[ContextMenu] // 0x0051E118-0x0051E150
	private void SetCurrentValueToEnd(); // 0x007E7214-0x007E721C
}

public abstract class UITweener : MonoBehaviour // TypeDefIndex: 3356
{
	// Fields
	public static UITweener current; // 0x00
	[HideInInspector] // 0x00515C44-0x00515C54
	public Method method; // 0x18
	[HideInInspector] // 0x00515C54-0x00515C64
	public Style style; // 0x1C
	[HideInInspector] // 0x00515C64-0x00515C74
	public AnimationCurve animationCurve; // 0x20
	[HideInInspector] // 0x00515C74-0x00515C84
	public bool ignoreTimeScale; // 0x28
	[HideInInspector] // 0x00515C84-0x00515C94
	public float delay; // 0x2C
	[HideInInspector] // 0x00515C94-0x00515CA4
	public float duration; // 0x30
	[HideInInspector] // 0x00515CA4-0x00515CB4
	public bool steeperCurves; // 0x34
	[HideInInspector] // 0x00515CB4-0x00515CC4
	public int tweenGroup; // 0x38
	[HideInInspector] // 0x00515CC4-0x00515CD4
	public List<EventDelegate> onFinished; // 0x40
	[HideInInspector] // 0x00515CD4-0x00515CE4
	public GameObject eventReceiver; // 0x48
	[HideInInspector] // 0x00515CE4-0x00515CF4
	public string callWhenFinished; // 0x50
	private bool mStarted; // 0x58
	private float mStartTime; // 0x5C
	private float mDuration; // 0x60
	private float mAmountPerDelta; // 0x64
	private float mFactor; // 0x68
	private List<EventDelegate> mTemp; // 0x70

	// Properties
	public float amountPerDelta { get; } // 0x00811690-0x00811744 
	public float tweenFactor { get; set; } // 0x00811744-0x0081174C 0x0081174C-0x008117C8
	public Direction direction { get; } // 0x008117C8-0x008117E8 

	// Nested types
	public enum Method // TypeDefIndex: 3357
	{
		Linear = 0,
		EaseIn = 1,
		EaseOut = 2,
		EaseInOut = 3,
		BounceIn = 4,
		BounceOut = 5
	}

	public enum Style // TypeDefIndex: 3358
	{
		Once = 0,
		Loop = 1,
		PingPong = 2
	}

	// Constructors
	protected UITweener(); // 0x008123F0-0x00812588

	// Methods
	private void Reset(); // 0x008117E8-0x00811834
	protected virtual void Start(); // 0x00811834-0x00811838
	private void Update(); // 0x00811838-0x00811C44
	public void SetOnFinished(EventDelegate.Callback del); // 0x00811E5C-0x00811ED8
	public void SetOnFinished(EventDelegate del); // 0x00811ED8-0x00811F54
	public void AddOnFinished(EventDelegate.Callback del); // 0x00811F54-0x00811FD0
	public void AddOnFinished(EventDelegate del); // 0x00811FD0-0x0081204C
	public void RemoveOnFinished(EventDelegate del); // 0x0081204C-0x008120DC
	private void OnDisable(); // 0x008120DC-0x008120E4
	public void Sample(float factor, bool isFinished); // 0x00811C44-0x00811E5C
	private float BounceLogic(float val); // 0x008120E4-0x008121A4
	[Obsolete] // 0x0051E150-0x0051E188
	public void Play(); // 0x008121A4-0x008121AC
	public void PlayForward(); // 0x00812254-0x0081225C
	public void PlayReverse(); // 0x0081225C-0x00812264
	public void Play(bool forward); // 0x008121AC-0x00812254
	public void Stop(); // 0x00812264-0x00812270
	public void ResetToBeginning(); // 0x00812270-0x008122BC
	public void ResetToBeginning2(); // 0x008122BC-0x0081234C
	public void Toggle(); // 0x0081234C-0x008123E8
	protected abstract void OnUpdate(float factor, bool isFinished);
	public static T Begin<T>(GameObject go, float duration)
		where T : UITweener;
	public virtual void SetStartToCurrentValue(); // 0x008123E8-0x008123EC
	public virtual void SetEndToCurrentValue(); // 0x008123EC-0x008123F0
}

public class EffectFlowLightForTex : MonoBehaviour // TypeDefIndex: 3359
{
	// Fields
	public float mUvStart; // 0x18
	public float mUvSpeed; // 0x1C
	public float mUvXMax; // 0x20
	public float mTimeInteval; // 0x24
	public Material mCurMaterial; // 0x28
	private float mUvAdd; // 0x30
	private bool mIsPlaying; // 0x34

	// Constructors
	public EffectFlowLightForTex(); // 0x0067EDE8-0x0067EE0C

	// Methods
	private void Awake(); // 0x0067E9FC-0x0067EC38
	private void UpdateMaterial(Material mat); // 0x0067EC38-0x0067EDD8
	private void PlayOnceAgain(); // 0x0067EDD8-0x0067EDE8
	[CompilerGenerated] // 0x0051E188-0x0051E198
	private void _UpdateMaterial_b__8_0(); // 0x0067EE0C-0x0067EE1C
}

public class EffectFlowLoightForMesh : MonoBehaviour // TypeDefIndex: 3360
{
	// Fields
	public float mUvStart; // 0x18
	public float mUvSpeed; // 0x1C
	public float mUvXMax; // 0x20
	public float mTimeInteval; // 0x24
	public MeshRenderer render; // 0x28
	public Material mCurMaterial; // 0x30
	private float mUvAdd; // 0x38
	private bool mIsPlaying; // 0x3C

	// Constructors
	public EffectFlowLoightForMesh(); // 0x0067F0DC-0x0067F100

	// Methods
	private void Awake(); // 0x0067EE1C-0x0067EEE8
	private void Update(); // 0x0067EEE8-0x0067EF20
	private void UpdateMaterial(Material mat); // 0x0067EF20-0x0067F0CC
	private void PlayOnceAgain(); // 0x0067F0CC-0x0067F0DC
	[CompilerGenerated] // 0x0051E198-0x0051E1A8
	private void _UpdateMaterial_b__10_0(); // 0x0067F100-0x0067F110
}

public class FlowLightForSprite : MonoBehaviour // TypeDefIndex: 3361
{
	// Constructors
	public FlowLightForSprite(); // 0x00687164-0x0068716C

	// Methods
	private void Start(); // 0x00686E40-0x00687164
}

public class GlobalBattlePassItem : MonoBehaviour // TypeDefIndex: 3362
{
	// Fields
	private GameObject Checkmark; // 0x18
	private GameObject collectBtn; // 0x20
	private UILabel meters; // 0x28
	private UILabel rewardnum; // 0x30
	private UISprite rewardicon; // 0x38
	public GlobalShow globalshow; // 0x40
	private BattlePassManager.BattlePassItemData curData; // 0x48
	private int curIdx; // 0x50
	private int getIdx; // 0x54

	// Constructors
	public GlobalBattlePassItem(); // 0x00653D38-0x00653D40

	// Methods
	public void GetTran(); // 0x00653800-0x00653958
	public void Init(int idx, int getId); // 0x00653958-0x00653AF8
	public void Reward(); // 0x00653BF4-0x00653D38
	private void FreshRewardUI(); // 0x00653AF8-0x00653BF4
	[CompilerGenerated] // 0x0051E1A8-0x0051E1B8
	private void _Reward_b__11_0(); // 0x00653D40-0x00653DE0
}

[ExecuteInEditMode] // 0x00513280-0x00513290
public class GlobalShow : MonoBehaviour // TypeDefIndex: 3363
{
	// Fields
	public GameObject noNet; // 0x18
	public GameObject noNeticon; // 0x20
	public GameObject Comingsoon; // 0x28
	public GameObject Content; // 0x30
	public UILabel TimeCd; // 0x38
	public Transform table; // 0x40
	public UISlider sl; // 0x48
	private BattlePassManager battlepassman; // 0x50
	public int curIdx; // 0x58
	private bool IsOver; // 0x5C
	public TaskPopup taskPopup; // 0x60
	public Animator task_global; // 0x68
	public LerpTool lerptool; // 0x70
	public LerpTool lerptoolMove; // 0x78
	public UIScrollView scrollview; // 0x80
	public UISlider moveslider; // 0x88
	public UILabel zeroM; // 0x90
	public float sliderfactor; // 0x98
	public static bool showInMoving; // 0x00

	// Properties
	public static bool IsNewComing { get; } // 0x00651ED4-0x00651FD4 
	public static int LastGlobalIDX { get; set; } // 0x0065B5B4-0x0065B604 0x0065C040-0x0065C094
	public static bool IsNeedUpdate { get; } // 0x00651FD4-0x00652218 
	public static bool TaskInMoving { get; set; } // 0x0065C094-0x0065C16C 0x0065C16C-0x0065C234

	// Nested types
	[CompilerGenerated] // 0x00513FE0-0x00513FF0
	private sealed class _startplayAnimation_d__21 : IEnumerator<object> // TypeDefIndex: 3364
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public GlobalShow __4__this; // 0x20
		private float _passtime_5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525100-0x00525110 */ get; } // 0x0065C4C8-0x0065C4D0 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525120-0x00525130 */ get; } // 0x0065C534-0x0065C53C 

		// Constructors
		[DebuggerHidden] // 0x005250E0-0x005250F0
		public _startplayAnimation_d__21(int __1__state); // 0x0065B9F4-0x0065BA20

		// Methods
		[DebuggerHidden] // 0x005250F0-0x00525100
		void IDisposable.Dispose(); // 0x0065C384-0x0065C388
		private bool MoveNext(); // 0x0065C388-0x0065C4C8
		[DebuggerHidden] // 0x00525110-0x00525120
		void IEnumerator.Reset(); // 0x0065C4D0-0x0065C534
	}

	[Serializable]
	[CompilerGenerated] // 0x00513FF0-0x00514000
	private sealed class __c // TypeDefIndex: 3365
	{
		// Fields
		public static readonly __c __9; // 0x00
		public static Action __9__30_0; // 0x08
		public static Action __9__30_1; // 0x10

		// Constructors
		static __c(); // 0x0065C248-0x0065C2AC
		public __c(); // 0x0065C2AC-0x0065C2B4

		// Methods
		internal void _Showlerp_b__30_0(); // 0x0065C2B4-0x0065C31C
		internal void _Showlerp_b__30_1(); // 0x0065C31C-0x0065C384
	}

	// Constructors
	public GlobalShow(); // 0x0065C234-0x0065C244
	static GlobalShow(); // 0x0065C244-0x0065C248

	// Methods
	private void OnEnable(); // 0x0065B0A4-0x0065B270
	private void FreshUI(); // 0x0065B2D0-0x0065B5B4
	[IteratorStateMachine] // 0x0051E1B8-0x0051E21C
	private IEnumerator startplayAnimation(); // 0x0065B980-0x0065B9F4
	private void Update(); // 0x0065BA20-0x0065BFA8
	public void FreshTimeEnd(); // 0x0065B270-0x0065B2D0
	public void SetTablePos(int idx); // 0x0065BFA8-0x0065BFAC
	private void UpdateTableBySlider(); // 0x0065BFAC-0x0065C040
	private void Showlerp(int objIdx); // 0x0065B604-0x0065B980
}

[AddComponentMenu] // 0x00513290-0x005132DC
[ExecuteInEditMode] // 0x00513290-0x005132DC
public class UI2DSprite : UIBasicSprite // TypeDefIndex: 3366
{
	// Fields
	[HideInInspector] // 0x00515CF4-0x00515D2C
	[SerializeField] // 0x00515CF4-0x00515D2C
	private Sprite mSprite; // 0x1C8
	[HideInInspector] // 0x00515D2C-0x00515D64
	[SerializeField] // 0x00515D2C-0x00515D64
	private Material mMat; // 0x1D0
	[HideInInspector] // 0x00515D64-0x00515D9C
	[SerializeField] // 0x00515D64-0x00515D9C
	private Shader mShader; // 0x1D8
	[HideInInspector] // 0x00515D9C-0x00515DD4
	[SerializeField] // 0x00515D9C-0x00515DD4
	private Vector4 mBorder; // 0x1E0
	[HideInInspector] // 0x00515DD4-0x00515E0C
	[SerializeField] // 0x00515DD4-0x00515E0C
	private bool mFixedAspect; // 0x1F0
	[HideInInspector] // 0x00515E0C-0x00515E44
	[SerializeField] // 0x00515E0C-0x00515E44
	private float mPixelSize; // 0x1F4
	public Sprite nextSprite; // 0x1F8
	[NonSerialized]
	private int mPMA; // 0x200

	// Properties
	public Sprite sprite2D { get; set; } // 0x007E7DA4-0x007E7DAC 0x007E7DAC-0x007E7E5C
	public override Material material { get; set; } // 0x007E7E5C-0x007E7E64 0x007E7E64-0x007E7F20
	public override Shader shader { get; set; } // 0x007E7F20-0x007E8010 0x007E8010-0x007E80FC
	public override Texture mainTexture { get; } // 0x007E80FC-0x007E81E8 
	public override bool premultipliedAlpha { get; } // 0x007E81E8-0x007E82CC 
	public override float pixelSize { get; } // 0x007E82CC-0x007E82D4 
	public override Vector4 drawingDimensions { get; } // 0x007E82D4-0x007E87AC 
	public override Vector4 border { get; set; } // 0x007E87AC-0x007E87C0 0x007E87C0-0x007E88C8

	// Constructors
	public UI2DSprite(); // 0x007E931C-0x007E93F0

	// Methods
	protected override void OnUpdate(); // 0x007E88C8-0x007E8C70
	public override void MakePixelPerfect(); // 0x007E8C70-0x007E8E40
	public override void OnFill(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols); // 0x007E8E84-0x007E91F8
}

public class UI2DSpriteAnimation : MonoBehaviour // TypeDefIndex: 3367
{
	// Fields
	[SerializeField] // 0x00515E44-0x00515E54
	protected int framerate; // 0x18
	public bool ignoreTimeScale; // 0x1C
	public bool loop; // 0x1D
	public Sprite[] frames; // 0x20
	private SpriteRenderer mUnitySprite; // 0x28
	private UI2DSprite mNguiSprite; // 0x30
	private int mIndex; // 0x38
	private float mUpdate; // 0x3C

	// Properties
	public bool isPlaying { get; } // 0x007E941C-0x007E9424 
	public int framesPerSecond { get; set; } // 0x007E9424-0x007E942C 0x007E942C-0x007E9434

	// Constructors
	public UI2DSpriteAnimation(); // 0x007E98C8-0x007E98E0

	// Methods
	public void Play(); // 0x007E9434-0x007E94F0
	public void Pause(); // 0x007E97A0-0x007E97AC
	public void ResetToBeginning(); // 0x007E97AC-0x007E97E4
	private void Start(); // 0x007E97E4-0x007E97E8
	private void Update(); // 0x007E97E8-0x007E98C8
	private void UpdateSprite(); // 0x007E94F0-0x007E97A0
}

[AddComponentMenu] // 0x005132DC-0x00513328
[ExecuteInEditMode] // 0x005132DC-0x00513328
public class UIAnchor : MonoBehaviour // TypeDefIndex: 3368
{
	// Fields
	public Camera uiCamera; // 0x18
	public GameObject container; // 0x20
	public Side side; // 0x28
	public bool runOnlyOnce; // 0x2C
	public Vector2 relativeOffset; // 0x30
	public Vector2 pixelOffset; // 0x38
	[HideInInspector] // 0x00515E54-0x00515E8C
	[SerializeField] // 0x00515E54-0x00515E8C
	private UIWidget widgetContainer; // 0x40
	private Transform mTrans; // 0x48
	private Animation mAnim; // 0x50
	private Rect mRect; // 0x58
	private UIRoot mRoot; // 0x68
	private bool mStarted; // 0x70

	// Nested types
	public enum Side // TypeDefIndex: 3369
	{
		BottomLeft = 0,
		Left = 1,
		TopLeft = 2,
		Top = 3,
		TopRight = 4,
		Right = 5,
		BottomRight = 6,
		Bottom = 7,
		Center = 8
	}

	// Constructors
	public UIAnchor(); // 0x007EA8F4-0x007EA984

	// Methods
	private void Awake(); // 0x007E98E0-0x007E99E4
	private void OnDestroy(); // 0x007E99E4-0x007E9AC0
	private void ScreenSizeChanged(); // 0x007E9AC0-0x007E9AD8
	private void Start(); // 0x007EA754-0x007EA8F4
	private void Update(); // 0x007E9AD8-0x007EA754
}

[AddComponentMenu] // 0x00513328-0x00513360
public class UIAtlas : MonoBehaviour // TypeDefIndex: 3370
{
	// Fields
	[HideInInspector] // 0x00515E8C-0x00515EC4
	[SerializeField] // 0x00515E8C-0x00515EC4
	private Material material; // 0x18
	[HideInInspector] // 0x00515EC4-0x00515EFC
	[SerializeField] // 0x00515EC4-0x00515EFC
	private List<UISpriteData> mSprites; // 0x20
	[HideInInspector] // 0x00515EFC-0x00515F34
	[SerializeField] // 0x00515EFC-0x00515F34
	private float mPixelSize; // 0x28
	[HideInInspector] // 0x00515F34-0x00515F6C
	[SerializeField] // 0x00515F34-0x00515F6C
	private UIAtlas mReplacement; // 0x30
	[HideInInspector] // 0x00515F6C-0x00515FA4
	[SerializeField] // 0x00515F6C-0x00515FA4
	private Coordinates mCoordinates; // 0x38
	[HideInInspector] // 0x00515FA4-0x00515FDC
	[SerializeField] // 0x00515FA4-0x00515FDC
	private List<Sprite> sprites; // 0x40
	private int mPMA; // 0x48
	private Dictionary<string, int> mSpriteIndices; // 0x50

	// Properties
	public Material spriteMaterial { get; set; } // 0x007EB64C-0x007EB6EC 0x007EB6EC-0x007EB7FC
	public bool premultipliedAlpha { get; } // 0x007EBB18-0x007EBC8C 
	public List<UISpriteData> spriteList { get; set; } // 0x007EBC8C-0x007EBD48 0x007EC1DC-0x007EC288
	public Texture texture { get; } // 0x007EC288-0x007EC37C 
	public float pixelSize { get; set; } // 0x007EC37C-0x007EC41C 0x007EC41C-0x007EC524
	public UIAtlas replacement { get; set; } // 0x007EC524-0x007EC52C 0x007EC52C-0x007EC6D8

	// Nested types
	[Serializable]
	private class Sprite // TypeDefIndex: 3371
	{
		// Fields
		public string name; // 0x10
		public Rect outer; // 0x18
		public Rect inner; // 0x28
		public bool rotated; // 0x38
		public float paddingLeft; // 0x3C
		public float paddingRight; // 0x40
		public float paddingTop; // 0x44
		public float paddingBottom; // 0x48

		// Properties
		public bool hasPadding { get; } // 0x007ED57C-0x007ED5B8 

		// Constructors
		public Sprite(); // 0x007ED5B8-0x007ED698
	}

	private enum Coordinates // TypeDefIndex: 3372
	{
		Pixels = 0,
		TexCoords = 1
	}

	[Serializable]
	[CompilerGenerated] // 0x00514000-0x00514010
	private sealed class __c // TypeDefIndex: 3373
	{
		// Fields
		public static readonly __c __9; // 0x00
		public static Comparison<UISpriteData> __9__29_0; // 0x08

		// Constructors
		static __c(); // 0x007ED4E0-0x007ED544
		public __c(); // 0x007ED544-0x007ED54C

		// Methods
		internal int _SortAlphabetically_b__29_0(UISpriteData s1, UISpriteData s2); // 0x007ED54C-0x007ED57C
	}

	// Constructors
	public UIAtlas(); // 0x007ED410-0x007ED4E0

	// Methods
	public UISpriteData GetSprite(string name); // 0x007EC6D8-0x007EC938
	public string GetRandomSprite(string startsWith); // 0x007ECA20-0x007ECC24
	public void MarkSpriteListAsChanged(); // 0x007EC938-0x007ECA20
	public void SortAlphabetically(); // 0x007ECC24-0x007ECD20
	public BetterList<string> GetListOfSprites(); // 0x007ECD20-0x007ECE7C
	public BetterList<string> GetListOfSprites(string match); // 0x007ECE7C-0x007ED1E8
	private bool References(UIAtlas atlas); // 0x007ED1E8-0x007ED2F4
	public static bool CheckIfRelated(UIAtlas a, UIAtlas b); // 0x007ED2F4-0x007ED410
	public void MarkAsChanged(); // 0x007EB7FC-0x007EBB18
	private bool Upgrade(); // 0x007EBD48-0x007EC1DC
}

[AddComponentMenu] // 0x00513360-0x005133F8
[ExecuteInEditMode] // 0x00513360-0x005133F8
[RequireComponent] // 0x00513360-0x005133F8
public class UICamera : MonoBehaviour // TypeDefIndex: 3374
{
	// Fields
	public static BetterList<UICamera> list; // 0x00
	public static GetKeyStateFunc GetKeyDown; // 0x08
	public static GetKeyStateFunc GetKeyUp; // 0x10
	public static GetKeyStateFunc GetKey; // 0x18
	public static GetAxisFunc GetAxis; // 0x20
	public static GetAnyKeyFunc GetAnyKeyDown; // 0x28
	public static OnScreenResize onScreenResize; // 0x30
	public EventType eventType; // 0x18
	public bool eventsGoToColliders; // 0x1C
	public LayerMask eventReceiverMask; // 0x20
	public bool debug; // 0x24
	public bool useMouse; // 0x25
	public bool useTouch; // 0x26
	public bool allowMultiTouch; // 0x27
	public bool useKeyhelm; // 0x28
	public bool useController; // 0x29
	public bool stickyTooltip; // 0x2A
	public float tooltipDelay; // 0x2C
	private bool longPressTooltip; // 0x30
	public float mouseDragThreshold; // 0x34
	public float mouseClickThreshold; // 0x38
	public float touchDragThreshold; // 0x3C
	public float touchClickThreshold; // 0x40
	public float rangeDistance; // 0x44
	public string scrollAxisName; // 0x48
	public string verticalAxisName; // 0x50
	public string horizontalAxisName; // 0x58
	public string horizontalPanAxisName; // 0x60
	public string verticalPanAxisName; // 0x68
	public bool commandClick; // 0x70
	public KeyCode submitKey0; // 0x74
	public KeyCode submitKey1; // 0x78
	public KeyCode cancelKey0; // 0x7C
	public KeyCode cancelKey1; // 0x80
	public static OnCustomInput onCustomInput; // 0x38
	public static bool showTooltips; // 0x40
	private static bool mDisableController; // 0x41
	private static Vector2 mLastPos; // 0x44
	public static Vector3 lastWorldPosition; // 0x4C
	public static RaycastHit lastHit; // 0x58
	public static UICamera current; // 0x88
	public static Camera currentCamera; // 0x90
	public static OnSchemeChange onSchemeChange; // 0x98
	public static int currentTouchID; // 0xA0
	private static KeyCode mCurrentKey; // 0xA4
	public static MouseOrTouch currentTouch; // 0xA8
	private static bool mInputFocus; // 0xB0
	private static GameObject mGenericHandler; // 0xB8
	public static GameObject fallThrough; // 0xC0
	public static VoidDelegate onClick; // 0xC8
	public static VoidDelegate onDoubleClick; // 0xD0
	public static BoolDelegate onHover; // 0xD8
	public static BoolDelegate onPress; // 0xE0
	public static BoolDelegate onSelect; // 0xE8
	public static FloatDelegate onScroll; // 0xF0
	public static VectorDelegate onDrag; // 0xF8
	public static VoidDelegate onDragStart; // 0x100
	public static ObjectDelegate onDragOver; // 0x108
	public static ObjectDelegate onDragOut; // 0x110
	public static VoidDelegate onDragEnd; // 0x118
	public static ObjectDelegate onDrop; // 0x120
	public static KeyCodeDelegate onKey; // 0x128
	public static KeyCodeDelegate onNavigate; // 0x130
	public static VectorDelegate onPan; // 0x138
	public static BoolDelegate onTooltip; // 0x140
	public static MoveDelegate onMouseMove; // 0x148
	private static MouseOrTouch[] mMouse; // 0x150
	public static MouseOrTouch controller; // 0x158
	public static List<MouseOrTouch> activeTouches; // 0x160
	private static List<int> mTouchIDs; // 0x168
	private static int mWidth; // 0x170
	private static int mHeight; // 0x174
	private static GameObject mTooltip; // 0x178
	private Camera mCam; // 0x88
	private static float mTooltipTime; // 0x180
	private float mNextRaycast; // 0x90
	public static bool isDragging; // 0x184
	private static GameObject mRayHitObject; // 0x188
	private static GameObject mHover; // 0x190
	private static GameObject mSelected; // 0x198
	private static DepthEntry mHit; // 0x1A0
	private static BetterList<DepthEntry> mHits; // 0x1E8
	private static Plane m2DPlane; // 0x1F0
	private static float mNextEvent; // 0x200
	private static int mNotifying; // 0x204
	private static bool mUsingTouchEvents; // 0x208
	public static GetTouchCountCallback GetInputTouchCount; // 0x210
	public static GetTouchCallback GetInputTouch; // 0x218

	// Properties
	[Obsolete] // 0x00528EEC-0x00528F24
	public bool stickyPress { get; } // 0x007F8418-0x007F8420 
	public static bool disableController { get; set; } // 0x007F8420-0x007F84F8 0x007F84F8-0x007F8568
	[Obsolete] // 0x00528F24-0x00528F5C
	public static Vector2 lastTouchPosition { get; set; } // 0x007F8568-0x007F85D0 0x007F85D0-0x007F8648
	public static Vector2 lastEventPosition { get; set; } // 0x007F8648-0x007F8824 0x007F8824-0x007F889C
	public static ControlScheme currentScheme { get; set; } // 0x007F5448-0x007F54E8 0x007F889C-0x007F897C
	public static KeyCode currentKey { get; set; } // 0x007F8B40-0x007F8BA8 0x007F897C-0x007F8B40
	public static Ray currentRay { get; } // 0x007F8C08-0x007F8D74 
	public static bool inputHasFocus { get; } // 0x007F8D74-0x007F8EA4 
	[Obsolete] // 0x00528F5C-0x00528F94
	public static GameObject genericEventHandler { get; set; } // 0x007F8EA4-0x007F8F0C 0x007F8F0C-0x007F8F78
	private bool handlesEvents { get; } // 0x007F8F78-0x007F9010 
	public Camera cachedCamera { get; } // 0x007F9190-0x007F9228 
	public static GameObject tooltipObject { get; } // 0x007F9228-0x007F9290 
	public static bool isOverUI { get; } // 0x007F9290-0x007F9488 
	public static GameObject hoveredObject { get; set; } // 0x007F3ECC-0x007F4074 0x007F9488-0x007F9BC4
	public static GameObject controllerNavigationObject { get; set; } // 0x007FA330-0x007FA790 0x007FA790-0x007FA99C
	public static GameObject selectedObject { get; set; } // 0x007FA99C-0x007FAAC4 0x007FAAC4-0x007FB1DC
	[Obsolete] // 0x00528F94-0x00528FCC
	public static int touchCount { get; } // 0x007FB410-0x007FB46C 
	public static int dragCount { get; } // 0x007FB6C0-0x007FB914 
	public static Camera mainCamera { get; } // 0x007FB914-0x007FB9D0 
	public static UICamera eventHandler { get; } // 0x007F9010-0x007F9190 

	// Nested types
	public enum ControlScheme // TypeDefIndex: 3375
	{
		Mouse = 0,
		Touch = 1,
		Controller = 2
	}

	public enum ClickNotification // TypeDefIndex: 3376
	{
		None = 0,
		Always = 1,
		BasedOnDelta = 2
	}

	public class MouseOrTouch // TypeDefIndex: 3377
	{
		// Fields
		public KeyCode key; // 0x10
		public Vector2 pos; // 0x14
		public Vector2 lastPos; // 0x1C
		public Vector2 delta; // 0x24
		public Vector2 totalDelta; // 0x2C
		public Camera pressedCam; // 0x38
		public GameObject last; // 0x40
		public GameObject current; // 0x48
		public GameObject pressed; // 0x50
		public GameObject dragged; // 0x58
		public float pressTime; // 0x60
		public float clickTime; // 0x64
		public ClickNotification clickNotification; // 0x68
		public bool touchBegan; // 0x6C
		public bool pressStarted; // 0x6D
		public bool dragStarted; // 0x6E
		public int ignoreDelta; // 0x70

		// Properties
		public float deltaTime { get; } // 0x00820938-0x00820964 
		public bool isOverUI { get; } // 0x00820964-0x00820ABC 

		// Constructors
		public MouseOrTouch(); // 0x00820ABC-0x00820AD0
	}

	public enum EventType // TypeDefIndex: 3378
	{
		World_3D = 0,
		UI_3D = 1,
		World_2D = 2,
		UI_2D = 3
	}

	public delegate bool GetKeyStateFunc(KeyCode key); // TypeDefIndex: 3379; 0x0081FC10-0x0081FE60

	public delegate float GetAxisFunc(string name); // TypeDefIndex: 3380; 0x0081F7F4-0x0081FBB0

	public delegate bool GetAnyKeyFunc(); // TypeDefIndex: 3381; 0x0081F55C-0x0081F784

	public delegate void OnScreenResize(); // TypeDefIndex: 3382; 0x008216E4-0x00821900

	public delegate void OnCustomInput(); // TypeDefIndex: 3383; 0x0082120C-0x00821428

	public delegate void OnSchemeChange(); // TypeDefIndex: 3384; 0x00821478-0x00821694

	public delegate void MoveDelegate(Vector2 delta); // TypeDefIndex: 3385; 0x00820AE0-0x00820D38

	public delegate void VoidDelegate(GameObject go); // TypeDefIndex: 3386; 0x00821E10-0x008221C4

	public delegate void BoolDelegate(GameObject go, bool state); // TypeDefIndex: 3387; 0x0081EC20-0x0081F000

	public delegate void FloatDelegate(GameObject go, float delta); // TypeDefIndex: 3388; 0x0081F0BC-0x0081F4A4

	public delegate void VectorDelegate(GameObject go, Vector2 delta); // TypeDefIndex: 3389; 0x00821958-0x00821D58

	public delegate void ObjectDelegate(GameObject go, GameObject obj); // TypeDefIndex: 3390; 0x00820DE0-0x008211C0

	public delegate void KeyCodeDelegate(GameObject go, KeyCode key); // TypeDefIndex: 3391; 0x008204B0-0x00820890

	private struct DepthEntry // TypeDefIndex: 3392
	{
		// Fields
		public int depth; // 0x00
		public RaycastHit hit; // 0x04
		public Vector3 point; // 0x30
		public GameObject go; // 0x40
	}

	public class Touch // TypeDefIndex: 3393
	{
		// Fields
		public int fingerId; // 0x10
		public TouchPhase phase; // 0x14
		public Vector2 position; // 0x18
		public int tapCount; // 0x20

		// Constructors
		public Touch(); // 0x00821940-0x00821948
	}

	public delegate int GetTouchCountCallback(); // TypeDefIndex: 3394; 0x0082021C-0x00820440

	public delegate Touch GetTouchCallback(int index); // TypeDefIndex: 3395; 0x0081FF28-0x00820174

	[Serializable]
	[CompilerGenerated] // 0x00514010-0x00514020
	private sealed class __c // TypeDefIndex: 3396
	{
		// Fields
		public static readonly __c __9; // 0x00
		public static BetterList<DepthEntry> __9__155_0; // 0x08
		public static BetterList<DepthEntry> __9__155_1; // 0x10

		// Constructors
		static __c(); // 0x0081EB84-0x0081EBE8
		public __c(); // 0x0081EBE8-0x0081EBF0

		// Methods
		internal int _Raycast_b__155_0(DepthEntry r1, DepthEntry r2); // 0x0081EBF0-0x0081EC00
		internal int _Raycast_b__155_1(DepthEntry r1, DepthEntry r2); // 0x0081EC00-0x0081EC10
	}

	// Constructors
	public UICamera(); // 0x0080282C-0x008028F8
	static UICamera(); // 0x008028F8-0x00803D3C

	// Methods
	public static bool IsPressed(GameObject go); // 0x007FB1DC-0x007FB410
	public static int CountInputSources(); // 0x007FB46C-0x007FB6C0
	private static int CompareFunc(UICamera a, UICamera b); // 0x007FB9D0-0x007FBA7C
	private static Rigidbody FindRootRigidbody(Transform trans); // 0x007FBA7C-0x007FBBB0
	private static Rigidbody2D FindRootRigidbody2D(Transform trans); // 0x007FBBB0-0x007FBCE4
	public static void Raycast(MouseOrTouch touch); // 0x007FBCE4-0x007FBEA8
	public static bool Raycast(Vector3 inPos); // 0x007FBEA8-0x007FD3A8
	private static bool IsVisible(Vector3 worldPoint, GameObject go); // 0x007FD498-0x007FD59C
	private static bool IsVisible(ref DepthEntry de); // 0x007FD3A8-0x007FD498
	public static bool IsHighlighted(GameObject go); // 0x007F4F58-0x007F4FF0
	public static UICamera FindCameraForLayer(int layer); // 0x007FA1CC-0x007FA330
	private static int GetDirection(KeyCode up, KeyCode down); // 0x007FD59C-0x007FD6B8
	private static int GetDirection(KeyCode up0, KeyCode up1, KeyCode down0, KeyCode down1); // 0x007FD6B8-0x007FD894
	private static int GetDirection(string axis); // 0x007FD894-0x007FD9F0
	public static void Notify(GameObject go, string funcName, object obj); // 0x007F9EB8-0x007FA1CC
	public static MouseOrTouch GetMouse(int button); // 0x007FD9F0-0x007FDA8C
	public static MouseOrTouch GetTouch(int id, bool createIfMissing = false /* Metadata: 0x001F5617 */); // 0x007FDA8C-0x007FDCA4
	public static void RemoveTouch(int id); // 0x007FDCA4-0x007FDE0C
	private void Awake(); // 0x007FDE0C-0x007FE004
	private void OnEnable(); // 0x007FE004-0x007FE0EC
	private void OnDisable(); // 0x007FE0EC-0x007FE170
	private void Start(); // 0x007FE170-0x007FE3BC
	private void Update(); // 0x007FE3BC-0x007FE928
	private void LateUpdate(); // 0x00800484-0x00800604
	public void ProcessMouse(); // 0x007FEE4C-0x007FF834
	public void ProcessTouches(); // 0x007FE928-0x007FEE4C
	private void ProcessFakeTouches(); // 0x008009C4-0x00800D58
	public void ProcessOthers(); // 0x007FF834-0x00800484
	private void ProcessPress(bool pressed, float click, float drag); // 0x00800D58-0x00801DE4
	private void ProcessRelease(bool isMouse, float drag); // 0x00801DE4-0x008026D8
	private bool HasCollider(GameObject go); // 0x008026D8-0x0080282C
	public void ProcessTouch(bool pressed, bool released); // 0x00800604-0x008009C4
	public static bool ShowTooltip(GameObject go); // 0x007F9BC4-0x007F9EB8
	public static bool HideTooltip(); // 0x007F8BA8-0x007F8C08
}

[RequireComponent] // 0x005133F8-0x0051345C
public class UIColorPicker : MonoBehaviour // TypeDefIndex: 3397
{
	// Fields
	public static UIColorPicker current; // 0x00
	public Color value; // 0x18
	public UIWidget selectionWidget; // 0x28
	public List<EventDelegate> onChange; // 0x30
	[NonSerialized]
	private Transform mTrans; // 0x38
	[NonSerialized]
	private UITexture mUITex; // 0x40
	[NonSerialized]
	private Texture2D mTex; // 0x48
	[NonSerialized]
	private UICamera mCam; // 0x50
	[NonSerialized]
	private Vector2 mPos; // 0x58
	[NonSerialized]
	private int mWidth; // 0x60
	[NonSerialized]
	private int mHeight; // 0x64
	private static AnimationCurve mRed; // 0x08
	private static AnimationCurve mGreen; // 0x10
	private static AnimationCurve mBlue; // 0x18

	// Constructors
	public UIColorPicker(); // 0x008295DC-0x0082965C

	// Methods
	private void Start(); // 0x00827E58-0x008280B0
	private void OnDestroy(); // 0x00828DE4-0x00828E58
	private void OnPress(bool pressed); // 0x00828E58-0x00828EFC
	private void OnDrag(Vector2 delta); // 0x00829238-0x00829270
	private void OnPan(Vector2 delta); // 0x00829270-0x00829348
	private void Sample(); // 0x00828EFC-0x00829238
	public void Select(Vector2 v); // 0x00829348-0x008295DC
	public Vector2 Select(Color c); // 0x00828AD8-0x00828DE4
	public static Color Sample(float x, float y); // 0x008280B0-0x00828AD8
}

[AddComponentMenu] // 0x0051345C-0x005134A8
[ExecuteInEditMode] // 0x0051345C-0x005134A8
public class UIFont : MonoBehaviour // TypeDefIndex: 3398
{
	// Fields
	[HideInInspector] // 0x00515FDC-0x00516014
	[SerializeField] // 0x00515FDC-0x00516014
	private Material mMat; // 0x18
	[HideInInspector] // 0x00516014-0x0051604C
	[SerializeField] // 0x00516014-0x0051604C
	private Rect mUVRect; // 0x20
	[HideInInspector] // 0x0051604C-0x00516084
	[SerializeField] // 0x0051604C-0x00516084
	private BMFont mFont; // 0x30
	[HideInInspector] // 0x00516084-0x005160BC
	[SerializeField] // 0x00516084-0x005160BC
	private UIAtlas mAtlas; // 0x38
	[HideInInspector] // 0x005160BC-0x005160F4
	[SerializeField] // 0x005160BC-0x005160F4
	private UIFont mReplacement; // 0x40
	[HideInInspector] // 0x005160F4-0x0051612C
	[SerializeField] // 0x005160F4-0x0051612C
	private List<BMSymbol> mSymbols; // 0x48
	[HideInInspector] // 0x0051612C-0x00516164
	[SerializeField] // 0x0051612C-0x00516164
	private Font mDynamicFont; // 0x50
	[HideInInspector] // 0x00516164-0x0051619C
	[SerializeField] // 0x00516164-0x0051619C
	private int mDynamicFontSize; // 0x58
	[HideInInspector] // 0x0051619C-0x005161D4
	[SerializeField] // 0x0051619C-0x005161D4
	private FontStyle mDynamicFontStyle; // 0x5C
	[NonSerialized]
	private UISpriteData mSprite; // 0x60
	private int mPMA; // 0x68
	private int mPacked; // 0x6C

	// Properties
	public BMFont bmFont { get; set; } // 0x008369F8-0x00836A98 0x00836A98-0x00836B44
	public int texWidth { get; set; } // 0x00836B44-0x00836BF4 0x00836BF4-0x00836CA8
	public int texHeight { get; set; } // 0x00836CA8-0x00836D58 0x00836D58-0x00836E0C
	public bool hasSymbols { get; } // 0x00836E0C-0x00836EC4 
	public List<BMSymbol> symbols { get; } // 0x00836EC4-0x00836F64 
	public UIAtlas atlas { get; set; } // 0x00836F64-0x00837004 0x00837004-0x00837164
	public Material material { get; set; } // 0x0083765C-0x00837884 0x00837884-0x00837984
	[Obsolete] // 0x00528FCC-0x00529004
	public bool premultipliedAlpha { get; } // 0x00837984-0x00837988 
	public bool premultipliedAlphaShader { get; } // 0x00837988-0x00837B4C 
	public bool packedFontShader { get; } // 0x00837B4C-0x00837CF8 
	public Texture2D texture { get; } // 0x00837CF8-0x00837E04 
	public Rect uvRect { get; set; } // 0x00837320-0x0083744C 0x00837E04-0x00837F14
	public string spriteName { get; set; } // 0x00837F14-0x00837FBC 0x00837FBC-0x008380A8
	public bool isValid { get; } // 0x008380A8-0x00838140 
	[Obsolete] // 0x00529004-0x0052903C
	public int size { get; set; } // 0x00838140-0x00838144 0x00838204-0x00838208
	public int defaultSize { get; set; } // 0x00838144-0x00838204 0x00838208-0x008382B4
	public UISpriteData sprite { get; } // 0x00837164-0x00837320 
	public UIFont replacement { get; set; } // 0x00838540-0x00838548 0x00838548-0x00838704
	public bool isDynamic { get; } // 0x008382B4-0x00838378 
	public Font dynamicFont { get; set; } // 0x00838704-0x008387A4 0x008387A4-0x008388D8
	public FontStyle dynamicFontStyle { get; set; } // 0x008388D8-0x00838978 0x00838978-0x00838A4C
	private Texture dynamicTexture { get; } // 0x00838F48-0x00839020 

	// Constructors
	public UIFont(); // 0x0083949C-0x00839580

	// Methods
	private void Trim(); // 0x00838A4C-0x00838C9C
	private bool References(UIFont font); // 0x00838C9C-0x00838DA8
	public static bool CheckIfRelated(UIFont a, UIFont b); // 0x00838DA8-0x00838F48
	public void MarkAsChanged(); // 0x0083744C-0x0083765C
	public void UpdateUVRect(); // 0x00838378-0x00838540
	private BMSymbol GetSymbol(string sequence, bool createIfMissing); // 0x00839020-0x00839138
	public BMSymbol MatchSymbol(string text, int offset, int textLength); // 0x00839138-0x00839298
	public void AddSymbol(string sequence, string spriteName); // 0x00839298-0x008392D0
	public void RemoveSymbol(string sequence); // 0x008392D0-0x0083935C
	public void RenameSymbol(string before, string after); // 0x0083935C-0x00839390
	public bool UsesSprite(string s); // 0x00839390-0x0083949C
}

[AddComponentMenu] // 0x005134A8-0x005134E0
public class UIInput : MonoBehaviour // TypeDefIndex: 3399
{
	// Fields
	public static UIInput current; // 0x00
	public static UIInput selection; // 0x08
	public UILabel label; // 0x18
	public InputType inputType; // 0x20
	public OnReturnKey onReturnKey; // 0x24
	public KeyhelmType keyhelmType; // 0x28
	public bool hideInput; // 0x2C
	[NonSerialized]
	public bool selectAllTextOnFocus; // 0x2D
	public Validation validation; // 0x30
	public int characterLimit; // 0x34
	public string savedAs; // 0x38
	[HideInInspector] // 0x005161D4-0x0051620C
	[SerializeField] // 0x005161D4-0x0051620C
	private GameObject selectOnTab; // 0x40
	public Color activeTextColor; // 0x48
	public Color caretColor; // 0x58
	public Color selectionColor; // 0x68
	public List<EventDelegate> onSubmit; // 0x78
	public List<EventDelegate> onChange; // 0x80
	public OnValidate onValidate; // 0x88
	[HideInInspector] // 0x0051620C-0x00516244
	[SerializeField] // 0x0051620C-0x00516244
	protected string mValue; // 0x90
	[NonSerialized]
	protected string mDefaultText; // 0x98
	[NonSerialized]
	protected Color mDefaultColor; // 0xA0
	[NonSerialized]
	protected float mPosition; // 0xB0
	[NonSerialized]
	protected bool mDoInit; // 0xB4
	[NonSerialized]
	protected UIWidget.Pivot mPivot; // 0xB8
	[NonSerialized]
	protected bool mLoadSavedValue; // 0xBC
	protected static int mDrawStart; // 0x10
	protected static string mLastIME; // 0x18
	protected static TouchScreenKeyboard mKeyhelm; // 0x20
	private static bool mWaitForKeyhelm; // 0x28
	[NonSerialized]
	protected int mSelectionStart; // 0xC0
	[NonSerialized]
	protected int mSelectionEnd; // 0xC4
	[NonSerialized]
	protected UITexture mHighlight; // 0xC8
	[NonSerialized]
	protected UITexture mCaret; // 0xD0
	[NonSerialized]
	protected Texture2D mBlankTex; // 0xD8
	[NonSerialized]
	protected float mNextBlink; // 0xE0
	[NonSerialized]
	protected float mLastAlpha; // 0xE4
	[NonSerialized]
	protected string mCached; // 0xE8
	[NonSerialized]
	protected int mSelectMe; // 0xF0
	[NonSerialized]
	protected int mSelectTime; // 0xF4
	[NonSerialized]
	private UICamera mCam; // 0xF8
	private static int mIgnoreKey; // 0x2C

	// Properties
	public string defaultText { get; set; } // 0x0083ED4C-0x0083ED7C 0x0083EEDC-0x0083EF14
	public bool inputShouldBeHidden { get; } // 0x0083F9B0-0x0083FA60 
	[Obsolete] // 0x0052903C-0x00529074
	public string text { get; set; } // 0x0083FA70-0x0083FAA0 0x0083FAD0-0x0083FAD4
	public string value { get; set; } // 0x0083FAA0-0x0083FAD0 0x0083FAD4-0x0083FCA8
	[Obsolete] // 0x00529074-0x005290AC
	public bool selected { get; set; } // 0x008400E0-0x008400E4 0x008400E4-0x008400EC
	public bool isSelected { get; set; } // 0x0083FE9C-0x0083FF38 0x008400EC-0x008401BC
	public int cursorPosition { get; set; } // 0x008401BC-0x00840274 0x00840274-0x00840320
	public int selectionStart { get; set; } // 0x00840320-0x008403E0 0x008403E0-0x0084048C
	public int selectionEnd { get; set; } // 0x0084048C-0x00840544 0x00840544-0x008405F0
	public UITexture caret { get; } // 0x008405F0-0x008405F8 

	// Nested types
	public enum InputType // TypeDefIndex: 3400
	{
		Standard = 0,
		AutoCorrect = 1,
		Password = 2
	}

	public enum Validation // TypeDefIndex: 3401
	{
		None = 0,
		Integer = 1,
		Float = 2,
		Alphanumeric = 3,
		Username = 4,
		Name = 5,
		Filename = 6
	}

	public enum KeyhelmType // TypeDefIndex: 3402
	{
		Default = 0,
		ASCIICapable = 1,
		NumbersAndPunctuation = 2,
		URL = 3,
		NumberPad = 4,
		PhonePad = 5,
		NamePhonePad = 6,
		EmailAddress = 7
	}

	public enum OnReturnKey // TypeDefIndex: 3403
	{
		Default = 0,
		Submit = 1,
		NewLine = 2
	}

	public delegate char OnValidate(string text, int charIndex, char addedChar); // TypeDefIndex: 3404; 0x008405F8-0x00840A08

	// Constructors
	public UIInput(); // 0x0084357C-0x008436F4
	static UIInput(); // 0x008436F4-0x00843768

	// Methods
	public string Validate(string val); // 0x0083FCA8-0x0083FE9C
	private void Start(); // 0x00840DA4-0x00840F28
	protected void Init(); // 0x0083ED7C-0x0083EEDC
	protected void SaveToPlayerPrefs(string val); // 0x0083FF38-0x0083FFA8
	protected virtual void OnSelect(bool isSelected); // 0x0084103C-0x00841048
	protected void OnSelectEvent(); // 0x00841048-0x00841144
	protected void OnDeselectEvent(); // 0x00841144-0x00841320
	protected virtual void Update(); // 0x008413C4-0x00842220
	private void OnKey(KeyCode key); // 0x00842410-0x008425B0
	protected void DoBackspace(); // 0x00842220-0x008422AC
	protected virtual void Insert(string text); // 0x008425B0-0x00842888
	protected string GetLeftText(); // 0x00842888-0x00842954
	protected string GetRightText(); // 0x00842954-0x00842A24
	protected string GetSelection(); // 0x00842A24-0x00842B08
	protected int GetCharUnderMouse(); // 0x00842B08-0x00842C9C
	protected virtual void OnPress(bool isPressed); // 0x00842D74-0x00842EA8
	protected virtual void OnDrag(Vector2 delta); // 0x00842EA8-0x00842F90
	private void OnDisable(); // 0x00842F90-0x00842F9C
	protected virtual void Cleanup(); // 0x00842F9C-0x008430D0
	public void Submit(); // 0x008422AC-0x00842410
	public void UpdateLabel(); // 0x0083EF14-0x0083F9B0
	protected void SetPivotToLeft(); // 0x0084317C-0x008431CC
	protected void SetPivotToRight(); // 0x008431CC-0x0084321C
	protected void RestoreLabelPivot(); // 0x00841320-0x008413C4
	protected char Validate(string text, int pos, char ch); // 0x00840A08-0x00840DA4
	protected void ExecuteOnChange(); // 0x0083FFA8-0x008400E0
	public void RemoveFocus(); // 0x0084356C-0x00843574
	public void SaveValue(); // 0x00843574-0x0084357C
	public void LoadValue(); // 0x00840F28-0x00840FEC
}

[RequireComponent] // 0x005134E0-0x00513544
public class UIInputOnGUI : MonoBehaviour // TypeDefIndex: 3405
{
	// Constructors
	public UIInputOnGUI(); // 0x00843860-0x00843868
}

[AddComponentMenu] // 0x00513544-0x00513590
[ExecuteInEditMode] // 0x00513544-0x00513590
public class UILabel : UIWidget // TypeDefIndex: 3406
{
	// Fields
	public Crispness keepCrispWhenShrunk; // 0x180
	[HideInInspector] // 0x00516244-0x0051627C
	[SerializeField] // 0x00516244-0x0051627C
	private Font mTrueTypeFont; // 0x188
	[HideInInspector] // 0x0051627C-0x005162B4
	[SerializeField] // 0x0051627C-0x005162B4
	private UIFont mFont; // 0x190
	[HideInInspector] // 0x005162B4-0x00516300
	[Multiline] // 0x005162B4-0x00516300
	[SerializeField] // 0x005162B4-0x00516300
	private string mText; // 0x198
	[HideInInspector] // 0x00516300-0x00516338
	[SerializeField] // 0x00516300-0x00516338
	private int mFontSize; // 0x1A0
	[HideInInspector] // 0x00516338-0x00516370
	[SerializeField] // 0x00516338-0x00516370
	private FontStyle mFontStyle; // 0x1A4
	[HideInInspector] // 0x00516370-0x005163A8
	[SerializeField] // 0x00516370-0x005163A8
	private NGUIText.Alignment mAlignment; // 0x1A8
	[HideInInspector] // 0x005163A8-0x005163E0
	[SerializeField] // 0x005163A8-0x005163E0
	private bool mEncoding; // 0x1AC
	[HideInInspector] // 0x005163E0-0x00516418
	[SerializeField] // 0x005163E0-0x00516418
	private int mMaxLineCount; // 0x1B0
	[HideInInspector] // 0x00516418-0x00516450
	[SerializeField] // 0x00516418-0x00516450
	private Effect mEffectStyle; // 0x1B4
	[HideInInspector] // 0x00516450-0x00516488
	[SerializeField] // 0x00516450-0x00516488
	private Color mEffectColor; // 0x1B8
	[HideInInspector] // 0x00516488-0x005164C0
	[SerializeField] // 0x00516488-0x005164C0
	private NGUIText.SymbolStyle mSymbols; // 0x1C8
	[HideInInspector] // 0x005164C0-0x005164F8
	[SerializeField] // 0x005164C0-0x005164F8
	private Vector2 mEffectDistance; // 0x1CC
	[HideInInspector] // 0x005164F8-0x00516530
	[SerializeField] // 0x005164F8-0x00516530
	private Overflow mOverflow; // 0x1D4
	[HideInInspector] // 0x00516530-0x00516568
	[SerializeField] // 0x00516530-0x00516568
	private Material mMaterial; // 0x1D8
	[HideInInspector] // 0x00516568-0x005165A0
	[SerializeField] // 0x00516568-0x005165A0
	private bool mApplyGradient; // 0x1E0
	[HideInInspector] // 0x005165A0-0x005165D8
	[SerializeField] // 0x005165A0-0x005165D8
	private Color mGradientTop; // 0x1E4
	[HideInInspector] // 0x005165D8-0x00516610
	[SerializeField] // 0x005165D8-0x00516610
	private Color mGradientBottom; // 0x1F4
	[HideInInspector] // 0x00516610-0x00516648
	[SerializeField] // 0x00516610-0x00516648
	private int mSpacingX; // 0x204
	[HideInInspector] // 0x00516648-0x00516680
	[SerializeField] // 0x00516648-0x00516680
	private int mSpacingY; // 0x208
	[NonSerialized]
	[HideInInspector] // 0x00516680-0x00516690
	private bool mUseFloatSpacing; // 0x20C
	[NonSerialized]
	[HideInInspector] // 0x00516690-0x005166A0
	private float mFloatSpacingX; // 0x210
	[NonSerialized]
	[HideInInspector] // 0x005166A0-0x005166B0
	private float mFloatSpacingY; // 0x214
	[HideInInspector] // 0x005166B0-0x005166E8
	[SerializeField] // 0x005166B0-0x005166E8
	private bool mShrinkToFit; // 0x218
	[HideInInspector] // 0x005166E8-0x00516720
	[SerializeField] // 0x005166E8-0x00516720
	private int mMaxLineWidth; // 0x21C
	[HideInInspector] // 0x00516720-0x00516758
	[SerializeField] // 0x00516720-0x00516758
	private int mMaxLineHeight; // 0x220
	[HideInInspector] // 0x00516758-0x00516790
	[SerializeField] // 0x00516758-0x00516790
	private float mLineWidth; // 0x224
	[HideInInspector] // 0x00516790-0x005167C8
	[SerializeField] // 0x00516790-0x005167C8
	private bool mMultiline; // 0x228
	[NonSerialized]
	private Font mActiveTTF; // 0x230
	private float mDensity; // 0x238
	private bool mShouldBeProcessed; // 0x23C
	private string mProcessedText; // 0x240
	private bool mPremultiply; // 0x248
	private Vector2 mCalculatedSize; // 0x24C
	private float mScale; // 0x254
	private int mPrintedSize; // 0x258
	private int mLastWidth; // 0x25C
	private int mLastHeight; // 0x260
	private static BetterList<UILabel> mList; // 0x00
	private static Dictionary<Font, int> mFontUsage; // 0x08
	private static bool mTexRebuildAdded; // 0x10
	private static BetterList<Vector3> mTempVerts; // 0x18
	private static BetterList<int> mTempIndices; // 0x20

	// Properties
	private bool shouldBeProcessed { get; set; } // 0x00846938-0x00846940 0x00846940-0x0084695C
	public override bool isAnchoredHorizontally { get; } // 0x0084695C-0x00846998 
	public override bool isAnchoredVertically { get; } // 0x00846998-0x008469D8 
	public override Material material { get; set; } // 0x008469D8-0x00846B00 0x00846B00-0x00846BB4
	[Obsolete] // 0x005290AC-0x005290E4
	public UIFont font { get; set; } // 0x00846BB4-0x00846BBC 0x00846BBC-0x00846BC0
	public UIFont bitmapFont { get; set; } // 0x00846C74-0x00846C7C 0x00846BC0-0x00846C74
	public Font trueTypeFont { get; set; } // 0x00846C7C-0x00846D5C 0x00846D5C-0x00846E64
	public UnityEngine.Object ambigiousFont { get; set; } // 0x00847148-0x00847160 0x00847160-0x00847260
	public string text { get; set; } // 0x00847260-0x00847268 0x0083E284-0x0083E384
	public int defaultFontSize { get; } // 0x00847268-0x00847350 
	public int fontSize { get; set; } // 0x00847350-0x00847358 0x00847358-0x00847408
	public FontStyle fontStyle { get; set; } // 0x00847408-0x00847410 0x00847410-0x00847434
	public NGUIText.Alignment alignment { get; set; } // 0x00847434-0x0084743C 0x00841018-0x0084103C
	public bool applyGradient { get; set; } // 0x0084743C-0x00847444 0x00847444-0x00847474
	public Color gradientTop { get; set; } // 0x00847474-0x00847488 0x00847488-0x00847530
	public Color gradientBottom { get; set; } // 0x00847530-0x00847544 0x00847544-0x008475EC
	public int spacingX { get; set; } // 0x008475EC-0x008475F4 0x008475F4-0x00847618
	public int spacingY { get; set; } // 0x00847618-0x00847620 0x00847620-0x00847644
	public bool useFloatSpacing { get; set; } // 0x00847644-0x0084764C 0x0084764C-0x00847678
	public float floatSpacingX { get; set; } // 0x00847678-0x00847680 0x00847680-0x00847728
	public float floatSpacingY { get; set; } // 0x00847728-0x00847730 0x00847730-0x008477D8
	public float effectiveSpacingY { get; } // 0x008477D8-0x008477F4 
	public float effectiveSpacingX { get; } // 0x008477F4-0x00847810 
	private bool keepCrisp { get; } // 0x00847810-0x008478A8 
	public bool supportEncoding { get; set; } // 0x008478A8-0x008478B0 0x00840FEC-0x00841018
	public NGUIText.SymbolStyle symbolStyle { get; set; } // 0x008478B0-0x008478B8 0x008478B8-0x008478D8
	public Overflow overflowMethod { get; set; } // 0x008478D8-0x008478E0 0x008478E0-0x00847900
	[Obsolete] // 0x005290E4-0x0052911C
	public int lineWidth { get; set; } // 0x00847900-0x00847908 0x00847908-0x00847910
	[Obsolete] // 0x0052911C-0x00529154
	public int lineHeight { get; set; } // 0x00847910-0x00847918 0x00847918-0x00847920
	public bool multiLine { get; set; } // 0x0083FA60-0x0083FA70 0x00847920-0x00847950
	public override Vector3[] localCorners { get; } // 0x00847950-0x0084798C 
	public override Vector3[] worldCorners { get; } // 0x00847998-0x008479D4 
	public override Vector4 drawingDimensions { get; } // 0x008479D4-0x00847A10 
	public int maxLineCount { get; set; } // 0x00847A10-0x00847A18 0x00847A18-0x00847AD8
	public Effect effectStyle { get; set; } // 0x00847AD8-0x00847AE0 0x00847AE0-0x00847B00
	public Color effectColor { get; set; } // 0x00847B00-0x00847B14 0x00847B14-0x00847BA4
	public Vector2 effectDistance { get; set; } // 0x00847BA4-0x00847BB0 0x00847BB0-0x00847C60
	[Obsolete] // 0x00529154-0x0052918C
	public bool shrinkToFit { get; set; } // 0x00847C60-0x00847C70 0x00847C70-0x00847C90
	public string processedText { get; } // 0x00847C90-0x00847D00 
	public Vector2 printedSize { get; } // 0x00847D00-0x00847D3C 
	public override Vector2 localSize { get; } // 0x00847D3C-0x00847D78 
	private bool isValid { get; } // 0x00847D78-0x00847E34 

	// Nested types
	public enum Effect // TypeDefIndex: 3407
	{
		None = 0,
		Shadow = 1,
		Outline = 2,
		Outline8 = 3
	}

	public enum Overflow // TypeDefIndex: 3408
	{
		ShrinkContent = 0,
		ClampContent = 1,
		ResizeFreely = 2,
		ResizeHeight = 3
	}

	public enum Crispness // TypeDefIndex: 3409
	{
		Never = 0,
		OnDesktop = 1,
		Always = 2
	}

	// Constructors
	public UILabel(); // 0x0084B7F8-0x0084B938
	static UILabel(); // 0x0084B938-0x0084BA44

	// Methods
	protected override void OnInit(); // 0x00847E34-0x00847ED8
	protected override void OnDisable(); // 0x00847ED8-0x00847F74
	protected void SetActiveFont(Font fnt); // 0x00846E64-0x008470B0
	private static void OnFontChanged(Font font); // 0x00847F74-0x008481F0
	public override Vector3[] GetSides(Transform relativeTo); // 0x008481F0-0x00848234
	protected override void UpgradeFrom265(); // 0x00848234-0x008483E4
	protected override void OnAnchor(); // 0x00848DA4-0x00848EA0
	private void ProcessAndRequest(); // 0x008470B0-0x00847148
	protected override void OnEnable(); // 0x00848EA0-0x00848F88
	protected override void OnStart(); // 0x00848F88-0x00849138
	public override void MarkAsChanged(); // 0x00849138-0x0084914C
	public void ProcessText(); // 0x0084798C-0x00847998
	private void ProcessText(bool legacyMode, bool full); // 0x008483E4-0x00848DA4
	public override void MakePixelPerfect(); // 0x0084987C-0x00849B6C
	public void AssumeNaturalSize(); // 0x00849B6C-0x00849C94
	[Obsolete] // 0x0051E21C-0x0051E254
	public int GetCharacterIndex(Vector3 worldPos); // 0x00849C94-0x00849C9C
	[Obsolete] // 0x0051E254-0x0051E28C
	public int GetCharacterIndex(Vector2 localPos); // 0x00849C9C-0x00849CA4
	public int GetCharacterIndexAtPosition(Vector3 worldPos, bool precise); // 0x00842C9C-0x00842D74
	public int GetCharacterIndexAtPosition(Vector2 localPos, bool precise); // 0x00849CA4-0x00849FE8
	public string GetWordAtPosition(Vector3 worldPos); // 0x0084A274-0x0084A2A0
	public string GetWordAtPosition(Vector2 localPos); // 0x0084A440-0x0084A46C
	public string GetWordAtCharacterIndex(int characterIndex); // 0x0084A2A0-0x0084A440
	public string GetUrlAtPosition(Vector3 worldPos); // 0x0084A46C-0x0084A498
	public string GetUrlAtPosition(Vector2 localPos); // 0x0084A660-0x0084A68C
	public string GetUrlAtCharacterIndex(int characterIndex); // 0x0084A498-0x0084A660
	public int GetCharacterIndex(int currentIndex, KeyCode key); // 0x0084A68C-0x0084AB14
	public void PrintOverlay(int start, int end, UIGeometry caret, UIGeometry highlight, Color caretColor, Color highlightColor); // 0x0084321C-0x0084356C
	public override void OnFill(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols); // 0x0084AB14-0x0084AF28
	public Vector2 ApplyOffset(BetterList<Vector3> verts, int start); // 0x00849FE8-0x0084A274
	public void ApplyShadow(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols, int start, int end, float x, float y); // 0x0084AF28-0x0084B2F4
	public int CalculateOffsetToFit(string text); // 0x008430D0-0x0084317C
	public void SetCurrentProgress(); // 0x0084B2F4-0x0084B3CC
	public void SetCurrentPercent(); // 0x0084B3CC-0x0084B4FC
	public void SetCurrentSelection(); // 0x0084B4FC-0x0084B67C
	public bool Wrap(string text, out string final); // 0x0084B67C-0x0084B688
	public bool Wrap(string text, out string final, int height); // 0x0084B688-0x0084B750
	public void UpdateNGUIText(); // 0x0084914C-0x0084987C
	private new void OnApplicationPause(bool paused); // 0x0084B750-0x0084B7F8
}

[AddComponentMenu] // 0x00513590-0x00513628
[ExecuteInEditMode] // 0x00513590-0x00513628
[RequireComponent] // 0x00513590-0x00513628
public class UILocalize : MonoBehaviour // TypeDefIndex: 3410
{
	// Fields
	public string key; // 0x18
	private bool mStarted; // 0x20

	// Properties
	public string value { set; } // 0x0084BA44-0x0084BDA4

	// Constructors
	public UILocalize(); // 0x0084BEC8-0x0084BED0

	// Methods
	private void OnEnable(); // 0x0084BDA4-0x0084BDB4
	private void Start(); // 0x0084BEBC-0x0084BEC8
	private void OnLocalize(); // 0x0084BDB4-0x0084BEBC
}

[AddComponentMenu] // 0x00513628-0x005136C0
[ExecuteInEditMode] // 0x00513628-0x005136C0
[RequireComponent] // 0x00513628-0x005136C0
public class UIOrthoCamera : MonoBehaviour // TypeDefIndex: 3411
{
	// Fields
	private Camera mCam; // 0x18
	private Transform mTrans; // 0x20

	// Constructors
	public UIOrthoCamera(); // 0x0084F344-0x0084F34C

	// Methods
	private void Start(); // 0x0084F15C-0x0084F1E0
	private void Update(); // 0x0084F1E0-0x0084F344
}

[AddComponentMenu] // 0x005136C0-0x0051370C
[ExecuteInEditMode] // 0x005136C0-0x0051370C
public class UIPanel : UIRect // TypeDefIndex: 3412
{
	// Fields
	public static List<UIPanel> list; // 0x00
	public OnGeometryUpdated onGeometryUpdated; // 0x90
	public bool showInPanelTool; // 0x98
	public bool generateNormals; // 0x99
	public bool widgetsAreStatic; // 0x9A
	public bool cullWhileDragging; // 0x9B
	public bool alwaysOnScreen; // 0x9C
	public bool anchorOffset; // 0x9D
	public bool softBorderPadding; // 0x9E
	public RenderQueue renderQueue; // 0xA0
	public int startingRenderQueue; // 0xA4
	[NonSerialized]
	public List<UIWidget> widgets; // 0xA8
	[NonSerialized]
	public List<UIDrawCall> drawCalls; // 0xB0
	[NonSerialized]
	public Matrix4x4 worldToLocal; // 0xB8
	[NonSerialized]
	public Vector4 drawCallClipRange; // 0xF8
	public OnClippingMoved onClipMove; // 0x108
	[HideInInspector] // 0x005167C8-0x00516800
	[SerializeField] // 0x005167C8-0x00516800
	private Texture2D mClipTexture; // 0x110
	[HideInInspector] // 0x00516800-0x00516838
	[SerializeField] // 0x00516800-0x00516838
	private float mAlpha; // 0x118
	[HideInInspector] // 0x00516838-0x00516870
	[SerializeField] // 0x00516838-0x00516870
	private UIDrawCall.Clipping mClipping; // 0x11C
	[HideInInspector] // 0x00516870-0x005168A8
	[SerializeField] // 0x00516870-0x005168A8
	private Vector4 mClipRange; // 0x120
	[HideInInspector] // 0x005168A8-0x005168E0
	[SerializeField] // 0x005168A8-0x005168E0
	private Vector2 mClipSoftness; // 0x130
	[HideInInspector] // 0x005168E0-0x00516918
	[SerializeField] // 0x005168E0-0x00516918
	private int mDepth; // 0x138
	[HideInInspector] // 0x00516918-0x00516950
	[SerializeField] // 0x00516918-0x00516950
	private int mSortingOrder; // 0x13C
	private bool mRebuild; // 0x140
	private bool mResized; // 0x141
	[SerializeField] // 0x00516950-0x00516960
	private Vector2 mClipOffset; // 0x144
	private int mMatrixFrame; // 0x14C
	private int mAlphaFrameID; // 0x150
	private int mLayer; // 0x154
	private static float[] mTemp; // 0x08
	private Vector2 mMin; // 0x158
	private Vector2 mMax; // 0x160
	private bool mHalfPixelOffset; // 0x168
	private bool mSortWidgets; // 0x169
	private bool mUpdateScroll; // 0x16A
	private UIPanel mParentPanel; // 0x170
	private static Vector3[] mCorners; // 0x10
	private static int mUpdateFrame; // 0x18
	private UIDrawCall.OnRenderCallback mOnRender; // 0x178
	private bool mForced; // 0x180

	// Properties
	public static int nextUnusedDepth { get; } // 0x0084F34C-0x0084F494 
	public override bool canBeAnchored { get; } // 0x0084F494-0x0084F4A4 
	public override float alpha { get; set; } // 0x0084F4A4-0x0084F4AC 0x0084F4AC-0x0084F558
	public int depth { get; set; } // 0x0084F618-0x0084F620 0x0084F620-0x0084F70C
	public int sortingOrder { get; set; } // 0x0084F70C-0x0084F714 0x0084F714-0x0084F72C
	public float width { get; } // 0x0084FC60-0x0084FC64 
	public float height { get; } // 0x0084FD00-0x0084FD18 
	public bool halfPixelOffset { get; } // 0x0084FD18-0x0084FD20 
	public bool usedForUI { get; } // 0x0084FD20-0x0084FDC8 
	public Vector3 drawCallOffset { get; } // 0x0084FDC8-0x0084FFFC 
	public UIDrawCall.Clipping clipping { get; set; } // 0x00850154-0x0085015C 0x0085015C-0x00850180
	public UIPanel parentPanel { get; } // 0x00850180-0x00850188 
	public int clipCount { get; } // 0x00850188-0x00850234 
	public bool hasClipping { get; } // 0x00850234-0x00850248 
	public bool hasCumulativeClipping { get; } // 0x00850248-0x00850264 
	[Obsolete] // 0x0052918C-0x005291C4
	public bool clipsChildren { get; } // 0x00850264-0x00850280 
	public Vector2 clipOffset { get; set; } // 0x00850280-0x0085028C 0x0085028C-0x0085037C
	public Texture2D clipTexture { get; set; } // 0x008508A8-0x008508B0 0x008508B0-0x00850938
	[Obsolete] // 0x005291C4-0x005291FC
	public Vector4 clipRange { get; set; } // 0x00850938-0x0085094C 0x0085094C-0x00850950
	public Vector4 baseClipRegion { get; set; } // 0x00850B24-0x00850B38 0x00850950-0x00850B24
	public Vector4 finalClipRegion { get; } // 0x00850B38-0x00850BB4 
	public Vector2 clipSoftness { get; set; } // 0x00850BB4-0x00850BC0 0x00850BC0-0x00850C64
	public override Vector3[] localCorners { get; } // 0x00850C64-0x00850EF0 
	public override Vector3[] worldCorners { get; } // 0x00850EF0-0x00851480 

	// Nested types
	public enum RenderQueue // TypeDefIndex: 3413
	{
		Automatic = 0,
		StartAt = 1,
		Explicit = 2
	}

	public delegate void OnGeometryUpdated(); // TypeDefIndex: 3414; 0x00854704-0x00854920

	public delegate void OnClippingMoved(UIPanel panel); // TypeDefIndex: 3415; 0x008504F4-0x008508A8

	// Constructors
	public UIPanel(); // 0x0085544C-0x00855678
	static UIPanel(); // 0x00855678-0x00855738

	// Methods
	public static int CompareFunc(UIPanel a, UIPanel b); // 0x0084FB28-0x0084FC60
	private void InvalidateClipping(); // 0x0085037C-0x008504F4
	public override Vector3[] GetSides(Transform relativeTo); // 0x00851480-0x00851954
	public override void Invalidate(bool includeChildren); // 0x00851954-0x00851968
	public override float CalculateFinalAlpha(int frameID); // 0x00851968-0x00851A58
	public override void SetRect(float x, float y, float width, float height); // 0x00851A58-0x00851CEC
	public bool IsVisible(Vector3 a, Vector3 b, Vector3 c, Vector3 d); // 0x00851CEC-0x00852008
	public bool IsVisible(Vector3 worldPos); // 0x0085212C-0x008521E8
	public bool IsVisible(UIWidget w); // 0x008521E8-0x00852338
	public bool Affects(UIWidget w); // 0x00852338-0x00852470
	[ContextMenu] // 0x0051E28C-0x0051E2C4
	public void RebuildAllDrawCalls(); // 0x00852470-0x0085247C
	public void SetDirty(); // 0x0084F558-0x0084F618
	private void Awake(); // 0x0085247C-0x00852554
	private void FindParent(); // 0x00852554-0x00852650
	public override void ParentHasChanged(); // 0x00852650-0x00852678
	protected override void OnStart(); // 0x00852678-0x008526AC
	protected override void OnEnable(); // 0x008526AC-0x00852700
	protected override void OnInit(); // 0x00852700-0x008529CC
	protected override void OnDisable(); // 0x008529CC-0x00852B94
	private void UpdateTransformMatrix(); // 0x00852008-0x0085212C
	protected override void OnAnchor(); // 0x00852B94-0x00853320
	private void LateUpdate(); // 0x00853320-0x008535BC
	private void UpdateSelf(); // 0x008535BC-0x0085377C
	public void SortWidgets(); // 0x00854440-0x008544DC
	private void FillAllDrawCalls(); // 0x00853CB4-0x008541E0
	private bool FillDrawCall(UIDrawCall dc); // 0x008541E0-0x00854440
	private void UpdateDrawCalls(); // 0x0084F72C-0x0084FB28
	private void UpdateLayers(); // 0x0085377C-0x00853958
	private void UpdateWidgets(); // 0x00853958-0x00853CB4
	public UIDrawCall FindDrawCall(UIWidget w); // 0x008544DC-0x00854704
	public void AddWidget(UIWidget w); // 0x00854920-0x00854A94
	public void RemoveWidget(UIWidget w); // 0x00854A94-0x00854B88
	public void Refresh(); // 0x00854B88-0x00854C6C
	public virtual Vector3 CalculateConstrainOffset(Vector2 min, Vector2 max); // 0x00854C6C-0x00854DF8
	public bool ConstrainTargetToBounds(Transform target, ref Bounds targetBounds, bool immediate); // 0x00854DF8-0x008551F8
	public bool ConstrainTargetToBounds(Transform target, bool immediate); // 0x0083D77C-0x0083D7F8
	public static UIPanel Find(Transform trans); // 0x008551F8-0x00855264
	public static UIPanel Find(Transform trans, bool createIfMissing); // 0x008553D4-0x0085544C
	public static UIPanel Find(Transform trans, bool createIfMissing, int layer); // 0x00855264-0x008553D4
	public Vector2 GetWindowSize(); // 0x0084FFFC-0x00850154
	public Vector2 GetViewSize(); // 0x0084FC64-0x0084FD00
}

[AddComponentMenu] // 0x0051370C-0x00513758
[ExecuteInEditMode] // 0x0051370C-0x00513758
public class UIRoot : MonoBehaviour // TypeDefIndex: 3416
{
	// Fields
	public static List<UIRoot> list; // 0x00
	public Scaling scalingStyle; // 0x18
	public int manualWidth; // 0x1C
	public int manualHeight; // 0x20
	public int minimumHeight; // 0x24
	public int maximumHeight; // 0x28
	public bool fitWidth; // 0x2C
	public bool fitHeight; // 0x2D
	public bool adjustByDPI; // 0x2E
	public bool shrinkPortraitUI; // 0x2F
	private Transform mTrans; // 0x30

	// Properties
	public Constraint constraint { get; } // 0x007654E8-0x00765510 
	public Scaling activeScaling { get; } // 0x00765510-0x00765520 
	public int activeHeight { get; } // 0x00765520-0x007656FC 
	public float pixelSizeAdjustment { get; } // 0x007656FC-0x007657C4 

	// Nested types
	public enum Scaling // TypeDefIndex: 3417
	{
		Flexible = 0,
		Constrained = 1,
		ConstrainedOnMobiles = 2
	}

	public enum Constraint // TypeDefIndex: 3418
	{
		Fit = 0,
		Fill = 1,
		FitWidth = 2,
		FitHeight = 3
	}

	// Constructors
	public UIRoot(); // 0x007660AC-0x007660C8
	static UIRoot(); // 0x007660C8-0x0076613C

	// Methods
	public static float GetPixelSizeAdjustment(GameObject go); // 0x00765890-0x00765960
	public float GetPixelSizeAdjustment(int height); // 0x007657C4-0x00765890
	protected virtual void Awake(); // 0x00765960-0x00765988
	protected virtual void OnEnable(); // 0x00765988-0x00765A0C
	protected virtual void OnDisable(); // 0x00765A0C-0x00765A90
	protected virtual void Start(); // 0x00765A90-0x00765C04
	private void Update(); // 0x00765DD0-0x00765DD8
	public void UpdateScale(bool updateAnchors = true /* Metadata: 0x001F56CC */); // 0x00765C04-0x00765DD0
	public static void Broadcast(string funcName); // 0x00765DD8-0x00765F14
	public static void Broadcast(string funcName, object param); // 0x00765F14-0x007660AC
}

[AddComponentMenu] // 0x00513758-0x005137A4
[ExecuteInEditMode] // 0x00513758-0x005137A4
public class UISprite : UIBasicSprite // TypeDefIndex: 3419
{
	// Fields
	[HideInInspector] // 0x00516960-0x00516998
	[SerializeField] // 0x00516960-0x00516998
	private UIAtlas mAtlas; // 0x1C8
	[HideInInspector] // 0x00516998-0x005169D0
	[SerializeField] // 0x00516998-0x005169D0
	private string mSpriteName; // 0x1D0
	public Material mGlitterMaterial; // 0x1D8
	[HideInInspector] // 0x005169D0-0x00516A08
	[SerializeField] // 0x005169D0-0x00516A08
	private bool mFillCenter; // 0x1E0
	[NonSerialized]
	protected UISpriteData mSprite; // 0x1E8
	[NonSerialized]
	private bool mSpriteSet; // 0x1F0

	// Properties
	public override Material material { get; } // 0x00807250-0x00807330 
	public UIAtlas atlas { get; set; } // 0x00807330-0x00807338 0x00807338-0x008074D0
	public string spriteName { get; set; } // 0x008076AC-0x008076B4 0x008075F4-0x008076AC
	public bool isValid { get; } // 0x008076B4-0x008076D0 
	[Obsolete] // 0x005291FC-0x00529234
	public bool fillCenter { get; set; } // 0x00807878-0x00807888 0x00807888-0x008078B8
	public override Vector4 border { get; } // 0x008078B8-0x00807918 
	public override float pixelSize { get; } // 0x00807978-0x00807A10 
	public override int minWidth { get; } // 0x00807A10-0x00807C20 
	public override int minHeight { get; } // 0x00807C20-0x00807DE0 
	public override Vector4 drawingDimensions { get; } // 0x00807DE0-0x008081D0 
	public override bool premultipliedAlpha { get; } // 0x008081DC-0x00808274 

	// Constructors
	public UISprite(); // 0x00809464-0x008094D4

	// Methods
	public UISpriteData GetAtlasSprite(); // 0x008076D0-0x00807878
	protected void SetAtlasSprite(UISpriteData sp); // 0x00807568-0x008075F4
	public override void MakePixelPerfect(); // 0x00808274-0x00808468
	protected override void OnInit(); // 0x00808B84-0x00808BA0
	protected override void OnUpdate(); // 0x00808CD4-0x00808D14
	public override void OnFill(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols); // 0x00808D9C-0x00809010
}

[AddComponentMenu] // 0x005137A4-0x0051383C
[ExecuteInEditMode] // 0x005137A4-0x0051383C
[RequireComponent] // 0x005137A4-0x0051383C
public class UISpriteAnimation : MonoBehaviour // TypeDefIndex: 3420
{
	// Fields
	[HideInInspector] // 0x00516A08-0x00516A40
	[SerializeField] // 0x00516A08-0x00516A40
	protected int mFPS; // 0x18
	[HideInInspector] // 0x00516A40-0x00516A78
	[SerializeField] // 0x00516A40-0x00516A78
	protected string mPrefix; // 0x20
	[HideInInspector] // 0x00516A78-0x00516AB0
	[SerializeField] // 0x00516A78-0x00516AB0
	protected bool mLoop; // 0x28
	[HideInInspector] // 0x00516AB0-0x00516AE8
	[SerializeField] // 0x00516AB0-0x00516AE8
	protected bool mSnap; // 0x29
	protected UISprite mSprite; // 0x30
	protected float mDelta; // 0x38
	protected int mIndex; // 0x3C
	protected bool mActive; // 0x40
	protected List<string> mSpriteNames; // 0x48

	// Properties
	public int frames { get; } // 0x008094D4-0x00809528 
	public int framesPerSecond { get; set; } // 0x00809528-0x00809530 0x00809530-0x00809538
	public string namePrefix { get; set; } // 0x00809538-0x00809540 0x00809540-0x00809584
	public bool loop { get; set; } // 0x0080978C-0x00809794 0x00809794-0x008097A0
	public bool isPlaying { get; } // 0x008097A0-0x008097A8 

	// Constructors
	public UISpriteAnimation(); // 0x00809A30-0x00809AC8

	// Methods
	protected virtual void Start(); // 0x008097A8-0x008097AC
	protected virtual void Update(); // 0x008097AC-0x00809918
	public void RebuildSpriteList(); // 0x00809584-0x0080978C
	public void Play(); // 0x00809918-0x00809924
	public void Pause(); // 0x00809924-0x0080992C
	public void ResetToBeginning(); // 0x0080992C-0x00809A30
}

[Serializable]
public class UISpriteData // TypeDefIndex: 3421
{
	// Fields
	public string name; // 0x10
	public int x; // 0x18
	public int y; // 0x1C
	public int width; // 0x20
	public int height; // 0x24
	public int borderLeft; // 0x28
	public int borderRight; // 0x2C
	public int borderTop; // 0x30
	public int borderBottom; // 0x34
	public int paddingLeft; // 0x38
	public int paddingRight; // 0x3C
	public int paddingTop; // 0x40
	public int paddingBottom; // 0x44

	// Properties
	public bool hasBorder { get; } // 0x00808714-0x00808734 
	public bool hasPadding { get; } // 0x00809AC8-0x00809AE8 

	// Constructors
	public UISpriteData(); // 0x00809BC4-0x00809C1C

	// Methods
	public void SetRect(int x, int y, int width, int height); // 0x00809AE8-0x00809AF4
	public void SetPadding(int left, int bottom, int right, int top); // 0x00809AF4-0x00809B00
	public void SetBorder(int left, int bottom, int right, int top); // 0x00809B00-0x00809B0C
	public void CopyFrom(UISpriteData sd); // 0x00809B0C-0x00809B8C
	public void CopyBorderFrom(UISpriteData sd); // 0x00809B8C-0x00809BC4
}

[AddComponentMenu] // 0x0051383C-0x00513888
[ExecuteInEditMode] // 0x0051383C-0x00513888
public class UIStretch : MonoBehaviour // TypeDefIndex: 3422
{
	// Fields
	public Camera uiCamera; // 0x18
	public GameObject container; // 0x20
	public Style style; // 0x28
	public bool runOnlyOnce; // 0x2C
	public Vector2 relativeSize; // 0x30
	public Vector2 initialSize; // 0x38
	public Vector2 borderPadding; // 0x40
	[HideInInspector] // 0x00516AE8-0x00516B20
	[SerializeField] // 0x00516AE8-0x00516B20
	private UIWidget widgetContainer; // 0x48
	private Transform mTrans; // 0x50
	private UIWidget mWidget; // 0x58
	private UISprite mSprite; // 0x60
	private UIPanel mPanel; // 0x68
	private UIRoot mRoot; // 0x70
	private Animation mAnim; // 0x78
	private Rect mRect; // 0x80
	private bool mStarted; // 0x90

	// Nested types
	public enum Style // TypeDefIndex: 3423
	{
		None = 0,
		Horizontal = 1,
		Vertical = 2,
		Both = 3,
		BasedOnHeight = 4,
		FillKeepingRatio = 5,
		FitInternalKeepingRatio = 6
	}

	// Constructors
	public UIStretch(); // 0x0080AFE8-0x0080B07C

	// Methods
	private void Awake(); // 0x00809EB8-0x0080A008
	private void OnDestroy(); // 0x0080A008-0x0080A0E4
	private void ScreenSizeChanged(); // 0x0080A0E4-0x0080A0FC
	private void Start(); // 0x0080AB9C-0x0080AD44
	private void Update(); // 0x0080A0FC-0x0080AB9C
}

[AddComponentMenu] // 0x00513888-0x005138C0
public class UITextList : MonoBehaviour // TypeDefIndex: 3424
{
	// Fields
	public UILabel textLabel; // 0x18
	public UIProgressBar scrollBar; // 0x20
	public Style style; // 0x28
	public int paragraphHistory; // 0x2C
	protected char[] mSeparator; // 0x30
	protected float mScroll; // 0x38
	protected int mTotalLines; // 0x3C
	protected int mLastWidth; // 0x40
	protected int mLastHeight; // 0x44
	private BetterList<Paragraph> mParagraphs; // 0x48
	private static Dictionary<string, BetterList<Paragraph>> mHistory; // 0x00

	// Properties
	protected BetterList<Paragraph> paragraphs { get; } // 0x0080C298-0x0080C3CC 
	public bool isValid { get; } // 0x0080C3CC-0x0080C4A0 
	public float scrollValue { get; set; } // 0x0080C4A0-0x0080C4A8 0x0080C4A8-0x0080C5B0
	protected float lineHeight { get; } // 0x0080C848-0x0080C8F0 
	protected int scrollHeight { get; } // 0x0080C8F0-0x0080C9B8 

	// Nested types
	public enum Style // TypeDefIndex: 3425
	{
		Text = 0,
		Chat = 1
	}

	protected class Paragraph // TypeDefIndex: 3426
	{
		// Fields
		public string text; // 0x10
		public string[] lines; // 0x18

		// Constructors
		public Paragraph(); // 0x0080D400-0x0080D408
	}

	// Constructors
	public UITextList(); // 0x0080D408-0x0080D498
	static UITextList(); // 0x0080D498-0x0080D50C

	// Methods
	public void Clear(); // 0x0080C9B8-0x0080CA1C
	private void Start(); // 0x0080CA1C-0x0080CB9C
	private void Update(); // 0x0080CE44-0x0080CEA8
	public void OnScroll(float val); // 0x0080D1C4-0x0080D228
	public void OnDrag(Vector2 delta); // 0x0080D228-0x0080D28C
	private void OnScrollBar(); // 0x0080D28C-0x0080D2F8
	public void Add(string text); // 0x0080D2F8-0x0080D300
	protected void Add(string text, bool updateVisible); // 0x0080D300-0x0080D400
	protected void Rebuild(); // 0x0080CEA8-0x0080D1C4
	protected void UpdateVisibleText(); // 0x0080C5B0-0x0080C848
}

[AddComponentMenu] // 0x005138C0-0x0051390C
[ExecuteInEditMode] // 0x005138C0-0x0051390C
public class UITexture : UIBasicSprite // TypeDefIndex: 3427
{
	// Fields
	[HideInInspector] // 0x00516B20-0x00516B58
	[SerializeField] // 0x00516B20-0x00516B58
	private Rect mRect; // 0x1C8
	[HideInInspector] // 0x00516B58-0x00516B90
	[SerializeField] // 0x00516B58-0x00516B90
	private Texture mTexture; // 0x1D8
	[HideInInspector] // 0x00516B90-0x00516BC8
	[SerializeField] // 0x00516B90-0x00516BC8
	private Material mMat; // 0x1E0
	[HideInInspector] // 0x00516BC8-0x00516C00
	[SerializeField] // 0x00516BC8-0x00516C00
	private Shader mShader; // 0x1E8
	[HideInInspector] // 0x00516C00-0x00516C38
	[SerializeField] // 0x00516C00-0x00516C38
	private Vector4 mBorder; // 0x1F0
	[HideInInspector] // 0x00516C38-0x00516C70
	[SerializeField] // 0x00516C38-0x00516C70
	private bool mFixedAspect; // 0x200
	[NonSerialized]
	private int mPMA; // 0x204

	// Properties
	public override Texture mainTexture { get; set; } // 0x0080D69C-0x0080D77C 0x0080D77C-0x0080D8D4
	public override Material material { get; set; } // 0x0080D8D4-0x0080D8DC 0x0080D8DC-0x0080D994
	public override Shader shader { get; set; } // 0x0080D994-0x0080DA84 0x0080DA84-0x0080DBDC
	public override bool premultipliedAlpha { get; } // 0x0080DBDC-0x0080DD14 
	public override Vector4 border { get; set; } // 0x0080DD14-0x0080DD28 0x0080DD28-0x0080DE30
	public Rect uvRect { get; set; } // 0x0080DE30-0x0080DE44 0x0080DE44-0x0080DEE4
	public override Vector4 drawingDimensions { get; } // 0x0080DEE4-0x0080E188 
	public bool fixedAspect { get; set; } // 0x0080E188-0x0080E190 0x0080E190-0x0080E21C

	// Constructors
	public UITexture(); // 0x0080E9A4-0x0080EA94

	// Methods
	public override void MakePixelPerfect(); // 0x0080E21C-0x0080E374
	protected override void OnUpdate(); // 0x0080E374-0x0080E4F4
	public override void OnFill(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols); // 0x0080E5FC-0x0080E9A4
}

[AddComponentMenu] // 0x0051390C-0x00513944
public class UITooltip : MonoBehaviour // TypeDefIndex: 3428
{
	// Fields
	protected static UITooltip mInstance; // 0x00
	public Camera uiCamera; // 0x18
	public UILabel text; // 0x20
	public UISprite background; // 0x28
	public float appearSpeed; // 0x30
	public bool scalingTransitions; // 0x34
	protected GameObject mTooltip; // 0x38
	protected Transform mTrans; // 0x40
	protected float mTarget; // 0x48
	protected float mCurrent; // 0x4C
	protected Vector3 mPos; // 0x50
	protected Vector3 mSize; // 0x5C
	protected UIWidget[] mWidgets; // 0x68

	// Properties
	public static bool isVisible { get; } // 0x008107F8-0x008108AC 

	// Constructors
	public UITooltip(); // 0x00811608-0x00811690

	// Methods
	private void Awake(); // 0x008108AC-0x00810900
	private void OnDestroy(); // 0x00810900-0x00810950
	protected virtual void Start(); // 0x00810950-0x00810A74
	protected virtual void Update(); // 0x00810A74-0x00810D14
	protected virtual void SetAlpha(float val); // 0x00810D14-0x00810DB4
	protected virtual void SetText(string tooltipText); // 0x00810DB4-0x008113D8
	[Obsolete] // 0x0051E2C4-0x0051E2FC
	public static void ShowText(string text); // 0x008113D8-0x00811498
	public static void Show(string text); // 0x00811498-0x00811558
	public static void Hide(); // 0x00811558-0x00811608
}

[AddComponentMenu] // 0x00513944-0x005139DC
[ExecuteInEditMode] // 0x00513944-0x005139DC
[RequireComponent] // 0x00513944-0x005139DC
public class UIViewport : MonoBehaviour // TypeDefIndex: 3429
{
	// Fields
	public Camera sourceCamera; // 0x18
	public Transform topLeft; // 0x20
	public Transform bottomRight; // 0x28
	public float fullSize; // 0x30
	private Camera mCam; // 0x38

	// Constructors
	public UIViewport(); // 0x00813404-0x00813414

	// Methods
	private void Start(); // 0x008130EC-0x00813188
	private void LateUpdate(); // 0x00813188-0x00813404
}

public class WeeklyShow : MonoBehaviour // TypeDefIndex: 3430
{
	// Fields
	public GameObject noNet; // 0x18
	public GameObject Content; // 0x20
	public UILabel TimeCd; // 0x28
	public UISlider sl; // 0x30
	private CollectionManage collectionman; // 0x38
	private bool IsOver; // 0x40
	public UILabel rewardnum; // 0x48
	public UISprite rewardicon; // 0x50
	public UILabel title; // 0x58
	public UILabel progress; // 0x60
	private CollectionManage.Pack pack; // 0x68
	public GameObject collect; // 0x70
	public GameObject TimeEnd; // 0x78
	public GameObject ComingSoon; // 0x80
	public GameObject NonetNow; // 0x88
	public UISprite Tokenicon; // 0x90
	public UISprite Tokenicon_end; // 0x98
	public UILabel title_end; // 0xA0
	public LerpTool lerptool; // 0xA8
	public Animator rewardPs; // 0xB0
	public GameObject RewardGet_obj; // 0xB8
	public UILabel comingson; // 0xC0
	public UILabel progress_timeend; // 0xC8
	public UISlider sl_timeend; // 0xD0
	public UILabel rewardnum_timeend; // 0xD8
	public UISprite rewardicon_timeend; // 0xE0
	public TaskPopup taskPopup; // 0xE8
	public static bool showInMoving; // 0x00

	// Properties
	public static int LastCollectNums { get; set; } // 0x00A97588-0x00A975D8 0x00A97534-0x00A97588
	public static bool IsNeedUpdate { get; } // 0x00A975D8-0x00A9767C 
	public static bool IsNeedToShow { get; } // 0x00A9767C-0x00A976EC 
	public static bool IsNewComing { get; } // 0x00A964BC-0x00A9651C 

	// Nested types
	[CompilerGenerated] // 0x00514020-0x00514030
	private sealed class __c__DisplayClass34_0 // TypeDefIndex: 3431
	{
		// Fields
		public float endval; // 0x10
		public WeeklyShow __4__this; // 0x18

		// Constructors
		public __c__DisplayClass34_0(); // 0x00A9752C-0x00A97534

		// Methods
		internal void _Showlerp_b__0(); // 0x00A977C4-0x00A97890
	}

	// Constructors
	public WeeklyShow(); // 0x00A976EC-0x00A976F4
	static WeeklyShow(); // 0x00A976F4-0x00A976F8

	// Methods
	private void OnEnable(); // 0x00A95AD8-0x00A95BE0
	private void FreshUI(); // 0x00A95BE0-0x00A964BC
	private void Update(); // 0x00A96E44-0x00A973D4
	public void Reward(); // 0x00A973D4-0x00A9752C
	public void FreshTimeEnd(); // 0x00A96568-0x00A96A08
	private void SetWeeklyData(int cur, int amount, int rewardNum, int rewardtype, string packversion); // 0x00A96D70-0x00A96E44
	private bool IsSetWeeklyData(); // 0x00A9651C-0x00A96568
	private void Showlerp(int collectNum, int Amount); // 0x00A96B18-0x00A96D70
	public bool IsNoContainsPackVersion(); // 0x00A96A08-0x00A96B18
	[CompilerGenerated] // 0x0051E2FC-0x0051E30C
	private void _Reward_b__25_0(); // 0x00A976F8-0x00A977C4
}

public class NoticeNetManage // TypeDefIndex: 3432
{
	// Fields
	private static NoticeNetManage instance; // 0x00
	private float packTime; // 0x10
	public bool noticeInfoFromServer; // 0x14
	public List<NoticePack> packs; // 0x18
	public bool getInfoFromServer; // 0x20
	private int CurNotice; // 0x24

	// Properties
	public static NoticeNetManage Instance { get; } // 0x0069B944-0x0069B9C4 

	// Nested types
	[Serializable]
	public class NoticePack // TypeDefIndex: 3433
	{
		// Fields
		public string msg; // 0x10
		public DateTime startPackTime; // 0x18
		public DateTime endPackTime; // 0x20

		// Constructors
		public NoticePack(); // 0x0069C29C-0x0069C2A4

		// Methods
		public bool CheckNotice(); // 0x0069C3EC-0x0069C4CC
	}

	// Constructors
	public NoticeNetManage(); // 0x0069B9C4-0x0069B9CC

	// Methods
	public void RequestNoticeInfo(); // 0x0069B9CC-0x0069BAF4
	private bool Analysis(string data, bool server); // 0x0069BAF4-0x0069BCD0
	private bool Analysis(IDictionary<string, object> dict); // 0x0069BCD0-0x0069C29C
	public string GetCurInfo(); // 0x0069C2A4-0x0069C3EC
	[CompilerGenerated] // 0x0051E30C-0x0051E31C
	private void _RequestNoticeInfo_b__7_0(string data); // 0x0069C4CC-0x0069C4D4
}

public class ObjExporter // TypeDefIndex: 3434
{
	// Constructors
	public ObjExporter(); // 0x0069F49C-0x0069F4A4

	// Methods
	public static void MeshToFile(MeshFilter mf, string filename, float scale); // 0x0069EBAC-0x0069ED08
	public static string MeshToString(MeshFilter mf, float scale); // 0x0069ED08-0x0069F49C
}

public class RankCellScrollView : ScrollViewRecycle<RankCell, TopRun> // TypeDefIndex: 3435
{
	// Constructors
	public RankCellScrollView(); // 0x0072B748-0x0072B798

	// Methods
	protected override void RefreshUI(int cellIndex, TopRun topRun); // 0x0072B6B0-0x0072B748
}

public class RecodeManager // TypeDefIndex: 3436
{
	// Fields
	private static RecodeManager _instance; // 0x00
	private RecodeResult result; // 0x10
	private Good[] goods; // 0x18

	// Properties
	public static RecodeManager Instance { get; } // 0x0072D248-0x0072D2D0 

	// Nested types
	[Serializable]
	public class RecodeData // TypeDefIndex: 3437
	{
		// Fields
		public Good[] data; // 0x10

		// Constructors
		public RecodeData(); // 0x0072E034-0x0072E03C
	}

	[Serializable]
	public class Good // TypeDefIndex: 3438
	{
		// Fields
		public string _type; // 0x10
		public string _id; // 0x18
		public string _num; // 0x20

		// Constructors
		public Good(); // 0x0072DDC4-0x0072DDCC
	}

	public enum RecodeResult // TypeDefIndex: 3439
	{
		Success = 0,
		OutTime = 1,
		Invalid = 2,
		HadUsed = 3,
		None = 4
	}

	// Constructors
	public RecodeManager(); // 0x0072D2D0-0x0072D2E0

	// Methods
	public void SendRecode(string recode); // 0x0072D2E0-0x0072D398
	private void RecodeListener(string text); // 0x0072D398-0x0072DDB8
	public Good[] GetRecodes(); // 0x0072DDCC-0x0072DDE4
	public void GetRecodeGoods(); // 0x0072DDE4-0x0072E034
}

public class FallRendering : MonoBehaviour // TypeDefIndex: 3440
{
	// Fields
	public AnimationPair[] runAnimations; // 0x18
	public AnimationPair[] dodgeLeftAnimations; // 0x20
	public AnimationPair[] dodgeRightAnimations; // 0x28
	public AnimationPair[] hitOneAnimations; // 0x30
	public AnimationClip defaultAnimation; // 0x38

	// Nested types
	[Serializable]
	public class AnimationPair // TypeDefIndex: 3441
	{
		// Fields
		public AnimationClip manAnimationClip; // 0x10
		public AnimationClip womanAnimationClip; // 0x18

		// Constructors
		public AnimationPair(); // 0x00686E30-0x00686E38
	}

	// Constructors
	public FallRendering(); // 0x00686E28-0x00686E30

	// Methods
	public void Initialize(Animation characterAnimation, List<AnimationClip> addedClipsList); // 0x00686898-0x00686B80
	private string[] GetNamesAddAnimationClips(AnimationPair[] pairs, Animation characterAnimation, List<AnimationClip> addedClipsList, bool man); // 0x00686B80-0x00686D28
	private void AddClipsToAnimationComp(Animation animation, AnimationClip clip, List<AnimationClip> addedClipsList); // 0x00686D28-0x00686E28
}

public class HillRendering : MonoBehaviour // TypeDefIndex: 3442
{
	// Fields
	public AnimationPair[] runAnimations; // 0x18
	public AnimationPair[] dodgeLeftAnimations; // 0x20
	public AnimationPair[] dodgeRightAnimations; // 0x28
	public AnimationPair[] hitOneAnimations; // 0x30
	public AnimationClip defaultAnimation; // 0x38

	// Nested types
	[Serializable]
	public class AnimationPair // TypeDefIndex: 3443
	{
		// Fields
		public AnimationClip manAnimationClip; // 0x10
		public AnimationClip womanAnimationClip; // 0x18

		// Constructors
		public AnimationPair(); // 0x006DAC78-0x006DAC80
	}

	// Constructors
	public HillRendering(); // 0x006DAC70-0x006DAC78

	// Methods
	public void Initialize(Animation characterAnimation, List<AnimationClip> addedClipsList); // 0x006DA6E0-0x006DA9C8
	private string[] GetNamesAddAnimationClips(AnimationPair[] pairs, Animation characterAnimation, List<AnimationClip> addedClipsList, bool man); // 0x006DA9C8-0x006DAB70
	private void AddClipsToAnimationComp(Animation animation, AnimationClip clip, List<AnimationClip> addedClipsList); // 0x006DAB70-0x006DAC70
}

public class AdStrategy : MonoBehaviour // TypeDefIndex: 3444
{
	// Fields
	private static AdStrategy _instance; // 0x00
	private bool hasShowStartAd; // 0x18
	private FullAdType lastAdType; // 0x1C
	private DateTime startTime; // 0x20
	private DateTime lastShowAdTime; // 0x28
	private int adCount; // 0x30
	private int currentAdNeedCount; // 0x34
	public int adNeedCount_Min; // 0x38
	public int adNeedCount_Max; // 0x3C
	private bool reviveByView; // 0x40
	private float startTimeWhenRevive; // 0x44
	private List<string> _screenNamesWithFullAd; // 0x48
	private List<string> _screenNamesWithStartAd; // 0x50
	private string lastScreenChangeName; // 0x58
	private bool isShowingBanner; // 0x60
	private bool canShowRemoveAdPopup; // 0x61
	private bool hasShowSubscribePopup; // 0x62
	private const string gameOverAdRemoteKey = "Show_inter_endless_revive_config"; // Metadata: 0x001F5723
	private const string lockscreenConfig = "Show_inter_lock_sceen_config"; // Metadata: 0x001F5747
	private const string adIntervalCheckRemoteKey = "Show_inter_between_3_position_config"; // Metadata: 0x001F5767
	private const string gameOverAdRemoteKey_FirstTime = "Show_inter_endless__FirstTime_config"; // Metadata: 0x001F578F
	private FullAdType curLastShowADtype; // 0x64
	public static bool CanShowSubscribePopup; // 0x08
	public static int showSubscreNum; // 0x0C
	public static int ShowGameoverAdNum; // 0x10

	// Properties
	public static AdStrategy Instance { get; } // 0x0070919C-0x007092BC 
	public static DateTime nextChangeScreeAdTime { get; set; } // 0x0070A6BC-0x0070A708 0x0070A708-0x0070A75C
	public static DateTime nextSubscribeAdTime { get; set; } // 0x0070B16C-0x0070B1B8 0x0070B1B8-0x0070B20C
	public static int showSubscreNumToday { get; set; } // 0x0070B20C-0x0070B25C 0x0070B25C-0x0070B2B0
	public static bool ShowSubscribe { get; } // 0x00709EB4-0x0070A018 

	// Nested types
	public enum FullAdType // TypeDefIndex: 3445
	{
		startAd = 0,
		gameOverAd = 1,
		changeScreenAd = 2,
		lockedAd = 3,
		None = 4
	}

	// Constructors
	public AdStrategy(); // 0x0070B2B0-0x0070B2D4
	static AdStrategy(); // 0x0070B2D4-0x0070B2D8

	// Methods
	private void Awake(); // 0x007092BC-0x0070940C
	private void Start(); // 0x0070940C-0x0070969C
	private void OnEnable(); // 0x0070969C-0x00709878
	private void OnDisable(); // 0x00709878-0x00709A2C
	private bool onResumeAd(); // 0x00709A2C-0x00709ABC
	public void OnFreeReward(RiseSdk.AdEventType type, int id, string tag, int eventType); // 0x00709D34-0x00709EB4
	public bool Check(FullAdType adType); // 0x00709ABC-0x00709D34
	private void OnChangedScreen(string screenName); // 0x0070A018-0x0070A0F4
	public void ShowStart20Ad(string screenName, string lastAdScreenName); // 0x0070A0F4-0x0070A2B0
	private void SetChangeScreenAd(string screenName, string lastAdScreenName); // 0x0070A2B0-0x0070A51C
	public void Revive(); // 0x0070A75C-0x0070A78C
	public void ResetRevive(); // 0x0070A78C-0x0070A794
	public void ShowGameOverFullAd(); // 0x0070A794-0x0070ACB0
	private void ShowPasslevelAd(string tag, string showAd, string event1, string event2, FullAdType adType, bool loading = true /* Metadata: 0x001F5721 */); // 0x0070A51C-0x0070A6BC
	public void ShowNativeAd(string event1, string event2, bool isRaceGameover = false /* Metadata: 0x001F5722 */); // 0x0070ACB0-0x0070AF08
	public void CloseNativeAd(); // 0x0070AF08-0x0070AFC8
	public void ShowDeliciousIconAd(string event1, string event2); // 0x0070AFC8-0x0070AFCC
	public void CloseDeliciousIconAd(); // 0x0070AFCC-0x0070B03C
	public void ShowBanner(int pos, string position, string reason); // 0x0070B03C-0x0070B0E0
	public void CloseBanner(); // 0x0070B0E0-0x0070B16C
}

public class AnimationClipData : ScriptableObject // TypeDefIndex: 3446
{
	// Fields
	public ClipData[] datas; // 0x18

	// Constructors
	public AnimationClipData(); // 0x0070F180-0x0070F188
}

[Serializable]
public class ClipData // TypeDefIndex: 3447
{
	// Fields
	public float startValue; // 0x10
	public string path; // 0x18
	public string propertyName; // 0x20

	// Constructors
	public ClipData(float value, string path, string propertyName); // 0x0066C7E0-0x0066C828
}

public class InitAssets : MonoBehaviour // TypeDefIndex: 3448
{
	// Fields
	public Material glowGold; // 0x18
	public Color glowGoldColor; // 0x20
	public float glowGoldFalloff; // 0x30
	public Material[] gzrbrreIqrshNeujakgqv; // 0x38
	public Material[] chestBoxes; // 0x40
	public HashSet<Material> dynamicCloneMaterialsSet; // 0x48
	[HideInInspector] // 0x00516C70-0x00516C80
	public Dictionary<Material, Material> original2CloneMaterials; // 0x50
	private CameraCulling cameraCulling; // 0x58
	private static InitAssets instance; // 0x00

	// Properties
	public static InitAssets Instance { get; } // 0x006E8F18-0x006E90A4 

	// Constructors
	public InitAssets(); // 0x006E90A4-0x006E9144

	// Methods
	private void Awake(); // 0x006E8520-0x006E8844
	private void Start(); // 0x006E8844-0x006E8A18
	public void NotifyInitMaterials(Renderer[] renderes); // 0x006E8A18-0x006E8BFC
	public Material CloneDynmaicMaterial(Material sharedMaterial); // 0x006E8CA8-0x006E8D54
	public Material CloneMaterial(Material originalMaterial); // 0x006E8BFC-0x006E8CA8
	public void SetChestBox(Renderer[] renderers, Vector4 cr, float activeHeight); // 0x006E8D54-0x006E8F18
}

public class InitMaterials : MonoBehaviour // TypeDefIndex: 3449
{
	// Constructors
	public InitMaterials(); // 0x006E91C8-0x006E91D0

	// Methods
	private void Start(); // 0x006E9144-0x006E91C8
}

public abstract class AbsRecycle<TRecycleItem> : MonoBehaviour // TypeDefIndex: 3450
	where TRecycleItem : AbsRecycleItem
{
	// Fields
	public GameObject origGo;
	public List<TRecycleItem> recycleItems;
	public int max;

	// Nested types
	[CompilerGenerated] // 0x00514030-0x00514040
	private sealed class _WarmUpC_d__9 : IEnumerator<object> // TypeDefIndex: 3451
	{
		// Fields
		private int __1__state;
		private object __2__current;
		public AbsRecycle<TRecycleItem> __4__this;

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525150-0x00525160 */ get; }
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525170-0x00525180 */ get; }

		// Constructors
		[DebuggerHidden] // 0x00525130-0x00525140
		public _WarmUpC_d__9(int __1__state);

		// Methods
		[DebuggerHidden] // 0x00525140-0x00525150
		void IDisposable.Dispose();
		private bool MoveNext();
		[DebuggerHidden] // 0x00525160-0x00525170
		void IEnumerator.Reset();
	}

	// Constructors
	protected AbsRecycle();

	// Methods
	public virtual void Awake();
	public void Instantiate();
	public abstract TRecycleItem NewRecycleItem(GameObject newGo);
	public virtual TRecycleItem Retain();
	public virtual void WarmUp();
	[IteratorStateMachine] // 0x0051E31C-0x0051E380
	public virtual IEnumerator WarmUpC();
}

[Serializable]
public abstract class AbsRecycleItem // TypeDefIndex: 3452
{
	// Constructors
	protected AbsRecycleItem(); // 0x00705424-0x0070542C

	// Methods
	public abstract bool IsUsing();
	public abstract void Release();
	public abstract void Retain();
}

public class AudioRecycleItem : AbsRecycleItem // TypeDefIndex: 3453
{
	// Fields
	public AudioSource audio; // 0x10
	public bool isUsing; // 0x18

	// Constructors
	public AudioRecycleItem(); // 0x00713DE8-0x00713DF0

	// Methods
	public override bool IsUsing(); // 0x00713D74-0x00713D7C
	public override void Release(); // 0x00713D7C-0x00713DB0
	public override void Retain(); // 0x00713DB0-0x00713DE8
}

public class AudioPlayer : MonoBehaviour // TypeDefIndex: 3454
{
	// Fields
	public List<AudioClipInfo> musics; // 0x18
	private List<AudioSource> musicSrcs; // 0x20
	public List<AudioClipInfo> sounds; // 0x28
	private List<AudioSource> soundSrcs; // 0x30
	private List<AudioSoundRecycle> audioSoundRecycles; // 0x38
	public AudioSource currentMusicAudioSource; // 0x40
	private bool isFading; // 0x48
	public float currentMusicMaxVolume; // 0x4C
	private float musicVolumnRateWithSound; // 0x50
	private bool audioPlayPaused; // 0x54
	private float currentMusicAudioSourceTime; // 0x58
	private static AudioPlayer _instance; // 0x00
	public static int SoundWorld; // 0x08
	public static int MusicWorld; // 0x0C

	// Properties
	public static AudioPlayer Instance { get; } // 0x007104C4-0x0071052C 

	// Nested types
	[Serializable]
	public class AudioClipInfo // TypeDefIndex: 3455
	{
		// Fields
		public AudioClip Clip; // 0x10
		public float minPitch; // 0x18
		public float maxPitch; // 0x1C
		public float minVolume; // 0x20
		public float maxVolume; // 0x24
		public bool playOnAwake; // 0x28
		public bool loop; // 0x29
		public AudioRolloffMode Rollof; // 0x2C

		// Constructors
		public AudioClipInfo(); // 0x00713D58-0x00713D74
	}

	[CompilerGenerated] // 0x00514040-0x00514050
	private sealed class _PlaySoundDelay_C_d__38 : IEnumerator<object> // TypeDefIndex: 3456
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public float delay; // 0x20
		public AudioPlayer __4__this; // 0x28
		public AudioSource audioSource; // 0x30
		public bool restart; // 0x38

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005251A0-0x005251B0 */ get; } // 0x007138C8-0x007138D0 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005251C0-0x005251D0 */ get; } // 0x00713934-0x0071393C 

		// Constructors
		[DebuggerHidden] // 0x00525180-0x00525190
		public _PlaySoundDelay_C_d__38(int __1__state); // 0x00711CD4-0x00711D00

		// Methods
		[DebuggerHidden] // 0x00525190-0x005251A0
		void IDisposable.Dispose(); // 0x0071380C-0x00713810
		private bool MoveNext(); // 0x00713810-0x007138C8
		[DebuggerHidden] // 0x005251B0-0x005251C0
		void IEnumerator.Reset(); // 0x007138D0-0x00713934
	}

	[CompilerGenerated] // 0x00514050-0x00514060
	private sealed class _PlaySoundFade_C_d__41 : IEnumerator<object> // TypeDefIndex: 3457
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public AudioSource audioSource; // 0x20
		public AudioPlayer __4__this; // 0x28
		public float fadeDownTime; // 0x30
		public float pauseTime; // 0x34
		public float fadeupTime; // 0x38
		private float _factor_5__2; // 0x3C
		private float _start_5__3; // 0x40

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005251F0-0x00525200 */ get; } // 0x00713BD4-0x00713BDC 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525210-0x00525220 */ get; } // 0x00713C40-0x00713C48 

		// Constructors
		[DebuggerHidden] // 0x005251D0-0x005251E0
		public _PlaySoundFade_C_d__41(int __1__state); // 0x00711EC0-0x00711EEC

		// Methods
		[DebuggerHidden] // 0x005251E0-0x005251F0
		void IDisposable.Dispose(); // 0x0071393C-0x00713940
		private bool MoveNext(); // 0x00713940-0x00713BD4
		[DebuggerHidden] // 0x00525200-0x00525210
		void IEnumerator.Reset(); // 0x00713BDC-0x00713C40
	}

	[CompilerGenerated] // 0x00514060-0x00514070
	private sealed class _StopSoundDelay_C_d__45 : IEnumerator<object> // TypeDefIndex: 3458
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public float delay; // 0x20
		public AudioSource audioSource; // 0x28
		private float _time_5__2; // 0x30

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525240-0x00525250 */ get; } // 0x00713CE4-0x00713CEC 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525260-0x00525270 */ get; } // 0x00713D50-0x00713D58 

		// Constructors
		[DebuggerHidden] // 0x00525220-0x00525230
		public _StopSoundDelay_C_d__45(int __1__state); // 0x00712020-0x0071204C

		// Methods
		[DebuggerHidden] // 0x00525230-0x00525240
		void IDisposable.Dispose(); // 0x00713C48-0x00713C4C
		private bool MoveNext(); // 0x00713C4C-0x00713CE4
		[DebuggerHidden] // 0x00525250-0x00525260
		void IEnumerator.Reset(); // 0x00713CEC-0x00713D50
	}

	[CompilerGenerated] // 0x00514070-0x00514080
	private sealed class _PlaySoundASR_C_d__55 : IEnumerator<object> // TypeDefIndex: 3459
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public AudioSource audioSource; // 0x20
		public AudioPlayer __4__this; // 0x28
		public Vector3 position; // 0x30
		public float pitch; // 0x3C
		private AudioRecycleItem _item_5__2; // 0x40

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525290-0x005252A0 */ get; } // 0x00713798-0x007137A0 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005252B0-0x005252C0 */ get; } // 0x00713804-0x0071380C 

		// Constructors
		[DebuggerHidden] // 0x00525270-0x00525280
		public _PlaySoundASR_C_d__55(int __1__state); // 0x0071286C-0x00712898

		// Methods
		[DebuggerHidden] // 0x00525280-0x00525290
		void IDisposable.Dispose(); // 0x0071360C-0x00713610
		private bool MoveNext(); // 0x00713610-0x00713798
		[DebuggerHidden] // 0x005252A0-0x005252B0
		void IEnumerator.Reset(); // 0x007137A0-0x00713804
	}

	[CompilerGenerated] // 0x00514080-0x00514090
	private sealed class _PlaySoundASRDelay_C_d__56 : IEnumerator<object> // TypeDefIndex: 3460
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public float delay; // 0x20
		public AudioPlayer __4__this; // 0x28
		public AudioSource audioSource; // 0x30
		public float pitch; // 0x38
		public Vector3 position; // 0x3C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005252E0-0x005252F0 */ get; } // 0x00713598-0x007135A0 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525300-0x00525310 */ get; } // 0x00713604-0x0071360C 

		// Constructors
		[DebuggerHidden] // 0x005252C0-0x005252D0
		public _PlaySoundASRDelay_C_d__56(int __1__state); // 0x00712898-0x007128C4

		// Methods
		[DebuggerHidden] // 0x005252D0-0x005252E0
		void IDisposable.Dispose(); // 0x007134D8-0x007134DC
		private bool MoveNext(); // 0x007134DC-0x00713598
		[DebuggerHidden] // 0x005252F0-0x00525300
		void IEnumerator.Reset(); // 0x007135A0-0x00713604
	}

	[CompilerGenerated] // 0x00514090-0x005140A0
	private sealed class _MusicFader_d__63 : IEnumerator<object> // TypeDefIndex: 3461
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public AudioPlayer __4__this; // 0x20
		public float fadeDownTime; // 0x28
		public float pauseTime; // 0x2C
		public AudioSource audioSource; // 0x30
		public float fadeupTime; // 0x38
		private float _factor_5__2; // 0x3C
		private float _start_5__3; // 0x40

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525330-0x00525340 */ get; } // 0x007131D0-0x007131D8 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525350-0x00525360 */ get; } // 0x0071323C-0x00713244 

		// Constructors
		[DebuggerHidden] // 0x00525310-0x00525320
		public _MusicFader_d__63(int __1__state); // 0x00712DF4-0x00712E20

		// Methods
		[DebuggerHidden] // 0x00525320-0x00525330
		void IDisposable.Dispose(); // 0x00712E58-0x00712E5C
		private bool MoveNext(); // 0x00712E5C-0x007131D0
		[DebuggerHidden] // 0x00525340-0x00525350
		void IEnumerator.Reset(); // 0x007131D8-0x0071323C
	}

	[CompilerGenerated] // 0x005140A0-0x005140B0
	private sealed class _MusicFader_d__64 : IEnumerator<object> // TypeDefIndex: 3462
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public AudioPlayer __4__this; // 0x20
		public AudioSource audioSource; // 0x28
		public float fadeupTime; // 0x30
		private float _factor_5__2; // 0x34

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525380-0x00525390 */ get; } // 0x00713464-0x0071346C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005253A0-0x005253B0 */ get; } // 0x007134D0-0x007134D8 

		// Constructors
		[DebuggerHidden] // 0x00525360-0x00525370
		public _MusicFader_d__64(int __1__state); // 0x00712E20-0x00712E4C

		// Methods
		[DebuggerHidden] // 0x00525370-0x00525380
		void IDisposable.Dispose(); // 0x00713244-0x00713248
		private bool MoveNext(); // 0x00713248-0x00713464
		[DebuggerHidden] // 0x00525390-0x005253A0
		void IEnumerator.Reset(); // 0x0071346C-0x007134D0
	}

	// Constructors
	public AudioPlayer(); // 0x00712E4C-0x00712E54
	static AudioPlayer(); // 0x00712E54-0x00712E58

	// Methods
	private void InitSoundMusic(); // 0x0071052C-0x007105D8
	public void SetSound(int val); // 0x007105D8-0x0071065C
	public void SetMusic(int val); // 0x0071065C-0x007106E0
	[ContextMenu] // 0x0051E380-0x0051E3B8
	private void Resetss(); // 0x007106E0-0x00710C94
	private void Awake(); // 0x00710EA8-0x00710FC0
	private void OnApplicationPause(bool pause); // 0x00710FE4-0x00711160
	private AudioSource Warmup(AudioClipInfo info, Transform parent); // 0x00710C94-0x00710EA8
	public AudioSource GetAudioSource(string name); // 0x00711160-0x00711168
	private AudioSource GetAudioSource(string soundName, List<AudioSource> sources); // 0x00711168-0x00711258
	private AudioSoundRecycle GetAudioSourceRecycle(string name); // 0x00711258-0x0071135C
	public AudioSoundRecycle AddAudioSourceRecycle(AudioSource audioSource); // 0x0071135C-0x00711508
	public AudioSoundRecycle AddAudioSourceRecycle(string name); // 0x00711508-0x007116B4
	private AudioSoundRecycle GetOrNewAudioSourceRecycle(string name); // 0x007116B4-0x00711788
	private AudioSoundRecycle GetOrNewAudioSourceRecycle(AudioSource audioSource); // 0x00711788-0x00711850
	public bool IsPlaying(string name); // 0x00711850-0x0071186C
	public bool IsMusicPlaying(string name); // 0x00711904-0x00711920
	private bool IsPlaying(AudioSource audioSource); // 0x0071186C-0x00711904
	public virtual void Loop(string name); // 0x00711920-0x007119DC
	public void PlaySound(string name, bool restart = false /* Metadata: 0x001F57CB */); // 0x0070DFC8-0x0070E070
	public void PlaySound(AudioSource audioSource, bool restart = false /* Metadata: 0x001F57CC */); // 0x007119DC-0x00711B10
	public void PlaySound(string name, float delay, bool restart = false /* Metadata: 0x001F57CD */); // 0x00711B3C-0x00711C08
	private void PlaySoundDelay(AudioSource audioSource, float delay, bool restart = false /* Metadata: 0x001F57CE */); // 0x00711C08-0x00711C38
	[IteratorStateMachine] // 0x0051E3B8-0x0051E41C
	private IEnumerator PlaySoundDelay_C(AudioSource audioSource, float delay, bool restart = false /* Metadata: 0x001F57CF */); // 0x00711C38-0x00711CD4
	public void PlaySound(string name, float fadeDownTime, float pauseTime, float fadeupTime); // 0x00711D00-0x00711DD0
	private void PlaySoundFade(AudioSource audioSource, float fadeDownTime, float pauseTime, float fadeupTime); // 0x00711DD0-0x00711E1C
	[IteratorStateMachine] // 0x0051E41C-0x0051E480
	private IEnumerator PlaySoundFade_C(AudioSource audioSource, float fadeDownTime, float pauseTime, float fadeupTime); // 0x00711E1C-0x00711EC0
	public void StopSound(string name); // 0x00711EEC-0x00711F08
	private void StopSound(AudioSource audioSource); // 0x00711F08-0x00711F9C
	private void StopSoundDelay(AudioSource audioSource, float delay); // 0x00711B10-0x00711B3C
	[IteratorStateMachine] // 0x0051E480-0x0051E4E4
	private IEnumerator StopSoundDelay_C(AudioSource audioSource, float delay); // 0x00711F9C-0x00712020
	public void PauseSound(string name); // 0x0071204C-0x00712068
	private void PauseSound(AudioSource audioSource); // 0x00712068-0x007120FC
	public void PlaySound(string name, Vector3 position); // 0x007120FC-0x007121CC
	public void PlaySoundWithAudioSource(AudioSource audioSource, Vector3 position); // 0x007122B8-0x0071237C
	private void PlaySoundASR(AudioSource audioSource, Vector3 position); // 0x007121CC-0x007122B8
	public void PlaySound(string name, float pitch, Vector3 position); // 0x00712424-0x007124FC
	public void PlaySoundASR(AudioSource audioSource, float pitch, Vector3 position); // 0x007124FC-0x007125D8
	public void PlaySound(string name, float delay, float pitch, Vector3 position); // 0x007125D8-0x007126C4
	private void PlaySoundASRDelay(AudioSource audioSource, float delay, float pitch, Vector3 position); // 0x007126C4-0x007127B4
	[IteratorStateMachine] // 0x0051E4E4-0x0051E548
	private IEnumerator PlaySoundASR_C(AudioSource audioSource, float pitch, Vector3 position); // 0x0071237C-0x00712424
	[IteratorStateMachine] // 0x0051E548-0x0051E5AC
	private IEnumerator PlaySoundASRDelay_C(AudioSource audioSource, float delay, float pitch, Vector3 position); // 0x007127B4-0x0071286C
	public void PlayMusic(string name, bool restart = false /* Metadata: 0x001F57D0 */); // 0x007128C4-0x007128F4
	private void PlayMusic(AudioSource music, bool restart = false /* Metadata: 0x001F57D1 */); // 0x007128F4-0x00712ACC
	public void PlayMusic(string name, float fadeDownTime, float pauseTime, float fadeupTime); // 0x00712ACC-0x00712B20
	public void PlayMusic(string name, float fadeupTime); // 0x00712C34-0x00712C70
	private void PlayMusicFade(AudioSource audioSource, float fadeDownTime, float pauseTime, float fadeupTime); // 0x00712B20-0x00712C34
	private void PlayMusicFade(AudioSource audioSource, float fadeupTime); // 0x00712C70-0x00712CBC
	[IteratorStateMachine] // 0x0051E5AC-0x0051E610
	private IEnumerator MusicFader(AudioSource audioSource, float fadeDownTime, float pauseTime, float fadeupTime); // 0x00712CBC-0x00712D64
	[IteratorStateMachine] // 0x0051E610-0x0051E674
	private IEnumerator MusicFader(AudioSource audioSource, float fadeupTime); // 0x00712D64-0x00712DF4
	public void WarmUp(string name); // 0x00710FC0-0x00710FE4
}

public class AudioSoundRecycle : AbsRecycle<AudioRecycleItem> // TypeDefIndex: 3463
{
	// Constructors
	public AudioSoundRecycle(); // 0x0071415C-0x007141AC

	// Methods
	public override AudioRecycleItem NewRecycleItem(GameObject newGo); // 0x00713DF0-0x00713E78
	public virtual void Pause(); // 0x00713E78-0x00713F1C
	public virtual void Stop(); // 0x00713F1C-0x00713FC0
	public override void WarmUp(); // 0x00713FC0-0x0071415C
}

public class BoundJumpCoinManager : MonoBehaviour // TypeDefIndex: 3464
{
	// Fields
	private static BoundJumpCoinManager instance; // 0x00
	private List<BoundJumpCoins> topLevelPlaced; // 0x18

	// Properties
	public static BoundJumpCoinManager Instance { get; } // 0x0071D944-0x0071DA80 

	// Constructors
	public BoundJumpCoinManager(); // 0x0071DA80-0x0071DAF0

	// Methods
	public void Add(BoundJumpCoins line); // 0x0071D5C8-0x0071D630
	public void ClearTopLevelLines(); // 0x0071D630-0x0071D6D8
	public void Remove(BoundJumpCoins line); // 0x0071D804-0x0071D880
	public void Reset(); // 0x0071D7AC-0x0071D804
}

public class BoundJumpCoins : BaseO // TypeDefIndex: 3465
{
	// Fields
	public string poolName; // 0x18
	private CoinPool pool; // 0x20
	public float deltaX; // 0x28
	public int rows; // 0x2C
	public int startRowPosition; // 0x30
	public int endRowPosition; // 0x34
	public int randomPickupPosition; // 0x38
	public AnimationCurve coinX; // 0x40
	public float jumpHeight; // 0x48
	public float jumpDistance; // 0x4C
	private List<TrackObject> activeobjs; // 0x50
	private BoundJumpCoinManager boundJumpCoinManager; // 0x58

	// Constructors
	public BoundJumpCoins(); // 0x0071DFF8-0x0071E098

	// Methods
	protected override void Awake(); // 0x0071DAF0-0x0071DBE0
	public override void OnActivate(); // 0x0071DBE0-0x0071DE08
	public override void OnDeactivate(); // 0x0071DE08-0x0071DE3C
	public void RemoveCoins(); // 0x0071D6D8-0x0071D7AC
	private void OnDrawGizmos(); // 0x0071DE3C-0x0071DFF8
	public void ToggleCoinVisibility(bool active); // 0x0071D880-0x0071D944
}

public class BoxHelper : MonoBehaviour // TypeDefIndex: 3466
{
	// Fields
	[SerializeField] // 0x00516C80-0x00516C90
	private GameObject tipGo; // 0x18
	[SerializeField] // 0x00516C90-0x00516CA0
	private UILabel freeLbl; // 0x20
	[SerializeField] // 0x00516CA0-0x00516CB0
	private UILabel lbl; // 0x28
	[SerializeField] // 0x00516CB0-0x00516CC0
	private Animation boxAnim; // 0x30

	// Constructors
	public BoxHelper(); // 0x0071E480-0x0071E488

	// Methods
	private void OnEnable(); // 0x0071E27C-0x0071E3C8
	private void OnClick(); // 0x0071E3C8-0x0071E480
}

public class ChangeCharModle : MonoBehaviour // TypeDefIndex: 3467
{
	// Fields
	public List<GameObject> Customs; // 0x18

	// Constructors
	public ChangeCharModle(); // 0x0077F120-0x0077F128

	// Methods
	private void OnEnable(); // 0x0077EEE0-0x0077EEE4
	private void ChangeModle(); // 0x0077EEE4-0x0077F024
	public void showTheme(Transform charP); // 0x0077F024-0x0077F120
}

public interface ICharacterAttachment // TypeDefIndex: 3468
{
	// Properties
	IEnumerator Current { get; set; }
	bool Paused { get; set; }
	bool ShouldPauseInFlypack { get; }
	StopFlag Stop { get; set; }

	// Methods
	IEnumerator Begain();
	void Pause();
	void Reset();
	void Resume();
}

public enum StopFlag // TypeDefIndex: 3469
{
	DONT_STOP = 0,
	STOP = 1,
	STOP_NO_ENDING = 2
}

public class CharacterAttachmentCollection // TypeDefIndex: 3470
{
	// Fields
	private List<ICharacterAttachment> deadModifiers; // 0x10
	private List<ICharacterAttachment> modifiers; // 0x18
	[CompilerGenerated] // 0x00516CC0-0x00516CD0
	private CoinMagnet _CoinMagnet_k__BackingField; // 0x20
	[CompilerGenerated] // 0x00516CD0-0x00516CE0
	private DoubleScoreMultiplier _DoubleScoreMultiplier_k__BackingField; // 0x28
	[CompilerGenerated] // 0x00516CE0-0x00516CF0
	private Shield _Shield_k__BackingField; // 0x30

	// Properties
	public CoinMagnet CoinMagnet { [CompilerGenerated] /* 0x0051E674-0x0051E684 */ get; [CompilerGenerated] /* 0x0051E684-0x0051E694 */ private set; } // 0x0074205C-0x00742064 0x00742064-0x0074206C
	public DoubleScoreMultiplier DoubleScoreMultiplier { [CompilerGenerated] /* 0x0051E694-0x0051E6A4 */ get; [CompilerGenerated] /* 0x0051E6A4-0x0051E6B4 */ private set; } // 0x0074206C-0x00742074 0x00742074-0x0074207C
	public Shield Shield { [CompilerGenerated] /* 0x0051E6B4-0x0051E6C4 */ get; [CompilerGenerated] /* 0x0051E6C4-0x0051E6D4 */ private set; } // 0x0074207C-0x00742084 0x00742084-0x0074208C

	// Constructors
	public CharacterAttachmentCollection(); // 0x007412A8-0x00741360

	// Methods
	public void Add(ICharacterAttachment modifier); // 0x00741360-0x007415D8
	public bool IsActive(ICharacterAttachment modifier); // 0x007415D8-0x00741640
	public void Pause(); // 0x00741640-0x00741754
	public void PauseInFlypackMode(); // 0x00741754-0x007418FC
	public void Reset(); // 0x007418FC-0x00741A18
	public void Resume(); // 0x00741A18-0x00741B2C
	public void Stop(); // 0x00741B2C-0x00741C44
	public void StopWithNoEnding(); // 0x00741C44-0x00741D5C
	public void Update(); // 0x00741D5C-0x0074205C
}

public class CoinMagnet : ICharacterAttachment // TypeDefIndex: 3471
{
	// Fields
	public float pullSpeed; // 0x10
	private ActiveProp Powerup; // 0x18
	private Character character; // 0x20
	private Animation characterAnimation; // 0x28
	private CharacterController characterController; // 0x30
	private CharacterModel characterModel; // 0x38
	private CharacterRendering characterRendering; // 0x40
	private Transform coinEFX; // 0x48
	private OnTriggerObject coinMagnetCollider; // 0x50
	private Game game; // 0x58
	private static CoinMagnet instance; // 0x00
	private Sprint sprint; // 0x60
	[CompilerGenerated] // 0x00516CF0-0x00516D00
	private IEnumerator _Current_k__BackingField; // 0x68
	[CompilerGenerated] // 0x00516D00-0x00516D10
	private bool _Paused_k__BackingField; // 0x70
	[CompilerGenerated] // 0x00516D10-0x00516D20
	private StopFlag _Stop_k__BackingField; // 0x74
	[CompilerGenerated] // 0x00516D20-0x00516D30
	private bool _IsActive_k__BackingField; // 0x78

	// Properties
	public static CoinMagnet Instance { get; } // 0x00670D18-0x00670D94 
	public IEnumerator Current { [CompilerGenerated] /* 0x0051E79C-0x0051E7AC */ get; [CompilerGenerated] /* 0x0051E7AC-0x0051E7BC */ set; } // 0x00670D94-0x00670D9C 0x00670D9C-0x00670DA4
	public bool Paused { [CompilerGenerated] /* 0x0051E7BC-0x0051E7CC */ get; [CompilerGenerated] /* 0x0051E7CC-0x0051E7DC */ set; } // 0x00670DA4-0x00670DAC 0x00670DAC-0x00670DB8
	public bool ShouldPauseInFlypack { get; } // 0x00670DB8-0x00670DC0 
	public StopFlag Stop { [CompilerGenerated] /* 0x0051E7DC-0x0051E7EC */ get; [CompilerGenerated] /* 0x0051E7EC-0x0051E7FC */ set; } // 0x00670DC0-0x00670DC8 0x00670DC8-0x00670DD0
	public bool IsActive { [CompilerGenerated] /* 0x0051E7FC-0x0051E80C */ get; [CompilerGenerated] /* 0x0051E80C-0x0051E81C */ private set; } // 0x00670DD0-0x00670DD8 0x00670DD8-0x00670DE4

	// Nested types
	[CompilerGenerated] // 0x005140B0-0x005140C0
	private sealed class _Begain_d__13 : IEnumerator<object> // TypeDefIndex: 3472
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public CoinMagnet __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005253D0-0x005253E0 */ get; } // 0x00671150-0x00671158 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005253F0-0x00525400 */ get; } // 0x006711BC-0x006711C4 

		// Constructors
		[DebuggerHidden] // 0x005253B0-0x005253C0
		public _Begain_d__13(int __1__state); // 0x0067059C-0x006705C8

		// Methods
		[DebuggerHidden] // 0x005253C0-0x005253D0
		void IDisposable.Dispose(); // 0x006710B8-0x006710BC
		private bool MoveNext(); // 0x006710BC-0x00671150
		[DebuggerHidden] // 0x005253E0-0x005253F0
		void IEnumerator.Reset(); // 0x00671158-0x006711BC
	}

	[CompilerGenerated] // 0x005140C0-0x005140D0
	private sealed class __c__DisplayClass18_0 // TypeDefIndex: 3473
	{
		// Fields
		public Coin coin; // 0x10
		public Vector3 coinPosition; // 0x18
		public CoinMagnet __4__this; // 0x28
		public Glow glow; // 0x30

		// Constructors
		public __c__DisplayClass18_0(); // 0x00670DE4-0x00670DEC

		// Methods
		internal void _Pull_b__0(float t); // 0x00670DEC-0x00670F00
	}

	[CompilerGenerated] // 0x005140D0-0x005140E0
	private sealed class __c__DisplayClass18_1 // TypeDefIndex: 3474
	{
		// Fields
		public Vector3 glowPosition; // 0x10
		public __c__DisplayClass18_0 CS___8__locals1; // 0x20

		// Constructors
		public __c__DisplayClass18_1(); // 0x00670F00-0x00670F08

		// Methods
		internal void _Pull_b__1(float t); // 0x00670F08-0x006710B8
	}

	[CompilerGenerated] // 0x005140E0-0x005140F0
	private sealed class _Pull_d__18 : IEnumerator<object> // TypeDefIndex: 3475
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Coin coin; // 0x20
		public CoinMagnet __4__this; // 0x28
		public Glow glow; // 0x30
		private __c__DisplayClass18_0 __8__1; // 0x38

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525420-0x00525430 */ get; } // 0x006715D0-0x006715D8 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525440-0x00525450 */ get; } // 0x0067163C-0x00671644 

		// Constructors
		[DebuggerHidden] // 0x00525400-0x00525410
		public _Pull_d__18(int __1__state); // 0x00670CD0-0x00670CFC

		// Methods
		[DebuggerHidden] // 0x00525410-0x00525420
		void IDisposable.Dispose(); // 0x006711C4-0x006711C8
		private bool MoveNext(); // 0x006711C8-0x006715D0
		[DebuggerHidden] // 0x00525430-0x00525440
		void IEnumerator.Reset(); // 0x006715D8-0x0067163C
	}

	// Constructors
	public CoinMagnet(); // 0x0067042C-0x00670528

	// Methods
	[IteratorStateMachine] // 0x0051E6D4-0x0051E738
	public IEnumerator Begain(); // 0x00670528-0x0067059C
	private void Before(); // 0x006705C8-0x00670780
	private void After(); // 0x00670780-0x0067095C
	public void EndRending(); // 0x0067095C-0x00670A3C
	public void CoinTriggerHit(Collider collider); // 0x00670A3C-0x00670B5C
	[IteratorStateMachine] // 0x0051E738-0x0051E79C
	private IEnumerator Pull(Coin coin, Glow glow); // 0x00670C40-0x00670CC8
	public void Reset(); // 0x00670CFC-0x00670D04
	public void Pause(); // 0x00670D04-0x00670D10
	public void Resume(); // 0x00670D10-0x00670D18
}

public class DoubleScoreMultiplier : ICharacterAttachment // TypeDefIndex: 3476
{
	// Fields
	private static DoubleScoreMultiplier instance; // 0x00
	private ActiveProp Powerup; // 0x10
	[CompilerGenerated] // 0x00516D30-0x00516D40
	private IEnumerator _Current_k__BackingField; // 0x18
	[CompilerGenerated] // 0x00516D40-0x00516D50
	private bool _Paused_k__BackingField; // 0x20
	[CompilerGenerated] // 0x00516D50-0x00516D60
	private StopFlag _Stop_k__BackingField; // 0x24

	// Properties
	public IEnumerator Current { [CompilerGenerated] /* 0x0051E880-0x0051E890 */ get; [CompilerGenerated] /* 0x0051E890-0x0051E8A0 */ set; } // 0x0067C508-0x0067C510 0x0067C510-0x0067C518
	public bool Paused { [CompilerGenerated] /* 0x0051E8A0-0x0051E8B0 */ get; [CompilerGenerated] /* 0x0051E8B0-0x0051E8C0 */ set; } // 0x0067C518-0x0067C520 0x0067C520-0x0067C52C
	public bool ShouldPauseInFlypack { get; } // 0x0067C52C-0x0067C534 
	public StopFlag Stop { [CompilerGenerated] /* 0x0051E8C0-0x0051E8D0 */ get; [CompilerGenerated] /* 0x0051E8D0-0x0051E8E0 */ set; } // 0x0067C534-0x0067C53C 0x0067C53C-0x0067C544
	public static DoubleScoreMultiplier Instance { get; } // 0x0067C544-0x0067C5C4 

	// Nested types
	[CompilerGenerated] // 0x005140F0-0x00514100
	private sealed class _Begain_d__3 : IEnumerator<object> // TypeDefIndex: 3477
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public DoubleScoreMultiplier __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525470-0x00525480 */ get; } // 0x0067C65C-0x0067C664 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525490-0x005254A0 */ get; } // 0x0067C6C8-0x0067C6D0 

		// Constructors
		[DebuggerHidden] // 0x00525450-0x00525460
		public _Begain_d__3(int __1__state); // 0x0067C1F0-0x0067C21C

		// Methods
		[DebuggerHidden] // 0x00525460-0x00525470
		void IDisposable.Dispose(); // 0x0067C5C4-0x0067C5C8
		private bool MoveNext(); // 0x0067C5C8-0x0067C65C
		[DebuggerHidden] // 0x00525480-0x00525490
		void IEnumerator.Reset(); // 0x0067C664-0x0067C6C8
	}

	// Constructors
	public DoubleScoreMultiplier(); // 0x0067C174-0x0067C17C

	// Methods
	[IteratorStateMachine] // 0x0051E81C-0x0051E880
	public IEnumerator Begain(); // 0x0067C17C-0x0067C1F0
	private void Prepare(); // 0x0067C21C-0x0067C314
	private void End(); // 0x0067C314-0x0067C478
	public void Reset(); // 0x0067C478-0x0067C4F4
	public void Pause(); // 0x0067C4F4-0x0067C500
	public void Resume(); // 0x0067C500-0x0067C508
}

public class Helmet : ICharacterAttachment // TypeDefIndex: 3478
{
	// Fields
	public float cooldownDistance; // 0x10
	public float slowMotionDistance; // 0x14
	public float slowDownToScale; // 0x18
	public float WaitForParticlesDelay; // 0x1C
	public float RemoveObstaclesDistance; // 0x20
	public float pullSpeed; // 0x24
	private bool isInCooldown; // 0x28
	public bool isAllowed; // 0x29
	private ActiveProp Powerup; // 0x30
	private Game game; // 0x38
	private Character character; // 0x40
	private CharacterModel characterModel; // 0x48
	private Animation characterAnimation; // 0x50
	private CharacterController characterController; // 0x58
	private OnTriggerObject coinMagnetCollider; // 0x60
	private Transform coinEFX; // 0x68
	private GameObject helmetRoot; // 0x70
	private static Helmet instance; // 0x00
	private TrackController trackController; // 0x78
	private GameObject helm; // 0x80
	private bool useMagnet; // 0x88
	private bool useMutiplier; // 0x89
	[CompilerGenerated] // 0x00516D60-0x00516D70
	private OnStartHelmetDelegate OnStartHelmet; // 0x90
	[CompilerGenerated] // 0x00516D70-0x00516D80
	private OnEndHelmetDelegate OnEndHelmet; // 0x98
	[CompilerGenerated] // 0x00516D80-0x00516D90
	private OnHardResetDelegate OnHardReset; // 0xA0
	[CompilerGenerated] // 0x00516D90-0x00516DA0
	private OnHelmetJumpDelegate OnJump; // 0xA8
	[CompilerGenerated] // 0x00516DA0-0x00516DB0
	private OnJumpFromWaterDelegate OnJumpFromWater; // 0xB0
	[CompilerGenerated] // 0x00516DB0-0x00516DC0
	private OnRunDelegate OnRun; // 0xB8
	[CompilerGenerated] // 0x00516DC0-0x00516DD0
	private OnSwitchToHelmetDelegate OnSwitchToHelmet; // 0xC0
	[CompilerGenerated] // 0x00516DD0-0x00516DE0
	private IEnumerator _Current_k__BackingField; // 0xC8
	[CompilerGenerated] // 0x00516DE0-0x00516DF0
	private bool _Paused_k__BackingField; // 0xD0
	[CompilerGenerated] // 0x00516DF0-0x00516E00
	private StopFlag _Stop_k__BackingField; // 0xD4
	[CompilerGenerated] // 0x00516E00-0x00516E10
	private bool _IsActive_k__BackingField; // 0xD8

	// Properties
	public static Helmet Instance { get; } // 0x00660A54-0x00660AD0 
	public bool ShouldPauseInFlypack { get; } // 0x00660AD0-0x00660AD8 
	public bool UseMagent { get; } // 0x00660AD8-0x00660AE0 
	public IEnumerator Current { [CompilerGenerated] /* 0x0051EA88-0x0051EA98 */ get; [CompilerGenerated] /* 0x0051EA98-0x0051EAA8 */ set; } // 0x00660AE0-0x00660AE8 0x00660AE8-0x00660AF0
	public bool Paused { [CompilerGenerated] /* 0x0051EAA8-0x0051EAB8 */ get; [CompilerGenerated] /* 0x0051EAB8-0x0051EAC8 */ set; } // 0x00660AF0-0x00660AF8 0x00660AF8-0x00660B04
	public StopFlag Stop { [CompilerGenerated] /* 0x0051EAC8-0x0051EAD8 */ get; [CompilerGenerated] /* 0x0051EAD8-0x0051EAE8 */ set; } // 0x00660B04-0x00660B0C 0x00660B0C-0x00660B14
	public bool IsActive { [CompilerGenerated] /* 0x0051EAE8-0x0051EAF8 */ get; [CompilerGenerated] /* 0x0051EAF8-0x0051EB08 */ private set; } // 0x00660B14-0x00660B1C 0x00660B1C-0x00661B28

	// Events
	public event OnStartHelmetDelegate OnStartHelmet {
		add; // 0x0065F3C0-0x0065F464
		remove; // 0x0065F464-0x0065F508
	}
	public event OnEndHelmetDelegate OnEndHelmet {
		add; // 0x0065F508-0x0065F5AC
		remove; // 0x0065F5AC-0x0065F650
	}
	public event OnHardResetDelegate OnHardReset {
		add; // 0x0065F650-0x0065F6F4
		remove; // 0x0065F6F4-0x0065F798
	}
	public event OnHelmetJumpDelegate OnJump {
		add; // 0x0065F798-0x0065F83C
		remove; // 0x0065F83C-0x0065F8E0
	}
	public event OnJumpFromWaterDelegate OnJumpFromWater {
		add; // 0x0065F8E0-0x0065F984
		remove; // 0x0065F984-0x0065FA28
	}
	public event OnRunDelegate OnRun {
		add; // 0x0065FA28-0x0065FACC
		remove; // 0x0065FACC-0x0065FB70
	}
	public event OnSwitchToHelmetDelegate OnSwitchToHelmet {
		add; // 0x0065FB70-0x0065FC14
		remove; // 0x0065FC14-0x0065FCB8
	}

	// Nested types
	public delegate void OnStartHelmetDelegate(); // TypeDefIndex: 3479; 0x006CF4FC-0x006CF718

	public delegate void OnEndHelmetDelegate(); // TypeDefIndex: 3480; 0x006CE674-0x006CE890

	public delegate void OnHardResetDelegate(); // TypeDefIndex: 3481; 0x006CE8E0-0x006CEAFC

	public delegate void OnHelmetJumpDelegate(); // TypeDefIndex: 3482; 0x006CEB4C-0x006CED68

	public delegate void OnJumpFromWaterDelegate(); // TypeDefIndex: 3483; 0x006CEDB8-0x006CEFD4

	public delegate void OnRunDelegate(); // TypeDefIndex: 3484; 0x006CF024-0x006CF240

	public delegate void OnSpeedStartDelegate(); // TypeDefIndex: 3485; 0x006CF290-0x006CF4AC

	public delegate void OnSwitchToHelmetDelegate(GameObject helmet); // TypeDefIndex: 3486; 0x006CF768-0x006CFB1C

	[CompilerGenerated] // 0x00514100-0x00514110
	private sealed class _Begain_d__51 : IEnumerator<object> // TypeDefIndex: 3487
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Helmet __4__this; // 0x20
		private float _timeLeft_5__2; // 0x28
		private float _newCoolDownDist_5__3; // 0x2C
		private float _distanceLeft_5__4; // 0x30
		private bool _didStopCooldown_5__5; // 0x34

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005254C0-0x005254D0 */ get; } // 0x006CE238-0x006CE240 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005254E0-0x005254F0 */ get; } // 0x006CE2A4-0x006CE2AC 

		// Constructors
		[DebuggerHidden] // 0x005254A0-0x005254B0
		public _Begain_d__51(int __1__state); // 0x006CDF50-0x006CDF7C

		// Methods
		[DebuggerHidden] // 0x005254B0-0x005254C0
		void IDisposable.Dispose(); // 0x006CDF7C-0x006CDF80
		private bool MoveNext(); // 0x006CDF80-0x006CE238
		[DebuggerHidden] // 0x005254D0-0x005254E0
		void IEnumerator.Reset(); // 0x006CE240-0x006CE2A4
	}

	[Serializable]
	[CompilerGenerated] // 0x00514110-0x00514120
	private sealed class __c // TypeDefIndex: 3488
	{
		// Fields
		public static readonly __c __9; // 0x00
		public static Action<float> __9__58_0; // 0x08

		// Constructors
		static __c(); // 0x006CDEE0-0x006CDF44
		public __c(); // 0x006CDF44-0x006CDF4C

		// Methods
		internal void _Pull_b__58_0(float t); // 0x006CDF4C-0x006CDF50
	}

	[CompilerGenerated] // 0x00514120-0x00514130
	private sealed class _Pull_d__58 : IEnumerator<object> // TypeDefIndex: 3489
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Coin coin; // 0x20
		public Helmet __4__this; // 0x28
		public Glow glow; // 0x30

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525510-0x00525520 */ get; } // 0x006CE5F0-0x006CE5F8 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525530-0x00525540 */ get; } // 0x006CE65C-0x006CE664 

		// Constructors
		[DebuggerHidden] // 0x005254F0-0x00525500
		public _Pull_d__58(int __1__state); // 0x006CE2AC-0x006CE2D8

		// Methods
		[DebuggerHidden] // 0x00525500-0x00525510
		void IDisposable.Dispose(); // 0x006CE2D8-0x006CE2DC
		private bool MoveNext(); // 0x006CE2DC-0x006CE5F0
		[DebuggerHidden] // 0x00525520-0x00525530
		void IEnumerator.Reset(); // 0x006CE5F8-0x006CE65C
	}

	// Constructors
	public Helmet(); // 0x0065FCF4-0x0065FE68

	// Methods
	private void _OnStartHelmet(); // 0x0065FCB8-0x0065FCCC
	private void _OnEndHelmet(); // 0x0065FCCC-0x0065FCE0
	private void _OnHardReset(); // 0x0065FCE0-0x0065FCF4
	private void Prepare(); // 0x0065FE68-0x0065FFF4
	private void End(); // 0x006601FC-0x00660354
	private void DontStopUntil(); // 0x00660354-0x00660518
	private void IfExplose(); // 0x00660518-0x00660650
	[IteratorStateMachine] // 0x0051E9C0-0x0051EA24
	public IEnumerator Begain(); // 0x00660650-0x006606C4
	public void HardReset(); // 0x006606C4-0x006607CC
	public void Pause(); // 0x006607CC-0x006607F8
	public void Reset(); // 0x006607F8-0x00660880
	public void Resume(); // 0x00660880-0x006608A8
	public void SetupAbility(); // 0x0065FFF4-0x006601FC
	public void CoinTriggerHit(Collider collider); // 0x006608A8-0x006609CC
	[IteratorStateMachine] // 0x0051EA24-0x0051EA88
	private IEnumerator Pull(Coin coin, Glow glow); // 0x006609CC-0x00660A54
}

public class HillAttach : ICharacterAttachment // TypeDefIndex: 3490
{
	// Fields
	private static HillAttach _instance; // 0x00
	private bool isActive; // 0x10
	private Character character; // 0x18
	private CharacterRendering characterRendering; // 0x20
	private CharacterModel characterModel; // 0x28
	private Transform currentTramcar; // 0x30
	private bool canLean; // 0x38
	[CompilerGenerated] // 0x00516E10-0x00516E20
	private OnEnterTramcarDelegate OnEnterTramcar; // 0x40
	[CompilerGenerated] // 0x00516E20-0x00516E30
	private OnTramcarTutorialDelegate OnTramcarTutorial; // 0x48
	[CompilerGenerated] // 0x00516E30-0x00516E40
	private OnExitTramcarDelegate OnExitTramcar; // 0x50
	[CompilerGenerated] // 0x00516E40-0x00516E50
	private bool _Paused_k__BackingField; // 0x58
	[CompilerGenerated] // 0x00516E50-0x00516E60
	private StopFlag _Stop_k__BackingField; // 0x5C
	[CompilerGenerated] // 0x00516E60-0x00516E70
	private IEnumerator _Current_k__BackingField; // 0x60

	// Properties
	public bool ShouldPauseInFlypack { get; } // 0x006D9790-0x006D9798 
	public bool Paused { [CompilerGenerated] /* 0x0051EBCC-0x0051EBDC */ get; [CompilerGenerated] /* 0x0051EBDC-0x0051EBEC */ set; } // 0x006D9798-0x006D97A0 0x006D97A0-0x006D97AC
	public StopFlag Stop { [CompilerGenerated] /* 0x0051EBEC-0x0051EBFC */ get; [CompilerGenerated] /* 0x0051EBFC-0x0051EC0C */ set; } // 0x006D97AC-0x006D97B4 0x006D97B4-0x006D97BC
	public bool IsActive { get; } // 0x006D97BC-0x006D97C4 
	public static HillAttach Instance { get; } // 0x006D97C4-0x006D9840 
	public IEnumerator Current { [CompilerGenerated] /* 0x0051EC0C-0x0051EC1C */ get; [CompilerGenerated] /* 0x0051EC1C-0x0051EC2C */ set; } // 0x006D9840-0x006D9848 0x006D9848-0x006D9850

	// Events
	public event OnEnterTramcarDelegate OnEnterTramcar {
		add; // 0x006D8E64-0x006D8F08
		remove; // 0x006D8F08-0x006D8FAC
	}
	public event OnTramcarTutorialDelegate OnTramcarTutorial {
		add; // 0x006D8FAC-0x006D9050
		remove; // 0x006D9050-0x006D90F4
	}
	public event OnExitTramcarDelegate OnExitTramcar {
		add; // 0x006D90F4-0x006D9198
		remove; // 0x006D9198-0x006D923C
	}

	// Nested types
	public delegate void OnTramcarTutorialDelegate(); // TypeDefIndex: 3491; 0x006DA05C-0x006DA278

	public delegate float OnEnterTramcarDelegate(GameObject tramcar, bool canLean); // TypeDefIndex: 3492; 0x006D9A68-0x006D9E50

	public delegate void OnExitTramcarDelegate(bool stopNoEnding); // TypeDefIndex: 3493; 0x006D952C-0x006D9770

	[CompilerGenerated] // 0x00514130-0x00514140
	private sealed class _Begain_d__19 : IEnumerator<object> // TypeDefIndex: 3494
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public HillAttach __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525560-0x00525570 */ get; } // 0x006D9E50-0x006D9E58 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525580-0x00525590 */ get; } // 0x006D9EBC-0x006D9EC4 

		// Constructors
		[DebuggerHidden] // 0x00525540-0x00525550
		public _Begain_d__19(int __1__state); // 0x006D94EC-0x006D9518

		// Methods
		[DebuggerHidden] // 0x00525550-0x00525560
		void IDisposable.Dispose(); // 0x006D9850-0x006D9854
		private bool MoveNext(); // 0x006D9854-0x006D9A68
		[DebuggerHidden] // 0x00525570-0x00525580
		void IEnumerator.Reset(); // 0x006D9E58-0x006D9EBC
	}

	// Constructors
	public HillAttach(); // 0x006D923C-0x006D9304

	// Methods
	public void SetTramcarActive(Transform trans, bool canLean); // 0x006D9304-0x006D9448
	public void SetTramcarDeActive(); // 0x006D9448-0x006D9478
	[IteratorStateMachine] // 0x0051EB68-0x0051EBCC
	public IEnumerator Begain(); // 0x006D9478-0x006D94EC
	public void HillOver(bool restart = false /* Metadata: 0x001F57DE */); // 0x006D9518-0x006D952C
	public void Reset(); // 0x006D9770-0x006D977C
	public void Pause(); // 0x006D977C-0x006D9788
	public void Resume(); // 0x006D9788-0x006D9790
}

public class Raft : ICharacterAttachment // TypeDefIndex: 3495
{
	// Fields
	private static Raft instance; // 0x00
	public bool isAllowed; // 0x10
	public GameObject raft; // 0x18
	private Character character; // 0x20
	private CharacterModel characterModel; // 0x28
	private GameObject roftRoot; // 0x30
	[CompilerGenerated] // 0x00516E70-0x00516E80
	private OnEndRaftDelegate _OnEndRaft; // 0x38
	[CompilerGenerated] // 0x00516E80-0x00516E90
	private OnSwitchToRoftDelegate OnSwitchToRoft; // 0x40
	[CompilerGenerated] // 0x00516E90-0x00516EA0
	private IEnumerator _Current_k__BackingField; // 0x48
	[CompilerGenerated] // 0x00516EA0-0x00516EB0
	private bool _Paused_k__BackingField; // 0x50
	[CompilerGenerated] // 0x00516EB0-0x00516EC0
	private StopFlag _Stop_k__BackingField; // 0x54
	[CompilerGenerated] // 0x00516EC0-0x00516ED0
	private bool _IsActive_k__BackingField; // 0x58

	// Properties
	public static Raft Instance { get; } // 0x00729C44-0x00729CC0 
	public bool ShouldPauseInFlypack { get; } // 0x00729CC0-0x00729CC8 
	public IEnumerator Current { [CompilerGenerated] /* 0x0051ECD0-0x0051ECE0 */ get; [CompilerGenerated] /* 0x0051ECE0-0x0051ECF0 */ set; } // 0x00729CC8-0x00729CD0 0x00729CD0-0x00729CD8
	public bool Paused { [CompilerGenerated] /* 0x0051ECF0-0x0051ED00 */ get; [CompilerGenerated] /* 0x0051ED00-0x0051ED10 */ set; } // 0x00729CD8-0x00729CE0 0x00729CE0-0x00729CEC
	public StopFlag Stop { [CompilerGenerated] /* 0x0051ED10-0x0051ED20 */ get; [CompilerGenerated] /* 0x0051ED20-0x0051ED30 */ set; } // 0x00729CEC-0x00729CF4 0x00729CF4-0x00729CFC
	public bool IsActive { [CompilerGenerated] /* 0x0051ED30-0x0051ED40 */ get; [CompilerGenerated] /* 0x0051ED40-0x0051ED50 */ private set; } // 0x00729CFC-0x00729D04 0x00729D04-0x00729D10

	// Events
	public event OnEndRaftDelegate _OnEndRaft {
		add; // 0x007295B4-0x00729658
		remove; // 0x00729658-0x007296FC
	}
	public event OnSwitchToRoftDelegate OnSwitchToRoft {
		add; // 0x007296FC-0x007297A0
		remove; // 0x007297A0-0x00729844
	}

	// Nested types
	public delegate void OnEndRaftDelegate(); // TypeDefIndex: 3496; 0x00729854-0x00729A70

	public delegate void OnSwitchToRoftDelegate(GameObject roft); // TypeDefIndex: 3497; 0x00729EDC-0x0072A290

	[CompilerGenerated] // 0x00514140-0x00514150
	private sealed class _Begain_d__14 : IEnumerator<object> // TypeDefIndex: 3498
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Raft __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005255B0-0x005255C0 */ get; } // 0x0072A290-0x0072A298 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005255D0-0x005255E0 */ get; } // 0x0072A2FC-0x0072A304 

		// Constructors
		[DebuggerHidden] // 0x00525590-0x005255A0
		public _Begain_d__14(int __1__state); // 0x00729B48-0x00729B74

		// Methods
		[DebuggerHidden] // 0x005255A0-0x005255B0
		void IDisposable.Dispose(); // 0x00729D10-0x00729D14
		private bool MoveNext(); // 0x00729D14-0x00729EDC
		[DebuggerHidden] // 0x005255C0-0x005255D0
		void IEnumerator.Reset(); // 0x0072A298-0x0072A2FC
	}

	// Constructors
	public Raft(); // 0x00729A70-0x00729AD4

	// Methods
	private void OnEndRaft(); // 0x00729844-0x00729854
	[IteratorStateMachine] // 0x0051EC6C-0x0051ECD0
	public IEnumerator Begain(); // 0x00729AD4-0x00729B48
	public void Pause(); // 0x00729B74-0x00729BA0
	public void Reset(); // 0x00729BA0-0x00729C1C
	public void Resume(); // 0x00729C1C-0x00729C44
}

public class Shield : ICharacterAttachment // TypeDefIndex: 3499
{
	// Fields
	private bool isActive; // 0x10
	private ActiveProp powerup; // 0x18
	private Character character; // 0x20
	private CharacterRendering characterRendering; // 0x28
	private CharacterModel characterModel; // 0x30
	[CompilerGenerated] // 0x00516ED0-0x00516EE0
	private bool _Paused_k__BackingField; // 0x38
	private StopFlag mStop; // 0x3C
	public int ShieldNum; // 0x40
	private static Shield _instance; // 0x00
	[CompilerGenerated] // 0x00516EE0-0x00516EF0
	private IEnumerator _Current_k__BackingField; // 0x48

	// Properties
	public bool ShouldPauseInFlypack { get; } // 0x006C7508-0x006C7510 
	public bool IsActive { get; } // 0x006C7510-0x006C7518 
	public bool Paused { [CompilerGenerated] /* 0x0051EDB4-0x0051EDC4 */ get; [CompilerGenerated] /* 0x0051EDC4-0x0051EDD4 */ set; } // 0x006C7518-0x006C7520 0x006C7520-0x006C752C
	public StopFlag Stop { get; set; } // 0x006C752C-0x006C7534 0x006BD250-0x006BD324
	public static Shield Instance { get; } // 0x006BD1D4-0x006BD250 
	public IEnumerator Current { [CompilerGenerated] /* 0x0051EDD4-0x0051EDE4 */ get; [CompilerGenerated] /* 0x0051EDE4-0x0051EDF4 */ set; } // 0x006C7534-0x006C753C 0x006C753C-0x006C7544

	// Nested types
	[CompilerGenerated] // 0x00514150-0x00514160
	private sealed class _Begain_d__6 : IEnumerator<object> // TypeDefIndex: 3500
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Shield __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525600-0x00525610 */ get; } // 0x006C7788-0x006C7790 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525620-0x00525630 */ get; } // 0x006C77F4-0x006C77FC 

		// Constructors
		[DebuggerHidden] // 0x005255E0-0x005255F0
		public _Begain_d__6(int __1__state); // 0x006C73A4-0x006C73D0

		// Methods
		[DebuggerHidden] // 0x005255F0-0x00525600
		void IDisposable.Dispose(); // 0x006C7544-0x006C7548
		private bool MoveNext(); // 0x006C7548-0x006C7788
		[DebuggerHidden] // 0x00525610-0x00525620
		void IEnumerator.Reset(); // 0x006C7790-0x006C77F4
	}

	// Constructors
	public Shield(); // 0x006C7294-0x006C7330

	// Methods
	[IteratorStateMachine] // 0x0051ED50-0x0051EDB4
	public IEnumerator Begain(); // 0x006C7330-0x006C73A4
	public void Reset(); // 0x006C73D0-0x006C7404
	public void Explored(); // 0x006C7404-0x006C7434
	private void PlayCrashSound(); // 0x006C7434-0x006C74F4
	public void Pause(); // 0x006C74F4-0x006C7500
	public void Resume(); // 0x006C7500-0x006C7508
}

public class Sprint : CharacterState // TypeDefIndex: 3501
{
	// Fields
	private static Sprint _instance; // 0x00
	public float FOV; // 0x18
	public float fovTransition; // 0x1C
	public float coldDown; // 0x20
	public float speedup; // 0x24
	public bool headStart; // 0x28
	public float characterChangeTrackLength; // 0x2C
	public bool isActive; // 0x30
	public PropType powerType; // 0x34
	private ActiveProp Powerup; // 0x38
	private Character character; // 0x40
	private CharacterRendering characterRendering; // 0x48
	private Game game; // 0x50
	private CharacterController characterController; // 0x58
	private GameCamera characterCamera; // 0x60
	private Transform characterTransform; // 0x68
	public Action OnSprintStart; // 0x70
	public Action OnSprintEnd; // 0x78
	public bool inColding; // 0x80
	[CompilerGenerated] // 0x00516EF0-0x00516F00
	private static Action<SwipeDir> OnSwipeEvent; // 0x08
	private CoinMagnet coinmagnet; // 0x88
	private OnTriggerObject coinMagnetCollider; // 0x90
	public float havetime; // 0x98
	public bool IsendwalkSprint; // 0x9C

	// Properties
	public bool IsSprintPause { get; set; } // 0x00FBE030-0x00FBE078 0x00FBE078-0x00FBE07C
	public static Sprint Instance { get; } // 0x00FBEE4C-0x00FBEF18 

	// Events
	public static event Action<SwipeDir> OnSwipeEvent {
		add; // 0x00FBDEC0-0x00FBDF78
		remove; // 0x00FBDF78-0x00FBE030
	}

	// Nested types
	[CompilerGenerated] // 0x00514160-0x00514170
	private sealed class _Begin_d__32 : IEnumerator<object> // TypeDefIndex: 3502
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Sprint __4__this; // 0x20
		private float _duartion_5__2; // 0x28
		private float _speed_5__3; // 0x2C
		private float _time_5__4; // 0x30
		private float _startSpeed_5__5; // 0x34
		private int _framecount_5__6; // 0x38

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525650-0x00525660 */ get; } // 0x00FBF904-0x00FBF90C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525670-0x00525680 */ get; } // 0x00FBF970-0x00FBF978 

		// Constructors
		[DebuggerHidden] // 0x00525630-0x00525640
		public _Begin_d__32(int __1__state); // 0x00FBE394-0x00FBE3C0

		// Methods
		[DebuggerHidden] // 0x00525640-0x00525650
		void IDisposable.Dispose(); // 0x00FBF224-0x00FBF228
		private bool MoveNext(); // 0x00FBF228-0x00FBF904
		[DebuggerHidden] // 0x00525660-0x00525670
		void IEnumerator.Reset(); // 0x00FBF90C-0x00FBF970
	}

	[CompilerGenerated] // 0x00514170-0x00514180
	private sealed class __c__DisplayClass34_0 // TypeDefIndex: 3503
	{
		// Fields
		public Sprint __4__this; // 0x10
		public float fov_start; // 0x18
		public float fov_end; // 0x1C

		// Constructors
		public __c__DisplayClass34_0(); // 0x00FBEC84-0x00FBEC8C

		// Methods
		internal void _RevertFOV_b__0(float t); // 0x00FBEF58-0x00FBF164
	}

	[CompilerGenerated] // 0x00514180-0x00514190
	private sealed class __c__DisplayClass35_0 // TypeDefIndex: 3504
	{
		// Fields
		public Sprint __4__this; // 0x10
		public float fov_start; // 0x18
		public float fov_end; // 0x1C

		// Constructors
		public __c__DisplayClass35_0(); // 0x00FBEE44-0x00FBEE4C

		// Methods
		internal void _SetFOV_b__0(float t); // 0x00FBF164-0x00FBF224
	}

	// Constructors
	public Sprint(); // 0x00FBEF34-0x00FBEF58

	// Methods
	private void Awake(); // 0x00FBE07C-0x00FBE158
	private void SetCoinMagnetStart(); // 0x00FBE158-0x00FBE27C
	private void SetCoinMagnetEnd(); // 0x00FBE27C-0x00FBE320
	[IteratorStateMachine] // 0x0051EE14-0x0051EE78
	public override IEnumerator Begin(); // 0x00FBE320-0x00FBE394
	public override void HandleSwipe(SwipeDir swipeDir); // 0x00FBE3C0-0x00FBEAD4
	private void RevertFOV(); // 0x00FBEAD4-0x00FBEC84
	private void SetFOV(); // 0x00FBEC8C-0x00FBEE44
	public override void HandleLean(float offset); // 0x00FBEF18-0x00FBEF34
}

public class SuperShoes : ICharacterAttachment // TypeDefIndex: 3505
{
	// Fields
	private Character character; // 0x10
	private CharacterModel characterModel; // 0x18
	private CharacterRendering characterRendering; // 0x20
	private static SuperShoes instance; // 0x00
	private LongMagnet longMagnet; // 0x28
	private ActiveProp Powerup; // 0x30
	private float timeActiveInARow; // 0x38
	[CompilerGenerated] // 0x00516F00-0x00516F10
	private IEnumerator _Current_k__BackingField; // 0x40
	[CompilerGenerated] // 0x00516F10-0x00516F20
	private bool _Paused_k__BackingField; // 0x48
	[CompilerGenerated] // 0x00516F20-0x00516F30
	private StopFlag _Stop_k__BackingField; // 0x4C
	[CompilerGenerated] // 0x00516F30-0x00516F40
	private bool _IsActive_k__BackingField; // 0x50

	// Properties
	public static SuperShoes Instance { get; } // 0x00FC423C-0x00FC42B8 
	public bool ShouldPauseInFlypack { get; } // 0x00FC42B8-0x00FC42C0 
	public IEnumerator Current { [CompilerGenerated] /* 0x0051EEDC-0x0051EEEC */ get; [CompilerGenerated] /* 0x0051EEEC-0x0051EEFC */ set; } // 0x00FC42C0-0x00FC42C8 0x00FC42C8-0x00FC42D0
	public bool Paused { [CompilerGenerated] /* 0x0051EEFC-0x0051EF0C */ get; [CompilerGenerated] /* 0x0051EF0C-0x0051EF1C */ set; } // 0x00FC42D0-0x00FC42D8 0x00FC42D8-0x00FC42E4
	public StopFlag Stop { [CompilerGenerated] /* 0x0051EF1C-0x0051EF2C */ get; [CompilerGenerated] /* 0x0051EF2C-0x0051EF3C */ set; } // 0x00FC42E4-0x00FC42EC 0x00FC42EC-0x00FC42F4
	public bool IsActive { [CompilerGenerated] /* 0x0051EF3C-0x0051EF4C */ get; [CompilerGenerated] /* 0x0051EF4C-0x0051EF5C */ private set; } // 0x00FC42F4-0x00FC42FC 0x00FC42FC-0x00FC4308

	// Nested types
	[CompilerGenerated] // 0x00514190-0x005141A0
	private sealed class _Begain_d__8 : IEnumerator<object> // TypeDefIndex: 3506
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public SuperShoes __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005256A0-0x005256B0 */ get; } // 0x00FC43C4-0x00FC43CC 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005256C0-0x005256D0 */ get; } // 0x00FC4430-0x00FC4438 

		// Constructors
		[DebuggerHidden] // 0x00525680-0x00525690
		public _Begain_d__8(int __1__state); // 0x00FC4054-0x00FC4080

		// Methods
		[DebuggerHidden] // 0x00525690-0x005256A0
		void IDisposable.Dispose(); // 0x00FC4308-0x00FC430C
		private bool MoveNext(); // 0x00FC430C-0x00FC43C4
		[DebuggerHidden] // 0x005256B0-0x005256C0
		void IEnumerator.Reset(); // 0x00FC43CC-0x00FC4430
	}

	// Constructors
	public SuperShoes(); // 0x00FC3F30-0x00FC3FE0

	// Methods
	[IteratorStateMachine] // 0x0051EE78-0x0051EEDC
	public IEnumerator Begain(); // 0x00FC3FE0-0x00FC4054
	private void Prepare(); // 0x00FC4080-0x00FC4114
	private void End(); // 0x00FC4114-0x00FC4218
	public void Reset(); // 0x00FC4218-0x00FC4220
	public void StopUse(); // 0x00FC4220-0x00FC4228
	public void Pause(); // 0x00FC4228-0x00FC4234
	public void Resume(); // 0x00FC4234-0x00FC423C
}

public class Tramcar : ICharacterAttachment // TypeDefIndex: 3507
{
	// Fields
	private static Tramcar _instance; // 0x00
	private bool isActive; // 0x10
	private Character character; // 0x18
	private CharacterRendering characterRendering; // 0x20
	private CharacterModel characterModel; // 0x28
	private Transform currentTramcar; // 0x30
	private bool canLean; // 0x38
	[CompilerGenerated] // 0x00516F40-0x00516F50
	private OnEnterTramcarDelegate OnEnterTramcar; // 0x40
	[CompilerGenerated] // 0x00516F50-0x00516F60
	private OnTramcarTutorialDelegate OnTramcarTutorial; // 0x48
	[CompilerGenerated] // 0x00516F60-0x00516F70
	private OnExitTramcarDelegate OnExitTramcar; // 0x50
	[CompilerGenerated] // 0x00516F70-0x00516F80
	private bool _Paused_k__BackingField; // 0x58
	[CompilerGenerated] // 0x00516F80-0x00516F90
	private StopFlag _Stop_k__BackingField; // 0x5C
	[CompilerGenerated] // 0x00516F90-0x00516FA0
	private IEnumerator _Current_k__BackingField; // 0x60

	// Properties
	public bool ShouldPauseInFlypack { get; } // 0x007B8F7C-0x007B8F84 
	public bool Paused { [CompilerGenerated] /* 0x0051F020-0x0051F030 */ get; [CompilerGenerated] /* 0x0051F030-0x0051F040 */ set; } // 0x007B8F84-0x007B8F8C 0x007B8F8C-0x007B8F98
	public StopFlag Stop { [CompilerGenerated] /* 0x0051F040-0x0051F050 */ get; [CompilerGenerated] /* 0x0051F050-0x0051F060 */ set; } // 0x007B8F98-0x007B8FA0 0x007B8FA0-0x007B8FA8
	public bool IsActive { get; } // 0x007B8FA8-0x007B8FB0 
	public static Tramcar Instance { get; } // 0x007B8FB0-0x007B902C 
	public IEnumerator Current { [CompilerGenerated] /* 0x0051F060-0x0051F070 */ get; [CompilerGenerated] /* 0x0051F070-0x0051F080 */ set; } // 0x007B902C-0x007B9034 0x007B9034-0x007B903C

	// Events
	public event OnEnterTramcarDelegate OnEnterTramcar {
		add; // 0x007B88A8-0x007B894C
		remove; // 0x007B894C-0x007B89F0
	}
	public event OnTramcarTutorialDelegate OnTramcarTutorial {
		add; // 0x007B89F0-0x007B8A94
		remove; // 0x007B8A94-0x007B8B38
	}
	public event OnExitTramcarDelegate OnExitTramcar {
		add; // 0x007B8B38-0x007B8BDC
		remove; // 0x007B8BDC-0x007B8C80
	}

	// Nested types
	public delegate void OnTramcarTutorialDelegate(); // TypeDefIndex: 3508; 0x007B9E00-0x007BA01C

	public delegate float OnEnterTramcarDelegate(GameObject tramcar, bool canLean); // TypeDefIndex: 3509; 0x007B95C8-0x007B99B0

	public delegate void OnExitTramcarDelegate(bool stopNoEnding); // TypeDefIndex: 3510; 0x007B99B0-0x007B9BF4

	[CompilerGenerated] // 0x005141A0-0x005141B0
	private sealed class _Begain_d__19 : IEnumerator<object> // TypeDefIndex: 3511
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Tramcar __4__this; // 0x20
		private IEnumerator _coroutine_5__2; // 0x28
		private float _time_5__3; // 0x30

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005256F0-0x00525700 */ get; } // 0x007B9BF4-0x007B9BFC 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525710-0x00525720 */ get; } // 0x007B9C60-0x007B9C68 

		// Constructors
		[DebuggerHidden] // 0x005256D0-0x005256E0
		public _Begain_d__19(int __1__state); // 0x007B8F30-0x007B8F5C

		// Methods
		[DebuggerHidden] // 0x005256E0-0x005256F0
		void IDisposable.Dispose(); // 0x007B903C-0x007B9040
		private bool MoveNext(); // 0x007B9040-0x007B95C8
		[DebuggerHidden] // 0x00525700-0x00525710
		void IEnumerator.Reset(); // 0x007B9BFC-0x007B9C60
	}

	// Constructors
	public Tramcar(); // 0x007B8C80-0x007B8D48

	// Methods
	public void SetTramcarActive(Transform trans, bool canLean); // 0x007B8D48-0x007B8E8C
	public void SetTramcarDeActive(); // 0x007B8E8C-0x007B8EBC
	[IteratorStateMachine] // 0x0051EFBC-0x0051F020
	public IEnumerator Begain(); // 0x007B8EBC-0x007B8F30
	public void Reset(); // 0x007B8F5C-0x007B8F68
	public void Pause(); // 0x007B8F68-0x007B8F74
	public void Resume(); // 0x007B8F74-0x007B8F7C
}

public class BoundJump : CharacterState // TypeDefIndex: 3512
{
	// Fields
	[HideInInspector] // 0x00516FA0-0x00516FB0
	public bool isActive; // 0x18
	[SerializeField] // 0x00516FB0-0x00516FC0
	private float characterChangeTrackLength; // 0x1C
	[SerializeField] // 0x00516FC0-0x00516FD0
	private float fadeInPosition; // 0x20
	[SerializeField] // 0x00516FD0-0x00516FE0
	private float yOffset; // 0x24
	private float jumpHeight; // 0x28
	private float jumpDistance; // 0x2C
	private float totalDistance; // 0x30
	private bool TransitionDownFirstUpdate; // 0x34
	private Character character; // 0x38
	private Transform characterCameraTransform; // 0x40
	private CharacterController characterController; // 0x48
	private Transform characterTransform; // 0x50
	private CoinLineManager coinLineManager; // 0x58
	private Game game; // 0x60
	private static BoundJump instance; // 0x00
	private TrackController trackController; // 0x68
	public OnStartDelegate OnStart; // 0x70
	public OnStopDelegate OnStop; // 0x78
	private Vector3 startPosition; // 0x80

	// Properties
	public static BoundJump Instance { get; } // 0x0071CE58-0x0071CF94 
	public override bool PauseActiveModifiers { get; } // 0x0071CF94-0x0071CF9C 

	// Nested types
	public delegate void OnStartDelegate(); // TypeDefIndex: 3513; 0x0071C9FC-0x0071CC18

	public delegate void OnStopDelegate(); // TypeDefIndex: 3514; 0x0071CC28-0x0071CE44

	[CompilerGenerated] // 0x005141B0-0x005141C0
	private sealed class _Begin_d__20 : IEnumerator<object> // TypeDefIndex: 3515
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public BoundJump __4__this; // 0x20
		private Vector3 _endPosition_5__2; // 0x28
		private float _speed_5__3; // 0x34

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525740-0x00525750 */ get; } // 0x0071D4B4-0x0071D4BC 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525760-0x00525770 */ get; } // 0x0071D520-0x0071D528 

		// Constructors
		[DebuggerHidden] // 0x00525720-0x00525730
		public _Begin_d__20(int __1__state); // 0x0071C948-0x0071C974

		// Methods
		[DebuggerHidden] // 0x00525730-0x00525740
		void IDisposable.Dispose(); // 0x0071CFBC-0x0071CFC0
		private bool MoveNext(); // 0x0071CFC0-0x0071D4B4
		[DebuggerHidden] // 0x00525750-0x00525760
		void IEnumerator.Reset(); // 0x0071D4BC-0x0071D520
	}

	// Constructors
	public BoundJump(); // 0x0071CF9C-0x0071CFBC

	// Methods
	public void Awake(); // 0x0071C868-0x0071C8D4
	[IteratorStateMachine] // 0x0051F080-0x0051F0E4
	public override IEnumerator Begin(); // 0x0071C8D4-0x0071C948
	public override void HandleSwipe(SwipeDir swipeDir); // 0x0071C974-0x0071C9EC
	private void NotifyOnStart(); // 0x0071C9EC-0x0071C9FC
	private void NotifyOnStop(); // 0x0071CC18-0x0071CC28
	public void SetBoundJumpData(float jumpHeight, float jumpDistance, float totalDistance, Vector3 position); // 0x0071CE44-0x0071CE58
}

public abstract class CharacterState : MonoBehaviour // TypeDefIndex: 3516
{
	// Properties
	public virtual bool PauseActiveModifiers { get; } // 0x006645B0-0x006645B8 

	// Nested types
	[CompilerGenerated] // 0x005141C0-0x005141D0
	private sealed class _Begin_d__1 : IEnumerator<object> // TypeDefIndex: 3517
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525790-0x005257A0 */ get; } // 0x006645F8-0x00664600 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005257B0-0x005257C0 */ get; } // 0x00664664-0x0066466C 

		// Constructors
		[DebuggerHidden] // 0x00525770-0x00525780
		public _Begin_d__1(int __1__state); // 0x00664574-0x006645A0

		// Methods
		[DebuggerHidden] // 0x00525780-0x00525790
		void IDisposable.Dispose(); // 0x006645B8-0x006645BC
		private bool MoveNext(); // 0x006645BC-0x006645F8
		[DebuggerHidden] // 0x005257A0-0x005257B0
		void IEnumerator.Reset(); // 0x00664600-0x00664664
	}

	// Constructors
	protected CharacterState(); // 0x0066450C-0x00664514

	// Methods
	[IteratorStateMachine] // 0x0051F0E4-0x0051F148
	public virtual IEnumerator Begin(); // 0x00664514-0x00664574
	public virtual void HandleCriticalHit(DieType dieType); // 0x006645A0-0x006645A4
	public virtual void HandleDoubleTap(); // 0x006645A4-0x006645A8
	public virtual void HandleLean(float offset); // 0x006645A8-0x006645AC
	public virtual void HandleSwipe(SwipeDir swipeDir); // 0x006645AC-0x006645B0
}

public class Die : CharacterState // TypeDefIndex: 3518
{
	// Fields
	private Game game; // 0x18
	private Character character; // 0x20
	private GameCamera characterCamera; // 0x28
	[SerializeField] // 0x00516FE0-0x00516FF0
	private float waitTimeBeforeScreen; // 0x30
	private static Die instance; // 0x00
	private bool skipRevive; // 0x34

	// Properties
	public override bool PauseActiveModifiers { get; } // 0x0067B4C0-0x0067B4C8 
	public bool SkipRevive { set; } // 0x0067B4C8-0x0067B4D4
	public static Die Instance { get; } // 0x0067B4D4-0x0067B610 

	// Nested types
	[CompilerGenerated] // 0x005141D0-0x005141E0
	private sealed class _Begin_d__7 : IEnumerator<object> // TypeDefIndex: 3519
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Die __4__this; // 0x20
		private float _time_5__2; // 0x28
		private bool _isShowHelpMe_5__3; // 0x2C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005257E0-0x005257F0 */ get; } // 0x0067BA18-0x0067BA20 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525800-0x00525810 */ get; } // 0x0067BA84-0x0067BA8C 

		// Constructors
		[DebuggerHidden] // 0x005257C0-0x005257D0
		public _Begin_d__7(int __1__state); // 0x0067B3F4-0x0067B420

		// Methods
		[DebuggerHidden] // 0x005257D0-0x005257E0
		void IDisposable.Dispose(); // 0x0067B620-0x0067B624
		private bool MoveNext(); // 0x0067B624-0x0067BA18
		[DebuggerHidden] // 0x005257F0-0x00525800
		void IEnumerator.Reset(); // 0x0067BA20-0x0067BA84
	}

	[CompilerGenerated] // 0x005141E0-0x005141F0
	private sealed class _DelayGameOverScreen_d__8 : IEnumerator<object> // TypeDefIndex: 3520
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Die __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525830-0x00525840 */ get; } // 0x0067BBF8-0x0067BC00 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525850-0x00525860 */ get; } // 0x0067BC64-0x0067BC6C 

		// Constructors
		[DebuggerHidden] // 0x00525810-0x00525820
		public _DelayGameOverScreen_d__8(int __1__state); // 0x0067B494-0x0067B4C0

		// Methods
		[DebuggerHidden] // 0x00525820-0x00525830
		void IDisposable.Dispose(); // 0x0067BA8C-0x0067BA90
		private bool MoveNext(); // 0x0067BA90-0x0067BBF8
		[DebuggerHidden] // 0x00525840-0x00525850
		void IEnumerator.Reset(); // 0x0067BC00-0x0067BC64
	}

	// Constructors
	public Die(); // 0x0067B610-0x0067B620

	// Methods
	private void Awake(); // 0x0067B340-0x0067B380
	[IteratorStateMachine] // 0x0051F148-0x0051F1AC
	public override IEnumerator Begin(); // 0x0067B380-0x0067B3F4
	[IteratorStateMachine] // 0x0051F1AC-0x0051F210
	private IEnumerator DelayGameOverScreen(); // 0x0067B420-0x0067B494
}

public class Flypack : CharacterState // TypeDefIndex: 3521
{
	// Fields
	public bool isActive; // 0x18
	public AudioClipInfo powerDownSound; // 0x20
	public Vector3 cameraOffset; // 0x28
	public float cameraOffsetSmoothDuration; // 0x34
	public float smoothCameraXDuration; // 0x38
	public float cameraAimOffset; // 0x3C
	public float ySmoothDuration; // 0x40
	public float speedup; // 0x44
	public float flyHeight; // 0x48
	public float hitCeilingZPosition; // 0x4C
	public ParticleSystem ceilingBrickExpolsion; // 0x50
	public float coinOffset; // 0x58
	public float flyAheadDuration; // 0x5C
	public float stopBeforeLandingChunkDistance; // 0x60
	public float stopBeforeLandingChunkDistance1; // 0x64
	public float characterChangeTrackLength; // 0x68
	[SerializeField] // 0x00516FF0-0x00517000
	private GameObject TurboHeadstartPickupPrefab; // 0x70
	public PropType powerType; // 0x78
	public ActiveProp Powerup; // 0x80
	public AnimationCurve flyAhead; // 0x88
	public InAirCoinsManager coinsManager; // 0x90
	[SerializeField] // 0x00517000-0x00517010
	private float megaHeadstartFOV; // 0x98
	[SerializeField] // 0x00517010-0x00517020
	private float trasitionTime; // 0x9C
	public OnStartDelegate OnStart; // 0xA0
	public OnStopDelegate OnStop; // 0xA8
	private Character character; // 0xB0
	private GameCamera characterCamera; // 0xB8
	private Transform characterCameraTransform; // 0xC0
	private CharacterController characterController; // 0xC8
	private Transform characterTransform; // 0xD0
	private float currentHeadstartTime; // 0xD8
	private bool deactivateTurboHeadstart; // 0xDC
	private float extendedFlyDuration; // 0xE0
	private float flyAheadDistance; // 0xE4
	private Game game; // 0xE8
	private float headStartDistance; // 0xF0
	private float headStartSpeed; // 0xF4
	private float headStartTopSpeed; // 0xF8
	private static Flypack instance; // 0x00
	private float flypackDistance; // 0xFC
	private float flypackSpeed; // 0x100
	private float flyingDuration; // 0x104
	private float startTime; // 0x108
	private TrackController trackController; // 0x110
	[CompilerGenerated] // 0x00517020-0x00517030
	private OnDeactivateTurboHeadstartDelegate OnDeactivateTurboHeadstart; // 0x118
	[CompilerGenerated] // 0x00517030-0x00517040
	private OnHidTurboHeadstartButtonsDelegate OnHidTurboHeadstartButtons; // 0x120

	// Properties
	public static Flypack Instance { get; } // 0x00689E60-0x00689F9C 
	public override bool PauseActiveModifiers { get; } // 0x00689F9C-0x00689FA4 

	// Events
	public event OnDeactivateTurboHeadstartDelegate OnDeactivateTurboHeadstart {
		add; // 0x00689128-0x006891D0
		remove; // 0x006891D0-0x00689278
	}
	public event OnHidTurboHeadstartButtonsDelegate OnHidTurboHeadstartButtons {
		add; // 0x00689278-0x00689320
		remove; // 0x00689320-0x006893C8
	}

	// Nested types
	private sealed class RevertFOV_c__AnonStoreyD3 // TypeDefIndex: 3522
	{
		// Fields
		internal Flypack f__this; // 0x10
		internal float fov_end; // 0x18
		internal float fov_start; // 0x1C

		// Constructors
		public RevertFOV_c__AnonStoreyD3(); // 0x00689CD8-0x00689CE0

		// Methods
		internal void m__36(float t); // 0x0068B0C0-0x0068B2BC
	}

	private sealed class SetFOV_c__AnonStoreyD2 // TypeDefIndex: 3523
	{
		// Fields
		internal Flypack f__this; // 0x10
		internal float fov_end; // 0x18
		internal float fov_start; // 0x1C

		// Constructors
		public SetFOV_c__AnonStoreyD2(); // 0x00689E58-0x00689E60

		// Methods
		internal void m__35(float t); // 0x0068B2BC-0x0068B384
	}

	public delegate void OnDeactivateTurboHeadstartDelegate(); // TypeDefIndex: 3524; 0x0068AC4C-0x0068AE68

	public delegate void OnHidTurboHeadstartButtonsDelegate(); // TypeDefIndex: 3525; 0x0068AA30-0x0068AC4C

	public delegate void OnStartDelegate(); // TypeDefIndex: 3526; 0x0068971C-0x00689938

	public delegate void OnStopDelegate(); // TypeDefIndex: 3527; 0x00689948-0x00689B64

	[CompilerGenerated] // 0x005141F0-0x00514200
	private sealed class _Begin_d__51 : IEnumerator<object> // TypeDefIndex: 3528
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Flypack __4__this; // 0x20
		private float _startY_5__2; // 0x28
		private bool _hasExploded_5__3; // 0x2C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525880-0x00525890 */ get; } // 0x0068AF0C-0x0068AF14 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005258A0-0x005258B0 */ get; } // 0x0068AF78-0x0068AF80 

		// Constructors
		[DebuggerHidden] // 0x00525860-0x00525870
		public _Begin_d__51(int __1__state); // 0x006895E0-0x0068960C

		// Methods
		[DebuggerHidden] // 0x00525870-0x00525880
		void IDisposable.Dispose(); // 0x0068A04C-0x0068A050
		private bool MoveNext(); // 0x0068A050-0x0068A6B4
		[DebuggerHidden] // 0x00525890-0x005258A0
		void IEnumerator.Reset(); // 0x0068AF14-0x0068AF78
	}

	// Constructors
	public Flypack(); // 0x00689FA4-0x0068A04C

	// Methods
	public void Awake(); // 0x006893C8-0x0068949C
	[IteratorStateMachine] // 0x0051F250-0x0051F2B4
	public override IEnumerator Begin(); // 0x0068956C-0x006895E0
	public void ResetDistance(); // 0x0068960C-0x00689694
	public override void HandleSwipe(SwipeDir swipeDir); // 0x00689694-0x0068970C
	private void NotifyOnStart(); // 0x0068970C-0x0068971C
	private void NotifyOnStop(); // 0x00689938-0x00689948
	private void RevertFOV(); // 0x00689B64-0x00689CD8
	private void SetFOV(); // 0x00689CE0-0x00689E58
}

public class Running : CharacterState // TypeDefIndex: 3529
{
	// Fields
	public float cameraFOV; // 0x18
	public float characterChangeTrackLength; // 0x1C
	public RunPositions currentRunPosition; // 0x20
	public Character character; // 0x28
	private GameCamera characterCamera; // 0x30
	private CharacterController characterController; // 0x38
	private CharacterRendering characterRendering; // 0x40
	private Transform characterTransform; // 0x48
	public Game game; // 0x50
	private bool lastOnGrounded; // 0x58
	private Vector3 tunnelStartPos; // 0x5C
	private float tunnelTotalDistance; // 0x68
	private static Running instance; // 0x00
	private float xSensitivity; // 0x6C
	[CompilerGenerated] // 0x00517040-0x00517050
	private static Action<SwipeDir> OnSwipeEvent; // 0x08
	public static bool MoveOutCtl; // 0x10
	public static bool NoRightAndLeftCtl; // 0x11
	private bool willTurnNextSegment; // 0x70
	[CompilerGenerated] // 0x00517050-0x00517060
	private bool _Pause_k__BackingField; // 0x71

	// Properties
	public static Running Instance { get; } // 0x006BEDA4-0x006BEF34 
	public bool Pause { [CompilerGenerated] /* 0x0051F338-0x0051F348 */ get; [CompilerGenerated] /* 0x0051F348-0x0051F358 */ set; } // 0x006BEF34-0x006BEF3C 0x006BEF3C-0x006BEF48

	// Events
	public static event Action<SwipeDir> OnSwipeEvent {
		add; // 0x006BE038-0x006BE128
		remove; // 0x006BE128-0x006BE218
	}

	// Nested types
	public enum RunPositions // TypeDefIndex: 3530
	{
		ground = 0,
		station = 1,
		train = 2,
		movingTrain = 3,
		stone = 4,
		flowerBed = 5,
		air = 6
	}

	[CompilerGenerated] // 0x00514200-0x00514210
	private sealed class _Begin_d__20 : IEnumerator<object> // TypeDefIndex: 3531
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Running __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005258D0-0x005258E0 */ get; } // 0x006BF4BC-0x006BF4C4 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005258F0-0x00525900 */ get; } // 0x006BF528-0x006BF530 

		// Constructors
		[DebuggerHidden] // 0x005258B0-0x005258C0
		public _Begin_d__20(int __1__state); // 0x006BE448-0x006BE474

		// Methods
		[DebuggerHidden] // 0x005258C0-0x005258D0
		void IDisposable.Dispose(); // 0x006BEFAC-0x006BEFB0
		private bool MoveNext(); // 0x006BEFB0-0x006BF4BC
		[DebuggerHidden] // 0x005258E0-0x005258F0
		void IEnumerator.Reset(); // 0x006BF4C4-0x006BF528
	}

	// Constructors
	public Running(); // 0x006BEF48-0x006BEF64
	static Running(); // 0x006BEF64-0x006BEF68

	// Methods
	public void Awake(); // 0x006BE218-0x006BE3D4
	[IteratorStateMachine] // 0x0051F2D4-0x0051F338
	public override IEnumerator Begin(); // 0x006BE3D4-0x006BE448
	public override void HandleCriticalHit(DieType dieType); // 0x006BE474-0x006BE4DC
	private void OnWillTurnNextSegment(TrackPiece tp, int segment); // 0x006BE4DC-0x006BE51C
	private void OnDoTurnEnd(TrackPiece tp, int segment); // 0x006BE51C-0x006BE558
	public override void HandleLean(float offset); // 0x006BE558-0x006BE574
	public override void HandleSwipe(SwipeDir swipeDir); // 0x006BE574-0x006BE9BC
	private void UpdateGroundTag(Transform characterTransform); // 0x006BE9BC-0x006BEBDC
	public void StartTunnel(float tunnelLength); // 0x006BEBDC-0x006BEC20
	private void UpdateInAirRunPosition(); // 0x006BEC20-0x006BEC5C
	private void UpdateRunStateMeters(); // 0x006BEC5C-0x006BEDA4
	[CompilerGenerated] // 0x0051F358-0x0051F368
	private void _Awake_b__19_0(Character.StumbleType stumbleType, Character.StumbleHorizontalHit horizontalHit, Character.StumbleVerticalHit verticalHit, string colliderName); // 0x006BEF68-0x006BEFAC
}

public class SpeedUp : CharacterState // TypeDefIndex: 3532
{
	// Fields
	public bool isActive; // 0x18
	public float characterChangeTrackLength; // 0x1C
	public AnimationCurve speedCurve; // 0x20
	public float maxSpeed; // 0x28
	public float speedupAheadDuration; // 0x2C
	public float totalDuration; // 0x30
	public float overdriveDuration; // 0x34
	private float extraSpeed; // 0x38
	public OnStartDelegate OnStart; // 0x40
	public OnStartDelegate OnHangtime; // 0x48
	public OnStopDelegate OnStop; // 0x50
	private Character character; // 0x58
	private CharacterController characterController; // 0x60
	private Transform characterTransform; // 0x68
	private TrackController trackController; // 0x70
	private Game game; // 0x78
	private static SpeedUp instance; // 0x00

	// Properties
	public static SpeedUp Instance { get; } // 0x00FBA8F4-0x00FBAA30 
	public override bool PauseActiveModifiers { get; } // 0x00FBAA30-0x00FBAA38 

	// Nested types
	public delegate void OnStartDelegate(); // TypeDefIndex: 3533; 0x00FBA4BC-0x00FBA6D8

	public delegate void OnStopDelegate(); // TypeDefIndex: 3534; 0x00FBA6D8-0x00FBA8F4

	[CompilerGenerated] // 0x00514210-0x00514220
	private sealed class _Begin_d__18 : IEnumerator<object> // TypeDefIndex: 3535
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public SpeedUp __4__this; // 0x20
		private float _speed_5__2; // 0x28
		private float _t_5__3; // 0x2C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525920-0x00525930 */ get; } // 0x00FBAD30-0x00FBAD38 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525940-0x00525950 */ get; } // 0x00FBAD9C-0x00FBADA4 

		// Constructors
		[DebuggerHidden] // 0x00525900-0x00525910
		public _Begin_d__18(int __1__state); // 0x00FBA3E8-0x00FBA414

		// Methods
		[DebuggerHidden] // 0x00525910-0x00525920
		void IDisposable.Dispose(); // 0x00FBAA48-0x00FBAA4C
		private bool MoveNext(); // 0x00FBAA4C-0x00FBAD30
		[DebuggerHidden] // 0x00525930-0x00525940
		void IEnumerator.Reset(); // 0x00FBAD38-0x00FBAD9C
	}

	// Constructors
	public SpeedUp(); // 0x00FBAA38-0x00FBAA48

	// Methods
	public void Awake(); // 0x00FBA27C-0x00FBA374
	[IteratorStateMachine] // 0x0051F368-0x0051F3CC
	public override IEnumerator Begin(); // 0x00FBA374-0x00FBA3E8
	public override void HandleSwipe(SwipeDir swipeDir); // 0x00FBA414-0x00FBA48C
	private void HandleOnStageMenu(); // 0x00FBA48C-0x00FBA49C
	private void NotifyOnStart(); // 0x00FBA4AC-0x00FBA4BC
	private void NotifyOnStop(); // 0x00FBA49C-0x00FBA4AC
}

public class SpringJump : CharacterState // TypeDefIndex: 3536
{
	// Fields
	[SerializeField] // 0x00517060-0x00517070
	private float jumpHeight; // 0x18
	[SerializeField] // 0x00517070-0x00517080
	private MovementCurve jumpCurve; // 0x20
	[SerializeField] // 0x00517080-0x00517090
	private float jumpDistance; // 0x28
	[SerializeField] // 0x00517090-0x005170A0
	private float characterChangeTrackLength; // 0x2C
	[SerializeField] // 0x005170A0-0x005170B0
	private float fadeInPosition; // 0x30
	[SerializeField] // 0x005170B0-0x005170C0
	private float hangtimePosition; // 0x34
	[HideInInspector] // 0x005170C0-0x005170D0
	public JumpCoinsManager coinsManager; // 0x38
	public bool isActive; // 0x40
	[HideInInspector] // 0x005170D0-0x005170E0
	public PropType powerType; // 0x44
	private ActiveProp Powerup; // 0x48
	[SerializeField] // 0x005170E0-0x005170F0
	private int rows; // 0x50
	[SerializeField] // 0x005170F0-0x00517100
	private int startRowPosition; // 0x54
	[SerializeField] // 0x00517100-0x00517110
	private int endRowPosition; // 0x58
	[SerializeField] // 0x00517110-0x00517120
	private GameObject mysteryBoxPrefab; // 0x60
	[SerializeField] // 0x00517120-0x00517130
	private pickupWeight[] weightList; // 0x68
	public OnStartDelegate OnStart; // 0x70
	public OnStartDelegate OnHangtime; // 0x78
	public OnStopDelegate OnStop; // 0x80
	private Character character; // 0x88
	private Transform characterCameraTransform; // 0x90
	private CharacterController characterController; // 0x98
	private Transform characterTransform; // 0xA0
	private CoinLineManager coinLineManager; // 0xA8
	private Game game; // 0xB0
	private static SpringJump instance; // 0x00
	private IPickup[] list; // 0xB8
	private bool reachedHangtime; // 0xC0
	private TrackController trackController; // 0xC8
	private IPickup[] weightedList; // 0xD0
	private bool willShowPickup; // 0xD8

	// Properties
	public static SpringJump Instance { get; } // 0x00FBC134-0x00FBC270 
	public override bool PauseActiveModifiers { get; } // 0x00FBC270-0x00FBC278 
	public bool WillShowPickup { set; } // 0x00FBC278-0x00FBC284

	// Nested types
	[Serializable]
	public class MovementCurve // TypeDefIndex: 3537
	{
		// Fields
		public AnimationCurve curve; // 0x10

		// Constructors
		public MovementCurve(); // 0x00FBCAF0-0x00FBCAF8
	}

	public delegate void OnReachedTopDelegate(); // TypeDefIndex: 3538; 0x00FBCB08-0x00FBCD24

	public delegate void OnStartDelegate(); // TypeDefIndex: 3539; 0x00FBBB88-0x00FBBDA4

	public delegate void OnStopDelegate(); // TypeDefIndex: 3540; 0x00FBBDB4-0x00FBBFD0

	[Serializable]
	public class pickupWeight // TypeDefIndex: 3541
	{
		// Fields
		public string pickupName; // 0x10
		public PropType type; // 0x18

		// Constructors
		public pickupWeight(); // 0x00FBCE04-0x00FBCE0C
	}

	[CompilerGenerated] // 0x00514220-0x00514230
	private sealed class _Begin_d__31 : IEnumerator<object> // TypeDefIndex: 3542
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public SpringJump __4__this; // 0x20
		private Vector3 _startPosition_5__2; // 0x28
		private Vector3 _endPosition_5__3; // 0x34
		private float _speed_5__4; // 0x40

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525970-0x00525980 */ get; } // 0x00FBC904-0x00FBC90C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525990-0x005259A0 */ get; } // 0x00FBC970-0x00FBC978 

		// Constructors
		[DebuggerHidden] // 0x00525950-0x00525960
		public _Begin_d__31(int __1__state); // 0x00FBB95C-0x00FBB988

		// Methods
		[DebuggerHidden] // 0x00525960-0x00525970
		void IDisposable.Dispose(); // 0x00FBC2BC-0x00FBC2C0
		private bool MoveNext(); // 0x00FBC2C0-0x00FBC904
		[DebuggerHidden] // 0x00525980-0x00525990
		void IEnumerator.Reset(); // 0x00FBC90C-0x00FBC970
	}

	[CompilerGenerated] // 0x00514230-0x00514240
	private sealed class _RemovePickups_d__38 : IEnumerator<object> // TypeDefIndex: 3543
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public SpringJump __4__this; // 0x20
		public float endPosition; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005259C0-0x005259D0 */ get; } // 0x00FBCA7C-0x00FBCA84 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005259E0-0x005259F0 */ get; } // 0x00FBCAE8-0x00FBCAF0 

		// Constructors
		[DebuggerHidden] // 0x005259A0-0x005259B0
		public _RemovePickups_d__38(int __1__state); // 0x00FBC054-0x00FBC080

		// Methods
		[DebuggerHidden] // 0x005259B0-0x005259C0
		void IDisposable.Dispose(); // 0x00FBC978-0x00FBC97C
		private bool MoveNext(); // 0x00FBC97C-0x00FBCA7C
		[DebuggerHidden] // 0x005259D0-0x005259E0
		void IEnumerator.Reset(); // 0x00FBCA84-0x00FBCAE8
	}

	// Constructors
	public SpringJump(); // 0x00FBC284-0x00FBC2BC

	// Methods
	public void Awake(); // 0x00FBB460-0x00FBB8E8
	[IteratorStateMachine] // 0x0051F3CC-0x0051F430
	public override IEnumerator Begin(); // 0x00FBB8E8-0x00FBB95C
	private void EndSpring(); // 0x00FBB988-0x00FBBA20
	private void HandleOnStageMenu(); // 0x00FBBA30-0x00FBBAC8
	public override void HandleSwipe(SwipeDir swipeDir); // 0x00FBBAC8-0x00FBBB78
	private void NotifyHangtime(); // 0x00FBBB78-0x00FBBB88
	private void NotifyOnStart(); // 0x00FBBDA4-0x00FBBDB4
	private void NotifyOnStop(); // 0x00FBBA20-0x00FBBA30
	[IteratorStateMachine] // 0x0051F430-0x0051F494
	private IEnumerator RemovePickups(float endPosition); // 0x00FBBFD0-0x00FBC054
	private void ResetPickup(); // 0x00FBC080-0x00FBC11C
	public void Stop(); // 0x00FBC11C-0x00FBC134
}

public class TraversingCity : CharacterState // TypeDefIndex: 3544
{
	// Fields
	[SerializeField] // 0x00517130-0x00517140
	private Running.RunPositions currentRunPosition; // 0x18
	private Character character; // 0x20
	private CharacterRendering characterRendering; // 0x28
	private Transform characterTransform; // 0x30
	private CharacterController characterController; // 0x38
	private Game game; // 0x40
	private GameCamera characterCamera; // 0x48
	[SerializeField] // 0x00517140-0x00517150
	private CameraCulling cameraCulling; // 0x50
	private TrackController trackController; // 0x58
	private Vector3 position; // 0x60
	private AsyncOperation ao; // 0x70
	private float progress; // 0x78
	private string nextCitySceneName; // 0x80
	private static TraversingCity instance; // 0x00

	// Properties
	public static TraversingCity Instance { get; } // 0x007BB654-0x007BB790 

	// Nested types
	[CompilerGenerated] // 0x00514240-0x00514250
	private sealed class _Begin_d__14 : IEnumerator<object> // TypeDefIndex: 3545
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public TraversingCity __4__this; // 0x20
		private FadeData _fadeData_5__2; // 0x28
		private float _factor_5__3; // 0x30

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525A10-0x00525A20 */ get; } // 0x007BB9C8-0x007BB9D0 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525A30-0x00525A40 */ get; } // 0x007BBA34-0x007BBA3C 

		// Constructors
		[DebuggerHidden] // 0x005259F0-0x00525A00
		public _Begin_d__14(int __1__state); // 0x007BB628-0x007BB654

		// Methods
		[DebuggerHidden] // 0x00525A00-0x00525A10
		void IDisposable.Dispose(); // 0x007BB798-0x007BB79C
		private bool MoveNext(); // 0x007BB79C-0x007BB9C8
		[DebuggerHidden] // 0x00525A20-0x00525A30
		void IEnumerator.Reset(); // 0x007BB9D0-0x007BBA34
	}

	// Constructors
	public TraversingCity(); // 0x007BB790-0x007BB798

	// Methods
	private void Awake(); // 0x007BB4F4-0x007BB5B4
	[IteratorStateMachine] // 0x0051F494-0x0051F4F8
	public override IEnumerator Begin(); // 0x007BB5B4-0x007BB628
}

public class WallWalking : CharacterState // TypeDefIndex: 3546
{
	// Fields
	private Character character; // 0x18
	private GameCamera characterCamera; // 0x20
	private Game game; // 0x28
	private TrackController trackController; // 0x30
	[SerializeField] // 0x00517150-0x00517160
	private float deltaX; // 0x38
	private float jumpHeight; // 0x3C
	private SwipeDir lastWallDir; // 0x40
	private float endZ; // 0x44
	[SerializeField] // 0x00517160-0x00517170
	private float aheadDuration; // 0x48
	[SerializeField] // 0x00517170-0x00517180
	private AnimationCurve jumpAC; // 0x50
	[SerializeField] // 0x00517180-0x00517190
	private float characterChangeTrackLength; // 0x58
	private static WallWalking instance; // 0x00
	[CompilerGenerated] // 0x00517190-0x005171A0
	private bool _IsActive_k__BackingField; // 0x5C
	public OnStartWallDelegate OnStartWall; // 0x60
	public OnLeaveWallDelegate OnLeaveWall; // 0x68
	public OnJumpAheadStartDelegate OnJumpAheadStart; // 0x70
	public OnJumpAheadEndDelegate OnJumpAheadEnd; // 0x78

	// Properties
	public static WallWalking Instance { get; } // 0x00A930E0-0x00A9321C 
	public bool IsActive { [CompilerGenerated] /* 0x0051F55C-0x0051F56C */ get; [CompilerGenerated] /* 0x0051F56C-0x0051F57C */ private set; } // 0x00A93258-0x00A93260 0x00A93260-0x00A9326C

	// Nested types
	public delegate void OnStartWallDelegate(SwipeDir dir); // TypeDefIndex: 3547; 0x00A93780-0x00A939C4

	public delegate void OnLeaveWallDelegate(SwipeDir dir); // TypeDefIndex: 3548; 0x00A92E8C-0x00A930D0

	public delegate void OnJumpAheadStartDelegate(SwipeDir dir); // TypeDefIndex: 3549; 0x00A939C4-0x00A93C08

	public delegate void OnJumpAheadEndDelegate(SwipeDir dir); // TypeDefIndex: 3550; 0x00A93C08-0x00A93E4C

	[CompilerGenerated] // 0x00514250-0x00514260
	private sealed class _Begin_d__12 : IEnumerator<object> // TypeDefIndex: 3551
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public WallWalking __4__this; // 0x20
		private Vector3 _startPosition_5__2; // 0x28
		private float _startX_5__3; // 0x34
		private float _endX_5__4; // 0x38
		private float _trackIndexPositionBegin_5__5; // 0x3C
		private float _newTrackIndexPosition_5__6; // 0x40
		private float _time_5__7; // 0x44

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525A60-0x00525A70 */ get; } // 0x00A93E4C-0x00A93E54 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525A80-0x00525A90 */ get; } // 0x00A93EB8-0x00A93EC0 

		// Constructors
		[DebuggerHidden] // 0x00525A40-0x00525A50
		public _Begin_d__12(int __1__state); // 0x00A92BB4-0x00A92BE0

		// Methods
		[DebuggerHidden] // 0x00525A50-0x00525A60
		void IDisposable.Dispose(); // 0x00A93288-0x00A9328C
		private bool MoveNext(); // 0x00A9328C-0x00A93780
		[DebuggerHidden] // 0x00525A70-0x00525A80
		void IEnumerator.Reset(); // 0x00A93E54-0x00A93EB8
	}

	// Constructors
	public WallWalking(); // 0x00A9326C-0x00A93288

	// Methods
	private void Awake(); // 0x00A92AF4-0x00A92B40
	[IteratorStateMachine] // 0x0051F4F8-0x0051F55C
	public override IEnumerator Begin(); // 0x00A92B40-0x00A92BB4
	public override void HandleSwipe(SwipeDir swipeDir); // 0x00A92BE0-0x00A92D60
	public void EndWallWalking(); // 0x00A92D60-0x00A92E8C
	public bool CanNotLeaveWall(SwipeDir dir); // 0x00A930D0-0x00A930E0
	public void SetData(SwipeDir dir, float height, float endZ); // 0x00A9321C-0x00A93258
}

public class CheckSubscription : MonoBehaviour // TypeDefIndex: 3552
{
	// Fields
	public static bool isSubscriptionActive; // 0x00
	public int duration; // 0x18
	private bool isWaiting; // 0x1C
	private int frame; // 0x20
	private bool hasPaid_1; // 0x24
	private NetworkReachability lastFrameNetworkReachability; // 0x28
	private bool isActive; // 0x2C
	public static bool CanPayReward; // 0x01

	// Constructors
	public CheckSubscription(); // 0x0066A57C-0x0066A58C
	static CheckSubscription(); // 0x0066A58C-0x0066A590

	// Methods
	private void Awake(); // 0x00669C44-0x00669E3C
	private void Start(); // 0x00669E3C-0x00669E4C
	private void Check(); // 0x00669E4C-0x0066A034
	private void onCheckSubscriptionResult(RiseSdk.PaymentResult result, int id); // 0x0066A034-0x0066A1A8
	public void PayResult(RiseSdk.PaymentResult result, int billId); // 0x0066A1A8-0x0066A57C
}

public class BoxPreviewPopup : UIBaseScreen, IPurchaseHandler // TypeDefIndex: 3553
{
	// Fields
	[SerializeField] // 0x005171A0-0x005171B0
	private UIScrollView scoreView; // 0x98
	[SerializeField] // 0x005171B0-0x005171C0
	private UILabel titleLbl; // 0xA0
	[SerializeField] // 0x005171C0-0x005171D0
	private UILabel rewardLbl; // 0xA8
	[SerializeField] // 0x005171D0-0x005171E0
	private GameObject chestModelParent; // 0xB0
	[SerializeField] // 0x005171E0-0x005171F0
	private UISprite oneSpr; // 0xB8
	[SerializeField] // 0x005171F0-0x00517200
	private UILabel oneLbl; // 0xC0
	[SerializeField] // 0x00517200-0x00517210
	private UISprite twoSpr; // 0xC8
	[SerializeField] // 0x00517210-0x00517220
	private UILabel twoLbl; // 0xD0
	[SerializeField] // 0x00517220-0x00517230
	private Transform featureParent; // 0xD8
	[SerializeField] // 0x00517230-0x00517240
	private UICard defaultFeature; // 0xE0
	[SerializeField] // 0x00517240-0x00517250
	private UICard cusomFeature; // 0xE8
	[SerializeField] // 0x00517250-0x00517260
	private UIChestButton chestButton; // 0xF0
	private List<UICard> features; // 0xF8
	private Vector3 _distanceBetweenButtons; // 0x100
	private ChestType _chestType; // 0x10C
	private ChestTemplate _template; // 0x110
	private bool _purchaseInProgress; // 0x118

	// Constructors
	public BoxPreviewPopup(); // 0x0071F870-0x007208EC

	// Methods
	private void Awake(); // 0x0071E488-0x0071E5E4
	public override void Show(); // 0x0071E5E4-0x0071ED30
	protected override void AfterShow(); // 0x0071ED30-0x0071F078
	public override void Hide(); // 0x0071F078-0x0071F114
	private void OnEnable(); // 0x0071F114-0x0071F234
	private void OnDisable(); // 0x0071F234-0x0071F2D0
	public void OnFreeReward(RiseSdk.AdEventType type, int id, string tag, int eventType); // 0x0071F2D0-0x0071F2E8
	private void OnFreeViewClick(int type); // 0x0071F37C-0x0071F564
	public override void GainFocus(); // 0x0071F564-0x0071F604
	public override void LooseFocus(); // 0x0071F604-0x0071F6A4
	private void OnButtonClick(); // 0x0071F6A4-0x0071F860
	private void OpenChest(); // 0x0071F2E8-0x0071F37C
	public void PurchaseFailure(); // 0x0071F860-0x0071F868
	public void PurchaseSuccessful(); // 0x0071F868-0x0071F870
}

public class CheckPay : MonoBehaviour // TypeDefIndex: 3554
{
	// Fields
	public int billId; // 0x18
	private InAppProfile appProfile; // 0x20

	// Constructors
	public CheckPay(); // 0x006699D0-0x006699D8

	// Methods
	private void Awake(); // 0x006696D8-0x006696DC
	private void OnEnable(); // 0x006696DC-0x006697B0
	private void OnDisable(); // 0x006697B0-0x0066984C
	public void PayResult(RiseSdk.PaymentResult result, int billId); // 0x0066984C-0x006699D0
}

public enum ChestType // TypeDefIndex: 3555
{
	Normal = 0,
	Sliver = 1,
	Gold = 2,
	View = 3,
	Free = 4,
	Game = 5,
	None = 6
}

public enum PrizeEntryType // TypeDefIndex: 3556
{
	Coin = 0,
	Key = 1,
	Symbol = 2,
	Headspirnt = 3,
	Scorebooster = 4,
	SEB = 5,
	MEB = 6,
	LEB = 7,
	Symboleva = 8,
	Symbolexplorer = 9,
	Symbolfrank = 10,
	Symbolspike = 11,
	SymbolSlick = 12,
	Symboldarcy = 13,
	SymbolCaesar = 14,
	SymbolJack = 15,
	SymbolPia = 16,
	SymbolAnna = 17,
	SymbolEily = 18,
	SymbolKareena = 19,
	SymbolSeven = 20,
	SymbolSachin = 21,
	None = 22
}

[Serializable]
public class PrizeEntryTemplate // TypeDefIndex: 3557
{
	// Fields
	public LanguageKey description; // 0x10
	public string bg_small; // 0x18
	public string bg_large; // 0x20
	public string icon; // 0x28
	public bool isSymbol; // 0x30
	public Characters.CharacterType characterType; // 0x34
	public bool isProp; // 0x38
	public PropType propType; // 0x3C
	public bool isExp; // 0x40
	public int ExpPoint; // 0x44

	// Constructors
	public PrizeEntryTemplate(); // 0x0072466C-0x00724674

	// Methods
	public bool UseSlider(); // 0x007241AC-0x007241B4
	public int Total(); // 0x007241B4-0x007242A8
	public int Have(); // 0x007242A8-0x0072433C
	public void PayoutReward(ChestType chestType, int amount); // 0x0072433C-0x00724634
	public string ToJson(); // 0x00724634-0x0072463C
	public PrizeEntryTemplate Parse(string json); // 0x0072463C-0x0072466C
}

[Serializable]
public struct PrizeEntry // TypeDefIndex: 3558
{
	// Fields
	public PrizeEntryType itemType; // 0x00
	public float weight; // 0x04
	public int min; // 0x08
	public int max; // 0x0C
	public string discription; // 0x10
}

[Serializable]
public class PrizeEntryPool // TypeDefIndex: 3559
{
	// Fields
	public PrizeEntry[] prizeEntries; // 0x10

	// Constructors
	public PrizeEntryPool(); // 0x007241A4-0x007241AC

	// Methods
	public PrizeEntry Roll(); // 0x00723F10-0x007241A4
}

public enum UnlockType // TypeDefIndex: 3560
{
	coin = 0,
	key = 1,
	view = 2,
	free = 3
}

[Serializable]
public class Chest // TypeDefIndex: 3561
{
	// Fields
	public ChestType type; // 0x10
	public UnlockType unlockType; // 0x14
	public int price; // 0x18
	public int entryCount; // 0x1C
	public PrizeEntryPool[] PrizeEntryses; // 0x20

	// Constructors
	public Chest(); // 0x0066A728-0x0066A730

	// Methods
	public string ToJson(); // 0x0066A590-0x0066A598
	public Chest Parse(string json); // 0x0066A598-0x0066A5C8
	public PrizeEntry[] Roll(); // 0x0066A5C8-0x0066A728
}

[Serializable]
public class ChestTemplate // TypeDefIndex: 3562
{
	// Fields
	public LanguageKey description; // 0x10
	public XY one; // 0x18
	public XY two; // 0x28
	public PrizeEntryType[] features; // 0x38

	// Constructors
	public ChestTemplate(); // 0x0066AEF8-0x0066AF00

	// Methods
	public string ToJson(); // 0x0066AEC0-0x0066AEC8
	public ChestTemplate Parse(string json); // 0x0066AEC8-0x0066AEF8
}

public static class ChestsData // TypeDefIndex: 3563
{
	// Fields
	public static Dictionary<ChestType, Chest> chests; // 0x00
	public static Dictionary<ChestType, ChestTemplate> chestTemplates; // 0x08
	public static Dictionary<PrizeEntryType, PrizeEntryTemplate> prizeEntryTemplates; // 0x10

	// Methods
	public static void LoadFile(); // 0x0066AF00-0x0066AF18
	public static void SaveChestFile(); // 0x0066B96C-0x0066BC90
	public static void LoadChestFile(); // 0x0066AF18-0x0066B288
	public static void InitChestFile(); // 0x0066BC90-0x0066BE60
	public static void SaveChestTemplateFile(); // 0x0066BE60-0x0066C184
	public static void LoadChestTemplateFile(); // 0x0066B288-0x0066B5F4
	public static void InitChestTemplateFile(); // 0x0066C184-0x0066C230
	public static void SavePrizeEntryTemplateFile(); // 0x0066C230-0x0066C554
	public static void LoadPrizeEntryTemplateFile(); // 0x0066B5F4-0x0066B96C
	public static void InitPrizeEntryTemplateFile(); // 0x0066C554-0x0066C600
	public static Chest GetChest(ChestType type); // 0x0066C600-0x0066C6A0
	public static ChestTemplate GetChestTemplate(ChestType type); // 0x0066C6A0-0x0066C740
	public static PrizeEntryTemplate GetPrizeEntryTemplate(PrizeEntryType type); // 0x0066C740-0x0066C7E0
}

[Serializable]
public struct XY // TypeDefIndex: 3564
{
	// Fields
	public string icon; // 0x00
	public int min; // 0x08
	public int max; // 0x0C
}

public class ChestModelFactory : MonoBehaviour // TypeDefIndex: 3565
{
	// Fields
	[SerializeField] // 0x00517260-0x00517270
	private ChestSelection[] chestSelections; // 0x18
	private Dictionary<ChestType, GameObject> chestInCellThatMatchChestType; // 0x20
	private Dictionary<ChestType, GameObject> chestForOpenThatMatchChestType; // 0x28
	private static ChestModelFactory _instance; // 0x00

	// Properties
	public static ChestModelFactory Instance { get; } // 0x0066A730-0x0066A7FC 

	// Nested types
	[Serializable]
	public class ChestSelection // TypeDefIndex: 3566
	{
		// Fields
		public ChestType chestType; // 0x10
		public GameObject chestPrefabInCell; // 0x18
		public GameObject chestPrefabForOpen; // 0x20

		// Constructors
		public ChestSelection(); // 0x0066ABA4-0x0066ABAC
	}

	// Constructors
	public ChestModelFactory(); // 0x0066AB14-0x0066ABA4

	// Methods
	private void Awake(); // 0x0066A7FC-0x0066AA14
	public GameObject GetChestInCell(ChestType chestType); // 0x0066AA14-0x0066AA94
	public GameObject GetChestForOpen(ChestType chestType); // 0x0066AA94-0x0066AB14
}

public class CoinButtonHelper : MonoBehaviour // TypeDefIndex: 3567
{
	// Fields
	[SerializeField] // 0x00517270-0x00517280
	private int index; // 0x18
	[SerializeField] // 0x00517280-0x00517290
	private UISprite icon; // 0x20
	[SerializeField] // 0x00517290-0x005172A0
	private UILabel description; // 0x28
	[SerializeField] // 0x005172A0-0x005172B0
	private UILabel price; // 0x30
	[SerializeField] // 0x005172B0-0x005172C0
	private GameObject vipTip; // 0x38

	// Constructors
	public CoinButtonHelper(); // 0x0066EB00-0x0066EB08

	// Methods
	private void ShowNoDiscount(string backupDescription = "" /* Metadata: 0x001F5883 */); // 0x0066E5DC-0x0066E6F0
	private void Common(); // 0x0066E6F0-0x0066E7D0
	private void _Setup(); // 0x0066E7D0-0x0066E980
	public void Init(); // 0x0066E980-0x0066E984
	public void OnClick(); // 0x0066E984-0x0066EA10
	private void Pay(); // 0x0066EA10-0x0066EB00
}

public class Fly : MonoBehaviour // TypeDefIndex: 3568
{
	// Fields
	[SerializeField] // 0x005172C0-0x005172D0
	private ParticleSystem start; // 0x18
	[SerializeField] // 0x005172D0-0x005172E0
	private ParticleSystem fly; // 0x20
	[SerializeField] // 0x005172E0-0x005172F0
	private ParticleSystem end; // 0x28
	[SerializeField] // 0x005172F0-0x00517300
	private ParticleSystem.Particle[] particles; // 0x30
	[SerializeField] // 0x00517300-0x00517310
	private int count; // 0x38
	[SerializeField] // 0x00517310-0x00517320
	private Transform target; // 0x40
	[SerializeField] // 0x00517320-0x00517330
	private int maxVelocityFrame; // 0x48
	[SerializeField] // 0x00517330-0x00517340
	private float slowVelocityFrame; // 0x4C
	[SerializeField] // 0x00517340-0x00517350
	private float minVelocityFrame; // 0x50
	[SerializeField] // 0x00517350-0x00517360
	private float velocityRate; // 0x54
	[SerializeField] // 0x00517360-0x00517370
	private float duration; // 0x58
	[SerializeField] // 0x00517370-0x00517380
	private float whenPlayEnd; // 0x5C
	private bool isPlaying; // 0x60
	private ParticleSystem fly2; // 0x68

	// Nested types
	[CompilerGenerated] // 0x00514260-0x00514270
	private sealed class _Begain_d__16 : IEnumerator<object> // TypeDefIndex: 3569
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Fly __4__this; // 0x20
		private ParticleSystem _mid_5__2; // 0x28
		private int _frame_5__3; // 0x30
		private bool _hasPlayEnd_5__4; // 0x34
		private float _factor_5__5; // 0x38

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525AB0-0x00525AC0 */ get; } // 0x00687ADC-0x00687AE4 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525AD0-0x00525AE0 */ get; } // 0x00687B48-0x00687B50 

		// Constructors
		[DebuggerHidden] // 0x00525A90-0x00525AA0
		public _Begain_d__16(int __1__state); // 0x006872DC-0x00687308

		// Methods
		[DebuggerHidden] // 0x00525AA0-0x00525AB0
		void IDisposable.Dispose(); // 0x006874DC-0x006874E0
		private bool MoveNext(); // 0x006874E0-0x00687ADC
		[DebuggerHidden] // 0x00525AC0-0x00525AD0
		void IEnumerator.Reset(); // 0x00687AE4-0x00687B48
	}

	// Constructors
	public Fly(); // 0x006874D4-0x006874DC

	// Methods
	private void Start(); // 0x0068716C-0x006871F8
	public void ResetTargetAndEnd(Vector3 target, Vector3 end); // 0x006871F8-0x00687268
	[IteratorStateMachine] // 0x0051F57C-0x0051F5E0
	public IEnumerator Begain(); // 0x00687268-0x006872DC
	private ParticleSystem GetNewFly(); // 0x00687308-0x006874D4
}

public class IngameChestPickedHelper : MonoBehaviour // TypeDefIndex: 3570
{
	// Fields
	[SerializeField] // 0x00517380-0x00517390
	private GameObject parent; // 0x18
	[SerializeField] // 0x00517390-0x005173A0
	private Animation iconAnim; // 0x20
	[SerializeField] // 0x005173A0-0x005173B0
	private ParticleSystem followPs; // 0x28
	[SerializeField] // 0x005173B0-0x005173C0
	private Animation bgAnim; // 0x30
	[SerializeField] // 0x005173C0-0x005173D0
	private UILabel numberLbl; // 0x38
	[SerializeField] // 0x005173D0-0x005173E0
	private float delay; // 0x40
	[CompilerGenerated] // 0x005173E0-0x005173F0
	private static OnPickedChestDelegate OnPickedChest; // 0x00
	private int count; // 0x44
	private float frame; // 0x48
	private bool hasPlayAction; // 0x4C

	// Events
	public static event OnPickedChestDelegate OnPickedChest {
		add; // 0x006E1EA8-0x006E1F5C
		remove; // 0x006E1F5C-0x006E2010
	}

	// Nested types
	public delegate void OnPickedChestDelegate(); // TypeDefIndex: 3571; 0x006E2280-0x006E249C

	[CompilerGenerated] // 0x00514270-0x00514280
	private sealed class _Play_d__15 : IEnumerator<object> // TypeDefIndex: 3572
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public IngameChestPickedHelper __4__this; // 0x20
		private float _ratio_5__2; // 0x28
		private float _length_5__3; // 0x2C
		private float _time_5__4; // 0x30

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525B00-0x00525B10 */ get; } // 0x006E2874-0x006E287C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525B20-0x00525B30 */ get; } // 0x006E28E0-0x006E28E8 

		// Constructors
		[DebuggerHidden] // 0x00525AE0-0x00525AF0
		public _Play_d__15(int __1__state); // 0x006E21C0-0x006E21EC

		// Methods
		[DebuggerHidden] // 0x00525AF0-0x00525B00
		void IDisposable.Dispose(); // 0x006E24A4-0x006E24A8
		private bool MoveNext(); // 0x006E24A8-0x006E2874
		[DebuggerHidden] // 0x00525B10-0x00525B20
		void IEnumerator.Reset(); // 0x006E287C-0x006E28E0
	}

	// Constructors
	public IngameChestPickedHelper(); // 0x006E249C-0x006E24A4

	// Methods
	private void Awake(); // 0x006E2010-0x006E2014
	public void Hide(); // 0x006E2014-0x006E2034
	public void Show(); // 0x006E2034-0x006E214C
	[IteratorStateMachine] // 0x0051F600-0x0051F664
	private IEnumerator Play(); // 0x006E214C-0x006E21C0
	private void Check(); // 0x006E21EC-0x006E2280
}

public class OpenBoxPopup : UIBaseScreen // TypeDefIndex: 3573
{
	// Fields
	[SerializeField] // 0x005173F0-0x00517400
	private UILabel titleDis; // 0x98
	[SerializeField] // 0x00517400-0x00517410
	private UILabel skipLbl; // 0xA0
	[SerializeField] // 0x00517410-0x00517420
	private GameObject boxParent; // 0xA8
	[SerializeField] // 0x00517420-0x00517430
	private Animation numberAnim; // 0xB0
	[SerializeField] // 0x00517430-0x00517440
	private UILabel numberLbl; // 0xB8
	[SerializeField] // 0x00517440-0x00517450
	private UILabel tapToCollectLabel; // 0xC0
	[SerializeField] // 0x00517450-0x00517460
	private Collider openButton; // 0xC8
	[SerializeField] // 0x00517460-0x00517470
	private Collider skipButton; // 0xD0
	[SerializeField] // 0x00517470-0x00517480
	private UIChestReward uiChestReward; // 0xD8
	[SerializeField] // 0x00517480-0x00517490
	private UIFinishPanel finishPanel; // 0xE0
	[SerializeField] // 0x00517490-0x005174A0
	private ParticleSystem loopPs; // 0xE8
	[SerializeField] // 0x005174A0-0x005174B0
	private ParticleSystem appearPs; // 0xF0
	[SerializeField] // 0x005174B0-0x005174C0
	private ParticleSystem openPs; // 0xF8
	[SerializeField] // 0x005174C0-0x005174D0
	private ParticleSystem endPs; // 0x100
	[SerializeField] // 0x005174D0-0x005174E0
	private Fly fly; // 0x108
	private PrizeEntry[] _priceEntries; // 0x110
	private ChestType _chestType; // 0x118
	private Chest _currentChest; // 0x120
	private int _openCount; // 0x128
	private List<int> _gameChestIndexs; // 0x130
	private PrizeEntry _currentEntry; // 0x138
	private GameObject _currentChestBox; // 0x150
	private Animation _chestBoxAnim; // 0x158
	private CoinBoxSizer coinBoxSizer; // 0x160
	private bool _isFingerPressed; // 0x168
	private bool _openHasStarted; // 0x169

	// Nested types
	[CompilerGenerated] // 0x00514280-0x00514290
	private sealed class _InitChestBox_d__32 : IEnumerator<object> // TypeDefIndex: 3574
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public OpenBoxPopup __4__this; // 0x20
		private float _factor_5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525B50-0x00525B60 */ get; } // 0x006A1D84-0x006A1D8C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525B70-0x00525B80 */ get; } // 0x006A1DF0-0x006A1DF8 

		// Constructors
		[DebuggerHidden] // 0x00525B30-0x00525B40
		public _InitChestBox_d__32(int __1__state); // 0x006A0B50-0x006A0B7C

		// Methods
		[DebuggerHidden] // 0x00525B40-0x00525B50
		void IDisposable.Dispose(); // 0x006A1798-0x006A179C
		private bool MoveNext(); // 0x006A179C-0x006A1D84
		[DebuggerHidden] // 0x00525B60-0x00525B70
		void IEnumerator.Reset(); // 0x006A1D8C-0x006A1DF0
	}

	[CompilerGenerated] // 0x00514290-0x005142A0
	private sealed class _ShowReward_d__36 : IEnumerator<object> // TypeDefIndex: 3575
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public OpenBoxPopup __4__this; // 0x20
		private int _frame_5__2; // 0x28
		private float _time_5__3; // 0x2C
		private float _factor_5__4; // 0x30
		private int _count_5__5; // 0x34
		private int _number_5__6; // 0x38

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525BA0-0x00525BB0 */ get; } // 0x006A22AC-0x006A22B4 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525BC0-0x00525BD0 */ get; } // 0x006A2318-0x006A2320 

		// Constructors
		[DebuggerHidden] // 0x00525B80-0x00525B90
		public _ShowReward_d__36(int __1__state); // 0x006A10E4-0x006A1110

		// Methods
		[DebuggerHidden] // 0x00525B90-0x00525BA0
		void IDisposable.Dispose(); // 0x006A1DF8-0x006A1DFC
		private bool MoveNext(); // 0x006A1DFC-0x006A22AC
		[DebuggerHidden] // 0x00525BB0-0x00525BC0
		void IEnumerator.Reset(); // 0x006A22B4-0x006A2318
	}

	[CompilerGenerated] // 0x005142A0-0x005142B0
	private sealed class _CountUp_d__37 : IEnumerator<object> // TypeDefIndex: 3576
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public int amount; // 0x20
		public PrizeEntryType itemType; // 0x24
		public OpenBoxPopup __4__this; // 0x28
		private float _countFactor_5__2; // 0x30
		private float _countTime_5__3; // 0x34
		private int _from_5__4; // 0x38
		private int _to_5__5; // 0x3C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525BF0-0x00525C00 */ get; } // 0x006A1724-0x006A172C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525C10-0x00525C20 */ get; } // 0x006A1790-0x006A1798 

		// Constructors
		[DebuggerHidden] // 0x00525BD0-0x00525BE0
		public _CountUp_d__37(int __1__state); // 0x006A1198-0x006A11C4

		// Methods
		[DebuggerHidden] // 0x00525BE0-0x00525BF0
		void IDisposable.Dispose(); // 0x006A14F8-0x006A14FC
		private bool MoveNext(); // 0x006A14FC-0x006A1724
		[DebuggerHidden] // 0x00525C00-0x00525C10
		void IEnumerator.Reset(); // 0x006A172C-0x006A1790
	}

	[CompilerGenerated] // 0x005142B0-0x005142C0
	private sealed class _AnimateAlpha_d__42 : IEnumerator<object> // TypeDefIndex: 3577
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public UILabel label; // 0x20
		public float duration; // 0x28
		public float toAlpha; // 0x2C
		private float _fromAlpha_5__2; // 0x30
		private float _factor_5__3; // 0x34

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525C40-0x00525C50 */ get; } // 0x006A1484-0x006A148C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525C60-0x00525C70 */ get; } // 0x006A14F0-0x006A14F8 

		// Constructors
		[DebuggerHidden] // 0x00525C20-0x00525C30
		public _AnimateAlpha_d__42(int __1__state); // 0x006A1318-0x006A1344

		// Methods
		[DebuggerHidden] // 0x00525C30-0x00525C40
		void IDisposable.Dispose(); // 0x006A134C-0x006A1350
		private bool MoveNext(); // 0x006A1350-0x006A1484
		[DebuggerHidden] // 0x00525C50-0x00525C60
		void IEnumerator.Reset(); // 0x006A148C-0x006A14F0
	}

	// Constructors
	public OpenBoxPopup(); // 0x006A1344-0x006A134C

	// Methods
	public override void Init(); // 0x006A0110-0x006A0274
	public override void Show(); // 0x006A0290-0x006A030C
	public void Next(); // 0x006A07E4-0x006A0828
	public override void GainFocus(); // 0x006A0828-0x006A08CC
	private void First(); // 0x006A030C-0x006A06F4
	private void SetupOpenBox(bool firstshow = false /* Metadata: 0x001F5887 */); // 0x006A06F4-0x006A07E4
	[IteratorStateMachine] // 0x0051F664-0x0051F6C8
	private IEnumerator InitChestBox(); // 0x006A08CC-0x006A0940
	public void Claim(); // 0x006A0B7C-0x006A0B90
	public void OnPressed(); // 0x006A0DF4-0x006A0F50
	public void OnReleased(); // 0x006A0F50-0x006A1070
	[IteratorStateMachine] // 0x0051F6C8-0x0051F72C
	private IEnumerator ShowReward(); // 0x006A1070-0x006A10E4
	[IteratorStateMachine] // 0x0051F72C-0x0051F790
	private IEnumerator CountUp(PrizeEntryType itemType, int amount); // 0x006A1110-0x006A1198
	public void Skip(); // 0x006A11C4-0x006A11C8
	private void Update(); // 0x006A11C8-0x006A1210
	private void FinishOpen(bool close = false /* Metadata: 0x001F5888 */); // 0x006A0B90-0x006A0DF4
	private void PayoutReward(PrizeEntry prizeEntry); // 0x006A0940-0x006A0B50
	[IteratorStateMachine] // 0x0051F790-0x0051F7F4
	private IEnumerator AnimateAlpha(UILabel label, float duration, float toAlpha); // 0x006A1290-0x006A1318
}

public class PayHelper : MonoBehaviour // TypeDefIndex: 3578
{
	// Fields
	[SerializeField] // 0x005174E0-0x005174F0
	private int billId; // 0x18
	[SerializeField] // 0x005174F0-0x00517500
	private GameObject button; // 0x20
	[SerializeField] // 0x00517500-0x00517510
	private UILabel titleLbl; // 0x28
	[SerializeField] // 0x00517510-0x00517520
	private UILabel discountLbl; // 0x30
	[SerializeField] // 0x00517520-0x00517530
	private UILabel tipLbl; // 0x38
	[SerializeField] // 0x00517530-0x00517540
	private UILabel coinsLbl; // 0x40
	[SerializeField] // 0x00517540-0x00517550
	private UILabel gemsLbl; // 0x48
	[SerializeField] // 0x00517550-0x00517560
	private UILabel propsLbl; // 0x50
	[SerializeField] // 0x00517560-0x00517570
	private UILabel remove_big_Lbl; // 0x58
	[SerializeField] // 0x00517570-0x00517580
	private UILabel remove_small_Lbl; // 0x60
	[SerializeField] // 0x00517580-0x00517590
	private UILabel priceLbl; // 0x68
	[SerializeField] // 0x00517590-0x005175A0
	private UILabel invalidLbl; // 0x70
	[SerializeField] // 0x005175A0-0x005175B0
	private float off; // 0x78

	// Properties
	public int BillId { get; } // 0x006A6588-0x006A6590 

	// Constructors
	public PayHelper(); // 0x006A6590-0x006A6598

	// Methods
	private void Awake(); // 0x006A6140-0x006A6144
	public bool Check(); // 0x006A6144-0x006A614C
	public void OnButtonClick(); // 0x006A614C-0x006A623C
	private void OnEnable(); // 0x006A623C-0x006A6588
}

public class PromotionManager : MonoBehaviour // TypeDefIndex: 3579
{
	// Fields
	[SerializeField] // 0x005175B0-0x005175C0
	private Transform subcripeTrans; // 0x18
	[SerializeField] // 0x005175C0-0x005175D0
	private PayHelper payHelper1; // 0x20
	[SerializeField] // 0x005175D0-0x005175E0
	private PayHelper payHelper2; // 0x28
	[SerializeField] // 0x005175E0-0x005175F0
	private List<Transform> childrens; // 0x30
	[SerializeField] // 0x005175F0-0x00517600
	private Vector3 one; // 0x38
	[SerializeField] // 0x00517600-0x00517610
	private Vector3 two; // 0x44
	[SerializeField] // 0x00517610-0x00517620
	private Vector3 three; // 0x50
	[SerializeField] // 0x00517620-0x00517630
	private int direction; // 0x5C
	[SerializeField] // 0x00517630-0x00517640
	private float interval; // 0x60
	[SerializeField] // 0x00517640-0x00517650
	private float duration; // 0x64
	[SerializeField] // 0x00517650-0x00517660
	private GameObject leftArrow; // 0x68
	[SerializeField] // 0x00517660-0x00517670
	private GameObject rightArrow; // 0x70
	[SerializeField] // 0x00517670-0x00517680
	private UISprite[] tipBack; // 0x78
	[SerializeField] // 0x00517680-0x00517690
	private UISprite[] tipFore; // 0x80
	private int current; // 0x88
	private int next; // 0x8C
	private Vector3 from; // 0x90
	private Vector3 to; // 0x9C
	private Vector3 delta; // 0xA8
	private float time; // 0xB4
	private bool isMoving; // 0xB8
	private int move; // 0xBC
	private int currentMove; // 0xC0

	// Constructors
	public PromotionManager(); // 0x00725730-0x00725738

	// Methods
	private void Start(); // 0x00724674-0x00724684
	public void RefreshPayHelps(); // 0x00724684-0x00724B20
	private void RefreshTips(); // 0x00724B20-0x00724EA0
	private void Move(int direction); // 0x00724EA0-0x00724F98
	private void HandleMove(int direction); // 0x00724F98-0x00725128
	public void OnLeftClick(); // 0x00725128-0x00725130
	public void OnRightClick(); // 0x00725130-0x00725138
	private void Update(); // 0x00725138-0x007254DC
	private void OnEnable(); // 0x007254DC-0x007255B0
	private void OnDisable(); // 0x007255B0-0x0072564C
	public void PayResult(RiseSdk.PaymentResult result, int billId); // 0x0072564C-0x00725730
}

public class RestorePurchaseHelper : MonoBehaviour // TypeDefIndex: 3580
{
	// Fields
	[SerializeField] // 0x00517690-0x005176A0
	private UILabel titleLbl; // 0x18
	[SerializeField] // 0x005176A0-0x005176B0
	private UILabel freeLbl; // 0x20
	[SerializeField] // 0x005176B0-0x005176C0
	private UILabel collectLbl; // 0x28
	[SerializeField] // 0x005176C0-0x005176D0
	private UILabel time; // 0x30
	[SerializeField] // 0x005176D0-0x005176E0
	private UISprite fillSpr; // 0x38
	[SerializeField] // 0x005176E0-0x005176F0
	private UISprite viewSpr; // 0x40
	[SerializeField] // 0x005176F0-0x00517700
	private BoxCollider btnCollider; // 0x48
	[SerializeField] // 0x00517700-0x00517710
	private GameObject btnGo; // 0x50
	private bool hasRewardAd; // 0x58
	private Color collectLblOriginColor; // 0x5C
	private TimeCoolDown coolDown; // 0x70
	private bool _isActive; // 0x78

	// Constructors
	public RestorePurchaseHelper(); // 0x00730718-0x00730720

	// Methods
	private void Awake(); // 0x0072FBA0-0x0072FC90
	private void OnEnable(); // 0x0072FC90-0x0072FDF8
	private void OnDisable(); // 0x0072FDF8-0x0072FE94
	public void OnFreeReward(RiseSdk.AdEventType type, int id, string tag, int eventType); // 0x0072FE94-0x0073006C
	public void OnFreeRewardClick(GameObject go); // 0x00730170-0x00730390
	private void Update(); // 0x0073049C-0x00730718
	[CompilerGenerated] // 0x0051F7F4-0x0051F804
	private void _OnFreeReward_b__15_0(); // 0x00730720-0x00730758
	[CompilerGenerated] // 0x0051F804-0x0051F814
	private void _OnFreeReward_b__15_1(); // 0x00730758-0x00730790
}

public class ShopManager // TypeDefIndex: 3581
{
	// Fields
	private static ShopManager _instance; // 0x00
	private TimeCoolDown _freeCoolDown; // 0x10
	private ShopPopupData _popupData; // 0x18
	[CompilerGenerated] // 0x00517710-0x00517720
	private int _barIndex_k__BackingField; // 0x20
	[CompilerGenerated] // 0x00517720-0x00517730
	private ChestType _chestType_k__BackingField; // 0x24

	// Properties
	public static ShopManager Instance { get; } // 0x006C7934-0x006C79B0 
	public int barIndex { [CompilerGenerated] /* 0x0051F814-0x0051F824 */ get; [CompilerGenerated] /* 0x0051F824-0x0051F834 */ set; } // 0x006C7C00-0x006C7C08 0x006C7C08-0x006C7C10
	public ChestType chestType { [CompilerGenerated] /* 0x0051F834-0x0051F844 */ get; [CompilerGenerated] /* 0x0051F844-0x0051F854 */ set; } // 0x006C7C10-0x006C7C18 0x006C7C18-0x006C7C20

	// Constructors
	private ShopManager(); // 0x006C79B0-0x006C7A2C

	// Methods
	public bool IsCoolingDownOver(); // 0x006C7A2C-0x006C7A48
	public string GetCoolingDownTime(); // 0x006C7A48-0x006C7A64
	public void SetNewTime(); // 0x006C7A64-0x006C7A80
	public void ForceCoolingDownOver(); // 0x006C7A80-0x006C7A9C
	public void SetShopType(string title, string icon, int amount, int unlockType, string price, Action callback = null); // 0x006C7A9C-0x006C7BF0
	public ShopPopupData GetShopPopupData(); // 0x006C7BF8-0x006C7C00
}

public class ShopPopupData // TypeDefIndex: 3582
{
	// Fields
	public string title; // 0x10
	public string icon; // 0x18
	public int num; // 0x20
	public string price; // 0x28
	public int unlockType; // 0x30
	public Action buyCallback; // 0x38

	// Constructors
	public ShopPopupData(); // 0x006C7BF0-0x006C7BF8
}

public class SubcriptionHelper : MonoBehaviour // TypeDefIndex: 3583
{
	// Fields
	[SerializeField] // 0x00517730-0x00517740
	private UILabel titleLbl; // 0x18
	[SerializeField] // 0x00517740-0x00517750
	private UILabel tipLbl; // 0x20
	[SerializeField] // 0x00517750-0x00517760
	private UILabel role_big_Lbl; // 0x28
	[SerializeField] // 0x00517760-0x00517770
	private UILabel role_small_Lbl; // 0x30
	[SerializeField] // 0x00517770-0x00517780
	private UILabel doubleCoin_big_Lbl; // 0x38
	[SerializeField] // 0x00517780-0x00517790
	private UILabel doubleCoin_small_Lbl; // 0x40
	[SerializeField] // 0x00517790-0x005177A0
	private UILabel gem_small_Lbl; // 0x48
	[SerializeField] // 0x005177A0-0x005177B0
	private UILabel vip_big_Lbl; // 0x50
	[SerializeField] // 0x005177B0-0x005177C0
	private UILabel vip_small_Lbl; // 0x58
	[SerializeField] // 0x005177C0-0x005177D0
	private UILabel trialLbl; // 0x60

	// Constructors
	public SubcriptionHelper(); // 0x00FC2F90-0x00FC2F98

	// Methods
	private void OnEnable(); // 0x00FC2DEC-0x00FC2F90
}

public class SuperChestEffect : MonoBehaviour // TypeDefIndex: 3584
{
	// Fields
	public ParticleSystem[] particleSystems; // 0x18
	public Renderer[] glowRenderers; // 0x20
	private float _glowAniFactor; // 0x28
	private Color[] _glowBaseColors; // 0x30
	private Material[] _glowMaterials; // 0x38
	private bool _glowShouldBeOn; // 0x40
	[CompilerGenerated] // 0x005177D0-0x005177E0
	private bool _isRendering_k__BackingField; // 0x41

	// Properties
	public bool isRendering { [CompilerGenerated] /* 0x0051F854-0x0051F864 */ get; [CompilerGenerated] /* 0x0051F864-0x0051F874 */ set; } // 0x00FC3E30-0x00FC3E38 0x00FC3E38-0x00FC3E44

	// Constructors
	public SuperChestEffect(); // 0x00FC3E44-0x00FC3EBC

	// Methods
	private void Awake(); // 0x00FC37FC-0x00FC3804
	private void Start(); // 0x00FC3804-0x00FC3A00
	private void ApplyGlowAniFactor(); // 0x00FC3A00-0x00FC3B40
	public void FastForwardEffect(int time); // 0x00FC3B40-0x00FC3BDC
	public void SetVisible(bool visible); // 0x00FC3BDC-0x00FC3C10
	public void StartEffect(); // 0x00FC3C10-0x00FC3CAC
	public void StopEffect(); // 0x00FC3CAC-0x00FC3D3C
	private void Update(); // 0x00FC3D3C-0x00FC3E30
}

public class UIBuyPopup : UIBaseScreen // TypeDefIndex: 3585
{
	// Fields
	[SerializeField] // 0x005177E0-0x005177F0
	private UILabel titleLbl; // 0x98
	[SerializeField] // 0x005177F0-0x00517800
	private UISprite iconSpr; // 0xA0
	[SerializeField] // 0x00517800-0x00517810
	private UILabel amountLbl; // 0xA8
	[SerializeField] // 0x00517810-0x00517820
	private UISprite buyIconSpr; // 0xB0
	[SerializeField] // 0x00517820-0x00517830
	private UILabel priceLbl; // 0xB8
	[SerializeField] // 0x00517830-0x00517840
	private UILabel payLbl; // 0xC0
	private ShopPopupData _popupData; // 0xC8

	// Constructors
	public UIBuyPopup(); // 0x007F8410-0x007F8418

	// Methods
	public override void Show(); // 0x007F8204-0x007F83E4
	public void OnButtonClick(); // 0x007F83E4-0x007F8410
}

public class UICard : MonoBehaviour // TypeDefIndex: 3586
{
	// Fields
	[SerializeField] // 0x00517840-0x00517850
	private UISprite bg; // 0x18
	[SerializeField] // 0x00517850-0x00517860
	private UISprite icon; // 0x20

	// Constructors
	public UICard(); // 0x0082256C-0x00822574

	// Methods
	public void Set(string bg, string icon); // 0x00822528-0x0082256C
}

public class UIChestButton : MonoBehaviour // TypeDefIndex: 3587
{
	// Fields
	[SerializeField] // 0x00517860-0x00517870
	private ChestType _chestType; // 0x18
	[SerializeField] // 0x00517870-0x00517880
	private GameObject chestModelParent; // 0x20
	[SerializeField] // 0x00517880-0x00517890
	private BoxCollider boxCollider; // 0x28
	[SerializeField] // 0x00517890-0x005178A0
	private UILabel description; // 0x30
	[SerializeField] // 0x005178A0-0x005178B0
	private GameObject buyGo; // 0x38
	[SerializeField] // 0x005178B0-0x005178C0
	private GameObject freeGo; // 0x40
	[SerializeField] // 0x005178C0-0x005178D0
	private GameObject viewGo; // 0x48
	[SerializeField] // 0x005178D0-0x005178E0
	private UISprite buyIcon; // 0x50
	[SerializeField] // 0x005178E0-0x005178F0
	private UILabel buyPrice; // 0x58
	[SerializeField] // 0x005178F0-0x00517900
	private UILabel freeLbl; // 0x60
	[SerializeField] // 0x00517900-0x00517910
	private UILabel timeLbl; // 0x68
	[SerializeField] // 0x00517910-0x00517920
	private UILabel viewLbl; // 0x70
	[SerializeField] // 0x00517920-0x00517930
	private TweenPosition tipTween; // 0x78
	[SerializeField] // 0x00517930-0x00517940
	private UISprite fillSpr; // 0x80
	[SerializeField] // 0x00517940-0x00517950
	private UISprite[] viewSprs; // 0x88
	[SerializeField] // 0x00517950-0x00517960
	private GameObject tipGo; // 0x90
	[SerializeField] // 0x00517960-0x00517970
	private UILabel amountTipLbl; // 0x98
	public Transform button; // 0xA0
	[SerializeField] // 0x00517970-0x00517980
	private ParticleSystem fxPs; // 0xA8
	[SerializeField] // 0x00517980-0x00517990
	private ParticleSystem shinePs; // 0xB0
	[SerializeField] // 0x00517990-0x005179A0
	private ParticleSystem glowPs; // 0xB8
	[SerializeField] // 0x005179A0-0x005179B0
	private ParticleSystem xxPs; // 0xC0
	[SerializeField] // 0x005179B0-0x005179C0
	private ParticleSystemRenderer[] renderers; // 0xC8
	private OnClickEvent onClick; // 0xD0
	private GameObject currentChest; // 0xD8
	private int _type; // 0xE0
	private bool _isActive; // 0xE4
	[CompilerGenerated] // 0x005179C0-0x005179D0
	private bool _isActive_k__BackingField; // 0xE5

	// Properties
	public int type { get; } // 0x0082764C-0x00827654 
	public GameObject CurrentChest { get; } // 0x00827654-0x0082765C 
	public ParticleSystemRenderer[] ParticleSystemRenderers { get; } // 0x0082765C-0x00827664 
	public bool isActive { [CompilerGenerated] /* 0x0051F874-0x0051F884 */ get; [CompilerGenerated] /* 0x0051F884-0x0051F894 */ set; } // 0x00827664-0x0082766C 0x0082766C-0x00827678

	// Nested types
	public delegate void OnClickEvent(); // TypeDefIndex: 3588; 0x00827430-0x0082764C

	// Constructors
	public UIChestButton(); // 0x00827678-0x00827680

	// Methods
	private void OnEnable(); // 0x008259E0-0x00825B94
	private void OnDisable(); // 0x00825B94-0x00825D48
	private void OnCoinsChanged(); // 0x00825D48-0x00825FF4
	public void SetChestType(ChestType type); // 0x00825FF4-0x00825FFC
	public GameObject Init(); // 0x00825FFC-0x00826028
	private void SetChestModel(); // 0x00826028-0x00826264
	private void SetParticleSystem(); // 0x00826264-0x008267F8
	public void ShowChestModel(); // 0x008267F8-0x0082689C
	public void HideChestModel(); // 0x0082689C-0x00826940
	public void Refresh(); // 0x00826940-0x00826FC4
	public void SetToFree(); // 0x00826FC4-0x00827054
	private void Update(); // 0x00827054-0x008272E8
	public void RegisterOnClickEvent(OnClickEvent onClick); // 0x008272E8-0x00827368
	public void UnregisterOnClickEvent(OnClickEvent onClick); // 0x00827368-0x008273E8
	public void OnClick(); // 0x008273E8-0x00827430
}

public class UIChestReward : MonoBehaviour // TypeDefIndex: 3589
{
	// Fields
	[SerializeField] // 0x005179D0-0x005179E0
	private Animation anim; // 0x18
	[SerializeField] // 0x005179E0-0x005179F0
	private UISprite fillSpr; // 0x20
	[SerializeField] // 0x005179F0-0x00517A00
	private UISprite iconSpr; // 0x28
	[SerializeField] // 0x00517A00-0x00517A10
	private UILabel numberLbl; // 0x30
	[SerializeField] // 0x00517A10-0x00517A20
	private UILabel descripeLbl; // 0x38
	[SerializeField] // 0x00517A20-0x00517A30
	private GameObject sliderGo; // 0x40
	[SerializeField] // 0x00517A30-0x00517A40
	private UISlider slider; // 0x48
	[SerializeField] // 0x00517A40-0x00517A50
	private UILabel progressLbl; // 0x50
	[SerializeField] // 0x00517A50-0x00517A60
	private float iconSize; // 0x58
	[SerializeField] // 0x00517A60-0x00517A70
	private GameObject Propreward; // 0x60
	[SerializeField] // 0x00517A70-0x00517A80
	private GameObject Skinsreward; // 0x68
	[SerializeField] // 0x00517A80-0x00517A90
	private UISprite iconSpr_prop; // 0x70
	[SerializeField] // 0x00517A90-0x00517AA0
	private UILabel numberLbl_prop; // 0x78
	[SerializeField] // 0x00517AA0-0x00517AB0
	private UILabel symbal_name; // 0x80
	[SerializeField] // 0x00517AB0-0x00517AC0
	private UILabel symbal_discription; // 0x88
	public bool IsGameoverChest; // 0x90
	private PrizeEntryTemplate _template; // 0x98
	private int _have; // 0xA0
	private float _total; // 0xA4

	// Constructors
	public UIChestReward(); // 0x00827E44-0x00827E58

	// Methods
	public void Show(PrizeEntryType type, int amount); // 0x008276D0-0x00827B74
	public bool InitProgress(bool counting); // 0x00827B74-0x00827BEC
	public void RefreshProgress(int amount); // 0x00827BEC-0x00827CEC
	public float Appear(); // 0x00827CEC-0x00827DB0
	public void Stop(); // 0x00827DB0-0x00827E44
}

public class UIFinishPanel : MonoBehaviour // TypeDefIndex: 3590
{
	// Fields
	[SerializeField] // 0x00517AC0-0x00517AD0
	private UILabel okLbl; // 0x18
	[SerializeField] // 0x00517AD0-0x00517AE0
	private UILabel freeViewLbl; // 0x20
	[SerializeField] // 0x00517AE0-0x00517AF0
	private UIChestReward[] uiChestRewards; // 0x28
	[SerializeField] // 0x00517AF0-0x00517B00
	private Transform[] points; // 0x30
	[SerializeField] // 0x00517B00-0x00517B10
	private Animation anim; // 0x38
	[SerializeField] // 0x00517B10-0x00517B20
	private Transform okTrans; // 0x40
	[SerializeField] // 0x00517B20-0x00517B30
	private Transform freeTrans; // 0x48
	private Vector3 localPosition; // 0x50
	private OpenBoxPopup boxPopup; // 0x60

	// Constructors
	public UIFinishPanel(); // 0x008369F0-0x008369F8

	// Methods
	public void InitUIChestRewards(PrizeEntry[] entries); // 0x00835FE8-0x008361DC
	private void Awake(); // 0x0083627C-0x008362B4
	public void Show(OpenBoxPopup boxPopup); // 0x008362B4-0x00836528
	public void Hide(); // 0x008361DC-0x0083627C
	private void OnEnable(); // 0x00836528-0x008365FC
	private void OnDisable(); // 0x008365FC-0x00836698
	public void OnFreeViewClick(); // 0x00836698-0x008368C4
	public void OnFreeReward(RiseSdk.AdEventType type, int id, string tag, int eventType); // 0x008368C4-0x008369F0
}

public class UIShopScreen : UIBaseScreen // TypeDefIndex: 3591
{
	// Fields
	[SerializeField] // 0x00517B30-0x00517B40
	private UIScrollView scrollView; // 0x98
	[SerializeField] // 0x00517B40-0x00517B50
	private float[] absolutes; // 0xA0
	[SerializeField] // 0x00517B50-0x00517B60
	private ListTitleComponentHelper restorePurchaseTitle; // 0xA8
	[SerializeField] // 0x00517B60-0x00517B70
	private UITable table; // 0xB0
	[SerializeField] // 0x00517B70-0x00517B80
	private PromotionManager promotionManager; // 0xB8
	[SerializeField] // 0x00517B80-0x00517B90
	private UIChestButton[] uiChestButtons; // 0xC0
	[SerializeField] // 0x00517B90-0x00517BA0
	private Transform uiFreeChest; // 0xC8
	[SerializeField] // 0x00517BA0-0x00517BB0
	private Transform coinParent; // 0xD0
	[SerializeField] // 0x00517BB0-0x00517BC0
	private ListTitleComponentHelper coinTitle; // 0xD8
	[SerializeField] // 0x00517BC0-0x00517BD0
	private Transform keyParent; // 0xE0
	[SerializeField] // 0x00517BD0-0x00517BE0
	private ListTitleComponentHelper keyTitle; // 0xE8
	[SerializeField] // 0x00517BE0-0x00517BF0
	private CoinButtonHelper[] coinButtonHelpers; // 0xF0
	[SerializeField] // 0x00517BF0-0x00517C00
	private ListTitleComponentHelper upgradeTitle; // 0xF8
	[SerializeField] // 0x00517C00-0x00517C10
	private UIUpgradeButton[] uiUpgradeButtons; // 0x100
	[SerializeField] // 0x00517C10-0x00517C20
	private float strength; // 0x108
	private bool hasAdaped; // 0x10C
	private bool autoMove; // 0x10D
	private Vector3 current; // 0x110
	private Vector3 to; // 0x11C
	private float origin; // 0x128
	public UIProgressBar bar; // 0x130

	// Nested types
	[CompilerGenerated] // 0x005142C0-0x005142D0
	private sealed class _AfterWhile_d__24 : IEnumerator<object> // TypeDefIndex: 3592
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public UIShopScreen __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525C90-0x00525CA0 */ get; } // 0x0077173C-0x00771744 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525CB0-0x00525CC0 */ get; } // 0x007717A8-0x007717B0 

		// Constructors
		[DebuggerHidden] // 0x00525C70-0x00525C80
		public _AfterWhile_d__24(int __1__state); // 0x00770BBC-0x00770BE8

		// Methods
		[DebuggerHidden] // 0x00525C80-0x00525C90
		void IDisposable.Dispose(); // 0x007714C0-0x007714C4
		private bool MoveNext(); // 0x007714C4-0x0077173C
		[DebuggerHidden] // 0x00525CA0-0x00525CB0
		void IEnumerator.Reset(); // 0x00771744-0x007717A8
	}

	// Constructors
	public UIShopScreen(); // 0x007714B0-0x007714C0

	// Methods
	private void OnEnable(); // 0x00770600-0x00770788
	private void Calc(); // 0x00770788-0x0077090C
	public override void Init(); // 0x0077090C-0x00770B48
	[IteratorStateMachine] // 0x0051F894-0x0051F8F8
	private IEnumerator AfterWhile(); // 0x00770B48-0x00770BBC
	public override void Show(); // 0x00770BE8-0x00770DBC
	protected override void AfterShow(); // 0x00770E8C-0x007710B0
	private void ResetScrollViewImmediately(); // 0x00770DBC-0x00770E8C
	public void ResetScrollViewSmooth(); // 0x007710B0-0x007711D4
	public override void Hide(); // 0x007711D4-0x007712B0
	private void OnButtonClick(); // 0x007712B0-0x00771324
	private void Update(); // 0x00771324-0x007714B0
}

public class UIUpgradeButton : MonoBehaviour, IPurchaseHandler // TypeDefIndex: 3593
{
	// Fields
	[SerializeField] // 0x00517C20-0x00517C30
	private PropType type; // 0x18
	[SerializeField] // 0x00517C30-0x00517C40
	private UISprite powerupIcon; // 0x20
	[SerializeField] // 0x00517C40-0x00517C50
	private UILabel titleLbl; // 0x28
	[SerializeField] // 0x00517C50-0x00517C60
	private UILabel priceLbl; // 0x30
	[SerializeField] // 0x00517C60-0x00517C70
	private UILabel haveLbl; // 0x38
	private bool _purchaseInProgress; // 0x40

	// Constructors
	public UIUpgradeButton(); // 0x008130E4-0x008130EC

	// Methods
	private void OnEnable(); // 0x00812588-0x008126C8
	private void OnDisable(); // 0x008126C8-0x00812808
	public void Init(); // 0x00812808-0x00812AB8
	public void RefreshUpgrade(); // 0x00812BD0-0x00812CE0
	public void RefreshTitle(); // 0x00812CE0-0x00812E34
	public void RefreshTitle(PropType propType); // 0x00812E34-0x00812F88
	private void OnClick(); // 0x00812F88-0x0081301C
	private void Buy(); // 0x0081301C-0x00813060
	public void PurchaseFailure(); // 0x00813060-0x00813068
	public void PurchaseSuccessful(); // 0x00813068-0x008130E4
}

public class CoroutineC : MonoBehaviour // TypeDefIndex: 3594
{
	// Fields
	private static CoroutineC _instance; // 0x00

	// Properties
	public static CoroutineC Instance { get; } // 0x00670B5C-0x00670C40 

	// Constructors
	public CoroutineC(); // 0x00674C00-0x00674C08

	// Methods
	private void Awake(); // 0x00674B84-0x00674C00
	public Coroutine StartCoroutineC(IEnumerator coroutine); // 0x00670CC8-0x00670CD0
}

public class DebugShow : MonoBehaviour // TypeDefIndex: 3595
{
	// Fields
	private static List<string> messages; // 0x00
	private static bool willShowDebugInfoByGUI; // 0x08
	[SerializeField] // 0x00517C70-0x00517C80
	private Rect startRect; // 0x18
	[SerializeField] // 0x00517C80-0x00517C90
	private Rect offset; // 0x28
	private Rect nextRect; // 0x38

	// Constructors
	public DebugShow(); // 0x0067A858-0x0067A860
	static DebugShow(); // 0x0067A860-0x0067A8D4

	// Methods
	public static void SetWillShowDebugInfoByGUI(bool value); // 0x0067A318-0x0067A388
	public static void Log(string info); // 0x0067A388-0x0067A43C
	private void OnGUI(); // 0x0067A43C-0x0067A858
}

public class DoubleSkill // TypeDefIndex: 3596
{
	// Fields
	public DoubleSkillType skillType; // 0x10
	public bool isSelect; // 0x14
	public string skillDescription; // 0x18
	public bool skillCanuse; // 0x20
	public string requries; // 0x28

	// Constructors
	public DoubleSkill(); // 0x0067C794-0x0067C79C
	public DoubleSkill(DoubleSkillType doubleSkillType, bool isselect, string description, bool canuse, string requrie); // 0x0067C79C-0x0067C800

	// Methods
	public static string ToJson(DoubleSkill doubleSkill); // 0x0067C800-0x0067C998
	public static DoubleSkill Parse(string json); // 0x0067C998-0x0067CCF0
	public void PopulateFromString(string str); // 0x0067CCF0-0x0067CED0
}

public enum DoubleSkillType // TypeDefIndex: 3597
{
	Sprint = 0,
	Shield = 1,
	GetGold = 2,
	AddScore = 3,
	AddGems = 4,
	Magnet = 5,
	SuperSprint = 6
}

public class DoubleSkillData // TypeDefIndex: 3598
{
	// Fields
	public static DoubleSkill[] _doubleSkills; // 0x00

	// Constructors
	public DoubleSkillData(); // 0x0067D3C4-0x0067D3CC

	// Methods
	public static DoubleSkill[] LoadDoubleSkill(); // 0x0067CED0-0x0067D1C8
	public void SaveDoubleSkill(); // 0x0067D1C8-0x0067D3C4
}

public class EffectClip : MonoBehaviour // TypeDefIndex: 3599
{
	// Fields
	private List<Material> m_materialList; // 0x18
	private float m_halfWidth; // 0x20
	private float m_halfHeight; // 0x24
	private float m_canvasScale; // 0x28
	[SerializeField] // 0x00517C90-0x00517CA0
	public Transform top; // 0x30

	// Constructors
	public EffectClip(); // 0x0067E98C-0x0067E9FC

	// Methods
	private void Start(); // 0x0067E75C-0x0067E98C
}

public class CharacterModelSample : MonoBehaviour, ICharacterModel // TypeDefIndex: 3600
{
	// Fields
	[SerializeField] // 0x00517CA0-0x00517CB0
	private Transform _boneHead; // 0x18
	[SerializeField] // 0x00517CB0-0x00517CC0
	private Transform _boneRightHand; // 0x20
	[SerializeField] // 0x00517CC0-0x00517CD0
	private Transform _boneHelmet; // 0x28
	public CharacterCustomization.CustomControl[] Customs; // 0x30
	[CompilerGenerated] // 0x00517CD0-0x00517CE0
	private int _IsGirl_k__BackingField; // 0x38

	// Properties
	public Transform BoneHead { get; } // 0x00744414-0x0074441C 
	public Transform BoneHelmet { get; } // 0x0074441C-0x00744424 
	public Transform BoneRightHand { get; } // 0x00744424-0x0074442C 
	public int IsGirl { [CompilerGenerated] /* 0x0051F8F8-0x0051F908 */ get; [CompilerGenerated] /* 0x0051F908-0x0051F918 */ set; } // 0x0074442C-0x00744434 0x00744434-0x0074443C

	// Constructors
	public CharacterModelSample(); // 0x0074443C-0x00744444
}

public class CharacterModelSampleFactory : MonoBehaviour // TypeDefIndex: 3601
{
	// Fields
	[SerializeField] // 0x00517CE0-0x00517CF0
	private GameObject characterModelSamplePrefab; // 0x18
	[SerializeField] // 0x00517CF0-0x00517D00
	private GameObject characterHeadPrefab; // 0x20
	private Dictionary<Characters.CharacterType, GameObject> CHPreviews; // 0x28
	private static CharacterModelSampleFactory instance; // 0x00

	// Properties
	public static CharacterModelSampleFactory Instance { get; } // 0x007447D8-0x00744914 

	// Constructors
	public CharacterModelSampleFactory(); // 0x00744914-0x00744984

	// Methods
	private GameObject BuildCharacterHead(Characters.CharacterType key); // 0x00744444-0x0074452C
	private void SetHead(GameObject go, Characters.CharacterType key); // 0x0074452C-0x007445A0
	public GameObject GetCharacterHeadSample(Characters.CharacterType key); // 0x007445A0-0x007445A4
	public CharacterModelSample BuildCharacterModelSample(string name, int version); // 0x007445A4-0x007445A8
	private CharacterModelSample BuildCharacterSample(string name, int version); // 0x007445A8-0x0074463C
	private CharacterModelSample SelectCustom(GameObject go, string name, int version); // 0x0074463C-0x007447D8
}

public interface ICharacterModel // TypeDefIndex: 3602
{
	// Properties
	Transform BoneHead { get; }
	Transform BoneHelmet { get; }
	Transform BoneRightHand { get; }
	int IsGirl { get; set; }
}

public class SynchroniseRule // TypeDefIndex: 3603
{
	// Fields
	private bool _waitingForRespond; // 0x10
	private float _time; // 0x14
	private float _interval; // 0x18
	[CompilerGenerated] // 0x00517D00-0x00517D10
	private bool _hasGotInitValue_k__BackingField; // 0x1C

	// Properties
	public bool hasGotInitValue { [CompilerGenerated] /* 0x0051F918-0x0051F928 */ get; [CompilerGenerated] /* 0x0051F928-0x0051F938 */ set; } // 0x00FC4794-0x00FC479C 0x00FC479C-0x00FC47A8

	// Constructors
	public SynchroniseRule(float interval); // 0x00FC46AC-0x00FC46F0

	// Methods
	public bool Check(); // 0x00FC46F0-0x00FC4740
	public void Request(); // 0x00FC4740-0x00FC4778
	public void Respond(); // 0x00FC4778-0x00FC4780
	public void Reset(); // 0x00FC4780-0x00FC4794
}

public class FollowZ : MonoBehaviour // TypeDefIndex: 3604
{
	// Fields
	[SerializeField] // 0x00517D10-0x00517D20
	private Transform target; // 0x18
	[SerializeField] // 0x00517D20-0x00517D30
	private float zOffset; // 0x20
	[SerializeField] // 0x00517D30-0x00517D40
	private float translationTime; // 0x24
	private Transform mTrans; // 0x28
	private Vector3 initPos; // 0x30

	// Constructors
	public FollowZ(); // 0x0068B5B4-0x0068B5BC

	// Methods
	private void Awake(); // 0x0068B42C-0x0068B4E4
	private void LateUpdate(); // 0x0068B4E4-0x0068B58C
	private void OnDisable(); // 0x0068B58C-0x0068B5B4
}

public class GuangQiaoController : BaseO // TypeDefIndex: 3605
{
	// Fields
	[SerializeField] // 0x00517D40-0x00517D50
	private Animation anim; // 0x18

	// Constructors
	public GuangQiaoController(); // 0x0065DB80-0x0065DB88

	// Methods
	protected override void Awake(); // 0x0065D9CC-0x0065D9FC
	public override void OnActivate(); // 0x0065D9FC-0x0065DACC
	public override void OnDeactivate(); // 0x0065DACC-0x0065DB80
}

public class Helmets // TypeDefIndex: 3606
{
	// Fields
	private static string path; // 0x00
	public static Dictionary<HelmType, Helm> helmData; // 0x08
	public static List<HelmType> helmOrder; // 0x10

	// Nested types
	public struct Helm // TypeDefIndex: 3607
	{
		// Fields
		public LanguageKey name; // 0x00
		public string helmModelName; // 0x08
		public int price; // 0x10
		public UnlockType unlockType; // 0x14
		public int level; // 0x18
		public LanguageKey description; // 0x1C
		public bool useMagent; // 0x20
		public bool useMutiplier; // 0x21

		// Methods
		public static string ToJson(Helm helm); // 0x006D49D4-0x006D4C5C
		public static Helm Parse(string json); // 0x006D59F0-0x006D68F8
	}

	public enum HelmType // TypeDefIndex: 3608
	{
		notset = 0,
		normal = 1,
		bouncer = 2,
		snowhelm = 3,
		miami = 4,
		monster = 5,
		rome = 6,
		star = 7
	}

	public enum UnlockType // TypeDefIndex: 3609
	{
		alwaysUnlocked = 0,
		free = 1,
		coins = 2,
		hiddenUntillUnlocked = 3,
		keys = 4
	}

	// Constructors
	public Helmets(); // 0x006D68F8-0x006D6900
	static Helmets(); // 0x006D6900-0x006D695C

	// Methods
	public static bool Save(); // 0x006D4334-0x006D49D4
	public static bool Load(); // 0x006D4C5C-0x006D59F0
}

public class HelmetButtonHelp : MonoBehaviour // TypeDefIndex: 3610
{
	// Fields
	[SerializeField] // 0x00517D50-0x00517D60
	private Transform target; // 0x18
	[SerializeField] // 0x00517D60-0x00517D70
	private Vector3 onScreen; // 0x20
	[SerializeField] // 0x00517D70-0x00517D80
	private Vector3 offScreen; // 0x2C
	[SerializeField] // 0x00517D80-0x00517D90
	private float _duration; // 0x38
	[SerializeField] // 0x00517D90-0x00517DA0
	private UILabel amountLbl; // 0x40
	private AnimatingState animatingState; // 0x48
	private float _current; // 0x4C
	private Helmet helmet; // 0x50
	[CompilerGenerated] // 0x00517DA0-0x00517DB0
	private bool _IsActive_k__BackingField; // 0x58

	// Properties
	public bool IsActive { [CompilerGenerated] /* 0x0051F938-0x0051F948 */ get; [CompilerGenerated] /* 0x0051F948-0x0051F958 */ private set; } // 0x006D04B0-0x006D04B8 0x006D04B8-0x006D04C4

	// Nested types
	public enum AnimatingState // TypeDefIndex: 3611
	{
		_notset = 0,
		OnScreen = 1,
		OffScreen = 2,
		AnimatingIn = 3,
		AnimatingOut = 4
	}

	// Constructors
	public HelmetButtonHelp(); // 0x006D04C4-0x006D04DC

	// Methods
	private void Awake(); // 0x006CFB4C-0x006CFB74
	private void OnDisable(); // 0x006CFB74-0x006CFCE0
	private void OnEnable(); // 0x006CFCE0-0x006CFE54
	public void Init(); // 0x006CFF48-0x006CFF7C
	public void Show(); // 0x006CFF7C-0x006D00E8
	private void UpdateLabels(); // 0x006CFE54-0x006CFF48
	private void AnimatIn(); // 0x006D00E8-0x006D0120
	private void AnimatOut(); // 0x006D0120-0x006D0158
	private void OnStartHelmet(); // 0x006D0158-0x006D0190
	private void OnHardReset(); // 0x006D0190-0x006D0248
	private void OnHelmetInCooling(float rate); // 0x006D0248-0x006D0290
	private void OnClick(); // 0x006D0290-0x006D02C8
	private void Update(); // 0x006D02C8-0x006D04B0
}

internal class HelmetManager // TypeDefIndex: 3612
{
	// Fields
	private Helmets.HelmType currentlyDisplayedHelmet; // 0x10
	private static HelmetManager instance; // 0x00
	[CompilerGenerated] // 0x00517DB0-0x00517DC0
	private OnHelmetChangeDelegate OnDisplayedHelmetChange; // 0x18

	// Properties
	public static HelmetManager Instance { get; } // 0x006D0AD4-0x006D0B54 

	// Events
	public event OnHelmetChangeDelegate OnDisplayedHelmetChange {
		add; // 0x006D04DC-0x006D0580
		remove; // 0x006D0580-0x006D0624
	}

	// Nested types
	public delegate void OnHelmetChangeDelegate(Helmets.HelmType helmet); // TypeDefIndex: 3613; 0x006D0818-0x006D0A5C

	// Constructors
	public HelmetManager(); // 0x006D0B54-0x006D0B5C

	// Methods
	public bool isHelmActive(Helmets.HelmType helmType); // 0x006D0624-0x006D06C4
	public bool isHelmetUnlocked(Helmets.HelmType helmType); // 0x006D06C4-0x006D0800
	public void ChangedDisplayedHelmet(Helmets.HelmType newHelm); // 0x006D0800-0x006D0818
	public Helmets.HelmType CurrentlyDisplayedHelmet(); // 0x006D0A5C-0x006D0A64
	public Helmets.HelmType CurrentlyEquippedHelmet(); // 0x006D0A64-0x006D0AD4
}

public class HelmetModelPreviewFactory : MonoBehaviour // TypeDefIndex: 3614
{
	// Fields
	[SerializeField] // 0x00517DC0-0x00517DD0
	private HelmetSelection[] HelmetSelector; // 0x18
	[SerializeField] // 0x00517DD0-0x00517DE0
	private HelmetModelMenuData[] helmets; // 0x20
	public float pullSpeed; // 0x28
	public float cooldownDistance; // 0x2C
	public float slowMotionDistance; // 0x30
	public float slowDownToScale; // 0x34
	public float WaitForParticlesDelay; // 0x38
	public float RemoveObstaclesDistance; // 0x3C
	private CharacterModel characterModel; // 0x40
	private HelmetManager helmetManager; // 0x48
	private static HelmetModelPreviewFactory instance; // 0x00
	private Vector3 intialScale; // 0x50
	private Dictionary<string, HelmetModelMenuData> name2setup; // 0x60
	private Dictionary<Helmets.HelmType, GameObject> helmetThatMatchHelmType; // 0x68

	// Properties
	public static HelmetModelPreviewFactory Instance { get; } // 0x006D19B0-0x006D1AEC 

	// Nested types
	[Serializable]
	public class HelmetSelection // TypeDefIndex: 3615
	{
		// Fields
		public Helmets.HelmType helmType; // 0x10
		public GameObject helmetPrefab; // 0x18

		// Constructors
		public HelmetSelection(); // 0x006D1BDC-0x006D1BE4
	}

	[Serializable]
	public class HelmetModelMenuData // TypeDefIndex: 3616
	{
		// Fields
		public string name; // 0x10
		public Vector3 eulerAngles; // 0x18
		public float menuYPos; // 0x24
		public AnimationClip hangtimeClip; // 0x28
		public AnimationClip runClip; // 0x30
		public GameObject helmetPrefab; // 0x38
		public GameObject helmetPrefabInScroll; // 0x40

		// Constructors
		public HelmetModelMenuData(); // 0x006D1BD4-0x006D1BDC
	}

	// Constructors
	public HelmetModelPreviewFactory(); // 0x006D1AEC-0x006D1BD4

	// Methods
	private void AddCustomModel(GameObject prefab, Transform root); // 0x006D0C04-0x006D0E20
	public void Awake(); // 0x006D0E20-0x006D0FE0
	public HelmetSelection GetHelmetSelection(Helmets.HelmType helm); // 0x006D0FE0-0x006D1054
	public HelmetSelection GetHelmetSelection(int index); // 0x006D1054-0x006D10A8
	public GameObject GetHelmet(); // 0x006D10A8-0x006D1134
	public Helmets.HelmType GetCurrentEquippedHelmet(); // 0x006D1134-0x006D1150
	public void ChangeHelmet(Helmets.HelmType helmType, GameObject helmetGO, Animation characterAnimation, bool updateAnimation); // 0x006D1150-0x006D1540
	public Quaternion GetHelmetDefaultRotation(string name); // 0x006D1540-0x006D16A8
	public GameObject GetHelmetModelForScroll(string name, Helmets.HelmType helmType); // 0x006D16A8-0x006D19B0
}

public class HelmetRendering : MonoBehaviour // TypeDefIndex: 3617
{
	// Fields
	[OptionalField] // 0x00517DE0-0x00517DF0
	public AnimationClip defaultHelmetAnimation; // 0x18
	public AnimationPair[] runAnimations; // 0x20
	public AnimationPair[] superRunAnimations; // 0x28
	public AnimationPair[] landAnimations; // 0x30
	public AnimationPair[] jumpAnimations; // 0x38
	public AnimationPair[] hangtimeAnimations; // 0x40
	public AnimationPair[] rollAnimations; // 0x48
	public AnimationPair[] dodgeLeftAnimations; // 0x50
	public AnimationPair[] dodgeRightAnimations; // 0x58
	public AnimationPair[] grindAnimations; // 0x60
	public AnimationPair[] grindLandAnimations; // 0x68
	public AnimationPair[] getOnHelmAnimations; // 0x70

	// Nested types
	[Serializable]
	public class AnimationList // TypeDefIndex: 3618
	{
		// Fields
		public AnimationClip defaultHelmetAnimation; // 0x10
		public AnimationPair[] runAnimations; // 0x18
		public AnimationPair[] superRunAnimations; // 0x20
		public AnimationPair[] landAnimations; // 0x28
		public AnimationPair[] jumpAnimations; // 0x30
		public AnimationPair[] hangtimeAnimations; // 0x38
		public AnimationPair[] rollAnimations; // 0x40
		public AnimationPair[] dodgeLeftAnimations; // 0x48
		public AnimationPair[] dodgeRightAnimations; // 0x50
		public AnimationPair[] grindAnimations; // 0x58
		public AnimationPair[] grindLandAnimations; // 0x60
		public AnimationPair[] getOnHelmAnimations; // 0x68

		// Constructors
		public AnimationList(); // 0x006D2ADC-0x006D2AE4
	}

	[Serializable]
	public class AnimationPair // TypeDefIndex: 3619
	{
		// Fields
		public AnimationClip manAnimationClip; // 0x10
		public AnimationClip womanAnimationClip; // 0x18
		public AnimationClip elseAnimationClip; // 0x20

		// Constructors
		public AnimationPair(); // 0x006D2AE4-0x006D2AEC
	}

	// Constructors
	public HelmetRendering(); // 0x006D2AD4-0x006D2ADC

	// Methods
	private void AddClipsToAnimationComp(Animation animation, AnimationClip clip, List<AnimationClip> addedClipsList); // 0x006D2418-0x006D2518
	private string[] GetNamesAddAnimationClips(AnimationPair[] pairs, Animation avaterAnimation, Animation helmetAnimation, List<AnimationClip> addedClipsList); // 0x006D2518-0x006D2768
	public void Initialize(Animation avatarAnimation, Animation helmetAnimation, AnimationList defaultAbilityAnimationLists, List<AnimationClip> addedClipsList); // 0x006D2768-0x006D2AD4
}

public class RaftRendering : MonoBehaviour // TypeDefIndex: 3620
{
	// Fields
	public AnimationClip defaultAnimation; // 0x18
	public AnimationPair[] runAnimations; // 0x20
	public AnimationPair[] superRunAnimations; // 0x28
	public AnimationPair[] landAnimations; // 0x30
	public AnimationPair[] jumpAnimations; // 0x38
	public AnimationPair[] hangtimeAnimations; // 0x40
	public AnimationPair[] rollAnimations; // 0x48
	public AnimationPair[] dodgeLeftAnimations; // 0x50
	public AnimationPair[] dodgeRightAnimations; // 0x58
	public AnimationPair[] grindAnimations; // 0x60
	public AnimationPair[] grindLandAnimations; // 0x68
	public AnimationPair[] getOnRaftAnimations; // 0x70

	// Nested types
	[Serializable]
	public class AnimationPair // TypeDefIndex: 3621
	{
		// Fields
		public AnimationClip manAnimationClip; // 0x10
		public AnimationClip womanAnimationClip; // 0x18
		public AnimationClip elseAnimationClip; // 0x20

		// Constructors
		public AnimationPair(); // 0x0072AA38-0x0072AA40
	}

	// Constructors
	public RaftRendering(); // 0x0072AA30-0x0072AA38

	// Methods
	private void AddClipsToAnimationComp(Animation animation, AnimationClip clip, List<AnimationClip> addedClipsList); // 0x0072A434-0x0072A534
	private string[] GetNamesAddAnimationClips(AnimationPair[] pairs, Animation avaterAnimation, Animation raftAnimation, List<AnimationClip> addedClipsList); // 0x0072A534-0x0072A784
	public void Initialize(Animation avatarAnimation, Animation raftAnimation, List<AnimationClip> addedClipsList); // 0x0072A784-0x0072AA30
}

public class ScrollViewOptimize : UIScrollView // TypeDefIndex: 3622
{
	// Fields
	[SerializeField] // 0x00517DF0-0x00517E00
	private int tipHeight; // 0x100
	[SerializeField] // 0x00517E00-0x00517E10
	private int cellWidth; // 0x104
	[SerializeField] // 0x00517E10-0x00517E20
	private int cellHeight; // 0x108
	[SerializeField] // 0x00517E20-0x00517E30
	private int initCount; // 0x10C
	[SerializeField] // 0x00517E30-0x00517E40
	private List<Transform> children; // 0x110
	[SerializeField] // 0x00517E40-0x00517E50
	private Transform panelTrans; // 0x118
	private int lastStart; // 0x120
	private float originPanelY; // 0x124

	// Nested types
	public enum Direction // TypeDefIndex: 3623
	{
		Down = 0,
		Up = 1
	}

	public enum Sorting // TypeDefIndex: 3624
	{
		None = 0,
		Alphabetic = 1,
		Horizontal = 2,
		Vertical = 3,
		Custom = 4
	}

	// Constructors
	public ScrollViewOptimize(); // 0x006C3600-0x006C3674

	// Methods
	protected override void Start(); // 0x006C3278-0x006C33F8
	private void OnDragFinished(); // 0x006C33F8-0x006C3404
	private void OnDragStart(); // 0x006C3404-0x006C3410
	private void RefreshUI(); // 0x006C3410-0x006C3600
}

public class TramcarRendering : MonoBehaviour // TypeDefIndex: 3625
{
	// Fields
	public AnimationPair[] runAnimations; // 0x18
	public AnimationPair[] landAnimations; // 0x20
	public AnimationPair[] jumpAnimations; // 0x28
	public AnimationPair[] hangtimeAnimations; // 0x30
	public AnimationPair[] rollAnimations; // 0x38
	public AnimationPair[] dodgeLeftAnimations; // 0x40
	public AnimationPair[] dodgeRightAnimations; // 0x48
	public AnimationPair[] getOnCarAnimations; // 0x50
	public AnimationPair[] hitLowerAnimations; // 0x58
	public AnimationPair[] hitMidAnimations; // 0x60
	public AnimationPair[] hitUpAnimations; // 0x68
	public AnimationPair[] hitOneAnimations; // 0x70
	public AnimationPair[] hitTwoAnimations; // 0x78
	public AnimationPair[] hitThreeAnimations; // 0x80
	public AnimationPair[] hitMovingAnimations; // 0x88
	public AnimationPair[] fallAnimations; // 0x90
	public AnimationPair[] leanLeftAnimations; // 0x98
	public AnimationPair[] leanRightAnimations; // 0xA0
	public AnimationPair[] stumbleDeathAnimations; // 0xA8
	public AnimationPair[] stumbleAnimations; // 0xB0
	public AnimationPair[] stumbmixleAnimations; // 0xB8
	public AnimationPair[] stumbleleftcornerAnimations; // 0xC0
	public AnimationPair[] stumblerightcornerAnimations; // 0xC8
	public AnimationPair[] stumbleleftsideAnimations; // 0xD0
	public AnimationPair[] stumblerightsideAnimations; // 0xD8
	public AnimationClip defaultAnimation; // 0xE0

	// Nested types
	[Serializable]
	public class AnimationPair // TypeDefIndex: 3626
	{
		// Fields
		public AnimationClip manAnimationClip; // 0x10
		public AnimationClip womanAnimationClip; // 0x18

		// Constructors
		public AnimationPair(); // 0x007BB330-0x007BB338
	}

	// Constructors
	public TramcarRendering(); // 0x007BB328-0x007BB330

	// Methods
	public void Initialize(Animation characterAnimation, List<AnimationClip> addedClipsList); // 0x007BA3EC-0x007BB080
	private string[] GetNamesAddAnimationClips(AnimationPair[] pairs, Animation characterAnimation, List<AnimationClip> addedClipsList, bool man); // 0x007BB080-0x007BB228
	private void AddClipsToAnimationComp(Animation animation, AnimationClip clip, List<AnimationClip> addedClipsList); // 0x007BB228-0x007BB328
}

public class BuyHelmetButton : MonoBehaviour, IPurchaseHandler // TypeDefIndex: 3627
{
	// Fields
	public int number; // 0x18
	[SerializeField] // 0x00517E50-0x00517E60
	private GameObject freeViewGo; // 0x20
	[SerializeField] // 0x00517E60-0x00517E70
	private UISprite[] freeViewSprs; // 0x28
	[SerializeField] // 0x00517E70-0x00517E80
	private UILabel freeViewLbl; // 0x30
	[SerializeField] // 0x00517E80-0x00517E90
	private UILabel priceLabel; // 0x38
	private bool _purchaseInProgress; // 0x40
	private Color _freeViewLblColor; // 0x44
	private int _freeState; // 0x54

	// Constructors
	public BuyHelmetButton(); // 0x0077346C-0x00773474

	// Methods
	public void OnBuyClick(); // 0x00772BE0-0x00772C2C
	public void OnFreeViewClick(GameObject go); // 0x00772C2C-0x00772EBC
	private void Awake(); // 0x00772EBC-0x00772FE8
	private void OnEnable(); // 0x00772FE8-0x00773204
	private void OnDisable(); // 0x00773204-0x007732A0
	public void PurchaseFailure(); // 0x007732A0-0x007732A8
	public void PurchaseSuccessful(); // 0x007732A8-0x00773328
	public void OnFreeReward(RiseSdk.AdEventType type, int id, string tag, int eventType); // 0x00773328-0x0077346C
}

public class HelmetPopup : UIBaseScreen // TypeDefIndex: 3628
{
	// Fields
	[SerializeField] // 0x00517E90-0x00517EA0
	private UILabel popupTitle; // 0x98
	[SerializeField] // 0x00517EA0-0x00517EB0
	private UILabel helmetAmountLabel; // 0xA0
	[SerializeField] // 0x00517EB0-0x00517EC0
	private UILabel helmetDescription1; // 0xA8
	[SerializeField] // 0x00517EC0-0x00517ED0
	private UILabel helmetDescription2; // 0xB0
	[SerializeField] // 0x00517ED0-0x00517EE0
	private UILabel adLbl; // 0xB8
	[SerializeField] // 0x00517EE0-0x00517EF0
	private UILabel coinsLabel; // 0xC0
	[SerializeField] // 0x00517EF0-0x00517F00
	private UILabel gemsLabel; // 0xC8
	[SerializeField] // 0x00517F00-0x00517F10
	private UILabel getLbl; // 0xD0

	// Constructors
	public HelmetPopup(); // 0x006D2410-0x006D2418

	// Methods
	public override void Show(); // 0x006D1BE4-0x006D1C1C
	private void OnEnable(); // 0x006D1E34-0x006D2120
	private void OnDisable(); // 0x006D2120-0x006D22B0
	public void UpdateCoinsUI(); // 0x006D1C1C-0x006D1CCC
	public void UpdateGemsUI(); // 0x006D1CCC-0x006D1D7C
	private void UpdateLabels(); // 0x006D1D7C-0x006D1E34
	public override void GainFocus(); // 0x006D22B0-0x006D2390
	public override void LooseFocus(); // 0x006D2390-0x006D2410
}

public class HelmetSelectButton : MonoBehaviour, IPurchaseHandler // TypeDefIndex: 3629
{
	// Fields
	[SerializeField] // 0x00517F10-0x00517F20
	private UILabel watchLbl; // 0x18
	[SerializeField] // 0x00517F20-0x00517F30
	private UILabel tryLbl; // 0x20
	[SerializeField] // 0x00517F30-0x00517F40
	private UISprite fillSprite; // 0x28
	[SerializeField] // 0x00517F40-0x00517F50
	private UISprite buycoinSprite; // 0x30
	[SerializeField] // 0x00517F50-0x00517F60
	private UISprite buykeySprite; // 0x38
	[SerializeField] // 0x00517F60-0x00517F70
	private UILabel buypriceSprite; // 0x40
	[SerializeField] // 0x00517F70-0x00517F80
	private UILabel selectLabel; // 0x48
	[SerializeField] // 0x00517F80-0x00517F90
	private UILabel levelLabel; // 0x50
	[SerializeField] // 0x00517F90-0x00517FA0
	private GameObject buyGo; // 0x58
	[SerializeField] // 0x00517FA0-0x00517FB0
	private GameObject select; // 0x60
	[SerializeField] // 0x00517FB0-0x00517FC0
	private GameObject level; // 0x68
	[SerializeField] // 0x00517FC0-0x00517FD0
	private GameObject tryGo; // 0x70
	[SerializeField] // 0x00517FD0-0x00517FE0
	private string greenBtnSpriteName; // 0x78
	[SerializeField] // 0x00517FE0-0x00517FF0
	private string blueBtnSpriteName; // 0x80
	[SerializeField] // 0x00517FF0-0x00518000
	private string grayBtnSpriteName; // 0x88
	[SerializeField] // 0x00518000-0x00518010
	private UISprite[] freeTrySprs; // 0x90
	[SerializeField] // 0x00518010-0x00518020
	private Color selectOutlineColor; // 0x98
	[SerializeField] // 0x00518020-0x00518030
	private Color selectedOutlineColor; // 0xA8
	private Helmets.Helm currentHelm; // 0xB8
	private Helmets.HelmType currentHelmtype; // 0xE0
	private bool helmunlocked; // 0xE4
	private Helmets.UnlockType unlocktype; // 0xE8
	private int price; // 0xEC
	private State activeState; // 0xF0
	private bool isInited; // 0xF4
	private int selectInt; // 0xF8
	private bool _purchaseInProgress; // 0xFC
	private Color tryLblColor; // 0x100
	private int tryState; // 0x110

	// Nested types
	private enum State // TypeDefIndex: 3630
	{
		buy = 0,
		select = 1,
		level = 2
	}

	// Constructors
	public HelmetSelectButton(); // 0x006D3D80-0x006D3D90

	// Methods
	private void OnEnable(); // 0x006D2AEC-0x006D2BC0
	private void OnDisable(); // 0x006D2BC0-0x006D2C5C
	private void OnFreeReward(RiseSdk.AdEventType type, int id, string tag, int eventType); // 0x006D2C5C-0x006D2E18
	public void OnClick(); // 0x006D2E18-0x006D2F6C
	public void OnTryClick(GameObject go); // 0x006D3178-0x006D3408
	private void PurchaseHelmetTheme(); // 0x006D2F6C-0x006D2FC0
	public void PurchaseFailure(); // 0x006D3408-0x006D3410
	public void PurchaseSuccessful(); // 0x006D3410-0x006D3630
	public void InitButton(HelmScreen screen); // 0x006D3630-0x006D3728
	public void UpdateSelectState(Helmets.HelmType helmtype); // 0x006D3728-0x006D38A4
	private void SetState(State newState); // 0x006D38A4-0x006D3974
	private void SetToBuyState(); // 0x006D3A50-0x006D3AE4
	private void SetToLevelState(int level); // 0x006D3974-0x006D3A50
	private void SetToSelectState(); // 0x006D2FC0-0x006D3178
	private void UpdateTryButton(); // 0x006D3AE4-0x006D3D80
}

public class HelmetThemeButton : MonoBehaviour // TypeDefIndex: 3631
{
	// Fields
	[SerializeField] // 0x00518030-0x00518040
	private UISprite _background; // 0x18
	[SerializeField] // 0x00518040-0x00518050
	private UISprite _icon; // 0x20
	[SerializeField] // 0x00518050-0x00518060
	private GameObject selectedSprite; // 0x28
	[SerializeField] // 0x00518060-0x00518070
	private GameObject ownedSprite; // 0x30
	private int _index; // 0x38
	[CompilerGenerated] // 0x00518070-0x00518080
	private OnPressEvent OnPress; // 0x40

	// Properties
	public int ThemeIndex { get; } // 0x006D427C-0x006D4284 

	// Events
	public event OnPressEvent OnPress {
		add; // 0x006D3D90-0x006D3E34
		remove; // 0x006D3E34-0x006D3ED8
	}

	// Nested types
	public delegate void OnPressEvent(int index); // TypeDefIndex: 3632; 0x006D3EF0-0x006D4134

	// Constructors
	public HelmetThemeButton(); // 0x006D4284-0x006D428C

	// Methods
	private void ButtonPressed(); // 0x006D3ED8-0x006D3EF0
	public void InitButton(string iconName, Color32 bgColor, Color32 iconColor, int index); // 0x006D4134-0x006D41E4
	public void SetButtonState(int newState); // 0x006D41E4-0x006D427C
}

public class UIHelmetUpdateLabel : MonoBehaviour // TypeDefIndex: 3633
{
	// Fields
	private bool _countUpCoroutineRunning; // 0x18
	private int _lastAmountSet; // 0x1C
	[SerializeField] // 0x00518080-0x00518090
	private UILabel amountLabel; // 0x20
	[SerializeField] // 0x00518090-0x005180A0
	private UISprite blinkSprite; // 0x28
	private static readonly Vector3 SCROLL_TEXT_ENDOFFSET; // 0x00
	private static readonly Vector3 SCROLL_TEXT_STARTOFFSET; // 0x0C
	[SerializeField] // 0x005180A0-0x005180B0
	private GameObject scrollingLabelPrefab; // 0x30

	// Nested types
	[CompilerGenerated] // 0x005142D0-0x005142E0
	private sealed class _CountUpAndFlashCoroutine_d__7 : IEnumerator<object> // TypeDefIndex: 3634
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public UIHelmetUpdateLabel __4__this; // 0x20
		private float _aniFactor_5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525CE0-0x00525CF0 */ get; } // 0x0083E6DC-0x0083E6E4 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525D00-0x00525D10 */ get; } // 0x0083E748-0x0083E750 

		// Constructors
		[DebuggerHidden] // 0x00525CC0-0x00525CD0
		public _CountUpAndFlashCoroutine_d__7(int __1__state); // 0x0083DE08-0x0083DE34

		// Methods
		[DebuggerHidden] // 0x00525CD0-0x00525CE0
		void IDisposable.Dispose(); // 0x0083E450-0x0083E454
		private bool MoveNext(); // 0x0083E454-0x0083E6DC
		[DebuggerHidden] // 0x00525CF0-0x00525D00
		void IEnumerator.Reset(); // 0x0083E6E4-0x0083E748
	}

	// Constructors
	public UIHelmetUpdateLabel(); // 0x0083E384-0x0083E394
	static UIHelmetUpdateLabel(); // 0x0083E394-0x0083E450

	// Methods
	[IteratorStateMachine] // 0x0051F998-0x0051F9FC
	private IEnumerator CountUpAndFlashCoroutine(); // 0x0083DD94-0x0083DE08
	private void OnDisable(); // 0x0083DE34-0x0083DF18
	private void OnEnable(); // 0x0083DF18-0x0083E018
	private void SpawnScrollingLabel(); // 0x0083E10C-0x0083E284
	private void UpdateLabels(); // 0x0083E018-0x0083E10C
}

public class HighestScoreSystem : MonoBehaviour // TypeDefIndex: 3635
{
	// Fields
	[SerializeField] // 0x005180B0-0x005180C0
	private TopRun[] topRuns_AI; // 0x18
	[SerializeField] // 0x005180C0-0x005180D0
	private int minimumInterval; // 0x20
	private List<string> topRunList; // 0x28
	private int rankId; // 0x30
	private static HighestScoreSystem _instance; // 0x00
	[CompilerGenerated] // 0x005180D0-0x005180E0
	private TopRun _lastBeatenTopRun_k__BackingField; // 0x38
	[CompilerGenerated] // 0x005180E0-0x005180F0
	private bool _isAI_k__BackingField; // 0x40

	// Properties
	public static HighestScoreSystem Instance { get; } // 0x006D6D1C-0x006D6DE8 
	public TopRun lastBeatenTopRun { [CompilerGenerated] /* 0x0051FA60-0x0051FA70 */ get; [CompilerGenerated] /* 0x0051FA70-0x0051FA80 */ set; } // 0x006D8B20-0x006D8B28 0x006D8B28-0x006D8B30
	public bool isAI { [CompilerGenerated] /* 0x0051FA80-0x0051FA90 */ get; [CompilerGenerated] /* 0x0051FA90-0x0051FAA0 */ private set; } // 0x006D8B30-0x006D8B38 0x006D8B38-0x006D8B44

	// Nested types
	[CompilerGenerated] // 0x005142E0-0x005142F0
	private sealed class _DownloadImage_d__14 : IEnumerator<object> // TypeDefIndex: 3636
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public List<string> urls; // 0x20
		private int _count_5__2; // 0x28
		private int _i_5__3; // 0x2C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525D30-0x00525D40 */ get; } // 0x006D8DF0-0x006D8DF8 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525D50-0x00525D60 */ get; } // 0x006D8E5C-0x006D8E64 

		// Constructors
		[DebuggerHidden] // 0x00525D10-0x00525D20
		public _DownloadImage_d__14(int __1__state); // 0x006D89E4-0x006D8A10

		// Methods
		[DebuggerHidden] // 0x00525D20-0x00525D30
		void IDisposable.Dispose(); // 0x006D8B54-0x006D8B58
		private bool MoveNext(); // 0x006D8B58-0x006D8CC8
		[DebuggerHidden] // 0x00525D40-0x00525D50
		void IEnumerator.Reset(); // 0x006D8DF8-0x006D8E5C
	}

	// Constructors
	public HighestScoreSystem(); // 0x006D8B44-0x006D8B54

	// Methods
	private void Awake(); // 0x006D7B3C-0x006D7C14
	public void Request(); // 0x006D7C14-0x006D7C18
	public void PullListListener(int status, object obj); // 0x006D7C18-0x006D829C
	public void Clear(); // 0x006D829C-0x006D8328
	public void Add(string userId); // 0x006D8328-0x006D83B0
	private void GetPlayerNameDataCallback(int status, object obj); // 0x006D83B0-0x006D8658
	private void GePictureUrlDataCallback(int status, object obj); // 0x006D8658-0x006D8970
	[IteratorStateMachine] // 0x0051F9FC-0x0051FA60
	private IEnumerator DownloadImage(List<string> urls); // 0x006D8970-0x006D89E4
	public TopRun Init(); // 0x006D71C0-0x006D7358
	public TopRun Next(); // 0x006D78D4-0x006D7A5C
	public void End(int score); // 0x006D8A10-0x006D8B20
}

public class MiniJSON // TypeDefIndex: 3637
{
	// Fields
	private const int TOKEN_NONE = 0; // Metadata: 0x001F5915
	private const int TOKEN_CURLY_OPEN = 1; // Metadata: 0x001F5919
	private const int TOKEN_CURLY_CLOSE = 2; // Metadata: 0x001F591D
	private const int TOKEN_SQUARED_OPEN = 3; // Metadata: 0x001F5921
	private const int TOKEN_SQUARED_CLOSE = 4; // Metadata: 0x001F5925
	private const int TOKEN_COLON = 5; // Metadata: 0x001F5929
	private const int TOKEN_COMMA = 6; // Metadata: 0x001F592D
	private const int TOKEN_STRING = 7; // Metadata: 0x001F5931
	private const int TOKEN_NUMBER = 8; // Metadata: 0x001F5935
	private const int TOKEN_TRUE = 9; // Metadata: 0x001F5939
	private const int TOKEN_FALSE = 10; // Metadata: 0x001F593D
	private const int TOKEN_NULL = 11; // Metadata: 0x001F5941
	private const int BUILDER_CAPACITY = 2000; // Metadata: 0x001F5945
	protected static int lastErrorIndex; // 0x00
	protected static string lastDecode; // 0x08

	// Constructors
	public MiniJSON(); // 0x007045F0-0x007045F8
	static MiniJSON(); // 0x007045F8-0x00704664

	// Methods
	public static object jsonDecode(string json); // 0x0070238C-0x007024AC
	public static string jsonEncode(object json); // 0x00702728-0x007027E0
	public static bool lastDecodeSuccessful(); // 0x00702CE8-0x00702D58
	public static int getLastErrorIndex(); // 0x00702D58-0x00702DC0
	public static string getLastErrorSnippet(); // 0x00702DC0-0x00702F18
	protected static Hashtable parseObject(char[] json, ref int index); // 0x00702F18-0x00703110
	protected static ArrayList parseArray(char[] json, ref int index); // 0x007037A0-0x0070393C
	protected static object parseValue(char[] json, ref int index, ref bool success); // 0x007024AC-0x00702728
	protected static string parseString(char[] json, ref int index); // 0x0070345C-0x007037A0
	protected static double parseNumber(char[] json, ref int index); // 0x0070393C-0x00703A58
	protected static int getLastIndexOfNumber(char[] json, int index); // 0x00703B1C-0x00703BD8
	protected static void eatWhitespace(char[] json, ref int index); // 0x00703A58-0x00703B1C
	protected static int lookAhead(char[] json, int index); // 0x007033E0-0x0070345C
	protected static int nextToken(char[] json, ref int index); // 0x00703110-0x007033E0
	protected static bool serializeObjectOrArray(object objectOrArray, StringBuilder builder); // 0x00703BD8-0x00703D5C
	protected static bool serializeObject(Hashtable anObject, StringBuilder builder); // 0x00703D5C-0x00703FF4
	protected static bool serializeDictionary(Dictionary<string, string> dict, StringBuilder builder); // 0x00704394-0x00704560
	protected static bool serializeArray(ArrayList anArray, StringBuilder builder); // 0x00703FF4-0x0070414C
	protected static bool serializeValue(object value, StringBuilder builder); // 0x007027E0-0x00702CE8
	protected static void serializeString(string aString, StringBuilder builder); // 0x0070414C-0x00704394
	protected static void serializeNumber(double number, StringBuilder builder); // 0x00704560-0x007045F0
}

public static class MiniJsonExtensions // TypeDefIndex: 3638
{
	// Extension methods
	public static string toJson(this Hashtable obj); // 0x0088E7E4-0x0088E84C
	public static string toJson(this Dictionary<string, string> obj); // 0x0088E84C-0x0088E8B4
	public static ArrayList arrayListFromJson(this string json); // 0x0088E8B4-0x0088E960
	public static Hashtable hashtableFromJson(this string json); // 0x0088E960-0x0088EA0C
}

public static class RiseJson // TypeDefIndex: 3639
{
	// Nested types
	private sealed class Parser : IDisposable // TypeDefIndex: 3640
	{
		// Fields
		[CompilerGenerated] // 0x0051CB50-0x0051CB60
		private static Dictionary<string, int> f__switchmap0; // 0x00
		private StringReader json; // 0x10
		private const string WHITE_SPACE = " \t\n\r"; // Metadata: 0x001F5949
		private const string WORD_BREAK = " \t\n\r{}[],:\""; // Metadata: 0x001F5951

		// Properties
		private char NextChar { get; } // 0x00734D04-0x00734D8C 
		private TOKEN NextSymbol { get; } // 0x0073449C-0x007346F4 
		private string NextWord { get; } // 0x00734C1C-0x00734D04 
		private char PeekChar { get; } // 0x0073430C-0x00734394 

		// Nested types
		private enum TOKEN // TypeDefIndex: 3641
		{
			NONE = 0,
			CURLY_OPEN = 1,
			CURLY_CLOSE = 2,
			SQUARED_OPEN = 3,
			SQUARED_CLOSE = 4,
			COLON = 5,
			COMMA = 6,
			STRING = 7,
			NUMBER = 8,
			TRUE = 9,
			FALSE = 10,
			NULL = 11
		}

		// Constructors
		private Parser(string jsonString); // 0x007341B0-0x0073422C

		// Methods
		public void Dispose(); // 0x0073422C-0x00734260
		private void EatWhitespace(); // 0x00734260-0x0073430C
		public static object Parse(string jsonString); // 0x00733FEC-0x0073412C
		private List<object> ParseArray(); // 0x007343BC-0x0073449C
		private object ParseBySymbol(TOKEN symbol); // 0x007346F4-0x007347D0
		private object ParseNumber(); // 0x00734B3C-0x00734C1C
		private Dictionary<string, object> ParseObject(); // 0x007347D0-0x007348EC
		private string ParseString(); // 0x007348EC-0x00734B3C
		private object ParseValue(); // 0x00734394-0x007343BC
	}

	private sealed class Serializer // TypeDefIndex: 3642
	{
		// Fields
		private StringBuilder builder; // 0x10

		// Constructors
		private Serializer(); // 0x00734D8C-0x00734DF4

		// Methods
		public static string Serialize(object obj); // 0x00734130-0x007341B0
		private void SerializeArray(IList anArray); // 0x00734F88-0x00735260
		private void SerializeObject(IDictionary obj); // 0x00735260-0x00735670
		private void SerializeOther(object value); // 0x007358EC-0x00735A68
		private void SerializeString(string str); // 0x00735670-0x007358EC
		private void SerializeValue(object value); // 0x00734DF4-0x00734F88
	}

	// Methods
	public static object Deserialize(string json); // 0x0072DDB8-0x0072DDC4
	public static string Serialize(object obj); // 0x0073412C-0x00734130
}

public sealed class RiseSdk // TypeDefIndex: 3643
{
	// Fields
	private static RiseSdk _instance; // 0x00
	private AndroidJavaClass _class; // 0x10
	private bool paymentSystemValid; // 0x18
	private string BACK_HOME_ADPOS; // 0x20
	private bool BACK_HOME_AD_ENABLE; // 0x28
	private double BACK_HOME_AD_TIME; // 0x30
	private bool canShowBackHomeAd; // 0x38
	private int homeAdMinPauseMillisecond; // 0x3C
	private int homeAdMinDeltaMillisecond; // 0x40
	private double pauseTime; // 0x48
	private FileLRUCache lruCache; // 0x50
	public const int POS_BANNER_LEFT_TOP = 1; // Metadata: 0x001F5994
	public const int POS_BANNER_MIDDLE_TOP = 3; // Metadata: 0x001F5998
	public const int POS_BANNER_RIGHT_TOP = 6; // Metadata: 0x001F599C
	public const int POS_BANNER_MIDDLE_MIDDLE = 5; // Metadata: 0x001F59A0
	public const int POS_BANNER_LEFT_BOTTOM = 2; // Metadata: 0x001F59A4
	public const int POS_BANNER_MIDDLE_BOTTOM = 4; // Metadata: 0x001F59A8
	public const int POS_BANNER_RIGHT_BOTTOM = 7; // Metadata: 0x001F59AC
	public const int POS_BANNER_LEFT_MIDDLE = 8; // Metadata: 0x001F59B0
	public const int POS_BANNER_RIGHT_MIDDLE = 9; // Metadata: 0x001F59B4
	public const int ANIMATE_BANNER_NONE = 0; // Metadata: 0x001F59B8
	public const int ANIMATE_BANNER_TOP = 1; // Metadata: 0x001F59BC
	public const int ANIMATE_BANNER_BOTTOM = 2; // Metadata: 0x001F59C0
	public const int ANIMATE_BANNER_LEFT = 4; // Metadata: 0x001F59C4
	public const int ANIMATE_BANNER_RIGHT = 8; // Metadata: 0x001F59C8
	public const int ANIMATE_BANNER_ROTATION = 16; // Metadata: 0x001F59CC
	public const string M_START = "start"; // Metadata: 0x001F59D0
	public const string M_PAUSE = "pause"; // Metadata: 0x001F59D9
	public const string M_PASSLEVEL = "passlevel"; // Metadata: 0x001F59E2
	public const string M_PASSLEVEL_1 = "passlevel1"; // Metadata: 0x001F59EF
	public const string M_CUSTOM = "custom"; // Metadata: 0x001F59FD
	public const int PAYMENT_RESULT_SUCCESS = 1; // Metadata: 0x001F5A07
	public const int PAYMENT_RESULT_FAILS = 2; // Metadata: 0x001F5A0B
	public const int PAYMENT_RESULT_CANCEL = 3; // Metadata: 0x001F5A0F
	public const int CONFIG_KEY_APP_ID = 1; // Metadata: 0x001F5A13
	public const int CONFIG_KEY_LEADER_BOARD_URL = 2; // Metadata: 0x001F5A17
	public const int CONFIG_KEY_API_VERSION = 3; // Metadata: 0x001F5A1B
	public const int CONFIG_KEY_SCREEN_WIDTH = 4; // Metadata: 0x001F5A1F
	public const int CONFIG_KEY_SCREEN_HEIGHT = 5; // Metadata: 0x001F5A23
	public const int CONFIG_KEY_LANGUAGE = 6; // Metadata: 0x001F5A27
	public const int CONFIG_KEY_COUNTRY = 7; // Metadata: 0x001F5A2B
	public const int CONFIG_KEY_VERSION_CODE = 8; // Metadata: 0x001F5A2F
	public const int CONFIG_KEY_VERSION_NAME = 9; // Metadata: 0x001F5A33
	public const int CONFIG_KEY_PACKAGE_NAME = 10; // Metadata: 0x001F5A37
	public const int CONFIG_KEY_UUID = 11; // Metadata: 0x001F5A3B
	public const int ADTYPE_OTHER = -1; // Metadata: 0x001F5A3F
	public const int ADTYPE_INTERTITIAL = 1; // Metadata: 0x001F5A43
	public const int ADTYPE_VIDEO = 2; // Metadata: 0x001F5A47
	public const int ADTYPE_BANNER = 3; // Metadata: 0x001F5A4B
	public const int ADTYPE_ICON = 4; // Metadata: 0x001F5A4F
	public const int ADTYPE_NATIVE = 5; // Metadata: 0x001F5A53

	// Properties
	public static RiseSdk Instance { get; } // 0x0072C8DC-0x0072C99C 

	// Nested types
	public enum GoogleEventType // TypeDefIndex: 3644
	{
		SilentLoginSuccess = 0,
		SilentLoginFailed = 1,
		LoginSuccess = 2,
		LoginFailed = 3,
		LogoutSuccess = 4,
		LogoutFailed = 5,
		UpdateLeaderBoardSuccess = 6,
		UpdateLeaderBoardFailed = 7,
		UpdateAchievementSuccess = 8,
		UpdateAchievementFailed = 9
	}

	public enum AdEventType // TypeDefIndex: 3645
	{
		FullAdLoadCompleted = 1,
		FullAdLoadFailed = 2,
		RewardAdLoadFailed = 3,
		RewardAdLoadCompleted = 4,
		RewardAdShowStart = 5,
		RewardAdShowFinished = 6,
		RewardAdShowFailed = 7,
		RewardAdClosed = 8,
		VideoAdClicked = 9,
		FullAdClosed = 10,
		FullAdShown = 11,
		FullAdClicked = 12,
		BannerAdClicked = 13,
		CrossAdClicked = 14,
		AdLoadCompleted = 15,
		AdLoadFailed = 16,
		AdShown = 17,
		AdClosed = 18,
		AdClicked = 19,
		IconAdClicked = 20,
		NativeAdClicked = 21
	}

	public enum PaymentResult // TypeDefIndex: 3646
	{
		Success = 1,
		Failed = 2,
		Cancel = 3,
		PaymentSystemError = 4,
		PaymentSystemValid = 5
	}

	public enum SnsEventType // TypeDefIndex: 3647
	{
		LoginSuccess = 1,
		LoginFailed = 2,
		InviteSuccess = 3,
		InviteFailed = 4,
		ChallengeSuccess = 5,
		ChallengeFailed = 6,
		LikeSuccess = 7,
		LikeFailed = 8,
		ShareSuccess = 9,
		ShareFailed = 10,
		ShareCancel = 11
	}

	public enum LocalPushType // TypeDefIndex: 3648
	{
		NoCycle = 0,
		YearCycle = 4,
		MonthCycle = 8,
		DayCycle = 16,
		HourCycle = 32,
		MinuteCycle = 64,
		SecondCycle = 128,
		WeekDayCycle = 512,
		WeekDayOrDinalCycle = 1024
	}

	private class RiseEditorAd : MonoBehaviour // TypeDefIndex: 3649
	{
		// Fields
		private static RiseEditorAd _editorAdInstance; // 0x00
		public static bool hasInit; // 0x08
		private Rect bannerPos; // 0x18
		private bool bannerShow; // 0x28
		private string bannerContent; // 0x30
		private bool interstitialShow; // 0x38
		private bool wllInterstitialShow; // 0x39
		private string interstitialContent; // 0x40
		private bool rewardShow; // 0x48
		private string rewardContent; // 0x50
		private float scaleWidth; // 0x58
		private float scaleHeight; // 0x5C
		private int originScreenWidth; // 0x60
		private int originScreenHeight; // 0x64
		private bool toastShow; // 0x68
		private List<string> toastList; // 0x70
		private GUIStyle toastStyle; // 0x78
		private int rewardAdId; // 0x80
		private string rewardAdTag; // 0x88
		private float iconAdWidth; // 0x90
		private float iconAdXPercent; // 0x94
		private float iconAdYPercent; // 0x98
		private bool iconAdShow; // 0x9C
		private string iconAdContent; // 0xA0
		private const int NONE_REWARD_ID = -10; // Metadata: 0x001F5B3B
		private const string DEFAULT_REWARD_TAG = "DEFAULT"; // Metadata: 0x001F5B3F
		private const string BANNER_DEFAULT_TXT = "Banner AD"; // Metadata: 0x001F5B4A
		private const string INTERSTITIAL_DEFAULT_TXT = "\nInterstitial AD Test"; // Metadata: 0x001F5B57
		private const string REWARD_DEFAULT_TXT = "Free Coin AD Test: "; // Metadata: 0x001F5B70
		private const int SCREEN_WIDTH = 854; // Metadata: 0x001F5B87
		private const int SCREEN_HEIGHT = 480; // Metadata: 0x001F5B8B
		private const int GUI_DEPTH = -99; // Metadata: 0x001F5B8F
		private const int BANNER_WIDTH = 320; // Metadata: 0x001F5B93
		private const int BANNER_HEIGHT = 50; // Metadata: 0x001F5B97
		private bool timeCounting; // 0xA8

		// Properties
		public static RiseEditorAd EditorAdInstance { get; } // 0x006B5A74-0x006B5C74 

		// Nested types
		[CompilerGenerated] // 0x00514DA0-0x00514DB0
		private sealed class _CheckToast_d__50 : IEnumerator<object> // TypeDefIndex: 3650
		{
			// Fields
			private int __1__state; // 0x10
			private object __2__current; // 0x18
			public float time; // 0x20
			public RiseEditorAd __4__this; // 0x28

			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00528914-0x00528924 */ get; } // 0x006B5F60-0x006B5F68 
			object IEnumerator.Current { [DebuggerHidden] /* 0x00528934-0x00528944 */ get; } // 0x006B5FCC-0x006B5FD4 

			// Constructors
			[DebuggerHidden] // 0x005288F4-0x00528904
			public _CheckToast_d__50(int __1__state); // 0x006B5D3C-0x006B5D68

			// Methods
			[DebuggerHidden] // 0x00528904-0x00528914
			void IDisposable.Dispose(); // 0x006B5E48-0x006B5E4C
			private bool MoveNext(); // 0x006B5E4C-0x006B5F60
			[DebuggerHidden] // 0x00528924-0x00528934
			void IEnumerator.Reset(); // 0x006B5F68-0x006B5FCC
		}

		// Constructors
		public RiseEditorAd(); // 0x006B5D70-0x006B5E44
		static RiseEditorAd(); // 0x006B5E44-0x006B5E48

		// Methods
		private void Awake(); // 0x006B58A8-0x006B5A74
		public void ShowBanner(int pos); // 0x006B5C74-0x006B5C78
		public void ShowBanner(string tag, int pos); // 0x006B5C78-0x006B5C7C
		public void ShowBanner(string tag, int pos, int animate); // 0x006B5C7C-0x006B5C80
		public void CloseBanner(); // 0x006B5C80-0x006B5C84
		private void SetBannerPos(int pos); // 0x006B5C84-0x006B5C88
		public void ShowAd(string tag); // 0x006B5C88-0x006B5C8C
		public void ShowRewardAd(int id); // 0x006B5C8C-0x006B5C90
		public void ShowRewardAd(string tag, int id); // 0x006B5C90-0x006B5C94
		public void ShowIconAd(float width, float xPercent, float yPercent); // 0x006B5C94-0x006B5CA8
		public void CloseIconAd(); // 0x006B5CA8-0x006B5CB0
		public void Pay(int billingId); // 0x006B5CB0-0x006B5CB4
		public void Toast(string msg); // 0x006B5CB4-0x006B5CB8
		[IteratorStateMachine] // 0x00525D60-0x00525DC4
		private IEnumerator CheckToast(float time = 2f /* Metadata: 0x001F5B37 */); // 0x006B5CB8-0x006B5D3C
		public void Alert(string title, string msg); // 0x006B5D68-0x006B5D6C
		public void OnExit(); // 0x006B5D6C-0x006B5D70
	}

	private class FileLRUCache // TypeDefIndex: 3651
	{
		// Fields
		private int maxCapacity; // 0x10
		private int size; // 0x14
		private LinkedNode head; // 0x18
		private LinkedNode tail; // 0x20
		private Dictionary<string, LinkedNode> cache; // 0x28
		private const string CACHE_FILE = "filedirmeta"; // Metadata: 0x001F5B9B
		private const string SPLIT_FLAG = "@^@"; // Metadata: 0x001F5BAA
		private const string KEY_VALUE_SPLIT_FLAG = "^_^"; // Metadata: 0x001F5BB1
		private static string defFilePath; // 0x00
		private Coroutine writting; // 0x30

		// Nested types
		public enum FileType // TypeDefIndex: 3652
		{
			Image = 0,
			Text = 1
		}

		[CompilerGenerated] // 0x00514DB0-0x00514DC0
		private sealed class _Download_d__12 : IEnumerator<object> // TypeDefIndex: 3653
		{
			// Fields
			private int __1__state; // 0x10
			private object __2__current; // 0x18
			public string url; // 0x20
			public Action<string, WWW> resultEvent; // 0x28
			public string saveName; // 0x30
			public FileLRUCache __4__this; // 0x38
			private WWW _www_5__2; // 0x40

			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00528964-0x00528974 */ get; } // 0x006B4EA8-0x006B4EB0 
			object IEnumerator.Current { [DebuggerHidden] /* 0x00528984-0x00528994 */ get; } // 0x006B4F14-0x006B4F1C 

			// Constructors
			[DebuggerHidden] // 0x00528944-0x00528954
			public _Download_d__12(int __1__state); // 0x006B3CCC-0x006B3CF8

			// Methods
			[DebuggerHidden] // 0x00528954-0x00528964
			void IDisposable.Dispose(); // 0x006B498C-0x006B4990
			private bool MoveNext(); // 0x006B4990-0x006B4EA8
			[DebuggerHidden] // 0x00528974-0x00528984
			void IEnumerator.Reset(); // 0x006B4EB0-0x006B4F14
		}

		[CompilerGenerated] // 0x00514DC0-0x00514DD0
		private sealed class _LoadLocal_d__13 : IEnumerator<object> // TypeDefIndex: 3654
		{
			// Fields
			private int __1__state; // 0x10
			private object __2__current; // 0x18
			public string filePath; // 0x20
			public Action<string, WWW> resultEvent; // 0x28
			public string saveName; // 0x30
			public FileLRUCache __4__this; // 0x38
			private WWW _www_5__2; // 0x40

			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005289B4-0x005289C4 */ get; } // 0x006B53A0-0x006B53A8 
			object IEnumerator.Current { [DebuggerHidden] /* 0x005289D4-0x005289E4 */ get; } // 0x006B540C-0x006B5414 

			// Constructors
			[DebuggerHidden] // 0x00528994-0x005289A4
			public _LoadLocal_d__13(int __1__state); // 0x006B3CF8-0x006B3D24

			// Methods
			[DebuggerHidden] // 0x005289A4-0x005289B4
			void IDisposable.Dispose(); // 0x006B4F1C-0x006B4F20
			private bool MoveNext(); // 0x006B4F20-0x006B53A0
			[DebuggerHidden] // 0x005289C4-0x005289D4
			void IEnumerator.Reset(); // 0x006B53A8-0x006B540C
		}

		[CompilerGenerated] // 0x00514DD0-0x00514DE0
		private sealed class _delayLoad_d__16 : IEnumerator<object> // TypeDefIndex: 3655
		{
			// Fields
			private int __1__state; // 0x10
			private object __2__current; // 0x18
			public float delayTime; // 0x20
			public FileLRUCache __4__this; // 0x28
			public string path; // 0x30

			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00528A04-0x00528A14 */ get; } // 0x006B5514-0x006B551C 
			object IEnumerator.Current { [DebuggerHidden] /* 0x00528A24-0x00528A34 */ get; } // 0x006B5580-0x006B5588 

			// Constructors
			[DebuggerHidden] // 0x005289E4-0x005289F4
			public _delayLoad_d__16(int __1__state); // 0x006B4274-0x006B42A0

			// Methods
			[DebuggerHidden] // 0x005289F4-0x00528A04
			void IDisposable.Dispose(); // 0x006B5414-0x006B5418
			private bool MoveNext(); // 0x006B5418-0x006B5514
			[DebuggerHidden] // 0x00528A14-0x00528A24
			void IEnumerator.Reset(); // 0x006B551C-0x006B5580
		}

		[CompilerGenerated] // 0x00514DE0-0x00514DF0
		private sealed class _delayWrite_d__20 : IEnumerator<object> // TypeDefIndex: 3656
		{
			// Fields
			private int __1__state; // 0x10
			private object __2__current; // 0x18
			public FileLRUCache __4__this; // 0x20

			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00528A54-0x00528A64 */ get; } // 0x006B5834-0x006B583C 
			object IEnumerator.Current { [DebuggerHidden] /* 0x00528A74-0x00528A84 */ get; } // 0x006B58A0-0x006B58A8 

			// Constructors
			[DebuggerHidden] // 0x00528A34-0x00528A44
			public _delayWrite_d__20(int __1__state); // 0x006B45D8-0x006B4604

			// Methods
			[DebuggerHidden] // 0x00528A44-0x00528A54
			void IDisposable.Dispose(); // 0x006B5588-0x006B558C
			private bool MoveNext(); // 0x006B558C-0x006B5834
			[DebuggerHidden] // 0x00528A64-0x00528A74
			void IEnumerator.Reset(); // 0x006B583C-0x006B58A0
		}

		// Constructors
		public FileLRUCache(int capacity); // 0x006B3D24-0x006B41DC
		static FileLRUCache(); // 0x006B4930-0x006B498C

		// Methods
		public void DownloadFile(string url, Action<string, WWW> resultEvent); // 0x006B35F0-0x006B37B4
		public void LoadLocalFile(string filePath, Action<string, WWW> resultEvent); // 0x006B3B1C-0x006B3C1C
		public bool FileDownloaded(string url); // 0x006B3C1C-0x006B3CCC
		[IteratorStateMachine] // 0x00525DC4-0x00525E28
		private IEnumerator Download(string url, string saveName, Action<string, WWW> resultEvent); // 0x006B39F4-0x006B3A88
		[IteratorStateMachine] // 0x00525E28-0x00525E8C
		private IEnumerator LoadLocal(string filePath, string saveName, Action<string, WWW> resultEvent); // 0x006B3A88-0x006B3B1C
		[IteratorStateMachine] // 0x00525E8C-0x00525EF0
		private IEnumerator delayLoad(string path, float delayTime); // 0x006B41E4-0x006B4274
		private void loadCache(string path, WWW www); // 0x006B42A0-0x006B44D4
		private void writeCache(); // 0x006B44D4-0x006B4564
		[IteratorStateMachine] // 0x00525EF0-0x00525F54
		private IEnumerator delayWrite(); // 0x006B4564-0x006B45D8
		private void set(string key, string value); // 0x006B4604-0x006B4744
		private void checkCapacity(); // 0x006B47B4-0x006B47F0
		private string get(string key); // 0x006B489C-0x006B4930
		private void linkAtFront(LinkedNode node); // 0x006B4778-0x006B47B4
		private void moveToFront(LinkedNode node); // 0x006B4744-0x006B4778
		private void removeLast(); // 0x006B47F0-0x006B489C
	}

	private class LinkedNode // TypeDefIndex: 3657
	{
		// Fields
		public string key; // 0x10
		public string value; // 0x18
		public LinkedNode prev; // 0x20
		public LinkedNode next; // 0x28

		// Constructors
		public LinkedNode(); // 0x006B41DC-0x006B41E4
	}

	// Constructors
	public RiseSdk(); // 0x00735A74-0x00735AD8
	static RiseSdk(); // 0x0073D3E0-0x0073E3E4

	// Methods
	public void SetPaymentSystemValid(bool valid); // 0x00735A68-0x00735A74
	public void Init(); // 0x00735AD8-0x007360D8
	public int GetScreenWidth(); // 0x007360D8-0x007360E0
	public int GetScreenHeight(); // 0x007360E0-0x007360E8
	public void ShowBanner(string tag, int pos); // 0x007360E8-0x00736230
	public void ShowBanner(int pos); // 0x00736230-0x00736348
	public void ShowBanner(string tag, int pos, int animate); // 0x00736348-0x007364D0
	public bool HasBanner(string tag); // 0x007364D0-0x007365B4
	public void CloseBanner(); // 0x007365B4-0x007366B4
	public void ShowAd(string tag); // 0x007366B4-0x007367B4
	public bool HasInterstitial(string tag); // 0x00736870-0x00736954
	public void ShowMore(); // 0x00736954-0x00736A7C
	public bool HasRewardAd(); // 0x00730390-0x0073049C
	public bool HasRewardAd(string tag); // 0x00736A7C-0x00736B60
	public void ShowRewardAd(int rewardId); // 0x00736B60-0x00736C74
	public void ShowRewardAd(string tag, int rewardId); // 0x00736C74-0x00736DB8
	public void InitBackHomeAd(string adPos, int minPauseMillisecond = 20000 /* Metadata: 0x001F5990 */); // 0x00736DB8-0x00736DC4
	public void enableBackHomeAd(bool enabled); // 0x00736DC4-0x00736DD0
	public void OnResume(); // 0x00736DD0-0x00736ED0
	public bool CheckBackHomeAd(); // 0x00736ED0-0x00736F78
	public void ShowBackHomeAd(); // 0x00736F78-0x00737018
	public void OnPause(); // 0x00737018-0x00737160
	public void OnStart(); // 0x00737160-0x00737260
	public void OnStop(); // 0x00737260-0x00737360
	public void OnDestroy(); // 0x00737360-0x00737460
	public void OnExit(); // 0x00737460-0x00737588
	public void HasPaid(int billingId); // 0x00737588-0x00737674
	public bool IsPayEnabled(); // 0x00737674-0x0073767C
	public void Pay(int billingId); // 0x0073767C-0x00737790
	public void Share(); // 0x00737790-0x007378B8
	public string GetExtraData(); // 0x007378B8-0x007379BC
	public void TrackEvent(string category, string action, string label, int value); // 0x007379BC-0x00737B38
	public void TrackEvent(string category, string keyValueData); // 0x0073006C-0x00730170
	public void TrackFinishLevel(string level); // 0x00737B38-0x00737C10
	public void TrackFinishAchievement(string achievement); // 0x00737C10-0x00737CE8
	public void TrackFinishTutorial(string tutorial); // 0x00737CE8-0x00737DC0
	public void Rate(); // 0x0072C99C-0x0072CAC4
	public void ShowNativeAd(string tag, int yPercent); // 0x00737DC0-0x00737EDC
	public bool ShowNativeAd(string tag, int xPixel, int yPixel, string configJson); // 0x00737EDC-0x00738080
	public bool ShowNativeAdWithFrame(string tag, float xPixel, float yPixel, float width, float height, string configJson); // 0x00738080-0x007382B4
	public void CloseNativeAd(string tag); // 0x007382B4-0x0073838C
	public void HideNativeAd(string tag); // 0x0073838C-0x00738464
	public bool HasNativeAd(string tag); // 0x00738464-0x00738548
	public void ShowDeliciousIconAd(float x, float y, float w, float h, string configJson); // 0x00738548-0x00738750
	public void CloseDeliciousIconAd(); // 0x00738750-0x00738850
	public void ShowDeliciousBannerAd(float x, float y, float w, float h, string configJson); // 0x00738850-0x00738A58
	public void CloseDeliciousBannerAd(); // 0x00738A58-0x00738B58
	public void ShowDeliciousVideoAd(string configJson); // 0x00738B58-0x00738C30
	public bool HasDeliciousAd(); // 0x00738C30-0x00738D3C
	public void Login(); // 0x00738D3C-0x00738E3C
	public bool IsLogin(); // 0x00738E3C-0x00738F48
	public void Logout(); // 0x00738F48-0x00739048
	public void Invite(); // 0x00739048-0x00739148
	public void Challenge(string title, string message); // 0x00739148-0x0073924C
	public string Me(); // 0x0073924C-0x00739358
	public string GetFriends(); // 0x00739358-0x00739464
	public void Like(); // 0x00739464-0x00739564
	public string GetMePictureURL(); // 0x00739564-0x00739690
	public string GetPaymentDatas(); // 0x00739690-0x0073979C
	public string GetPaymentData(int billingId); // 0x0073979C-0x007398A0
	public bool IsPaymentValid(); // 0x007398A0-0x007399AC
	public string GetConfig(int configId); // 0x007399AC-0x00739AB0
	public string CacheUrl(string url); // 0x00739AB0-0x00739B94
	public void CacheUrl(int tag, string url); // 0x00739B94-0x00739CB4
	public bool HasApp(string packageName); // 0x00739CB4-0x00739D98
	public void LaunchApp(string packageName); // 0x00739D98-0x00739E70
	public void GetApp(string packageName); // 0x00739E70-0x00739F48
	public string GetConfig(string packageName, int configId); // 0x00739F48-0x0073A07C
	public void Alert(string title, string message); // 0x0073A07C-0x0073A1A8
	public void Toast(string message); // 0x0073A1A8-0x0073A280
	public bool IsNetworkConnected(); // 0x0073A280-0x0073A38C
	public bool HasGDPR(); // 0x0073A38C-0x0073A498
	public void ResetGDPR(); // 0x0073A498-0x0073A598
	public void Suport(string email, string data); // 0x0073A598-0x0073A69C
	public void PushNotification(string key, string title, string content, int pushTime, bool localTimeZone, string fbIds, string uuids, string topics, int iosBadge, bool useSound, string soundName, string userInfo); // 0x0073A69C-0x0073A9D4
	public void PushLocalNotification(string key, string title, string content, int pushTime, int interval, bool useSound, string soundName, string userInfo); // 0x0073A9D4-0x0073AC44
	public void CancelLocalMessage(string key); // 0x0073AC44-0x0073AD1C
	public string EncodeParams(string dataStr); // 0x0073AD1C-0x0073AE00
	public int GetRemoteConfigInt(string remoteKey); // 0x0073AE00-0x0073AEE4
	public long GetRemoteConfigLong(string remoteKey); // 0x0073AEE4-0x0073AFC8
	public double GetRemoteConfigDouble(string remoteKey); // 0x0073AFC8-0x0073B0AC
	public bool GetRemoteConfigBoolean(string remoteKey); // 0x0073B0AC-0x0073B190
	public string GetRemoteConfigString(string remoteKey); // 0x0073B190-0x0073B274
	public void SetUserTag(string tag); // 0x0073B274-0x0073B34C
	public void SetUserProperty(string key, string value); // 0x0073B34C-0x0073B450
	public void UM_setPlayerLevel(int level); // 0x0073B450-0x0073B53C
	public void UM_onEvent(string eventId); // 0x0073B53C-0x0073B614
	public void UM_onEvent(string eventId, string eventLabel); // 0x0073B614-0x0073B718
	public void UM_onEventValue(string eventId, Dictionary<string, string> mapStr); // 0x0073B718-0x0073BBE8
	public void UM_onPageStart(string pageName); // 0x0073BBE8-0x0073BCC0
	public void UM_onPageEnd(string pageName); // 0x0073BCC0-0x0073BD98
	public void UM_startLevel(string level); // 0x0073BD98-0x0073BE70
	public void UM_failLevel(string level); // 0x0073BE70-0x0073BF48
	public void UM_finishLevel(string level); // 0x0073BF48-0x0073C020
	public void UM_pay(double money, string itemName, int number, double price); // 0x0073C020-0x0073C1D8
	public void UM_buy(string itemName, int count, double price); // 0x0073C1D8-0x0073C344
	public void UM_use(string itemName, int number, double price); // 0x0073C344-0x0073C4B0
	public void UM_bonus(string itemName, int number, double price, int trigger); // 0x0073C4B0-0x0073C664
	public bool IsGoogleLogin(); // 0x0073C664-0x0073C770
	public void SilentLoginGoogle(); // 0x0073C770-0x0073C870
	public void LoginGoogle(); // 0x0073C870-0x0073C970
	public void LogoutGoogle(); // 0x0073C970-0x0073CA70
	public void UpdateGoogleLeaderBoard(string leaderBoardId, long value); // 0x0073CA70-0x0073CB8C
	public void ShowGoogleLeaderBoards(); // 0x0073CB8C-0x0073CC8C
	public void ShowGoogleLeaderBoards(string leaderBoardId); // 0x0073CC8C-0x0073CD64
	public void UpdateGoogleAchievement(string achievementId, int step); // 0x0073CD64-0x0073CE80
	public void ShowGoogleAchievements(); // 0x0073CE80-0x0073CFA8
	public string GetMeFirstName(); // 0x0073CFA8-0x0073CFF0
	public string GetMeLastName(); // 0x0073CFF0-0x0073D038
	public string GetMeId(); // 0x0073D038-0x0073D080
	public string GetMeName(); // 0x0073D080-0x0073D0C8
	public void FetchFriends(bool invitable); // 0x0073D0C8-0x0073D0CC
	public void FetchScores(); // 0x0073D0CC-0x0073D0D0
	public void Share(string contentURL, string tag, string quote); // 0x0073D0D0-0x0073D0D4
	public void RestorePayments(); // 0x0073D0D4-0x0073D0D8
	public void SdkLog(string message); // 0x0073D0D8-0x0073D0DC
	public void LoadAd(string tag); // 0x0073D0DC-0x0073D0E0
	public void ShowPopupIconAd(); // 0x0073D0E0-0x0073D0E4
	public string GetPushData(); // 0x0073D0E4-0x0073D12C
	public void DownloadFile(string url, Action<string, WWW> resultEvent); // 0x0073D12C-0x0073D148
	public void LoadLocalFile(string filePath, Action<string, WWW> resultEvent); // 0x0073D148-0x0073D164
	public static double GetCurrentTimeInMills(); // 0x007367B4-0x00736870
	public static string CalculateMD5Hash(string input); // 0x0073D164-0x0073D3E0
}

public class RiseSdkListener : MonoBehaviour // TypeDefIndex: 3658
{
	// Fields
	[CompilerGenerated] // 0x005180F0-0x00518100
	private static Action<RiseSdk.PaymentResult, int> OnPaymentEvent; // 0x00
	[CompilerGenerated] // 0x00518100-0x00518110
	private static Action<RiseSdk.SnsEventType, int> OnSNSEvent; // 0x08
	[CompilerGenerated] // 0x00518110-0x00518120
	private static Action<bool, int, string> OnCacheUrlResult; // 0x10
	[CompilerGenerated] // 0x00518120-0x00518130
	private static Action<bool, bool, string, string> OnLeaderBoardEvent; // 0x18
	[CompilerGenerated] // 0x00518130-0x00518140
	private static Action<int, bool, string> OnReceiveServerResult; // 0x20
	[CompilerGenerated] // 0x00518140-0x00518150
	private static Action<string> OnReceivePaymentsPrice; // 0x28
	[CompilerGenerated] // 0x00518150-0x00518160
	private static Action<string> OnReceiveServerExtra; // 0x30
	[CompilerGenerated] // 0x00518160-0x00518170
	private static Action<string> OnReceiveNotificationData; // 0x38
	[CompilerGenerated] // 0x00518170-0x00518180
	private static Action<RiseSdk.AdEventType, int, string, int> OnAdEvent; // 0x40
	[CompilerGenerated] // 0x00518180-0x00518190
	private static Func<bool> OnResumeAdEvent; // 0x48
	[CompilerGenerated] // 0x00518190-0x005181A0
	private static Action<RiseSdk.GoogleEventType> OnSilentLoginGoogleEvent; // 0x50
	[CompilerGenerated] // 0x005181A0-0x005181B0
	private static Action<RiseSdk.GoogleEventType> OnLoginGoogleEvent; // 0x58
	[CompilerGenerated] // 0x005181B0-0x005181C0
	private static Action<RiseSdk.GoogleEventType> OnLogoutGoogleEvent; // 0x60
	[CompilerGenerated] // 0x005181C0-0x005181D0
	private static Action<RiseSdk.GoogleEventType, string> OnUpdateLeaderBoardEvent; // 0x68
	[CompilerGenerated] // 0x005181D0-0x005181E0
	private static Action<RiseSdk.GoogleEventType, string> OnUpdateAchievementEvent; // 0x70
	private static RiseSdkListener _instance; // 0x78
	private float checkTimer; // 0x18
	public static bool signatureCheckOk; // 0x80

	// Properties
	public static RiseSdkListener Instance { get; } // 0x006B37B4-0x006B39F4 

	// Events
	public static event Action<RiseSdk.PaymentResult, int> OnPaymentEvent {
		add; // 0x006B5FD4-0x006B60C0
		remove; // 0x006B60C0-0x006B61AC
	}
	public static event Action<RiseSdk.SnsEventType, int> OnSNSEvent {
		add; // 0x006B61AC-0x006B629C
		remove; // 0x006B629C-0x006B638C
	}
	public static event Action<bool, int, string> OnCacheUrlResult {
		add; // 0x006B638C-0x006B647C
		remove; // 0x006B647C-0x006B656C
	}
	public static event Action<bool, bool, string, string> OnLeaderBoardEvent {
		add; // 0x006B656C-0x006B665C
		remove; // 0x006B665C-0x006B674C
	}
	public static event Action<int, bool, string> OnReceiveServerResult {
		add; // 0x006B674C-0x006B683C
		remove; // 0x006B683C-0x006B692C
	}
	public static event Action<string> OnReceivePaymentsPrice {
		add; // 0x006B692C-0x006B6A1C
		remove; // 0x006B6A1C-0x006B6B0C
	}
	public static event Action<string> OnReceiveServerExtra {
		add; // 0x006B6B0C-0x006B6BFC
		remove; // 0x006B6BFC-0x006B6CEC
	}
	public static event Action<string> OnReceiveNotificationData {
		add; // 0x006B6CEC-0x006B6DDC
		remove; // 0x006B6DDC-0x006B6ECC
	}
	public static event Action<RiseSdk.AdEventType, int, string, int> OnAdEvent {
		add; // 0x006B6ECC-0x006B6FBC
		remove; // 0x006B6FBC-0x006B70AC
	}
	public static event Func<bool> OnResumeAdEvent {
		add; // 0x006B70AC-0x006B719C
		remove; // 0x006B719C-0x006B728C
	}
	public static event Action<RiseSdk.GoogleEventType> OnSilentLoginGoogleEvent {
		add; // 0x006B728C-0x006B737C
		remove; // 0x006B737C-0x006B746C
	}
	public static event Action<RiseSdk.GoogleEventType> OnLoginGoogleEvent {
		add; // 0x006B746C-0x006B755C
		remove; // 0x006B755C-0x006B764C
	}
	public static event Action<RiseSdk.GoogleEventType> OnLogoutGoogleEvent {
		add; // 0x006B764C-0x006B773C
		remove; // 0x006B773C-0x006B782C
	}
	public static event Action<RiseSdk.GoogleEventType, string> OnUpdateLeaderBoardEvent {
		add; // 0x006B782C-0x006B791C
		remove; // 0x006B791C-0x006B7A0C
	}
	public static event Action<RiseSdk.GoogleEventType, string> OnUpdateAchievementEvent {
		add; // 0x006B7A0C-0x006B7AFC
		remove; // 0x006B7AFC-0x006B7BEC
	}

	// Constructors
	public RiseSdkListener(); // 0x006BB028-0x006BB030
	static RiseSdkListener(); // 0x006BB030-0x006BB034

	// Methods
	private void OnApplicationPause(bool pauseStatus); // 0x006B7BEC-0x006B7C70
	private void OnApplicationFocus(bool focusStatus); // 0x006B7C70-0x006B7D40
	private void OnApplicationQuit(); // 0x006B7DF8-0x006B7E7C
	private void Awake(); // 0x006B7E7C-0x006B7EEC
	private static extern int E77ITgnNHHS(IntPtr ptr, IntPtr obj); // 0x006B7EEC-0x006B7F94
	private void Update(); // 0x006B7F94-0x006B80A8
	private void Check(); // 0x006B80A8-0x006B84B0
	private bool onResumeAd(); // 0x006B7D40-0x006B7DF8
	public void onPaymentSuccess(string billId); // 0x006B84B0-0x006B85C4
	public void onPaymentFail(string billId); // 0x006B85C4-0x006B86D8
	public void onPaymentCanceled(string billId); // 0x006B86D8-0x006B87EC
	public void onPaymentSystemError(string data); // 0x006B87EC-0x006B8918
	public void onPaymentSystemValid(string data); // 0x006B8918-0x006B8A48
	public void onReceiveBillPrices(string data); // 0x006B8A48-0x006B8B44
	public void onReceiveLoginResult(string result); // 0x006B8B44-0x006B8C60
	public void onReceiveInviteResult(string result); // 0x006B8C60-0x006B8D7C
	public void onReceiveLikeResult(string result); // 0x006B8D7C-0x006B8E98
	public void onReceiveChallengeResult(string result); // 0x006B8E98-0x006B8FB4
	public void onSubmitSuccess(string leaderBoardTag); // 0x006B8FB4-0x006B90C4
	public void onSubmitFailure(string leaderBoardTag); // 0x006B90C4-0x006B91D4
	public void onLoadSuccess(string data); // 0x006B91D4-0x006B9344
	public void onLoadFailure(string leaderBoardTag); // 0x006B9344-0x006B9454
	public void onServerResult(string data); // 0x006B9454-0x006B9604
	public void onCacheUrlResult(string data); // 0x006B9604-0x006B97F4
	public void onReceiveServerExtra(string data); // 0x006B97F4-0x006B98F0
	public void onReceiveNotificationData(string data); // 0x006B98F0-0x006B99EC
	public void onReceiveReward(string data); // 0x006B99EC-0x006B9C28
	public void onFullAdClosed(string data); // 0x006B9C28-0x006B9DBC
	public void onFullAdClicked(string data); // 0x006B9DBC-0x006B9F50
	public void onAdShow(string data); // 0x006B9F50-0x006BA148
	public void onAdClicked(string data); // 0x006BA148-0x006BA340
	public void onVideoAdClosed(string data); // 0x006BA340-0x006BA4D4
	public void onBannerAdClicked(string data); // 0x006BA4D4-0x006BA668
	public void onCrossAdClicked(string data); // 0x006BA668-0x006BA7FC
	public void onSilentLoginGoogle(string data); // 0x006BA7FC-0x006BA934
	public void onLoginGoogle(string data); // 0x006BA934-0x006BAAB8
	public void onLogoutGoogle(string data); // 0x006BAAB8-0x006BABF0
	public void onUpdateLeaderBoard(string data); // 0x006BABF0-0x006BAE0C
	public void onUpdateAchievement(string data); // 0x006BAE0C-0x006BB028
}

public class LoadScene : MonoBehaviour // TypeDefIndex: 3659
{
	// Fields
	[SerializeField] // 0x005181E0-0x005181F0
	private UILabel loadingLbl; // 0x18
	[SerializeField] // 0x005181F0-0x00518200
	private UISlider slider; // 0x20
	[SerializeField] // 0x00518200-0x00518210
	private UITexture background; // 0x28
	[SerializeField] // 0x00518210-0x00518220
	private GameObject[] Tips; // 0x30
	private AsyncOperation ao; // 0x38
	public static bool finished; // 0x00
	private float progress; // 0x40
	private WaitForEndOfFrame waitForEndOfFrame; // 0x48
	private List<AsyncOperation> aoList; // 0x50

	// Nested types
	[CompilerGenerated] // 0x005142F0-0x00514300
	private sealed class _LoadSceneAsync_d__12 : IEnumerator<object> // TypeDefIndex: 3660
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public LoadScene __4__this; // 0x20
		private int _len_5__2; // 0x28
		private int _isDone_5__3; // 0x2C
		private int _progress_5__4; // 0x30
		private int _displayProgress_5__5; // 0x34
		private int _toProgress_5__6; // 0x38
		private List<AsyncOperation> _aoList_Copy_5__7; // 0x40
		private int _i_5__8; // 0x48
		private int _max_5__9; // 0x4C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525F74-0x00525F84 */ get; } // 0x006F5C7C-0x006F5C84 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525F94-0x00525FA4 */ get; } // 0x006F5CE8-0x006F5CF0 

		// Constructors
		[DebuggerHidden] // 0x00525F54-0x00525F64
		public _LoadSceneAsync_d__12(int __1__state); // 0x006F51CC-0x006F51F8

		// Methods
		[DebuggerHidden] // 0x00525F64-0x00525F74
		void IDisposable.Dispose(); // 0x006F539C-0x006F53A0
		private bool MoveNext(); // 0x006F53A0-0x006F5C7C
		[DebuggerHidden] // 0x00525F84-0x00525F94
		void IEnumerator.Reset(); // 0x006F5C84-0x006F5CE8
	}

	[CompilerGenerated] // 0x00514300-0x00514310
	private sealed class _ShowLoadingTips_d__13 : IEnumerator<object> // TypeDefIndex: 3661
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public LoadScene __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00525FC4-0x00525FD4 */ get; } // 0x006F5DB0-0x006F5DB8 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00525FE4-0x00525FF4 */ get; } // 0x006F5E1C-0x006F5E24 

		// Constructors
		[DebuggerHidden] // 0x00525FA4-0x00525FB4
		public _ShowLoadingTips_d__13(int __1__state); // 0x006F51F8-0x006F5224

		// Methods
		[DebuggerHidden] // 0x00525FB4-0x00525FC4
		void IDisposable.Dispose(); // 0x006F5CF0-0x006F5CF4
		private bool MoveNext(); // 0x006F5CF4-0x006F5DB0
		[DebuggerHidden] // 0x00525FD4-0x00525FE4
		void IEnumerator.Reset(); // 0x006F5DB8-0x006F5E1C
	}

	// Constructors
	public LoadScene(); // 0x006F5308-0x006F5398
	static LoadScene(); // 0x006F5398-0x006F539C

	// Methods
	private void OnEnable(); // 0x006F4FFC-0x006F509C
	private void Awake(); // 0x006F509C-0x006F50A0
	private void Start(); // 0x006F50A0-0x006F50E4
	[IteratorStateMachine] // 0x0051FCC0-0x0051FD24
	private IEnumerator LoadSceneAsync(); // 0x006F5158-0x006F51CC
	[IteratorStateMachine] // 0x0051FD24-0x0051FD88
	private IEnumerator ShowLoadingTips(); // 0x006F50E4-0x006F5158
	private void ShowTip(int showid); // 0x006F5224-0x006F52A8
	private void GetABscene(); // 0x006F52A8-0x006F5308
}

public class TrackSceneManager // TypeDefIndex: 3662
{
	// Nested types
	[CompilerGenerated] // 0x00514310-0x00514320
	private sealed class _LoadSceneAsync_d__0 : IEnumerator<object> // TypeDefIndex: 3663
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public string sceneName; // 0x20
		public LoadSceneMode mode; // 0x28
		public Action update; // 0x30
		public Action finish; // 0x38
		private AsyncOperation _ao_5__2; // 0x40

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526014-0x00526024 */ get; } // 0x007B8708-0x007B8710 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526034-0x00526044 */ get; } // 0x007B8774-0x007B877C 

		// Constructors
		[DebuggerHidden] // 0x00525FF4-0x00526004
		public _LoadSceneAsync_d__0(int __1__state); // 0x007B8564-0x007B8590

		// Methods
		[DebuggerHidden] // 0x00526004-0x00526014
		void IDisposable.Dispose(); // 0x007B864C-0x007B8650
		private bool MoveNext(); // 0x007B8650-0x007B8708
		[DebuggerHidden] // 0x00526024-0x00526034
		void IEnumerator.Reset(); // 0x007B8710-0x007B8774
	}

	[CompilerGenerated] // 0x00514320-0x00514330
	private sealed class _UnloadSceneAsync_d__1 : IEnumerator<object> // TypeDefIndex: 3664
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public string sceneName; // 0x20
		public Action update; // 0x28
		public Action finish; // 0x30
		private AsyncOperation _ao_5__2; // 0x38

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526064-0x00526074 */ get; } // 0x007B8834-0x007B883C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526084-0x00526094 */ get; } // 0x007B88A0-0x007B88A8 

		// Constructors
		[DebuggerHidden] // 0x00526044-0x00526054
		public _UnloadSceneAsync_d__1(int __1__state); // 0x007B8618-0x007B8644

		// Methods
		[DebuggerHidden] // 0x00526054-0x00526064
		void IDisposable.Dispose(); // 0x007B877C-0x007B8780
		private bool MoveNext(); // 0x007B8780-0x007B8834
		[DebuggerHidden] // 0x00526074-0x00526084
		void IEnumerator.Reset(); // 0x007B883C-0x007B88A0
	}

	// Constructors
	public TrackSceneManager(); // 0x007B8644-0x007B864C

	// Methods
	[IteratorStateMachine] // 0x0051FD88-0x0051FDEC
	public static IEnumerator LoadSceneAsync(string sceneName, LoadSceneMode mode, Action update, Action finish); // 0x007B84CC-0x007B8564
	[IteratorStateMachine] // 0x0051FDEC-0x0051FE50
	public IEnumerator UnloadSceneAsync(string sceneName, Action update, Action finish); // 0x007B8590-0x007B8618
}

public class LotteryHelper : MonoBehaviour // TypeDefIndex: 3665
{
	// Fields
	[SerializeField] // 0x00518220-0x00518230
	private UISprite tip; // 0x18
	[SerializeField] // 0x00518230-0x00518240
	private UILabel lbl; // 0x20
	[SerializeField] // 0x00518240-0x00518250
	private int interval; // 0x28
	private int frame; // 0x2C

	// Constructors
	public LotteryHelper(); // 0x006FB154-0x006FB15C

	// Methods
	private void OnEnable(); // 0x006FAFCC-0x006FB0A4
	private void Update(); // 0x006FB0A4-0x006FB154
}

public class MovingWood : BaseO // TypeDefIndex: 3666
{
	// Fields
	private static CharacterController characterController; // 0x00
	private Game game; // 0x18
	private bool isPaused; // 0x20
	private Transform train; // 0x28
	private Vector3 OldPos; // 0x30
	public float triggerDistance; // 0x3C
	public float startDistance; // 0x40
	public float backDistance; // 0x44
	public float a; // 0x48
	private float TriggerZ; // 0x4C
	private float TragetZ; // 0x50
	private float EndZ; // 0x54
	private float movetime; // 0x58

	// Properties
	private bool ForwardZ { get; } // 0x00892D0C-0x00892D3C 
	private float ForwardDir { get; } // 0x00892D3C-0x00892D98 

	// Constructors
	public MovingWood(); // 0x008934C4-0x008934D4

	// Methods
	protected override void Awake(); // 0x00892D98-0x00892E7C
	private void HandleOnPauseChange(bool pause); // 0x00892EEC-0x00892EF8
	private void Init(); // 0x00892E7C-0x00892EEC
	public override void OnActivate(); // 0x00892EF8-0x00893130
	public override void OnDeactivate(); // 0x00893130-0x008932C0
	public void Update(); // 0x008932C0-0x008934C4
}

public class Node // TypeDefIndex: 3667
{
	// Fields
	private Dictionary<GameObject, SpawnUpgrade> spawnUpgrades; // 0x10
	private Dictionary<GameObject, SelectorOffset> selectorOffsets; // 0x18
	private Dictionary<GameObject, Randomizer> randomizers; // 0x20

	// Nested types
	private struct GameObjectWrapper // TypeDefIndex: 3668
	{
		// Fields
		public GameObject GameObject; // 0x00
		public float z; // 0x08

		// Properties
		public float Z { get; } // 0x0058019C-0x005801E8 

		// Constructors
		public GameObjectWrapper(GameObject gameObject); // 0x00580194-0x0058019C
	}

	private struct SelectorWrapper // TypeDefIndex: 3669
	{
		// Fields
		public GameObject GameObject; // 0x00
		public float z; // 0x08
		public Randomizer Selector; // 0x10

		// Properties
		public float Z { get; } // 0x005801F0-0x00580394 

		// Constructors
		public SelectorWrapper(Randomizer selector, GameObject gameObject); // 0x005801E8-0x005801F0
	}

	[CompilerGenerated] // 0x00514330-0x00514340
	private sealed class __c__DisplayClass4_0 // TypeDefIndex: 3670
	{
		// Fields
		public int layer1; // 0x10
		public int layer2; // 0x14

		// Constructors
		public __c__DisplayClass4_0(); // 0x00699C48-0x00699C50

		// Methods
		internal int _PerformRecursiveRandomizer_b__0(GameObjectWrapper x, GameObjectWrapper y); // 0x00699C50-0x00699CFC
	}

	[Serializable]
	[CompilerGenerated] // 0x00514340-0x00514350
	private sealed class __c // TypeDefIndex: 3671
	{
		// Fields
		public static readonly __c __9; // 0x00
		public static Comparison<SelectorWrapper> __9__4_1; // 0x08

		// Constructors
		static __c(); // 0x00699BAC-0x00699C10
		public __c(); // 0x00699C10-0x00699C18

		// Methods
		internal int _PerformRecursiveRandomizer_b__4_1(SelectorWrapper x, SelectorWrapper y); // 0x00699C18-0x00699C48
	}

	[CompilerGenerated] // 0x00514350-0x00514360
	private sealed class _PerformRecursiveRandomizer_d__4 : IEnumerator<object> // TypeDefIndex: 3672
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public GameObject parent; // 0x20
		public bool sortSpawnUpgrades; // 0x28
		public Node __4__this; // 0x30
		private List<SelectorWrapper> _spawnPoints_5__2; // 0x38
		private List<GameObject> _objectsToVisit_5__3; // 0x40
		private List<GameObjectWrapper> _enumrator_5__4; // 0x48

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005260B4-0x005260C4 */ get; } // 0x0069A718-0x0069A720 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005260D4-0x005260E4 */ get; } // 0x0069A784-0x0069A79C 

		// Constructors
		[DebuggerHidden] // 0x00526094-0x005260A4
		public _PerformRecursiveRandomizer_d__4(int __1__state); // 0x00699AC0-0x00699AEC

		// Methods
		[DebuggerHidden] // 0x005260A4-0x005260B4
		void IDisposable.Dispose(); // 0x00699CFC-0x00699D18
		private bool MoveNext(); // 0x00699D70-0x0069A718
		private void __m__Finally1(); // 0x00699D18-0x00699D70
		[DebuggerHidden] // 0x005260C4-0x005260D4
		void IEnumerator.Reset(); // 0x0069A720-0x0069A784
	}

	// Constructors
	public Node(); // 0x00699AEC-0x00699BAC

	// Methods
	public void Initialize(GameObject parent); // 0x006997E4-0x00699A30
	[IteratorStateMachine] // 0x0051FE50-0x0051FEB4
	public IEnumerator PerformRecursiveRandomizer(GameObject parent, bool sortSpawnUpgrades = true /* Metadata: 0x001F5BC0 */); // 0x00699A30-0x00699AC0
}

public class Notification : MonoBehaviour // TypeDefIndex: 3673
{
	// Fields
	[SerializeField] // 0x00518250-0x00518260
	private UISprite[] dots; // 0x18
	[SerializeField] // 0x00518260-0x00518270
	private int[] ids; // 0x20

	// Constructors
	public Notification(); // 0x0069C540-0x0069C548

	// Methods
	public int[] GetIds(); // 0x0069C4D4-0x0069C4DC
	public void SetNotification(int id, bool value); // 0x0069C4DC-0x0069C540
}

public class NotificationController : MonoBehaviour // TypeDefIndex: 3674
{
	// Fields
	public Environment environment; // 0x18
	public static NotificationController Instance; // 0x00
	private bool firstCheckPush; // 0x20
	public static string[] PushIosMessage; // 0x08

	// Properties
	public static bool TodayPushed { get; set; } // 0x0069D66C-0x0069D6C8 0x0069D6C8-0x0069D728
	private bool IsUpgradePropNoneedPush { get; } // 0x0069D5F8-0x0069D66C 

	// Constructors
	public NotificationController(); // 0x0069DCF4-0x0069DCFC
	static NotificationController(); // 0x0069DCFC-0x0069DD60

	// Methods
	private void Awake(); // 0x0069C548-0x0069C710
	public bool DailyLandingPayOut(); // 0x0069CC5C-0x0069CCE4
	public bool CanShowCharacterTip(); // 0x0069CE7C-0x0069CF20
	private bool TopRunHasUp(); // 0x0069D2C8-0x0069D2D0
	private bool UpgradeCanBuy(); // 0x0069D2D0-0x0069D2D8
	private bool Lucky(); // 0x0069D2D8-0x0069D34C
	public void FirstCheckPush(); // 0x0069D34C-0x0069D5F8
	private void PushLocalNotification(); // 0x0069D728-0x0069DBCC
	private void SetIosPushMessage(); // 0x0069C710-0x0069CB48
	public static string GetPushMessage(); // 0x0069DBCC-0x0069DCF4
}

public class PushDataItem // TypeDefIndex: 3675
{
	// Fields
	public string pushkey; // 0x10
	public string title; // 0x18
	public string content; // 0x20
	public DateTime pushTime; // 0x28

	// Constructors
	public PushDataItem(); // 0x007290B0-0x007290B8
}

public enum PushLocalType // TypeDefIndex: 3676
{
	None = 0,
	PushWeekly = 1,
	PushBattlePass = 2,
	PushUpgradeProp = 3,
	PushSkills = 4
}

public class NotificationsObserver // TypeDefIndex: 3677
{
	// Fields
	private static NotificationsObserver _instance; // 0x00
	private Dictionary<NotificationType, NotifucationInfo> notificationData; // 0x10
	public List<Notification> notifications; // 0x18

	// Properties
	public static NotificationsObserver Instance { get; } // 0x0069CB48-0x0069CBC4 

	// Constructors
	private NotificationsObserver(); // 0x0069DD60-0x0069DEC4

	// Methods
	public void RegisterUpdateNotificationValue(NotificationType type, Func<bool> func); // 0x0069CBC4-0x0069CC5C
	public void RegisterNotificationAction(GameObject go); // 0x0069DEF0-0x0069DFEC
	public void NotifyNotificationDataChange(NotificationType type); // 0x0069DFEC-0x0069E018
	public void NotifyNotificationDataChange(NotificationType type, bool value); // 0x0069E16C-0x0069E19C
	public void NotifyNotificationDataChange(); // 0x0069E238-0x0069E274
	private void RefreshNotificationListShow(); // 0x0069E274-0x0069E318
	private void RefreshNotificationListShow(NotificationType type); // 0x0069E0B8-0x0069E16C
	private void RefreshOneNotificationShow(Notification notificaiton); // 0x0069E318-0x0069E3A4
	private void RefreshOneNotificationShow(NotificationType type, Notification notificaiton); // 0x0069E3A4-0x0069E460
	private void SetNotificationID(Notification notificaiton, int id, int order); // 0x0069E460-0x0069E4F8
	private bool GetValueByIndex(int index); // 0x0069E4F8-0x0069E4FC
	private bool GetValueByNotificationType(NotificationType type); // 0x0069E4FC-0x0069E5A0
	private void RefreshNotificationData(NotificationType type); // 0x0069E018-0x0069E0B8
	private void SetNotificationInfoValue(NotificationType type, bool value); // 0x0069E19C-0x0069E238
}

public enum NotificationType // TypeDefIndex: 3678
{
	AchiementFinished = 0,
	DialyLandingReward = 1,
	TopRunUp = 2,
	CharacterCanUnlock = 3,
	None = 4
}

public class NotifucationInfo // TypeDefIndex: 3679
{
	// Fields
	public Func<bool> updateNotificationValue; // 0x10
	public bool value; // 0x18

	// Constructors
	public NotifucationInfo(); // 0x0069DEC4-0x0069DEF0

	// Methods
	public void SetValue(); // 0x0069E5A0-0x0069E600
}

public class OnlyOneTheme : MonoBehaviour // TypeDefIndex: 3680
{
	// Fields
	public Color fogColor; // 0x18
	public Color fogGradientTop; // 0x28
	public Color fogGradientBottom; // 0x38
	public Color fogSilhouetteColor; // 0x48
	public float fogGradientOffset; // 0x58
	public Material glowGold; // 0x60
	public Color glowGoldColor; // 0x68
	public float glowGoldFalloff; // 0x78
	private CameraCulling cameraCulling; // 0x80
	private static OnlyOneTheme _instance; // 0x00

	// Constructors
	public OnlyOneTheme(); // 0x006A0100-0x006A0110

	// Methods
	private void Awake(); // 0x0069FDF4-0x006A0064
	private void SetShaderStates(); // 0x006A0064-0x006A00FC
	private void UIScreenController_OnApplicationResumed(); // 0x006A00FC-0x006A0100
}

public class PaticlesHelper : MonoBehaviour // TypeDefIndex: 3681
{
	// Fields
	private ParticleSystem[] particles; // 0x18
	private ParticleSystem.MinMaxCurve[] rates; // 0x20
	[CompilerGenerated] // 0x00518270-0x00518280
	private bool _IsPlaying_k__BackingField; // 0x28

	// Properties
	public bool IsPlaying { [CompilerGenerated] /* 0x0051FEB4-0x0051FEC4 */ get; [CompilerGenerated] /* 0x0051FEC4-0x0051FED4 */ private set; } // 0x006A5690-0x006A5698 0x006A5698-0x006A56A4

	// Constructors
	public PaticlesHelper(); // 0x006A5BC8-0x006A5BD0

	// Methods
	private void Awake(); // 0x006A56A4-0x006A57E4
	public void Play(); // 0x006A57E4-0x006A5878
	public void Stop(); // 0x006A5878-0x006A5908
	public void SprintStop(); // 0x006A5908-0x006A59D4
	public void SprintPlay(); // 0x006A59D4-0x006A5AA4
	public void SetEmission(float rate); // 0x006A5AA4-0x006A5BC8
}

public class PlayableEndEvent : PlayableBehaviour // TypeDefIndex: 3682
{
	// Constructors
	public PlayableEndEvent(); // 0x006A8224-0x006A822C

	// Methods
	public override void OnGraphStop(Playable playable); // 0x006A81F8-0x006A8224
}

public class PlayableEventAsset_End : PlayableAsset // TypeDefIndex: 3683
{
	// Constructors
	public PlayableEventAsset_End(); // 0x006A84C8-0x006A84D0

	// Methods
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner); // 0x006A8414-0x006A84C8
}

public class PlayableEventAsset_Start : PlayableAsset // TypeDefIndex: 3684
{
	// Constructors
	public PlayableEventAsset_Start(); // 0x006A8650-0x006A8658

	// Methods
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner); // 0x006A8594-0x006A8648
}

public class PlayableStartEvent : PlayableBehaviour // TypeDefIndex: 3685
{
	// Constructors
	public PlayableStartEvent(); // 0x006A8648-0x006A8650

	// Methods
	public override void OnGraphStart(Playable playable); // 0x006A8658-0x006A8684
}

public class Playable_OtherCam_Start_Event : PlayableBehaviour // TypeDefIndex: 3686
{
	// Constructors
	public Playable_OtherCam_Start_Event(); // 0x006A8584-0x006A858C

	// Methods
	public override void OnGraphStart(Playable playable); // 0x006A8684-0x006A86B4
	public override void OnGraphStop(Playable playable); // 0x006A86B4-0x006A8784
}

public class PlayableEvent : PlayableBehaviour // TypeDefIndex: 3687
{
	// Constructors
	public PlayableEvent(); // 0x006A8350-0x006A8358

	// Methods
	public override void OnGraphStart(Playable playable); // 0x006A822C-0x006A8258
	public override void OnGraphStop(Playable playable); // 0x006A8258-0x006A8284
	public override void OnBehaviourPlay(Playable playable, FrameData info); // 0x006A8284-0x006A82C8
	public override void OnBehaviourPause(Playable playable, FrameData info); // 0x006A82C8-0x006A830C
	public override void OnBehaviourDelay(Playable playable, FrameData info); // 0x006A830C-0x006A8350
}

public class PlayableEventAsset : PlayableAsset // TypeDefIndex: 3688
{
	// Constructors
	public PlayableEventAsset(); // 0x006A840C-0x006A8414

	// Methods
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner); // 0x006A8358-0x006A840C
}

public class PlayableEventAsset_OtherCam_Start : PlayableAsset // TypeDefIndex: 3689
{
	// Constructors
	public PlayableEventAsset_OtherCam_Start(); // 0x006A858C-0x006A8594

	// Methods
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner); // 0x006A84D0-0x006A8584
}

public class ActiveProp // TypeDefIndex: 3690
{
	// Fields
	public PropType type; // 0x10
	public float timeLeft; // 0x14
	public float timeActivated; // 0x18

	// Constructors
	public ActiveProp(); // 0x00709194-0x0070919C
}

public enum PropType // TypeDefIndex: 3691
{
	helmet = 0,
	headstart500 = 1,
	headstart2000 = 2,
	chest = 3,
	superchest = 4,
	flypack = 5,
	supershoes = 6,
	coinmagnet = 7,
	doubleMultiplier = 8,
	skiptask1 = 9,
	skiptask2 = 10,
	skiptask3 = 11,
	doubleCoins = 12,
	scorebooster = 13,
	easteregg = 14,
	gem = 15,
	springJump = 16,
	boundJump = 17,
	headstartLong = 18,
	headstart = 19,
	mysteryPowerup = 20,
	doubleCoinsMysteryPowerup = 21,
	plusMultiplier = 22,
	shield = 23,
	sprint = 24,
	ChargeEnergy = 25,
	CoinIntensive = 26,
	GemRevive = 27,
	_notset = 28
}

public class AliasMethod // TypeDefIndex: 3692
{
	// Fields
	private double[] probability; // 0x10
	private int[] alias; // 0x18
	private int length; // 0x20
	private System.Random rand; // 0x28

	// Constructors
	public AliasMethod(double[] prob, System.Random rand); // 0x0070B80C-0x0070BBD0

	// Methods
	public int next(); // 0x0070BBD0-0x0070BC84
}

public class AreaMethod // TypeDefIndex: 3693
{
	// Fields
	private double[] probability; // 0x10
	private int length; // 0x18
	private System.Random rand; // 0x20
	private int index; // 0x28

	// Constructors
	public AreaMethod(double[] prob, System.Random random); // 0x00710238-0x007103BC

	// Methods
	public int next(); // 0x007103BC-0x007104A8
}

public class RobberModel : MonoBehaviour // TypeDefIndex: 3694
{
	// Fields
	public bool isUseFul; // 0x18
	public AnimationEvents events; // 0x20
	public Animation anim; // 0x28
	public List<Renderer> robbermesh; // 0x30
	public OnTriggerObject triggerOtherObject; // 0x38
	public RobberTrigger robbertrgger; // 0x40
	public BoxCollider robberhitCollider; // 0x48
	public GameObject aimobj; // 0x50

	// Constructors
	public RobberModel(); // 0x006BB61C-0x006BB624

	// Methods
	private void Awake(); // 0x006BB034-0x006BB1A0
	private void OnEnterRobberHit(Collider other); // 0x006BB1A0-0x006BB2A4
	public void ResetModel(); // 0x006BB36C-0x006BB53C
	public void ShowModel(); // 0x006BB55C-0x006BB61C
	public void SetRobberAim(bool IsShow); // 0x006BB53C-0x006BB55C
}

public class Shaders // TypeDefIndex: 3695
{
	// Fields
	public readonly int MainTex; // 0x10
	public readonly int ClipTex; // 0x14
	public readonly int MainColor; // 0x18
	public readonly int Color; // 0x1C
	public readonly int TintColor; // 0x20
	public readonly int Falloff; // 0x24
	public readonly int TintValue; // 0x28
	public readonly int Factor; // 0x2C
	public readonly int SkyGradientTopColor; // 0x30
	public readonly int SkyGradientBottomColor; // 0x34
	public readonly int FogSilhouetteColor; // 0x38
	public readonly int SkyGradientOffset; // 0x3C
	public readonly int Fade; // 0x40
	public readonly int ShiftColor; // 0x44
	public readonly int FlowLightOffset; // 0x48
	public readonly int IsOpenFlowLight; // 0x4C
	public readonly int WidthRate; // 0x50
	public readonly int HeightRate; // 0x54
	public readonly int OffsetXRate; // 0x58
	public readonly int OffsetYRate; // 0x5C
	public readonly int ClipSharpness; // 0x60
	public readonly int ClipUp; // 0x64
	public readonly int ClipDown; // 0x68
	public readonly int Alpha; // 0x6C
	private static Shaders _instance; // 0x00

	// Properties
	public static Shaders Instance { get; } // 0x006C6F90-0x006C700C 

	// Constructors
	public Shaders(); // 0x006C700C-0x006C7294
}

public class AchievementCell : MonoBehaviour // TypeDefIndex: 3696
{
	// Fields
	[SerializeField] // 0x00518280-0x00518290
	private UISprite fillWhilte; // 0x18
	[SerializeField] // 0x00518290-0x005182A0
	private UISprite fillGreen; // 0x20
	[SerializeField] // 0x005182A0-0x005182B0
	private UISprite iconSpr; // 0x28
	[SerializeField] // 0x005182B0-0x005182C0
	private UILabel context; // 0x30
	[SerializeField] // 0x005182C0-0x005182D0
	private UILabel progressLabel; // 0x38
	[SerializeField] // 0x005182D0-0x005182E0
	private GameObject getRewardBtn; // 0x40
	[SerializeField] // 0x005182E0-0x005182F0
	private GameObject hasGetReward; // 0x48
	[SerializeField] // 0x005182F0-0x00518300
	private UISprite getRewardSpr; // 0x50
	[SerializeField] // 0x00518300-0x00518310
	private UILabel getRewardLbl; // 0x58
	[SerializeField] // 0x00518310-0x00518320
	private UISprite rewardIconSpr; // 0x60
	[SerializeField] // 0x00518320-0x00518330
	private UILabel rewardLbl; // 0x68
	[SerializeField] // 0x00518330-0x00518340
	private UISlider progressSlider; // 0x70
	[SerializeField] // 0x00518340-0x00518350
	private BoxCollider bCollider; // 0x78
	[SerializeField] // 0x00518350-0x00518360
	private Color unColor; // 0x80
	[SerializeField] // 0x00518360-0x00518370
	private Color getColor; // 0x90
	private TweenScale ts; // 0xA0
	private int index; // 0xA8

	// Constructors
	public AchievementCell(); // 0x00705E80-0x00705E90

	// Methods
	private void Awake(); // 0x0070542C-0x007054C4
	public void RefreshUI(int index); // 0x007054C4-0x007057EC
	public void RefreshSlider(); // 0x007057EC-0x00705984
	private void ResetBtn(); // 0x00705984-0x00705CC8
	private void OnClick(); // 0x00705CC8-0x00705E80
	[CompilerGenerated] // 0x0051FED4-0x0051FEE4
	private void _OnClick_b__21_0(); // 0x00705E90-0x00705E94
}

public class Achievements // TypeDefIndex: 3697
{
	// Fields
	private static Task[] _achievementArray; // 0x00
	private static AchievementInfo[] _achievementInfos; // 0x08
	private static Achievements _instance; // 0x10
	public static int NUMBER_OF_ACHIEVEMENTS; // 0x18

	// Properties
	public static Task[] achievementArray { get; } // 0x00707318-0x00707380 
	public static AchievementInfo[] achievementInfo { get; } // 0x00707380-0x007073E8 

	// Constructors
	public Achievements(); // 0x007073E8-0x007073F0
	static Achievements(); // 0x007073F0-0x00707444

	// Methods
	public static Task[] LoadFile(); // 0x0070676C-0x00706D4C
	public static void SaveFile(); // 0x00706D4C-0x00706FE8
	public static int getAchievementIndexInArray(TaskType type); // 0x00706FE8-0x00707120
	public static void Init(); // 0x00707120-0x00707318
}

public class AchievementScreen : UIBaseScreen // TypeDefIndex: 3698
{
	// Fields
	[SerializeField] // 0x00518370-0x00518380
	private UILabel titleLbl; // 0x98
	[SerializeField] // 0x00518380-0x00518390
	private UIScrollView scrollView; // 0xA0
	[SerializeField] // 0x00518390-0x005183A0
	private UITable table; // 0xA8
	[SerializeField] // 0x005183A0-0x005183B0
	private GameObject achievementCellPrefab; // 0xB0
	private AchievementCell[] achievementCells; // 0xB8
	private int[] orders; // 0xC0

	// Constructors
	public AchievementScreen(); // 0x00706684-0x0070668C

	// Methods
	public override void Init(); // 0x00705ED4-0x00705EFC
	private void InitCell(); // 0x00705EFC-0x007062A4
	private void RefreshOrder(); // 0x007062A4-0x007064F0
	public int GetState(int index); // 0x007064F0-0x007065CC
	public override void Show(); // 0x007065CC-0x007065FC
	private void RefreshLabel(); // 0x007065FC-0x00706684
}

public class NumberSprite : MonoBehaviour // TypeDefIndex: 3699
{
	// Fields
	[SerializeField] // 0x005183B0-0x005183C0
	private UISprite x; // 0x18
	[SerializeField] // 0x005183C0-0x005183D0
	private UISprite num1; // 0x20
	[SerializeField] // 0x005183D0-0x005183E0
	private UISprite num2; // 0x28
	[SerializeField] // 0x005183E0-0x005183F0
	private UISprite num3; // 0x30

	// Constructors
	public NumberSprite(); // 0x0069EBA4-0x0069EBAC

	// Methods
	public void SetLevelNumber(int number); // 0x0069E600-0x0069EBA4
}

public class Task // TypeDefIndex: 3700
{
	// Fields
	public TaskType type; // 0x10
	public int aim; // 0x14
	public RewardType rewardType; // 0x18
	public int rewardAmount; // 0x1C

	// Constructors
	public Task(); // 0x00FC47A8-0x00FC47B0
	public Task(TaskType type, int aim); // 0x00FC47B0-0x00FC47E8

	// Methods
	public static string ToJson(Task task); // 0x00FC47E8-0x00FC4AE0
	public static Task Parse(string json); // 0x00FC4AE0-0x00FC4E90
}

public struct TaskInfo // TypeDefIndex: 3701
{
	// Fields
	public Task task; // 0x00
	public TaskTemplate template; // 0x08
	public int progress; // 0x10
	public bool complete; // 0x14

	// Constructors
	public TaskInfo(Task task, TaskTemplate template, int progress, bool complete); // 0x00608028-0x00644DC0
}

public class TaskTemplate // TypeDefIndex: 3702
{
	// Fields
	public LanguageKey description; // 0x10
	public LanguageKey descriptionSingle; // 0x14
	public LanguageKey ultraShortDescription; // 0x18
	public LanguageKey ultraShortDescriptionSingle; // 0x1C
	public TaskTarget taskTarget; // 0x20
	public bool singleRun; // 0x24
	public bool completeIfLess; // 0x25
	public bool completeIfEqual; // 0x26

	// Constructors
	public TaskTemplate(); // 0x00FCC3D4-0x00FCC3DC

	// Methods
	public static string ToJson(TaskTemplate template); // 0x00FCB9D4-0x00FCBCC4
	public static TaskTemplate Parse(string json); // 0x00FCBCC4-0x00FCC3D4
}

[Serializable]
public class AchievementInfo // TypeDefIndex: 3703
{
	// Fields
	public string icon; // 0x10
	public RewardType rewardType; // 0x18
	public int rewardAmount; // 0x1C

	// Constructors
	public AchievementInfo(); // 0x00705ECC-0x00705ED4

	// Methods
	public string ToJson(); // 0x00705E94-0x00705E9C
	public AchievementInfo Parse(string json); // 0x00705E9C-0x00705ECC
}

public enum TaskTarget // TypeDefIndex: 3704
{
	none = 0,
	EarnCoin = 1,
	SpendCoin = 2,
	PickupKeys = 3,
	SpendKeys = 4,
	Score = 5,
	NoCoinsWithoutScore = 6,
	NoJumpsWithoutScore = 7,
	NoRollsWithoutScore = 8,
	NoPowerUpsWithoutScore = 9,
	ScoreWithScorebooster = 10,
	ScoreBooster = 11,
	Headstart = 12,
	Helmet = 13,
	HelmetExpire = 14,
	Raft = 15,
	Chestes = 16,
	SuperSneakers = 17,
	Jetpack = 18,
	Magnets = 19,
	DoubleMultiplier = 20,
	Shield = 21,
	Powerups = 22,
	ActivePowerups = 23,
	OneOfEachPowerup = 24,
	DailyQuests = 25,
	DailyQuestInRow = 26,
	Roll = 27,
	RollLeft = 28,
	RollCenter = 29,
	RollRight = 30,
	Jump = 31,
	GuardJump = 32,
	CoinsWithMagnet = 33,
	CoinsWithJetpack = 34,
	CollectCoinsLeftLane = 35,
	CollectCoinsCenterLane = 36,
	CollectCoinsRightLane = 37,
	CollectCoinsWithPowerJumper = 38,
	EarnCoinWithoutTouchingGround = 39,
	GetExactlyAmountOfCoins = 40,
	PickUpPowerJumpers = 41,
	LandOnTrainInRow = 42,
	StayInOneLane = 43,
	CrashBarriers = 44,
	CrashTrains = 45,
	CrashBuses = 46,
	CrashCars = 47,
	CrashFlowerBeds = 48,
	DodgeBarriers = 49,
	JumpBarriers = 50,
	RollUnderBarriers = 51,
	JumpTrain = 52,
	JumpBus = 53,
	JumpCar = 54,
	BumpTrain = 55,
	BumpBush = 56,
	BumpLightSignal = 57,
	BumpBarrier = 58,
	BuyMysterybox = 59,
	HaveUpgrades = 60,
	HaveHeadStartLarge = 61,
	HaveCharacters = 62,
	Symbols = 63,
	ReachTaskSet = 64,
	TaskSet = 65,
	TimeDeath = 66,
	BeatOwnHighscore = 67,
	Meters = 68,
	MetersSlick = 69,
	MetersFrank = 70,
	MetersNijia = 71,
	MetersSpike = 72,
	MetersDarcy = 73,
	MetersExploer = 74,
	MetersPrincess = 75,
	MetersCaesar = 76,
	MetersJack = 77,
	MetersPia = 78,
	MetersAnna = 79,
	MetersSceneMine = 80,
	MetersSceneForest = 81,
	MetersNOdie = 82,
	MetersNOpickupPowerUp = 83,
	PowPropTimes = 84,
	PowPropLevels = 85,
	USEskillTimes = 86,
	UnlockSkinTimes = 87,
	MetersEily = 88,
	MetersKareena = 89,
	MetersSeven = 90,
	MetersSachin = 91
}

public enum TaskType // TypeDefIndex: 3705
{
	none = 0,
	EarnCoin = 1,
	EarnCoinSingleRun = 2,
	SpendCoin = 3,
	PickupKeysSingleRun = 4,
	PickupKeys = 5,
	SpendKeys = 6,
	Score = 7,
	ScoreSingleRun = 8,
	NoCoinsWithoutScore = 9,
	ScoreWithScorebooster = 10,
	NoJumpsWithoutScore = 11,
	NoRollsWithoutScore = 12,
	NoPowerUpsWithoutScore = 13,
	Jetpack = 14,
	JetpackSingleRun = 15,
	SuperSneakers = 16,
	SuperSneakersSingleRun = 17,
	Magnets = 18,
	MagnetsSingleRun = 19,
	Shield = 20,
	ShieldSingleRun = 21,
	Chestes = 22,
	Headstart = 23,
	ScoreBooster = 24,
	Helmet = 25,
	HelmetExpire = 26,
	HelmetExpireSingleRun = 27,
	DoubleMultiplier = 28,
	DoubleMultiplierSingleRun = 29,
	PickUpPowerJumpers = 30,
	PickUpPowerJumpersSingleRun = 31,
	Powerups = 32,
	ActivePowerups = 33,
	OneOfEachPowerup = 34,
	BuyMysterybox = 35,
	HaveUpgrades = 36,
	HaveHeadStartLarge = 37,
	HaveCharacters = 38,
	Symbols = 39,
	Jump = 40,
	JumpSingleRun = 41,
	GuardJump = 42,
	Roll = 43,
	RollSingleRun = 44,
	RollLeft = 45,
	RollCenter = 46,
	RollRight = 47,
	CrashBarriers = 48,
	CrashBarriersSingleRun = 49,
	CrashTrains = 50,
	CrashBuses = 51,
	CrashCars = 52,
	CrashFlowerBeds = 53,
	DodgeBarriers = 54,
	DodgeBarriersSingleRun = 55,
	RollUnderBarriers = 56,
	JumpBarriers = 57,
	JumpTrain = 58,
	JumpTrainSingleRun = 59,
	JumpBus = 60,
	JumpBusSingleRun = 61,
	JumpCar = 62,
	JumpCarSingleRun = 63,
	BumpTrain = 64,
	BumpTrainSingleRun = 65,
	BumpBush = 66,
	BumpLightSignal = 67,
	BumpLightSignalSingleRun = 68,
	BumpBarrier = 69,
	BumpBarrierSingleRun = 70,
	TimeDeath = 71,
	ReachTaskSet = 72,
	TaskSetSingleRun = 73,
	DailyQuests = 74,
	DailyQuestInRow = 75,
	LandOnTrainInRow = 76,
	StayInOneLane = 77,
	BeatOwnHighscore = 78,
	CoinsWithJetpack = 79,
	CoinsWithMagnet = 80,
	CollectCoinsLeftLane = 81,
	CollectCoinsCenterLane = 82,
	CollectCoinsRightLane = 83,
	CollectCoinsWithPowerJumper = 84,
	EarnCoinWithoutTouchingGround = 85,
	GetExactlyAmountOfCoins = 86,
	Meters = 87,
	MetersSingleRun = 88,
	MetersSlick = 89,
	MetersFrank = 90,
	MetersNijia = 91,
	MetersSpike = 92,
	MetersDarcy = 93,
	MetersExploer = 94,
	MetersPrincess = 95,
	MetersCaesar = 96,
	MetersJack = 97,
	MetersPia = 98,
	MetersAnna = 99,
	MetersSceneMine = 100,
	MetersSceneForest = 101,
	MetersNOdie = 102,
	MetersNOpickupPowerUp = 103,
	PowPropTimes = 104,
	PowPropLevels = 105,
	USEskillTimes = 106,
	UnlockSkinTimes = 107,
	MetersEily = 108,
	MetersKareena = 109,
	MetersSachin = 110
}

public class TaskPopup : UIBaseScreen // TypeDefIndex: 3706
{
	// Fields
	[SerializeField] // 0x005183F0-0x00518400
	private TaskList taskList; // 0x98
	[SerializeField] // 0x00518400-0x00518410
	private UILabel titleLabel; // 0xA0
	[SerializeField] // 0x00518410-0x00518420
	private GameObject Close; // 0xA8
	public UISlider levelSlider; // 0xB0
	public UILabel maxLevel; // 0xB8
	public static ShowType curshowType; // 0x00
	public Animator[] TaskChange; // 0xC0
	public GameObject taskon; // 0xC8
	public GameObject weeklyon; // 0xD0
	public GameObject globalon; // 0xD8
	public GameObject taskon_list; // 0xE0
	public GameObject weeklyon_list; // 0xE8
	public GameObject globalon_list; // 0xF0
	public GameObject weeklyshowtip; // 0xF8
	public GameObject globalshowtip; // 0x100
	public static bool showInMoving; // 0x04

	// Nested types
	public enum ShowType // TypeDefIndex: 3707
	{
		Mission = 0,
		Weekly = 1,
		Golbal = 2
	}

	[CompilerGenerated] // 0x00514360-0x00514370
	private sealed class _ShowGameOver_d__14 : IEnumerator<object> // TypeDefIndex: 3708
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public TaskPopup __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526104-0x00526114 */ get; } // 0x00FCB960-0x00FCB968 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526124-0x00526134 */ get; } // 0x00FCB9CC-0x00FCB9D4 

		// Constructors
		[DebuggerHidden] // 0x005260E4-0x005260F4
		public _ShowGameOver_d__14(int __1__state); // 0x00FCB010-0x00FCB03C

		// Methods
		[DebuggerHidden] // 0x005260F4-0x00526104
		void IDisposable.Dispose(); // 0x00FCB48C-0x00FCB490
		private bool MoveNext(); // 0x00FCB490-0x00FCB624
		[DebuggerHidden] // 0x00526114-0x00526124
		void IEnumerator.Reset(); // 0x00FCB968-0x00FCB9CC
	}

	[CompilerGenerated] // 0x00514370-0x00514380
	private sealed class _AutoPayed_d__16 : IEnumerator<object> // TypeDefIndex: 3709
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public TaskPopup __4__this; // 0x20
		private int _i_5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526154-0x00526164 */ get; } // 0x00FCB418-0x00FCB420 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526174-0x00526184 */ get; } // 0x00FCB484-0x00FCB48C 

		// Constructors
		[DebuggerHidden] // 0x00526134-0x00526144
		public _AutoPayed_d__16(int __1__state); // 0x00FCB0B0-0x00FCB0DC

		// Methods
		[DebuggerHidden] // 0x00526144-0x00526154
		void IDisposable.Dispose(); // 0x00FCB2AC-0x00FCB2B0
		private bool MoveNext(); // 0x00FCB2B0-0x00FCB418
		[DebuggerHidden] // 0x00526164-0x00526174
		void IEnumerator.Reset(); // 0x00FCB420-0x00FCB484
	}

	// Constructors
	public TaskPopup(); // 0x00FCB248-0x00FCB2A8
	static TaskPopup(); // 0x00FCB2A8-0x00FCB2AC

	// Methods
	private void OnEnable(); // 0x00FC9FDC-0x00FCA094
	public override void Init(); // 0x00FCA178-0x00FCA1BC
	public void FreshLevel(); // 0x00FCA094-0x00FCA178
	public override void Show(); // 0x00FCA1BC-0x00FCA514
	protected override void AfterShow(); // 0x00FCAF90-0x00FCAF94
	public override void GainFocus(); // 0x00FCAF94-0x00FCAF98
	public override void LooseFocus(); // 0x00FCAF98-0x00FCAF9C
	[IteratorStateMachine] // 0x0051FEE4-0x0051FF48
	private IEnumerator ShowGameOver(); // 0x00FCAF9C-0x00FCB010
	[IteratorStateMachine] // 0x0051FF48-0x0051FFAC
	public IEnumerator AutoPayed(); // 0x00FCB03C-0x00FCB0B0
	private void ShowTaskChange(int idx); // 0x00FCB0DC-0x00FCB174
	public void FreshTip(); // 0x00FCAAEC-0x00FCAC18
	public void ShowMission(); // 0x00FCAC18-0x00FCAD20
	public void ShowWeekly(); // 0x00FCAE58-0x00FCAF90
	public void ShowGlobal(); // 0x00FCAD20-0x00FCAE58
	public override void Hide(); // 0x00FCB174-0x00FCB248
}

public class TasksData // TypeDefIndex: 3710
{
	// Fields
	public static Dictionary<TaskType, TaskTemplate> taskTemplates; // 0x00
	public static Task[][] repeatableTasks; // 0x08
	public static Task[][] singleuseTasks; // 0x10

	// Constructors
	public TasksData(); // 0x00FCDC64-0x00FCDC6C

	// Methods
	public static void LoadFiles(); // 0x00FCC3DC-0x00FCC3F4
	private static void SaveDyadicArrayFile(Task[][] taskss, string filename); // 0x00FCCD78-0x00FCD074
	public static void SaveRepeatableTasks(); // 0x00FCD074-0x00FCD0D0
	public static void SaveStorylineTasks(); // 0x00FCD0D0-0x00FCD12C
	public static void SaveTaskTemplates(); // 0x00FCD12C-0x00FCD43C
	private static void LoadDyadicArrayFile(out Task[][] taskss, string path); // 0x00FCD43C-0x00FCD808
	public static void LoadRepeatableTasks(); // 0x00FCC3F4-0x00FCC450
	public static void LoadStorylineTasks(); // 0x00FCC450-0x00FCC4AC
	public static void LoadTaskTemplates(); // 0x00FCC4AC-0x00FCCD78
	public static void AddTaskType(IDictionary<string, object> dict, TaskType val); // 0x00FCD808-0x00FCDC64
}

public class TasksManager // TypeDefIndex: 3711
{
	// Fields
	public TaskSetCompleteHandler onTaskSetComplete; // 0x10
	public TaskCompleteHandler onTaskComplete; // 0x18
	public AchievementCompleteHandler onAchievementComplete; // 0x20
	private Task[] _combinedArray; // 0x28
	private int _currentTaskSetLoaded; // 0x30
	private int _currentTaskTemplateSetLoaded; // 0x34
	private int[] _currentRunProgress; // 0x38
	private static TasksManager _instance; // 0x00
	private Task[][] _tasks; // 0x40
	private TaskTemplate[] _templates; // 0x48
	private PlayerInfo playerinfo; // 0x50
	public static int CurCompleteIdx; // 0x08

	// Properties
	private Task[] combinedArray { get; } // 0x00FCE490-0x00FCE730 
	public int currentTaskSet { get; set; } // 0x00FCF4BC-0x00FCF4DC 0x00FCFB44-0x00FCFC58
	public bool inRun { get; set; } // 0x00FCECCC-0x00FCECDC 0x00FCFC58-0x00FCFEBC
	public static TasksManager Instance { get; } // 0x00FC50A8-0x00FC5168 
	private Task[][] tasks { get; } // 0x00FCDD58-0x00FCDEF0 
	public int taskSetCount { get; } // 0x00FCF4DC-0x00FCF4FC 
	public int taskSetStoryCount { get; } // 0x00FCFEBC-0x00FCFF38 
	private TaskTemplate[] templates { get; } // 0x00FCE188-0x00FCE490 

	// Nested types
	public delegate void AchievementCompleteHandler(string msg); // TypeDefIndex: 3712; 0x00FCED54-0x00FCF108

	public delegate void TaskCompleteHandler(string msg); // TypeDefIndex: 3713; 0x00FCF108-0x00FCF4BC

	public delegate void TaskSetCompleteHandler(); // TypeDefIndex: 3714; 0x00FD00A0-0x00FD02BC

	// Constructors
	private TasksManager(); // 0x00FCDC6C-0x00FCDD58
	static TasksManager(); // 0x00FCFFCC-0x00FD0020

	// Methods
	private void CheckAllCompleteAndIncrement(); // 0x00FCDEF0-0x00FCE188
	private void Complete(int task, float completedFactor = 1f /* Metadata: 0x001F5F95 */, bool sendEvenIfInRun = false /* Metadata: 0x001F5F99 */); // 0x00FCE730-0x00FCECCC
	public void CheckPlayerLevel(bool queue = true /* Metadata: 0x001F5F9A */); // 0x00FCB624-0x00FCB960
	public void SetNewTaskSet(); // 0x00FC7498-0x00FC75DC
	public TaskInfo[] GetTaskInfo(); // 0x00FC5540-0x00FC5624
	public TaskInfo GetTaskInfo(int taskNumber); // 0x00FCF5F0-0x00FCF630
	public AchievementInfo GetAchievementInfo(int taskNumber); // 0x00FCF630-0x00FCF740
	private void GetTaskInfo(int taskNumber, ref TaskInfo info); // 0x00FCF4FC-0x00FCF5F0
	public bool IsTaskTargetActive(TaskTarget target); // 0x00FCF740-0x00FCF830
	private static void LogError(string msg, UnityEngine.Object context); // 0x00FCECDC-0x00FCED54
	public void OnChangeIsCharacterOnGround(Transform characterTransform); // 0x00FCF830-0x00FCF884
	public void PlayerDidThis(TaskTarget myTask, int magnitude = 1 /* Metadata: 0x001F5F9B */, int taskToIgnore = -1 /* Metadata: 0x001F5F9F */); // 0x00FCA514-0x00FCAAEC
	public void ResetHaveCharNum(); // 0x00FC5984-0x00FC5A40
	public void RemoveProgressForThis(TaskTarget myTask); // 0x00FCF884-0x00FCF994
	private void ResetProgressForTaskIndex(int questIndex); // 0x00FCF994-0x00FCFA1C
	public void SkipTask(int taskNumber); // 0x00FCFA1C-0x00FCFAA0
	public int GetTaskID(int idx); // 0x00FCFAA0-0x00FCFB44
	public void SetTaskIDx(int idx); // 0x00FCFF38-0x00FCFFCC
}

public class TaskHelper : MonoBehaviour // TypeDefIndex: 3715
{
	// Fields
	[SerializeField] // 0x00518420-0x00518430
	private UISprite tip; // 0x18
	[SerializeField] // 0x00518430-0x00518440
	private UILabel lbl; // 0x20
	[SerializeField] // 0x00518440-0x00518450
	private Animation anim; // 0x28

	// Constructors
	public TaskHelper(); // 0x00FC56AC-0x00FC56C8

	// Methods
	private void OnEnable(); // 0x00FC4E90-0x00FC50A8
	private void OnDisable(); // 0x00FC52CC-0x00FC5440
	private void Refresh(string msg); // 0x00FC5440-0x00FC5444
	private void Refresh(); // 0x00FC5178-0x00FC52CC
	public bool HasRewardPayeOut(); // 0x00FC5444-0x00FC5540
	public void OnClick(); // 0x00FC5624-0x00FC56AC
}

[RequireComponent] // 0x005139EC-0x00513A50
public class TestAnimation : MonoBehaviour // TypeDefIndex: 3716
{
	// Fields
	public AnimationClip[] Animations; // 0x18
	private Animation _Animation; // 0x20

	// Constructors
	public TestAnimation(); // 0x00FD0A74-0x00FD0A7C

	// Methods
	private void Start(); // 0x00FD02FC-0x00FD0354
	private void OnGUI(); // 0x00FD0354-0x00FD0A74
}

public class TimeLineCtl : MonoBehaviour // TypeDefIndex: 3717
{
	// Fields
	private static TimeLineCtl _instance; // 0x00
	[CompilerGenerated] // 0x00518450-0x00518460
	private OnTramcarTutorialDelegate OnTramcarTutorial; // 0x18
	public GameObject otherCam; // 0x20
	public GameObject dimain; // 0x28
	public PlayableDirector Wall_right; // 0x30
	public PlayableDirector Wall_left; // 0x38
	public PlayableDirector Wall_rightend; // 0x40
	public PlayableDirector Wall_leftend; // 0x48
	public PlayableDirector PH_strat; // 0x50
	public PlayableDirector PH_end; // 0x58
	public PlayableDirector Hua_strat; // 0x60
	public PlayableDirector Hua_end; // 0x68
	public PlayableDirector MineInto; // 0x70
	public PlayableDirector MineInto_women; // 0x78
	public PlayableDirector HillInto; // 0x80
	public PlayableDirector HillInto_women; // 0x88
	public PlayableDirector HillEnd; // 0x90
	public PlayableDirector HillEnd_women; // 0x98
	public PlayableDirector FallInto; // 0xA0
	public PlayableDirector FallInto_women; // 0xA8
	public PlayableDirector FallEnd; // 0xB0
	public PlayableDirector FallEnd_women; // 0xB8

	// Properties
	public static TimeLineCtl Instance { get; } // 0x00FD113C-0x00FD1278 

	// Events
	public event OnTramcarTutorialDelegate OnTramcarTutorial {
		add; // 0x00FD12E8-0x00FD138C
		remove; // 0x00FD138C-0x00FD1430
	}

	// Nested types
	public delegate void OnTramcarTutorialDelegate(); // TypeDefIndex: 3718; 0x00FD2394-0x00FD25B0

	// Constructors
	public TimeLineCtl(); // 0x00FD27C0-0x00FD27C8

	// Methods
	private void Awake(); // 0x00FD1278-0x00FD12CC
	private void Start(); // 0x00FD12CC-0x00FD12E8
	public void Director_FallEnd_start(); // 0x00FD1430-0x00FD1508
	public void Director_FallInto_start(); // 0x00FD1508-0x00FD1584
	public void Director_HillEnd_start(); // 0x00FD1584-0x00FD165C
	public void Director_HillInto_start(); // 0x00FD165C-0x00FD16D8
	public void Director_MineInto_start(); // 0x00FD16D8-0x00FD1754
	public void Director_Hua_start(); // 0x00FD1754-0x00FD17A4
	public void Director_Hua_end(); // 0x00FD17A4-0x00FD17E0
	public void Director_PH_start(); // 0x00FD17E0-0x00FD1830
	public void Director_PH_end(); // 0x00FD1830-0x00FD186C
	public void Director_Wall_Start(bool Isright); // 0x00FD186C-0x00FD18C8
	public void Director_Wall_End(bool Isright); // 0x00FD18C8-0x00FD1960
	public void MainCamClose(); // 0x00FD1960-0x00FD1A78
	public void MainCamOpen(); // 0x00FD1A78-0x00FD1B90
	public void SetOtherCam(bool open); // 0x00FD1B90-0x00FD21D4
	private void SetMainOtherCam(); // 0x00FD21D4-0x00FD2394
	public void ResetTimeLine(); // 0x00FD25B0-0x00FD27C0
}

public class DelayInvoke : MonoBehaviour // TypeDefIndex: 3719
{
	// Fields
	private static bool hasInit; // 0x00
	private static DelayInvoke instance; // 0x08

	// Nested types
	[CompilerGenerated] // 0x00514380-0x00514390
	private sealed class _start_d__3 : IEnumerator<object> // TypeDefIndex: 3720
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public float delayTime; // 0x20
		public Action action; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005261A4-0x005261B4 */ get; } // 0x0067AE18-0x0067AE20 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005261C4-0x005261D4 */ get; } // 0x0067AE84-0x0067AE8C 

		// Constructors
		[DebuggerHidden] // 0x00526184-0x00526194
		public _start_d__3(int __1__state); // 0x0067AC58-0x0067AC84

		// Methods
		[DebuggerHidden] // 0x00526194-0x005261A4
		void IDisposable.Dispose(); // 0x0067AD64-0x0067AD68
		private bool MoveNext(); // 0x0067AD68-0x0067AE18
		[DebuggerHidden] // 0x005261B4-0x005261C4
		void IEnumerator.Reset(); // 0x0067AE20-0x0067AE84
	}

	[CompilerGenerated] // 0x00514390-0x005143A0
	private sealed class _startIgnoreTimeScale_d__4 : IEnumerator<object> // TypeDefIndex: 3721
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public float delayTime; // 0x20
		public Action action; // 0x28
		private float _start_5__2; // 0x30

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005261F4-0x00526204 */ get; } // 0x0067AF1C-0x0067AF24 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526214-0x00526224 */ get; } // 0x0067AF88-0x0067AF90 

		// Constructors
		[DebuggerHidden] // 0x005261D4-0x005261E4
		public _startIgnoreTimeScale_d__4(int __1__state); // 0x0067AC84-0x0067ACB0

		// Methods
		[DebuggerHidden] // 0x005261E4-0x005261F4
		void IDisposable.Dispose(); // 0x0067AE8C-0x0067AE90
		private bool MoveNext(); // 0x0067AE90-0x0067AF1C
		[DebuggerHidden] // 0x00526204-0x00526214
		void IEnumerator.Reset(); // 0x0067AF24-0x0067AF88
	}

	// Constructors
	public DelayInvoke(); // 0x0067AD58-0x0067AD60
	static DelayInvoke(); // 0x0067AD60-0x0067AD64

	// Methods
	private void Awake(); // 0x0067A8D4-0x0067A950
	private static void init(); // 0x0067A950-0x0067AA5C
	public static Coroutine delayDo(Action action, float delayTime, bool ignoreTimeScale = false /* Metadata: 0x001F5FA3 */); // 0x0067AA5C-0x0067AB50
	[IteratorStateMachine] // 0x0051FFCC-0x00520030
	public static IEnumerator start(Action action, float delayTime); // 0x0067ABD4-0x0067AC58
	[IteratorStateMachine] // 0x00520030-0x00520094
	public static IEnumerator startIgnoreTimeScale(Action action, float delayTime); // 0x0067AB50-0x0067ABD4
	public static void stopCoroutine(Coroutine cor); // 0x0067ACB0-0x0067AD58
}

public class ObliqueMotion // TypeDefIndex: 3722
{
	// Constructors
	public ObliqueMotion(); // 0x0069F5DC-0x0069F5E4

	// Methods
	public static float CalcHeight(float t); // 0x0069F4A4-0x0069F4BC
	public static float CalcTA(float h); // 0x0069F4BC-0x0069F54C
	public static float CalcTB(float h); // 0x0069F54C-0x0069F5DC
}

public class RealTimeTracker : MonoBehaviour // TypeDefIndex: 3723
{
	// Fields
	private static RealTimeTracker mInst; // 0x00
	private float mRealDelta; // 0x18
	private float mRealTime; // 0x1C

	// Properties
	public static float deltaTime { get; } // 0x0072D0F8-0x0072D19C 
	public static float time { get; } // 0x0072D19C-0x0072D240 

	// Constructors
	public RealTimeTracker(); // 0x0072D240-0x0072D248

	// Methods
	private static void Spawn(); // 0x0072CF90-0x0072D070
	private void Update(); // 0x0072D070-0x0072D0F8
}

public class SetscrollviewBgSize : MonoBehaviour // TypeDefIndex: 3724
{
	// Fields
	[SerializeField] // 0x00518460-0x00518470
	private UISprite Obj; // 0x18
	private UILabel lab; // 0x20
	private int oriWith; // 0x28
	private UIScrollBar bar; // 0x30
	private bool startroll; // 0x38
	private float waitTime; // 0x3C
	[SerializeField] // 0x00518470-0x00518480
	private GameObject Obj_Icon; // 0x40
	[SerializeField] // 0x00518480-0x00518490
	private GameObject Obj_bg; // 0x48

	// Constructors
	public SetscrollviewBgSize(); // 0x006C5D38-0x006C5D40

	// Methods
	private void Awake(); // 0x006C5A18-0x006C5B00
	private void Update(); // 0x006C5B00-0x006C5B58
	public void StartRoll(); // 0x006C5C88-0x006C5D38
	private void UpdateBar(); // 0x006C5B58-0x006C5C88
}

public class CheckPoint : MonoBehaviour // TypeDefIndex: 3725
{
	// Fields
	public TrackPiece.TrackCheckPoint[] points; // 0x18
	private int parameter; // 0x20

	// Constructors
	public CheckPoint(); // 0x00669C34-0x00669C44

	// Methods
	public void SetPointBySelectorOffset(int TrackNumber); // 0x006699D8-0x00669A3C
	public void SetPointByMirror(int num); // 0x00669A3C-0x00669AB0
	public void Reset(); // 0x00669AB0-0x00669BD8
	public TrackPiece.TrackCheckPoint GetRandomCheckPoint(); // 0x00669BD8-0x00669C34
}

public enum EnvType // TypeDefIndex: 3726
{
	Mine = 0,
	Forest = 1,
	Rock = 2,
	Snow = 3,
	None = 4
}

[Serializable]
[CreateAssetMenu] // 0x00513A50-0x00513A8C
public class Environment : ScriptableObject // TypeDefIndex: 3727
{
	// Fields
	public float MinSpeed; // 0x18
	public Color MainCamBackCol; // 0x1C
	public EnvType envType; // 0x2C
	public LanguageKey envName; // 0x30
	public string sceneName; // 0x38
	public bool allowTurn; // 0x40
	public EnvWheather wheather; // 0x48
	public int minLength; // 0x88
	public int minIntervalLength; // 0x8C
	public int maxIntervalLength; // 0x90
	public int MinDistanceBetweenTurns; // 0x94
	public int MaxDistanceBetweenTurns; // 0x98
	public int MinDistanceBetweenJunctions; // 0x9C
	public string[] subScenes; // 0xA0
	public int unlockedLevel; // 0xA8
	public string iconName; // 0xB0
	public string texturePath; // 0xB8
	public Action envTransition; // 0xC0

	// Constructors
	public Environment(); // 0x00683318-0x00683338
}

[Serializable]
public struct EnvWheather // TypeDefIndex: 3728
{
	// Fields
	public WheatherType wheatherType; // 0x00
	public Texture texture; // 0x08
	public float tintValue; // 0x10
	public Color tintColor; // 0x14
	public float aMultiplier; // 0x24
	public bool willRain; // 0x28
	public bool willSnow; // 0x29
	public Texture2D[] lightmapFar; // 0x30
	public Texture2D[] lightmapNear; // 0x38

	// Nested types
	public enum WheatherType // TypeDefIndex: 3729
	{
		Rain = 0,
		RainAndLightning = 1,
		Snow = 2,
		Sunlight = 3
	}
}

[Serializable]
[CreateAssetMenu] // 0x00513A8C-0x00513AC8
public class SubEnv : ScriptableObject // TypeDefIndex: 3730
{
	// Fields
	public string mainMusic; // 0x18
	public int minLength; // 0x20
	public int maxLength; // 0x24
	public bool indoor; // 0x28
	public bool allowTurn; // 0x29
	public bool allowEnvEnd; // 0x2A
	public bool allowFlypack; // 0x2B
	public bool allowChangeSky; // 0x2C

	// Constructors
	public SubEnv(); // 0x00FC2DE4-0x00FC2DEC
}

public class TrackDatas // TypeDefIndex: 3731
{
	// Fields
	public static List<Environment> envsList; // 0x00
	private static Dictionary<string, SubEnv> subEnvsDict; // 0x08
	public static Dictionary<TrackPieceType, PieceTypeDefine> pieceDefinesMap; // 0x10

	// Constructors
	public TrackDatas(); // 0x007B1440-0x007B1448

	// Methods
	public static void SetDefaultTrackPieceTypeData(); // 0x007B020C-0x007B093C
	public static bool SaveTrackPieceTypeData(); // 0x007B093C-0x007B0CB0
	public static bool LoadTrackPieceTypeData(); // 0x007B0CB0-0x007B12AC
	public static void AddEnv(Environment environment); // 0x007ABCB4-0x007ABDA0
	public static Environment FindEnvData(int type); // 0x007B12AC-0x007B12B0
	public static Environment FindEnvData(EnvType type); // 0x007ABE7C-0x007ABF70
	public static void AddSubEnv(string path, SubEnv subEnv); // 0x007B12B0-0x007B13A0
	public static PieceTypeDefine FindDefineByType(TrackPieceType type); // 0x007B13A0-0x007B1440
}

public class AnimationAndEventTrigger : MonoBehaviour // TypeDefIndex: 3732
{
	// Fields
	public AnimationEvents events; // 0x18
	public Animation anim; // 0x20
	private bool idleAnimate; // 0x28
	private string defaultAnim; // 0x30
	private TrackObject trackObject; // 0x38
	public bool IsRobber; // 0x40
	private int curRoad; // 0x44
	public OnTriggerObject triggerObject; // 0x48
	public OnTriggerObject triggerObject_robber; // 0x50
	public OnTriggerObject triggerObject_robberAlter; // 0x58
	public Collider[] colliders; // 0x60
	private bool NoMovePosition; // 0x68
	private Transform Robbernew; // 0x70
	public AnimationCurve robberflySpeedSet; // 0x78
	public float allmoveTime; // 0x80
	private TrackObject temp; // 0x88
	private string animClip; // 0x90
	public float delay; // 0x98
	public string sound; // 0xA0
	public int soundFrames; // 0xA8
	public ParticleSystem[] pses; // 0xB0
	public int particlesFrames; // 0xB8
	public bool shake; // 0xBC
	public int shakeFrames; // 0xC0
	public float intensity; // 0xC4
	public float shakeDuration; // 0xC8
	private RobberModel tempRobber; // 0xD0

	// Nested types
	[CompilerGenerated] // 0x005143A0-0x005143B0
	private sealed class _playIdleRandom_d__18 : IEnumerator<object> // TypeDefIndex: 3733
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public AnimationAndEventTrigger __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526244-0x00526254 */ get; } // 0x0070F10C-0x0070F114 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526264-0x00526274 */ get; } // 0x0070F178-0x0070F180 

		// Constructors
		[DebuggerHidden] // 0x00526224-0x00526234
		public _playIdleRandom_d__18(int __1__state); // 0x0070D380-0x0070D3AC

		// Methods
		[DebuggerHidden] // 0x00526234-0x00526244
		void IDisposable.Dispose(); // 0x0070F014-0x0070F018
		private bool MoveNext(); // 0x0070F018-0x0070F10C
		[DebuggerHidden] // 0x00526254-0x00526264
		void IEnumerator.Reset(); // 0x0070F114-0x0070F178
	}

	[CompilerGenerated] // 0x005143B0-0x005143C0
	private sealed class _StartPlayAnimations_d__27 : IEnumerator<object> // TypeDefIndex: 3734
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public AnimationAndEventTrigger __4__this; // 0x20
		private IEnumerator _coroutine_5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526294-0x005262A4 */ get; } // 0x0070EA08-0x0070EA10 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005262B4-0x005262C4 */ get; } // 0x0070EA74-0x0070EA7C 

		// Constructors
		[DebuggerHidden] // 0x00526274-0x00526284
		public _StartPlayAnimations_d__27(int __1__state); // 0x0070DC54-0x0070DC80

		// Methods
		[DebuggerHidden] // 0x00526284-0x00526294
		void IDisposable.Dispose(); // 0x0070E8D8-0x0070E8DC
		private bool MoveNext(); // 0x0070E8DC-0x0070EA08
		[DebuggerHidden] // 0x005262A4-0x005262B4
		void IEnumerator.Reset(); // 0x0070EA10-0x0070EA74
	}

	[CompilerGenerated] // 0x005143C0-0x005143D0
	private sealed class _PlayAnimation_d__41 : IEnumerator<object> // TypeDefIndex: 3735
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public AnimationAndEventTrigger trigger; // 0x20
		public AnimationAndEventTrigger __4__this; // 0x28
		private float _time_5__2; // 0x30

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005262E4-0x005262F4 */ get; } // 0x0070E864-0x0070E86C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526304-0x00526314 */ get; } // 0x0070E8D0-0x0070E8D8 

		// Constructors
		[DebuggerHidden] // 0x005262C4-0x005262D4
		public _PlayAnimation_d__41(int __1__state); // 0x0070DEBC-0x0070DEE8

		// Methods
		[DebuggerHidden] // 0x005262D4-0x005262E4
		void IDisposable.Dispose(); // 0x0070E760-0x0070E764
		private bool MoveNext(); // 0x0070E764-0x0070E864
		[DebuggerHidden] // 0x005262F4-0x00526304
		void IEnumerator.Reset(); // 0x0070E86C-0x0070E8D0
	}

	[CompilerGenerated] // 0x005143D0-0x005143E0
	private sealed class _moveRobber_d__48 : IEnumerator<object> // TypeDefIndex: 3736
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public AnimationAndEventTrigger __4__this; // 0x20
		private float _time_5__2; // 0x28
		private float _robberFlyTime_5__3; // 0x2C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526334-0x00526344 */ get; } // 0x0070EFA0-0x0070EFA8 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526354-0x00526364 */ get; } // 0x0070F00C-0x0070F014 

		// Constructors
		[DebuggerHidden] // 0x00526314-0x00526324
		public _moveRobber_d__48(int __1__state); // 0x0070E554-0x0070E580

		// Methods
		[DebuggerHidden] // 0x00526324-0x00526334
		void IDisposable.Dispose(); // 0x0070EA7C-0x0070EA80
		private bool MoveNext(); // 0x0070EA80-0x0070EFA0
		[DebuggerHidden] // 0x00526344-0x00526354
		void IEnumerator.Reset(); // 0x0070EFA8-0x0070F00C
	}

	// Constructors
	public AnimationAndEventTrigger(); // 0x0070E748-0x0070E760

	// Methods
	private void Awake(); // 0x0070C4DC-0x0070C9A4
	private void OnActivate(); // 0x0070CB88-0x0070D004
	[IteratorStateMachine] // 0x00520094-0x005200F8
	private IEnumerator playIdleRandom(); // 0x0070D30C-0x0070D380
	private void OnDeactivate(); // 0x0070D3AC-0x0070D508
	private void OnEnterRobberAlter(Collider other); // 0x0070D5A4-0x0070D718
	private void OnExitRobberAlter(Collider other); // 0x0070D718-0x0070D71C
	private void OnEnterRobberOver(Collider other); // 0x0070D71C-0x0070D7A8
	private void RobberOver(bool IsOver); // 0x0070D7A8-0x0070D8F8
	private void OnExitRobberOver(Collider other); // 0x0070D8F8-0x0070D8FC
	private void OnExit(Collider other); // 0x0070D8FC-0x0070D900
	private void OnEnter(Collider other); // 0x0070D900-0x0070DA54
	[IteratorStateMachine] // 0x005200F8-0x0052015C
	private IEnumerator StartPlayAnimations(); // 0x0070DBE0-0x0070DC54
	public void Register(AnimationAndEventTrigger trigger); // 0x0070DA54-0x0070DBE0
	public void UnRegister(AnimationAndEventTrigger trigger); // 0x0070DCB0-0x0070DE3C
	public bool OnEnter(AnimationAndEventTrigger trigger); // 0x0070C9A4-0x0070CB88
	[IteratorStateMachine] // 0x0052015C-0x005201C0
	public IEnumerator PlayAnimation(AnimationAndEventTrigger trigger); // 0x0070DE3C-0x0070DEBC
	private void OnPlaySound(); // 0x0070DEE8-0x0070DFC8
	private void OnShake(); // 0x0070E070-0x0070E0C0
	private void OnPlayParticles(); // 0x0070E0C0-0x0070E148
	public void OnRewind(AnimationAndEventTrigger trigger); // 0x0070D1B0-0x0070D30C
	public void OnResetEvent(AnimationAndEventTrigger trigger); // 0x0070E148-0x0070E334
	private void OnTriggerEnter(Collider other); // 0x0070E334-0x0070E4E0
	[IteratorStateMachine] // 0x005201C0-0x00520224
	private IEnumerator moveRobber(); // 0x0070E4E0-0x0070E554
	public void SetRobberModel(); // 0x0070D004-0x0070D1B0
	public void SetRobberOver(); // 0x0070D508-0x0070D598
	public RobberModel GetRobber(); // 0x0070E580-0x0070E748
}

public class AnimationEvents : MonoBehaviour // TypeDefIndex: 3737
{
	// Fields
	public OnPlaySoundDelegate OnPlaySound; // 0x18
	public OnShakeDelegate OnShake; // 0x20
	public OnPlayParticlesDelegate OnPlayParticles; // 0x28

	// Nested types
	public delegate void OnPlaySoundDelegate(); // TypeDefIndex: 3738; 0x0070F820-0x0070FA3C

	public delegate void OnShakeDelegate(); // TypeDefIndex: 3739; 0x0070FA4C-0x0070FC68

	public delegate void OnPlayParticlesDelegate(); // TypeDefIndex: 3740; 0x0070FC78-0x0070FE94

	// Constructors
	public AnimationEvents(); // 0x0070FE94-0x0070FE9C

	// Methods
	public void PlaySound(); // 0x0070F810-0x0070F820
	public void Shake(); // 0x0070FA3C-0x0070FA4C
	public void PlayParticles(); // 0x0070FC68-0x0070FC78
	public void Clear(); // 0x0070D598-0x0070D5A4
}

[Serializable]
public class CharacterMoveForward // TypeDefIndex: 3741
{
	// Fields
	private float previousX; // 0x10
	private Vector3 currentDirection; // 0x14
	private Vector3 previousPosition; // 0x20
	public float turnSmoothRotationSpeed; // 0x2C
	public bool DoTurnLeftNextSegment; // 0x30
	public bool DoTurnRightNextSegment; // 0x31
	public bool autoTurn; // 0x32
	public Vector3 currentPosition; // 0x34
	private Vector3 zero; // 0x40
	private Vector3 nextPostion; // 0x4C
	public Vector3 nextPostionoffset; // 0x58
	private Vector3 delta; // 0x64
	private bool isTurning; // 0x70
	private List<Vector3> Path; // 0x78
	private Character character; // 0x80
	private CharacterRendering characterRendering; // 0x88
	private int afterTurnTrackIndex; // 0x90
	private bool canTurnAtSqureTurn; // 0x94
	public int dirctionFlag; // 0x98
	[CompilerGenerated] // 0x00518490-0x005184A0
	private Vector3 _LastcharacterPosition_k__BackingField; // 0x9C
	[CompilerGenerated] // 0x005184A0-0x005184B0
	private bool _MoveBack_k__BackingField; // 0xA8
	[CompilerGenerated] // 0x005184B0-0x005184C0
	private int _CurrentSegment_k__BackingField; // 0xAC
	[CompilerGenerated] // 0x005184C0-0x005184D0
	private bool _IsOverGround_k__BackingField; // 0xB0
	[CompilerGenerated] // 0x005184D0-0x005184E0
	private TrackPiece _OnTrackPiece_k__BackingField; // 0xB8
	[CompilerGenerated] // 0x005184E0-0x005184F0
	private OnChangeOnTrackPieceDelegate OnChangeOnTrackPiece; // 0xC0
	[CompilerGenerated] // 0x005184F0-0x00518500
	private OnCurrentDirectionValueChangeDelegate OnCurrentDirectionValueChange; // 0xC8

	// Properties
	public Vector3 LastcharacterPosition { [CompilerGenerated] /* 0x00520224-0x00520234 */ get; [CompilerGenerated] /* 0x00520234-0x00520244 */ set; } // 0x00744984-0x00744990 0x00744990-0x0074499C
	public bool MoveBack { [CompilerGenerated] /* 0x00520244-0x00520254 */ get; [CompilerGenerated] /* 0x00520254-0x00520264 */ set; } // 0x0074499C-0x007449A4 0x007449A4-0x007449B0
	public Vector3 CurrentPosition { get; } // 0x007449B0-0x007449BC 
	public Vector3 CurrentDirection { get; } // 0x007449BC-0x007449C8 
	public int CurrentSegment { [CompilerGenerated] /* 0x00520264-0x00520274 */ get; [CompilerGenerated] /* 0x00520274-0x00520284 */ set; } // 0x007449C8-0x007449D0 0x007449D0-0x007449D8
	public bool IsOverGround { [CompilerGenerated] /* 0x00520284-0x00520294 */ get; [CompilerGenerated] /* 0x00520294-0x005202A4 */ set; } // 0x007449D8-0x007449E0 0x007449E0-0x007449EC
	public TrackPiece OnTrackPiece { [CompilerGenerated] /* 0x005202A4-0x005202B4 */ get; [CompilerGenerated] /* 0x005202B4-0x005202C4 */ set; } // 0x007449EC-0x007449F4 0x007449F4-0x007449FC

	// Events
	public event OnChangeOnTrackPieceDelegate OnChangeOnTrackPiece {
		add; // 0x00747FE4-0x00748088
		remove; // 0x00748088-0x0074812C
	}
	public event OnCurrentDirectionValueChangeDelegate OnCurrentDirectionValueChange {
		add; // 0x0074812C-0x007481D0
		remove; // 0x007481D0-0x00748274
	}

	// Nested types
	public delegate void OnChangeOnTrackPieceDelegate(TrackPiece oldPiece, TrackPiece newPiece); // TypeDefIndex: 3742; 0x00747394-0x00747774

	public delegate void OnCurrentDirectionValueChangeDelegate(Vector3 old, Vector3 now); // TypeDefIndex: 3743; 0x007482D0-0x00748598

	// Constructors
	public CharacterMoveForward(Character character); // 0x007449FC-0x00744B30

	// Methods
	public void MoveForwardMixture(); // 0x00744C50-0x007454E0
	private void CalcPointAlongTrackPiece(TrackPiece track, float previousY, out Vector3 pointAlongTrack, out Vector3 forwardDirection); // 0x007454E0-0x007460C4
	private void CalcPointBackAlongTrackPiece(TrackPiece track, float previousY, out Vector3 pointAlongTrack, out Vector3 forwardDirection); // 0x007460C4-0x007467FC
	public void ChooseNextTrackPiece(TrackPiece rootPiece); // 0x00746B74-0x00746F2C
	public void LayTrackChunks(TrackPiece currentPiece, float characterZ, float trackAheadDistance, int length, int turn); // 0x007468B4-0x00746B74
	private void OnDoTurn(TrackPiece piece, int segment); // 0x00747774-0x007479E8
	private void OnDoTurnEnd(TrackPiece piece, int segment); // 0x007479E8-0x007479F0
	public void doTurnLeft(); // 0x007479F0-0x00747BD0
	public void doTurnRight(); // 0x00747BD0-0x00747DB0
	public void SqureTurnLeft(TrackPiece piece); // 0x00746F2C-0x0074711C
	public void SqureTurnRight(TrackPiece piece); // 0x0074711C-0x00747394
	public void SetCurrentPosition(Vector3 position); // 0x00747DB0-0x00747DC4
	public bool IsGrounded(); // 0x00747DC4-0x00747E54
	public bool CanJump(bool flag); // 0x00747E54-0x00747F10
	public void OnRestart(); // 0x00747F10-0x00747FE4
}

[Serializable]
public class QuadBez // TypeDefIndex: 3744
{
	// Fields
	public Vector3 st; // 0x10
	public Vector3 en; // 0x1C
	public Vector3 ctrl; // 0x28

	// Constructors
	public QuadBez(Vector3 st, Vector3 en, Vector3 ctrl); // 0x007290B8-0x00729134

	// Methods
	public Vector3 Interp(float t); // 0x00729134-0x00729258
	public Vector3 Velocity(float t); // 0x00729258-0x00729410
	public void GizmoDraw(float t); // 0x00729410-0x007295B4
}

[Serializable]
public class CubicBez // TypeDefIndex: 3745
{
	// Fields
	public Vector3 st; // 0x10
	public Vector3 en; // 0x1C
	public Vector3 ctrl1; // 0x28
	public Vector3 ctrl2; // 0x34

	// Constructors
	public CubicBez(Vector3 st, Vector3 en, Vector3 ctrl1, Vector3 ctrl2); // 0x00675058-0x00675108

	// Methods
	public Vector3 Interp(float t); // 0x00675108-0x00675280
	public Vector3 Velocity(float t); // 0x00675280-0x00675570
	public void GizmoDraw(float t); // 0x00675570-0x00675718
}

[Serializable]
public class CRSpline // TypeDefIndex: 3746
{
	// Fields
	public Vector3[] pts; // 0x10

	// Constructors
	public CRSpline(params /* 0x00528AA4-0x00528AB4 */ Vector3[] pts); // 0x00773DFC-0x00773E8C

	// Methods
	public Vector3 Interp(float t); // 0x00773E8C-0x007742CC
	public Vector3 Velocity(float t); // 0x007742CC-0x007746E4
	public void GizmoDraw(float t); // 0x007746E4-0x0077485C
}

public class FlagObject : MonoBehaviour // TypeDefIndex: 3747
{
	// Constructors
	public FlagObject(); // 0x00686E38-0x00686E40
}

public class GameCamera : MonoBehaviour // TypeDefIndex: 3748
{
	// Fields
	private static GameCamera instance; // 0x00
	public CemaraState state; // 0x18
	public Transform targetObject; // 0x20
	public Transform FocusObject; // 0x28
	public float mRunFocusHeight; // 0x30
	public float mRunFocusDistance; // 0x34
	public float mRunFollowHeight; // 0x38
	public float mRunFollowDistance; // 0x3C
	public float RunSmoothZoomSpeed; // 0x40
	public float RunSmoothCameraXSpeed; // 0x44
	public float RunSmoothCameraYSpeed; // 0x48
	public float RunSmoothFocusHeightSpeed; // 0x4C
	public bool useJumpParameters; // 0x50
	public float mJumpFocusHeight; // 0x54
	public float mJumpFocusDistance; // 0x58
	public float mJumpFollowHeight; // 0x5C
	public float mJumpFollowDistance; // 0x60
	public float JumpSmoothZoomSpeed; // 0x64
	public float JumpSmoothCameraXSpeed; // 0x68
	public float JumpSmoothCameraYSpeed; // 0x6C
	public float JumpSmoothFocusHeightSpeed; // 0x70
	public bool useRollParameters; // 0x74
	public float mRollFocusHeight; // 0x78
	public float mRollFocusDistance; // 0x7C
	public float mRollFollowHeight; // 0x80
	public float mRollFollowDistance; // 0x84
	public float RollSmoothZoomSpeed; // 0x88
	public float RollSmoothCameraXSpeed; // 0x8C
	public float RollSmoothCameraYSpeed; // 0x90
	public float RollSmoothFocusHeightSpeed; // 0x94
	public float mFlyFocusHeight; // 0x98
	public float mFlyFocusDistance; // 0x9C
	public float mFlyFollowHeight; // 0xA0
	public float mFlyFollowDistance; // 0xA4
	public float FlySmoothZoomSpeed; // 0xA8
	public float FlySmoothCameraXSpeed; // 0xAC
	public float FlySmoothCameraYSpeed; // 0xB0
	public float FlySmoothFocusHeightSpeed; // 0xB4
	public float mWallWalkingFocusHeight; // 0xB8
	public float mWallWalkingFocusDistance; // 0xBC
	public float mWallWalkingFollowHeight; // 0xC0
	public float mWallWalkingFollowDistance; // 0xC4
	public float WallWalkingSmoothZoomSpeed; // 0xC8
	public float WallWalkingSmoothCameraXSpeed; // 0xCC
	public float WallWalkingSmoothCameraYSpeed; // 0xD0
	public float WallWalkingSmoothFocusHeightSpeed; // 0xD4
	public float SmoothCameraXSpeed; // 0xD8
	public float SmoothCameraYSpeed; // 0xDC
	public float SmoothFocusHeightSpeed; // 0xE0
	public float SmoothZoomSpeed; // 0xE4
	public float SmoothRotationSpeed; // 0xE8
	public float SmoothPitchSpeed; // 0xEC
	public ParticleSystem CamWaterFallps; // 0xF0
	private Vector3 mFocusTargetPosition; // 0xF8
	private float mFocusHeight; // 0x104
	private float mFocusDistance; // 0x108
	private float mFollowHeight; // 0x10C
	private float mFollowDistance; // 0x110
	private float mCurrentFocusHeight; // 0x114
	private float mCurrentFocusXOffset; // 0x118
	private float mTargetFocusXOffset; // 0x11C
	private float mLastFocusY; // 0x120
	private float mCurrentFocusY; // 0x124
	private float mTargetFocusY; // 0x128
	private float mCurrentDistance; // 0x12C
	private float mTargetDistance; // 0x130
	private float mCurrentYaw; // 0x134
	private float mTargetYaw; // 0x138
	private float mCurrentPitch; // 0x13C
	private float mTargetPitch; // 0x140
	private Vector3 currentPositionOffset; // 0x144
	private Vector3 currentDirectionOffset; // 0x150
	private Character character; // 0x160
	private bool IsCameraShaking; // 0x168
	private float TimeSinceCameraShakeStart; // 0x16C
	private bool ShakeAfterDelay; // 0x170
	private float ShakeDelay; // 0x174
	private float ShakeMagnitudeAfterDelay; // 0x178
	private float ShakeDurationAfterDelay; // 0x17C
	private float ShakeFrequencyMultiplierAfterDelay; // 0x180
	private float CameraShakeDuration; // 0x184
	private float CameraShakeMagnitude; // 0x188
	private float CameraShakeDamperRate; // 0x18C
	private float CameraShakeFrequencyMultiplier; // 0x190
	private Vector3 originLPosition; // 0x194
	private Quaternion originLRotation; // 0x1A0
	private bool reset; // 0x1B0
	private bool stopped; // 0x1B1
	private float interval; // 0x1B4
	private bool fovGipping; // 0x1B8
	private Camera _camera; // 0x1C0
	private Animation _animation; // 0x1C8
	public Transform mTrans; // 0x1D0

	// Properties
	public Camera Camera { get; } // 0x00645D8C-0x00645E24 
	public Animation Animation { get; } // 0x00645E24-0x00645EBC 
	public static GameCamera Instance { get; } // 0x00647948-0x00647A84 

	// Nested types
	public enum CemaraState // TypeDefIndex: 3749
	{
		TopMenu = 0,
		InGame = 1
	}

	[CompilerGenerated] // 0x005143E0-0x005143F0
	private sealed class __c__DisplayClass102_0 // TypeDefIndex: 3750
	{
		// Fields
		public GameCamera __4__this; // 0x10
		public float multiplier; // 0x18

		// Constructors
		public __c__DisplayClass102_0(); // 0x00646CD4-0x00646CDC
	}

	[CompilerGenerated] // 0x005143F0-0x00514400
	private sealed class __c__DisplayClass102_1 // TypeDefIndex: 3751
	{
		// Fields
		public float startFOV; // 0x10
		public __c__DisplayClass102_0 CS___8__locals1; // 0x18

		// Constructors
		public __c__DisplayClass102_1(); // 0x00646CDC-0x00646CE4

		// Methods
		internal void _FOVGip_b__0(float t); // 0x00647A8C-0x00647B9C
	}

	[CompilerGenerated] // 0x00514400-0x00514410
	private sealed class _UnStopC_d__108 : IEnumerator<object> // TypeDefIndex: 3752
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public GameCamera __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526384-0x00526394 */ get; } // 0x00647C54-0x00647C5C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005263A4-0x005263B4 */ get; } // 0x00647CC0-0x00647CC8 

		// Constructors
		[DebuggerHidden] // 0x00526364-0x00526374
		public _UnStopC_d__108(int __1__state); // 0x006476B8-0x006476E4

		// Methods
		[DebuggerHidden] // 0x00526374-0x00526384
		void IDisposable.Dispose(); // 0x00647B9C-0x00647BA0
		private bool MoveNext(); // 0x00647BA0-0x00647C54
		[DebuggerHidden] // 0x00526394-0x005263A4
		void IEnumerator.Reset(); // 0x00647C5C-0x00647CC0
	}

	// Constructors
	public GameCamera(); // 0x00647A84-0x00647A8C

	// Methods
	private void Awake(); // 0x00645EBC-0x00645FB4
	private void Start(); // 0x00645FB4-0x00645FCC
	public void ResetToOrigin(); // 0x00645FCC-0x00646030
	public void StartReset(bool reset = true /* Metadata: 0x001F5FC8 */); // 0x00646030-0x00646124
	public void BetweenReset(); // 0x00646B34-0x00646B80
	public void FOVGip(float time, float multiplier); // 0x00646B80-0x00646CD4
	private void setFocusTargetPosition(bool reset = false /* Metadata: 0x001F5FC9 */); // 0x00646124-0x00646500
	private void computeCameraOffsets(); // 0x00646CE4-0x00646FB4
	private void UpdatePosDirOffsets(); // 0x00646FB4-0x006475DC
	public void Stop(); // 0x006475DC-0x00647618
	public void UnStop(); // 0x00647618-0x00647644
	[IteratorStateMachine] // 0x00520304-0x00520368
	private IEnumerator UnStopC(); // 0x00647644-0x006476B8
	public void OnLateUpdate(bool reset = false /* Metadata: 0x001F5FCA */); // 0x00646500-0x00646B34
	public void Shake(float magnitude, float duration, float freqMult, float delay = 0f /* Metadata: 0x001F5FCB */); // 0x00647838-0x0064789C
	private float AngleDegree(Vector3 v1, Vector3 v2, Vector3 n); // 0x006476E4-0x00647838
	private void OnDrawGizmosSelected(); // 0x0064789C-0x00647948
}

public class BoundJumpPickup : IPickup // TypeDefIndex: 3753
{
	// Fields
	public float jumpHeight; // 0x3C
	public float jumpDistance; // 0x40
	public float totalDistance; // 0x44

	// Constructors
	public BoundJumpPickup(); // 0x0071E260-0x0071E27C

	// Methods
	public override void NotifyPickup(PickupParticles particles); // 0x0071E098-0x0071E10C
	private void OnDrawGizmosSelected(); // 0x0071E10C-0x0071E260
}

public class ChangeSkyPickup : IPickup // TypeDefIndex: 3754
{
	// Fields
	public bool IsChangeBlack; // 0x3A

	// Constructors
	public ChangeSkyPickup(); // 0x0077F168-0x0077F170

	// Methods
	public override void NotifyPickup(PickupParticles particles); // 0x0077F128-0x0077F168
}

public class ChestPickup : BaseO // TypeDefIndex: 3755
{
	// Fields
	[SerializeField] // 0x00518500-0x00518510
	private Collider pickupCollider; // 0x18
	[SerializeField] // 0x00518510-0x00518520
	private MeshRenderer meshRenderer; // 0x20
	[SerializeField] // 0x00518520-0x00518530
	private Glow glow; // 0x28
	private bool canPickup; // 0x30

	// Constructors
	public ChestPickup(); // 0x0066AEB8-0x0066AEC0

	// Methods
	public override void OnActivate(); // 0x0066ABAC-0x0066ACC8
	public override void OnDeactivate(); // 0x0066ACC8-0x0066ADE0
	public void NotifyPickup(PickupParticles particles); // 0x0066ADE0-0x0066AEB8
}

public class CoinMagnetPickup : IPickup // TypeDefIndex: 3756
{
	// Constructors
	public CoinMagnetPickup(); // 0x00671700-0x00671708

	// Methods
	public override void NotifyPickup(PickupParticles particles); // 0x00671644-0x00671700
}

public class CollectPickup : IPickup // TypeDefIndex: 3757
{
	// Fields
	[SerializeField] // 0x00518530-0x00518540
	private string title; // 0x40

	// Constructors
	public CollectPickup(); // 0x00672C04-0x00672C0C

	// Methods
	public override void NotifyPickup(PickupParticles particles); // 0x00672A9C-0x00672C04
}

public class CollectUpgrade : Randomizer // TypeDefIndex: 3758
{
	// Fields
	public GameObject task1; // 0x18
	public GameObject task2; // 0x20
	public GameObject task4; // 0x28
	public GameObject task5; // 0x30
	public float Task1Dis; // 0x38
	public float Task2Dis; // 0x3C
	public float Task4Dis; // 0x40
	public float Task5Dis; // 0x44

	// Constructors
	public CollectUpgrade(); // 0x006731D4-0x006731E8

	// Methods
	public override void PerformRandomizer(List<GameObject> objects); // 0x00672C0C-0x00672DF4
	public float GetTaskDis(string version); // 0x00672FF0-0x006730D4
	private void ShowToken(string version); // 0x006730D4-0x006731D4
}

public class DoubleScoreMultiplierPickup : IPickup // TypeDefIndex: 3759
{
	// Constructors
	public DoubleScoreMultiplierPickup(); // 0x0067C78C-0x0067C794

	// Methods
	public override void NotifyPickup(PickupParticles particles); // 0x0067C6D0-0x0067C78C
}

public class FlypackPickup : IPickup // TypeDefIndex: 3760
{
	// Constructors
	public FlypackPickup(); // 0x0068B424-0x0068B42C

	// Methods
	public override void NotifyPickup(PickupParticles particles); // 0x0068B384-0x0068B3EC
}

public class ForceMoveMidPickup : IPickup // TypeDefIndex: 3761
{
	// Fields
	private GameCamera characterCamera; // 0x40
	private float FOV; // 0x48
	private float fovTransition; // 0x4C

	// Nested types
	[CompilerGenerated] // 0x00514410-0x00514420
	private sealed class __c__DisplayClass4_0 // TypeDefIndex: 3762
	{
		// Fields
		public ForceMoveMidPickup __4__this; // 0x10
		public float fov_start; // 0x18
		public float fov_end; // 0x1C

		// Constructors
		public __c__DisplayClass4_0(); // 0x0068B8F8-0x0068B900

		// Methods
		internal void _SetFOV_b__0(float t); // 0x0068BA24-0x0068BAE4
	}

	// Constructors
	public ForceMoveMidPickup(); // 0x0068BA0C-0x0068BA24

	// Methods
	public override void NotifyPickup(PickupParticles particles); // 0x0068B650-0x0068B7D8
	private void SetFOV(); // 0x0068B7D8-0x0068B8F8
	public static void ForceMoveMid(); // 0x0068B900-0x0068BA0C
}

public class ForceMovePickup : IPickup // TypeDefIndex: 3763
{
	// Fields
	public bool IsForceRight; // 0x3A

	// Nested types
	[CompilerGenerated] // 0x00514420-0x00514430
	private sealed class _MoveRight_d__2 : IEnumerator<object> // TypeDefIndex: 3764
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005263D4-0x005263E4 */ get; } // 0x0068C054-0x0068C05C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005263F4-0x00526404 */ get; } // 0x0068C0C0-0x0068C0C8 

		// Constructors
		[DebuggerHidden] // 0x005263B4-0x005263C4
		public _MoveRight_d__2(int __1__state); // 0x0068BD70-0x0068BD9C

		// Methods
		[DebuggerHidden] // 0x005263C4-0x005263D4
		void IDisposable.Dispose(); // 0x0068BF80-0x0068BF84
		private bool MoveNext(); // 0x0068BF84-0x0068C054
		[DebuggerHidden] // 0x005263E4-0x005263F4
		void IEnumerator.Reset(); // 0x0068C05C-0x0068C0C0
	}

	[CompilerGenerated] // 0x00514430-0x00514440
	private sealed class _MoveLeft_d__3 : IEnumerator<object> // TypeDefIndex: 3765
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526424-0x00526434 */ get; } // 0x0068BF0C-0x0068BF14 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526444-0x00526454 */ get; } // 0x0068BF78-0x0068BF80 

		// Constructors
		[DebuggerHidden] // 0x00526404-0x00526414
		public _MoveLeft_d__3(int __1__state); // 0x0068BDFC-0x0068BE28

		// Methods
		[DebuggerHidden] // 0x00526414-0x00526424
		void IDisposable.Dispose(); // 0x0068BE38-0x0068BE3C
		private bool MoveNext(); // 0x0068BE3C-0x0068BF0C
		[DebuggerHidden] // 0x00526434-0x00526444
		void IEnumerator.Reset(); // 0x0068BF14-0x0068BF78
	}

	// Constructors
	public ForceMovePickup(); // 0x0068BE28-0x0068BE38

	// Methods
	public override void NotifyPickup(PickupParticles particles); // 0x0068BAE4-0x0068BC9C
	[IteratorStateMachine] // 0x00520368-0x005203CC
	private IEnumerator MoveRight(); // 0x0068BD10-0x0068BD70
	[IteratorStateMachine] // 0x005203CC-0x00520430
	private IEnumerator MoveLeft(); // 0x0068BD9C-0x0068BDFC
}

public class GemPickup : IPickup // TypeDefIndex: 3766
{
	// Constructors
	public GemPickup(); // 0x00652BB0-0x00652BB8

	// Methods
	public override void NotifyPickup(PickupParticles particles); // 0x00652A9C-0x00652BB0
}

public class HillAttachPickup : MonoBehaviour // TypeDefIndex: 3767
{
	// Fields
	public BoxCollider trigger; // 0x18
	public bool fix; // 0x20
	public bool canLean; // 0x21
	public bool IsStartTramcar; // 0x22
	public Transform StartPlace; // 0x28
	private bool canPickup; // 0x30
	public bool IsFall; // 0x31
	public HillType hilltype; // 0x34

	// Nested types
	public enum HillType // TypeDefIndex: 3768
	{
		None = 0,
		HillInto = 1,
		HillOut = 2,
		HillOver = 3
	}

	// Constructors
	public HillAttachPickup(); // 0x006DA6D8-0x006DA6E0

	// Methods
	private void Awake(); // 0x006DA2B8-0x006DA404
	public void OnActivate(); // 0x006DA404-0x006DA4C4
	public void OnDeactivate(); // 0x006DA4C4-0x006DA4CC
	public void NotifyTake(); // 0x006DA4CC-0x006DA6D8
}

public class IPickup : BaseO // TypeDefIndex: 3769
{
	// Fields
	public Collider pickupCollider; // 0x18
	public MeshRenderer meshRenderer; // 0x20
	public MeshRenderer[] meshrenderers; // 0x28
	public Glow glow; // 0x30
	public bool IsCanPickupAttachment; // 0x38
	protected bool canPickup; // 0x39

	// Constructors
	public IPickup(); // 0x006DB290-0x006DB298

	// Methods
	public virtual void SetVisible(bool visible); // 0x006DAC80-0x006DAD60
	public virtual void Activate(); // 0x006DADF8-0x006DAEBC
	public virtual void Deactivate(); // 0x006DAEBC-0x006DAF78
	public override void OnActivate(); // 0x006DAF78-0x006DB020
	public override void OnDeactivate(); // 0x006DB020-0x006DB0C4
	public virtual void NotifyPickup(PickupParticles pickupParticles); // 0x006DB0C4-0x006DB25C
	private bool random(int max); // 0x006DB25C-0x006DB290
	private void setotherMesh(bool show); // 0x006DAD60-0x006DADF8
}

public class OutCtlPickup : IPickup // TypeDefIndex: 3770
{
	// Fields
	public bool canctl; // 0x3A

	// Constructors
	public OutCtlPickup(); // 0x006A2988-0x006A2990

	// Methods
	public override void NotifyPickup(PickupParticles particles); // 0x006A2914-0x006A2988
}

public class PickupParticles : MonoBehaviour // TypeDefIndex: 3771
{
	// Fields
	public GameObject CoinEFX; // 0x18
	public GameObject PowerUpEFX; // 0x20
	public AnimationCurve compressCurve; // 0x28
	[SerializeField] // 0x00518540-0x00518550
	private EffectDetails coinEffect; // 0x30
	[SerializeField] // 0x00518550-0x00518560
	private EffectDetails powerupEffect; // 0x38
	[SerializeField] // 0x00518560-0x00518570
	private ParticleSystem coinPs; // 0x40
	public static Vector3 coinEfxOffset; // 0x00
	private int coinStairway; // 0x48
	private int flyCount; // 0x4C
	private Flypack flypack; // 0x50
	private int[] slendro; // 0x58
	private AudioSource Hr_coin; // 0x60

	// Nested types
	[Serializable]
	private class EffectDetails // TypeDefIndex: 3772
	{
		// Fields
		public Transform target; // 0x10
		public float duration; // 0x18
		public AnimationCurve scaleCurve; // 0x20

		// Constructors
		public EffectDetails(); // 0x006A74D4-0x006A74E8
	}

	[CompilerGenerated] // 0x00514440-0x00514450
	private sealed class __c__DisplayClass12_0 // TypeDefIndex: 3773
	{
		// Fields
		public Renderer render; // 0x10
		public Material material; // 0x18
		public EffectDetails details; // 0x20

		// Constructors
		public __c__DisplayClass12_0(); // 0x006A70E4-0x006A70EC

		// Methods
		internal void _EffectCoroutine_b__0(float t); // 0x006A70EC-0x006A726C
	}

	[CompilerGenerated] // 0x00514450-0x00514460
	private sealed class _EffectCoroutine_d__12 : IEnumerator<object> // TypeDefIndex: 3774
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public EffectDetails details; // 0x20
		public PickupParticles __4__this; // 0x28
		private __c__DisplayClass12_0 __8__1; // 0x30

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526474-0x00526484 */ get; } // 0x006A7460-0x006A7468 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526494-0x005264A4 */ get; } // 0x006A74CC-0x006A74D4 

		// Constructors
		[DebuggerHidden] // 0x00526454-0x00526464
		public _EffectCoroutine_d__12(int __1__state); // 0x006A66DC-0x006A6708

		// Methods
		[DebuggerHidden] // 0x00526464-0x00526474
		void IDisposable.Dispose(); // 0x006A726C-0x006A7270
		private bool MoveNext(); // 0x006A7270-0x006A7460
		[DebuggerHidden] // 0x00526484-0x00526494
		void IEnumerator.Reset(); // 0x006A7468-0x006A74CC
	}

	// Constructors
	public PickupParticles(); // 0x006A6FC8-0x006A7040
	static PickupParticles(); // 0x006A7040-0x006A70E4

	// Methods
	private void Start(); // 0x006A6598-0x006A665C
	[IteratorStateMachine] // 0x00520430-0x00520494
	private IEnumerator EffectCoroutine(EffectDetails details); // 0x006A665C-0x006A66DC
	private void OnDestroy(); // 0x006A6708-0x006A67FC
	private void OnFlypackStop(); // 0x006A67FC-0x006A6804
	private void PlaySoundNow(string name, Vector3 position, ref AudioSource audio, float pitch); // 0x006A6804-0x006A6A8C
	public void PickedupCoin(IPickup pickup); // 0x006A6A8C-0x006A6EB0
	public void PickedupDefaultPowerUp(); // 0x006A6EB0-0x006A6EE0
	public void PickedupPowerUp(); // 0x006A6EE0-0x006A6FC8
}

public class PickupRotate : BaseO // TypeDefIndex: 3775
{
	// Fields
	public Transform target; // 0x18
	public float speed; // 0x20
	public float rotatePhase; // 0x24
	private float z; // 0x28
	private int frame; // 0x2C

	// Constructors
	public PickupRotate(); // 0x006A777C-0x006A7794

	// Methods
	protected override void Awake(); // 0x006A74E8-0x006A7518
	public override void OnActivate(); // 0x006A7518-0x006A7638
	public override void OnDeactivate(); // 0x006A7638-0x006A767C
	public void PhasedRotate(); // 0x006A767C-0x006A777C
}

public class PickupSuperChest : IPickup // TypeDefIndex: 3776
{
	// Constructors
	public PickupSuperChest(); // 0x006A7810-0x006A7818

	// Methods
	public override void NotifyPickup(PickupParticles particles); // 0x006A7794-0x006A7810
}

public class RaftPickup : IPickup // TypeDefIndex: 3777
{
	// Constructors
	public RaftPickup(); // 0x0072A42C-0x0072A434

	// Methods
	public override void NotifyPickup(PickupParticles pickupParticles); // 0x0072A394-0x0072A42C
}

public class RevertFOVPickup : IPickup // TypeDefIndex: 3778
{
	// Fields
	private GameCamera characterCamera; // 0x40
	private float FOV; // 0x48
	private float fovTransition; // 0x4C
	public bool IsRevertFov; // 0x50

	// Nested types
	[CompilerGenerated] // 0x00514460-0x00514470
	private sealed class __c__DisplayClass5_0 // TypeDefIndex: 3779
	{
		// Fields
		public RevertFOVPickup __4__this; // 0x10
		public float fov_start; // 0x18
		public float fov_end; // 0x1C

		// Constructors
		public __c__DisplayClass5_0(); // 0x00730DB4-0x00730DBC

		// Methods
		internal void _RevertFOV_b__0(float t); // 0x00730DDC-0x00730FE8
	}

	[CompilerGenerated] // 0x00514470-0x00514480
	private sealed class __c__DisplayClass6_0 // TypeDefIndex: 3780
	{
		// Fields
		public RevertFOVPickup __4__this; // 0x10
		public float fov_start; // 0x18
		public float fov_end; // 0x1C

		// Constructors
		public __c__DisplayClass6_0(); // 0x00730DBC-0x00730DC4

		// Methods
		internal void _SetFOV_b__0(float t); // 0x00730FE8-0x007310A8
	}

	// Constructors
	public RevertFOVPickup(); // 0x00730DC4-0x00730DDC

	// Methods
	public override void NotifyPickup(PickupParticles particles); // 0x00730ACC-0x00730ADC
	private void RevertFOV(); // 0x00730ADC-0x00730C94
	private void SetFOV(); // 0x00730C94-0x00730DB4
}

public class ShieldPickup : IPickup // TypeDefIndex: 3781
{
	// Constructors
	public ShieldPickup(); // 0x006C78B8-0x006C78C0

	// Methods
	public override void NotifyPickup(PickupParticles pickupParticles); // 0x006C77FC-0x006C78B8
}

public class SpawnUpgrade : Randomizer // TypeDefIndex: 3782
{
	// Fields
	public GameObject doubleScoreMultiplier; // 0x18
	public GameObject sprint; // 0x20
	public GameObject shield; // 0x28
	public GameObject magnetBooster; // 0x30
	public GameObject gem; // 0x38
	public GameObject chest; // 0x40

	// Constructors
	public SpawnUpgrade(); // 0x006CC5F0-0x006CC5F8

	// Methods
	public override void PerformRandomizer(List<GameObject> objects); // 0x006CC218-0x006CC24C
}

public class SpringJumpPickup : IPickup // TypeDefIndex: 3783
{
	// Fields
	[SerializeField] // 0x00518570-0x00518580
	private bool willShowPickup; // 0x3A

	// Constructors
	public SpringJumpPickup(); // 0x00FBCE80-0x00FBCE88

	// Methods
	public override void NotifyPickup(PickupParticles particles); // 0x00FBCE0C-0x00FBCE80
}

public class SprintPickup : IPickup // TypeDefIndex: 3784
{
	// Constructors
	public SprintPickup(); // 0x00FBFA0C-0x00FBFA14

	// Methods
	protected override void Awake(); // 0x00FBF978-0x00FBF980
	public override void NotifyPickup(PickupParticles pickupParticles); // 0x00FBF980-0x00FBFA0C
}

public class SuperChestPickup : IPickup // TypeDefIndex: 3785
{
	// Constructors
	public SuperChestPickup(); // 0x00FC3F28-0x00FC3F30

	// Methods
	public override void NotifyPickup(PickupParticles particles); // 0x00FC3EBC-0x00FC3F28
}

public class SuperShoesPickup : IPickup // TypeDefIndex: 3786
{
	// Constructors
	public SuperShoesPickup(); // 0x00FC44B0-0x00FC44B8

	// Methods
	public override void NotifyPickup(PickupParticles particles); // 0x00FC4438-0x00FC44B0
}

public class TramcarPickup : MonoBehaviour // TypeDefIndex: 3787
{
	// Fields
	public BoxCollider trigger; // 0x18
	public bool fix; // 0x20
	public bool canLean; // 0x21
	public bool IsStartTramcar; // 0x22
	private bool canPickup; // 0x23

	// Constructors
	public TramcarPickup(); // 0x007BA3E4-0x007BA3EC

	// Methods
	private void Awake(); // 0x007BA05C-0x007BA1A0
	public void OnActivate(); // 0x007BA1A0-0x007BA314
	public void OnDeactivate(); // 0x007BA314-0x007BA31C
	public void NotifyTake(); // 0x007BA31C-0x007BA3E4
}

public class TransltionPickup : IPickup // TypeDefIndex: 3788
{
	// Fields
	private EnvType nextEnvType; // 0x3C

	// Constructors
	public TransltionPickup(); // 0x007BB4EC-0x007BB4F4

	// Methods
	private void Start(); // 0x007BB338-0x007BB484
	public override void NotifyPickup(PickupParticles pickupParticles); // 0x007BB484-0x007BB4EC
}

public enum TimeLinetriggerEvent // TypeDefIndex: 3789
{
	NONE = 0,
	ToMineStart = 1,
	ToMineTrackStart = 2
}

public class TriggerEventTimeLine : MonoBehaviour // TypeDefIndex: 3790
{
	// Fields
	public TimeLinetriggerEvent triggertype; // 0x18

	// Constructors
	public TriggerEventTimeLine(); // 0x007BF0EC-0x007BF0F4

	// Methods
	private void OnTriggerEnter(Collider other); // 0x007BEFF0-0x007BF0EC
}

public abstract class Randomizer : MonoBehaviour // TypeDefIndex: 3791
{
	// Constructors
	protected Randomizer(); // 0x0072B120-0x0072B128

	// Methods
	public void InitializeRandomizer(); // 0x0072B128-0x0072B1BC
	public abstract void PerformRandomizer(List<GameObject> objects);
}

public class RandomizerHold : Randomizer // TypeDefIndex: 3792
{
	// Fields
	[SerializeField] // 0x00518580-0x00518590
	private GameObject[] children; // 0x18
	private static int startIndex; // 0x00
	private static float distance; // 0x04
	private static int[] randomIndices; // 0x08

	// Constructors
	public RandomizerHold(); // 0x0072B3D4-0x0072B3DC
	static RandomizerHold(); // 0x0072B3DC-0x0072B474

	// Methods
	public static void Initialize(); // 0x0072B1BC-0x0072B24C
	public override void PerformRandomizer(List<GameObject> objects); // 0x0072B24C-0x0072B3D4
}

public class RandomizerOne : Randomizer // TypeDefIndex: 3793
{
	// Constructors
	public RandomizerOne(); // 0x0072B5A0-0x0072B5A8

	// Methods
	public override void PerformRandomizer(List<GameObject> objects); // 0x0072B474-0x0072B5A0
}

public class RandomizerTarget : Randomizer // TypeDefIndex: 3794
{
	// Fields
	public List<GameObject> Targets; // 0x18

	// Constructors
	public RandomizerTarget(); // 0x0072B69C-0x0072B6A4

	// Methods
	public override void PerformRandomizer(List<GameObject> objects); // 0x0072B5A8-0x0072B69C
}

public class SelectorOffset : MonoBehaviour // TypeDefIndex: 3795
{
	// Fields
	public RandomOffsets randomOffsets; // 0x18

	// Nested types
	[Serializable]
	public class RandomOffsets // TypeDefIndex: 3796
	{
		// Fields
		public bool left; // 0x10
		public bool mid; // 0x11
		public bool right; // 0x12

		// Constructors
		public RandomOffsets(); // 0x006C51BC-0x006C51D4
	}

	// Constructors
	public SelectorOffset(); // 0x006C51B4-0x006C51BC

	// Methods
	public void ChooseRandomOffset(); // 0x006C4DA8-0x006C4FA0
	private void SetCheckPointFromChildren(Transform trans, int range); // 0x006C4FA0-0x006C51B4
}

[RequireComponent] // 0x00513AC8-0x00513B2C
public class Sky : MonoBehaviour // TypeDefIndex: 3797
{
	// Fields
	public Character target; // 0x18
	private Transform curTrans; // 0x20
	private Transform targetTran; // 0x28
	[SerializeField] // 0x00518590-0x005185A0
	private SerializedLightmapSetting serializedLightmapSetting; // 0x30
	[SerializeField] // 0x005185A0-0x005185B0
	private float textureChangeDuration; // 0x38
	private Vector3 originalPos; // 0x3C
	private Color originalColor; // 0x48
	private float originalTintValue; // 0x58
	private Material mat; // 0x60
	private bool fadingInThenOutTineValue; // 0x68
	private bool fadingTineValue; // 0x69
	private float duration; // 0x6C
	private float startValue; // 0x70
	private float factor; // 0x74
	private bool fadingAMultiplier; // 0x78
	private float aMultiplierDuration; // 0x7C
	private float aMultiplierCurrentValue; // 0x80
	private float aMultiplierFactor; // 0x84
	private CharacterRenderingEffects effects; // 0x88
	private EnvWheather currentWheather; // 0x90
	private MeshRenderer shymesh; // 0xD0
	private static Sky _instance; // 0x00

	// Properties
	public static Sky Instance { get; } // 0x006C7C20-0x006C7D80 

	// Constructors
	public Sky(); // 0x006C9260-0x006C9270

	// Methods
	private void Awake(); // 0x006C7D80-0x006C7EF0
	public void SetSkyMesh(); // 0x006C7EF0-0x006C7FB8
	private void Start(); // 0x006C7FB8-0x006C810C
	public void Init(); // 0x006C810C-0x006C82F4
	public void SetMatOriginalColor(); // 0x006C82F8-0x006C8380
	public void SetMatOriginalTintValue(); // 0x006C8380-0x006C8404
	private void SetMatColor(Color color); // 0x006C8404-0x006C84BC
	private void SetMatTexture(Texture texture, bool shine = false /* Metadata: 0x001F5FF3 */); // 0x006C84BC-0x006C8590
	private void SetMatTintValue(float value); // 0x006C8590-0x006C8624
	private float GetMatTintValue(); // 0x006C8624-0x006C86A8
	private void AddMatTintValue(float time); // 0x006C86A8-0x006C876C
	private void FadeTintValue(float duration); // 0x006C876C-0x006C87EC
	private void FadeAMultiplier(float duration); // 0x006C87EC-0x006C8800
	private void Update(); // 0x006C8800-0x006C8A90
	private void LateUpdate(); // 0x006C8A90-0x006C8DC8
	public void ChangeTintValue(bool indoor); // 0x006C8DC8-0x006C8F58
	public void ChangeSky(Environment env); // 0x006C82F4-0x006C82F8
	private void SetNewWheather(Environment env); // 0x006C8F58-0x006C91F0
	public void StartRain(); // 0x006C91F0-0x006C920C
	public void StopRain(); // 0x006C9228-0x006C9244
	public void StartSnow(); // 0x006C920C-0x006C9228
	public void StopSnow(); // 0x006C9244-0x006C9260
}

public class Track : MonoBehaviour // TypeDefIndex: 3798
{
	// Fields
	public EnvType envType; // 0x18
	public Transform origin; // 0x20
	public Transform trackLeft; // 0x28
	public Transform trackRight; // 0x30
	public int numberOfTracks; // 0x38
	public float cleanUpDistance; // 0x3C
	public float aheadDistance; // 0x40
	public float aheadAlpha; // 0x44
	public float trackSpacing; // 0x48
	public List<SubEnv> subEnvs; // 0x50
	public Dictionary<TrackPieceType, List<TrackPiece>> TrackPieces; // 0x58
	[CompilerGenerated] // 0x005185B0-0x005185C0
	private Environment _Environment_k__BackingField; // 0x60

	// Properties
	public Environment Environment { [CompilerGenerated] /* 0x00520494-0x005204A4 */ get; [CompilerGenerated] /* 0x005204A4-0x005204B4 */ private set; } // 0x00FD4A54-0x00FD4A5C 0x00FD4A5C-0x00FD4A64

	// Constructors
	public Track(); // 0x00FD4A64-0x00FD4A64

	// Methods
	public void Awake(); // 0x00FD3A34-0x00FD3E7C
	public void AddToChunks(TrackPiece newPiece); // 0x00FD40C4-0x00FD42F4
	public void AddToDict(TrackPiece tp); // 0x00FD42F4-0x00FD4478
	public SubEnv GetSubEnv(int subOrder); // 0x00FD4478-0x00FD45AC
	public void Restart(); // 0x00FD3E7C-0x00FD40C4
	private void ResetOriginPoint(); // 0x00FD45AC-0x00FD4668
	public void MoveCharacterOriginPoint(Vector3 oldForward, Vector3 forward, float z); // 0x00FD4668-0x00FD47F8
	public Vector3 GetPosition(float x, float z, Transform target); // 0x00FD47F8-0x00FD4954
	public float GetTrackX(int trackIndex); // 0x00FD4954-0x00FD4964
	public float GetDistanceSinceCharacterOrigin(Vector3 position, Vector3 forward); // 0x00FD4964-0x00FD4A54
}

public class TrackController : MonoBehaviour // TypeDefIndex: 3799
{
	// Fields
	public Dictionary<EnvType, Track> trackDict; // 0x18
	public Track currentTrack; // 0x20
	public int sizePerJetpact; // 0x28
	public bool limitTurns; // 0x2C
	public int[] chestZ; // 0x30
	public EnvType firstEnvType; // 0x38
	[HideInInspector] // 0x005185C0-0x005185D0
	public int MinDistanceBetweenJunctions; // 0x3C
	[HideInInspector] // 0x005185D0-0x005185E0
	public int MaxDistanceBetweenTurns; // 0x40
	[HideInInspector] // 0x005185E0-0x005185F0
	public int MinDistanceBetweenTurns; // 0x44
	[HideInInspector] // 0x005185F0-0x00518600
	public int NumberOfTracks; // 0x48
	[HideInInspector] // 0x00518600-0x00518610
	public float AheadDistance; // 0x4C
	[HideInInspector] // 0x00518610-0x00518620
	public float AheadAlpha; // 0x50
	[HideInInspector] // 0x00518620-0x00518630
	public float TrackSpacing; // 0x54
	public TrackRenderer[] TrackRenderers; // 0x58
	private List<TrackPiece> activeTrackPieces; // 0x60
	private List<TrackPiece> trackPiecesForDeactivation; // 0x68
	public List<TrackPieceType> QueueList; // 0x70
	private bool firstTrackPiece; // 0x78
	public int nextChestIndex; // 0x7C
	private bool willChangeMainMusic; // 0x80
	public bool showInvincibleRecursiveVisibility; // 0x81
	public bool canLayChest; // 0x82
	[HideInInspector] // 0x00518630-0x00518640
	public EnvType forceNextEnvType; // 0x84
	public EnvType nextEnvType; // 0x88
	[HideInInspector] // 0x00518640-0x00518650
	public int taskSet; // 0x8C
	private Dictionary<string, TrackRenderer> trackRendererDict; // 0x90
	private Flypack flypack; // 0x98
	private TrackPieceController trackPieces; // 0xA0
	private TrackPiece FlyOnFirstTrackPiece; // 0xA8
	private float FlyOnCharacterZ; // 0xB0
	private Transform target; // 0xB8
	private static TrackController instance; // 0x00
	[CompilerGenerated] // 0x00518650-0x00518660
	private bool _IsRunningOnTutorialTrack_k__BackingField; // 0xC0

	// Properties
	public static TrackController Instance { get; } // 0x007AB8EC-0x007AB9B8 
	public bool IsRunningOnTutorialTrack { [CompilerGenerated] /* 0x0052057C-0x0052058C */ get; [CompilerGenerated] /* 0x0052058C-0x0052059C */ set; } // 0x007AF334-0x007AF33C 0x007AF33C-0x007AF348
	public List<TrackPiece> ActiveTrackPieces { get; } // 0x007AF348-0x007AF350 
	public EnvType CuurentEnvType { get; } // 0x007AF350-0x007AF3E4 
	public int SubtrackId { get; } // 0x007AF3E4-0x007AF50C 

	// Nested types
	private struct GameObjectWrapper // TypeDefIndex: 3800
	{
		// Fields
		public GameObject GameObject; // 0x00
		public float z; // 0x08

		// Properties
		public float Z { get; } // 0x00581198-0x005811E4 

		// Constructors
		public GameObjectWrapper(GameObject gameObject); // 0x00581190-0x00581198
	}

	private struct SelectorWrapper // TypeDefIndex: 3801
	{
		// Fields
		public GameObject GameObject; // 0x00
		public float z; // 0x08
		public Randomizer Selector; // 0x10

		// Properties
		public float Z { get; } // 0x005811EC-0x00581228 

		// Constructors
		public SelectorWrapper(Randomizer selector, GameObject gameObject); // 0x005811E4-0x005811EC
	}

	[Serializable]
	[CompilerGenerated] // 0x00514480-0x00514490
	private sealed class __c // TypeDefIndex: 3802
	{
		// Fields
		public static readonly __c __9; // 0x00
		public static Comparison<TrackObject> __9__57_0; // 0x08
		public static Comparison<TrackPiece.TrackCheckPoint> __9__57_1; // 0x10

		// Constructors
		static __c(); // 0x007AF5F8-0x007AF65C
		public __c(); // 0x007AF65C-0x007AF664

		// Methods
		internal int _LayTrackPieceAsync_b__57_0(TrackObject to1, TrackObject to2); // 0x007AF664-0x007AF6F0
		internal int _LayTrackPieceAsync_b__57_1(TrackPiece.TrackCheckPoint t1, TrackPiece.TrackCheckPoint t2); // 0x007AF6F0-0x007AF71C
	}

	[CompilerGenerated] // 0x00514490-0x005144A0
	private sealed class _LayTrackPieceAsync_d__57 : IEnumerator<object> // TypeDefIndex: 3803
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public TrackController __4__this; // 0x20
		public TrackPiece trackPiece; // 0x28
		private TrackObject[] _toes_5__2; // 0x30
		private int _i_5__3; // 0x38
		private List<TrackPiece.TrackCheckPoint> _CheckPoints_5__4; // 0x40
		private CheckPoint[] _cps_5__5; // 0x48
		private int _index_5__6; // 0x50

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005264C4-0x005264D4 */ get; } // 0x007AFF4C-0x007AFF54 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005264E4-0x005264F4 */ get; } // 0x007AFFB8-0x007AFFC0 

		// Constructors
		[DebuggerHidden] // 0x005264A4-0x005264B4
		public _LayTrackPieceAsync_d__57(int __1__state); // 0x007AEB00-0x007AEB2C

		// Methods
		[DebuggerHidden] // 0x005264B4-0x005264C4
		void IDisposable.Dispose(); // 0x007AF71C-0x007AF720
		private bool MoveNext(); // 0x007AF720-0x007AFBC0
		[DebuggerHidden] // 0x005264D4-0x005264E4
		void IEnumerator.Reset(); // 0x007AFF54-0x007AFFB8
	}

	[CompilerGenerated] // 0x005144A0-0x005144B0
	private sealed class _PerformRecursiveRandomizer_d__58 : IEnumerator<object> // TypeDefIndex: 3804
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public TrackPiece parent; // 0x20
		public bool sortSpawnUpgrades; // 0x28
		private IEnumerator _enumerator_5__2; // 0x30

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526514-0x00526524 */ get; } // 0x007B00F4-0x007B00FC 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526534-0x00526544 */ get; } // 0x007B0160-0x007B020C 

		// Constructors
		[DebuggerHidden] // 0x005264F4-0x00526504
		public _PerformRecursiveRandomizer_d__58(int __1__state); // 0x007AEBB4-0x007AEBE0

		// Methods
		[DebuggerHidden] // 0x00526504-0x00526514
		void IDisposable.Dispose(); // 0x007AFFC0-0x007AFFC4
		private bool MoveNext(); // 0x007AFFC4-0x007B00F4
		[DebuggerHidden] // 0x00526524-0x00526534
		void IEnumerator.Reset(); // 0x007B00FC-0x007B0160
	}

	// Constructors
	public TrackController(); // 0x007AF50C-0x007AF5F8

	// Methods
	private void Awake(); // 0x007AB9B8-0x007ABB84
	public void AddTrack(EnvType envType, Track track); // 0x007ABC00-0x007ABCB4
	public void RemoveTrack(EnvType envType); // 0x007ABDA0-0x007ABE38
	public void SetEnvSetLimitData(EnvType envType); // 0x007ABE38-0x007ABE7C
	public Material GetMaterial(bool useOpaque, string key); // 0x007ABF70-0x007AC020
	public Environment NextLevelWithUnlockEnvironment(int level); // 0x007AC020-0x007AC328
	public Environment GetEnvironmentWithLockedLevel(int level); // 0x007AC328-0x007AC460
	public void ChangeToNextEnvironment(bool isContinue); // 0x007AC460-0x007AC590
	private void ChangeEnvironment(Track track, bool isContinue); // 0x007AC590-0x007ACACC
	public SubEnv GetSubScene(int subId); // 0x007AD6D8-0x007AD784
	public Environment GetCurrentEnvironment(); // 0x007AD784-0x007AD818
	public void CleanupTrackPieces(float characterZ); // 0x007AD818-0x007ADA10
	public void DeactivateTrackPieces(); // 0x007ADA10-0x007ADAD0
	public void CleanupWhenTurnOnJunction(TrackPiece tp, bool alternate); // 0x007ADAD0-0x007ADCF0
	public void LayEmptyPieces(float characterZ, float removeDistance); // 0x007ADD10-0x007ADD18
	private void RemovePieceObstacles(float removeDistance); // 0x007ADD18-0x007ADDCC
	public void SetStartCity(); // 0x007AE048-0x007AE1CC
	public void End(); // 0x007AE1CC-0x007AE25C
	public void Restart(); // 0x007AE25C-0x007AE378
	public TrackPiece CreateTrackRoot(EnvType envType); // 0x007AE378-0x007AE664
	public void LayTrackPieces(); // 0x007AE664-0x007AE87C
	public float LayJetpackPieces(float characterZ, float flyLength, bool alternate = false /* Metadata: 0x001F5FF4 */); // 0x007AE87C-0x007AEA54
	public void LayTrackPiece(TrackPiece TrackPiece); // 0x007AEA54-0x007AEA80
	[IteratorStateMachine] // 0x005204B4-0x00520518
	private IEnumerator LayTrackPieceAsync(TrackPiece trackPiece); // 0x007AEA80-0x007AEB00
	[IteratorStateMachine] // 0x00520518-0x0052057C
	private IEnumerator PerformRecursiveRandomizer(TrackPiece parent, bool sortSpawnUpgrades = true /* Metadata: 0x001F5FF5 */); // 0x007AEB2C-0x007AEBB4
	public Vector3 GetPosition(float x, float z); // 0x007AEBE0-0x007AECF4
	public float GetTrackX(int trackIndex); // 0x007AECF4-0x007AEDA0
	public float GetDistanceSinceCharacterOrigin(Vector3 position); // 0x007AEDA0-0x007AEECC
	public void MoveCharacterOriginPoint(Vector3 oldForward, Vector3 forward, float z); // 0x007AEECC-0x007AEEE8
	public float GetLastCheckPoint(float characterZ); // 0x007AEEE8-0x007AEFFC
	public bool AllowFlypack(); // 0x007AF10C-0x007AF258
	public void ChangeTintValueAndBackgroundMusic(bool start = true /* Metadata: 0x001F5FF6 */); // 0x007AD4C8-0x007AD6D8
	public bool IsPieceInActivePieces(TrackPiece piece); // 0x007AF258-0x007AF334
}

[Serializable]
public class TrackRenderer // TypeDefIndex: 3805
{
	// Fields
	public string key; // 0x10
	public Material opaqueMaterial; // 0x18
	public Material fadeoutMaterial; // 0x20

	// Constructors
	public TrackRenderer(); // 0x007B84C4-0x007B84CC
}

public class AnimationActivator : BaseO // TypeDefIndex: 3806
{
	// Fields
	private Animation anim; // 0x18
	public float animspeed; // 0x20

	// Constructors
	public AnimationActivator(); // 0x0070C4C4-0x0070C4D4

	// Methods
	protected override void Awake(); // 0x0070C01C-0x0070C088
	public override void OnActivate(); // 0x0070C210-0x0070C484
	public override void OnDeactivate(); // 0x0070C484-0x0070C4C4
}

public class AnimationsActivator : BaseO // TypeDefIndex: 3807
{
	// Fields
	private Animation[] animations; // 0x18

	// Constructors
	public AnimationsActivator(); // 0x00710230-0x00710238

	// Methods
	protected override void Awake(); // 0x0070FF5C-0x0070FFC8
	public override void OnActivate(); // 0x0070FFC8-0x007100FC
	public override void OnDeactivate(); // 0x007100FC-0x00710230
}

[RequireComponent] // 0x00513B2C-0x00513B90
public class BaseO : MonoBehaviour // TypeDefIndex: 3808
{
	// Constructors
	public BaseO(); // 0x0070C4D4-0x0070C4DC

	// Methods
	protected virtual void Awake(); // 0x0070C088-0x0070C210
	public virtual void OnActivate(); // 0x007183AC-0x007183B0
	public virtual void OnDeactivate(); // 0x007183B0-0x007183B4
}

public class CoinPlaceholder : BaseO // TypeDefIndex: 3809
{
	// Fields
	private TrackObject coin; // 0x18
	private CoinPool coinPool; // 0x20

	// Constructors
	public CoinPlaceholder(); // 0x00671A98-0x00671AA0

	// Methods
	protected override void Awake(); // 0x00671708-0x00671734
	public override void OnActivate(); // 0x00671734-0x006718A8
	public override void OnDeactivate(); // 0x006718A8-0x00671948
	private void OnDrawGizmos(); // 0x00671A48-0x00671A98
}

public interface ITouchByCharacter // TypeDefIndex: 3810
{
	// Methods
	bool BeTouched();
}

public class KickedInFly : BaseO, ITouchByCharacter // TypeDefIndex: 3811
{
	// Fields
	public string kickedClip; // 0x18
	private Vector3 originLPos; // 0x20
	private Quaternion originLQuat; // 0x2C
	private Collider col; // 0x40

	// Nested types
	[CompilerGenerated] // 0x005144B0-0x005144C0
	private sealed class _BeKickedOff_C_d__7 : IEnumerator<object> // TypeDefIndex: 3812
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public KickedInFly __4__this; // 0x20
		private float _startZ_5__2; // 0x28
		private float _startX_5__3; // 0x2C
		private Quaternion _quat_5__4; // 0x30
		private Quaternion _to_5__5; // 0x40
		private float _rate_5__6; // 0x50

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526564-0x00526574 */ get; } // 0x006EF758-0x006EF760 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526584-0x00526594 */ get; } // 0x006EF7C4-0x006EF7CC 

		// Constructors
		[DebuggerHidden] // 0x00526544-0x00526554
		public _BeKickedOff_C_d__7(int __1__state); // 0x006EF378-0x006EF3A4

		// Methods
		[DebuggerHidden] // 0x00526554-0x00526564
		void IDisposable.Dispose(); // 0x006EF3AC-0x006EF3B0
		private bool MoveNext(); // 0x006EF3B0-0x006EF758
		[DebuggerHidden] // 0x00526574-0x00526584
		void IEnumerator.Reset(); // 0x006EF760-0x006EF7C4
	}

	// Constructors
	public KickedInFly(); // 0x006EF3A4-0x006EF3AC

	// Methods
	protected override void Awake(); // 0x006EF0EC-0x006EF190
	public override void OnActivate(); // 0x006EF190-0x006EF20C
	public bool BeTouched(); // 0x006EF20C-0x006EF304
	[IteratorStateMachine] // 0x0052059C-0x00520600
	private IEnumerator BeKickedOff_C(); // 0x006EF304-0x006EF378
}

[RequireComponent] // 0x00513B90-0x00513BF4
public class Mirror : BaseO // TypeDefIndex: 3813
{
	// Fields
	private Transform[] children; // 0x18

	// Constructors
	public Mirror(); // 0x0088EE40-0x0088EE48

	// Methods
	protected override void Awake(); // 0x0088EA0C-0x0088EB40
	public override void OnActivate(); // 0x0088EB40-0x0088EC2C
	private void SetCheckPointFromChildren(Transform trans, int num); // 0x0088EC2C-0x0088EE40
}

public class MovingAnimal : MovingO // TypeDefIndex: 3814
{
	// Fields
	[SerializeField] // 0x00518660-0x00518670
	private Animation anim; // 0x60
	[SerializeField] // 0x00518670-0x00518680
	private string runClip; // 0x68
	private float originLPosZForChild; // 0x70
	private bool moveFirstUpdate; // 0x74

	// Properties
	protected override float Distance { get; } // 0x00890054-0x008900FC 
	protected override float Speed { get; } // 0x008900FC-0x00890104 

	// Constructors
	public MovingAnimal(); // 0x00890104-0x00890174

	// Methods
	protected override void Awake(); // 0x0088F958-0x0088F990
	public override void OnActivate(); // 0x0088FB34-0x0088FBA8
	public override void OnDeactivate(); // 0x0088FCE4-0x0088FD74
	protected override void Update(); // 0x0088FEC8-0x0088FF54
}

public class MovingO : BaseO // TypeDefIndex: 3815
{
	// Fields
	private static List<MovingO> activeMovings; // 0x00
	protected static CharacterController characterController; // 0x08
	public static float autoPilotActivationDistance; // 0x10
	public float speed; // 0x18
	protected Game game; // 0x20
	protected bool autoPilot; // 0x28
	protected BoxCollider Collider; // 0x30
	protected Transform child; // 0x38
	protected Transform curTrans; // 0x40
	private Vector3 position; // 0x48
	[CompilerGenerated] // 0x00518680-0x00518690
	private float _Distance_k__BackingField; // 0x54
	[CompilerGenerated] // 0x00518690-0x005186A0
	private float _Speed_k__BackingField; // 0x58

	// Properties
	protected virtual float Distance { [CompilerGenerated] /* 0x00520600-0x00520610 */ get; [CompilerGenerated] /* 0x00520610-0x00520620 */ private set; } // 0x008908E0-0x008908E8 0x008908E8-0x008908F0
	protected virtual float Speed { [CompilerGenerated] /* 0x00520620-0x00520630 */ get; [CompilerGenerated] /* 0x00520630-0x00520640 */ private set; } // 0x008908F0-0x008908F8 0x008908F8-0x00890900

	// Constructors
	public MovingO(); // 0x00890174-0x00890184
	static MovingO(); // 0x00890900-0x00890984

	// Methods
	protected override void Awake(); // 0x0088F990-0x0088FB34
	protected virtual void Init(); // 0x008905B4-0x008905B8
	public override void OnActivate(); // 0x0088FBA8-0x0088FCE4
	public override void OnDeactivate(); // 0x0088FD74-0x0088FEC8
	protected virtual void Update(); // 0x0088FF54-0x00890054
	public static void ActivateAutoPilot(); // 0x008905B8-0x00890780
	public void OnDrawGizmos(); // 0x00890780-0x008908E0
}

public class MovingOCrocodile : MovingO // TypeDefIndex: 3816
{
	// Fields
	[SerializeField] // 0x005186A0-0x005186B0
	private float trigger; // 0x5C
	[SerializeField] // 0x005186B0-0x005186C0
	private Animation anim; // 0x60
	[SerializeField] // 0x005186C0-0x005186D0
	private string runClip; // 0x68
	[SerializeField] // 0x005186D0-0x005186E0
	private string attackClip; // 0x70
	[SerializeField] // 0x005186E0-0x005186F0
	private Transform neck; // 0x78
	[SerializeField] // 0x005186F0-0x00518700
	private AudioClip audioClip; // 0x80
	private bool firstPlayAttackClip; // 0x88
	private float temp; // 0x8C

	// Properties
	protected override float Distance { get; } // 0x00890C14-0x00890CBC 
	protected override float Speed { get; } // 0x00890CBC-0x00890CC4 

	// Constructors
	public MovingOCrocodile(); // 0x00890CC4-0x00890D34

	// Methods
	protected override void Awake(); // 0x00890984-0x008909F4
	public override void OnActivate(); // 0x008909F4-0x00890A58
	public override void OnDeactivate(); // 0x00890A58-0x00890A88
	protected override void Update(); // 0x00890A88-0x00890C14
}

[RequireComponent] // 0x00513BF4-0x00513C58
public class MovingRobberWeapon : MonoBehaviour // TypeDefIndex: 3817
{
	// Fields
	private static MovingRobberWeapon activeweapon; // 0x00
	private CharacterController characterController; // 0x18
	private Game game; // 0x20
	private bool isInitialized; // 0x28
	private bool isPaused; // 0x29
	public float speed; // 0x2C
	private Transform MovingWeapon; // 0x30
	public bool willStop; // 0x38
	public float stopDistance; // 0x3C
	private Animation anim; // 0x40
	private Vector3 position; // 0x48
	private float dis; // 0x54

	// Constructors
	public MovingRobberWeapon(); // 0x008916A8-0x008916C0

	// Methods
	public void Awake(); // 0x00890D34-0x00890F60
	private void HandleOnPauseChange(bool pause); // 0x00890FA0-0x00890FAC
	private void Init(); // 0x00890F60-0x00890FA0
	public void OnActivate(); // 0x00890FAC-0x00891218
	public void OnDeactivate(); // 0x00891218-0x00891364
	public void Stop(); // 0x00891364-0x00891370
	public void OnDrawGizmos(); // 0x00891370-0x008914D0
	public void Update(); // 0x008914D0-0x008916A8
}

[RequireComponent] // 0x00513C58-0x00513CBC
public class MovingTrain : MonoBehaviour // TypeDefIndex: 3818
{
	// Fields
	[SerializeField] // 0x00518700-0x00518710
	private TrainType trainType; // 0x18
	private static List<MovingTrain> activeTrains; // 0x00
	private bool autoPilot; // 0x1C
	public static float autoPilotActivationDistance; // 0x08
	private CharacterController characterController; // 0x20
	private Game game; // 0x28
	private bool isInitialized; // 0x30
	private bool isPaused; // 0x31
	public float speed; // 0x34
	private Transform train; // 0x38
	private BoxCollider trainCollider; // 0x40
	public float trainCount; // 0x48
	public AudioSource trainPassSource; // 0x50
	public AudioClip trianPassClip; // 0x58
	public Direction direction; // 0x60
	public bool willStop; // 0x64
	public float stopDistance; // 0x68
	private Animation anim; // 0x70
	private Vector3 position; // 0x78
	private float dis; // 0x84

	// Nested types
	public enum Direction // TypeDefIndex: 3819
	{
		vertical = 0,
		acrossLTR = 1,
		acrossRTL = 2
	}

	public enum TrainType // TypeDefIndex: 3820
	{
		train = 0,
		shield = 1
	}

	// Constructors
	public MovingTrain(); // 0x00892C60-0x00892C88
	static MovingTrain(); // 0x00892C88-0x00892D0C

	// Methods
	public static void ActivateAutoPilot(); // 0x008916C0-0x00891A18
	public void Awake(); // 0x00891A18-0x00891F24
	private void HandleOnPauseChange(bool pause); // 0x00891F64-0x00891FD4
	private void Init(); // 0x00891F24-0x00891F64
	public void OnActivate(); // 0x00891FD4-0x008924DC
	public void OnDeactivate(); // 0x008924DC-0x0089267C
	public void Stop(); // 0x0089267C-0x008926B8
	public void OnDrawGizmos(); // 0x008926B8-0x00892818
	public void Update(); // 0x00892818-0x00892C60
}

public class ParticleActivator : BaseO // TypeDefIndex: 3821
{
	// Fields
	private ParticleSystem ps; // 0x18

	// Constructors
	public ParticleActivator(); // 0x006A54B8-0x006A54C0

	// Methods
	protected override void Awake(); // 0x006A53D8-0x006A5480
	public override void OnActivate(); // 0x006A5480-0x006A549C
	public override void OnDeactivate(); // 0x006A549C-0x006A54B8
}

public class RendererActivator : BaseO // TypeDefIndex: 3822
{
	// Fields
	private RendererToMaterials rendererToMaterial; // 0x18
	private bool usingOpaque; // 0x20

	// Constructors
	public RendererActivator(); // 0x0072EE8C-0x0072EE94

	// Methods
	protected override void Awake(); // 0x0072E698-0x0072EAC0
	public override void OnActivate(); // 0x0072EAC8-0x0072EB28
	public override void OnDeactivate(); // 0x0072ED88-0x0072EDF4
}

public class RendererActivatorManager : MonoBehaviour // TypeDefIndex: 3823
{
	// Fields
	private List<RendererToMaterials> rendererActivators; // 0x18
	private List<RendererToMaterials> TmpRenders; // 0x20
	private Vector3 dis; // 0x28
	private static RendererActivatorManager _instance; // 0x00

	// Properties
	public static RendererActivatorManager Instance { get; } // 0x0072EB28-0x0072EC88 

	// Constructors
	public RendererActivatorManager(); // 0x0072F3AC-0x0072F3B4

	// Methods
	private void Start(); // 0x0072EE94-0x0072EEFC
	public void AddRendererActivator(RendererToMaterials rendererActivator); // 0x0072EC88-0x0072ED54
	public void RemoveRendererActivator(RendererToMaterials rendererActivator); // 0x0072EDF4-0x0072EE8C
	public void LateUpdate(); // 0x0072EEFC-0x0072F030
	private void OnLateUpdate(); // 0x0072F030-0x0072F354
	public void ClearRendererActivators(); // 0x0072F354-0x0072F3AC
}

public class RenderersActivator : BaseO // TypeDefIndex: 3824
{
	// Fields
	private RendererToMaterials[] rendererToMaterials; // 0x18
	private ParticleSystem[] particles; // 0x20
	private bool usingOpaque; // 0x28

	// Constructors
	public RenderersActivator(); // 0x0072FB98-0x0072FBA0

	// Methods
	protected override void Awake(); // 0x0072F3B4-0x0072F8C4
	public override void OnActivate(); // 0x0072F8C4-0x0072F9E0
	private void SetMaterials(); // 0x0072F9E0-0x0072FA6C
	public override void OnDeactivate(); // 0x0072FA6C-0x0072FB98
}

public class RendererToMaterials // TypeDefIndex: 3825
{
	// Fields
	public MeshRenderer renderer; // 0x10
	public Material[] opaqueMaterial; // 0x18
	public Material[] fadeoutMaterial; // 0x20
	public Bounds Bounds; // 0x28

	// Constructors
	public RendererToMaterials(); // 0x0072EAC0-0x0072EAC8

	// Methods
	public void SetMaterials(bool usingOpaque); // 0x0072ED54-0x0072ED88
}

public class RobberTrigger : MonoBehaviour // TypeDefIndex: 3826
{
	// Fields
	public AnimationEvents events; // 0x18
	public Animation anim; // 0x20
	private TrackObject trackObject; // 0x28
	private int curRoad; // 0x30
	public OnTriggerObject triggerObject; // 0x38
	public OnTriggerObject triggerObject_robber; // 0x40
	public OnTriggerObject triggerObject_robberAlter; // 0x48
	public Collider[] colliders; // 0x50
	private Transform Robbernew; // 0x58
	public AnimationCurve robberflySpeedSet; // 0x60
	public float allmoveTime; // 0x68
	private TrackObject temp; // 0x70
	private string animClip; // 0x78
	public float delay; // 0x80
	public string sound; // 0x88
	public int soundFrames; // 0x90
	public ParticleSystem[] pses; // 0x98
	public int particlesFrames; // 0xA0
	public bool shake; // 0xA4
	public int shakeFrames; // 0xA8
	public float intensity; // 0xAC
	public float shakeDuration; // 0xB0
	private RobberModel tempRobber; // 0xB8

	// Nested types
	[CompilerGenerated] // 0x005144C0-0x005144D0
	private sealed class _playIdleRandom_d__14 : IEnumerator<object> // TypeDefIndex: 3827
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public RobberTrigger __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005265B4-0x005265C4 */ get; } // 0x006BDEE4-0x006BDEEC 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005265D4-0x005265E4 */ get; } // 0x006BDF50-0x006BDF58 

		// Constructors
		[DebuggerHidden] // 0x00526594-0x005265A4
		public _playIdleRandom_d__14(int __1__state); // 0x006BC150-0x006BC17C

		// Methods
		[DebuggerHidden] // 0x005265A4-0x005265B4
		void IDisposable.Dispose(); // 0x006BDDF0-0x006BDDF4
		private bool MoveNext(); // 0x006BDDF4-0x006BDEE4
		[DebuggerHidden] // 0x005265C4-0x005265D4
		void IEnumerator.Reset(); // 0x006BDEEC-0x006BDF50
	}

	[CompilerGenerated] // 0x005144D0-0x005144E0
	private sealed class _StartPlayAnimations_d__23 : IEnumerator<object> // TypeDefIndex: 3828
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public RobberTrigger __4__this; // 0x20
		private IEnumerator _coroutine_5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526604-0x00526614 */ get; } // 0x006BD7C0-0x006BD7C8 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526624-0x00526634 */ get; } // 0x006BD82C-0x006BD834 

		// Constructors
		[DebuggerHidden] // 0x005265E4-0x005265F4
		public _StartPlayAnimations_d__23(int __1__state); // 0x006BCA6C-0x006BCA98

		// Methods
		[DebuggerHidden] // 0x005265F4-0x00526604
		void IDisposable.Dispose(); // 0x006BD6A8-0x006BD6AC
		private bool MoveNext(); // 0x006BD6AC-0x006BD7C0
		[DebuggerHidden] // 0x00526614-0x00526624
		void IEnumerator.Reset(); // 0x006BD7C8-0x006BD82C
	}

	[CompilerGenerated] // 0x005144E0-0x005144F0
	private sealed class _PlayAnimation_d__35 : IEnumerator<object> // TypeDefIndex: 3829
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public RobberTrigger trigger; // 0x20
		public RobberTrigger __4__this; // 0x28
		private float _time_5__2; // 0x30

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526654-0x00526664 */ get; } // 0x006BD634-0x006BD63C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526674-0x00526684 */ get; } // 0x006BD6A0-0x006BD6A8 

		// Constructors
		[DebuggerHidden] // 0x00526634-0x00526644
		public _PlayAnimation_d__35(int __1__state); // 0x006BCB18-0x006BCB44

		// Methods
		[DebuggerHidden] // 0x00526644-0x00526654
		void IDisposable.Dispose(); // 0x006BD530-0x006BD534
		private bool MoveNext(); // 0x006BD534-0x006BD634
		[DebuggerHidden] // 0x00526664-0x00526674
		void IEnumerator.Reset(); // 0x006BD63C-0x006BD6A0
	}

	[CompilerGenerated] // 0x005144F0-0x00514500
	private sealed class _moveRobber_d__43 : IEnumerator<object> // TypeDefIndex: 3830
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public RobberTrigger __4__this; // 0x20
		public bool IsByChar; // 0x28
		private float _time_5__2; // 0x2C
		private float _robberFlyTime_5__3; // 0x30

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005266A4-0x005266B4 */ get; } // 0x006BDD7C-0x006BDD84 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005266C4-0x005266D4 */ get; } // 0x006BDDE8-0x006BDDF0 

		// Constructors
		[DebuggerHidden] // 0x00526684-0x00526694
		public _moveRobber_d__43(int __1__state); // 0x006BD324-0x006BD350

		// Methods
		[DebuggerHidden] // 0x00526694-0x005266A4
		void IDisposable.Dispose(); // 0x006BD834-0x006BD838
		private bool MoveNext(); // 0x006BD838-0x006BDD7C
		[DebuggerHidden] // 0x005266B4-0x005266C4
		void IEnumerator.Reset(); // 0x006BDD84-0x006BDDE8
	}

	// Constructors
	public RobberTrigger(); // 0x006BD518-0x006BD530

	// Methods
	private void Awake(); // 0x006BB624-0x006BBA7C
	private void OnActivate(); // 0x006BBA7C-0x006BBDA4
	[IteratorStateMachine] // 0x00520640-0x005206A4
	private IEnumerator playIdleRandom(); // 0x006BC0DC-0x006BC150
	private void OnDeactivate(); // 0x006BC17C-0x006BC2D0
	private void OnEnterRobberAlter(Collider other); // 0x006BC35C-0x006BC4C8
	private void OnExitRobberAlter(Collider other); // 0x006BC4C8-0x006BC4CC
	private void OnEnterRobberOver(Collider other); // 0x006BC4CC-0x006BC558
	private void RobberOver(bool IsOver); // 0x006BC558-0x006BC6A8
	private void OnExitRobberOver(Collider other); // 0x006BC6A8-0x006BC6AC
	private void OnExit(Collider other); // 0x006BC6AC-0x006BC6B0
	private void OnEnter(Collider other); // 0x006BC6B0-0x006BC7F8
	[IteratorStateMachine] // 0x005206A4-0x00520708
	private IEnumerator StartPlayAnimations(); // 0x006BC9F8-0x006BCA6C
	public bool OnEnter(RobberTrigger trigger); // 0x006BC7F8-0x006BC9F8
	[IteratorStateMachine] // 0x00520708-0x0052076C
	public IEnumerator PlayAnimation(RobberTrigger trigger); // 0x006BCA98-0x006BCB18
	private void OnPlaySound(); // 0x006BCB44-0x006BCC28
	private void OnShake(); // 0x006BCC28-0x006BCC78
	private void OnPlayParticles(); // 0x006BCC78-0x006BCD00
	public void OnRewind(RobberTrigger trigger); // 0x006BBF80-0x006BC0DC
	public void OnResetEvent(RobberTrigger trigger); // 0x006BCD00-0x006BCEEC
	public void HitRobber(); // 0x006BB2A4-0x006BB36C
	private void OnTriggerEnter(Collider other); // 0x006BCF74-0x006BD1D4
	[IteratorStateMachine] // 0x0052076C-0x005207D0
	private IEnumerator moveRobber(bool IsByChar = true /* Metadata: 0x001F600B */); // 0x006BCEEC-0x006BCF74
	public void SetRobberModel(); // 0x006BBDA4-0x006BBF80
	public void SetRobberOver(); // 0x006BC2D0-0x006BC35C
	public RobberModel GetRobber(); // 0x006BD350-0x006BD518
}

public class SetUISpriteToGray : MonoBehaviour // TypeDefIndex: 3831
{
	// Fields
	public Material role; // 0x18
	public Material roleGray; // 0x20
	private UISprite sp; // 0x28
	public ParticleSystem LockedPS; // 0x30

	// Nested types
	[CompilerGenerated] // 0x00514500-0x00514510
	private sealed class _showLocking_d__7 : IEnumerator<object> // TypeDefIndex: 3832
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public SetUISpriteToGray __4__this; // 0x20
		private float _times_5__2; // 0x28
		private float _alltime_5__3; // 0x2C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005266F4-0x00526704 */ get; } // 0x006C59A4-0x006C59AC 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526714-0x00526724 */ get; } // 0x006C5A10-0x006C5A18 

		// Constructors
		[DebuggerHidden] // 0x005266D4-0x005266E4
		public _showLocking_d__7(int __1__state); // 0x006C56A8-0x006C56D4

		// Methods
		[DebuggerHidden] // 0x005266E4-0x005266F4
		void IDisposable.Dispose(); // 0x006C56E4-0x006C56E8
		private bool MoveNext(); // 0x006C56E8-0x006C59A4
		[DebuggerHidden] // 0x00526704-0x00526714
		void IEnumerator.Reset(); // 0x006C59AC-0x006C5A10
	}

	// Constructors
	public SetUISpriteToGray(); // 0x006C56DC-0x006C56E4

	// Methods
	private void Awake(); // 0x006C54E0-0x006C5538
	public void ResetSprite(bool Islocked); // 0x006C5538-0x006C55D0
	public void StartToshow(); // 0x006C55D0-0x006C5634
	[IteratorStateMachine] // 0x005207D0-0x00520834
	private IEnumerator showLocking(); // 0x006C5634-0x006C56A8
	private void OnDisable(); // 0x006C56D4-0x006C56DC
}

public class SoundActivator : BaseO // TypeDefIndex: 3833
{
	// Fields
	private AudioSource source; // 0x18
	[SerializeField] // 0x00518710-0x00518720
	private AudioClipInfo clipInfo; // 0x20

	// Constructors
	public SoundActivator(); // 0x006CC174-0x006CC17C

	// Methods
	protected override void Awake(); // 0x006CBE00-0x006CC01C
	public override void OnActivate(); // 0x006CC01C-0x006CC0E0
	public override void OnDeactivate(); // 0x006CC0E0-0x006CC174
}

[Serializable]
public class AudioClipInfo // TypeDefIndex: 3834
{
	// Fields
	public AudioClip Clip; // 0x10
	public float minPitch; // 0x18
	public float maxPitch; // 0x1C
	public float minVolume; // 0x20
	public float maxVolume; // 0x24
	public AudioRolloffMode Rollof; // 0x28

	// Constructors
	public AudioClipInfo(); // 0x007104A8-0x007104C4
}

public class TrackObject : MonoBehaviour // TypeDefIndex: 3835
{
	// Fields
	public OnActivateDelegate OnActivate; // 0x18
	public OnDeactivateDelegate OnDeactivate; // 0x20

	// Nested types
	public delegate void OnActivateDelegate(); // TypeDefIndex: 3836; 0x007B1450-0x007B166C

	public delegate void OnDeactivateDelegate(); // TypeDefIndex: 3837; 0x007B167C-0x007B1898

	// Constructors
	public TrackObject(); // 0x007B189C-0x007B18A4

	// Methods
	public void Activate(); // 0x007AFF18-0x007AFF4C
	public void Deactivate(); // 0x007B166C-0x007B167C
	public virtual void OnActivateNow(); // 0x007B1898-0x007B189C
}

public class TriggerO : BaseO // TypeDefIndex: 3838
{
	// Fields
	[SerializeField] // 0x00518720-0x00518730
	protected OnTriggerObject onTrigger; // 0x18
	[SerializeField] // 0x00518730-0x00518740
	protected Animation anim; // 0x20
	[SerializeField] // 0x00518740-0x00518750
	protected string idleClip; // 0x28
	[SerializeField] // 0x00518750-0x00518760
	protected float interval; // 0x30

	// Constructors
	public TriggerO(); // 0x007BF418-0x007BF420

	// Methods
	protected override void Awake(); // 0x007BF0F4-0x007BF1FC
	public override void OnActivate(); // 0x007BF1FC-0x007BF36C
	public override void OnDeactivate(); // 0x007BF36C-0x007BF414
	public virtual void TriggerOnEnter(Collider collider); // 0x007BF414-0x007BF418
}

public class TriggerOAnimation : TriggerO // TypeDefIndex: 3839
{
	// Fields
	[SerializeField] // 0x00518760-0x00518770
	private string triggerClip; // 0x38

	// Constructors
	public TriggerOAnimation(); // 0x007BF578-0x007BF580

	// Methods
	public override void TriggerOnEnter(Collider collider); // 0x007BF420-0x007BF578
}

public class TriggerOMoveOCrocodile : TriggerO // TypeDefIndex: 3840
{
	// Fields
	[SerializeField] // 0x00518770-0x00518780
	private string transitionClip; // 0x38
	[SerializeField] // 0x00518780-0x00518790
	private string triggerClip; // 0x40
	private Transform child; // 0x48
	private float delayTime; // 0x50
	private float time; // 0x54
	private float originLPosZForChild; // 0x58
	private float rate; // 0x5C
	private Character character; // 0x60
	private bool moveFirstUpdate; // 0x68

	// Constructors
	public TriggerOMoveOCrocodile(); // 0x007BF924-0x007BF92C

	// Methods
	protected override void Awake(); // 0x007BF580-0x007BF5E0
	public override void OnActivate(); // 0x007BF5E0-0x007BF64C
	public override void OnDeactivate(); // 0x007BF64C-0x007BF678
	public override void TriggerOnEnter(Collider collider); // 0x007BF678-0x007BF784
	private void Update(); // 0x007BF784-0x007BF924
}

public class TunnelActivator : MonoBehaviour // TypeDefIndex: 3841
{
	// Fields
	public int id; // 0x18
	private TrackObject to; // 0x20
	private TrackPiece tp; // 0x28

	// Constructors
	public TunnelActivator(); // 0x007C03FC-0x007C0404

	// Methods
	private void Awake(); // 0x007C01F8-0x007C0380
	private void OnActivate(); // 0x007C0380-0x007C03FC
}

public class WaterBoard : BaseO, ITouchByCharacter // TypeDefIndex: 3842
{
	// Fields
	[SerializeField] // 0x00518790-0x005187A0
	private float distance; // 0x18
	[SerializeField] // 0x005187A0-0x005187B0
	private Transform target; // 0x20
	[SerializeField] // 0x005187B0-0x005187C0
	private float MoveZ; // 0x28
	[SerializeField] // 0x005187C0-0x005187D0
	private Transform end; // 0x30
	private BoxCollider BCollider; // 0x38
	private Vector3 originLPos; // 0x40
	private Transform curTrans; // 0x50
	private Character character; // 0x58
	private float endZ; // 0x60
	private float offset; // 0x64
	private bool beTouchedFirstUpdate; // 0x68
	private int x; // 0x6C
	public static Action<int> GetOnWaterBoard; // 0x00
	public static Action<int> GetOffWaterBoard; // 0x08

	// Constructors
	public WaterBoard(); // 0x00A95AD0-0x00A95AD8

	// Methods
	protected override void Awake(); // 0x00A955FC-0x00A9579C
	public override void OnActivate(); // 0x00A9579C-0x00A95864
	public override void OnDeactivate(); // 0x00A95864-0x00A95870
	public bool BeTouched(); // 0x00A95870-0x00A9598C
	private void LateUpdate(); // 0x00A9598C-0x00A95A4C
	private void OnEnd(); // 0x00A95A4C-0x00A95AD0
}

[Serializable]
public class TrackIdxPro // TypeDefIndex: 3843
{
	// Fields
	public bool left; // 0x10
	public bool mid; // 0x11
	public bool right; // 0x12

	// Constructors
	public TrackIdxPro(); // 0x007B1448-0x007B1450
}

public class TrackPiece : MonoBehaviour // TypeDefIndex: 3844
{
	// Fields
	public int subscene; // 0x18
	public bool isNative; // 0x1C
	public TrackPieceType trackPieceType; // 0x20
	public TrackSceneType trackSceneType; // 0x24
	public float zSize; // 0x28
	public int probability; // 0x2C
	public float zMinimum; // 0x30
	public bool zMaximumActive; // 0x34
	public float zMaximum; // 0x38
	public List<TrackCheckPoint> CheckPoints; // 0x40
	public TrackObject[] objects; // 0x48
	public CheckPoint[] points; // 0x50
	public bool isSingleChainPiece; // 0x58
	public bool hasSorted; // 0x59
	public EnvType nextEnvType; // 0x5C
	public int nextSubEnv; // 0x60
	public PieceTypeDefine define; // 0x68
	private Node node; // 0x70
	private Dictionary<Transform, Vector3> hiddenObstacles; // 0x78
	public List<Transform> PathLocations; // 0x80
	public List<Transform> Alternate_PathLocations; // 0x88
	public List<Vector3> GeneratedPath; // 0x90
	public bool UseAlternaterGeneratedPath; // 0x98
	public List<Vector3> Alternate_GeneratedPath; // 0xA0
	public float Alternate_GeneratedPathLength; // 0xA8
	private int currentSegment; // 0xAC
	public TrackPiece PreviousTrackPiece; // 0xB0
	public TrackPiece NextTrackPiece; // 0xB8
	public TrackPiece Alternate_NextTrackPiece; // 0xC0
	public List<FadeShowFadeHide> InvincibleObjects; // 0xC8
	public List<Transform> InvincibleEffects; // 0xD0
	public TrackPieceData pieceData; // 0xD8
	public CRSpline SplinePath; // 0xE0
	public float GeneratedPathLength; // 0xE8
	public float EstimateLength; // 0xEC
	public int lastTurntype; // 0xF0
	public List<TrackPieceType> PostPieces; // 0xF8
	public float lastZ; // 0x100
	public float DistanceSinceLastEnvironmentChange; // 0x104
	public float DistanceSinceLastPortalZ; // 0x108
	public float DistanceSinceLastSubEnvChange; // 0x10C
	public float DistanceSinceLastFlypackSpawn; // 0x110
	public float DistanceSinceLastJunction; // 0x114
	public float DistanceSinceLastTurn; // 0x118
	public TrackPiece forceNextTrack; // 0x120
	public bool IsforceNext; // 0x128
	public bool NoClearOb; // 0x129
	public bool CloseCharControllerInSlope; // 0x12A
	public bool IsHill; // 0x12B
	public bool IsalwaysTurn; // 0x12C
	public TrackIdxPro NoCharCtlCollider; // 0x130
	[CompilerGenerated] // 0x005187D0-0x005187E0
	private static OnDoTurnDelegate onDoTurn; // 0x00
	[CompilerGenerated] // 0x005187E0-0x005187F0
	private static OnDoTurnEndDelegate onDoTurnEnd; // 0x08
	[CompilerGenerated] // 0x005187F0-0x00518800
	private static OnEnvSetChangeDelegate onEnvSetChange; // 0x10
	[CompilerGenerated] // 0x00518800-0x00518810
	private static OnWillTurnNextSegmentDelegate onWillTurnNextSegment; // 0x18
	[CompilerGenerated] // 0x00518810-0x00518820
	private bool _IsActive_k__BackingField; // 0x138

	// Properties
	public int CurrentSegment { get; set; } // 0x007B1944-0x007B194C 0x007B194C-0x007B1954
	public bool IsActive { [CompilerGenerated] /* 0x005208B4-0x005208C4 */ get; [CompilerGenerated] /* 0x005208C4-0x005208D4 */ set; } // 0x007B5CE0-0x007B5CE8 0x007B5CE8-0x007B5CF4
	public Node Node { get; } // 0x007B5CF4-0x007B5CFC 

	// Events
	public static event OnDoTurnDelegate onDoTurn {
		add; // 0x007B1B00-0x007B1BB4
		remove; // 0x007B1BB4-0x007B1C68
	}
	public static event OnDoTurnEndDelegate onDoTurnEnd {
		add; // 0x007B1C68-0x007B1D20
		remove; // 0x007B1D20-0x007B1DD8
	}
	public static event OnEnvSetChangeDelegate onEnvSetChange {
		add; // 0x007B1DD8-0x007B1E90
		remove; // 0x007B1E90-0x007B1F48
	}
	public static event OnWillTurnNextSegmentDelegate onWillTurnNextSegment {
		add; // 0x007B1F48-0x007B2000
		remove; // 0x007B2000-0x007B20B8
	}

	// Nested types
	public delegate void OnDoTurnDelegate(TrackPiece piece, int segment); // TypeDefIndex: 3845; 0x007B3AE4-0x007B3EC4

	public delegate void OnDoTurnEndDelegate(TrackPiece piece, int segment); // TypeDefIndex: 3846; 0x007B3EC4-0x007B42A4

	public delegate void OnEnvSetChangeDelegate(TrackPiece piece, int segment); // TypeDefIndex: 3847; 0x007B42CC-0x007B46AC

	public delegate void OnWillTurnNextSegmentDelegate(TrackPiece piece, int segment); // TypeDefIndex: 3848; 0x007B3704-0x007B3AE4

	[Serializable]
	public class TrackCheckPoint // TypeDefIndex: 3849
	{
		// Fields
		public int TrackNumber; // 0x10
		public float Z; // 0x14

		// Constructors
		public TrackCheckPoint(); // 0x007B61A4-0x007B61AC
	}

	[Serializable]
	[CompilerGenerated] // 0x00514510-0x00514520
	private sealed class __c // TypeDefIndex: 3850
	{
		// Fields
		public static readonly __c __9; // 0x00
		public static Comparison<TrackCheckPoint> __9__66_0; // 0x08
		public static Comparison<TrackObject> __9__66_1; // 0x10

		// Constructors
		static __c(); // 0x007B5DA0-0x007B5E04
		public __c(); // 0x007B5E04-0x007B5E0C

		// Methods
		internal int _Awake_b__66_0(TrackCheckPoint x, TrackCheckPoint y); // 0x007B5E0C-0x007B5E38
		internal int _Awake_b__66_1(TrackObject to1, TrackObject to2); // 0x007B5E38-0x007B5EC4
	}

	// Constructors
	public TrackPiece(); // 0x007B5CFC-0x007B5DA0

	// Methods
	public void Awake(); // 0x007B20B8-0x007B27EC
	public void CreateSpline(); // 0x007B27EC-0x007B36A4
	private void CalcSegment(); // 0x007B1954-0x007B1B00
	public void ActiveObject(); // 0x007ACD38-0x007ACDEC
	public void Activate(); // 0x007ACD0C-0x007ACD38
	public void Deactivate(); // 0x007ACACC-0x007ACBFC
	public void Restart(); // 0x007B46AC-0x007B46D8
	public void DeactivateObstacles(float maxZ); // 0x007ADDCC-0x007AE048
	private void DeactiveObstaclesRecursive(Transform target, float maxZ); // 0x007B46D8-0x007B4BC4
	public void ShowInvincibleRecursiveVisibility(bool enable, bool inChildren = false /* Metadata: 0x001F600C */); // 0x007AFD48-0x007AFF18
	private void DrawGeneralPathGizmos(); // 0x007B4BC4-0x007B5590
	public Vector4 GetPosition(float x, float z, Transform trans, bool alternate = false /* Metadata: 0x001F600D */); // 0x007B5590-0x007B58FC
	public float GetLastCheckPoint_Z(float characterZ); // 0x007AEFFC-0x007AF10C
	public object GetNextCheckPoint_Type(string type, float characterZ); // 0x007B58FC-0x007B5AF0
	public void RestoreHiddenObstacles(); // 0x007AFBC0-0x007AFD48
	public bool IsSquare(); // 0x007B36A4-0x007B36C4
	public bool IsTurn(); // 0x007B36C4-0x007B3704
	public bool IsTurnLeft(); // 0x007B5AF0-0x007B5B28
	public bool IsTurnRight(); // 0x007B5B28-0x007B5B60
	public bool IsJunction(); // 0x007ADCF0-0x007ADD10
	public bool IsJetpackLanding(); // 0x007B5B60-0x007B5B88
	public bool IsNormal(); // 0x007B5B88-0x007B5BA8
	public bool IsEnvironmentEndToStart(); // 0x007B42A4-0x007B42CC
	public bool IsSubEnvEndToStart(); // 0x007B5BA8-0x007B5BD0
	public bool IsIntro(); // 0x007B5BD0-0x007B5BF8
	public bool IsChest(); // 0x007B5BF8-0x007B5C20
	public bool IsSlope(); // 0x007B5C20-0x007B5C40
	public bool IsAlwaysTurnOnActive(); // 0x007B5C40-0x007B5CE0
}

public static class TrackPieceConnectionMode // TypeDefIndex: 3851
{
	// Fields
	public static TrackPiece LastLaytrackPiece; // 0x00
	public static float LastZ; // 0x08
	private static bool canMoveMultipe; // 0x0C
	public static float TLastZ; // 0x10

	// Constructors
	static TrackPieceConnectionMode(); // 0x007B7ADC-0x007B7AE0

	// Methods
	private static void LayTrackPieceForece(TrackPiece newTrackPiece, TrackPiece curtrack); // 0x007B6B18-0x007B6BA8

	// Extension methods
	public static void AttachRandomPiece(this TrackPiece trackPiece, bool alternateRoute, List<TrackPieceType> queueList = null, int turn = 0 /* Metadata: 0x001F600E */); // 0x007ACDEC-0x007AD4C8
	private static TrackPiece AttachPiece(this TrackPiece trackPiece, TrackPieceType newPieceType, bool alternate = false /* Metadata: 0x001F6012 */); // 0x007B61AC-0x007B6538
	private static TrackPiece AttachPiece(this TrackPiece previousPiece, TrackPiece newPiece, bool alternate = false /* Metadata: 0x001F6013 */); // 0x007B721C-0x007B7730
	public static void LayTrackPiecePosition(this TrackPiece previousPiece, TrackPiece piece, bool alternate); // 0x007B7730-0x007B78E0
	public static TrackPiece GetRandomTrackPieceByType(this TrackPiece trackPiece, TrackPieceType pieceType, bool alternate = false /* Metadata: 0x001F6014 */); // 0x007B6BA8-0x007B721C
	public static TrackPieceType MoveForward(this TrackPiece previousPiece, float z, List<TrackPieceType> queueList = null, int turn = 0 /* Metadata: 0x001F6015 */); // 0x007B6538-0x007B6B18
}

public class TrackPieceController // TypeDefIndex: 3852
{
	// Fields
	public List<TrackPieceType> ActivePieceTypes; // 0x10
	private List<int> randomSpace; // 0x18
	private static TrackPieceController instance; // 0x00
	[CompilerGenerated] // 0x00518820-0x00518830
	private Dictionary<TrackPieceType, List<TrackPiece>> _TrackPieces_k__BackingField; // 0x20

	// Properties
	public static TrackPieceController Instance { get; } // 0x007ABB84-0x007ABC00 
	public Dictionary<TrackPieceType, List<TrackPiece>> TrackPieces { [CompilerGenerated] /* 0x00520934-0x00520944 */ get; [CompilerGenerated] /* 0x00520944-0x00520954 */ private set; } // 0x007B7C88-0x007B7C90 0x007B7C90-0x007B7C98

	// Constructors
	public TrackPieceController(); // 0x007B7AE0-0x007B7B78

	// Methods
	public void SetTrackPieces(Track track); // 0x007ACBFC-0x007ACC90
	public bool CanDeliver(); // 0x007B7B78-0x007B7BD4
	public TrackPiece TutorialTrackPiece(); // 0x007B7BD4-0x007B7C88
	public void Initialize(float z); // 0x007ACC90-0x007ACD0C
	public TrackPieceType GetRandomActive(); // 0x007B79DC-0x007B7ADC
	public void Recalculate(); // 0x007B78E0-0x007B79DC
}

[ExecuteInEditMode] // 0x00513CCC-0x00513CDC
public class TrackPieceData : MonoBehaviour // TypeDefIndex: 3853
{
	// Fields
	public List<Transform> PathLocations; // 0x18
	public List<Transform> Alternate_PathLocations; // 0x20
	public List<Transform> InvincibleObjects; // 0x28
	public List<Transform> InvincibleEffects; // 0x30
	public List<Vector3> CameraDirectionVectors; // 0x38
	public List<Vector3> CameraPositionOffsets; // 0x40
	public float EstimateLength; // 0x48
	public CRSpline SplinePath; // 0x50
	public List<Vector3> GeneratedPath; // 0x58
	public bool EditorSpline; // 0x60

	// Constructors
	public TrackPieceData(); // 0x007B841C-0x007B84C4

	// Methods
	[ContextMenu] // 0x00520954-0x0052098C
	public void CalcEstimateLength(); // 0x007B7C98-0x007B7E1C
	public void OnDrawGizmos(); // 0x007B7E1C-0x007B7E20
	private void Draw(); // 0x007B7E20-0x007B841C
}

public enum TrackSceneType // TypeDefIndex: 3854
{
	None = 0,
	Pool = 1,
	Hill = 2
}

public enum TrackPieceType // TypeDefIndex: 3855
{
	ZStaight = 0,
	ZTurnLeft = 1,
	ZTurnRight = 2,
	ZJunction = 3,
	ZSquareTurnLeft = 4,
	ZSquareTurnRight = 5,
	ZSquareJunction = 6,
	ZSlope = 7,
	Tutorial = 8,
	Intro = 9,
	Jetpack = 10,
	Jetpacklanding = 11,
	SubEnvTransition = 12,
	SubEnvTransitionSlop = 13,
	EnvTransition = 14,
	Chest = 15,
	ZMaxx = 16
}

public enum TrackPieceTypeCategory // TypeDefIndex: 3856
{
	kTrackPieceCategoryNormal = 0,
	kTrackPieceCategoryCompoundPieceStart = 1,
	kTrackPieceCategoryCompoundPieceMiddle = 2,
	kTrackPieceCategoryCompoundPieceEnd = 3,
	kTrackPieceCategoryJetpack = 4,
	kTrackPieceCategoryJetpackLanding = 5,
	kTrackPieceCategoryChest = 6,
	kTrackPieceCategoryEnvironmentPortal = 7,
	kTrackPieceCategorySubEnvironmentEndToStart = 8,
	kTrackPieceCategoryIntro = 9,
	kTrackPieceMaxx = 10
}

[Serializable]
public class PieceTypeDefine // TypeDefIndex: 3857
{
	// Fields
	public TrackPieceType pieceType; // 0x10
	public bool isNormal; // 0x14
	public bool IsSquare; // 0x15
	public bool IsTurnLeft; // 0x16
	public bool IsTurnRight; // 0x17
	public bool IsJunction; // 0x18
	public bool IsSlope; // 0x19
	public TrackPieceTypeCategory TrackCategory; // 0x1C
	public TrackPieceType AfterJunctionPiece; // 0x20
	public TrackPieceType CompoundPieceMiddleType; // 0x24
	public TrackPieceType CompoundPieceEndType; // 0x28
	public int CompoundPieceMinMiddleCount; // 0x2C
	public int CompoundPieceMaxMiddleCount; // 0x30
	public List<TrackPieceType> PrePieces; // 0x38
	public List<TrackPieceType> PostPieces; // 0x40
	public int probability; // 0x48

	// Constructors
	public PieceTypeDefine(); // 0x006A7850-0x006A7860

	// Methods
	public string ToJson(); // 0x006A7818-0x006A7820
	public PieceTypeDefine Load(string json); // 0x006A7820-0x006A7850
}

public class Tunnel : MonoBehaviour // TypeDefIndex: 3858
{
	// Fields
	public TunnelType type; // 0x18
	private Game game; // 0x20
	private float tunnelLength; // 0x28
	public float slope; // 0x2C
	public Transform start; // 0x30
	public Transform end; // 0x38
	public Transform fadeInOut; // 0x40
	private float fadeDistance; // 0x48
	private float startZ; // 0x4C
	private bool inTunnel; // 0x50

	// Nested types
	public enum TunnelType // TypeDefIndex: 3859
	{
		Tunnel = 0,
		Upstair = 1,
		Downstair = 2,
		None = 3
	}

	[CompilerGenerated] // 0x00514520-0x00514530
	private sealed class _FadeInOut_d__13 : IEnumerator<object> // TypeDefIndex: 3860
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Tunnel __4__this; // 0x20
		public float start; // 0x28
		public float distance; // 0x2C
		public float end; // 0x30
		private float _factor_5__2; // 0x34
		private int _i_5__3; // 0x38

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526744-0x00526754 */ get; } // 0x007C0184-0x007C018C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526764-0x00526774 */ get; } // 0x007C01F0-0x007C01F8 

		// Constructors
		[DebuggerHidden] // 0x00526724-0x00526734
		public _FadeInOut_d__13(int __1__state); // 0x007BFEC4-0x007BFEF0

		// Methods
		[DebuggerHidden] // 0x00526734-0x00526744
		void IDisposable.Dispose(); // 0x007C0008-0x007C000C
		private bool MoveNext(); // 0x007C000C-0x007C0184
		[DebuggerHidden] // 0x00526754-0x00526764
		void IEnumerator.Reset(); // 0x007C018C-0x007C01F0
	}

	// Constructors
	public Tunnel(); // 0x007BFFF8-0x007C0008

	// Methods
	private void Awake(); // 0x007BFA7C-0x007BFC54
	private void OnTriggerEnter(Collider collider); // 0x007BFC54-0x007BFDB4
	private void OnTriggerExit(Collider collider); // 0x007BFE4C-0x007BFEC4
	[IteratorStateMachine] // 0x0052098C-0x005209F0
	private IEnumerator FadeInOut(float start, float end, float distance); // 0x007BFDB4-0x007BFE4C
	public float GetYFromZ(float z); // 0x007BFEF0-0x007BFF58
	public float GetDeltaY(float deltaZ); // 0x007BFF58-0x007BFF64
	public float GetEndY(); // 0x007BFF64-0x007BFFF8
}

public class Tutorial : TrackObject // TypeDefIndex: 3861
{
	// Fields
	[SerializeField] // 0x00518830-0x00518840
	private bool displayText; // 0x28
	[SerializeField] // 0x00518840-0x00518850
	private string text; // 0x30
	[SerializeField] // 0x00518850-0x00518860
	private bool displayMesh; // 0x38
	[SerializeField] // 0x00518860-0x00518870
	private float meshDir; // 0x3C
	[SerializeField] // 0x00518870-0x00518880
	private float time; // 0x40
	[SerializeField] // 0x00518880-0x00518890
	private bool endTutorial; // 0x44
	[SerializeField] // 0x00518890-0x005188A0
	private bool ForestendTutorial; // 0x45
	private GameObject _mesh; // 0x48
	private Character character; // 0x50
	private Game game; // 0x58
	private bool hasInited; // 0x60
	private TrackController trackController; // 0x68
	public static bool NoPause; // 0x00
	public static bool TutorialOutCtl; // 0x01
	[SerializeField] // 0x005188A0-0x005188B0
	private bool TutorialOutCtlTrigger; // 0x70
	[SerializeField] // 0x005188B0-0x005188C0
	private bool WallWalkTrigger; // 0x71
	private int IsWallWalkState; // 0x74
	private bool tutorialWallwalk; // 0x78
	public bool ForcePauseNew; // 0x79
	public SwipeDir ForcePauseSwipeDir; // 0x7C
	public bool IsGood; // 0x80
	private bool IsShowNewMesh; // 0x81
	private Vector3 Meshpos; // 0x84
	private float NewMeshMoveTime; // 0x90

	// Properties
	public static int tutorialMap { get; set; } // 0x007C0404-0x007C04C4 0x007C04C4-0x007C0518
	public static int tutorialSkill { get; set; } // 0x007C0518-0x007C05DC 0x007C05DC-0x007C0630
	private GameObject Mesh { get; } // 0x007C0778-0x007C0878 

	// Nested types
	[CompilerGenerated] // 0x00514530-0x00514540
	private sealed class __c__DisplayClass32_0 // TypeDefIndex: 3862
	{
		// Fields
		public Tutorial __4__this; // 0x10
		public Vector3 pos; // 0x18

		// Constructors
		public __c__DisplayClass32_0(); // 0x007C1BE4-0x007C1BEC

		// Methods
		internal void _ShowMesh_b__0(float t); // 0x007C1BEC-0x007C1EC4
	}

	[CompilerGenerated] // 0x00514540-0x00514550
	private sealed class _ShowMesh_d__32 : IEnumerator<object> // TypeDefIndex: 3863
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Tutorial __4__this; // 0x20
		private __c__DisplayClass32_0 __8__1; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526794-0x005267A4 */ get; } // 0x007C2154-0x007C215C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005267B4-0x005267C4 */ get; } // 0x007C21C0-0x007C31C8 

		// Constructors
		[DebuggerHidden] // 0x00526774-0x00526784
		public _ShowMesh_d__32(int __1__state); // 0x007C147C-0x007C14A8

		// Methods
		[DebuggerHidden] // 0x00526784-0x00526794
		void IDisposable.Dispose(); // 0x007C1EC4-0x007C1EC8
		private bool MoveNext(); // 0x007C1EC8-0x007C2154
		[DebuggerHidden] // 0x005267A4-0x005267B4
		void IEnumerator.Reset(); // 0x007C215C-0x007C21C0
	}

	// Constructors
	public Tutorial(); // 0x007C1B60-0x007C1BE0
	static Tutorial(); // 0x007C1BE0-0x007C1BE4

	// Methods
	public bool ControlSwipeDir(SwipeDir dir); // 0x007C0630-0x007C0778
	private void CatchSwipeDir(SwipeDir dir); // 0x007C0878-0x007C0934
	private void Start(); // 0x007C095C-0x007C0B08
	private void OnTriggerEnter(Collider collider); // 0x007C0B08-0x007C0DD4
	private void OnTriggerExit(Collider collider); // 0x007C10F0-0x007C142C
	[IteratorStateMachine] // 0x005209F0-0x00520A54
	private IEnumerator ShowMesh(); // 0x007C0E30-0x007C0EA4
	private void Update(); // 0x007C14A8-0x007C1544
	private void ShowNewMeshStart(); // 0x007C0EA4-0x007C10F0
	private void ShowNewMeshState(); // 0x007C1544-0x007C19E4
	private void ShowNewMeshEnd(); // 0x007C0934-0x007C095C
	private void OnDisable(); // 0x007C19E4-0x007C1A54
	private void OnEnable(); // 0x007C1A54-0x007C1AFC
	private bool CompelteTutorial(); // 0x007C0DD4-0x007C0E30
	private void SetCompelteTutorial(); // 0x007C142C-0x007C147C
	public override void OnActivateNow(); // 0x007C1AFC-0x007C1B60
}

public class TutorialPanel : UIBaseScreen // TypeDefIndex: 3864
{
	// Fields
	[SerializeField] // 0x005188C0-0x005188D0
	private Transform mParent; // 0x98
	[SerializeField] // 0x005188D0-0x005188E0
	private Transform mFinger; // 0xA0
	private GameObject _tutorialButton; // 0xA8

	// Constructors
	public TutorialPanel(); // 0x007E3FF8-0x007E4000

	// Methods
	public void Ready(); // 0x007E39AC-0x007E3AA0
	public void Show(GameObject go, Vector3 offset, float angle); // 0x007E3AA0-0x007E3CC4
	public void ShowNew(GameObject go, Vector3 offset, float angle, Vector3 pos, float scale = 1f /* Metadata: 0x001F60A5 */); // 0x007E3CC4-0x007E3EFC
	public override void Hide(); // 0x007E3EFC-0x007E3FA8
}

public class AnimationCtrl : MonoBehaviour // TypeDefIndex: 3865
{
	// Fields
	public Animation _animation; // 0x18
	public string idleName; // 0x20
	public string enterName; // 0x28
	public string selectName; // 0x30
	public string quitName; // 0x38
	private bool isInAnimation; // 0x40
	private Dictionary<AniState, string> state2clip; // 0x48

	// Properties
	public bool IsInAnimation { get; } // 0x0070F62C-0x0070F634 

	// Nested types
	public enum AniState // TypeDefIndex: 3866
	{
		none = 0,
		enter = 1,
		idle = 2,
		selected = 3,
		quit = 4
	}

	[CompilerGenerated] // 0x00514550-0x00514560
	private sealed class _waitingForAni_d__13 : IEnumerator<object> // TypeDefIndex: 3867
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public AnimationCtrl __4__this; // 0x20
		public float time; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005267E4-0x005267F4 */ get; } // 0x0070F778-0x0070F780 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526804-0x00526814 */ get; } // 0x0070F7E4-0x0070F7EC 

		// Constructors
		[DebuggerHidden] // 0x005267C4-0x005267D4
		public _waitingForAni_d__13(int __1__state); // 0x0070F600-0x0070F62C

		// Methods
		[DebuggerHidden] // 0x005267D4-0x005267E4
		void IDisposable.Dispose(); // 0x0070F6A4-0x0070F6A8
		private bool MoveNext(); // 0x0070F6A8-0x0070F778
		[DebuggerHidden] // 0x005267F4-0x00526804
		void IEnumerator.Reset(); // 0x0070F780-0x0070F7E4
	}

	// Constructors
	public AnimationCtrl(); // 0x0070F634-0x0070F6A4

	// Methods
	private void Start(); // 0x0070F190-0x0070F258
	private void SetState(AniState newstate); // 0x0070F258-0x0070F3EC
	public void PlayEnterAni(); // 0x0070F470-0x0070F4D4
	public void PlayQuitAni(); // 0x0070F4D4-0x0070F538
	public void PlaySelectAni(); // 0x0070F538-0x0070F59C
	public void PlayIdleAni(); // 0x0070F59C-0x0070F600
	[IteratorStateMachine] // 0x00520A54-0x00520AB8
	private IEnumerator waitingForAni(float time); // 0x0070F3EC-0x0070F470
}

public class AnimationClipSpeed : MonoBehaviour // TypeDefIndex: 3868
{
	// Fields
	public float speed; // 0x18

	// Constructors
	public AnimationClipSpeed(); // 0x0070F188-0x0070F190
}

public class LoopMode : StageMenuSequence // TypeDefIndex: 3869
{
	// Fields
	public AnimationClip loopClip; // 0x38

	// Nested types
	[CompilerGenerated] // 0x00514560-0x00514570
	private sealed class _Play_d__2 : IEnumerator<object> // TypeDefIndex: 3870
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public LoopMode __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526834-0x00526844 */ get; } // 0x006F9E58-0x006F9E60 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526854-0x00526864 */ get; } // 0x006F9EC4-0x006F9ECC 

		// Constructors
		[DebuggerHidden] // 0x00526814-0x00526824
		public _Play_d__2(int __1__state); // 0x006F9C88-0x006F9CB4

		// Methods
		[DebuggerHidden] // 0x00526824-0x00526834
		void IDisposable.Dispose(); // 0x006F9D38-0x006F9D3C
		private bool MoveNext(); // 0x006F9D3C-0x006F9E58
		[DebuggerHidden] // 0x00526844-0x00526854
		void IEnumerator.Reset(); // 0x006F9E60-0x006F9EC4
	}

	// Constructors
	public LoopMode(); // 0x006F9D30-0x006F9D38

	// Methods
	public override void StartPlayIdleRummagesAnimation(); // 0x006F9B74-0x006F9C14
	[IteratorStateMachine] // 0x00520AB8-0x00520B1C
	protected override IEnumerator Play(); // 0x006F9C14-0x006F9C88
	public override void StopPlayIdleRummagesAnimation(); // 0x006F9CB4-0x006F9D30
}

public class OrderMode : StageMenuSequence // TypeDefIndex: 3871
{
	// Fields
	public AnimationClip[] orders; // 0x38
	private int selectIndex; // 0x40

	// Nested types
	[CompilerGenerated] // 0x00514570-0x00514580
	private sealed class _Play_d__3 : IEnumerator<object> // TypeDefIndex: 3872
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public OrderMode __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526884-0x00526894 */ get; } // 0x006A28A0-0x006A28A8 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005268A4-0x005268B4 */ get; } // 0x006A290C-0x006A2914 

		// Constructors
		[DebuggerHidden] // 0x00526864-0x00526874
		public _Play_d__3(int __1__state); // 0x006A25BC-0x006A25E8

		// Methods
		[DebuggerHidden] // 0x00526874-0x00526884
		void IDisposable.Dispose(); // 0x006A26E8-0x006A26EC
		private bool MoveNext(); // 0x006A26EC-0x006A28A0
		[DebuggerHidden] // 0x00526894-0x005268A4
		void IEnumerator.Reset(); // 0x006A28A8-0x006A290C
	}

	// Constructors
	public OrderMode(); // 0x006A26E0-0x006A26E8

	// Methods
	public override void StartPlayIdleRummagesAnimation(); // 0x006A242C-0x006A2548
	[IteratorStateMachine] // 0x00520B1C-0x00520B80
	protected override IEnumerator Play(); // 0x006A2548-0x006A25BC
	public override void StopPlayIdleRummagesAnimation(); // 0x006A25E8-0x006A26E0
}

public class RandomMode : StageMenuSequence // TypeDefIndex: 3873
{
	// Fields
	public AnimationClip[] idelRummages; // 0x38
	private AnimationClip selectClip; // 0x40

	// Nested types
	[CompilerGenerated] // 0x00514580-0x00514590
	private sealed class _Play_d__4 : IEnumerator<object> // TypeDefIndex: 3874
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public RandomMode __4__this; // 0x20
		private List<AnimationClip> _temps_5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005268D4-0x005268E4 */ get; } // 0x0072B0AC-0x0072B0B4 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005268F4-0x00526904 */ get; } // 0x0072B118-0x0072B120 

		// Constructors
		[DebuggerHidden] // 0x005268B4-0x005268C4
		public _Play_d__4(int __1__state); // 0x0072ACEC-0x0072AD18

		// Methods
		[DebuggerHidden] // 0x005268C4-0x005268D4
		void IDisposable.Dispose(); // 0x0072AE18-0x0072AE1C
		private bool MoveNext(); // 0x0072AE1C-0x0072B0AC
		[DebuggerHidden] // 0x005268E4-0x005268F4
		void IEnumerator.Reset(); // 0x0072B0B4-0x0072B118
	}

	// Constructors
	public RandomMode(); // 0x0072AE10-0x0072AE18

	// Methods
	private void Start(); // 0x0072AA40-0x0072AAE0
	public override void StartPlayIdleRummagesAnimation(); // 0x0072AAE0-0x0072AC78
	[IteratorStateMachine] // 0x00520B80-0x00520BE4
	protected override IEnumerator Play(); // 0x0072AC78-0x0072ACEC
	public override void StopPlayIdleRummagesAnimation(); // 0x0072AD18-0x0072AE10
}

public class StageMenuSequence : MonoBehaviour // TypeDefIndex: 3875
{
	// Fields
	protected float animationTime; // 0x18
	public Animation anim; // 0x20
	protected IEnumerator animationRoutine; // 0x28
	protected bool isPlay; // 0x30

	// Nested types
	[CompilerGenerated] // 0x00514590-0x005145A0
	private sealed class _Play_d__5 : IEnumerator<object> // TypeDefIndex: 3876
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526924-0x00526934 */ get; } // 0x00FBFC7C-0x00FBFC84 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526944-0x00526954 */ get; } // 0x00FBFCE8-0x00FBFCF0 

		// Constructors
		[DebuggerHidden] // 0x00526904-0x00526914
		public _Play_d__5(int __1__state); // 0x00FBFB38-0x00FBFB64

		// Methods
		[DebuggerHidden] // 0x00526914-0x00526924
		void IDisposable.Dispose(); // 0x00FBFC3C-0x00FBFC40
		private bool MoveNext(); // 0x00FBFC40-0x00FBFC7C
		[DebuggerHidden] // 0x00526934-0x00526944
		void IEnumerator.Reset(); // 0x00FBFC84-0x00FBFCE8
	}

	// Constructors
	public StageMenuSequence(); // 0x00FBFC34-0x00FBFC3C

	// Methods
	public virtual void StartPlayIdleRummagesAnimation(); // 0x00FBFA14-0x00FBFAD8
	[IteratorStateMachine] // 0x00520BE4-0x00520C48
	protected virtual IEnumerator Play(); // 0x00FBFAD8-0x00FBFB38
	public virtual void StopPlayIdleRummagesAnimation(); // 0x00FBFB64-0x00FBFB70
	public void OnUpdate(); // 0x00FBFB70-0x00FBFC28
	public void OnNewGameStart(); // 0x00FBFC28-0x00FBFC34
}

public class CalcCircularPoint // TypeDefIndex: 3877
{
	// Fields
	private int _copyCount; // 0x10
	private float _radius; // 0x14
	private Axis _axis; // 0x18

	// Nested types
	public enum Axis // TypeDefIndex: 3878
	{
		X = 0,
		Y = 1,
		Z = 2
	}

	// Constructors
	public CalcCircularPoint(int count, Axis axis, float radius); // 0x00774D80-0x00774DD8

	// Methods
	public Vector3 CalcCenterOffset(int index); // 0x00774DD8-0x00774FC0
}

public class CelebrationBackground : MonoBehaviour // TypeDefIndex: 3879
{
	// Fields
	public Transform backgroundRoot; // 0x18
	public Transform celebrationCloner; // 0x20
	[SerializeField] // 0x005188E0-0x005188F0
	private AnimationCurve _celebrationAnimationCurve; // 0x28
	private bool shouldRotate; // 0x30

	// Properties
	public bool visible { get; set; } // 0x00775BD8-0x00775BFC 0x007758B4-0x007758E8

	// Constructors
	public CelebrationBackground(); // 0x00775C60-0x00775C68

	// Methods
	public float GetCelebrationAnimationCurveValue(float pos); // 0x00775890-0x007758AC
	public void Hide(); // 0x007758AC-0x007758B4
	public void InvertParticlesDirection(bool invert); // 0x007758E8-0x00775A34
	public void SetParticleAnimationSpeed(float speed); // 0x00775A34-0x00775B00
	public void Show(Quaternion rotation, bool shouldAnimateStripes, bool shouldRotateBackground); // 0x00775B00-0x00775BD8
	private void Update(); // 0x00775BFC-0x00775C60
}

public class CelebrationClone : MonoBehaviour // TypeDefIndex: 3880
{
	// Fields
	[SerializeField] // 0x005188F0-0x00518900
	private GameObject _targetObject; // 0x18
	[SerializeField] // 0x00518900-0x00518910
	private int _copyCount; // 0x20
	[SerializeField] // 0x00518910-0x00518920
	private bool _destroyOriginal; // 0x24
	[SerializeField] // 0x00518920-0x00518930
	private float _radius; // 0x28
	[SerializeField] // 0x00518930-0x00518940
	private CalcCircularPoint.Axis _axis; // 0x2C
	[SerializeField] // 0x00518940-0x00518950
	private bool _alignToCloner; // 0x30
	private CalcCircularPoint calc; // 0x38

	// Constructors
	public CelebrationClone(); // 0x00776210-0x00776238

	// Methods
	private void Awake(); // 0x00775C68-0x00775FF0
	private void OnDrawGizmos(); // 0x00775FF0-0x00776210
}

public class CelebrationPopup : UIBaseScreen // TypeDefIndex: 3881
{
	// Fields
	public GameObject boxParent; // 0x98
	public GameObject rewardLabelTemplate; // 0xA0
	[SerializeField] // 0x00518950-0x00518960
	private Collider openButton; // 0xA8
	[SerializeField] // 0x00518960-0x00518970
	private Collider continueButton; // 0xB0
	[SerializeField] // 0x00518970-0x00518980
	private Collider skipDoubleButton; // 0xB8
	[SerializeField] // 0x00518980-0x00518990
	private Collider watchDoubleButton; // 0xC0
	[SerializeField] // 0x00518990-0x005189A0
	private UISprite[] watchSprites; // 0xC8
	[SerializeField] // 0x005189A0-0x005189B0
	private GameObject tapToStartLabelPrefab; // 0xD0
	[SerializeField] // 0x005189B0-0x005189C0
	private GameObject watchDoublePrefab; // 0xD8
	[SerializeField] // 0x005189C0-0x005189D0
	private GameObject chestPrefab; // 0xE0
	[SerializeField] // 0x005189D0-0x005189E0
	private GameObject superChestPrefab; // 0xE8
	[SerializeField] // 0x005189E0-0x005189F0
	private GameObject miniChestPrefab; // 0xF0
	[SerializeField] // 0x005189F0-0x00518A00
	private GameObject superChestEffectPrefab; // 0xF8
	[SerializeField] // 0x00518A00-0x00518A10
	private GameObject rewardCoins; // 0x100
	[SerializeField] // 0x00518A10-0x00518A20
	private GameObject rewardSymbolLee; // 0x108
	[SerializeField] // 0x00518A20-0x00518A30
	private GameObject rewardSymbolTurtlefok; // 0x110
	[SerializeField] // 0x00518A30-0x00518A40
	private GameObject rewardPowerupHeadstart2000; // 0x118
	[SerializeField] // 0x00518A40-0x00518A50
	private GameObject rewardPowerupScoreBooster; // 0x120
	[SerializeField] // 0x00518A50-0x00518A60
	private GameObject rewardKey; // 0x128
	[SerializeField] // 0x00518A60-0x00518A70
	private MeshRenderer GlowEffect; // 0x130
	[SerializeField] // 0x00518A70-0x00518A80
	private UIPanel _backgroundPanel; // 0x138
	[SerializeField] // 0x00518A80-0x00518A90
	private Texture2D itemHuntStripe; // 0x140
	[SerializeField] // 0x00518A90-0x00518AA0
	private GameObject stripePanel; // 0x148
	[SerializeField] // 0x00518AA0-0x00518AB0
	private NewHighScoreHandler _NewHighScoreHandlerPrefab; // 0x150
	[SerializeField] // 0x00518AB0-0x00518AC0
	private UILabel doubleLabe; // 0x158
	[SerializeField] // 0x00518AC0-0x00518AD0
	private UILabel doubleScriptLabel; // 0x160
	[SerializeField] // 0x00518AD0-0x00518AE0
	private Vector3 _boxRotation; // 0x168
	[SerializeField] // 0x00518AE0-0x00518AF0
	private Vector3 _boxScale; // 0x174
	[SerializeField] // 0x00518AF0-0x00518B00
	private Vector3 _continueLabelPosition; // 0x180
	[SerializeField] // 0x00518B00-0x00518B10
	private Vector3 _continueHighestscoreLabelPosition; // 0x18C
	[SerializeField] // 0x00518B10-0x00518B20
	private Vector3 _labelPosition; // 0x198
	[SerializeField] // 0x00518B20-0x00518B30
	private Vector3 _labelPositionUnlock; // 0x1A4
	[SerializeField] // 0x00518B30-0x00518B40
	private Vector3 _outOfScreenPosition; // 0x1B0
	[SerializeField] // 0x00518B40-0x00518B50
	private Vector3 _rewardLocalPosition; // 0x1BC
	[SerializeField] // 0x00518B50-0x00518B60
	private Vector3 _rewardStartScale; // 0x1C8
	[SerializeField] // 0x00518B60-0x00518B70
	private Vector3 _rewardStartRotation; // 0x1D4
	[SerializeField] // 0x00518B70-0x00518B80
	private Vector3 _rewardEndScale; // 0x1E0
	private float _animationLerpFactor; // 0x1EC
	private GameObject[] _celebrationRewardContainer; // 0x1F0
	private NewHighScoreHandler _currentNewHighScoreHandler; // 0x1F8
	private int _currentReward; // 0x200
	private bool _isFingerPressed; // 0x204
	private bool _maySetTimeScale; // 0x205
	private int _numberOfRewards; // 0x208
	private bool _stripeCoroutineRunning; // 0x20C
	private UITexture[] _stripeTextures; // 0x210
	private SuperChestEffect _containerEffect; // 0x218
	private float _timeScaleBeforeCelebrationPopup; // 0x220
	private bool anotherReward; // 0x224
	private bool celebrationHasStarted; // 0x225
	private static readonly Vector3 FIRST_SLOT_POSITION; // 0x00
	private bool isWaitingForInput; // 0x226
	private static readonly Vector3 OTHER_SLOT_OFFSET; // 0x0C
	private CelebrationReward[] rewardsToUnlock; // 0x228
	private bool skipWaitBackButtonPressed; // 0x230
	private GameObject[] slots; // 0x238
	private bool stopIdleAnim; // 0x240
	private Vector3 SUPERBOX_EFFECT_POSITION; // 0x244
	private GameObject tapToStartGo; // 0x250
	private UILabel tapToStartLabel; // 0x258
	private CelebrationReward canDoubleReward; // 0x260
	private CelebrationPopupLabelTemplate celPopLabelTemple; // 0x268

	// Nested types
	[CompilerGenerated] // 0x005145A0-0x005145B0
	private sealed class __ShowReward_d__64 : IEnumerator<object> // TypeDefIndex: 3882
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public CelebrationPopup __4__this; // 0x20
		public int currentRewardIndex; // 0x28
		private CelebrationReward _reward_5__2; // 0x30
		private GameObject _rewardGo_5__3; // 0x38
		private CelebrationPopupLabelTemplate _template_5__4; // 0x40
		private Animation _animation_5__5; // 0x48

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526974-0x00526984 */ get; } // 0x0077D004-0x0077D00C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526994-0x005269A4 */ get; } // 0x0077D070-0x0077D078 

		// Constructors
		[DebuggerHidden] // 0x00526954-0x00526964
		public __ShowReward_d__64(int __1__state); // 0x00776900-0x0077692C

		// Methods
		[DebuggerHidden] // 0x00526964-0x00526974
		void IDisposable.Dispose(); // 0x0077C0EC-0x0077C0F0
		private bool MoveNext(); // 0x0077C0F0-0x0077D004
		[DebuggerHidden] // 0x00526984-0x00526994
		void IEnumerator.Reset(); // 0x0077D00C-0x0077D070
	}

	[CompilerGenerated] // 0x005145B0-0x005145C0
	private sealed class _AnimateAlpha_d__70 : IEnumerator<object> // TypeDefIndex: 3883
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public CelebrationPopupLabelTemplate template; // 0x20
		public float duration; // 0x28
		public float toAlpha; // 0x2C
		private float _fromAlpha_5__2; // 0x30
		private float _factor_5__3; // 0x34

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005269C4-0x005269D4 */ get; } // 0x0077A008-0x0077A010 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005269E4-0x005269F4 */ get; } // 0x0077A074-0x0077A07C 

		// Constructors
		[DebuggerHidden] // 0x005269A4-0x005269B4
		public _AnimateAlpha_d__70(int __1__state); // 0x00778064-0x00778090

		// Methods
		[DebuggerHidden] // 0x005269B4-0x005269C4
		void IDisposable.Dispose(); // 0x00779E20-0x00779E24
		private bool MoveNext(); // 0x00779E24-0x00779F54
		[DebuggerHidden] // 0x005269D4-0x005269E4
		void IEnumerator.Reset(); // 0x0077A010-0x0077A074
	}

	[CompilerGenerated] // 0x005145C0-0x005145D0
	private sealed class _AnimateAlpha_d__71 : IEnumerator<object> // TypeDefIndex: 3884
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public UILabel label; // 0x20
		public float duration; // 0x28
		public float toAlpha; // 0x2C
		private float _fromAlpha_5__2; // 0x30
		private float _factor_5__3; // 0x34

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526A14-0x00526A24 */ get; } // 0x0077A1B4-0x0077A1BC 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526A34-0x00526A44 */ get; } // 0x0077A220-0x0077A228 

		// Constructors
		[DebuggerHidden] // 0x005269F4-0x00526A04
		public _AnimateAlpha_d__71(int __1__state); // 0x00778118-0x00778144

		// Methods
		[DebuggerHidden] // 0x00526A04-0x00526A14
		void IDisposable.Dispose(); // 0x0077A07C-0x0077A080
		private bool MoveNext(); // 0x0077A080-0x0077A1B4
		[DebuggerHidden] // 0x00526A24-0x00526A34
		void IEnumerator.Reset(); // 0x0077A1BC-0x0077A220
	}

	[CompilerGenerated] // 0x005145D0-0x005145E0
	private sealed class _AnimateColor_d__72 : IEnumerator<object> // TypeDefIndex: 3885
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Material material; // 0x20
		public float duration; // 0x28
		public Color toColor; // 0x2C
		private Color _fromColor_5__2; // 0x3C
		private float _factor_5__3; // 0x4C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526A64-0x00526A74 */ get; } // 0x0077A39C-0x0077A3A4 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526A84-0x00526A94 */ get; } // 0x0077A408-0x0077A410 

		// Constructors
		[DebuggerHidden] // 0x00526A44-0x00526A54
		public _AnimateColor_d__72(int __1__state); // 0x007781F0-0x0077821C

		// Methods
		[DebuggerHidden] // 0x00526A54-0x00526A64
		void IDisposable.Dispose(); // 0x0077A228-0x0077A22C
		private bool MoveNext(); // 0x0077A22C-0x0077A39C
		[DebuggerHidden] // 0x00526A74-0x00526A84
		void IEnumerator.Reset(); // 0x0077A3A4-0x0077A408
	}

	[CompilerGenerated] // 0x005145E0-0x005145F0
	private sealed class _AnimateStripes_d__74 : IEnumerator<object> // TypeDefIndex: 3886
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public CelebrationPopup __4__this; // 0x20
		private int _minSpeed_5__2; // 0x28
		private int _maxSpeed_5__3; // 0x2C
		private float _minAlpha_5__4; // 0x30
		private float _maxAlpha_5__5; // 0x34
		private float _minScale_5__6; // 0x38
		private float _maxScale_5__7; // 0x3C
		private Vector2 _minimumThreshold_5__8; // 0x40
		private Vector2 _maximumThreshold_5__9; // 0x48
		private float[] _stripeSpeeds_5__10; // 0x50

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526AB4-0x00526AC4 */ get; } // 0x0077ADB8-0x0077ADC0 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526AD4-0x00526AE4 */ get; } // 0x0077AE24-0x0077AE2C 

		// Constructors
		[DebuggerHidden] // 0x00526A94-0x00526AA4
		public _AnimateStripes_d__74(int __1__state); // 0x00778290-0x007782BC

		// Methods
		[DebuggerHidden] // 0x00526AA4-0x00526AB4
		void IDisposable.Dispose(); // 0x0077A410-0x0077A414
		private bool MoveNext(); // 0x0077A414-0x0077ADB8
		[DebuggerHidden] // 0x00526AC4-0x00526AD4
		void IEnumerator.Reset(); // 0x0077ADC0-0x0077AE24
	}

	[CompilerGenerated] // 0x005145F0-0x00514600
	private sealed class _BoxIdleAnimCoroutine_d__76 : IEnumerator<object> // TypeDefIndex: 3887
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Transform rewardTrans; // 0x20
		public CelebrationPopup __4__this; // 0x28
		private Vector3 _baseLocalPos_5__2; // 0x30
		private float _t_5__3; // 0x3C
		private Vector3 _newLocalPos_5__4; // 0x40
		private bool _doneResetting_5__5; // 0x4C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526B04-0x00526B14 */ get; } // 0x0077B060-0x0077B068 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526B24-0x00526B34 */ get; } // 0x0077B0CC-0x0077B0D4 

		// Constructors
		[DebuggerHidden] // 0x00526AE4-0x00526AF4
		public _BoxIdleAnimCoroutine_d__76(int __1__state); // 0x007783FC-0x00778428

		// Methods
		[DebuggerHidden] // 0x00526AF4-0x00526B04
		void IDisposable.Dispose(); // 0x0077AE2C-0x0077AE30
		private bool MoveNext(); // 0x0077AE30-0x0077B060
		[DebuggerHidden] // 0x00526B14-0x00526B24
		void IEnumerator.Reset(); // 0x0077B068-0x0077B0CC
	}

	[CompilerGenerated] // 0x00514600-0x00514610
	private sealed class _CharacterIdleAnimCoroutine_d__77 : IEnumerator<object> // TypeDefIndex: 3888
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public CelebrationPopup __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526B54-0x00526B64 */ get; } // 0x0077B128-0x0077B130 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526B74-0x00526B84 */ get; } // 0x0077B194-0x0077B19C 

		// Constructors
		[DebuggerHidden] // 0x00526B34-0x00526B44
		public _CharacterIdleAnimCoroutine_d__77(int __1__state); // 0x0077849C-0x007784C8

		// Methods
		[DebuggerHidden] // 0x00526B44-0x00526B54
		void IDisposable.Dispose(); // 0x0077B0D4-0x0077B0D8
		private bool MoveNext(); // 0x0077B0D8-0x0077B128
		[DebuggerHidden] // 0x00526B64-0x00526B74
		void IEnumerator.Reset(); // 0x0077B130-0x0077B194
	}

	[CompilerGenerated] // 0x00514610-0x00514620
	private sealed class _CountUpCoins_d__79 : IEnumerator<object> // TypeDefIndex: 3889
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public int amount; // 0x20
		public CelebrationPopupLabelTemplate rewardTemplate; // 0x28
		private float _countFactor_5__2; // 0x30
		private float _countTime_5__3; // 0x34
		private int _rewardLabelFrom_5__4; // 0x38
		private int _rewardLabelTo_5__5; // 0x3C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526BA4-0x00526BB4 */ get; } // 0x0077B4AC-0x0077B4B4 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526BC4-0x00526BD4 */ get; } // 0x0077B518-0x0077B520 

		// Constructors
		[DebuggerHidden] // 0x00526B84-0x00526B94
		public _CountUpCoins_d__79(int __1__state); // 0x007785A8-0x007785D4

		// Methods
		[DebuggerHidden] // 0x00526B94-0x00526BA4
		void IDisposable.Dispose(); // 0x0077B19C-0x0077B1A0
		private bool MoveNext(); // 0x0077B1A0-0x0077B3F8
		[DebuggerHidden] // 0x00526BB4-0x00526BC4
		void IEnumerator.Reset(); // 0x0077B4B4-0x0077B518
	}

	[CompilerGenerated] // 0x00514620-0x00514630
	private sealed class _MoveGameObject_d__88 : IEnumerator<object> // TypeDefIndex: 3890
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Transform trans; // 0x20
		public float duration; // 0x28
		public Vector3 toPos; // 0x2C
		private Vector3 _fromPos_5__2; // 0x38
		private float _factor_5__3; // 0x44

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526BF4-0x00526C04 */ get; } // 0x0077B79C-0x0077B7A4 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526C14-0x00526C24 */ get; } // 0x0077B808-0x0077B810 

		// Constructors
		[DebuggerHidden] // 0x00526BD4-0x00526BE4
		public _MoveGameObject_d__88(int __1__state); // 0x00778FA4-0x00778FD0

		// Methods
		[DebuggerHidden] // 0x00526BE4-0x00526BF4
		void IDisposable.Dispose(); // 0x0077B520-0x0077B524
		private bool MoveNext(); // 0x0077B524-0x0077B79C
		[DebuggerHidden] // 0x00526C04-0x00526C14
		void IEnumerator.Reset(); // 0x0077B7A4-0x0077B808
	}

	[CompilerGenerated] // 0x00514630-0x00514640
	private sealed class _MoveNextBoxToFront_d__89 : IEnumerator<object> // TypeDefIndex: 3891
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public CelebrationPopup __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526C44-0x00526C54 */ get; } // 0x0077BB44-0x0077BB4C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526C64-0x00526C74 */ get; } // 0x0077BBB0-0x0077BBB8 

		// Constructors
		[DebuggerHidden] // 0x00526C24-0x00526C34
		public _MoveNextBoxToFront_d__89(int __1__state); // 0x00778FD0-0x00778FFC

		// Methods
		[DebuggerHidden] // 0x00526C34-0x00526C44
		void IDisposable.Dispose(); // 0x0077B810-0x0077B814
		private bool MoveNext(); // 0x0077B814-0x0077BB44
		[DebuggerHidden] // 0x00526C54-0x00526C64
		void IEnumerator.Reset(); // 0x0077BB4C-0x0077BBB0
	}

	[CompilerGenerated] // 0x00514640-0x00514650
	private sealed class _RotateGameObject_d__92 : IEnumerator<object> // TypeDefIndex: 3892
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Transform trans; // 0x20
		public float duration; // 0x28
		public Vector3 angleToRotate; // 0x2C
		private Quaternion _fromRotation_5__2; // 0x38
		private float _factor_5__3; // 0x48

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526C94-0x00526CA4 */ get; } // 0x0077BDD8-0x0077BDE0 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526CB4-0x00526CC4 */ get; } // 0x0077BE44-0x0077BE4C 

		// Constructors
		[DebuggerHidden] // 0x00526C74-0x00526C84
		public _RotateGameObject_d__92(int __1__state); // 0x007790AC-0x007790D8

		// Methods
		[DebuggerHidden] // 0x00526C84-0x00526C94
		void IDisposable.Dispose(); // 0x0077BBB8-0x0077BBBC
		private bool MoveNext(); // 0x0077BBBC-0x0077BDD8
		[DebuggerHidden] // 0x00526CA4-0x00526CB4
		void IEnumerator.Reset(); // 0x0077BDE0-0x0077BE44
	}

	[CompilerGenerated] // 0x00514650-0x00514660
	private sealed class _ScaleGameObject_d__93 : IEnumerator<object> // TypeDefIndex: 3893
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Transform trans; // 0x20
		public float duration; // 0x28
		public Vector3 toScale; // 0x2C
		private float _factor_5__2; // 0x38
		private Vector3 _fromScale_5__3; // 0x3C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526CE4-0x00526CF4 */ get; } // 0x0077C078-0x0077C080 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526D04-0x00526D14 */ get; } // 0x0077C0E4-0x0077C0EC 

		// Constructors
		[DebuggerHidden] // 0x00526CC4-0x00526CD4
		public _ScaleGameObject_d__93(int __1__state); // 0x00779174-0x007791A0

		// Methods
		[DebuggerHidden] // 0x00526CD4-0x00526CE4
		void IDisposable.Dispose(); // 0x0077BE4C-0x0077BE50
		private bool MoveNext(); // 0x0077BE50-0x0077C078
		[DebuggerHidden] // 0x00526CF4-0x00526D04
		void IEnumerator.Reset(); // 0x0077C080-0x0077C0E4
	}

	// Constructors
	public CelebrationPopup(); // 0x00779A98-0x00779D5C
	static CelebrationPopup(); // 0x00779D5C-0x00779E20

	// Methods
	public override void Show(); // 0x00776238-0x00776290
	private void _FinishOpening(); // 0x007764E4-0x007766D4
	[IteratorStateMachine] // 0x00520C48-0x00520CAC
	private IEnumerator _ShowReward(int currentRewardIndex); // 0x0077687C-0x00776900
	private void OnEnable(); // 0x0077692C-0x00776A00
	private void OnDisable(); // 0x00776A00-0x00776A9C
	private void OnFreeReward(RiseSdk.AdEventType type, int id, string tag, int eventType); // 0x00776A9C-0x00776C8C
	public void OnDoubleClick(); // 0x00777350-0x00777494
	private CelebrationPopupLabelTemplate InitRewardLabelTemplate(CelebrationReward reward); // 0x00777494-0x007778B8
	[IteratorStateMachine] // 0x00520CAC-0x00520D10
	private IEnumerator AnimateAlpha(CelebrationPopupLabelTemplate template, float duration, float toAlpha); // 0x00777FDC-0x00778064
	[IteratorStateMachine] // 0x00520D10-0x00520D74
	private IEnumerator AnimateAlpha(UILabel label, float duration, float toAlpha); // 0x00778090-0x00778118
	[IteratorStateMachine] // 0x00520D74-0x00520DD8
	private IEnumerator AnimateColor(Material material, float duration, Color toColor); // 0x00778144-0x007781F0
	private void ResetBackgroundToNormal(); // 0x00776748-0x0077687C
	[IteratorStateMachine] // 0x00520DD8-0x00520E3C
	private IEnumerator AnimateStripes(); // 0x0077821C-0x00778290
	private void Awake(); // 0x007782BC-0x0077837C
	[IteratorStateMachine] // 0x00520E3C-0x00520EA0
	private IEnumerator BoxIdleAnimCoroutine(Transform rewardTrans); // 0x0077837C-0x007783FC
	[IteratorStateMachine] // 0x00520EA0-0x00520F04
	private IEnumerator CharacterIdleAnimCoroutine(Transform rewardTrans, CelebrationReward reward); // 0x00778428-0x0077849C
	private GameObject ChooseRewardPrefab(CelebrationReward reward); // 0x007784C8-0x00778524
	[IteratorStateMachine] // 0x00520F04-0x00520F68
	private IEnumerator CountUpCoins(int amount, CelebrationPopupLabelTemplate rewardTemplate); // 0x00778524-0x007785A8
	private void InitSlotsAndRewardContainers(int length); // 0x007785D4-0x00778800
	private void FillOutAllTheSlotsWithRewardContainers(); // 0x00778800-0x00778AE4
	public void OnPressed(); // 0x00778AE4-0x00778C18
	public void OnReleased(); // 0x00778CD0-0x00778DBC
	public override void Hide(); // 0x00778DBC-0x00778EC0
	private void HideModel(); // 0x00778EC0-0x00778EE4
	private void HideSpecialHelm(); // 0x00778EE4-0x00778F08
	private bool IsTwoStepsCelebration(int rewardIndex); // 0x00778C18-0x00778CD0
	[IteratorStateMachine] // 0x00520F68-0x00520FCC
	private IEnumerator MoveGameObject(Transform trans, float duration, Vector3 toPos); // 0x00778F08-0x00778FA4
	[IteratorStateMachine] // 0x00520FCC-0x00521030
	private IEnumerator MoveNextBoxToFront(); // 0x007766D4-0x00776748
	private void OnApplicationPause(bool pause); // 0x00778FFC-0x00779010
	private void PayoutReward(CelebrationReward reward); // 0x00777150-0x00777350
	[IteratorStateMachine] // 0x00521030-0x00521094
	private IEnumerator RotateGameObject(Transform trans, float duration, Vector3 angleToRotate); // 0x00779010-0x007790AC
	[IteratorStateMachine] // 0x00521094-0x005210F8
	private IEnumerator ScaleGameObject(Transform trans, float duration, Vector3 toScale); // 0x007790D8-0x00779174
	private void SetupCelebrationScreen(); // 0x00776290-0x007764E4
	private void InitEffect(); // 0x00779330-0x0077953C
	private void InitTapToStart(); // 0x007791A0-0x00779330
	private bool ShouldWaitForInput(); // 0x007798C4-0x007798FC
	private void ShowBackgroundWithStripes(Helmets.HelmType helmType, UIModelController.ModelScreen modelScreen); // 0x007798FC-0x00779938
	private GameObject ShowModel(Characters.CharacterType charType, int themeIndex, UIModelController.ModelScreen modelScreen); // 0x00779938-0x00779984
	public void SkipNow(); // 0x00779984-0x0077999C
	private void StartIdleAnimCoroutine(Transform rewardTrans, CelebrationReward reward); // 0x00779724-0x007797EC
	private void StartOneStepUnlock(); // 0x007797EC-0x007797F0
	private void ToggleSuperChestEffect(CelebrationRewardOrigin origin); // 0x007797F0-0x007798C4
	private void Update(); // 0x0077999C-0x00779A28
	private void UpdateGui(CelebrationReward reward); // 0x0077953C-0x00779724
	public void ONFBShare(); // 0x00779A28-0x00779A98
}

public class CelebrationPopupLabelTemplate : MonoBehaviour // TypeDefIndex: 3894
{
	// Fields
	public UILabel bigLabel; // 0x18
	public UILabel subLabel; // 0x20
	[SerializeField] // 0x00518B80-0x00518B90
	private GameObject normalStateGO; // 0x28

	// Properties
	public float Alpha { get; set; } // 0x00779F54-0x00779F74 0x00779F74-0x0077A008

	// Constructors
	public CelebrationPopupLabelTemplate(); // 0x0077D668-0x0077D670

	// Methods
	private string _GetCoinsLabel(int amount); // 0x0077D078-0x0077D134
	private string _GetKeysLabel(int amount); // 0x0077D134-0x0077D1EC
	private string _GetPowerupLabel(PropType type, int amount); // 0x0077D1EC-0x0077D504
	public void Init(int backgroundDepth); // 0x007778B8-0x00777934
	private void OnEnable(); // 0x0077D504-0x0077D524
	public void SetDoubleCions(int amount); // 0x00776C8C-0x00776D38
	public void SetupDoubleKeys(int amount); // 0x007770A4-0x00777150
	public void SetDoublePowerup(PropType powerup, int amount); // 0x00776D38-0x00776E4C
	public void SetupDoubleSymbol(Characters.CharacterType characterType, int amount); // 0x00776E4C-0x007770A4
	public void SetupCharacter(string charName); // 0x00777E0C-0x00777EF4
	public void SetupCoins(); // 0x00777934-0x007779D4
	public void SetupEventSpecialHelm(string helmName); // 0x00777EF4-0x00777FDC
	public void SetupKeys(int amount); // 0x00777D54-0x00777E0C
	public void SetupPowerup(PropType powerup, int amount); // 0x007779D4-0x00777AF4
	public void SetupSymbol(Characters.CharacterType characterType, int amount); // 0x00777AF4-0x00777D54
	public void UpdateCoins(int amount); // 0x0077B3F8-0x0077B4AC
	private void ResetSubLabelPosition(); // 0x0077D524-0x0077D668
}

public class CelebrationReward // TypeDefIndex: 3895
{
	// Fields
	public CelebrationRewardOrigin CelebrationRewardOrigin; // 0x10
	public CelebrationRewardType rewardType; // 0x14
	public int amount; // 0x18
	public Characters.CharacterType characterType; // 0x1C
	public int characterThemeIndex; // 0x20
	public Helmets.HelmType helmType; // 0x24
	public PropType powerupType; // 0x28
	public long Uid; // 0x30
	public int rank; // 0x38
	public int score; // 0x3C

	// Constructors
	public CelebrationReward(); // 0x0077DEC0-0x0077DED0

	// Methods
	public void PopulateFromString(string rewardAsString); // 0x0077D670-0x0077DBF4
	private void ResetToDefaultValues(); // 0x0077DBF4-0x0077DC14
	public override string ToString(); // 0x0077DC14-0x0077DE98
	public bool Find(CelebrationReward cr); // 0x0077DE98-0x0077DEC0
}

public enum CelebrationRewardOrigin // TypeDefIndex: 3896
{
	Notset = 0,
	Chest = 1,
	SuperChest = 2,
	CharacterUnlock = 3,
	HelmetUnlock = 4,
	NewHighScore = 5,
	ChestMini = 6
}

public enum CelebrationRewardType // TypeDefIndex: 3897
{
	_notset = 0,
	coins = 1,
	powerup = 2,
	symbol = 3,
	trophy = 4,
	medal = 5,
	keys = 6,
	specialHelm = 7,
	character = 8,
	highscore = 9,
	topRun = 10
}

public static class RewardManager // TypeDefIndex: 3898
{
	// Fields
	public static bool canShowMultipleQueuedCelebrations; // 0x00

	// Properties
	public static int rewardsToUnlockCount { get; } // 0x007337D8-0x00733858 

	// Nested types
	[CompilerGenerated] // 0x00514660-0x00514670
	private sealed class __c__DisplayClass1_0 // TypeDefIndex: 3899
	{
		// Fields
		public CelebrationReward reward; // 0x10

		// Constructors
		public __c__DisplayClass1_0(); // 0x00733244-0x0073324C

		// Methods
		internal bool _AddChestToUnlock_b__0(CelebrationReward mb); // 0x007338EC-0x00733920
	}

	[Serializable]
	[CompilerGenerated] // 0x00514670-0x00514680
	private sealed class __c // TypeDefIndex: 3900
	{
		// Fields
		public static readonly __c __9; // 0x00
		public static Func<CelebrationReward, bool> __9__7_0; // 0x08

		// Constructors
		static __c(); // 0x00733858-0x007338BC
		public __c(); // 0x007338BC-0x007338C4

		// Methods
		internal bool _PayoutNonChestRewards_b__7_0(CelebrationReward celebrationReward); // 0x007338C4-0x007338EC
	}

	// Methods
	private static void AddChestToUnlock(CelebrationReward reward, bool shouldSaveToDisk = true /* Metadata: 0x001F6111 */); // 0x0073309C-0x00733244
	public static void AddRewardToUnlock(CelebrationRewardOrigin origin); // 0x007286FC-0x00728794
	public static void AddRewardToUnlock(CelebrationReward reward, bool shouldSaveToDisk = true /* Metadata: 0x001F6112 */); // 0x0073324C-0x007332EC
	public static CelebrationReward[] GetRewardsToUnlockForCelebration(); // 0x007332EC-0x0073344C
	public static List<CelebrationReward> GetWeeklyHuntRewardsToUnlock(); // 0x0073344C-0x00733554
	private static bool IsRewardChest(CelebrationReward reward); // 0x00733554-0x00733578
	public static void PayoutNonChestRewards(); // 0x00733578-0x00733760
	public static void RewardPayedOut(CelebrationReward celebrationReward); // 0x00733760-0x007337D8
}

public class AnimationEventDriver : MonoBehaviour // TypeDefIndex: 3901
{
	// Fields
	[SerializeField] // 0x00518B90-0x00518BA0
	private ParticleSystem ps; // 0x18

	// Constructors
	public AnimationEventDriver(); // 0x0070F808-0x0070F810

	// Methods
	public void PlayParticleSystem(); // 0x0070F7EC-0x0070F808
}

public class AvatarAnimationsAdditions : MonoBehaviour // TypeDefIndex: 3902
{
	// Fields
	public AvatarAnimationHelp[] helps; // 0x18

	// Constructors
	public AvatarAnimationsAdditions(); // 0x00717774-0x0071777C

	// Methods
	private void Awake(); // 0x00717488-0x00717564
	public void Before(); // 0x00717118-0x007171F4
	public void Begain(AnimationClip animationClip); // 0x007171F4-0x00717304
	public void PlayAnimation(string clipName); // 0x00717564-0x0071766C
	public void End(AnimationClip animationClip); // 0x00717304-0x00717414
	public void Finish(); // 0x00715718-0x007157F4
	public void PlayParticleSystem(string clipName); // 0x0071766C-0x00717774
}

[Serializable]
public class AvatarAnimationHelp // TypeDefIndex: 3903
{
	// Fields
	public AnimationClip animationClip; // 0x10
	public ParticleSystem particleSystem; // 0x18
	public int atFramesForParticleSystem; // 0x20
	public Animation otherAnimation; // 0x28
	public AnimationClip otherClip; // 0x30
	public Renderer meshrender; // 0x38
	public Renderer[] Weapon; // 0x40

	// Constructors
	public AvatarAnimationHelp(); // 0x00714C98-0x00714CA0

	// Methods
	public void ShowWeapon(); // 0x007141AC-0x007142D8
	public void CloseWeapon(); // 0x007142D8-0x00714398
	public void OnStart(); // 0x00714398-0x007144D4
	public void Prepare(); // 0x007144D4-0x007148F0
	public void Start(); // 0x007148F0-0x00714994
	public void PlayAnimation(); // 0x00714994-0x00714AD4
	public void Finish(); // 0x00714AD4-0x00714BE4
	public void PlayParticle(); // 0x00714BE4-0x00714C98
}

public class CameraShakeController : MonoBehaviour // TypeDefIndex: 3904
{
	// Fields
	private float AnimationTime; // 0x18
	[SerializeField] // 0x00518BA0-0x00518BB0
	private float ShakeIntensity; // 0x1C
	[SerializeField] // 0x00518BB0-0x00518BC0
	private float ShakeLength; // 0x20
	private Vector3 diff; // 0x24

	// Constructors
	public CameraShakeController(); // 0x0077570C-0x00775724

	// Methods
	public void Shake(); // 0x007754FC-0x00775570
	public Vector3 UpdateShakeController(); // 0x00775570-0x0077570C
}

public class CameraWobbleController : MonoBehaviour // TypeDefIndex: 3905
{
	// Fields
	private float AnimationTime; // 0x18
	[SerializeField] // 0x00518BC0-0x00518BD0
	private float WobbleIntensity; // 0x1C
	[SerializeField] // 0x00518BD0-0x00518BE0
	private float WobbleLength; // 0x20
	[SerializeField] // 0x00518BE0-0x00518BF0
	private AnimationCurve WobbleX_AC; // 0x28
	[SerializeField] // 0x00518BF0-0x00518C00
	private AnimationCurve WobbleY_AC; // 0x30

	// Constructors
	public CameraWobbleController(); // 0x00775878-0x00775890

	// Methods
	public void Wobble(); // 0x00775724-0x0077572C
	public Vector3 UpdateWobbleController(); // 0x0077572C-0x00775878
}

public class Character : MonoBehaviour // TypeDefIndex: 3906
{
	// Fields
	public Transform characterRoot; // 0x18
	public CapsuleCollider characterCollider; // 0x20
	public OnTriggerObject coinMagnetCollider; // 0x28
	public OnTriggerObject coinMagnetLongCollider; // 0x30
	[HideInInspector] // 0x00518C00-0x00518C10
	public OnTriggerObject tramcarCollider; // 0x38
	[SerializeField] // 0x00518C10-0x00518C20
	private float characterAngle; // 0x40
	public PickupParticles CharacterPickupParticleSystem; // 0x48
	public float ColliderTrackWidth; // 0x50
	[HideInInspector] // 0x00518C20-0x00518C30
	public CharacterController characterController; // 0x58
	[HideInInspector] // 0x00518C30-0x00518C40
	public OnTriggerObject characterColliderTrigger; // 0x60
	[HideInInspector] // 0x00518C40-0x00518C50
	public CharacterModel characterModel; // 0x68
	[HideInInspector] // 0x00518C50-0x00518C60
	public GameCamera characterCamera; // 0x70
	[HideInInspector] // 0x00518C60-0x00518C70
	public Shield shield; // 0x78
	[HideInInspector] // 0x00518C70-0x00518C80
	public Running running; // 0x80
	[HideInInspector] // 0x00518C80-0x00518C90
	public bool immuneToCriticalHit; // 0x88
	public int trackIndex; // 0x8C
	public float x; // 0x90
	public float z; // 0x94
	public float verticalSpeed; // 0x98
	public float lastGroundedY; // 0x9C
	public float subwayMaxY; // 0xA0
	public float underpassMaxY; // 0xA4
	private float jumpHeight; // 0xA8
	public float gravity; // 0xAC
	public float jumpHeightNormal; // 0xB0
	public float verticalFallSpeedLimit; // 0xB4
	public float stumbleCornerTolerance; // 0xB8
	public float stumbleDecayTime; // 0xBC
	public bool inAirJump; // 0xC0
	public Variable<bool> IsGrounded; // 0xC8
	public bool stopColliding; // 0xD0
	public float sameLaneTimeStamp; // 0xD4
	private CapsuleCollider tramcarCapsuleCollider; // 0xD8
	private Vector3 characterColliderCenter; // 0xE0
	private float characterColliderHeight; // 0xEC
	private Vector3 characterControllerCenter; // 0xF0
	private float characterControllerHeight; // 0xFC
	private Vector3 tramcarColliderCenter; // 0x100
	private float tramcarColliderHeight; // 0x10C
	private float characterRotation; // 0x110
	private Game game; // 0x118
	private int initialTrackIndex; // 0x120
	private static Character instance; // 0x00
	public string lastHitTag; // 0x128
	private int lastObstacleTriggerTrackIndex; // 0x130
	private ObstacleType lastObstacleTriggerType; // 0x134
	private float lastZ; // 0x138
	private Layers layers; // 0x140
	private Revive revive; // 0x148
	private bool startedJumpFromGround; // 0x150
	private HashSet<Collider> subwayColliders; // 0x158
	private HashSet<Collider> underpassColliders; // 0x160
	private bool isInsideUnderpass; // 0x168
	private Wall[] walls; // 0x170
	private TrackController trackController; // 0x178
	public float trackIndexPosition; // 0x180
	private int trackMovementNext; // 0x184
	private bool trainJump; // 0x188
	private float trainJumpSampleLength; // 0x18C
	private float trainJumpSampleZ; // 0x190
	public float currentTrackIndex; // 0x194
	private float verticalSpeed_jumpTolerance; // 0x198
	[CompilerGenerated] // 0x00518C90-0x00518CA0
	private OnChangeTrackDelegate OnChangeTrack; // 0x1A0
	[CompilerGenerated] // 0x00518CA0-0x00518CB0
	private OnCriticalHitDelegate OnCriticalHit; // 0x1A8
	[CompilerGenerated] // 0x00518CB0-0x00518CC0
	private OnJumpRollDelegate OnJumpRoll; // 0x1B0
	[CompilerGenerated] // 0x00518CC0-0x00518CD0
	private OnHangtimeDelegate OnHangtime; // 0x1B8
	[CompilerGenerated] // 0x00518CD0-0x00518CE0
	private OnHitByTrainDelegate OnHitByTrain; // 0x1C0
	[CompilerGenerated] // 0x00518CE0-0x00518CF0
	private OnFallIntoCliffDelegate OnHitCliff; // 0x1C8
	[CompilerGenerated] // 0x00518CF0-0x00518D00
	private OnFallIntoCliffDelegate OnFallIntoCliff; // 0x1D0
	[CompilerGenerated] // 0x00518D00-0x00518D10
	private OnJumpDelegate OnJump; // 0x1D8
	[CompilerGenerated] // 0x00518D10-0x00518D20
	private OnJumpIfHitByTrainDelegate OnJumpIfHitByTrain; // 0x1E0
	[CompilerGenerated] // 0x00518D20-0x00518D30
	private OnJumpOverTrainDelegate OnJumpOverTrain; // 0x1E8
	[CompilerGenerated] // 0x00518D30-0x00518D40
	private OnLandingDelegate OnLanding; // 0x1F0
	[CompilerGenerated] // 0x00518D40-0x00518D50
	private OnPassedObstacleDelegate OnPassedObstacle; // 0x1F8
	[CompilerGenerated] // 0x00518D50-0x00518D60
	private OnRollDelegate OnRoll; // 0x200
	[CompilerGenerated] // 0x00518D60-0x00518D70
	private OnRollGuardDelegate OnRollGuard; // 0x208
	[CompilerGenerated] // 0x00518D70-0x00518D80
	private OnStumbleDelegate OnStumble; // 0x210
	[CompilerGenerated] // 0x00518D80-0x00518D90
	private OnStopStumbleDelegate OnStopStumble; // 0x218
	[CompilerGenerated] // 0x00518D90-0x00518DA0
	private OnTutorialMoveBackToCheckPointDelegate OnTutorialMoveBackToCheckPoint; // 0x220
	[CompilerGenerated] // 0x00518DA0-0x00518DB0
	private OnTutorialStartFromCheckPointDelegate OnTutorialStartFromCheckPoint; // 0x228
	[CompilerGenerated] // 0x00518DB0-0x00518DC0
	private OnTurnDelegate OnTurn; // 0x230
	[CompilerGenerated] // 0x00518DC0-0x00518DD0
	private OnLeanDelegate OnLean; // 0x238
	[CompilerGenerated] // 0x00518DD0-0x00518DE0
	private OnOutLeanDelegate OnOutLean; // 0x240
	[CompilerGenerated] // 0x00518DE0-0x00518DF0
	private OnEnterRunHuaDelegate OnEnterRunHua; // 0x248
	public Tutorial Curturorial; // 0x250
	public bool IntrackMoveContinue; // 0x258
	public int RobberMoveDir; // 0x25C
	public bool InAttackField; // 0x260
	public Transform AimRobber; // 0x268
	private Vector3 lastPosition; // 0x270
	private int frames; // 0x27C
	[CompilerGenerated] // 0x00518DF0-0x00518E00
	private bool _IsFalling_k__BackingField; // 0x280
	[CompilerGenerated] // 0x00518E00-0x00518E10
	private bool _IsInsideSubway_k__BackingField; // 0x281
	[CompilerGenerated] // 0x00518E10-0x00518E20
	private bool _InMine_k__BackingField; // 0x282
	[CompilerGenerated] // 0x00518E20-0x00518E30
	private bool _InMineTimeline_k__BackingField; // 0x283
	[CompilerGenerated] // 0x00518E30-0x00518E40
	private bool _IsJumping_k__BackingField; // 0x284
	[CompilerGenerated] // 0x00518E40-0x00518E50
	private bool _IsRolling_k__BackingField; // 0x285
	[CompilerGenerated] // 0x00518E50-0x00518E60
	private bool _IsStumbling_k__BackingField; // 0x286
	[CompilerGenerated] // 0x00518E60-0x00518E70
	private bool _InHill_k__BackingField; // 0x287
	[CompilerGenerated] // 0x00518E70-0x00518E80
	private bool _InHillbyFall_k__BackingField; // 0x288
	public float CurrentHillY; // 0x28C
	[CompilerGenerated] // 0x00518E80-0x00518E90
	private CharacterMoveForward _characterMoveForward_k__BackingField; // 0x290
	[CompilerGenerated] // 0x00518E90-0x00518EA0
	private int _TrackMovement_k__BackingField; // 0x298
	[CompilerGenerated] // 0x00518EA0-0x00518EB0
	private int _TrackIndexTarget_k__BackingField; // 0x29C
	[CompilerGenerated] // 0x00518EB0-0x00518EC0
	private VariableBool _SqueezeCollider_k__BackingField; // 0x2A0

	// Properties
	public bool CanHitRobber { get; } // 0x00784C64-0x00784CA0 
	public static Character Instance { get; } // 0x00785218-0x00785354 
	public bool IsAboveGround { get; } // 0x00788D58-0x00788D8C 
	public bool IsFalling { [CompilerGenerated] /* 0x005214E4-0x005214F4 */ get; [CompilerGenerated] /* 0x005214F4-0x00521504 */ set; } // 0x00788D8C-0x00788D94 0x00788D94-0x00788DA0
	public bool IsInsideSubway { [CompilerGenerated] /* 0x00521504-0x00521514 */ get; [CompilerGenerated] /* 0x00521514-0x00521524 */ private set; } // 0x00788DA0-0x00788DA8 0x00788DA8-0x00788DB4
	public bool InMine { [CompilerGenerated] /* 0x00521524-0x00521534 */ get; [CompilerGenerated] /* 0x00521534-0x00521544 */ set; } // 0x00788DB4-0x00788DBC 0x00788DBC-0x00788DC8
	public bool InMineTimeline { [CompilerGenerated] /* 0x00521544-0x00521554 */ get; [CompilerGenerated] /* 0x00521554-0x00521564 */ set; } // 0x00788DC8-0x00788DD0 0x00788DD0-0x00788DDC
	public bool IsJumping { [CompilerGenerated] /* 0x00521564-0x00521574 */ get; [CompilerGenerated] /* 0x00521574-0x00521584 */ set; } // 0x00788DDC-0x00788DE4 0x00788DE4-0x00788DF0
	public bool IsRolling { [CompilerGenerated] /* 0x00521584-0x00521594 */ get; [CompilerGenerated] /* 0x00521594-0x005215A4 */ private set; } // 0x00788DF0-0x00788DF8 0x00788DF8-0x00788E04
	public bool IsStumbling { [CompilerGenerated] /* 0x005215A4-0x005215B4 */ get; [CompilerGenerated] /* 0x005215B4-0x005215C4 */ set; } // 0x00788E04-0x00788E0C 0x00788E0C-0x00788E18
	public bool InHill { [CompilerGenerated] /* 0x005215C4-0x005215D4 */ get; [CompilerGenerated] /* 0x005215D4-0x005215E4 */ set; } // 0x00788E18-0x00788E20 0x00788E20-0x00788E2C
	public bool InHillbyFall { [CompilerGenerated] /* 0x005215E4-0x005215F4 */ get; [CompilerGenerated] /* 0x005215F4-0x00521604 */ set; } // 0x00788E2C-0x00788E34 0x00788E34-0x00788E40
	public bool CanJump { get; } // 0x00785E2C-0x00785E3C 
	public bool CanRoll { get; } // 0x007886DC-0x007886EC 
	public CharacterMoveForward characterMoveForward { [CompilerGenerated] /* 0x00521604-0x00521614 */ get; [CompilerGenerated] /* 0x00521614-0x00521624 */ private set; } // 0x00788E40-0x00788E48 0x00788E48-0x00788E50
	public int TrackIndex { get; } // 0x00788E50-0x00788E58 
	public int TrackMovement { [CompilerGenerated] /* 0x00521624-0x00521634 */ get; [CompilerGenerated] /* 0x00521634-0x00521644 */ private set; } // 0x00788E58-0x00788E60 0x00788E60-0x00788E68
	public int TrackIndexTarget { [CompilerGenerated] /* 0x00521644-0x00521654 */ get; [CompilerGenerated] /* 0x00521654-0x00521664 */ private set; } // 0x00788E68-0x00788E70 0x00788E70-0x00788E78
	public VariableBool SqueezeCollider { [CompilerGenerated] /* 0x00521664-0x00521674 */ get; [CompilerGenerated] /* 0x00521674-0x00521684 */ private set; } // 0x00788E78-0x00788E80 0x00788E80-0x00788E88

	// Events
	public event OnChangeTrackDelegate OnChangeTrack {
		add; // 0x00781C84-0x00781D2C
		remove; // 0x00781D2C-0x00781DD4
	}
	public event OnCriticalHitDelegate OnCriticalHit {
		add; // 0x00781DD4-0x00781E7C
		remove; // 0x00781E7C-0x00781F24
	}
	public event OnJumpRollDelegate OnJumpRoll {
		add; // 0x00781F24-0x00781FCC
		remove; // 0x00781FCC-0x00782074
	}
	public event OnHangtimeDelegate OnHangtime {
		add; // 0x00782074-0x0078211C
		remove; // 0x0078211C-0x007821C4
	}
	public event OnHitByTrainDelegate OnHitByTrain {
		add; // 0x007821C4-0x0078226C
		remove; // 0x0078226C-0x00782314
	}
	public event OnFallIntoCliffDelegate OnHitCliff {
		add; // 0x00782314-0x007823BC
		remove; // 0x007823BC-0x00782464
	}
	public event OnFallIntoCliffDelegate OnFallIntoCliff {
		add; // 0x00782464-0x0078250C
		remove; // 0x0078250C-0x007825B4
	}
	public event OnJumpDelegate OnJump {
		add; // 0x007825B4-0x0078265C
		remove; // 0x0078265C-0x00782704
	}
	public event OnJumpIfHitByTrainDelegate OnJumpIfHitByTrain {
		add; // 0x00782704-0x007827AC
		remove; // 0x007827AC-0x00782854
	}
	public event OnJumpOverTrainDelegate OnJumpOverTrain {
		add; // 0x00782854-0x007828FC
		remove; // 0x007828FC-0x007829A4
	}
	public event OnLandingDelegate OnLanding {
		add; // 0x007829A4-0x00782A4C
		remove; // 0x00782A4C-0x00782AF4
	}
	public event OnPassedObstacleDelegate OnPassedObstacle {
		add; // 0x00782AF4-0x00782B9C
		remove; // 0x00782B9C-0x00782C44
	}
	public event OnRollDelegate OnRoll {
		add; // 0x00782C44-0x00782CEC
		remove; // 0x00782CEC-0x00782D94
	}
	public event OnRollGuardDelegate OnRollGuard {
		add; // 0x00782D94-0x00782E3C
		remove; // 0x00782E3C-0x00782EE4
	}
	public event OnStumbleDelegate OnStumble {
		add; // 0x00782EE4-0x00782F8C
		remove; // 0x00782F8C-0x00783034
	}
	public event OnStopStumbleDelegate OnStopStumble {
		add; // 0x00783034-0x007830DC
		remove; // 0x007830DC-0x00783184
	}
	public event OnTutorialMoveBackToCheckPointDelegate OnTutorialMoveBackToCheckPoint {
		add; // 0x00783184-0x0078322C
		remove; // 0x0078322C-0x007832D4
	}
	public event OnTutorialStartFromCheckPointDelegate OnTutorialStartFromCheckPoint {
		add; // 0x007832D4-0x0078337C
		remove; // 0x0078337C-0x00783424
	}
	public event OnTurnDelegate OnTurn {
		add; // 0x00783424-0x007834CC
		remove; // 0x007834CC-0x00783574
	}
	public event OnLeanDelegate OnLean {
		add; // 0x00783574-0x0078361C
		remove; // 0x0078361C-0x007836C4
	}
	public event OnOutLeanDelegate OnOutLean {
		add; // 0x007836C4-0x0078376C
		remove; // 0x0078376C-0x00783814
	}
	public event OnEnterRunHuaDelegate OnEnterRunHua {
		add; // 0x00783814-0x007838BC
		remove; // 0x007838BC-0x00783964
	}

	// Nested types
	public enum CriticalHitType // TypeDefIndex: 3907
	{
		Scene = 0,
		Train = 1,
		Barrier = 2,
		MovingTrain = 3,
		Fall = 4,
		Gear = 5,
		Robber = 6,
		None = 7
	}

	private enum ImpactX // TypeDefIndex: 3908
	{
		Left = 0,
		Middle = 1,
		Right = 2
	}

	private enum ImpactY // TypeDefIndex: 3909
	{
		Upper = 0,
		Middle = 1,
		Lower = 2
	}

	private enum ImpactZ // TypeDefIndex: 3910
	{
		Before = 0,
		Middle = 1,
		After = 2
	}

	public enum ObstacleType // TypeDefIndex: 3911
	{
		JumpHighBarrier = 0,
		RollBarrier = 1,
		JumpBarrier = 2,
		None = 3
	}

	public enum OnChangeTrackDirection // TypeDefIndex: 3912
	{
		Left = 0,
		Right = 1
	}

	public enum DeathAnimationType // TypeDefIndex: 3913
	{
		HitMoving = 0,
		Trigger = 1,
		One = 2,
		Two = 3,
		Three = 4
	}

	public delegate void OnChangeTrackDelegate(OnChangeTrackDirection direction); // TypeDefIndex: 3914; 0x00789494-0x007896D8

	public delegate void OnCriticalHitDelegate(CriticalHitType type); // TypeDefIndex: 3915; 0x007868CC-0x00786B10

	public delegate void OnHangtimeDelegate(); // TypeDefIndex: 3916; 0x0073E3F4-0x0073E610

	public delegate void OnJumpRollDelegate(); // TypeDefIndex: 3917; 0x0073F010-0x0073F22C

	public delegate void OnHitByTrainDelegate(); // TypeDefIndex: 3918; 0x0073E660-0x0073E87C

	public delegate void OnFallIntoCliffDelegate(string name); // TypeDefIndex: 3919; 0x00786B40-0x00786EF4

	public delegate void OnJumpDelegate(); // TypeDefIndex: 3920; 0x0073E8CC-0x0073EAE8

	public delegate void OnJumpIfHitByTrainDelegate(); // TypeDefIndex: 3921; 0x0073EB38-0x0073ED54

	public delegate void OnJumpOverTrainDelegate(); // TypeDefIndex: 3922; 0x0073EDA4-0x0073EFC0

	public delegate void OnLandingDelegate(Transform characterTransform); // TypeDefIndex: 3923; 0x0073F27C-0x0073F630

	public delegate void OnPassedObstacleDelegate(ObstacleType type); // TypeDefIndex: 3924; 0x0073FBEC-0x0073FE30

	public delegate void OnRollDelegate(); // TypeDefIndex: 3925; 0x0073FED8-0x007400F4

	public delegate void OnRollGuardDelegate(); // TypeDefIndex: 3926; 0x00740144-0x00740360

	public delegate void OnStumbleDelegate(StumbleType stumbleType, StumbleHorizontalHit horizontalHit, StumbleVerticalHit verticalHit, string colliderName); // TypeDefIndex: 3927; 0x0074061C-0x007408B0

	public delegate void OnStopStumbleDelegate(); // TypeDefIndex: 3928; 0x007403B0-0x007405CC

	public delegate void OnTutorialMoveBackToCheckPointDelegate(float duration); // TypeDefIndex: 3929; 0x00740C90-0x00740EDC

	public delegate void OnTutorialStartFromCheckPointDelegate(); // TypeDefIndex: 3930; 0x00740F84-0x007411A0

	public delegate void OnChangeOnTrackPieceDelegate(TrackPiece oldPiece, TrackPiece newPiece); // TypeDefIndex: 3931; 0x00789B3C-0x00789F1C

	public delegate void OnCurrentDirectionValueChangeDelegate(Vector3 old, Vector3 now); // TypeDefIndex: 3932; 0x0078A0B8-0x0078A380

	public delegate void OnTurnDelegate(bool turnLeft); // TypeDefIndex: 3933; 0x007409A0-0x00740BE4

	public delegate void OnLeanDelegate(float offset, Action<float> slope); // TypeDefIndex: 3934; 0x0073F670-0x0073F8CC

	public delegate void OnOutLeanDelegate(); // TypeDefIndex: 3935; 0x0073F980-0x0073FB9C

	public delegate void OnEnterRunHuaDelegate(bool isenter); // TypeDefIndex: 3936; 0x00784994-0x00784BD8

	public enum StumbleHorizontalHit // TypeDefIndex: 3937
	{
		Left = 0,
		LeftCorner = 1,
		Center = 2,
		RightCorner = 3,
		Right = 4
	}

	public enum StumbleType // TypeDefIndex: 3938
	{
		Normal = 0,
		Bush = 1,
		Side = 2
	}

	public enum StumbleVerticalHit // TypeDefIndex: 3939
	{
		Upper = 0,
		Middle = 1,
		Lower = 2
	}

	[CompilerGenerated] // 0x00514680-0x00514690
	private sealed class __c__DisplayClass141_0 // TypeDefIndex: 3940
	{
		// Fields
		public Character __4__this; // 0x10
		public float trackIndexPositionBegin; // 0x18
		public int newTrackIndex; // 0x1C
		public float startX; // 0x20
		public float endX; // 0x24
		public float dir; // 0x28
		public float startRotation; // 0x2C

		// Constructors
		public __c__DisplayClass141_0(); // 0x00788EC4-0x00788ECC

		// Methods
		internal void _ChangeTrackCoroutine_b__0(float t); // 0x00788ECC-0x007890E8
	}

	[CompilerGenerated] // 0x00514690-0x005146A0
	private sealed class _ChangeTrackCoroutine_d__141 : IEnumerator<object> // TypeDefIndex: 3941
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Character __4__this; // 0x20
		public int move; // 0x28
		public bool force; // 0x2C
		public float duration; // 0x30
		private __c__DisplayClass141_0 __8__1; // 0x38

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526D34-0x00526D44 */ get; } // 0x007896D8-0x007896E0 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526D54-0x00526D64 */ get; } // 0x00789744-0x0078974C 

		// Constructors
		[DebuggerHidden] // 0x00526D14-0x00526D24
		public _ChangeTrackCoroutine_d__141(int __1__state); // 0x00784C38-0x00784C64

		// Methods
		[DebuggerHidden] // 0x00526D24-0x00526D34
		void IDisposable.Dispose(); // 0x00789190-0x00789194
		private bool MoveNext(); // 0x00789194-0x00789494
		[DebuggerHidden] // 0x00526D44-0x00526D54
		void IEnumerator.Reset(); // 0x007896E0-0x00789744
	}

	[CompilerGenerated] // 0x005146A0-0x005146B0
	private sealed class __c__DisplayClass164_0 // TypeDefIndex: 3942
	{
		// Fields
		public Character __4__this; // 0x10
		public float oldX; // 0x18
		public float newX; // 0x1C

		// Constructors
		public __c__DisplayClass164_0(); // 0x007890E8-0x007890F0

		// Methods
		internal void _MoveCharacterToPosition_b__0(float t); // 0x007890F0-0x00789190
	}

	[CompilerGenerated] // 0x005146B0-0x005146C0
	private sealed class _MoveCharacterToPosition_d__164 : IEnumerator<object> // TypeDefIndex: 3943
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Character __4__this; // 0x20
		public float newX; // 0x28
		public float time; // 0x2C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526D84-0x00526D94 */ get; } // 0x00789978-0x00789980 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526DA4-0x00526DB4 */ get; } // 0x007899E4-0x007899EC 

		// Constructors
		[DebuggerHidden] // 0x00526D64-0x00526D74
		public _MoveCharacterToPosition_d__164(int __1__state); // 0x00785F18-0x00785F44

		// Methods
		[DebuggerHidden] // 0x00526D74-0x00526D84
		void IDisposable.Dispose(); // 0x0078974C-0x00789750
		private bool MoveNext(); // 0x00789750-0x00789978
		[DebuggerHidden] // 0x00526D94-0x00526DA4
		void IEnumerator.Reset(); // 0x00789980-0x007899E4
	}

	[CompilerGenerated] // 0x005146C0-0x005146D0
	private sealed class _StumbleDecay_d__196 : IEnumerator<object> // TypeDefIndex: 3944
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Character __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526DD4-0x00526DE4 */ get; } // 0x00789AB8-0x00789AC0 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526DF4-0x00526E04 */ get; } // 0x00789B24-0x00789B2C 

		// Constructors
		[DebuggerHidden] // 0x00526DB4-0x00526DC4
		public _StumbleDecay_d__196(int __1__state); // 0x007887F0-0x0078881C

		// Methods
		[DebuggerHidden] // 0x00526DC4-0x00526DD4
		void IDisposable.Dispose(); // 0x007899EC-0x007899F0
		private bool MoveNext(); // 0x007899F0-0x00789AB8
		[DebuggerHidden] // 0x00526DE4-0x00526DF4
		void IEnumerator.Reset(); // 0x00789AC0-0x00789B24
	}

	// Constructors
	public Character(); // 0x00788E88-0x00788EC4

	// Methods
	private void Awake(); // 0x00783964-0x00783A68
	private void Start(); // 0x00783A68-0x00783A6C
	public void ApplyGravity(); // 0x00783C9C-0x007841E8
	public bool SlopDown(); // 0x0078428C-0x0078438C
	public float CalculateJumpVerticalSpeed(); // 0x0078438C-0x00784394
	public float CalculateJumpVerticalSpeed(float jumpHeight); // 0x00784394-0x0078442C
	private void Slope(float x); // 0x0078442C-0x007845C4
	public void Lean(float offset); // 0x007845C4-0x00784680
	public void OutLean(); // 0x00784680-0x007846BC
	public bool isCharacterInMidTrack(); // 0x007846BC-0x007846E8
	public IEnumerator ChangeTrackForCar(float duartion); // 0x007846E8-0x00784730
	public void ChangeTrack(int movement, float duration); // 0x007847D0-0x00784994
	[IteratorStateMachine] // 0x005213B8-0x0052141C
	private IEnumerator ChangeTrackCoroutine(int move, float duration, bool force = false /* Metadata: 0x001F6113 */); // 0x00784730-0x007847D0
	public void CheckInAirJump(); // 0x00784CA0-0x00784CE8
	public void EndRoll(); // 0x00784E1C-0x00784E54
	public void ForceChangeTrack(int movement, float duration, bool force = false /* Metadata: 0x001F6114 */); // 0x00784BD8-0x00784C38
	public void ForceLeaveSubway(); // 0x00784E54-0x00784EB4
	private ImpactX GetImpactX(Bounds characterBounds, Bounds colliderBounds); // 0x00784EB4-0x00784FF0
	private ImpactY GetImpactY(Bounds characterBounds, Bounds colliderBounds); // 0x00784FF0-0x00785124
	private ImpactZ GetImpactZ(Bounds characterBounds, Bounds colliderBounds); // 0x00785124-0x00785218
	private void HandleRevive(); // 0x00785354-0x00785440
	private void HandleStumble(StumbleType stumbleType, StumbleHorizontalHit horizontalHit, StumbleVerticalHit verticalHit, string colliderName); // 0x0078545C-0x007854FC
	private void HitByTrainSequence(); // 0x00785654-0x00785658
	public void DelegateIsInGame(bool isInGame); // 0x0078568C-0x007856D8
	public void DelegateSqueeze(bool squeeze); // 0x007856D8-0x0078589C
	public void Initialize(); // 0x0078589C-0x00785E2C
	private bool IsRunningOnGround(); // 0x007841E8-0x00784210
	public void Jump(); // 0x00784CE8-0x00784E1C
	public float JumpLength(float speed, float jumpHeight); // 0x00785E50-0x00785E90
	[IteratorStateMachine] // 0x0052141C-0x00521480
	public IEnumerator MoveCharacterToPosition(float newX, float newZ, float time); // 0x00785E90-0x00785F18
	public void SetWhenEnvironmentChange(); // 0x00785F44-0x0078616C
	public void MoveCharacterToRevivePosition(); // 0x0078616C-0x0078652C
	public void MoveWithGravity(); // 0x0078652C-0x00786624
	private void NotifyCriticalHit(); // 0x00786624-0x007868CC
	private void NotifyOnHangtime(); // 0x00784278-0x0078428C
	private void NotifyOnHitCliff(string name); // 0x00786B10-0x00786B40
	private void NotifyOnFallIntoCliff(string name); // 0x00786EF4-0x00786F24
	private void NotifyOnHitByTrain(); // 0x00785658-0x0078568C
	private void NotifyOnJump(); // 0x00785E3C-0x00785E50
	private void NotifyOnJumpOverTrain(); // 0x00784210-0x00784224
	private void NotifyOnLanding(); // 0x00784224-0x00784264
	private void NotifyOnJumpRoll(); // 0x00784264-0x00784278
	private void NotifyOnRoll(); // 0x00786F24-0x00786F38
	private void NotifyOnStumble(StumbleType stumbleType, StumbleHorizontalHit horizontalHit, StumbleVerticalHit verticalHit, string colliderName); // 0x007854FC-0x00785510
	private void NotifyOnStopStumble(); // 0x00786F38-0x00786F4C
	private void NotifyOnTutorialMoveBackToCheckPoint(float duration); // 0x00786F4C-0x00786F60
	private void NotifyOnTutorialStartFromCheckPoint(); // 0x00786F60-0x00786F74
	public void NotifyPickup(IPickup pickup); // 0x00786F74-0x00787020
	public void NotifyPickupCheck(ChestPickup pickup); // 0x00787020-0x007870C8
	private ObstacleType ObstacleTypeByTag(string tag); // 0x007870C8-0x0078717C
	public void RobberAttack(); // 0x0078717C-0x00787250
	public void HIT_DEATHPlay(); // 0x00787250-0x00787344
	private void OnCharacterColliderEnter(Collider collider); // 0x00787344-0x007881AC
	private void OnCharacterColliderExit(Collider collider); // 0x0078838C-0x00788538
	public void HandleShieldDisplace(Collider collider); // 0x007881AC-0x0078838C
	public void SqureTurn(int afterTurnTrackIndex, bool turnLeft); // 0x00788538-0x007885B4
	public void Restart(); // 0x00783A6C-0x00783C9C
	public void Roll(); // 0x007885B4-0x007886DC
	public void SetBackToCheckPoint(float zoomTime); // 0x007886EC-0x0078877C
	private void StartStumble(); // 0x00785510-0x00785654
	public void StopStumble(); // 0x00785440-0x0078545C
	[IteratorStateMachine] // 0x00521480-0x005214E4
	private IEnumerator StumbleDecay(); // 0x0078877C-0x007887F0
	public Wall CanWallWithSwipeDir(SwipeDir dir); // 0x0078881C-0x00788938
	public void WallEndWithSwipeDir(SwipeDir dir); // 0x00788938-0x00788994
	public void ResetWalls(); // 0x00788994-0x00788B0C
	public void Update(); // 0x00788B0C-0x00788CAC
	public bool CanCotrolSwipeByTutorial(SwipeDir dir); // 0x00788CAC-0x00788D58
}

public class CharacterAnimationControl : MonoBehaviour // TypeDefIndex: 3945
{
	// Fields
	private Animation animationComponent; // 0x18

	// Constructors
	public CharacterAnimationControl(); // 0x007412A0-0x007412A8

	// Methods
	private void Awake(); // 0x007411E0-0x00741248
	public void Play(string name); // 0x00741248-0x00741264
	public void Speed(string name, float speed); // 0x00741264-0x007412A0
}

public class CharacterAudio : MonoBehaviour // TypeDefIndex: 3946
{
	// Fields
	[SerializeField] // 0x00518EC0-0x00518ED0
	private string jump_man; // 0x18
	[SerializeField] // 0x00518ED0-0x00518EE0
	private string jump_woman; // 0x20
	[SerializeField] // 0x00518EE0-0x00518EF0
	private string roll_man; // 0x28
	[SerializeField] // 0x00518EF0-0x00518F00
	private string roll_woman; // 0x30
	[SerializeField] // 0x00518F00-0x00518F10
	private string dodgeLeft_man; // 0x38
	[SerializeField] // 0x00518F10-0x00518F20
	private string dodgeLeft_woman; // 0x40
	[SerializeField] // 0x00518F20-0x00518F30
	private string dodgeRight_man; // 0x48
	[SerializeField] // 0x00518F30-0x00518F40
	private string dodgeRight_woman; // 0x50
	[SerializeField] // 0x00518F40-0x00518F50
	private string turnLeft_man; // 0x58
	[SerializeField] // 0x00518F50-0x00518F60
	private string turnLeft_woman; // 0x60
	[SerializeField] // 0x00518F60-0x00518F70
	private string turnRight_man; // 0x68
	[SerializeField] // 0x00518F70-0x00518F80
	private string turnRight_woman; // 0x70
	[SerializeField] // 0x00518F80-0x00518F90
	private string landing_man; // 0x78
	[SerializeField] // 0x00518F90-0x00518FA0
	private string landing_woman; // 0x80
	[SerializeField] // 0x00518FA0-0x00518FB0
	private List<string> stumbles_man; // 0x88
	[SerializeField] // 0x00518FB0-0x00518FC0
	private List<string> stumbles_woman; // 0x90
	private Character character; // 0x98
	private CharacterModel characterModel; // 0xA0
	private Game game; // 0xA8
	private AudioSource dodgeLeftman; // 0xB0
	private AudioSource dodgeLeftwoman; // 0xB8
	private AudioSource dodgeRightman; // 0xC0
	private AudioSource dodgeRightwoman; // 0xC8
	private AudioSource jumpman; // 0xD0
	private AudioSource jumpwoman; // 0xD8
	private AudioSource rollman; // 0xE0
	private AudioSource rollwoman; // 0xE8
	private AudioSource landingman; // 0xF0
	private AudioSource landingwoman; // 0xF8

	// Constructors
	public CharacterAudio(); // 0x0074325C-0x007432EC

	// Methods
	public void Start(); // 0x0074208C-0x00742320
	private void OnDoTurn(bool turnLeft); // 0x00742320-0x00742530
	private void HandleOnChangeTrack(Character.OnChangeTrackDirection direction); // 0x00742530-0x00742600
	private void PlaySoundNow(string name, Vector3 position, ref AudioSource audio); // 0x00742600-0x00742880
	private void PlaySoundNopos(string name, ref AudioSource audio); // 0x00742880-0x00742AC0
	private void HandleOnJump(); // 0x00742AC0-0x00742AF8
	private void HandleOnRoll(); // 0x00742AF8-0x00742B30
	private void HandleOnLanding(Transform characterTransform); // 0x00742B30-0x00742B88
	private void HandleOnScoreBoostActivated(); // 0x00742B88-0x00742C60
	private void HandleOnStumble(Character.StumbleType stumbleType, Character.StumbleHorizontalHit horizontalHit, Character.StumbleVerticalHit verticalHit, string colliderName); // 0x00742C60-0x00742F2C
	private void HandleOnTurboHeadstartInput(); // 0x00742F2C-0x00742FEC
	private void FlypackOnStart(bool isHeadStart); // 0x00742FEC-0x00743140
	private void FlypackOnStop(); // 0x00743140-0x0074325C
}

public class CharacterCustomization : MonoBehaviour // TypeDefIndex: 3947
{
	// Fields
	private Texture2D gradient; // 0x18
	public CustomControl[] Customs; // 0x20

	// Nested types
	[Serializable]
	public class CustomControl // TypeDefIndex: 3948
	{
		// Fields
		public string name; // 0x10
		public int isGirl; // 0x18
		public CustomizeControl customSets; // 0x20

		// Constructors
		public CustomControl(); // 0x00743568-0x00743570
	}

	// Constructors
	public CharacterCustomization(); // 0x00743560-0x00743568

	// Methods
	public int Customize(string name, int themeIndex, ref SkinnedMeshRenderer model); // 0x007432EC-0x00743484
	public void DoFlash(string name, int themeIndex, Material flash, bool isStart); // 0x00743484-0x00743560
}

public class CharacterModel : MonoBehaviour, ICharacterModel // TypeDefIndex: 3949
{
	// Fields
	[OptionalField] // 0x00518FC0-0x00518FD0
	public SkinnedMeshRenderer currentRender; // 0x18
	[OptionalField] // 0x00518FD0-0x00518FE0
	public MeshRenderer meshBlobShadow; // 0x20
	[OptionalField] // 0x00518FE0-0x00518FF0
	public Animation characterAnimation; // 0x28
	[OptionalField] // 0x00518FF0-0x00519000
	public Animation wingAnimation; // 0x30
	[OptionalField] // 0x00519000-0x00519010
	public Transform tramcarTransform; // 0x38
	[OptionalField] // 0x00519010-0x00519020
	public Transform hillTransform; // 0x40
	[OptionalField] // 0x00519020-0x00519030
	public Transform shieldTransform; // 0x48
	[OptionalField] // 0x00519030-0x00519040
	public Transform spineTransform; // 0x50
	[OptionalField] // 0x00519040-0x00519050
	public Transform HitRooberTransform; // 0x58
	[OptionalField] // 0x00519050-0x00519060
	public Transform headJoint; // 0x60
	[OptionalField] // 0x00519060-0x00519070
	public Transform footJoint; // 0x68
	[OptionalField] // 0x00519070-0x00519080
	public Transform rightHand; // 0x70
	[OptionalField] // 0x00519080-0x00519090
	public Transform leftArm; // 0x78
	[OptionalField] // 0x00519090-0x005190A0
	public Transform rightArm; // 0x80
	[OptionalField] // 0x005190A0-0x005190B0
	public Transform avtar; // 0x88
	public GameObject tramcarPrefab; // 0x90
	public GameObject hillPrefab; // 0x98
	[OptionalField] // 0x005190B0-0x005190C0
	public GameObject LeftHandPS; // 0xA0
	[OptionalField] // 0x005190C0-0x005190D0
	public GameObject RightHandPS; // 0xA8
	private GameObject currentTramcar; // 0xB0
	private GameObject currentHill; // 0xB8
	public ParticleSystem ongroundPs; // 0xC0
	private Animation _animationComponent; // 0xC8
	private CharacterCustomization characterCustomization; // 0xD0
	[CompilerGenerated] // 0x005190D0-0x005190E0
	private int _IsGirl_k__BackingField; // 0xD8

	// Properties
	public Transform BoneFoot { get; } // 0x007443CC-0x007443D4 
	public Transform BoneHead { get; } // 0x007443D4-0x007443DC 
	public Transform BoneHelmet { get; } // 0x007443DC-0x007443E4 
	public Transform BoneTramcar { get; } // 0x007443E4-0x007443EC 
	public Transform BoneHill { get; } // 0x007443EC-0x007443F4 
	public Transform BoneRightHand { get; } // 0x007443F4-0x007443FC 
	public int IsGirl { [CompilerGenerated] /* 0x00521684-0x00521694 */ get; [CompilerGenerated] /* 0x00521694-0x005216A4 */ set; } // 0x007443FC-0x00744404 0x00744404-0x0074440C

	// Constructors
	public CharacterModel(); // 0x0074440C-0x00744414

	// Methods
	public void SetHandPs(bool isshow); // 0x00743664-0x007436AC
	public void Awake(); // 0x007436AC-0x00743788
	public void SetRaft(GameObject raft); // 0x00743858-0x0074385C
	public void RemoveRaft(); // 0x0074385C-0x00743860
	public GameObject SetNewHelmet(GameObject root, GameObject newHelm, string helmName); // 0x00743860-0x00743868
	public void AddModuleHelmetModel(GameObject modelPrefab, bool isMenu, Transform parent); // 0x00743868-0x0074386C
	public void AddModuleHelmetMenuFX(GameObject modelPrefab, Transform parent); // 0x0074386C-0x00743870
	public GameObject AddHelmetModel(); // 0x00743870-0x00743878
	public void DeleteHelmModels(); // 0x00743878-0x0074387C
	public GameObject AddTramcarModel(); // 0x0074387C-0x007439F0
	public GameObject AddHillModel(); // 0x007439F0-0x00743B64
	public void ChangeCharacterOfPlayByPlayerInfo(); // 0x00743788-0x00743858
	public void ChangeCharacterModel(string name, int themeIndex); // 0x00743B64-0x00743C1C
	public Animation GetAnimation(); // 0x00743C1C-0x00743CB4
	public GameObject GetHelmetRoot(); // 0x00743CB4-0x00743CBC
	public void HideAllPowerups(); // 0x00743CBC-0x00743CEC
	public void HideBlobShadow(); // 0x00743CEC-0x00743D0C
	public void StartIdleAnimations(); // 0x00743D0C-0x00743E00
	public void StartTryAnimation(); // 0x00743E00-0x00744018
	public void StopTryAnimations(); // 0x00744018-0x007440F8
	public void StartHighScoreAnimations(); // 0x007440F8-0x007441EC
	public void StopIdleAnimations(); // 0x007441EC-0x007442E0
	public void DoFlash(Material flash, bool isStart); // 0x007442E0-0x007443CC
}

public class CharacterPopup : MonoBehaviour // TypeDefIndex: 3950
{
	// Fields
	public Animation anim; // 0x18

	// Constructors
	public CharacterPopup(); // 0x00748698-0x007486A0

	// Methods
	public void Update(); // 0x00748650-0x00748698
}

public class CharacterRendering : MonoBehaviour // TypeDefIndex: 3951
{
	// Fields
	[SerializeField] // 0x005190E0-0x005190F0
	private AnimationClipLists manAnimations; // 0x18
	[SerializeField] // 0x005190F0-0x00519100
	private AnimationClipLists womanAnimations; // 0x20
	[SerializeField] // 0x00519100-0x00519110
	private JetpackClips man_jetpackAnimations; // 0x28
	[SerializeField] // 0x00519110-0x00519120
	private JetpackClips woman_jetpackAnimations; // 0x30
	[OptionalField] // 0x00519120-0x00519130
	public Animation characterAnimation2; // 0x38
	[OptionalField] // 0x00519130-0x00519140
	public Animation characterAnimation; // 0x40
	[OptionalField] // 0x00519140-0x00519150
	public Animation wingAnimation; // 0x48
	[SerializeField] // 0x00519150-0x00519160
	private AnimationCurve jetpackParticleOffsetCurve; // 0x50
	public Animations man_animations; // 0x58
	public Animations woman_animations; // 0x60
	[SerializeField] // 0x00519160-0x00519170
	private GameObject characterModelPrefab; // 0x68
	[SerializeField] // 0x00519170-0x00519180
	private GameObject characterRenderingEffectsPrefab; // 0x70
	[SerializeField] // 0x00519180-0x00519190
	private PaticlesHelper sprintParticle; // 0x78
	[SerializeField] // 0x00519190-0x005191A0
	private PaticlesHelper huaParticle; // 0x80
	private List<AnimationClip> addedAnimClipsNames; // 0x88
	private Character character; // 0x90
	private CharacterController characterController; // 0x98
	public CharacterModel characterModel; // 0xA0
	public CharacterRenderingEffects characterRenderingEffects; // 0xA8
	private Game game; // 0xB0
	private string hangtimeAnimation; // 0xB8
	private TramcarRendering tramcarRendering; // 0xC0
	private HillRendering hillRendering; // 0xC8
	private FallRendering fallRendering; // 0xD0
	private Vector3 effectInitRot; // 0xD8
	private Vector3 effectInitScale; // 0xE4
	private static CharacterRendering instance; // 0x00
	private bool isRolling; // 0xF0
	private Flypack flypack; // 0xF8
	private string jumpAnimation; // 0x100
	private string leanAnimation; // 0x108
	private float lastLeanOffset; // 0x110
	private Revive revive; // 0x118
	public Tramcar tramcar; // 0x120
	private HillAttach hillAttach; // 0x128
	private Sprint sprint; // 0x130
	private WallWalking wallWalking; // 0x138
	private bool canLean; // 0x140
	[CompilerGenerated] // 0x005191A0-0x005191B0
	private CharacterModelInitializedDelegate CharacterModelInitialized; // 0x148
	public Material flashMat; // 0x150
	private Material flashMatTmp; // 0x158
	public float flashSpeed; // 0x160
	public bool isFlashing; // 0x164
	private bool isInSingleChain; // 0x165
	public GameObject ShadowProject; // 0x168
	public static List<int> RobberInRoad; // 0x08
	public static int CharWillInRoad; // 0x10
	public string hitrobberAnimationName; // 0x170
	private Character.OnChangeTrackDirection curdirection; // 0x178

	// Properties
	private Material MaterialTmp { get; } // 0x0074EDBC-0x0074EE70 
	public CharacterRenderingEffects CharacterRenderingEffects { get; } // 0x00750420-0x00750428 
	public CharacterModel CharacterModel { get; } // 0x00750428-0x00750430 
	public static CharacterRendering Instance { get; } // 0x00744B30-0x00744C50 

	// Events
	public event CharacterModelInitializedDelegate CharacterModelInitialized {
		add; // 0x007486A0-0x00748748
		remove; // 0x00748748-0x007487F0
	}

	// Nested types
	public delegate void CharacterModelInitializedDelegate(GameObject helmetRoot); // TypeDefIndex: 3952; 0x00750050-0x00750404

	[Serializable]
	public class AnimationClipLists // TypeDefIndex: 3953
	{
		// Fields
		public AnimationClip[] run; // 0x10
		public AnimationClip[] startWallRunLeft; // 0x18
		public AnimationClip[] wallRunLeft; // 0x20
		public AnimationClip[] endWallRunLeft; // 0x28
		public AnimationClip[] startWallRunRight; // 0x30
		public AnimationClip[] wallRunRight; // 0x38
		public AnimationClip[] endWallRunRight; // 0x40
		public AnimationClip[] jump; // 0x48
		public AnimationClip[] hangtime; // 0x50
		public AnimationClip[] landing; // 0x58
		public AnimationClip[] dodgeLeft; // 0x60
		public AnimationClip[] dodgeRight; // 0x68
		public AnimationClip[] turnLeft; // 0x70
		public AnimationClip[] turnRight; // 0x78
		public AnimationClip[] roll; // 0x80
		public AnimationClip[] fall; // 0x88
		public AnimationClip[] fallIntoWater; // 0x90
		public AnimationClip[] fallInMine; // 0x98
		public AnimationClip[] hitMid; // 0xA0
		public AnimationClip[] hitUpper; // 0xA8
		public AnimationClip[] hitLower; // 0xB0
		public AnimationClip[] hitMoving; // 0xB8
		public AnimationClip[] hitOne; // 0xC0
		public AnimationClip[] hitTwo; // 0xC8
		public AnimationClip[] hitThree; // 0xD0
		public AnimationClip[] fire; // 0xD8
		public AnimationClip[] pickChest; // 0xE0
		public AnimationClip[] stumble; // 0xE8
		public AnimationClip[] stumbleMix; // 0xF0
		public AnimationClip[] stumbleDeath; // 0xF8
		public AnimationClip[] stumbleLeftSide; // 0x100
		public AnimationClip[] stumbleRightSide; // 0x108
		public AnimationClip[] stumbleLeftCorner; // 0x110
		public AnimationClip[] stumbleRightCorner; // 0x118
		public AnimationClip[] runHua; // 0x120
		public AnimationClip[] runPh; // 0x128
		private string[] run_name; // 0x130
		private string[] superRun_name; // 0x138
		private string[] jump_name; // 0x140
		private string[] hangtime_name; // 0x148
		private string[] landing_name; // 0x150
		private string[] dodgeLeft_name; // 0x158
		private string[] dodgeRight_name; // 0x160
		private string[] turnLeft_name; // 0x168
		private string[] turnRight_name; // 0x170
		private string[] roll_name; // 0x178

		// Properties
		public string[] Run { get; } // 0x0074A1B0-0x0074A2D8 
		public string[] Jump { get; } // 0x0074A400-0x0074A528 
		public string[] Hangtime { get; } // 0x0074A528-0x0074A650 
		public string[] Landing { get; } // 0x0074A650-0x0074A778 
		public string[] DodgeLeft { get; } // 0x0074A778-0x0074A8A0 
		public string[] DodgeRight { get; } // 0x0074A8A0-0x0074A9C8 
		public string[] TurnLeft { get; } // 0x0074AAF0-0x0074AC18 
		public string[] TurnRight { get; } // 0x0074AC18-0x0074AD40 
		public string[] Roll { get; } // 0x0074A9C8-0x0074AAF0 

		// Constructors
		public AnimationClipLists(); // 0x00750FC0-0x00750FC8
	}

	[Serializable]
	public class Animations // TypeDefIndex: 3954
	{
		// Fields
		public string[] RUN; // 0x10
		public string[] START_WALLRUN_LEFT; // 0x18
		public string[] WALLRUN_LEFT; // 0x20
		public string[] END_WALLRUN_LEFT; // 0x28
		public string[] START_WALLRUN_RIGHT; // 0x30
		public string[] WALLRUN_RIGHT; // 0x38
		public string[] END_WALLRUN_RIGHT; // 0x40
		public string[] LAND; // 0x48
		public string[] JUMP; // 0x50
		public string[] HANGTIME; // 0x58
		public string[] ROLL; // 0x60
		public string[] DODGE_LEFT; // 0x68
		public string[] DODGE_RIGHT; // 0x70
		public string[] TURN_LEFT; // 0x78
		public string[] TURN_RIGHT; // 0x80
		public string[] LEAN_LEFT; // 0x88
		public string[] LEAN_RIGHT; // 0x90
		public string[] TURBO_HEADSTART; // 0x98
		public string[] FALL; // 0xA0
		public string[] FALLINTOWATER; // 0xA8
		public string[] FALLINTOMINE; // 0xB0
		public string[] HIT_MID; // 0xB8
		public string[] HIT_UPPER; // 0xC0
		public string[] HIT_LOWER; // 0xC8
		public string[] HIT_MOVING; // 0xD0
		public string[] HIT_ONE; // 0xD8
		public string[] HIT_TWO; // 0xE0
		public string[] HIT_THREE; // 0xE8
		public string[] FIRE; // 0xF0
		public string[] PICKCHEST; // 0xF8
		public string[] STUMBLE_MIX; // 0x100
		public string[] STUMBLE_LEFT_SIDE; // 0x108
		public string[] STUMBLE_RIGHT_SIDE; // 0x110
		public string[] STUMBLE_LEFT_CORNER; // 0x118
		public string[] STUMBLE_RIGHT_CORNER; // 0x120
		public string[] STUMBLE_DEATH; // 0x128
		public string[] RUN_HUA; // 0x130
		public string[] RUN_PH; // 0x138
		public string[] GRIND; // 0x140
		public string[] GET_ON_CAR; // 0x148
		public string[] GET_OUT_CAR; // 0x150
		public string[] STUMBLE; // 0x158
		public string DEFAULT_ANIMATION; // 0x160
		public string DEFAULT_TRAMCAR_ANIMATION; // 0x168

		// Properties
		public string DodgeLeft { get; } // 0x0074CBD4-0x0074CBDC 
		public string DodgeRight { get; } // 0x0074CBDC-0x0074CBE4 
		public string TurnLeft { get; } // 0x0074A084-0x0074A08C 
		public string TurnRight { get; } // 0x0074A074-0x0074A07C 
		public string LeanLeft { get; } // 0x0074DAA8-0x0074DAB0 
		public string LeanRight { get; } // 0x0074DAB0-0x0074DAB8 
		public string RunHua { get; } // 0x0074DC00-0x0074DC08 
		public string RunPh { get; } // 0x0074DC08-0x0074DC10 
		public string GetOnCar { get; } // 0x00751024-0x0075102C 
		public string GetOutCar { get; } // 0x0075102C-0x00751034 
		public string Grind { get; } // 0x00751034-0x0075103C 
		public string Hangtime { get; } // 0x0074CFF4-0x0074CFFC 
		public string HitLower { get; } // 0x0075103C-0x00751044 
		public string HitMid { get; } // 0x0074E654-0x0074E65C 
		public string HitMoving { get; } // 0x0074D17C-0x0074D184 
		public string HitOne { get; } // 0x0074D2F4-0x0074D2FC 
		public string HitTwo { get; } // 0x0074D4AC-0x0074D4B4 
		public string HitThree { get; } // 0x0074D4B4-0x0074D4BC 
		public string Fall { get; } // 0x0074D2DC-0x0074D2E4 
		public string FallIntoWater { get; } // 0x0074D2E4-0x0074D2EC 
		public string FallInMine { get; } // 0x0074D2EC-0x0074D2F4 
		public string Fire { get; } // 0x0074D4A4-0x0074D4AC 
		public string PickChest { get; } // 0x00751044-0x0075104C 
		public string HitUpper { get; } // 0x0074E65C-0x0074E664 
		public string Jump { get; } // 0x0074C768-0x0074C770 
		public string Land { get; } // 0x0074DBF8-0x0074DC00 
		public string Roll { get; } // 0x00750B60-0x00750B68 
		public string Run { get; } // 0x0074A07C-0x0074A084 
		public string StartWallRunLeft { get; } // 0x0074C688-0x0074C690 
		public string WallRunLeft { get; } // 0x0074C690-0x0074C698 
		public string EndWallRunLeft { get; } // 0x0074C818-0x0074C820 
		public string StartWallRunRight { get; } // 0x0074C698-0x0074C6A0 
		public string WallRunRight { get; } // 0x0074C6A0-0x0074C6A8 
		public string EndWallRunRight { get; } // 0x0074C820-0x0074C828 
		public string Stumble { get; } // 0x0074E64C-0x0074E654 
		public string StumbleLeftCorner { get; } // 0x0074E664-0x0074E66C 
		public string StumbleLeftSide { get; } // 0x0074E63C-0x0074E644 
		public string StumbleMix { get; } // 0x0074E634-0x0074E63C 
		public string StumbleRightCorner { get; } // 0x0074E66C-0x0074E674 
		public string StumbleRightSide { get; } // 0x0074E644-0x0074E64C 
		public string StumbleDeath { get; } // 0x0074C3CC-0x0074C3D4 

		// Constructors
		public Animations(); // 0x0074AD40-0x0074B994

		// Methods
		private string GetRandomAnimationName(string[] animationsNames); // 0x00750FC8-0x00751024
	}

	[Serializable]
	public class JetpackClips // TypeDefIndex: 3955
	{
		// Fields
		public AnimationClip[] run; // 0x10
		public AnimationClip[] dodgeLeft; // 0x18
		public AnimationClip[] dodgeRight; // 0x20
		public AnimationClip[] turnLeft; // 0x28
		public AnimationClip[] turnRight; // 0x30
		private string[] run_name; // 0x38
		private string[] dodgeLeft_name; // 0x40
		private string[] dodgeRight_name; // 0x48
		private string[] turnLeft_name; // 0x50
		private string[] turnRight_name; // 0x58

		// Properties
		public string[] Run { get; } // 0x0074F484-0x0074F5AC 
		public string[] DodgeLeft { get; } // 0x0074F5AC-0x0074F6D4 
		public string[] DodgeRight { get; } // 0x0074F6D4-0x0074F7FC 
		public string[] TurnLeft { get; } // 0x0074F7FC-0x0074F924 
		public string[] TurnRight { get; } // 0x0074F924-0x0074FA4C 

		// Constructors
		public JetpackClips(); // 0x0075108C-0x00751094
	}

	[CompilerGenerated] // 0x005146D0-0x005146E0
	private sealed class _Wait_d__72 : IEnumerator<object> // TypeDefIndex: 3956
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public float time; // 0x20
		public CharacterRendering __4__this; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526E24-0x00526E34 */ get; } // 0x00750CA8-0x00750CB0 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526E44-0x00526E54 */ get; } // 0x00750D14-0x00750D1C 

		// Constructors
		[DebuggerHidden] // 0x00526E04-0x00526E14
		public _Wait_d__72(int __1__state); // 0x0074CF18-0x0074CF44

		// Methods
		[DebuggerHidden] // 0x00526E14-0x00526E24
		void IDisposable.Dispose(); // 0x00750BDC-0x00750BE0
		private bool MoveNext(); // 0x00750BE0-0x00750CA8
		[DebuggerHidden] // 0x00526E34-0x00526E44
		void IEnumerator.Reset(); // 0x00750CB0-0x00750D14
	}

	[CompilerGenerated] // 0x005146E0-0x005146F0
	private sealed class _WaitSetAnimation_d__73 : IEnumerator<object> // TypeDefIndex: 3957
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public float time; // 0x20
		public CharacterRendering __4__this; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526E74-0x00526E84 */ get; } // 0x00750E74-0x00750E7C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526E94-0x00526EA4 */ get; } // 0x00750EE0-0x00750EE8 

		// Constructors
		[DebuggerHidden] // 0x00526E54-0x00526E64
		public _WaitSetAnimation_d__73(int __1__state); // 0x0074CFC8-0x0074CFF4

		// Methods
		[DebuggerHidden] // 0x00526E64-0x00526E74
		void IDisposable.Dispose(); // 0x00750D1C-0x00750D20
		private bool MoveNext(); // 0x00750D20-0x00750E74
		[DebuggerHidden] // 0x00526E84-0x00526E94
		void IEnumerator.Reset(); // 0x00750E7C-0x00750EE0
	}

	[CompilerGenerated] // 0x005146F0-0x00514700
	private sealed class __c__DisplayClass76_0 // TypeDefIndex: 3958
	{
		// Fields
		public CharacterRendering __4__this; // 0x10
		public Vector3 currentPos; // 0x18
		public Vector3 camPos; // 0x24

		// Constructors
		public __c__DisplayClass76_0(); // 0x0074D174-0x0074D17C

		// Methods
		internal void _OnHitByTrain_b__0(float t); // 0x00750578-0x00750678
	}

	[CompilerGenerated] // 0x00514700-0x00514710
	private sealed class _OnRollPlayAnimation_d__89 : IEnumerator<object> // TypeDefIndex: 3959
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public CharacterRendering __4__this; // 0x20
		private string _rollAnimation_5__2; // 0x28
		private float _endTime_5__3; // 0x30

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526EC4-0x00526ED4 */ get; } // 0x00750B68-0x00750B70 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526EE4-0x00526EF4 */ get; } // 0x00750BD4-0x00750BDC 

		// Constructors
		[DebuggerHidden] // 0x00526EA4-0x00526EB4
		public _OnRollPlayAnimation_d__89(int __1__state); // 0x0074DF10-0x0074DF3C

		// Methods
		[DebuggerHidden] // 0x00526EB4-0x00526EC4
		void IDisposable.Dispose(); // 0x00750950-0x00750954
		private bool MoveNext(); // 0x00750954-0x00750B60
		[DebuggerHidden] // 0x00526ED4-0x00526EE4
		void IEnumerator.Reset(); // 0x00750B70-0x00750BD4
	}

	[CompilerGenerated] // 0x00514710-0x00514720
	private sealed class _Flash_d__101 : IEnumerator<object> // TypeDefIndex: 3960
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public CharacterRendering __4__this; // 0x20
		private float _time_5__2; // 0x28
		private Color _color_5__3; // 0x2C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526F14-0x00526F24 */ get; } // 0x007508DC-0x007508E4 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526F34-0x00526F44 */ get; } // 0x00750948-0x00750950 

		// Constructors
		[DebuggerHidden] // 0x00526EF4-0x00526F04
		public _Flash_d__101(int __1__state); // 0x0074EEE4-0x0074EF10

		// Methods
		[DebuggerHidden] // 0x00526F04-0x00526F14
		void IDisposable.Dispose(); // 0x00750678-0x0075067C
		private bool MoveNext(); // 0x0075067C-0x007508DC
		[DebuggerHidden] // 0x00526F24-0x00526F34
		void IEnumerator.Reset(); // 0x007508E4-0x00750948
	}

	[CompilerGenerated] // 0x00514720-0x00514730
	private sealed class _delayStopAnimation_d__106 : IEnumerator<object> // TypeDefIndex: 3961
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public CharacterRendering __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526F64-0x00526F74 */ get; } // 0x00750F4C-0x00750F54 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526F84-0x00526F94 */ get; } // 0x00750FB8-0x00750FC0 

		// Constructors
		[DebuggerHidden] // 0x00526F44-0x00526F54
		public _delayStopAnimation_d__106(int __1__state); // 0x0074F1CC-0x0074F1F8

		// Methods
		[DebuggerHidden] // 0x00526F54-0x00526F64
		void IDisposable.Dispose(); // 0x00750EE8-0x00750EEC
		private bool MoveNext(); // 0x00750EEC-0x00750F4C
		[DebuggerHidden] // 0x00526F74-0x00526F84
		void IEnumerator.Reset(); // 0x00750F54-0x00750FB8
	}

	// Constructors
	public CharacterRendering(); // 0x00750430-0x007504F8
	static CharacterRendering(); // 0x007504F8-0x00750574

	// Methods
	public void Initialize(); // 0x007487F0-0x00749448
	private void OnWillTurnNextSegment(TrackPiece piece, int segment); // 0x00749EC4-0x0074A074
	private void OnTurn(bool turnLeft); // 0x0074A08C-0x0074A124
	private void OnDoTurnEnd(TrackPiece piece, int segment); // 0x0074A124-0x0074A1B0
	private void InitializeAnimations(); // 0x00749584-0x00749E28
	public void InitializeCharacterModel(); // 0x00749448-0x00749584
	private void InitializeCharacterRenderingEffects(); // 0x00749E28-0x00749EC4
	private void AddClips(AnimationClip[] clips, string[] names); // 0x0074A2D8-0x0074A400
	private string[] InitializeClips(AnimationClip[] clips); // 0x0074B994-0x0074BB10
	private void IsInGame_OnChange(bool isInGame); // 0x0074BC44-0x0074BC48
	private void HandleOnTurboHeadstart(); // 0x0074BC48-0x0074BD14
	private void FlypackOnFlyAheadUpdate(float ratio); // 0x0074BD38-0x0074BD3C
	private void FlypackOnStop(); // 0x0074BD3C-0x0074BD60
	public void OnStumbleDeath(); // 0x0074C34C-0x0074C3CC
	private void OnChangeIsGrounded(bool isGrounded); // 0x0074C3F0-0x0074C5A0
	private void WallWalkingOnJumpAheadStart(SwipeDir dir); // 0x0074C5A0-0x0074C688
	private void WallWalkingOnJumpAheadEnd(SwipeDir dir); // 0x0074C6A8-0x0074C6AC
	private void OnStartWallRun(SwipeDir dir); // 0x0074C6AC-0x0074C768
	private void OnLeaveWallRun(SwipeDir dir); // 0x0074C770-0x0074C818
	private void OnChangeTrack(Character.OnChangeTrackDirection direction); // 0x0074C828-0x0074CBD4
	public void PlayRun(bool noattack = false /* Metadata: 0x001F61B1 */); // 0x0074CDCC-0x0074CF18
	[IteratorStateMachine] // 0x005216C4-0x00521728
	private IEnumerator Wait(float time); // 0x0074CD48-0x0074CDCC
	[IteratorStateMachine] // 0x00521728-0x0052178C
	private IEnumerator WaitSetAnimation(float time); // 0x0074CF44-0x0074CFC8
	private void OnHangtime(); // 0x0074C2A8-0x0074C34C
	private void OnPickedChest(); // 0x0074D000-0x0074D004
	private void OnHitByTrain(); // 0x0074D004-0x0074D174
	private void OnFallIntoCliff(string colliderName); // 0x0074D1A0-0x0074D2DC
	private void OnHitCliff(string tag); // 0x0074D2FC-0x0074D4A4
	public void OnOutLean(); // 0x0074CC3C-0x0074CD48
	private void OnIntroRun(); // 0x0074D4BC-0x0074D63C
	private void OnJump(); // 0x0074D63C-0x0074D6C0
	private void OnJumpRoll(); // 0x0074D6C0-0x0074D6C4
	private void OnLean(float offset, Action<float> slope); // 0x0074D6C4-0x0074DAA8
	private void OnLanding(Transform characterTransform); // 0x0074DAB8-0x0074DBF8
	private void OnRunHua(bool isenter); // 0x0074DC10-0x0074DCEC
	public void ChangeToSingleChain(bool isChain); // 0x007467FC-0x007468B4
	private void OnRevive(); // 0x0074DCEC-0x0074DD94
	private void OnRoll(); // 0x0074DD94-0x0074DE9C
	[IteratorStateMachine] // 0x0052178C-0x005217F0
	private IEnumerator OnRollPlayAnimation(); // 0x0074DE9C-0x0074DF10
	private void EndRollAnim(); // 0x0074BD14-0x0074BD38
	public void OnRun(bool forceRun = false /* Metadata: 0x001F61B2 */); // 0x0074DF3C-0x0074E08C
	private void OnStageMenuSequence(); // 0x0074E08C-0x0074E1C8
	private void OnStumble(Character.StumbleType stumbleType, Character.StumbleHorizontalHit horizontalHit, Character.StumbleVerticalHit verticalHit, string colliderName); // 0x0074E25C-0x0074E634
	private void OnStopStumble(); // 0x0074E674-0x0074E68C
	private float OnEnterTramcar(GameObject tramcar, bool canLean); // 0x0074E6E8-0x0074E744
	private float OnEnterHill(GameObject hill, bool isInto); // 0x0074E8E4-0x0074E948
	private void OnExitHill(bool stopNoEnding); // 0x0074E9F0-0x0074EACC
	private void OnExitTramcar(bool stopNoEnding); // 0x0074EB40-0x0074EC2C
	public void SetMainCharShadow(bool show); // 0x0074EC2C-0x0074ECD4
	private void OnSprintStart(); // 0x0074ECD4-0x0074EDBC
	[IteratorStateMachine] // 0x005217F0-0x00521854
	private IEnumerator Flash(); // 0x0074EE70-0x0074EEE4
	public void StopSprintEnd(); // 0x0074EF10-0x0074EFA4
	public void OnSprintEnd(); // 0x0074E1C8-0x0074E25C
	public void SetSprintParticleRate(float rate); // 0x0074EFA4-0x0074F048
	private void OnSwitchToHill(GameObject hill); // 0x0074E948-0x0074E9F0
	[IteratorStateMachine] // 0x00521854-0x005218B8
	private IEnumerator delayStopAnimation(); // 0x0074EACC-0x0074EB40
	private float OnSwitchToTramcar(GameObject tramcar); // 0x0074E744-0x0074E8E4
	private void OnSwitchToFlypack(); // 0x0074F2F8-0x0074F484
	public void OnSwithNormal(); // 0x0074FA4C-0x0074FEE0
	public void OnSwitchToRunning(); // 0x0074BD60-0x0074C2A8
	private void OnTutorialMoveBackToCheckPoint(float duration); // 0x0074FEE0-0x0074FF44
	private void OnTutorialStartFromCheckPoint(); // 0x0074FF44-0x0074FFA4
	private void OverrideRollTransition(); // 0x0074FFA4-0x00750028
	private void Start(); // 0x00750028-0x00750050
	private void ToggleCustomTramcar(GameObject tramcar); // 0x0074F1F8-0x0074F2F8
	private void ToggleCustomHill(GameObject Hill); // 0x0074F048-0x0074F1CC
	public void CrossFade(string clipname, float time); // 0x0074C3D4-0x0074C3F0
	public void CrossFadeQueued(string clipname, float time); // 0x0074CC20-0x0074CC3C
	public void Play(string clipname); // 0x0074D184-0x0074D1A0
	public void SetAnimationWeight(string clipname, float weight); // 0x0074CFFC-0x0074D000
	public void Stop(); // 0x00750404-0x00750420
	public void SetSpeed(string clipname, float speed); // 0x0074CBE4-0x0074CC20
	[CompilerGenerated] // 0x005218B8-0x005218C8
	private void _HandleOnTurboHeadstart_b__57_0(float t); // 0x00750574-0x00750578
}

public class CharacterRenderingEffects : MonoBehaviour // TypeDefIndex: 3962
{
	// Fields
	public ParticleSystem stumble; // 0x18
	public Transform magent; // 0x20
	public Transform doubleScore; // 0x28
	private ParticleSystem[] doubleScoreParticles; // 0x30
	private ParticleSystem[] magentParticles; // 0x38
	[SerializeField] // 0x005191B0-0x005191C0
	private Transform shield; // 0x40
	[SerializeField] // 0x005191C0-0x005191D0
	private Transform shieldCrash; // 0x48
	private ParticleSystem[] shieldParticles; // 0x50
	private ParticleSystem[] shieldCrashParticles; // 0x58
	[SerializeField] // 0x005191D0-0x005191E0
	private ParticleSystem _snow; // 0x60
	[SerializeField] // 0x005191E0-0x005191F0
	private ParticleSystem _snowLow; // 0x68
	[SerializeField] // 0x005191F0-0x00519200
	private ParticleSystem _rain; // 0x70
	[SerializeField] // 0x00519200-0x00519210
	private ParticleSystem _rainLow; // 0x78
	[SerializeField] // 0x00519210-0x00519220
	private bool _showStars; // 0x80
	[SerializeField] // 0x00519220-0x00519230
	private Transform _stars; // 0x88
	[SerializeField] // 0x00519230-0x00519240
	private float _snowZOffset; // 0x90
	[SerializeField] // 0x00519240-0x00519250
	private float _rainZOffset; // 0x94
	private Character _character; // 0x98
	private ParticleSystem _currentSnow; // 0xA0
	private ParticleSystem _currentRain; // 0xA8
	private ParticleSystem.EmissionModule _snowMmissionModule; // 0xB0
	private ParticleSystem.EmissionModule _rainMmissionModule; // 0xB8
	private Game _game; // 0xC0
	private float _snowOriginalEmissionRate; // 0xC8
	private float _rainOriginalEmissionRate; // 0xCC
	private bool _snowActive; // 0xD0
	private bool _rainActive; // 0xD1
	private Vector3 _snowOriginalPosition; // 0xD4
	private Vector3 _rainOriginalPosition; // 0xE0
	private Quaternion _snowOriginalRotate; // 0xEC
	private Quaternion _rainOriginalRotate; // 0xFC
	private Transform _snowTransform; // 0x110
	private Transform _rainTransform; // 0x118
	private Vector3 _starsOriginalPosition; // 0x120
	public Material dun; // 0x130
	public ParticleSystem RobberHitEffect; // 0x138
	public ParticleSystem RobberDeathEffect; // 0x140

	// Constructors
	public CharacterRenderingEffects(); // 0x007525F8-0x00752600

	// Methods
	public void PlayRobberHitEffect(bool isrolling); // 0x00751094-0x00751240
	public void PlayRobberDeathEffect(Vector3 pos); // 0x00751240-0x007512B0
	public void SetDun(bool IsGlod); // 0x007512B0-0x00751380
	private void ActivateWheather(); // 0x00751380-0x007513A4
	public void ActivateSnow(); // 0x007513A4-0x007513E4
	public void ActivateRain(); // 0x007513E4-0x00751424
	private void Awake(); // 0x00751424-0x00751644
	private void DeactivateWheather(); // 0x00751644-0x00751668
	public void DeactivateSnow(); // 0x00751668-0x0075169C
	public void DeactivateRain(); // 0x0075169C-0x007516D0
	public void Initialize(CharacterModel characterModel); // 0x0074BB10-0x0074BC44
	private void SetupShield(Transform avtar); // 0x007518F8-0x00751AB0
	private void SetupSnow(Transform root); // 0x007516D0-0x0075173C
	private void SetupRain(Transform root); // 0x0075173C-0x007517AC
	private void SetupStumble(Transform head); // 0x007517AC-0x007518F8
	private void SetupDoubleScore(Transform avtar); // 0x00751AB0-0x00751BD0
	private void SetupMagent(Transform spine); // 0x00751BD0-0x00751CF0
	public void PlayStumble(); // 0x00751CF0-0x00751D3C
	public void DisPlayStumble(); // 0x0074E68C-0x0074E6E8
	public void PlayShield(); // 0x00751D3C-0x00751DD0
	public void DisplayShield(); // 0x00751DD0-0x00751E98
	public void PlayShieldCrash(); // 0x00751E98-0x00751F2C
	public void PlayDoubleScore(bool active); // 0x00751F2C-0x00752068
	public void PlayMagent(bool active); // 0x00752068-0x007521A4
	private void Update(); // 0x007521A4-0x007525F8
}

public class Characters // TypeDefIndex: 3963
{
	// Fields
	public static Dictionary<CharacterType, Model> characterData; // 0x00
	public static List<CharacterType> characterOrder; // 0x08

	// Nested types
	public enum CharacterType // TypeDefIndex: 3964
	{
		slick = 0,
		spike = 1,
		frank = 2,
		nijia = 3,
		darcy = 4,
		explorer = 5,
		princess = 6,
		Caesar = 7,
		Jack = 8,
		Pia = 9,
		Anna = 10,
		Eily = 11,
		Kareena = 12,
		Seven = 13,
		Sachin = 14,
		none = 15
	}

	public class Model // TypeDefIndex: 3965
	{
		// Fields
		public LanguageKey name; // 0x10
		public string modelName; // 0x18
		public int Price; // 0x20
		public UnlockType unlockType; // 0x24
		public int Level; // 0x28
		public LanguageKey symbolName; // 0x2C
		public string symbolSprite2dName; // 0x30
		public TaskTarget taskTargetKey; // 0x38
		public string buttonBgSpriteName; // 0x40
		public string buttonIconSpriteName; // 0x48
		public int freeReviveCount; // 0x50
		public int order; // 0x54
		public int CoinBonus; // 0x58

		// Constructors
		public Model(); // 0x0066915C-0x00669164
		public Model(Model model); // 0x00669164-0x00669200

		// Methods
		public static string ToJson(Model model); // 0x00668DBC-0x00669154
		public static Model Parse(string json); // 0x00667910-0x00668A48
	}

	public enum UnlockType // TypeDefIndex: 3966
	{
		free = 0,
		symbols = 1,
		coins = 2,
		keys = 3,
		subscription = 4
	}

	// Constructors
	public Characters(); // 0x00669154-0x0066915C

	// Methods
	public static bool LoadFile(); // 0x0066726C-0x00667910
	public static bool SaveFile(); // 0x00668A48-0x00668DBC
}

public class CharacterScaler : MonoBehaviour // TypeDefIndex: 3967
{
	// Fields
	[SerializeField] // 0x00519250-0x00519260
	public bool lookAtCamera; // 0x18
	[SerializeField] // 0x00519260-0x00519270
	private Camera _camera; // 0x20
	[SerializeField] // 0x00519270-0x00519280
	private ScaleAnchorType _anchorType; // 0x28
	private float _posX; // 0x2C
	private float _posY; // 0x30
	private UIRoot _root; // 0x38
	private float _scaleDelta; // 0x40
	private float _scaleMultiplierForRotation; // 0x44

	// Nested types
	public enum ScaleAnchorType // TypeDefIndex: 3968
	{
		CharacterAnchor = 0,
		GameOverAnchor = 1,
		TutorialPupupAnchor = 2,
		CelebrationPopupAnchor = 3
	}

	// Constructors
	public CharacterScaler(); // 0x00752B00-0x00752B20

	// Methods
	private void PositionCharacter(); // 0x00752600-0x00752654
	private void RotateCharacter(); // 0x00752654-0x007527E0
	private void ScaleCharacter(); // 0x007527E0-0x00752884
	private void SetScreenRelatedSettings(); // 0x00752884-0x0075294C
	private void Start(); // 0x0075294C-0x00752AD0
	private void Update(); // 0x00752AD0-0x00752B00
}

public class CharacterScreen : UIBaseScreen, IScrollClick // TypeDefIndex: 3969
{
	// Fields
	[SerializeField] // 0x00519280-0x00519290
	private GameObject characterAnchor; // 0x98
	[SerializeField] // 0x00519290-0x005192A0
	private GameObject saveMeSkillGo; // 0xA0
	[SerializeField] // 0x005192A0-0x005192B0
	private UILabel characterNameLbl; // 0xA8
	[SerializeField] // 0x005192B0-0x005192C0
	private UIGrid characterGrid; // 0xB0
	[SerializeField] // 0x005192C0-0x005192D0
	private UIPanel scrollPanel; // 0xB8
	[SerializeField] // 0x005192D0-0x005192E0
	private GameObject dummyObject; // 0xC0
	[SerializeField] // 0x005192E0-0x005192F0
	private AudioClip selectSound; // 0xC8
	[SerializeField] // 0x005192F0-0x00519300
	private UICharacterThemeShifter characterThemeShifter; // 0xD0
	[SerializeField] // 0x00519300-0x00519310
	private CharacterScreenSelectButton _characterSelectButton; // 0xD8
	[SerializeField] // 0x00519310-0x00519320
	private GameObject centerAnchor; // 0xE0
	[SerializeField] // 0x00519320-0x00519330
	private GameObject SkillVeiw; // 0xE8
	[SerializeField] // 0x00519330-0x00519340
	private GameObject SkillNewTip; // 0xF0
	private UISprite SkillIcon; // 0xF8
	private float _cellWidth; // 0x100
	private CenterOnChild _centerer; // 0x108
	private List<KeyValuePair<Characters.CharacterType, Characters.Model>> _characterList; // 0x110
	private bool _charactersEnabled; // 0x118
	private bool _hasInited; // 0x119
	private bool _hasShownModel; // 0x11A
	private bool _inappOverlayActive; // 0x11B
	private bool _popupActive; // 0x11C
	private CharacterScreenManager _screenManagerInstance; // 0x120
	private List<OverlayIndex> characterIndices; // 0x128
	private List<CharacterHead> characterModels; // 0x130
	public static bool forceCenterOnCurrentlySelectedCharacter; // 0x00
	public static bool forceRefreshOnCharacterScreen; // 0x01
	[SerializeField] // 0x00519340-0x00519350
	private UIDrag drag; // 0x138
	[SerializeField] // 0x00519350-0x00519360
	private CharSkillUICtl charskilldes; // 0x140
	public GameObject SkillBtn; // 0x148
	public GameObject UseSkillBtn; // 0x150
	public GameObject UseSkillPanelCloseBtn; // 0x158
	public static bool GoBtnTutorial; // 0x02

	// Nested types
	[CompilerGenerated] // 0x00514730-0x00514740
	private sealed class __c__DisplayClass52_0 // TypeDefIndex: 3970
	{
		// Fields
		public Characters.CharacterType ctype; // 0x10

		// Constructors
		public __c__DisplayClass52_0(); // 0x00661B28-0x00661B30

		// Methods
		internal bool _RefreshCharacterModelInScrollList_b__0(CharacterHead head); // 0x00661B30-0x00661B58
	}

	// Constructors
	public CharacterScreen(); // 0x00756824-0x007568E4
	static CharacterScreen(); // 0x007568E4-0x007578E8

	// Methods
	private void Awake(); // 0x00752B20-0x00752BA0
	private void FreshSkillIcon(); // 0x00752BA0-0x00752CB4
	private void OnEnable(); // 0x00752CB4-0x00752D74
	private void OnDisable(); // 0x00752D74-0x00752E30
	private void OnHandleDir(SwipeDir dir); // 0x00752E30-0x00752F90
	private void CenterScrollOnCharacterType(Characters.CharacterType charType); // 0x00752F90-0x007532B4
	private void ChangeCurrentCharacterShow(Characters.CharacterType charType, int index); // 0x007532B4-0x007534BC
	private void ClearArraysAndDestroyCachedGameObjects(); // 0x00753634-0x00753BE0
	private void DisplayCharacter3dModel(Characters.CharacterType charType, int themeIndex); // 0x007534BC-0x007534F8
	public override void Hide(); // 0x00753BE0-0x00753DCC
	public override void Init(); // 0x00753DCC-0x00753EC4
	protected override void AfterShow(); // 0x007545A0-0x007545A4
	private void InitializeSelectButton(); // 0x00754500-0x007545A0
	private void InitScrollWithCharacterModels(); // 0x00753EC4-0x00754500
	private void OnCharacterUnlocked(Characters.CharacterType charType, int version); // 0x00754658-0x0075467C
	private void ScaleScrollModels(); // 0x007545A4-0x00754658
	public void ScrollClicked(Vector2 pos); // 0x0075467C-0x007547EC
	public void ButtonLeft(); // 0x00754974-0x00754A00
	public void ButtonRight(); // 0x00754A00-0x00754A8C
	public override void Show(); // 0x00754A8C-0x00754D4C
	private void ThemeButtonClicked(int index); // 0x00755480-0x007555A4
	public GameObject Instantiate(); // 0x007555A4-0x00755778
	private void Update(); // 0x00754D4C-0x00755130
	private void UpdateSelectedCharacter(); // 0x007547EC-0x00754974
	private void RefreshCharacterModelInScrollList(Characters.CharacterType ctype, int themeIndex); // 0x00755778-0x007559BC
	private void UpdateUIElements(); // 0x007534F8-0x00753634
	public void ShowSkill(); // 0x007559BC-0x00755AE8
	public void CloseSkill(); // 0x00755EB0-0x00755F04
	public void ShowTutorialSkill(); // 0x00755130-0x00755480
	public void OnClickTutorialUseSkill(GameObject go); // 0x00755F04-0x00755F80
	public void ShowTutorialUseSkill(); // 0x00755AE8-0x00755EB0
	public void ShowTutorialUseSkillPanelClose(); // 0x00755F80-0x007562E4
	public void OnClickTutorialCloseSKillPanel(GameObject go); // 0x007562E4-0x00756360
	public void ShowTutorialCharacterScreenPanelClose(); // 0x00756360-0x00756748
	public void OnClickTutorialCloseCharPanel(GameObject go); // 0x00756748-0x00756824
}

public class TutorialData // TypeDefIndex: 3971
{
	// Fields
	public GameObject parent; // 0x10
	public Transform button; // 0x18
	public int depth; // 0x20

	// Constructors
	public TutorialData(); // 0x007E39A4-0x007E39AC
}

public class CharacterScreenManager // TypeDefIndex: 3972
{
	// Fields
	private List<KeyValuePair<Characters.CharacterType, Characters.Model>> _characterList; // 0x10
	private Characters.CharacterType _currentlyShownCharacter; // 0x18
	private bool _hasCenteredOnCharacter; // 0x1C
	private static CharacterScreenManager _instance; // 0x00
	private Action _onCharacterSelected; // 0x20
	private Action<Characters.CharacterType, int> _onCharacterUnlocked; // 0x28
	private PlayerInfo _playerInfo; // 0x30
	private bool _purchaseInProgress; // 0x38
	[CompilerGenerated] // 0x00519360-0x00519370
	private int _currentCThemeShownIndex_k__BackingField; // 0x3C

	// Properties
	public Characters.CharacterType currenCharacterShown { get; set; } // 0x006624E8-0x00662578 0x00662578-0x00662580
	public int currentCThemeShownIndex { [CompilerGenerated] /* 0x005218C8-0x005218D8 */ get; [CompilerGenerated] /* 0x005218D8-0x005218E8 */ set; } // 0x00662580-0x00662588 0x00662588-0x00662590
	public static CharacterScreenManager Instance { get; } // 0x00662590-0x0066260C 

	// Constructors
	private CharacterScreenManager(); // 0x00661B58-0x00661BF4

	// Methods
	public void AddOnCharacterUnlockedListener(Action<Characters.CharacterType, int> handler); // 0x00661BF4-0x00661C78
	public void AddOnShownCharacterSelectedListener(Action handler); // 0x00661C78-0x00661CFC
	public void CharacterPurchaseFailure(); // 0x00661CFC-0x00661D0C
	public void CharacterPurchaseSuccessful(Characters.CharacterType purchasedCharacter, int themeIndex); // 0x00661D0C-0x00661F1C
	public List<KeyValuePair<Characters.CharacterType, Characters.Model>> GetCharacterList(); // 0x00661FB4-0x00661FBC
	public int GetLastSelectedThemeForCharacterType(Characters.CharacterType charType); // 0x00661FBC-0x00662020
	public void InitCharacters(); // 0x006620B4-0x006622C4
	private void OnCharacterUnlocked(Characters.CharacterType character, int version); // 0x00661F1C-0x00661FB4
	public void PurchaseCharacter(Characters.CharacterType characterType, int themeIndex); // 0x00662380-0x006623E0
	public void RemoveOnCharacterUnlockedListener(Action<Characters.CharacterType, int> handler); // 0x006623E0-0x00662464
	public void RemoveOnShownCharacterSelectedListener(Action handler); // 0x00662464-0x006624E8
	public void SelectCharacter(Characters.CharacterType charType, int themeIndex); // 0x006622C4-0x00662380
}

public class CharacterScreenSelectButton : MonoBehaviour // TypeDefIndex: 3973
{
	// Fields
	[SerializeField] // 0x00519370-0x00519380
	private UISprite fill; // 0x18
	[SerializeField] // 0x00519380-0x00519390
	private UILabel selectedLabel; // 0x20
	[SerializeField] // 0x00519390-0x005193A0
	private UILabel buyPriceLabel; // 0x28
	[SerializeField] // 0x005193A0-0x005193B0
	private UISprite buyKeySprite; // 0x30
	[SerializeField] // 0x005193B0-0x005193C0
	private UISprite buyCoinSprite; // 0x38
	[SerializeField] // 0x005193C0-0x005193D0
	private UISprite lockedThemeCoin; // 0x40
	[SerializeField] // 0x005193D0-0x005193E0
	private UISprite lockedThemeKey; // 0x48
	[SerializeField] // 0x005193E0-0x005193F0
	private UILabel lockedThemeAmount; // 0x50
	[SerializeField] // 0x005193F0-0x00519400
	private UILabel lockedThemeFeedback; // 0x58
	[SerializeField] // 0x00519400-0x00519410
	private UISprite lockedSymbolToken; // 0x60
	[SerializeField] // 0x00519410-0x00519420
	private UILabel lockedSymbolProgress; // 0x68
	[SerializeField] // 0x00519420-0x00519430
	private UILabel exclusiveLbl; // 0x70
	[SerializeField] // 0x00519430-0x00519440
	private UILabel watchLbl; // 0x78
	[SerializeField] // 0x00519440-0x00519450
	private UILabel tryLbl; // 0x80
	[SerializeField] // 0x00519450-0x00519460
	private UILabel findLbl; // 0x88
	[SerializeField] // 0x00519460-0x00519470
	private UILabel inLbl; // 0x90
	[SerializeField] // 0x00519470-0x00519480
	private UILabel levelLbl; // 0x98
	[SerializeField] // 0x00519480-0x00519490
	private UILabel dailyLbl; // 0xA0
	[SerializeField] // 0x00519490-0x005194A0
	private GameObject buy; // 0xA8
	[SerializeField] // 0x005194A0-0x005194B0
	private GameObject select; // 0xB0
	[SerializeField] // 0x005194B0-0x005194C0
	private GameObject exclusive; // 0xB8
	[SerializeField] // 0x005194C0-0x005194D0
	private GameObject lockedTheme; // 0xC0
	[SerializeField] // 0x005194D0-0x005194E0
	private GameObject lockedSymbol; // 0xC8
	[SerializeField] // 0x005194E0-0x005194F0
	private GameObject tryButton; // 0xD0
	[SerializeField] // 0x005194F0-0x00519500
	private GameObject vip; // 0xD8
	[SerializeField] // 0x00519500-0x00519510
	private GameObject Level; // 0xE0
	[SerializeField] // 0x00519510-0x00519520
	private GameObject daily; // 0xE8
	[SerializeField] // 0x00519520-0x00519530
	private Color selectOutlineColor; // 0xF0
	[SerializeField] // 0x00519530-0x00519540
	private Color selectedOutlineColor; // 0x100
	[SerializeField] // 0x00519540-0x00519550
	private UISprite[] freeTrySprs; // 0x110
	[SerializeField] // 0x00519550-0x00519560
	private string fillSprite_Yellow; // 0x118
	[SerializeField] // 0x00519560-0x00519570
	private string fillSprite_Gray; // 0x120
	[SerializeField] // 0x00519570-0x00519580
	private string fillSprite_Green; // 0x128
	private ButtonStates _activeState; // 0x130
	private bool _hasInited; // 0x134
	private CharacterScreenManager _managerInstance; // 0x138
	private Characters.CharacterType currentlyShownModelType; // 0x140
	private int currentlyShownThemeIndex; // 0x144
	private bool isCharacterOwned; // 0x148
	private bool isThemeOwned; // 0x149
	private Characters.Model modelData; // 0x150
	private CharacterTheme modelTheme; // 0x158
	private int unlockPrice; // 0x160
	private Characters.UnlockType unlockType; // 0x164
	private Color tryLblColor; // 0x168
	private int tryState; // 0x178

	// Nested types
	public enum ButtonStates // TypeDefIndex: 3974
	{
		buy = 0,
		select = 1,
		lockedTheme = 2,
		lockedSymbol = 3,
		unselect = 4,
		level = 5,
		exclusive = 6
	}

	// Constructors
	public CharacterScreenSelectButton(); // 0x006644B0-0x0066450C

	// Methods
	private void OnEnable(); // 0x0066260C-0x00662788
	private void OnDisable(); // 0x00662788-0x006628DC
	public void InitButton(); // 0x006628DC-0x006629B0
	public void OnClick(); // 0x00662CC0-0x00662F00
	public void OnTry(GameObject go); // 0x00662F28-0x00663114
	private void OnFreeReward(RiseSdk.AdEventType type, int id, string tag, int eventType); // 0x00663114-0x006632EC
	private void PurchaseCharacter(); // 0x00662F00-0x00662F28
	private void FreshSymbalchar(Characters.UnlockType unlocktype); // 0x006632EC-0x00663404
	public void ReloadButton(); // 0x006629B0-0x00662CC0
	public void SetButtonState(ButtonStates state); // 0x00663404-0x00663708
	private void UpdateUIForBuyState(); // 0x00663F1C-0x00663FC8
	private void UpdateUIForNeedLevel(int level); // 0x00663E40-0x00663F1C
	private void UpdateUIForExclusiveState(); // 0x006638C0-0x00663960
	private void UpdateUIForDailyState(); // 0x00664330-0x006643D0
	private void UpdateUIForLockedSymbolState(); // 0x00663CA4-0x00663E40
	private void UpdateUIForLockedThemeState(); // 0x00663960-0x00663CA4
	private void UpdateUIForSelectState(); // 0x00663708-0x006638C0
	private void UpdateTryButton(); // 0x00663FC8-0x00664254
	private void CheckIvy(Characters.CharacterType charIdx, int Themeid, bool CharLocked, bool ThemeLocked); // 0x00664254-0x00664330
	private void CheckIsStatisticed(string key, int Themeid, bool CharLocked, bool ThemeLocke); // 0x006643D0-0x006644B0
}

public class CharacterStats : MonoBehaviour // TypeDefIndex: 3975
{
	// Fields
	private Character character; // 0x18
	private GameStats stats; // 0x20

	// Constructors
	public CharacterStats(); // 0x00664E0C-0x00664E14

	// Methods
	private void OnChangeTrackDir(Character.OnChangeTrackDirection direction); // 0x0066466C-0x00664694
	private void OnCriticalHit(Character.CriticalHitType type); // 0x00664694-0x00664714
	private void OnJump(); // 0x00664714-0x00664738
	private void OnJumpOverTrain(); // 0x00664738-0x0066475C
	private void OnJumpOverBus(); // 0x0066475C-0x00664780
	private void OnJumpOverCar(); // 0x00664780-0x006647A4
	private void OnPassedObstacle(Character.ObstacleType type); // 0x006647A4-0x0066484C
	private void OnRoll(); // 0x0066484C-0x00664914
	private void OnStumble(Character.StumbleType stumbleType, Character.StumbleHorizontalHit horizontalHit, Character.StumbleVerticalHit verticalHit, string colliderName); // 0x00664914-0x00664BC0
	public void Start(); // 0x00664BC0-0x00664E0C
}

public class CharacterTheme // TypeDefIndex: 3976
{
	// Fields
	public int price; // 0x10
	public Characters.UnlockType unlockType; // 0x14
	public string buttonBgSpriteName; // 0x18
	public string buttonIconSpriteName; // 0x20
	public LanguageKey unlockDescription; // 0x28
	public LanguageKey title; // 0x2C
	public string description; // 0x30
	public int uiPriority; // 0x38

	// Constructors
	public CharacterTheme(); // 0x00665D0C-0x00665D14

	// Methods
	public static string ToJson(CharacterTheme theme); // 0x00664E14-0x0066507C
	public static CharacterTheme Parse(string json); // 0x0066507C-0x00665D0C
	public static string Color32ToString(Color32 color); // 0x00665D14-0x00665EB8
	public static Color32 StringToColor32(string str); // 0x00665EB8-0x0066603C
}

public class CharacterThemeButton : MonoBehaviour // TypeDefIndex: 3977
{
	// Fields
	[SerializeField] // 0x00519580-0x00519590
	private UISprite _background; // 0x18
	[SerializeField] // 0x00519590-0x005195A0
	private UISprite _icon; // 0x20
	[SerializeField] // 0x005195A0-0x005195B0
	private UISprite _locked; // 0x28
	[SerializeField] // 0x005195B0-0x005195C0
	private UISprite _select; // 0x30
	[SerializeField] // 0x005195C0-0x005195D0
	private Animation _anim; // 0x38
	private bool _isSelected; // 0x40
	private int _index; // 0x44
	private Action<int> _onPress; // 0x48
	private UICharacterThemeShifter theme; // 0x50
	public GameObject Sele; // 0x58
	public GameObject unSele; // 0x60
	public GameObject equip; // 0x68
	public GameObject equipSele; // 0x70
	public GameObject unequip; // 0x78
	public GameObject unequipSele; // 0x80

	// Constructors
	public CharacterThemeButton(); // 0x006664D4-0x006664DC

	// Methods
	private void OnChangeTheme(int val); // 0x0066603C-0x00666040
	public void AddOnPressListener(Action<int> handler); // 0x006660AC-0x00666130
	private void ButtonPressed(); // 0x00666130-0x00666194
	public void RemoveOnPressListener(Action<int> handler); // 0x00666194-0x00666218
	public void SetColors(string bgColor, string iconColor, int index, bool unlock, bool selected, UICharacterThemeShifter themectl); // 0x00666218-0x006662F4
	public void SetIndex(int index); // 0x006663E8-0x006663F0
	public void Refresh(bool unlock, bool selected); // 0x006663F0-0x006663FC
	public void OnSelected(); // 0x00666468-0x006664D4
	public void UnSelect(); // 0x006663FC-0x00666468
	public void FreshChoose(int idx); // 0x00666040-0x006660AC
	private void InitUI(); // 0x006662F4-0x006663E8
}

public class CharacterThemes // TypeDefIndex: 3978
{
	// Fields
	public static Dictionary<Characters.CharacterType, List<CharacterTheme>> characterCustomThemes; // 0x00

	// Constructors
	public CharacterThemes(); // 0x00667264-0x0066726C

	// Methods
	public static bool SaveFile(); // 0x006664DC-0x00666978
	public static bool LoadFile(); // 0x00666978-0x006671E0
	public static CharacterTheme GetThemeForCharacter(Characters.CharacterType charType, int index); // 0x00662020-0x006620B4
	public static List<CharacterTheme> TryGetCustomThemesForChar(Characters.CharacterType charType); // 0x006671E0-0x00667264
}

public class CharSkillUI : MonoBehaviour // TypeDefIndex: 3979
{
	// Fields
	[SerializeField] // 0x005195D0-0x005195E0
	private UILabel skilldes; // 0x18
	[SerializeField] // 0x005195E0-0x005195F0
	private UILabel locklv; // 0x20
	[SerializeField] // 0x005195F0-0x00519600
	private GameObject locked; // 0x28
	[SerializeField] // 0x00519600-0x00519610
	private UISprite star; // 0x30

	// Constructors
	public CharSkillUI(); // 0x00781844-0x0078184C

	// Methods
	public void FreshUI(string key, int locklevel, int playerlevel, int val); // 0x00781508-0x00781844
}

public class CharSkillUICtl : MonoBehaviour // TypeDefIndex: 3980
{
	// Fields
	public CharSkillUI[] charskill; // 0x18

	// Constructors
	public CharSkillUICtl(); // 0x00781C24-0x00781C84

	// Methods
	public void FreshUI(); // 0x0078184C-0x00781A40
	public void FreshUIElliy(); // 0x00781A40-0x00781C24
}

public class UICharacterThemeShifter : MonoBehaviour // TypeDefIndex: 3981
{
	// Fields
	[SerializeField] // 0x00519610-0x00519620
	private CharacterThemeButton _defaultCharacterThemeButton; // 0x18
	[SerializeField] // 0x00519620-0x00519630
	private CharacterThemeButton _customCharacterThemeButton; // 0x20
	[SerializeField] // 0x00519630-0x00519640
	private Transform _selectedMarker; // 0x28
	[SerializeField] // 0x00519640-0x00519650
	private UISprite _bg; // 0x30
	private int _activeTheme; // 0x38
	private Characters.CharacterType _cachedCharacter; // 0x3C
	private List<CharacterThemeButton> _customButtons; // 0x40
	private Vector3 _distanceBetweenButtons; // 0x48
	private Action<int> _onThemeButtonPressed; // 0x58
	private CharacterTheme[] _sortedThemes; // 0x60
	private const int MAX_NUMBER_OF_CUSTOM_THEMES = 3; // Metadata: 0x001F6233
	[CompilerGenerated] // 0x00519650-0x00519660
	private ChangeUseTheme OnChangeTheme; // 0x68

	// Events
	public event ChangeUseTheme OnChangeTheme {
		add; // 0x00824004-0x008240A8
		remove; // 0x008240A8-0x0082414C
	}

	// Nested types
	public delegate void ChangeUseTheme(int val); // TypeDefIndex: 3982; 0x00825530-0x00825774

	// Constructors
	public UICharacterThemeShifter(); // 0x00825898-0x00825938

	// Methods
	public void AddOnChangeThemeListener(Action<int> handler); // 0x0082414C-0x008241D0
	private void Awake(); // 0x008241D0-0x008243D4
	public void InitValues(Characters.CharacterType charType, int index); // 0x008243D4-0x008243DC
	public void MakeCustomThemesAvailable(Characters.CharacterType charType, List<CharacterTheme> themes); // 0x008243DC-0x00824AA8
	public GameObject Instantiate(); // 0x00824CAC-0x00824ED4
	private void Refresh(); // 0x00824ED4-0x00825108
	private void OnEnable(); // 0x00825108-0x0082510C
	private void OnDisable(); // 0x0082510C-0x008251C4
	public void RemoveOnChangeThemeListener(Action<int> handler); // 0x008251C4-0x00825248
	private void SelectButton(int index); // 0x00825248-0x0082535C
	private void SelectedCharacter(int index); // 0x0082535C-0x008254AC
	private CharacterTheme[] SortThemes(List<CharacterTheme> themes); // 0x00824AA8-0x00824CAC
	private void ThemeButtonPressed(int index); // 0x008254AC-0x00825530
	public void UpdateUIForCharacter(Characters.CharacterType charType, int outfitIndex); // 0x00825774-0x00825848
	public void UpdateUIForSelectCharacter(int outfitIndex); // 0x00825848-0x00825898
}

public class DailyLandingAwards // TypeDefIndex: 3983
{
	// Fields
	public static DailyLandingAward[] awards; // 0x00
	private const string path = "Text/dailyLanding"; // Metadata: 0x001F6237

	// Constructors
	public DailyLandingAwards(); // 0x00677E6C-0x00677E74

	// Methods
	public static bool LoadFile(); // 0x006777D4-0x00677BA8
	public static bool SaveFile(); // 0x00677BA8-0x00677DD0
	public static DailyLandingAward GetDailyLandingAwardByID(int dayId); // 0x00677DD0-0x00677E6C
}

public class DailyLandingAward // TypeDefIndex: 3984
{
	// Fields
	public DailyLandingRewardType type; // 0x10
	public int Amount; // 0x14
	public ChestType chestType; // 0x18
	public Characters.CharacterType characterType; // 0x1C
	public int characterThemeIndex; // 0x20

	// Nested types
	public enum DailyLandingRewardType // TypeDefIndex: 3985
	{
		Coins = 0,
		Chest = 1,
		Keys = 2,
		Character = 3
	}

	// Constructors
	public DailyLandingAward(); // 0x00676B2C-0x00676B60
	public DailyLandingAward(DailyLandingAward award); // 0x00676B60-0x00676BBC

	// Methods
	public string ToJson(); // 0x00676BBC-0x00676DDC
	public DailyLandingAward Parse(string json); // 0x00676DDC-0x006777D4
}

public class DailyLandingHelp : MonoBehaviour // TypeDefIndex: 3986
{
	// Fields
	[SerializeField] // 0x00519660-0x00519670
	private int dayIndex; // 0x18
	[SerializeField] // 0x00519670-0x00519680
	private UILabel dayLbl; // 0x20
	[SerializeField] // 0x00519680-0x00519690
	private UILabel rewardLbl; // 0x28
	[SerializeField] // 0x00519690-0x005196A0
	private UISprite checkMskSpr; // 0x30
	[SerializeField] // 0x005196A0-0x005196B0
	private UISprite backgroundInactive; // 0x38
	[SerializeField] // 0x005196B0-0x005196C0
	private UISprite backgroundActive; // 0x40
	private DailyLandingAward award; // 0x48

	// Constructors
	public DailyLandingHelp(); // 0x006783F0-0x006783F8

	// Methods
	public void Init(int dayId, bool first7Day = false /* Metadata: 0x001F625C */); // 0x00677E74-0x00677FE4
	public void Refresh(); // 0x00677FE4-0x0067838C
	public void Show(); // 0x0067838C-0x006783C8
	public void Hide(); // 0x006783C8-0x006783F0
}

public class DailyLandingPopup : UIBaseScreen // TypeDefIndex: 3987
{
	// Fields
	[SerializeField] // 0x005196C0-0x005196D0
	private UILabel titleLbl; // 0x98
	[SerializeField] // 0x005196D0-0x005196E0
	private UILabel getLbl; // 0xA0
	[SerializeField] // 0x005196E0-0x005196F0
	private UILabel tomorrowLbl; // 0xA8
	[SerializeField] // 0x005196F0-0x00519700
	private UISprite closeSpr; // 0xB0
	[SerializeField] // 0x00519700-0x00519710
	private DailyLandingHelp[] helps; // 0xB8
	[SerializeField] // 0x00519710-0x00519720
	private GameObject getGo; // 0xC0

	// Constructors
	public DailyLandingPopup(); // 0x0067895C-0x00678964

	// Methods
	public override void Init(); // 0x006783F8-0x00678478
	public override void Show(); // 0x00678478-0x006784A8
	private void RefreshLabel(); // 0x0067863C-0x0067870C
	private void Refresh(); // 0x006784A8-0x0067863C
	public void OnReceiceClick(); // 0x0067870C-0x006787CC
	private void ShowCloseButton(); // 0x006787CC-0x00678888
	public void OnCloseClick(); // 0x00678888-0x0067895C
}

public class DailyLandingTipPopup : UIBaseScreen // TypeDefIndex: 3988
{
	// Fields
	[SerializeField] // 0x00519720-0x00519730
	private UILabel titleLbl; // 0x98
	[SerializeField] // 0x00519730-0x00519740
	private UILabel knowLbl; // 0xA0
	public static int remainDays; // 0x00
	public static Characters.CharacterType characterType; // 0x04
	public static int characterThemeId; // 0x08

	// Constructors
	public DailyLandingTipPopup(); // 0x00678C94-0x00678C9C

	// Methods
	public override void Show(); // 0x00678964-0x00678C10
	public void OnKnowClick(); // 0x00678C10-0x00678C94
}

public class FlyEffect : MonoBehaviour // TypeDefIndex: 3989
{
	// Fields
	[SerializeField] // 0x00519740-0x00519750
	private ParticleSystem[] particleSystems; // 0x18
	[SerializeField] // 0x00519750-0x00519760
	private TrailRenderer[] trailRenderers; // 0x20
	private Vector2 start; // 0x28
	private Vector2 end; // 0x30
	private float duration; // 0x38

	// Nested types
	[CompilerGenerated] // 0x00514740-0x00514750
	private sealed class _Flying_C_d__9 : IEnumerator<object> // TypeDefIndex: 3990
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public FlyEffect __4__this; // 0x20
		public Action action; // 0x28
		private float _factor_5__2; // 0x30

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00526FB4-0x00526FC4 */ get; } // 0x00688160-0x00688168 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00526FD4-0x00526FE4 */ get; } // 0x006881CC-0x006881D4 

		// Constructors
		[DebuggerHidden] // 0x00526F94-0x00526FA4
		public _Flying_C_d__9(int __1__state); // 0x00687E58-0x00687E84

		// Methods
		[DebuggerHidden] // 0x00526FA4-0x00526FB4
		void IDisposable.Dispose(); // 0x00687E8C-0x00687E90
		private bool MoveNext(); // 0x00687E90-0x00688160
		[DebuggerHidden] // 0x00526FC4-0x00526FD4
		void IEnumerator.Reset(); // 0x00688168-0x006881CC
	}

	// Constructors
	public FlyEffect(); // 0x00687E84-0x00687E8C

	// Methods
	private void Start(); // 0x00687B50-0x00687BE0
	private void Fly(); // 0x00687BE0-0x00687CC0
	private void End(); // 0x00687CC0-0x00687DA0
	public void Flying(Vector2 start, Vector2 end, float duration, Action action = null); // 0x00687DA0-0x00687DD8
	[IteratorStateMachine] // 0x00521908-0x0052196C
	private IEnumerator Flying_C(Action action = null); // 0x00687DD8-0x00687E58
}

public class FreeRewardManager : MonoBehaviour // TypeDefIndex: 3991
{
	// Fields
	private static FreeRewardManager _instance; // 0x00
	public FreeRewardPopupData _popupData; // 0x18
	public FreeRewardPopupData _popupData_left; // 0x20
	public FreeRewardPopupData _popupData_right; // 0x28

	// Properties
	public static FreeRewardManager Instance { get; } // 0x006804F4-0x00680610 

	// Constructors
	public FreeRewardManager(); // 0x0068D278-0x0068D280

	// Methods
	public FreeRewardPopupData GetRewardPopupData(); // 0x0068C0C8-0x0068C0D0
	public FreeRewardPopupData GetRewardPopupDataLeft(); // 0x0068C0D0-0x0068C0D8
	public FreeRewardPopupData GetRewardPopupDataRight(); // 0x0068C0D8-0x0068C0E0
	public void SetFreeViewReward(RewardType type, string method, string event3, Action callback = null); // 0x0068C0E0-0x0068C2D4
	public void SetRewardType(RewardType type, string method, string event3, int amount, bool pay, Action callback = null); // 0x0068C594-0x0068C6B4
	private FreeRewardPopupData InitRewardPopupData(RewardType type, string method, string event3, int amount, bool pay, Action callback = null, PrizeEntryTemplate pet = null); // 0x0068C6B4-0x0068C928
	public void SetRewardType(RewardType left, RewardType right, string method_left, string method_right, string event3_left, string event3_right, int amount_left, int amount_right, Action callback = null, PrizeEntryTemplate pet = null); // 0x00680610-0x00680764
	public void SetRewardType(RewardType left, RewardType mid, RewardType right, string method_left, string method, string method_right, string event3_left, string event3, string event3_right, int amount_left, int amount, int amount_right, Action callback = null); // 0x0068C928-0x0068CAB8
	public void SetRewardType(RewardType mid, string method, string event3, int amount, Action callback = null); // 0x0068CAB8-0x0068CBD0
	public void SetDailyLandingAward(DailyLandingAward award, string method, Action callback = null); // 0x0068CBD0-0x0068CDE8
	public void SetWheelReward(WheelReward reward, string method, bool inFront, Action callback = null, PrizeEntryTemplate peTemple = null); // 0x0068CDE8-0x0068D278
	private void PayReward(RewardType rewardType, int amount, PrizeEntryTemplate pet = null); // 0x0068C2D4-0x0068C58C
}

public class FreeRewardPopupData // TypeDefIndex: 3992
{
	// Fields
	public string method; // 0x10
	public string event3; // 0x18
	public string popupDescription; // 0x20
	public RewardType rewardType; // 0x28
	public int num; // 0x2C
	public bool payReward; // 0x30
	public Action getCallback; // 0x38
	public PrizeEntryTemplate peTemple; // 0x40

	// Constructors
	public FreeRewardPopupData(); // 0x0068C58C-0x0068C594
}

public enum RewardType // TypeDefIndex: 3993
{
	notset = 0,
	coins = 1,
	keys = 2,
	headstart2000 = 3,
	scorebooster = 4,
	symbol = 5,
	helmet = 6,
	seb = 7,
	meb = 8,
	leb = 9
}

public class FreeViewBox : MonoBehaviour // TypeDefIndex: 3994
{
	// Fields
	[SerializeField] // 0x00519760-0x00519770
	private float wait; // 0x18
	[SerializeField] // 0x00519770-0x00519780
	private ParticleSystem ps; // 0x20
	[SerializeField] // 0x00519780-0x00519790
	private float interval; // 0x28
	private Animation anim; // 0x30
	private Game game; // 0x38
	private Vector3 originPos; // 0x40
	private bool isShow; // 0x4C
	private float time; // 0x50
	private List<string> _screenNames; // 0x58
	private bool canReDrop; // 0x60
	private bool IsShowBox; // 0x61

	// Properties
	public static DateTime nextFreeViewTime { get; set; } // 0x0068E578-0x0068E5C4 0x0068E974-0x0068E9C8

	// Constructors
	public FreeViewBox(); // 0x0068E9C8-0x0068E9D8

	// Methods
	private void Awake(); // 0x0068DF98-0x0068E064
	private void Start(); // 0x0068E064-0x0068E1CC
	private void Update(); // 0x0068E1E8-0x0068E578
	public void PlayParticleSystem(); // 0x0068E5C4-0x0068E698
	public void StopParticleSystem(); // 0x0068E1CC-0x0068E1E8
	private void OnIntroRun(); // 0x0068E698-0x0068E77C
	private void OnChangedScreen(string screenName); // 0x0068E77C-0x0068E834
	public void OnMouseUpAsButton(); // 0x0068E834-0x0068E974
}

public class ImageDownloader // TypeDefIndex: 3995
{
	// Fields
	private float _timeout; // 0x10
	[CompilerGenerated] // 0x00519790-0x005197A0
	private Action<bool, ImageDownloader> onDownloadComplete; // 0x18
	[CompilerGenerated] // 0x005197A0-0x005197B0
	private object _cookie_k__BackingField; // 0x20
	[CompilerGenerated] // 0x005197B0-0x005197C0
	private Texture2D _image_k__BackingField; // 0x28
	[CompilerGenerated] // 0x005197C0-0x005197D0
	private string _url_k__BackingField; // 0x30

	// Properties
	public object cookie { [CompilerGenerated] /* 0x005219F0-0x00521A00 */ get; [CompilerGenerated] /* 0x00521A00-0x00521A10 */ private set; } // 0x006DBAF0-0x006DBAF8 0x006DBAF8-0x006DBB00
	public Texture2D image { [CompilerGenerated] /* 0x00521A10-0x00521A20 */ get; [CompilerGenerated] /* 0x00521A20-0x00521A30 */ private set; } // 0x006DBB00-0x006DBB08 0x006DBB08-0x006DBB10
	public string url { [CompilerGenerated] /* 0x00521A30-0x00521A40 */ get; [CompilerGenerated] /* 0x00521A40-0x00521A50 */ private set; } // 0x006DBB10-0x006DBB18 0x006DBB18-0x006DBB20

	// Events
	public event Action<bool, ImageDownloader> onDownloadComplete {
		add; // 0x006DB904-0x006DB9A8
		remove; // 0x006DB9A8-0x006DBA4C
	}

	// Nested types
	[CompilerGenerated] // 0x00514750-0x00514760
	private sealed class _Download_d__5 : IEnumerator<object> // TypeDefIndex: 3996
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public ImageDownloader __4__this; // 0x20
		private float __startedDownloading_5__2; // 0x28
		private WWW _www_5__3; // 0x30

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527004-0x00527014 */ get; } // 0x006DBDF8-0x006DBE00 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527024-0x00527034 */ get; } // 0x006DBE64-0x006DBE6C 

		// Constructors
		[DebuggerHidden] // 0x00526FE4-0x00526FF4
		public _Download_d__5(int __1__state); // 0x006DBA4C-0x006DBA78

		// Methods
		[DebuggerHidden] // 0x00526FF4-0x00527004
		void IDisposable.Dispose(); // 0x006DBB20-0x006DBB24
		private bool MoveNext(); // 0x006DBB24-0x006DBD20
		[DebuggerHidden] // 0x00527014-0x00527024
		void IEnumerator.Reset(); // 0x006DBE00-0x006DBE64
	}

	// Constructors
	public ImageDownloader(string url, Action<bool, ImageDownloader> onCompleteAction, float timeout, object obj); // 0x006D8CC8-0x006D8D7C

	// Methods
	[IteratorStateMachine] // 0x0052198C-0x005219F0
	public IEnumerator Download(); // 0x006D8D7C-0x006D8DF0
	private void DownloadComplete(bool succes); // 0x006DBA78-0x006DBAF0
}

public class ImageManager // TypeDefIndex: 3997
{
	// Fields
	private static ImageManager _instance; // 0x00
	private Dictionary<string, Texture2D> loaderDict; // 0x10

	// Properties
	public static ImageManager Instance { get; } // 0x006D6FAC-0x006D7028 

	// Constructors
	public ImageManager(); // 0x006DBE6C-0x006DBEDC

	// Methods
	public void Add(string url, Texture2D image); // 0x006DBD20-0x006DBDF8
	private void Save(string url, Texture2D image, int number); // 0x006DBEDC-0x006DC140
	public void Load(); // 0x006DC140-0x006DC44C
	public Texture2D GetTexture(string url); // 0x006D70B4-0x006D7160
	public bool ContainsKey(string url); // 0x006D7028-0x006D70B4
}

public class LaunchAdpter : MonoBehaviour // TypeDefIndex: 3998
{
	// Fields
	[SerializeField] // 0x005197D0-0x005197E0
	private UIWidget texture; // 0x18
	[SerializeField] // 0x005197E0-0x005197F0
	private UIRoot root; // 0x20
	private bool mStarted; // 0x28
	private int height; // 0x2C
	private int width; // 0x30

	// Constructors
	public LaunchAdpter(); // 0x006F256C-0x006F2574

	// Methods
	private void Awake(); // 0x006F224C-0x006F2328
	private void OnDestroy(); // 0x006F2328-0x006F2404
	private void ScreenSizeChanged(); // 0x006F2404-0x006F2414
	private void Start(); // 0x006F2520-0x006F256C
	private void Adpter(); // 0x006F2414-0x006F2520
}

public class LerpTool : MonoBehaviour // TypeDefIndex: 3999
{
	// Fields
	private float totalTime; // 0x18
	private float ori_pos; // 0x1C
	private float obj_pos; // 0x20
	private Action lerpConpeleted; // 0x28
	public UISlider m_slider; // 0x30

	// Nested types
	[CompilerGenerated] // 0x00514760-0x00514770
	private sealed class _ShowSlider_d__6 : IEnumerator<object> // TypeDefIndex: 4000
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public LerpTool __4__this; // 0x20
		private float _countFactor_5__2; // 0x28
		private float _lerp_5__3; // 0x2C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527054-0x00527064 */ get; } // 0x006F2A20-0x006F2A28 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527074-0x00527084 */ get; } // 0x006F2A8C-0x006F2A94 

		// Constructors
		[DebuggerHidden] // 0x00527034-0x00527044
		public _ShowSlider_d__6(int __1__state); // 0x006F28B0-0x006F28DC

		// Methods
		[DebuggerHidden] // 0x00527044-0x00527054
		void IDisposable.Dispose(); // 0x006F28F4-0x006F28F8
		private bool MoveNext(); // 0x006F28F8-0x006F2A20
		[DebuggerHidden] // 0x00527064-0x00527074
		void IEnumerator.Reset(); // 0x006F2A28-0x006F2A8C
	}

	// Constructors
	public LerpTool(); // 0x006F28DC-0x006F28F4

	// Methods
	public void SliderLerp(float alltime, float ori, float obj, Action Conpeleted); // 0x006F27F8-0x006F283C
	[IteratorStateMachine] // 0x00521A50-0x00521AB4
	private IEnumerator ShowSlider(); // 0x006F283C-0x006F28B0
}

public class LevelUpAwardUI : MonoBehaviour // TypeDefIndex: 4001
{
	// Fields
	[SerializeField] // 0x005197F0-0x00519800
	private UILabel title; // 0x18
	[SerializeField] // 0x00519800-0x00519810
	private UILabel bottom; // 0x20
	[SerializeField] // 0x00519810-0x00519820
	private UISprite icon; // 0x28

	// Constructors
	public LevelUpAwardUI(); // 0x006F3D3C-0x006F3D44

	// Methods
	public void InitInfo(LevelUpPopUp.LevelUpAwardType upAwardType, Characters.CharacterType characterType, LanguageKey sceneName); // 0x006F38E0-0x006F3D3C
}

public class MulLanguage : MonoBehaviour // TypeDefIndex: 4002
{
	// Fields
	public UISprite sp; // 0x18
	public string lankey; // 0x20
	private UILabel tip; // 0x28

	// Constructors
	public MulLanguage(); // 0x0089363C-0x00893644

	// Methods
	private void OnEnable(); // 0x008934D4-0x0089363C
}

[RequireComponent] // 0x00513CDC-0x00513D40
public class NGUIScaler : MonoBehaviour // TypeDefIndex: 4003
{
	// Fields
	private UIRoot UIRoot; // 0x18

	// Constructors
	public NGUIScaler(); // 0x008999AC-0x008999B4

	// Methods
	private void Awake(); // 0x008998D4-0x008999AC
}

public class EmailManager // TypeDefIndex: 4004
{
	// Fields
	public static EmailState emailResult; // 0x00
	public static EmailState multiEmailResult; // 0x04
	public static List<Email> emails; // 0x08
	public static List<Email> multiEmails; // 0x10
	private static Action<EmailState> result; // 0x18
	private static Action<EmailState> multiResult; // 0x20
	private static int language; // 0x28
	private static List<string> hasGottenRewards; // 0x30

	// Nested types
	[Serializable]
	public class Email // TypeDefIndex: 4005
	{
		// Fields
		public string id; // 0x10
		public string title; // 0x18
		public string content; // 0x20
		public Good[] goods; // 0x28
		public string from; // 0x30
		public string endTime; // 0x38
		public string year; // 0x40
		public string week; // 0x48
		public string rank; // 0x50
		public bool multi; // 0x58

		// Constructors
		public Email(); // 0x00681BA4-0x00681BAC
	}

	[Serializable]
	public class Good // TypeDefIndex: 4006
	{
		// Fields
		public string _type; // 0x10
		public string _id; // 0x18
		public string _num; // 0x20

		// Constructors
		public Good(); // 0x00681BAC-0x00681BB4
	}

	public enum EmailState // TypeDefIndex: 4007
	{
		Success = 0,
		MultiSuccess = 1,
		Invalid = 2,
		Ing = 3,
		New = 4,
		None = 5
	}

	// Constructors
	public EmailManager(); // 0x00682ED8-0x00682EE0
	static EmailManager(); // 0x00682EE0-0x00682F34

	// Methods
	public static void Init(); // 0x0067F188-0x0067F2B8
	public static void Request(Action<EmailState> action); // 0x00680990-0x00680AD0
	public static void MultiRequest(Action<EmailState> action); // 0x0067F540-0x0067F684
	private static void GetEmailListener(string s); // 0x00680AD0-0x00681BA4
	private static void GetMultiEmailListener(string s); // 0x00681BB4-0x00682ED8
	public static bool Check(); // 0x0067F8B8-0x0067F9D4
}

public class EmailButton : MonoBehaviour // TypeDefIndex: 4008
{
	// Fields
	[SerializeField] // 0x00519820-0x00519830
	private GameObject tip; // 0x18
	[SerializeField] // 0x00519830-0x00519840
	private float interval; // 0x20
	[SerializeField] // 0x00519840-0x00519850
	private float interval_large; // 0x24
	[SerializeField] // 0x00519850-0x00519860
	private float timeOut; // 0x28
	private bool isRequesting; // 0x2C
	private float mInterval; // 0x30
	private float mTime; // 0x34
	private int RequestTimes; // 0x38

	// Constructors
	public EmailButton(); // 0x0067F9D4-0x0067F9F0

	// Methods
	private void Awake(); // 0x0067F110-0x0067F188
	private void OnEnable(); // 0x0067F2B8-0x0067F3D4
	private void OnDisable(); // 0x0067F3D4-0x0067F498
	public void Request(); // 0x0067F498-0x0067F540
	private void Result(EmailManager.EmailState emailState); // 0x0067F684-0x0067F754
	private void Update(); // 0x0067F754-0x0067F838
	public void Refresh(); // 0x0067F838-0x0067F8B8
}

public class EmailLine : MonoBehaviour // TypeDefIndex: 4009
{
	// Fields
	[SerializeField] // 0x00519860-0x00519870
	private UILabel titleLbl; // 0x18
	[SerializeField] // 0x00519870-0x00519880
	private UILabel mailLbl; // 0x20
	[SerializeField] // 0x00519880-0x00519890
	private UISprite reward1BgSpr; // 0x28
	[SerializeField] // 0x00519890-0x005198A0
	private UISprite reward1Spr; // 0x30
	[SerializeField] // 0x005198A0-0x005198B0
	private UILabel reward1Lbl; // 0x38
	[SerializeField] // 0x005198B0-0x005198C0
	private UISprite reward2BgSpr; // 0x40
	[SerializeField] // 0x005198C0-0x005198D0
	private UISprite reward2Spr; // 0x48
	[SerializeField] // 0x005198D0-0x005198E0
	private UILabel reward2Lbl; // 0x50
	[SerializeField] // 0x005198E0-0x005198F0
	private GameObject claimGo; // 0x58
	[SerializeField] // 0x005198F0-0x00519900
	private UISprite deletingSpr; // 0x60
	[SerializeField] // 0x00519900-0x00519910
	private string[] spriteNames; // 0x68
	[SerializeField] // 0x00519910-0x00519920
	private ParticleSystem[] particleSystems; // 0x70
	[SerializeField] // 0x00519920-0x00519930
	private float timeout; // 0x78
	private Color originClaimLblColor; // 0x7C
	private float time; // 0x8C
	private bool isDeleting; // 0x90
	public static Action hasGottenReward; // 0x00
	private EmailManager.Email Email; // 0x98

	// Nested types
	[Serializable]
	[CompilerGenerated] // 0x00514770-0x00514780
	private sealed class __c // TypeDefIndex: 4010
	{
		// Fields
		public static readonly __c __9; // 0x00
		public static Action __9__21_0; // 0x08

		// Constructors
		static __c(); // 0x006808B0-0x00680914
		public __c(); // 0x00680914-0x0068091C

		// Methods
		internal void _GetRewards_b__21_0(); // 0x0068091C-0x00680990
	}

	// Constructors
	public EmailLine(); // 0x006808A0-0x006808B0

	// Methods
	public void Set(EmailManager.Email email); // 0x0067F9F0-0x0067FD8C
	public void OnClaimClick(GameObject go); // 0x0067FD8C-0x0067FEE0
	private void OnDeleteEmail(string s); // 0x0067FEE0-0x00680130
	private void GetRewards(); // 0x00680130-0x006804F4
	private void Update(); // 0x00680764-0x006807DC
	private void Awake(); // 0x006807DC-0x00680874
	private void OnEnable(); // 0x00680874-0x006808A0
}

public class EmailPopup : UIBaseScreen // TypeDefIndex: 4011
{
	// Fields
	[SerializeField] // 0x00519930-0x00519940
	private EmailLine line; // 0x98

	// Constructors
	public EmailPopup(); // 0x0068307C-0x00683084

	// Methods
	public override void Show(); // 0x00682F34-0x00682F5C
	private void Result(); // 0x00682F5C-0x00682FE0
	private void RefreshTable(); // 0x00682FE0-0x0068307C
}

public class FlyHelper : MonoBehaviour // TypeDefIndex: 4012
{
	// Fields
	[SerializeField] // 0x00519940-0x00519950
	private Transform item; // 0x18
	[SerializeField] // 0x00519950-0x00519960
	private Transform ps; // 0x20
	[SerializeField] // 0x00519960-0x00519970
	private Transform start; // 0x28
	[SerializeField] // 0x00519970-0x00519980
	private Transform end; // 0x30
	[SerializeField] // 0x00519980-0x00519990
	private AnimationCurve curveY; // 0x38
	[SerializeField] // 0x00519990-0x005199A0
	private AnimationCurve curveScale; // 0x40
	private ParticleSystem currentFlyPs; // 0x48
	private ParticleSystem currentBoomPs; // 0x50
	private float duration; // 0x58

	// Nested types
	[CompilerGenerated] // 0x00514780-0x00514790
	private sealed class _Flying_OpenBox_d__12 : IEnumerator<object> // TypeDefIndex: 4013
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public FlyHelper __4__this; // 0x20
		public Action action; // 0x28
		private float _factor_5__2; // 0x30
		private Vector2 _startLPos_5__3; // 0x34
		private Vector2 _endLPos_5__4; // 0x3C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005270A4-0x005270B4 */ get; } // 0x006890B4-0x006890BC 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005270C4-0x005270D4 */ get; } // 0x00689120-0x00689128 

		// Constructors
		[DebuggerHidden] // 0x00527084-0x00527094
		public _Flying_OpenBox_d__12(int __1__state); // 0x00688450-0x0068847C

		// Methods
		[DebuggerHidden] // 0x00527094-0x005270A4
		void IDisposable.Dispose(); // 0x00688B10-0x00688B14
		private bool MoveNext(); // 0x00688B14-0x006890B4
		[DebuggerHidden] // 0x005270B4-0x005270C4
		void IEnumerator.Reset(); // 0x006890BC-0x00689120
	}

	[CompilerGenerated] // 0x00514790-0x005147A0
	private sealed class _Flying_C_d__13 : IEnumerator<object> // TypeDefIndex: 4014
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public FlyHelper __4__this; // 0x20
		public Action action; // 0x28
		private float _factor_5__2; // 0x30
		private Vector2 _startLPos_5__3; // 0x34
		private Vector2 _endLPos_5__4; // 0x3C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005270F4-0x00527104 */ get; } // 0x00688A9C-0x00688AA4 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527114-0x00527124 */ get; } // 0x00688B08-0x00688B10 

		// Constructors
		[DebuggerHidden] // 0x005270D4-0x005270E4
		public _Flying_C_d__13(int __1__state); // 0x0068847C-0x006884A8

		// Methods
		[DebuggerHidden] // 0x005270E4-0x005270F4
		void IDisposable.Dispose(); // 0x006884B0-0x006884B4
		private bool MoveNext(); // 0x006884B4-0x00688A9C
		[DebuggerHidden] // 0x00527104-0x00527114
		void IEnumerator.Reset(); // 0x00688AA4-0x00688B08
	}

	// Constructors
	public FlyHelper(); // 0x006884A8-0x006884B0

	// Methods
	public void Selecte(ParticleSystem flyPs, ParticleSystem boomPs); // 0x006881D4-0x006882F0
	public void Flying(float duration, Action action = null); // 0x006882F0-0x00688320
	public void OpenBoxFlying(float duration, Action action = null); // 0x006883A0-0x006883D0
	[IteratorStateMachine] // 0x00521AB4-0x00521B18
	private IEnumerator Flying_OpenBox(Action action = null); // 0x006883D0-0x00688450
	[IteratorStateMachine] // 0x00521B18-0x00521B7C
	private IEnumerator Flying_C(Action action = null); // 0x00688320-0x006883A0
}

public class FreeRolePopup : UIBaseScreen // TypeDefIndex: 4015
{
	// Fields
	[SerializeField] // 0x005199A0-0x005199B0
	private UILabel progress; // 0x98
	[SerializeField] // 0x005199B0-0x005199C0
	private UILabel remainTimeLbl; // 0xA0
	[SerializeField] // 0x005199C0-0x005199D0
	private GameObject collectet; // 0xA8
	[SerializeField] // 0x005199D0-0x005199E0
	private GameObject remainGo; // 0xB0
	[SerializeField] // 0x005199E0-0x005199F0
	private UISprite fillSpr; // 0xB8
	[SerializeField] // 0x005199F0-0x00519A00
	private UISprite freeSpr; // 0xC0
	[SerializeField] // 0x00519A00-0x00519A10
	private BoxCollider btn_collider; // 0xC8
	[SerializeField] // 0x00519A10-0x00519A20
	private SetUISpriteToGray[] puzzles; // 0xD0
	[SerializeField] // 0x00519A20-0x00519A30
	private UILabel skill1; // 0xD8
	[SerializeField] // 0x00519A30-0x00519A40
	private UILabel skill2; // 0xE0
	private int amounttimes; // 0xE8
	private bool _hasRewardAd; // 0xEC
	private CoinBoxSizer coinBoxSizer; // 0xF0

	// Constructors
	public FreeRolePopup(); // 0x0068DF38-0x0068DF98

	// Methods
	public override void Init(); // 0x0068D280-0x0068D3D4
	private void OnEnable(); // 0x0068D3D4-0x0068D4A8
	private void OnDisable(); // 0x0068D4A8-0x0068D544
	public void OnFreeReward(RiseSdk.AdEventType type, int id, string tag, int eventType); // 0x0068D544-0x0068D584
	public void OnFreeViewClick(); // 0x0068DA64-0x0068DCA0
	private void RefreshLabel(); // 0x0068D7A0-0x0068DA64
	public override void Show(); // 0x0068DD74-0x0068DDA4
	public void FreshPuzzle(); // 0x0068DDA4-0x0068DE40
	private void LockedPuzzle(); // 0x0068D584-0x0068D7A0
	public void CollectRole(); // 0x0068DE40-0x0068DF38
	public void Fresh(); // 0x0068DCA0-0x0068DD74
}

public class GameOverDoubleConfirmPopup : UIBaseScreen // TypeDefIndex: 4016
{
	// Fields
	[SerializeField] // 0x00519A40-0x00519A50
	private UILabel titleLbl; // 0x98
	[SerializeField] // 0x00519A50-0x00519A60
	private UILabel descriptionLbl; // 0xA0
	[SerializeField] // 0x00519A60-0x00519A70
	private UILabel watchLbl; // 0xA8
	[SerializeField] // 0x00519A70-0x00519A80
	private UILabel reminderLbl; // 0xB0
	[SerializeField] // 0x00519A80-0x00519A90
	private GameObject confirmGo; // 0xB8
	[SerializeField] // 0x00519A90-0x00519AA0
	private UIToggle toggle; // 0xC0

	// Constructors
	public GameOverDoubleConfirmPopup(); // 0x006481C4-0x006481CC

	// Methods
	public override void Init(); // 0x00647CC8-0x00647D6C
	public override void Show(); // 0x00647D6C-0x00647E80
	private void RefreshLabel(); // 0x00647E80-0x00647F74
	private void OnDoubleClick(GameObject go); // 0x00647F74-0x00648104
	public void OnToggleChange(); // 0x00648104-0x006481C4
}

[Serializable]
public class RewardItemAndFly // TypeDefIndex: 4017
{
	// Fields
	[SerializeField] // 0x00519AA0-0x00519AB0
	private FlyHelper flyHelper; // 0x10
	[SerializeField] // 0x00519AB0-0x00519AC0
	private Fly fly; // 0x18
	[SerializeField] // 0x00519AC0-0x00519AD0
	private UISprite coinIcon; // 0x20
	[SerializeField] // 0x00519AD0-0x00519AE0
	private UISprite keyIcon; // 0x28
	[SerializeField] // 0x00519AE0-0x00519AF0
	private UISprite headstartIcon; // 0x30
	[SerializeField] // 0x00519AF0-0x00519B00
	private UISprite scoreboosterIcon; // 0x38
	[SerializeField] // 0x00519B00-0x00519B10
	private UISprite symbolIcon; // 0x40
	[SerializeField] // 0x00519B10-0x00519B20
	private UISprite sebIcon; // 0x48
	[SerializeField] // 0x00519B20-0x00519B30
	private UISprite mebIcon; // 0x50
	[SerializeField] // 0x00519B30-0x00519B40
	private UISprite lebIcon; // 0x58
	[SerializeField] // 0x00519B40-0x00519B50
	private UILabel amountOfItemLbl; // 0x60
	[SerializeField] // 0x00519B50-0x00519B60
	private ParticleSystem bgPs; // 0x68
	[SerializeField] // 0x00519B60-0x00519B70
	private ParticleSystem coinPs; // 0x70
	[SerializeField] // 0x00519B70-0x00519B80
	private ParticleSystem keyPs; // 0x78
	[SerializeField] // 0x00519B80-0x00519B90
	private ParticleSystem propPs; // 0x80
	[SerializeField] // 0x00519B90-0x00519BA0
	private ParticleSystem coinBoomPs; // 0x88
	[SerializeField] // 0x00519BA0-0x00519BB0
	private ParticleSystem keyBoomPs; // 0x90
	[SerializeField] // 0x00519BB0-0x00519BC0
	private ParticleSystem propBoomPs; // 0x98
	[SerializeField] // 0x00519BC0-0x00519BD0
	private float fly_duration; // 0xA0
	private bool isRewardShowing; // 0xA4
	[SerializeField] // 0x00519BD0-0x00519BE0
	private UISprite BGIcon; // 0xA8
	[SerializeField] // 0x00519BE0-0x00519BF0
	private UISlider SymbalSlider; // 0xB0
	[SerializeField] // 0x00519BF0-0x00519C00
	private UILabel Symbalnum; // 0xB8
	[CompilerGenerated] // 0x00519C00-0x00519C10
	private FreeRewardPopupData _PopupData_k__BackingField; // 0xC0
	[CompilerGenerated] // 0x00519C10-0x00519C20
	private PrizeEntryTemplate _Template_k__BackingField; // 0xC8

	// Properties
	public FreeRewardPopupData PopupData { [CompilerGenerated] /* 0x00521B7C-0x00521B8C */ get; [CompilerGenerated] /* 0x00521B8C-0x00521B9C */ private set; } // 0x00731FE0-0x00731FE8 0x00731FE8-0x00731FF0
	public PrizeEntryTemplate Template { [CompilerGenerated] /* 0x00521B9C-0x00521BAC */ get; [CompilerGenerated] /* 0x00521BAC-0x00521BBC */ private set; } // 0x00731FF0-0x00731FF8 0x00731FF8-0x00732000

	// Nested types
	[CompilerGenerated] // 0x005147A0-0x005147B0
	private sealed class _FlyExp_d__33 : IEnumerator<object> // TypeDefIndex: 4018
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public MonoBehaviour monoBehaviour; // 0x20
		public RewardItemAndFly __4__this; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527144-0x00527154 */ get; } // 0x00733028-0x00733030 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527164-0x00527174 */ get; } // 0x00733094-0x0073309C 

		// Constructors
		[DebuggerHidden] // 0x00527124-0x00527134
		public _FlyExp_d__33(int __1__state); // 0x00732B5C-0x00732B88

		// Methods
		[DebuggerHidden] // 0x00527134-0x00527144
		void IDisposable.Dispose(); // 0x00732EF4-0x00732EF8
		private bool MoveNext(); // 0x00732EF8-0x00733028
		[DebuggerHidden] // 0x00527154-0x00527164
		void IEnumerator.Reset(); // 0x00733030-0x00733094
	}

	[CompilerGenerated] // 0x005147B0-0x005147C0
	private sealed class _CountUp_d__34 : IEnumerator<object> // TypeDefIndex: 4019
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public int amount; // 0x20
		public Action<int> countUpAction; // 0x28
		private float _countFactor_5__2; // 0x30
		private float _countTime_5__3; // 0x34
		private int _from_5__4; // 0x38
		private int _to_5__5; // 0x3C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527194-0x005271A4 */ get; } // 0x00732E80-0x00732E88 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005271B4-0x005271C4 */ get; } // 0x00732EEC-0x00732EF4 

		// Constructors
		[DebuggerHidden] // 0x00527174-0x00527184
		public _CountUp_d__34(int __1__state); // 0x00732B88-0x00732BB4

		// Methods
		[DebuggerHidden] // 0x00527184-0x00527194
		void IDisposable.Dispose(); // 0x00732CE4-0x00732CE8
		private bool MoveNext(); // 0x00732CE8-0x00732E80
		[DebuggerHidden] // 0x005271A4-0x005271B4
		void IEnumerator.Reset(); // 0x00732E88-0x00732EEC
	}

	// Constructors
	public RewardItemAndFly(); // 0x00732BC0-0x00732BD0

	// Methods
	public void Init(FreeRewardPopupData popupData); // 0x00732000-0x007324A4
	public void Start(MonoBehaviour monoBehaviour, Action<int> countUpAction = null); // 0x007324A4-0x00732660
	[IteratorStateMachine] // 0x00521BBC-0x00521C20
	private IEnumerator FlyExp(MonoBehaviour monoBehaviour); // 0x00732660-0x007326E0
	[IteratorStateMachine] // 0x00521C20-0x00521C84
	private IEnumerator CountUp(int amount, Action<int> countUpAction = null); // 0x007326E0-0x00732764
	public void Clear(); // 0x00732BB4-0x00732BC0
	private void PayReward(); // 0x00732764-0x00732B5C
	[CompilerGenerated] // 0x00521C84-0x00521C94
	private void _Start_b__32_0(); // 0x00732BD0-0x00732CE4
}

public class GetFreeRewardPopup : UIBaseScreen // TypeDefIndex: 4020
{
	// Fields
	[SerializeField] // 0x00519C20-0x00519C30
	private GameObject hideGo; // 0x98
	[SerializeField] // 0x00519C30-0x00519C40
	private UILabel getLbl; // 0xA0
	[SerializeField] // 0x00519C40-0x00519C50
	private RewardItemAndFly fly_mid; // 0xA8
	[SerializeField] // 0x00519C50-0x00519C60
	private RewardItemAndFly fly_left; // 0xB0
	[SerializeField] // 0x00519C60-0x00519C70
	private RewardItemAndFly fly_right; // 0xB8
	[SerializeField] // 0x00519C70-0x00519C80
	private UIAnchor anchor; // 0xC0
	[SerializeField] // 0x00519C80-0x00519C90
	private UITexture headTexture; // 0xC8
	[SerializeField] // 0x00519C90-0x00519CA0
	public UILabel levelLabel; // 0xD0
	[SerializeField] // 0x00519CA0-0x00519CB0
	public UISlider expSlider; // 0xD8
	private int oriExp; // 0xE0
	private int oriLevel; // 0xE4
	[SerializeField] // 0x00519CB0-0x00519CC0
	private GameObject mid; // 0xE8
	[SerializeField] // 0x00519CC0-0x00519CD0
	private GameObject left; // 0xF0
	[SerializeField] // 0x00519CD0-0x00519CE0
	private GameObject right; // 0xF8
	[SerializeField] // 0x00519CE0-0x00519CF0
	private UIGrid tablegrid; // 0x100
	[SerializeField] // 0x00519CF0-0x00519D00
	private ParticleSystem midps; // 0x108
	[SerializeField] // 0x00519D00-0x00519D10
	private ParticleSystem midps1; // 0x110

	// Constructors
	public GetFreeRewardPopup(); // 0x006537F8-0x00653800

	// Methods
	private void OnEnable(); // 0x00652BB8-0x00652C54
	private void OnDisable(); // 0x00652C54-0x00652CF0
	private void RefreshHeadUI(); // 0x00652CF0-0x00652D60
	public override void Init(); // 0x00652D60-0x00652D68
	public override void Show(); // 0x00652D68-0x00652F6C
	public override void Hide(); // 0x0065324C-0x006532FC
	public override void LooseFocus(); // 0x006532FC-0x00653344
	public override void GainFocus(); // 0x00653344-0x0065338C
	private void ShowRewardPanel(); // 0x00652F6C-0x006531C4
	private void ResetOriLevelAndExp(); // 0x0065338C-0x0065352C
	private void AddExps(int add); // 0x00653630-0x006536CC
	private void RefreshLevel(int amount); // 0x0065359C-0x00653630
	private void RefreshExp(int level, int amount); // 0x0065352C-0x0065359C
	private void RefreshLbal(); // 0x006531C4-0x0065324C
	public void GetBtnOnClick(); // 0x006536CC-0x006537F8
}

public class LevelExpManager // TypeDefIndex: 4021
{
	// Fields
	private static LevelExpManager _instance; // 0x00
	private TimeCoolDown _freeCoolDown; // 0x10
	public static Dictionary<int, LevelExpData> levelExpDatas; // 0x08

	// Properties
	public static LevelExpManager Instance { get; } // 0x006F2A94-0x006F2B54 

	// Nested types
	public class LevelExpData // TypeDefIndex: 4022
	{
		// Fields
		public int minLevel; // 0x10
		public int maxLevel; // 0x14
		public int expCoefficient; // 0x18
		public int levelAwardAmount; // 0x1C
		public LevelAwardStruct[] levelAwards; // 0x20
		public PrizeEntry[] prizeEntries; // 0x28

		// Constructors
		public LevelExpData(); // 0x006F3390-0x006F3398

		// Methods
		public string ToJson(); // 0x006F3778-0x006F3780
		public LevelExpData Parse(string json); // 0x006F3398-0x006F33C8
		public PrizeEntry Roll(); // 0x006F37F4-0x006F38E0
	}

	[Serializable]
	public struct LevelAwardStruct // TypeDefIndex: 4023
	{
		// Fields
		public LevelAwardType levelAwardType; // 0x00
		public int awardNum; // 0x04
	}

	[Serializable]
	public struct PrizeEntry // TypeDefIndex: 4024
	{
		// Fields
		public PrizeEntryType itemType; // 0x00
		public float weight; // 0x04
		public int min; // 0x08
		public int max; // 0x0C
	}

	public enum LevelAwardType // TypeDefIndex: 4025
	{
		Coin = 0,
		Exp = 1,
		Gem = 2
	}

	public enum PrizeEntryType // TypeDefIndex: 4026
	{
		SEB = 0,
		MEB = 1,
		LEB = 2,
		None = 3
	}

	// Constructors
	private LevelExpManager(); // 0x006F2B54-0x006F2BD0
	static LevelExpManager(); // 0x006F3780-0x006F37F4

	// Methods
	public bool IsCoolingDownOver(); // 0x006F2BD0-0x006F2BEC
	public string GetCoolingDownTime(); // 0x006F2BEC-0x006F2C08
	public void SetNewTime(); // 0x006F2C08-0x006F2C24
	public void ForceCoolingDownOver(); // 0x006F2C24-0x006F2C40
	public static bool LoadFile(); // 0x006F2C40-0x006F31B0
	private static void InitlevelExpFile(); // 0x006F31B0-0x006F3390
	public static bool SaveFile(); // 0x006F33C8-0x006F3778
}

public class LevelUpPopUp : UIBaseScreen // TypeDefIndex: 4027
{
	// Fields
	[SerializeField] // 0x00519D10-0x00519D20
	private UILabel label_levelup; // 0x98
	[SerializeField] // 0x00519D20-0x00519D30
	private UILabel label_multiple; // 0xA0
	[SerializeField] // 0x00519D30-0x00519D40
	private UILabel label_locktip; // 0xA8
	[SerializeField] // 0x00519D40-0x00519D50
	private UILabel level; // 0xB0
	[SerializeField] // 0x00519D50-0x00519D60
	private UISprite[] scoreMultiple; // 0xB8
	[SerializeField] // 0x00519D60-0x00519D70
	private LevelUpAwardUI[] levelUpAwards; // 0xC0
	[SerializeField] // 0x00519D70-0x00519D80
	private AudioSource audioSource; // 0xC8
	[SerializeField] // 0x00519D80-0x00519D90
	private ParticleSystem scoreMultiplyPs; // 0xD0
	[SerializeField] // 0x00519D90-0x00519DA0
	private UILabel MaxMultiple; // 0xD8
	private Dictionary<LevelUpAwardType, int> levelAwardDic; // 0xE0
	private Characters.CharacterType canUnlockCharType; // 0xE8
	private LanguageKey newSceneName; // 0xEC
	public Texture forest; // 0xF0
	public Texture mine; // 0xF8
	public UILabel tolock; // 0x100
	public GameObject unlocked; // 0x108
	public UISprite scenetitle; // 0x110
	public UITexture scencebg; // 0x118

	// Nested types
	public enum LevelUpAwardType // TypeDefIndex: 4028
	{
		newChar = 0,
		newScreen = 1,
		scoreMultiple = 2,
		newHelmet = 3
	}

	// Constructors
	public LevelUpPopUp(); // 0x006F4EC0-0x006F4F60

	// Methods
	private void OnEnable(); // 0x006F3D44-0x006F3E14
	public override void Show(); // 0x006F3E14-0x006F3E5C
	protected override void AfterShow(); // 0x006F4A0C-0x006F4A14
	public override void Hide(); // 0x006F4A14-0x006F4A1C
	private void ShowScoreMultiple(int level); // 0x006F4A1C-0x006F4E24
	private void RefreshInfo(); // 0x006F3E5C-0x006F468C
	public void UpScoreMultiple(); // 0x006F4E24-0x006F4EA4
	public void PlayParticleSystem(); // 0x006F4EA4-0x006F4EC0
	public void CheckIvy(); // 0x006F468C-0x006F475C
	public void FreshScene(); // 0x006F475C-0x006F4A0C
}

public class LotteryButtonHelp : MonoBehaviour // TypeDefIndex: 4029
{
	// Fields
	[SerializeField] // 0x00519DA0-0x00519DB0
	private UISprite fill; // 0x18
	[SerializeField] // 0x00519DB0-0x00519DC0
	private UILabel nextLbl; // 0x20
	[SerializeField] // 0x00519DC0-0x00519DD0
	private UILabel adLbl; // 0x28
	[SerializeField] // 0x00519DD0-0x00519DE0
	private UILabel timeLbl; // 0x30
	[SerializeField] // 0x00519DE0-0x00519DF0
	private string freeFillSpriteName; // 0x38
	[SerializeField] // 0x00519DF0-0x00519E00
	private string payFillSpriteName; // 0x40
	[SerializeField] // 0x00519E00-0x00519E10
	private GameObject nextFreeTimeGo; // 0x48
	[SerializeField] // 0x00519E10-0x00519E20
	private GameObject watchVideo; // 0x50
	[SerializeField] // 0x00519E20-0x00519E30
	private GameObject usePay; // 0x58
	[SerializeField] // 0x00519E30-0x00519E40
	private GameObject free; // 0x60
	[SerializeField] // 0x00519E40-0x00519E50
	private UILabel usecoinAmound; // 0x68
	[SerializeField] // 0x00519E50-0x00519E60
	private int amount; // 0x70
	[SerializeField] // 0x00519E60-0x00519E70
	private UILabel freeLabel; // 0x78
	[SerializeField] // 0x00519E70-0x00519E80
	private UILabel freeVideoLabel; // 0x80
	[SerializeField] // 0x00519E80-0x00519E90
	private Color freeVideoLabelColor; // 0x88
	[SerializeField] // 0x00519E90-0x00519EA0
	private UISprite[] adSprits; // 0x98
	[SerializeField] // 0x00519EA0-0x00519EB0
	private TweenScale tweenScale; // 0xA0
	private bool canShowRewardAd; // 0xA8
	public Action OnButtonClick; // 0xB0
	private bool force; // 0xB8
	private int type; // 0xBC
	private bool isActive; // 0xC0

	// Constructors
	public LotteryButtonHelp(); // 0x006FAFC4-0x006FAFCC

	// Methods
	private void Awake(); // 0x006F9ECC-0x006F9F0C
	private void OnEnable(); // 0x006F9F0C-0x006FA050
	private void OnDisable(); // 0x006FA050-0x006FA0EC
	public void RewardAdSuc(RiseSdk.AdEventType type, int id, string tag, int eventType); // 0x006FA0EC-0x006FA368
	public void OnClick(); // 0x006FA368-0x006FA7F4
	public void Reload(bool force); // 0x006FA7F4-0x006FAEA4
	private void Update(); // 0x006FAEA4-0x006FAFC4
}

public class MapPopup : UIBaseScreen // TypeDefIndex: 4030
{
	// Fields
	[SerializeField] // 0x00519EB0-0x00519EC0
	private UISlider slider_forest; // 0x98
	[SerializeField] // 0x00519EC0-0x00519ED0
	private UISlider slider_mine; // 0xA0
	private AsyncOperation ao; // 0xA8
	public string LastSceneName; // 0xB0
	private UISlider slider; // 0xB8
	private WaitForEndOfFrame waitForEndOfFrame; // 0xC0
	private string loadSceneName; // 0xC8
	private bool AutoClose; // 0xD0
	[SerializeField] // 0x00519ED0-0x00519EE0
	private GameObject Tutorialobj; // 0xD8
	[SerializeField] // 0x00519EE0-0x00519EF0
	private GameObject Btn_mine; // 0xE0
	[SerializeField] // 0x00519EF0-0x00519F00
	private GameObject Btn_forest; // 0xE8
	[SerializeField] // 0x00519F00-0x00519F10
	private GameObject JungleLockBtn; // 0xF0
	[SerializeField] // 0x00519F10-0x00519F20
	private GameObject JungleTryPlayBtn; // 0xF8
	[SerializeField] // 0x00519F20-0x00519F30
	private GameObject CloseObj; // 0x100
	[SerializeField] // 0x00519F30-0x00519F40
	private GameObject Scene0; // 0x108
	[SerializeField] // 0x00519F40-0x00519F50
	private GameObject Scene1; // 0x110
	[SerializeField] // 0x00519F50-0x00519F60
	private GameObject Scene0B; // 0x118
	[SerializeField] // 0x00519F60-0x00519F70
	private GameObject Scene1B; // 0x120
	[SerializeField] // 0x00519F70-0x00519F80
	private GameObject TutorialobjB; // 0x128
	[SerializeField] // 0x00519F80-0x00519F90
	private GameObject Btn_mineB; // 0x130
	[SerializeField] // 0x00519F90-0x00519FA0
	private GameObject Btn_forestB; // 0x138
	[SerializeField] // 0x00519FA0-0x00519FB0
	private GameObject MineLockBtnB; // 0x140
	[SerializeField] // 0x00519FB0-0x00519FC0
	private GameObject MineTryPlayBtnB; // 0x148
	[SerializeField] // 0x00519FC0-0x00519FD0
	private UISlider slider_forestB; // 0x150
	[SerializeField] // 0x00519FD0-0x00519FE0
	private UISlider slider_mineB; // 0x158

	// Nested types
	[CompilerGenerated] // 0x005147C0-0x005147D0
	private sealed class _ChangeScene_d__34 : IEnumerator<object> // TypeDefIndex: 4031
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public MapPopup __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005271E4-0x005271F4 */ get; } // 0x00701518-0x00701520 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527204-0x00527214 */ get; } // 0x00701584-0x0070158C 

		// Constructors
		[DebuggerHidden] // 0x005271C4-0x005271D4
		public _ChangeScene_d__34(int __1__state); // 0x00700D64-0x00700D90

		// Methods
		[DebuggerHidden] // 0x005271D4-0x005271E4
		void IDisposable.Dispose(); // 0x007012DC-0x007012E0
		private bool MoveNext(); // 0x007012E0-0x00701518
		[DebuggerHidden] // 0x005271F4-0x00527204
		void IEnumerator.Reset(); // 0x00701520-0x00701584
	}

	// Constructors
	public MapPopup(); // 0x00701208-0x007012DC

	// Methods
	public override void Show(); // 0x006FFD10-0x006FFF1C
	public void FrehsScene(); // 0x007001B8-0x007002C0
	public void CloseMapPopup(); // 0x007002C0-0x00700384
	public void Start(); // 0x00700384-0x00700438
	public void FreshJungleUI(); // 0x006FFF1C-0x007001B8
	public void PlayForestB(); // 0x00700438-0x007005DC
	public void PlayMineB(); // 0x00700650-0x007008E0
	public void PlayForest(); // 0x007008E0-0x00700B8C
	public void PlayMine(); // 0x00700B8C-0x00700D64
	[IteratorStateMachine] // 0x00521C94-0x00521CF8
	private IEnumerator ChangeScene(); // 0x007005DC-0x00700650
	public override void Hide(); // 0x00700D90-0x00700DC8
	public void OnFreeViewClick(); // 0x00700DC8-0x00700FC8
	private void OnEnable(); // 0x00700FC8-0x0070109C
	private void OnDisable(); // 0x0070109C-0x00701138
	public void OnFreeReward(RiseSdk.AdEventType type, int id, string tag, int eventType); // 0x00701138-0x00701208
}

public class NewLevelVersionTip : UIBaseScreen // TypeDefIndex: 4032
{
	// Fields
	[SerializeField] // 0x00519FE0-0x00519FF0
	private UITexture headTexture; // 0x98
	[SerializeField] // 0x00519FF0-0x0051A000
	public UILabel levelLabel; // 0xA0
	[SerializeField] // 0x0051A000-0x0051A010
	public UILabel expLabel; // 0xA8
	[SerializeField] // 0x0051A010-0x0051A020
	public UISlider expSlider; // 0xB0
	[SerializeField] // 0x0051A020-0x0051A030
	public UILabel expPlanLabel; // 0xB8
	[SerializeField] // 0x0051A030-0x0051A040
	public UILabel titleLabel; // 0xC0
	[SerializeField] // 0x0051A040-0x0051A050
	public UILabel scoreMulite; // 0xC8
	[SerializeField] // 0x0051A050-0x0051A060
	public NumberSprite scoreMultiple; // 0xD0

	// Constructors
	public NewLevelVersionTip(); // 0x00A6ADC0-0x00A6ADC8

	// Methods
	public override void Show(); // 0x00A6A9C8-0x00A6AC2C
	private void OnEnable(); // 0x00A6AC98-0x00A6AD2C
	private void OnDisable(); // 0x00A6AD2C-0x00A6ADC0
	private void RefreshHeadUI(); // 0x00A6AC2C-0x00A6AC98
}

public class NewTipsPopup : UIBaseScreen // TypeDefIndex: 4033
{
	// Fields
	public GameObject btn; // 0x98

	// Constructors
	public NewTipsPopup(); // 0x00A6AF3C-0x00A6AF44

	// Methods
	private void Awake(); // 0x00A6ADC8-0x00A6AE60
	public override void Show(); // 0x00A6AE60-0x00A6AE68
	protected override void AfterShow(); // 0x00A6AE68-0x00A6AE70
	public override void Hide(); // 0x00A6AE70-0x00A6AE78
	public void Takealook(GameObject go); // 0x00A6AE78-0x00A6AF3C
}

public class NoNetworkPopup : UIBaseScreen // TypeDefIndex: 4034
{
	// Fields
	public TweenAlpha tweenAlpha; // 0x98
	public UISprite background; // 0xA0
	public float duartion; // 0xA8

	// Nested types
	[CompilerGenerated] // 0x005147D0-0x005147E0
	private sealed class _ShowPopup_d__6 : IEnumerator<object> // TypeDefIndex: 4035
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public NoNetworkPopup __4__this; // 0x20
		private float _start_5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527234-0x00527244 */ get; } // 0x00699770-0x00699778 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527254-0x00527264 */ get; } // 0x006997DC-0x006997E4 

		// Constructors
		[DebuggerHidden] // 0x00527214-0x00527224
		public _ShowPopup_d__6(int __1__state); // 0x00699310-0x0069933C

		// Methods
		[DebuggerHidden] // 0x00527224-0x00527234
		void IDisposable.Dispose(); // 0x00699544-0x00699548
		private bool MoveNext(); // 0x00699548-0x00699770
		[DebuggerHidden] // 0x00527244-0x00527254
		void IEnumerator.Reset(); // 0x00699778-0x006997DC
	}

	[CompilerGenerated] // 0x005147E0-0x005147F0
	private sealed class _HidePopup_d__7 : IEnumerator<object> // TypeDefIndex: 4036
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public NoNetworkPopup __4__this; // 0x20
		private float _start_5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527284-0x00527294 */ get; } // 0x006994D0-0x006994D8 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005272A4-0x005272B4 */ get; } // 0x0069953C-0x00699544 

		// Constructors
		[DebuggerHidden] // 0x00527264-0x00527274
		public _HidePopup_d__7(int __1__state); // 0x0069933C-0x00699368

		// Methods
		[DebuggerHidden] // 0x00527274-0x00527284
		void IDisposable.Dispose(); // 0x00699380-0x00699384
		private bool MoveNext(); // 0x00699384-0x006994D0
		[DebuggerHidden] // 0x00527294-0x005272A4
		void IEnumerator.Reset(); // 0x006994D8-0x0069953C
	}

	// Constructors
	public NoNetworkPopup(); // 0x00699368-0x00699378

	// Methods
	public override void Show(); // 0x006990E4-0x0069911C
	public override void Hide(); // 0x00699190-0x006991BC
	public override void Init(); // 0x00699230-0x00699310
	[IteratorStateMachine] // 0x00521CF8-0x00521D5C
	private IEnumerator ShowPopup(); // 0x0069911C-0x00699190
	[IteratorStateMachine] // 0x00521D5C-0x00521DC0
	private IEnumerator HidePopup(); // 0x006991BC-0x00699230
	[CompilerGenerated] // 0x00521DC0-0x00521DF8
	[DebuggerHidden] // 0x00521DC0-0x00521DF8
	private void __n__0(); // 0x00699378-0x00699380
}

public class PlayerLevelPopup : UIBaseScreen // TypeDefIndex: 4037
{
	// Fields
	[SerializeField] // 0x0051A060-0x0051A070
	private UILabel tip; // 0x98
	[SerializeField] // 0x0051A070-0x0051A080
	private UILabel scoretip; // 0xA0
	[SerializeField] // 0x0051A080-0x0051A090
	private UILabel nowLevel; // 0xA8
	[SerializeField] // 0x0051A090-0x0051A0A0
	private UILabel expLabel; // 0xB0
	[SerializeField] // 0x0051A0A0-0x0051A0B0
	private UILabel expDescripe; // 0xB8
	[SerializeField] // 0x0051A0B0-0x0051A0C0
	private UILabel lockDescripe; // 0xC0
	[SerializeField] // 0x0051A0C0-0x0051A0D0
	private UILabel unlockDescripe; // 0xC8
	[SerializeField] // 0x0051A0D0-0x0051A0E0
	private UISlider expSlider; // 0xD0
	[SerializeField] // 0x0051A0E0-0x0051A0F0
	private UISprite[] scoreMultiple; // 0xD8
	[SerializeField] // 0x0051A0F0-0x0051A100
	private UITexture headTexture; // 0xE0
	private TaskInfo[] _currentTasks; // 0xE8

	// Constructors
	public PlayerLevelPopup(); // 0x0072145C-0x007214BC

	// Methods
	private void OnEnable(); // 0x007208EC-0x00720C70
	private void OnDisable(); // 0x00721328-0x007213C4
	public override void Show(); // 0x007213C4-0x007213EC
	private void RefreshHeadUI(); // 0x007213EC-0x0072145C
	private void RefreshInfo(); // 0x00720C70-0x00721328
}

public class RatingPopup : UIBaseScreen // TypeDefIndex: 4038
{
	// Fields
	[SerializeField] // 0x0051A100-0x0051A110
	private UILabel titleLbl; // 0x98
	[SerializeField] // 0x0051A110-0x0051A120
	private UILabel descripeLbl; // 0xA0
	[SerializeField] // 0x0051A120-0x0051A130
	private UILabel titleRateLbl; // 0xA8
	[SerializeField] // 0x0051A130-0x0051A140
	private UILabel descripeRateLbl; // 0xB0
	[SerializeField] // 0x0051A140-0x0051A150
	private UILabel titleEmailLbl; // 0xB8
	[SerializeField] // 0x0051A150-0x0051A160
	private UILabel yourEmailLbl; // 0xC0
	[SerializeField] // 0x0051A160-0x0051A170
	private UILabel suggestionEmailLbl; // 0xC8
	[SerializeField] // 0x0051A170-0x0051A180
	private UILabel sendEmailLbl; // 0xD0
	[SerializeField] // 0x0051A180-0x0051A190
	private UILabel rateYesLbl; // 0xD8
	[SerializeField] // 0x0051A190-0x0051A1A0
	private UILabel rateNoLbl; // 0xE0
	[SerializeField] // 0x0051A1A0-0x0051A1B0
	private UIInput emailInput; // 0xE8
	[SerializeField] // 0x0051A1B0-0x0051A1C0
	private UIInput suggestionInput; // 0xF0
	[SerializeField] // 0x0051A1C0-0x0051A1D0
	private GameObject sendEmailGo; // 0xF8
	[SerializeField] // 0x0051A1D0-0x0051A1E0
	private GameObject rateGo; // 0x100
	[SerializeField] // 0x0051A1E0-0x0051A1F0
	private GameObject Ios; // 0x108
	[SerializeField] // 0x0051A1F0-0x0051A200
	private GameObject android; // 0x110
	public UIToggle t1; // 0x118
	public UIToggle t2; // 0x120
	public UIToggle t3; // 0x128
	public UIToggle t4; // 0x130

	// Nested types
	[Serializable]
	[CompilerGenerated] // 0x005147F0-0x00514800
	private sealed class __c // TypeDefIndex: 4039
	{
		// Fields
		public static readonly __c __9; // 0x00
		public static Action<string> __9__19_0; // 0x08

		// Constructors
		static __c(); // 0x0072CEA4-0x0072CF08
		public __c(); // 0x0072CF08-0x0072CF10

		// Methods
		internal void _SendEmailClicked_b__19_0(string data); // 0x0072CF10-0x0072CF78
	}

	// Constructors
	public RatingPopup(); // 0x0072CE9C-0x0072CEA4

	// Methods
	public override void Show(); // 0x0072C68C-0x0072C758
	private void RefreshLabel(); // 0x0072C758-0x0072C804
	public void RateClicked(); // 0x0072C804-0x0072C8DC
	public void SendEmailClicked(); // 0x0072CAC4-0x0072CCA8
	public void YesClicked(); // 0x0072CD80-0x0072CE58
	public void NoClicked(); // 0x0072CE58-0x0072CE78
	public void EmailCloseClicked(); // 0x0072CE78-0x0072CE7C
	public void RateCloseClicked(); // 0x0072CE7C-0x0072CE9C
	private string CheckToggle(); // 0x0072CCA8-0x0072CD80
}

public class RemoveAdPopup : UIBaseScreen // TypeDefIndex: 4040
{
	// Fields
	[SerializeField] // 0x0051A200-0x0051A210
	private UILabel descripeLbl; // 0x98
	[SerializeField] // 0x0051A210-0x0051A220
	private UILabel btnLbl; // 0xA0
	[SerializeField] // 0x0051A220-0x0051A230
	private UILabel titleLbl; // 0xA8

	// Constructors
	public RemoveAdPopup(); // 0x0072E4C0-0x0072E4C8

	// Methods
	private void OnEnable(); // 0x0072E3EC-0x0072E4BC
	public void ShowSubscribePopup(); // 0x0072E4BC-0x0072E4C0
}

public class SubscriptionPopup : UIBaseScreen // TypeDefIndex: 4041
{
	// Fields
	[SerializeField] // 0x0051A230-0x0051A240
	private UILabel vipLbl; // 0x98
	[SerializeField] // 0x0051A240-0x0051A250
	private UILabel reminderLbl; // 0xA0
	[SerializeField] // 0x0051A250-0x0051A260
	private UILabel subscribeInfoLbl; // 0xA8
	[SerializeField] // 0x0051A260-0x0051A270
	private UILabel removeLbl; // 0xB0
	[SerializeField] // 0x0051A270-0x0051A280
	private UILabel adsLbl; // 0xB8
	[SerializeField] // 0x0051A280-0x0051A290
	private UILabel gemLbl; // 0xC0
	[SerializeField] // 0x0051A290-0x0051A2A0
	private UILabel doubleCoinsLbl; // 0xC8
	[SerializeField] // 0x0051A2A0-0x0051A2B0
	private UILabel tipLbl; // 0xD0
	[SerializeField] // 0x0051A2B0-0x0051A2C0
	private UILabel termsLbl; // 0xD8
	[SerializeField] // 0x0051A2C0-0x0051A2D0
	private UILabel policyLbl; // 0xE0
	[SerializeField] // 0x0051A2D0-0x0051A2E0
	private GameObject purchaseBtn; // 0xE8
	[SerializeField] // 0x0051A2E0-0x0051A2F0
	private UILabel btnNameLbl; // 0xF0
	private const string termsUrlFormat = "[url=https://sites.google.com/site/huskaimmcomtermsofuse/][u]{0}[/u][/url]"; // Metadata: 0x001F62C9
	private const string policyUrlFormat = "[url=http://www.cctgames.com/index.php/2021/08/31/privacy-policy/][u]{0}[/u][/url]"; // Metadata: 0x001F6317
	[SerializeField] // 0x0051A2F0-0x0051A300
	private GameObject ClaimeverydayBtn; // 0xF8

	// Properties
	public static bool SubscripTodayReward { get; set; } // 0x00FC3468-0x00FC34C4 0x00FC3720-0x00FC3780

	// Nested types
	[Serializable]
	[CompilerGenerated] // 0x00514800-0x00514810
	private sealed class __c // TypeDefIndex: 4042
	{
		// Fields
		public static readonly __c __9; // 0x00
		public static Action __9__21_0; // 0x08

		// Constructors
		static __c(); // 0x00FC3788-0x00FC37EC
		public __c(); // 0x00FC37EC-0x00FC37F4

		// Methods
		internal void _GetEveryDayReward_b__21_0(); // 0x00FC37F4-0x00FC37FC
	}

	// Constructors
	public SubscriptionPopup(); // 0x00FC3780-0x00FC3788

	// Methods
	private void Awake(); // 0x00FC2F98-0x00FC3030
	public override void Show(); // 0x00FC3030-0x00FC30D0
	private void Refresh(); // 0x00FC30D0-0x00FC323C
	private void RefreshLabel(); // 0x00FC323C-0x00FC3468
	public void Pay(GameObject go); // 0x00FC34C4-0x00FC35A8
	public override void GainFocus(); // 0x00FC35A8-0x00FC35D8
	public void GetEveryDayReward(); // 0x00FC35D8-0x00FC3720
}

public class TrialManager : MonoBehaviour // TypeDefIndex: 4043
{
	// Fields
	[SerializeField] // 0x0051A300-0x0051A310
	private TrialInfo[] infos; // 0x18
	[SerializeField] // 0x0051A310-0x0051A320
	private int[] orders; // 0x20
	[SerializeField] // 0x0051A320-0x0051A330
	private int year; // 0x28
	[SerializeField] // 0x0051A330-0x0051A340
	private int month; // 0x2C
	[SerializeField] // 0x0051A340-0x0051A350
	private int day; // 0x30
	[SerializeField] // 0x0051A350-0x0051A360
	private bool isContinue; // 0x34
	[SerializeField] // 0x0051A360-0x0051A370
	private int limitNumber; // 0x38
	[SerializeField] // 0x0051A370-0x0051A380
	private int intervalDays; // 0x3C
	public DateTime begainDateTime; // 0x40
	[HideInInspector] // 0x0051A380-0x0051A390
	public TrialInfo currentTrialInfo; // 0x48
	[CompilerGenerated] // 0x0051A390-0x0051A3A0
	private bool _IsTestChar_k__BackingField; // 0x50
	private int preCharacter; // 0x54
	private int preCharacterSkin; // 0x58
	[CompilerGenerated] // 0x0051A3A0-0x0051A3B0
	private bool _IsTestHelm_k__BackingField; // 0x5C
	private int preHelmet; // 0x60
	[CompilerGenerated] // 0x0051A3B0-0x0051A3C0
	private bool _preUseTryRole_k__BackingField; // 0x64
	[CompilerGenerated] // 0x0051A3C0-0x0051A3D0
	private bool _nothingElse_k__BackingField; // 0x65
	public static int NUMBER_OF_TRIALS; // 0x00
	private static TrialManager _instance; // 0x08

	// Properties
	public bool IsTestChar { [CompilerGenerated] /* 0x00521DF8-0x00521E08 */ get; [CompilerGenerated] /* 0x00521E08-0x00521E18 */ set; } // 0x007BC038-0x007BC040 0x007BC040-0x007BC04C
	public bool IsTestHelm { [CompilerGenerated] /* 0x00521E18-0x00521E28 */ get; [CompilerGenerated] /* 0x00521E28-0x00521E38 */ set; } // 0x007BC04C-0x007BC054 0x007BC054-0x007BC060
	public bool preUseTryRole { [CompilerGenerated] /* 0x00521E38-0x00521E48 */ get; [CompilerGenerated] /* 0x00521E48-0x00521E58 */ set; } // 0x007BC060-0x007BC068 0x007BC068-0x007BC074
	public bool nothingElse { [CompilerGenerated] /* 0x00521E58-0x00521E68 */ get; [CompilerGenerated] /* 0x00521E68-0x00521E78 */ set; } // 0x007BC074-0x007BC07C 0x007BC07C-0x007BC088
	public static TrialManager Instance { get; } // 0x007BBCC8-0x007BBE60 

	// Constructors
	public TrialManager(); // 0x007BD374-0x007BD37C
	static TrialManager(); // 0x007BD37C-0x007BD3D0

	// Methods
	private void Awake(); // 0x007BC088-0x007BC254
	private void Check(); // 0x007BC254-0x007BC3CC
	private void Next(); // 0x007BC3CC-0x007BC84C
	public TrialInfo SelectValidlyTrialInfo(); // 0x007BC854-0x007BC964
	private bool CheckTrialValidly(TrialInfo info); // 0x007BC964-0x007BCA54
	public bool CheckTrialValidly(); // 0x007BC84C-0x007BC854
	public bool IsCurrentCharacterTrial(Characters.CharacterType characterType, int themeId); // 0x007BCA54-0x007BCA88
	public bool HasTrialCharacter(Characters.CharacterType characterType); // 0x007BCA88-0x007BCB38
	public bool IsCurrentHelmetTrial(Helmets.HelmType helmetType); // 0x007BCB38-0x007BCB64
	public bool HasHelmetTrial(Helmets.HelmType helmetType); // 0x007BCB64-0x007BCC18
	private void OnEnable(); // 0x007BCC18-0x007BCF1C
	public void OnDisable(); // 0x007BCF1C-0x007BD040
	public void End(); // 0x007BD040-0x007BD14C
	public void Begin(); // 0x007BD14C-0x007BD28C
	public bool IsInTest(); // 0x007BD28C-0x007BD2AC
	public bool CheckOnMainScreen(); // 0x007BD2AC-0x007BD2CC
	public int CurrentTrialIndex(); // 0x007BD2CC-0x007BD374
}

public enum TrialType // TypeDefIndex: 4044
{
	Character = 0,
	Helmet = 1
}

[Serializable]
public class TrialInfo // TypeDefIndex: 4045
{
	// Fields
	public TrialType type; // 0x10
	public Characters.CharacterType characterType; // 0x14
	public int characterThemeId; // 0x18
	public Helmets.HelmType helmetType; // 0x1C
	public int days; // 0x20
	public int aim; // 0x24
	public int taskAim; // 0x28
	public string icon; // 0x30
	public AnimationClip idel; // 0x38
	public AnimationClip alert; // 0x40

	// Constructors
	public TrialInfo(); // 0x007BC030-0x007BC038
}

public class TrialPopup : UIBaseScreen, IPurchaseHandler // TypeDefIndex: 4046
{
	// Fields
	[SerializeField] // 0x0051A3D0-0x0051A3E0
	private UILabel titleLbl; // 0x98
	[SerializeField] // 0x0051A3E0-0x0051A3F0
	private UILabel tryLbl; // 0xA0
	[SerializeField] // 0x0051A3F0-0x0051A400
	private UILabel messageLbl; // 0xA8
	[SerializeField] // 0x0051A400-0x0051A410
	private UILabel timeLbl; // 0xB0
	[SerializeField] // 0x0051A410-0x0051A420
	private UILabel skillLbl; // 0xB8
	[SerializeField] // 0x0051A420-0x0051A430
	private UILabel skill1Lbl; // 0xC0
	[SerializeField] // 0x0051A430-0x0051A440
	private UILabel skill2Lbl; // 0xC8
	[SerializeField] // 0x0051A440-0x0051A450
	private UILabel tipTitleLbl; // 0xD0
	[SerializeField] // 0x0051A450-0x0051A460
	private UILabel tipOneLbl; // 0xD8
	[SerializeField] // 0x0051A460-0x0051A470
	private UILabel tipTwoLbl; // 0xE0
	[SerializeField] // 0x0051A470-0x0051A480
	private UILabel tipThreeLbl; // 0xE8
	[SerializeField] // 0x0051A480-0x0051A490
	private UILabel priceLbl; // 0xF0
	[SerializeField] // 0x0051A490-0x0051A4A0
	private UILabel sliderLbl; // 0xF8
	[SerializeField] // 0x0051A4A0-0x0051A4B0
	private UISprite thingIcon; // 0x100
	[SerializeField] // 0x0051A4B0-0x0051A4C0
	private UISprite buyIcon; // 0x108
	[SerializeField] // 0x0051A4C0-0x0051A4D0
	private UISprite tryFill; // 0x110
	[SerializeField] // 0x0051A4D0-0x0051A4E0
	private UISprite tryIcon; // 0x118
	[SerializeField] // 0x0051A4E0-0x0051A4F0
	private UISprite skill1Icon; // 0x120
	[SerializeField] // 0x0051A4F0-0x0051A500
	private UISprite skill2Icon; // 0x128
	[SerializeField] // 0x0051A500-0x0051A510
	private GameObject tryGo; // 0x130
	[SerializeField] // 0x0051A510-0x0051A520
	private GameObject buyGo; // 0x138
	[SerializeField] // 0x0051A520-0x0051A530
	private GameObject tipGo; // 0x140
	[SerializeField] // 0x0051A530-0x0051A540
	private UISlider slider; // 0x148
	private TrialInfo _trialInfo; // 0x150
	private Vector3 _tryLocalPos; // 0x158
	private Vector3 _buyLocalPos; // 0x164
	private Color _tryLblColor; // 0x170
	private bool _purchaseInProgress; // 0x180
	private int _tryState; // 0x184
	public static bool startNewGame; // 0x00

	// Constructors
	public TrialPopup(); // 0x007BEEC4-0x007BEECC
	static TrialPopup(); // 0x007BEECC-0x007BEED0

	// Methods
	public override void Init(); // 0x007BD3D0-0x007BD4E4
	public override void Show(); // 0x007BD4E4-0x007BD838
	protected override void AfterShow(); // 0x007BE154-0x007BE1E0
	private void ReloadUI(); // 0x007BD838-0x007BDE74
	private void RefreshSlots(int cur, int aim); // 0x007BE1E0-0x007BE2C0
	private void ReloadTime(); // 0x007BDE74-0x007BE154
	protected override void PrepareHide(); // 0x007BE2C0-0x007BE2E4
	public override void Hide(); // 0x007BE2E4-0x007BE404
	private void OnEnable(); // 0x007BE404-0x007BE4D8
	private void OnDisable(); // 0x007BE4D8-0x007BE574
	public void OnBuyClick(); // 0x007BE574-0x007BE68C
	public void OnTryClick(GameObject go); // 0x007BE68C-0x007BE934
	private void OnFreeReward(RiseSdk.AdEventType type, int id, string tag, int eventType); // 0x007BE934-0x007BEB34
	public void OnQuestionClick(); // 0x007BEB34-0x007BEB9C
	public void OnQuestionClose(); // 0x007BEB9C-0x007BEC04
	public override void GainFocus(); // 0x007BEC04-0x007BEC34
	public override void LooseFocus(); // 0x007BEC34-0x007BEC64
	public void PurchaseFailure(); // 0x007BEC64-0x007BEC6C
	public void PurchaseSuccessful(); // 0x007BEC6C-0x007BEEC4
	[CompilerGenerated] // 0x00521E78-0x00521E88
	private void _OnBuyClick_b__40_0(); // 0x007BEED0-0x007BEFF0
}

public class TryCharacterPopup : UIBaseScreen // TypeDefIndex: 4047
{
	// Fields
	[SerializeField] // 0x0051A540-0x0051A550
	private UILabel titleLbl; // 0x98
	[SerializeField] // 0x0051A550-0x0051A560
	private UILabel descripeLbl; // 0xA0
	[SerializeField] // 0x0051A560-0x0051A570
	private UILabel freeLbl; // 0xA8

	// Constructors
	public TryCharacterPopup(); // 0x007BF93C-0x007BF944

	// Methods
	public override void Show(); // 0x007BF92C-0x007BF934
	private void RefreshLable(); // 0x007BF934-0x007BF938
	public void OnFreeViewClick(); // 0x007BF938-0x007BF93C
}

public class TryTipPopup : UIBaseScreen // TypeDefIndex: 4048
{
	// Constructors
	public TryTipPopup(); // 0x007BFA74-0x007BFA7C

	// Methods
	private void OnEnable(); // 0x007BF944-0x007BF948
	public override void Show(); // 0x007BF948-0x007BF950
	protected override void AfterShow(); // 0x007BF950-0x007BF958
	public override void Hide(); // 0x007BF958-0x007BF960
	public void Takealook(); // 0x007BF960-0x007BFA74
}

public class UnlockNewScreenPopup : UIBaseScreen // TypeDefIndex: 4049
{
	// Fields
	[SerializeField] // 0x0051A570-0x0051A580
	private UILabel titleLbl; // 0x98
	[SerializeField] // 0x0051A580-0x0051A590
	private UILabel tipLbl; // 0xA0
	[SerializeField] // 0x0051A590-0x0051A5A0
	private UILabel contentLbl; // 0xA8
	[SerializeField] // 0x0051A5A0-0x0051A5B0
	private UITexture cityTexture; // 0xB0

	// Constructors
	public UnlockNewScreenPopup(); // 0x008189F4-0x008189FC

	// Methods
	public override void Show(); // 0x0081872C-0x0081896C
	private void OnEnable(); // 0x0081896C-0x008189F4
}

public class WatchFreeViewPopup : UIBaseScreen // TypeDefIndex: 4050
{
	// Fields
	[SerializeField] // 0x0051A5B0-0x0051A5C0
	private UILabel titleLbl; // 0x98
	[SerializeField] // 0x0051A5C0-0x0051A5D0
	private UILabel contentLbl; // 0xA0
	[SerializeField] // 0x0051A5D0-0x0051A5E0
	private UILabel freeRewardLbl; // 0xA8
	[SerializeField] // 0x0051A5E0-0x0051A5F0
	private UILabel remainTimeLbl; // 0xB0
	[SerializeField] // 0x0051A5F0-0x0051A600
	private UILabel amountLbl; // 0xB8
	[SerializeField] // 0x0051A600-0x0051A610
	private UISprite fillSpr; // 0xC0
	[SerializeField] // 0x0051A610-0x0051A620
	private UISprite freeSpr; // 0xC8
	[SerializeField] // 0x0051A620-0x0051A630
	private BoxCollider btn_collider; // 0xD0
	[SerializeField] // 0x0051A630-0x0051A640
	private TweenScale btn_tween; // 0xD8
	[SerializeField] // 0x0051A640-0x0051A650
	private GameObject remainGo; // 0xE0
	[SerializeField] // 0x0051A650-0x0051A660
	private UILabel rewardNum; // 0xE8
	[SerializeField] // 0x0051A660-0x0051A670
	private UISprite rewardSprite; // 0xF0
	[SerializeField] // 0x0051A670-0x0051A680
	private UISprite symbalIcon; // 0xF8
	private PrizeEntryTemplate currentPrize; // 0x100
	private LevelExpManager.PrizeEntry prizeEntry; // 0x108
	public static int rewardId; // 0x00
	private bool _hasRewardAd; // 0x118
	public int CoinNum; // 0x11C
	public int GemNum; // 0x120
	public bool IsCoin; // 0x124

	// Nested types
	[Serializable]
	[CompilerGenerated] // 0x00514810-0x00514820
	private sealed class __c // TypeDefIndex: 4051
	{
		// Fields
		public static readonly __c __9; // 0x00
		public static Action __9__23_0; // 0x08
		public static Action __9__23_1; // 0x10

		// Constructors
		static __c(); // 0x00A95058-0x00A950BC
		public __c(); // 0x00A950BC-0x00A950C4

		// Methods
		internal void _OnFreeReward_b__23_0(); // 0x00A950C4-0x00A95138
		internal void _OnFreeReward_b__23_1(); // 0x00A95138-0x00A951AC
	}

	// Constructors
	public WatchFreeViewPopup(); // 0x00A95034-0x00A95054
	static WatchFreeViewPopup(); // 0x00A95054-0x00A95058

	// Methods
	public override void Init(); // 0x00A94160-0x00A94188
	public override void Show(); // 0x00A9418C-0x00A9421C
	private void RefreshLabel(); // 0x00A9421C-0x00A94484
	private void ChoosePrizeEntryType(); // 0x00A94188-0x00A9418C
	private void OnEnable(); // 0x00A945F0-0x00A946C4
	private void OnDisable(); // 0x00A946C4-0x00A94760
	public void OnFreeReward(RiseSdk.AdEventType type, int id, string tag, int eventType); // 0x00A94760-0x00A949F4
	public void GetSymbal(); // 0x00A94484-0x00A945F0
	private int GetCoinNum(); // 0x00A949F4-0x00A94A34
	private int GetGemNum(); // 0x00A94A34-0x00A94A60
	public void OnFreeViewClick(); // 0x00A94A60-0x00A94CC8
	public PrizeEntry Roll(); // 0x00A94CC8-0x00A95034
}

public class WheelSurfPopup : UIBaseScreen // TypeDefIndex: 4052
{
	// Fields
	[SerializeField] // 0x0051A680-0x0051A690
	private UILabel titleLbl; // 0x98
	[SerializeField] // 0x0051A690-0x0051A6A0
	private UILabel freeSpinLbl; // 0xA0
	[SerializeField] // 0x0051A6A0-0x0051A6B0
	private UILabel spinLbl; // 0xA8
	[SerializeField] // 0x0051A6B0-0x0051A6C0
	private UISprite luckySpr; // 0xB0
	[SerializeField] // 0x0051A6C0-0x0051A6D0
	private UILabel coinLabel; // 0xB8
	[SerializeField] // 0x0051A6D0-0x0051A6E0
	private UISprite mask; // 0xC0
	[SerializeField] // 0x0051A6E0-0x0051A6F0
	private Transform pointer; // 0xC8
	[SerializeField] // 0x0051A6F0-0x0051A700
	private Transform wheel; // 0xD0
	[SerializeField] // 0x0051A700-0x0051A710
	private bool willInitUI; // 0xD8
	[SerializeField] // 0x0051A710-0x0051A720
	private int[] rewardDisplayWeights; // 0xE0
	[SerializeField] // 0x0051A720-0x0051A730
	private WheelReward[] rewardItems_FrontUI; // 0xE8
	[SerializeField] // 0x0051A730-0x0051A740
	private WheelReward[] rewardItems_GameOverUI; // 0xF0
	[SerializeField] // 0x0051A740-0x0051A750
	private RewardUI[] rewardUIs; // 0xF8
	[SerializeField] // 0x0051A750-0x0051A760
	private float targetAngel; // 0x100
	[SerializeField] // 0x0051A760-0x0051A770
	private float targetVelocity; // 0x104
	[SerializeField] // 0x0051A770-0x0051A780
	private int pointerTargetAngel; // 0x108
	[SerializeField] // 0x0051A780-0x0051A790
	private int pointerFrequency; // 0x10C
	[SerializeField] // 0x0051A790-0x0051A7A0
	private float acc; // 0x110
	[SerializeField] // 0x0051A7A0-0x0051A7B0
	private float dec; // 0x114
	[SerializeField] // 0x0051A7B0-0x0051A7C0
	private bool isClockWise; // 0x118
	[SerializeField] // 0x0051A7C0-0x0051A7D0
	private LotteryButtonHelp buttonHelp; // 0x120
	[SerializeField] // 0x0051A7D0-0x0051A7E0
	private int[] bestGameoverRewards; // 0x128
	public static ScreenUI screenUI; // 0x00
	private WheelReward[] rewardItems_Selected; // 0x130
	private float[] probability_FrontUI; // 0x138
	private float[] probability_GameOverUI; // 0x140
	private float[] probability; // 0x148
	private int currentId; // 0x150
	private const int needKeys = 20; // Metadata: 0x001F6375
	private float pointerDeltaAngel; // 0x154
	private int total; // 0x158
	private System.Random randomGen; // 0x160
	private PrizeEntryTemplate peTemple; // 0x168
	private Characters.CharacterType OneSymbal; // 0x170
	private Characters.CharacterType FiveSymbal; // 0x174

	// Nested types
	[CompilerGenerated] // 0x00514820-0x00514830
	private sealed class _Rotato_C_d__55 : IEnumerator<object> // TypeDefIndex: 4053
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public float targetAngel; // 0x20
		public Transform target; // 0x28
		public float targetSpeed; // 0x30
		public float acc; // 0x34
		public float dec; // 0x38
		public WheelSurfPopup __4__this; // 0x40
		public bool isClockWise; // 0x48
		private float _accTime_5__2; // 0x4C
		private float _constTime_5__3; // 0x50
		private float _totalTime_5__4; // 0x54
		private float _total_5__5; // 0x58
		private float _currentTime_5__6; // 0x5C
		private float _currentVectory_5__7; // 0x60

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005272D4-0x005272E4 */ get; } // 0x00A99B50-0x00A99B58 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005272F4-0x00527304 */ get; } // 0x00A99BBC-0x00A99BC4 

		// Constructors
		[DebuggerHidden] // 0x005272B4-0x005272C4
		public _Rotato_C_d__55(int __1__state); // 0x00A993D0-0x00A993FC

		// Methods
		[DebuggerHidden] // 0x005272C4-0x005272D4
		void IDisposable.Dispose(); // 0x00A99744-0x00A99748
		private bool MoveNext(); // 0x00A99748-0x00A99B50
		[DebuggerHidden] // 0x005272E4-0x005272F4
		void IEnumerator.Reset(); // 0x00A99B58-0x00A99BBC
	}

	// Constructors
	public WheelSurfPopup(); // 0x00A995A4-0x00A99648
	static WheelSurfPopup(); // 0x00A99648-0x00A9964C

	// Methods
	public override void GainFocus(); // 0x00A97898-0x00A978C0
	private void SetSymbal(); // 0x00A97970-0x00A97EF4
	private void SetGetSymbolTemplate(int idx); // 0x00A97EF4-0x00A97FC4
	public override void Init(); // 0x00A97FC4-0x00A98210
	private void RefreshUI(); // 0x00A98210-0x00A98484
	private void AdjustUI(UISprite sprite); // 0x00A98484-0x00A9851C
	private void RefreshLabel(); // 0x00A9851C-0x00A985EC
	public override void Show(); // 0x00A985EC-0x00A98744
	public override void Hide(); // 0x00A988F8-0x00A9896C
	private void UpdateButton(); // 0x00A98744-0x00A987D0
	private void UpdateCoinUI(); // 0x00A978C0-0x00A97970
	public void OnStartRoll(); // 0x00A987D0-0x00A988F8
	private void OnStart(); // 0x00A9896C-0x00A9898C
	private void OnEnd(); // 0x00A98B48-0x00A98C60
	private void Roll(); // 0x00A9898C-0x00A98B48
	public int Get(float[] prob); // 0x00A98C60-0x00A98DAC
	private int Random(double[] probability); // 0x00A990DC-0x00A991C4
	private void GoTo(int id); // 0x00A98FDC-0x00A990DC
	public void Rotato(Transform target, float targetSpeed, float targetAngel, float acc, float dec, bool isClockWise); // 0x00A991C4-0x00A991F4
	[ContextMenu] // 0x00521E88-0x00521EC0
	public void CheckDataIsAdapter(); // 0x00A992B0-0x00A993D0
	[IteratorStateMachine] // 0x00521EC0-0x00521F24
	private IEnumerator Rotato_C(Transform target, float targetSpeed, float targetAngel, float acc, float dec, bool isClockWise); // 0x00A991F4-0x00A992B0
	private float CalcSpeed(float currentSpeed, float initSpeed, float maxSpeed, float acc, float time); // 0x00A993FC-0x00A994A4
	private float ClampAngel(float angel); // 0x00A994A4-0x00A995A4
	private void PayReward(WheelReward wr); // 0x00A98DAC-0x00A98FDC
	[CompilerGenerated] // 0x00521F24-0x00521F34
	private void _OnEnd_b__48_0(); // 0x00A9964C-0x00A99744
}

[Serializable]
public class WheelReward // TypeDefIndex: 4054
{
	// Fields
	public WheelRewardType type; // 0x10
	public string icon; // 0x18
	public int count; // 0x20
	public float probability; // 0x24

	// Constructors
	public WheelReward(); // 0x00A97890-0x00A97898
}

[Serializable]
public class RewardUI // TypeDefIndex: 4055
{
	// Fields
	public UISprite icon; // 0x10
	public UILabel count; // 0x18

	// Constructors
	public RewardUI(); // 0x00733920-0x00733928
}

public enum WheelRewardType // TypeDefIndex: 4056
{
	Coin = 0,
	Key = 1,
	Scorebooster = 2,
	Headstart = 3,
	Symbol = 4,
	SEB = 5,
	MEB = 6,
	LEB = 7,
	Symboleva = 8
}

public enum ScreenUI // TypeDefIndex: 4057
{
	FrontUI = 0,
	GameOverUI = 1
}

public class CoinScreen : UIBaseScreen // TypeDefIndex: 4058
{
	// Fields
	public GameObject coinPrefab; // 0x98
	[SerializeField] // 0x0051A7E0-0x0051A7F0
	private UITable _table; // 0xA0
	[SerializeField] // 0x0051A7F0-0x0051A800
	private UIScrollView _parentDragPanel; // 0xA8
	[SerializeField] // 0x0051A800-0x0051A810
	private GameObject listTitleComponent; // 0xB0
	private GameObject go; // 0xB8
	private bool _hasInited; // 0xC0

	// Constructors
	public CoinScreen(); // 0x00672A94-0x00672A9C

	// Methods
	private void FillTable(); // 0x006726A4-0x00672990
	public override void Init(); // 0x00672990-0x00672A6C
	public override void Show(); // 0x00672A6C-0x00672A94
}

public class CrossAdUI : MonoBehaviour // TypeDefIndex: 4059
{
	// Constructors
	public CrossAdUI(); // 0x00675050-0x00675058
}

public class GameOverNewUI : MonoBehaviour // TypeDefIndex: 4060
{
	// Fields
	[SerializeField] // 0x0051A810-0x0051A820
	private UILabel adDoubleViewLbl; // 0x18
	[SerializeField] // 0x0051A820-0x0051A830
	private GameObject downGo; // 0x20
	[SerializeField] // 0x0051A830-0x0051A840
	private float midSpringStrength; // 0x28
	[SerializeField] // 0x0051A840-0x0051A850
	private GameObject claimGo; // 0x30
	[SerializeField] // 0x0051A850-0x0051A860
	private GameObject doubleViewGo; // 0x38
	[SerializeField] // 0x0051A860-0x0051A870
	private UISprite sprite_doubleRate; // 0x40
	[SerializeField] // 0x0051A870-0x0051A880
	private UISprite[] doubleViewSpr; // 0x48
	[SerializeField] // 0x0051A880-0x0051A890
	private GameObject lotteryGo; // 0x50
	[SerializeField] // 0x0051A890-0x0051A8A0
	private ScoreCounterSoundPlayer scoreCounterSoundPlayer; // 0x58
	[SerializeField] // 0x0051A8A0-0x0051A8B0
	private Animation foot_anim; // 0x60
	[SerializeField] // 0x0051A8B0-0x0051A8C0
	private float footY; // 0x68
	[SerializeField] // 0x0051A8C0-0x0051A8D0
	private Animation anim; // 0x70
	[SerializeField] // 0x0051A8D0-0x0051A8E0
	private UISprite closeSpr; // 0x78
	[SerializeField] // 0x0051A8E0-0x0051A8F0
	private GameObject chestBtn; // 0x80
	private int remoteValue; // 0x88
	private bool showConfirmPopup; // 0x8C
	private bool isAfterDoubleClick; // 0x8D
	private int gameOverDoubleCoinViewRate; // 0x90
	private int doubleState; // 0x94
	private GameOverScreen gameOverScreen; // 0x98
	public GameObject DoubleCoin; // 0xA0
	public GameObject FourHCoin; // 0xA8
	public UILabel doubleCoinNum; // 0xB0
	public BoxCollider collider_claim; // 0xB8
	private Vector3 ClaimPos; // 0xC0
	private Vector3 DoubleCoinPos; // 0xCC

	// Constructors
	public GameOverNewUI(); // 0x00649AD0-0x00649B68

	// Methods
	public void FreshBtnPos(); // 0x006481CC-0x006482F4
	public void Init(GameOverScreen screen); // 0x006482F4-0x0064842C
	private void RefreshLabel(); // 0x0064842C-0x006484B4
	public void Show(); // 0x006484B4-0x00648778
	public void Hide(); // 0x00648880-0x00648918
	public void ShowDownGo(int coins); // 0x00648918-0x00648B68
	private void OnDoubleClick(GameObject go); // 0x00648B68-0x00648DC8
	public void AfterDoubleCoins(int coins); // 0x00648DC8-0x00648EC8
	public void HideDownNoLotteryGo(); // 0x00648EC8-0x00648F5C
	public void HideDown(); // 0x00648F5C-0x00648FF8
	public void ShowClose(); // 0x00649088-0x006490A8
	private void OnClaimClick(GameObject go); // 0x006490A8-0x006491F0
	public void LotteryReward(); // 0x0064977C-0x00649828
	private void OnLotteryClick(GameObject go); // 0x00649828-0x00649A64
	public void PlayFootAnim(); // 0x00649A64-0x00649A80
	public void InitShowLotteryGo(); // 0x00648FF8-0x00649088
	public void freshLotteryGo(); // 0x00649A80-0x00649AD0
}

public class GameOverScreen : UIBaseScreen // TypeDefIndex: 4061
{
	// Fields
	[SerializeField] // 0x0051A8F0-0x0051A900
	private UILabel scoreTitleLabel; // 0x98
	[SerializeField] // 0x0051A900-0x0051A910
	private NumberSprite multipleNumber; // 0xA0
	[SerializeField] // 0x0051A910-0x0051A920
	private UILabel scoreLabel; // 0xA8
	[SerializeField] // 0x0051A920-0x0051A930
	private UILabel collectedCoinLabel; // 0xB0
	[SerializeField] // 0x0051A930-0x0051A940
	private GameObject showGo; // 0xB8
	[SerializeField] // 0x0051A940-0x0051A950
	private Animation show_anim; // 0xC0
	[SerializeField] // 0x0051A950-0x0051A960
	private Animation vip_anim; // 0xC8
	[SerializeField] // 0x0051A960-0x0051A970
	private GameOverNewUI selectUI; // 0xD0
	[SerializeField] // 0x0051A970-0x0051A980
	private Animator coinEffectAnr; // 0xD8
	[SerializeField] // 0x0051A980-0x0051A990
	private UISprite hightScoreTip; // 0xE0
	[SerializeField] // 0x0051A990-0x0051A9A0
	private UILabel rankLabel; // 0xE8
	[SerializeField] // 0x0051A9A0-0x0051A9B0
	private UILabel restartLabel; // 0xF0
	[SerializeField] // 0x0051A9B0-0x0051A9C0
	private UILabel CoinBuff; // 0xF8
	[SerializeField] // 0x0051A9C0-0x0051A9D0
	private UILabel ScoreBuff; // 0x100
	private int collectedCoinsFrom; // 0x108
	private int collectedCoinsTo; // 0x10C
	private bool countingUpCoins; // 0x110
	private bool hasBeenSetupAfterAGame; // 0x111
	private ScoreCounterSoundPlayer scoreCounterSoundPlayer; // 0x118
	private int scoreFrom; // 0x120
	private int scoreTo; // 0x124
	private Color yellow; // 0x128
	private bool mShowBanner; // 0x138
	private bool isNewHighscore; // 0x139
	[SerializeField] // 0x0051A9D0-0x0051A9E0
	private BoxCollider fbshareCollider; // 0x140
	public GameObject close; // 0x148
	public Transform close_pos; // 0x150
	public Animator[] TaskChange; // 0x158
	public Animation BottomAni; // 0x160
	public Animator ScoreAni; // 0x168
	public Animator TaskAni; // 0x170
	public GameObject SocreTitle; // 0x178
	public GameObject TaskTitle; // 0x180
	[SerializeField] // 0x0051A9E0-0x0051A9F0
	private TaskList taskList; // 0x188
	public UILabel scoreMultiple_lab; // 0x190
	public GameObject newhigh; // 0x198
	public UISlider levelSlider; // 0x1A0
	public UILabel maxLevel; // 0x1A8
	public BoxCollider[] boxcols; // 0x1B0
	public LerpTool lerpTool; // 0x1B8
	public UILabel allMeters; // 0x1C0

	// Nested types
	[CompilerGenerated] // 0x00514830-0x00514840
	private sealed class _CountUpCoins_d__28 : IEnumerator<object> // TypeDefIndex: 4062
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public GameOverScreen __4__this; // 0x20
		private float _countFactor_5__2; // 0x28
		private float _countTime_5__3; // 0x2C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527324-0x00527334 */ get; } // 0x0064D454-0x0064D45C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527344-0x00527354 */ get; } // 0x0064D4C0-0x0064D4C8 

		// Constructors
		[DebuggerHidden] // 0x00527304-0x00527314
		public _CountUpCoins_d__28(int __1__state); // 0x00649DFC-0x00649E28

		// Methods
		[DebuggerHidden] // 0x00527314-0x00527324
		void IDisposable.Dispose(); // 0x0064D034-0x0064D038
		private bool MoveNext(); // 0x0064D038-0x0064D454
		[DebuggerHidden] // 0x00527334-0x00527344
		void IEnumerator.Reset(); // 0x0064D45C-0x0064D4C0
	}

	[CompilerGenerated] // 0x00514840-0x00514850
	private sealed class _CountUpVipCoins_d__29 : IEnumerator<object> // TypeDefIndex: 4063
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public GameOverScreen __4__this; // 0x20
		private float _countFactor_5__2; // 0x28
		private float _countTime_5__3; // 0x2C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527374-0x00527384 */ get; } // 0x0064D7D4-0x0064D7DC 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527394-0x005273A4 */ get; } // 0x0064D840-0x0064D848 

		// Constructors
		[DebuggerHidden] // 0x00527354-0x00527364
		public _CountUpVipCoins_d__29(int __1__state); // 0x00649E9C-0x00649EC8

		// Methods
		[DebuggerHidden] // 0x00527364-0x00527374
		void IDisposable.Dispose(); // 0x0064D4C8-0x0064D4CC
		private bool MoveNext(); // 0x0064D4CC-0x0064D7D4
		[DebuggerHidden] // 0x00527384-0x00527394
		void IEnumerator.Reset(); // 0x0064D7DC-0x0064D840
	}

	[CompilerGenerated] // 0x00514850-0x00514860
	private sealed class _ShowGameOver_d__48 : IEnumerator<object> // TypeDefIndex: 4064
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public GameOverScreen __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005273C4-0x005273D4 */ get; } // 0x0064DC84-0x0064DC8C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005273E4-0x005273F4 */ get; } // 0x0064DCF0-0x0064DCF8 

		// Constructors
		[DebuggerHidden] // 0x005273A4-0x005273B4
		public _ShowGameOver_d__48(int __1__state); // 0x0064C318-0x0064C344

		// Methods
		[DebuggerHidden] // 0x005273B4-0x005273C4
		void IDisposable.Dispose(); // 0x0064D848-0x0064D84C
		private bool MoveNext(); // 0x0064D84C-0x0064DC84
		[DebuggerHidden] // 0x005273D4-0x005273E4
		void IEnumerator.Reset(); // 0x0064DC8C-0x0064DCF0
	}

	[CompilerGenerated] // 0x00514860-0x00514870
	private sealed class _AutoPayed_d__49 : IEnumerator<object> // TypeDefIndex: 4065
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public GameOverScreen __4__this; // 0x20
		private int _i_5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527414-0x00527424 */ get; } // 0x0064CFC0-0x0064CFC8 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527434-0x00527444 */ get; } // 0x0064D02C-0x0064D034 

		// Constructors
		[DebuggerHidden] // 0x005273F4-0x00527404
		public _AutoPayed_d__49(int __1__state); // 0x0064C3B8-0x0064C3E4

		// Methods
		[DebuggerHidden] // 0x00527404-0x00527414
		void IDisposable.Dispose(); // 0x0064CB48-0x0064CB4C
		private bool MoveNext(); // 0x0064CB4C-0x0064CFC0
		[DebuggerHidden] // 0x00527424-0x00527434
		void IEnumerator.Reset(); // 0x0064CFC8-0x0064D02C
	}

	// Constructors
	public GameOverScreen(); // 0x0064CA68-0x0064CB14

	// Methods
	public override void Init(); // 0x00649B68-0x00649BE4
	public void SetupBeforeChest(); // 0x00649BE4-0x00649D1C
	public void StartCountUpCoins(); // 0x00649D34-0x00649D88
	[IteratorStateMachine] // 0x00521F34-0x00521F98
	private IEnumerator CountUpCoins(); // 0x00649D88-0x00649DFC
	[IteratorStateMachine] // 0x00521F98-0x00521FFC
	private IEnumerator CountUpVipCoins(); // 0x00649E28-0x00649E9C
	private void CountUpCompleted(); // 0x00649EC8-0x00649F60
	public bool IsCountingUpCoins(); // 0x00649F60-0x00649F68
	private void PushNewHighScoreCelebrationScreen(int newHighSchore); // 0x00649F68-0x0064A030
	private void OnEnable(); // 0x0064A030-0x0064A1FC
	public void ShowTutrial(); // 0x006491F0-0x00649554
	public void OnClickTutorialNew(GameObject go); // 0x0064A34C-0x0064A3BC
	private void OnDisable(); // 0x0064A3BC-0x0064A4F8
	public void RewardAdSuc(RiseSdk.AdEventType type, int id, string tag, int eventType); // 0x0064A4F8-0x0064A720
	public void DoubleCoinsSet(int Coin); // 0x0064A720-0x0064A80C
	private void CheckIvy(float dis); // 0x0064A80C-0x0064A810
	public override void Show(); // 0x0064A810-0x0064B034
	public void FreshUpgradeTip(); // 0x006495B0-0x0064977C
	public override void Hide(); // 0x0064C0A0-0x0064C188
	private void SubmitScore(int scoreToSubmit); // 0x0064BC90-0x0064BD9C
	private void UpdateDoubleCoinLabels(); // 0x0064C188-0x0064C1C0
	public void SetupAfterChest(); // 0x0064BD9C-0x0064C0A0
	[IteratorStateMachine] // 0x00521FFC-0x00522060
	private IEnumerator ShowGameOver(); // 0x0064C200-0x0064C274
	[IteratorStateMachine] // 0x00522060-0x005220C4
	public IEnumerator AutoPayed(); // 0x0064C344-0x0064C3B8
	private void ShowTaskChange(int idx); // 0x0064C3E4-0x0064C47C
	private void ShowScoreAni(); // 0x0064C47C-0x0064C500
	private void ShowTaskAni(); // 0x0064C500-0x0064C584
	public void ShowBottomAni(); // 0x00649554-0x006495B0
	private void ResetAllPos(); // 0x0064B98C-0x0064BAC8
	public void FreshLevel(); // 0x0064A1FC-0x0064A34C
	public override void GainFocus(); // 0x0064C584-0x0064C624
	public override void LooseFocus(); // 0x0064C6B4-0x0064C6F8
	private void SetBattlePassMeters(); // 0x0064C1C0-0x0064C200
	private void ShowPassLevelAD(); // 0x0064C7AC-0x0064C8D8
	private void ShowRatingPop(); // 0x0064C8D8-0x0064C954
	private void ShowNewHighPs(bool isshow); // 0x0064C624-0x0064C6B4
	public void ONFBShare(); // 0x0064C9F8-0x0064CA68
	[CompilerGenerated] // 0x005220C4-0x005220D4
	private void _AutoPayed_b__49_0(); // 0x0064CB14-0x0064CB48
}

public class MainScreen : UIBaseScreen // TypeDefIndex: 4066
{
	// Fields
	[SerializeField] // 0x0051A9F0-0x0051AA00
	private GameObject goTween; // 0x98
	[SerializeField] // 0x0051AA00-0x0051AA10
	private UIButton goBtn; // 0xA0
	[SerializeField] // 0x0051AA10-0x0051AA20
	private Animation goAnim; // 0xA8
	[SerializeField] // 0x0051AA20-0x0051AA30
	private GameObject charTween; // 0xB0
	[SerializeField] // 0x0051AA30-0x0051AA40
	private Transform charBtn; // 0xB8
	[SerializeField] // 0x0051AA40-0x0051AA50
	private Animation charAnim; // 0xC0
	[SerializeField] // 0x0051AA50-0x0051AA60
	private GameObject chestTween; // 0xC8
	[SerializeField] // 0x0051AA60-0x0051AA70
	private Transform chestBtn; // 0xD0
	[SerializeField] // 0x0051AA70-0x0051AA80
	private Animation chestAnim; // 0xD8
	[SerializeField] // 0x0051AA80-0x0051AA90
	private Transform taskBtn; // 0xE0
	[SerializeField] // 0x0051AA90-0x0051AAA0
	private MainScreenTopUI topUI; // 0xE8
	[SerializeField] // 0x0051AAA0-0x0051AAB0
	private GameObject tutorialRoot; // 0xF0
	[SerializeField] // 0x0051AAB0-0x0051AAC0
	private Transform finger; // 0xF8
	[SerializeField] // 0x0051AAC0-0x0051AAD0
	private GameObject[] gameobjectsToTween; // 0x100
	[SerializeField] // 0x0051AAD0-0x0051AAE0
	private UILabel rankLabel; // 0x108
	[SerializeField] // 0x0051AAE0-0x0051AAF0
	private UILabel achivementLabel; // 0x110
	[SerializeField] // 0x0051AAF0-0x0051AB00
	private UILabel roleLabel; // 0x118
	[SerializeField] // 0x0051AB00-0x0051AB10
	private UILabel goLabel; // 0x120
	[SerializeField] // 0x0051AB10-0x0051AB20
	private GameObject MapTutorial; // 0x128
	[SerializeField] // 0x0051AB20-0x0051AB30
	private GameObject TaskTutorial; // 0x130
	[SerializeField] // 0x0051AB30-0x0051AB40
	private GameObject TaskTips; // 0x138
	[SerializeField] // 0x0051AB40-0x0051AB50
	private GameObject TaskTipsCanGetReward; // 0x140
	[SerializeField] // 0x0051AB50-0x0051AB60
	private SetscrollviewBgSize noticeScrollview; // 0x148
	[SerializeField] // 0x0051AB60-0x0051AB70
	private GameObject freeroleVideoBtn; // 0x150
	[SerializeField] // 0x0051AB70-0x0051AB80
	private GameObject CharTip; // 0x158
	[SerializeField] // 0x0051AB80-0x0051AB90
	private GameObject CharNewSkillTip; // 0x160
	private bool _hasStatisticsPlayerLevel; // 0x168
	private int _lastGameoverAdCountForTrailRole; // 0x16C
	private bool autoShowPopup; // 0x170
	public static bool GoBtnTutorial_noBoxFree; // 0x00
	private bool firstShowSubscribe; // 0x171
	public static bool show_TaskTipsCanGetReward; // 0x01
	public UITable uigiftbtntable; // 0x178
	public UITable uigiftbtntable_left; // 0x180
	private CollectionManage.Pack pack; // 0x188
	public UILabel TimeCd; // 0x190
	public GameObject giftBtn; // 0x198
	private int framecount; // 0x1A0
	private CollectionManage.Pack pack_doubcoingift; // 0x1A8
	public UILabel TimeCd_doubcoingift; // 0x1B0
	public GameObject giftBtn_doubcoingift; // 0x1B8
	private CollectionManage.Pack pack_rolegift; // 0x1C0
	public GameObject RoleGiftButton; // 0x1C8
	public UILabel TimeCd_roleGiftButton; // 0x1D0
	public GameObject WeeklyButton; // 0x1D8

	// Nested types
	[CompilerGenerated] // 0x00514870-0x00514880
	private sealed class _CheckTutorial_d__41 : IEnumerator<object> // TypeDefIndex: 4067
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public MainScreen __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527464-0x00527474 */ get; } // 0x006FF44C-0x006FF454 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527484-0x00527494 */ get; } // 0x006FF4B8-0x006FF4C0 

		// Constructors
		[DebuggerHidden] // 0x00527444-0x00527454
		public _CheckTutorial_d__41(int __1__state); // 0x006FCBF8-0x006FCC24

		// Methods
		[DebuggerHidden] // 0x00527454-0x00527464
		void IDisposable.Dispose(); // 0x006FEB2C-0x006FEB30
		private bool MoveNext(); // 0x006FEB30-0x006FF44C
		[DebuggerHidden] // 0x00527474-0x00527484
		void IEnumerator.Reset(); // 0x006FF454-0x006FF4B8
	}

	// Constructors
	public MainScreen(); // 0x006FEB18-0x006FEB28
	static MainScreen(); // 0x006FEB28-0x006FEB2C

	// Methods
	public void OpenTaskweekly(); // 0x006FB15C-0x006FB208
	private void OnEnable(); // 0x006FB208-0x006FB314
	private void OnDisable(); // 0x006FB314-0x006FB318
	public void TapStartOnClick(); // 0x006FB318-0x006FB45C
	private void RefreshCharSkillTip(bool show); // 0x006FB45C-0x006FB4A8
	public override void Init(); // 0x006FB4A8-0x006FB69C
	private void FreshMap(bool Isshow = false /* Metadata: 0x001F63A5 */); // 0x006FB730-0x006FBB9C
	public void ForcefreshFreeRole(); // 0x006FBB9C-0x006FBC98
	public override void Show(); // 0x006FBC98-0x006FC6D0
	[IteratorStateMachine] // 0x005220D4-0x00522138
	private IEnumerator CheckTutorial(); // 0x006FCB84-0x006FCBF8
	private void StatisticsPlayerLevel(); // 0x006FCA8C-0x006FCB84
	private void triggerTween(bool active); // 0x006FB69C-0x006FB730
	public override void GainFocus(); // 0x006FCC24-0x006FCF94
	public void OnCoinPlusClick(); // 0x006FCF94-0x006FD0EC
	public void OnKeyPlusClick(); // 0x006FD0EC-0x006FD244
	public override void LooseFocus(); // 0x006FD244-0x006FD384
	public void ShowTutorialCharBtn(); // 0x006FD384-0x006FD728
	public void OnClickCharGo(GameObject go); // 0x006FD728-0x006FD758
	public void ShowTutorialCharacterScreenPanelClose(); // 0x006FC6D0-0x006FCA8C
	public void OnClickTutorialGo(GameObject go); // 0x006FD758-0x006FD854
	public override void Hide(); // 0x006FD854-0x006FD85C
	private void Update(); // 0x006FD85C-0x006FD8E0
	public void CheckGiftPage(); // 0x006FD8E0-0x006FDE74
	public void CheckGift_doubcoingiftPage(); // 0x006FDE74-0x006FE44C
	public void CheckGift_rolecoingiftPage(); // 0x006FE44C-0x006FEA24
	public void CheckWeeklycoingiftPage(); // 0x006FEA24-0x006FEB18
}

public class MainScreenTopUI : MonoBehaviour // TypeDefIndex: 4068
{
	// Fields
	[SerializeField] // 0x0051AB90-0x0051ABA0
	private UILabel keyAmountLabel; // 0x18
	[SerializeField] // 0x0051ABA0-0x0051ABB0
	private UILabel coinAmountLabel; // 0x20
	[SerializeField] // 0x0051ABB0-0x0051ABC0
	private UILabel levelAmountLabel; // 0x28
	[SerializeField] // 0x0051ABC0-0x0051ABD0
	private UILabel expAmountLabel; // 0x30
	[SerializeField] // 0x0051ABD0-0x0051ABE0
	private UITexture headTexture; // 0x38
	[SerializeField] // 0x0051ABE0-0x0051ABF0
	private UISlider expSlider; // 0x40
	[SerializeField] // 0x0051ABF0-0x0051AC00
	private UISprite coinAdd; // 0x48
	[SerializeField] // 0x0051AC00-0x0051AC10
	private UISprite keyAdd; // 0x50

	// Constructors
	public MainScreenTopUI(); // 0x006FFD08-0x006FFD10

	// Methods
	private void Awake(); // 0x006FF4C0-0x006FF4C4
	private void OnEnable(); // 0x006FF534-0x006FF7D8
	private void RefreshHeadUI(); // 0x006FF4C4-0x006FF534
	private void OnExpChanged(); // 0x006FF9F4-0x006FFA8C
	private void OnLevelChanged(); // 0x006FF938-0x006FF9F4
	private void OnDisable(); // 0x006FFA8C-0x006FFD08
	private void OnCoinsChanged(); // 0x006FF7D8-0x006FF888
	private void OnKeysChanged(); // 0x006FF888-0x006FF938
}

public class MenuSlider : MonoBehaviour // TypeDefIndex: 4069
{
	// Fields
	[SerializeField] // 0x0051AC10-0x0051AC20
	private ScrollDirection direction; // 0x18
	[SerializeField] // 0x0051AC20-0x0051AC30
	private UISprite menuBg; // 0x20
	[SerializeField] // 0x0051AC30-0x0051AC40
	private UISprite menuArrow; // 0x28
	[SerializeField] // 0x0051AC40-0x0051AC50
	private BoxCollider _menuMask; // 0x30
	[SerializeField] // 0x0051AC50-0x0051AC60
	private GameObject menuTip; // 0x38
	[SerializeField] // 0x0051AC60-0x0051AC70
	private MenuTween[] tweens; // 0x40
	[SerializeField] // 0x0051AC70-0x0051AC80
	private float menuBgHideValue; // 0x48
	[SerializeField] // 0x0051AC80-0x0051AC90
	private float duration; // 0x4C
	private int menuBgInitialValue; // 0x50

	// Nested types
	[Serializable]
	public class MenuTween // TypeDefIndex: 4070
	{
		// Fields
		public Transform tween; // 0x10
		public Vector3 showLocalPos; // 0x18
		public Vector3 hideLocalPos; // 0x24

		// Constructors
		public MenuTween(); // 0x007020F4-0x007020FC
	}

	// Constructors
	public MenuSlider(); // 0x007020DC-0x007020F4

	// Methods
	private void Awake(); // 0x0070158C-0x007016BC
	private void Start(); // 0x007016BC-0x00701750
	private void OnDisable(); // 0x00701D68-0x00701DFC
	public void Show(); // 0x00701DFC-0x007020DC
	private void TweenIn(float t); // 0x00701750-0x00701A78
	private void TweenOut(float t); // 0x00701A78-0x00701D68
}

public class UIBaseScreen : MonoBehaviour // TypeDefIndex: 4071
{
	// Fields
	[SerializeField] // 0x0051AC90-0x0051ACA0
	protected GameObject[] dynamicallyLoadedElements; // 0x18
	[OptionalField] // 0x0051ACA0-0x0051ACD8
	[SerializeField] // 0x0051ACA0-0x0051ACD8
	protected GameObject FooterPrefab; // 0x20
	[SerializeField] // 0x0051ACD8-0x0051ACE8
	protected int selectedFooterButton; // 0x28
	[SerializeField] // 0x0051ACE8-0x0051ACF8
	protected UIAnimatorController animatorCtrl; // 0x30
	[SerializeField] // 0x0051ACF8-0x0051AD08
	protected UITweener tween; // 0x38
	protected Collider[] colliders; // 0x40
	protected UIButtonColor[] uiButtonColors; // 0x48
	protected bool[] collidersActivate; // 0x50
	protected UIFooterHandler _footerHandler; // 0x58
	private bool _footerInited; // 0x60
	protected bool _hasSetCollidersFalse; // 0x61
	public Action Closed; // 0x68
	[SerializeField] // 0x0051AD08-0x0051AD18
	protected UIAnchor[] topp; // 0x70
	[SerializeField] // 0x0051AD18-0x0051AD28
	protected UIAnchor[] bottom; // 0x78
	[CompilerGenerated] // 0x0051AD28-0x0051AD38
	private bool _isActive_k__BackingField; // 0x80
	[CompilerGenerated] // 0x0051AD38-0x0051AD48
	private string _parentScreen_k__BackingField; // 0x88
	[CompilerGenerated] // 0x0051AD48-0x0051AD58
	private string _screenName_k__BackingField; // 0x90

	// Properties
	public bool isActive { [CompilerGenerated] /* 0x00522138-0x00522148 */ get; [CompilerGenerated] /* 0x00522148-0x00522158 */ private set; } // 0x007EE4A4-0x007EE4AC 0x007EE4AC-0x007EE4B8
	public string parentScreen { [CompilerGenerated] /* 0x00522158-0x00522168 */ get; [CompilerGenerated] /* 0x00522168-0x00522178 */ set; } // 0x007EE4B8-0x007EE4C0 0x007EE4C0-0x007EE4C8
	public string screenName { [CompilerGenerated] /* 0x00522178-0x00522188 */ get; [CompilerGenerated] /* 0x00522188-0x00522198 */ set; } // 0x007EE4C8-0x007EE4D0 0x007EE4D0-0x007EE4D8

	// Constructors
	public UIBaseScreen(); // 0x007E4000-0x007E4008

	// Methods
	public virtual void GainFocus(); // 0x007ED698-0x007ED6A0
	public virtual void TryHide(); // 0x007ED920-0x007EDAB4
	protected virtual void PrepareHide(); // 0x007EDAB4-0x007EDAB8
	public virtual void Hide(); // 0x007E3FA8-0x007E3FF8
	public virtual void NoSetActiveHide(); // 0x007EDAB8-0x007EDAEC
	public virtual void Init(); // 0x007EDAEC-0x007EDEB0
	protected virtual void InitFooter(); // 0x007EDEB0-0x007EE020
	public CoinBoxSizer InitializeCoinbox(bool fundsEnabled, bool coinsEnabled, bool keysEnabled, bool updateAutomatically, bool enableAdd = true /* Metadata: 0x001F63A6 */, bool SetIngmaeCoinbox = false /* Metadata: 0x001F63A7 */); // 0x007EE020-0x007EE240
	public static bool IsOutOfProportion(); // 0x007EE240-0x007EE288
	public virtual void LooseFocus(); // 0x007EE288-0x007EE290
	public virtual void Show(); // 0x007EE290-0x007EE4A0
	protected virtual void AfterShow(); // 0x007EE4A0-0x007EE4A4
	public void Collider(bool active); // 0x007ED6A0-0x007ED920
}

public class UseSkill : MonoBehaviour // TypeDefIndex: 4072
{
	// Fields
	public DoubleSkillType curskill; // 0x18
	public int LimitMaxLevel; // 0x1C
	public GameObject usebtn; // 0x20
	public GameObject lockbtn; // 0x28
	public GameObject usedbtn; // 0x30
	public UILabel locklabel; // 0x38
	public UILabel DescripLabel; // 0x40
	public string DescripLankey; // 0x48
	[SerializeField] // 0x0051AD58-0x0051AD68
	private UISprite newtip; // 0x50
	[SerializeField] // 0x0051AD68-0x0051AD78
	private int locklevel; // 0x58

	// Constructors
	public UseSkill(); // 0x0081CF88-0x0081CF90

	// Methods
	private void Start(); // 0x0081C8F0-0x0081C98C
	private void OnEnable(); // 0x0081C98C-0x0081CD34
	public void USESkill(); // 0x0081CE78-0x0081CF84
	public void OnChangeskill(); // 0x0081CF84-0x0081CF88
	public void FreshNewTip(); // 0x0081CD34-0x0081CE78
}

public class UISlideIn : MonoBehaviour // TypeDefIndex: 4073
{
	// Fields
	private Action _onDidShowCallback; // 0x18
	private float _readyForNextTimer; // 0x20
	private float _slideOutTimer; // 0x24
	private bool _triggerReadyForNext; // 0x28
	private bool _triggerSlideOut; // 0x29
	protected Vector3 posOff; // 0x2C
	protected Vector3 posOn; // 0x38

	// Nested types
	[CompilerGenerated] // 0x00514880-0x00514890
	private sealed class _InvokeDidShowCallback_d__7 : IEnumerator<object> // TypeDefIndex: 4074
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public float waitTime; // 0x20
		public UISlideIn __4__this; // 0x28
		private float _startPoint_5__2; // 0x30

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005274B4-0x005274C4 */ get; } // 0x00803E10-0x00803E18 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005274D4-0x005274E4 */ get; } // 0x00803E7C-0x00803E84 

		// Constructors
		[DebuggerHidden] // 0x00527494-0x005274A4
		public _InvokeDidShowCallback_d__7(int __1__state); // 0x00803D3C-0x00803D68

		// Methods
		[DebuggerHidden] // 0x005274A4-0x005274B4
		void IDisposable.Dispose(); // 0x00803D68-0x00803D6C
		private bool MoveNext(); // 0x00803D6C-0x00803E10
		[DebuggerHidden] // 0x005274C4-0x005274D4
		void IEnumerator.Reset(); // 0x00803E18-0x00803E7C
	}

	[CompilerGenerated] // 0x00514890-0x005148A0
	private sealed class _PreloadSlideIn_d__8 : IEnumerator<object> // TypeDefIndex: 4075
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public UISlideIn __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527504-0x00527514 */ get; } // 0x00803F64-0x00803F6C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527524-0x00527534 */ get; } // 0x00803FD0-0x00803FD8 

		// Constructors
		[DebuggerHidden] // 0x005274E4-0x005274F4
		public _PreloadSlideIn_d__8(int __1__state); // 0x00803E84-0x00803EB0

		// Methods
		[DebuggerHidden] // 0x005274F4-0x00527504
		void IDisposable.Dispose(); // 0x00803EB0-0x00803EB4
		private bool MoveNext(); // 0x00803EB4-0x00803F64
		[DebuggerHidden] // 0x00527514-0x00527524
		void IEnumerator.Reset(); // 0x00803F6C-0x00803FD0
	}

	// Constructors
	public UISlideIn(); // 0x00771E40-0x00771EE0

	// Methods
	[IteratorStateMachine] // 0x00522198-0x005221FC
	private IEnumerator InvokeDidShowCallback(float waitTime); // 0x00771A70-0x00771AF4
	[IteratorStateMachine] // 0x005221FC-0x00522260
	public IEnumerator PreloadSlideIn(); // 0x00771AF4-0x00771B68
	protected virtual void ReadyForNewMessage(); // 0x00771B68-0x00771BE4
	public void SetupSlideIn(); // 0x00771BE4-0x00771C2C
	protected virtual void SlideIn(Action onDidShowCallback); // 0x00771C2C-0x00771CF4
	protected virtual void SlideOut(); // 0x00771CF4-0x00771D40
	protected virtual void Start(); // 0x00771D40-0x00771D94
	private void Update(); // 0x00771D94-0x00771E40
}

public class UISlideInErrorMessage : UISlideIn // TypeDefIndex: 4076
{
	// Fields
	[SerializeField] // 0x0051AD78-0x0051AD88
	private UILabel messageLabel; // 0x48

	// Constructors
	public UISlideInErrorMessage(); // 0x00804038-0x00804040

	// Methods
	public void SetupErrorMessage(string message); // 0x00803FD8-0x00804038
}

public class UISlideInTaskHelper : UISlideIn // TypeDefIndex: 4077
{
	// Fields
	public UILabel line1; // 0x48
	public UILabel line2; // 0x50

	// Constructors
	public UISlideInTaskHelper(); // 0x008041F8-0x00804200

	// Methods
	public void SetupSlideInTask(string message); // 0x00804040-0x0080411C
	public void SetupSlideInAchievement(string message); // 0x0080411C-0x008041F8
}

public class UISlideInTaskSetHelper : UISlideIn // TypeDefIndex: 4078
{
	// Fields
	[SerializeField] // 0x0051AD88-0x0051AD98
	private UILabel line1; // 0x48
	[SerializeField] // 0x0051AD98-0x0051ADA8
	private UILabel lineReward; // 0x50
	[SerializeField] // 0x0051ADA8-0x0051ADB8
	private UILabel lineRewardShadow; // 0x58
	[SerializeField] // 0x0051ADB8-0x0051ADC8
	private UISprite superChest; // 0x60
	[SerializeField] // 0x0051ADC8-0x0051ADD8
	private UISprite coinIcon; // 0x68
	[SerializeField] // 0x0051ADD8-0x0051ADE8
	private UILabel coinLabel; // 0x70
	private int _displayedMultiplier; // 0x78
	private int _tasksInStoryLineSet; // 0x7C
	private bool _multiplierIsIncrementing; // 0x80
	private int _queuedTaskSetSlideIns; // 0x84

	// Constructors
	public UISlideInTaskSetHelper(); // 0x00804714-0x0080471C

	// Methods
	private void Awake(); // 0x00804200-0x00804280
	private int CalculateTheDisplayedMultiplierNumber(int multiplier); // 0x00804280-0x0080432C
	public void EnableCoinLabel(bool enable); // 0x00804440-0x008044A0
	public void SetupSlideInTaskSet(int multiplier); // 0x008044A0-0x00804714
}

public class UISlideInTopRunTip : UISlideIn // TypeDefIndex: 4079
{
	// Fields
	[SerializeField] // 0x0051ADE8-0x0051ADF8
	private UILabel _tipLabel; // 0x48

	// Constructors
	public UISlideInTopRunTip(); // 0x0080477C-0x00804784

	// Methods
	public void SetupSlideTopRunTip(string tip); // 0x0080471C-0x0080477C
}

public class UISlideInUnlock : UISlideIn // TypeDefIndex: 4080
{
	// Fields
	public UILabel youUnlockLbl; // 0x48
	public UILabel UnlockName; // 0x50

	// Constructors
	public UISlideInUnlock(); // 0x0080485C-0x00804864

	// Methods
	public void SetupSlideInUnlock(string message); // 0x00804784-0x0080485C
}

public class TaskList : MonoBehaviour // TypeDefIndex: 4081
{
	// Fields
	[SerializeField] // 0x0051ADF8-0x0051AE08
	private bool inFrontUI; // 0x18
	[SerializeField] // 0x0051AE08-0x0051AE18
	private bool inGameoverUI; // 0x19
	[SerializeField] // 0x0051AE18-0x0051AE28
	private GameObject[] taskGoes; // 0x20
	[SerializeField] // 0x0051AE28-0x0051AE38
	private UILabel[] taskDescriptions; // 0x28
	[SerializeField] // 0x0051AE38-0x0051AE48
	private GameObject[] CompleteGameObjs; // 0x30
	[SerializeField] // 0x0051AE48-0x0051AE58
	private UISlider[] taskProgressSilders; // 0x38
	[SerializeField] // 0x0051AE58-0x0051AE68
	private UILabel[] progressLabel; // 0x40
	[SerializeField] // 0x0051AE68-0x0051AE78
	private UISprite[] getRewardSprite; // 0x48
	[SerializeField] // 0x0051AE78-0x0051AE88
	private GameObject[] getRewardButtons; // 0x50
	[SerializeField] // 0x0051AE88-0x0051AE98
	private UILabel[] getRewardLabel; // 0x58
	[SerializeField] // 0x0051AE98-0x0051AEA8
	private UILabel[] taskReward_Coin; // 0x60
	[SerializeField] // 0x0051AEA8-0x0051AEB8
	private UILabel[] taskReward_Exp; // 0x68
	[SerializeField] // 0x0051AEB8-0x0051AEC8
	private UISprite[] taskRewardSpr_Coin; // 0x70
	[SerializeField] // 0x0051AEC8-0x0051AED8
	private UISprite[] taskRewardSpr_Exp; // 0x78
	[SerializeField] // 0x0051AED8-0x0051AEE8
	private ParticleSystem[] getRewardPar; // 0x80
	[SerializeField] // 0x0051AEE8-0x0051AEF8
	private GameObject nextTaskViewGo; // 0x88
	[SerializeField] // 0x0051AEF8-0x0051AF08
	private UILabel nextTaskDescription; // 0x90
	[SerializeField] // 0x0051AF08-0x0051AF18
	private UILabel nextTaskTime; // 0x98
	[SerializeField] // 0x0051AF18-0x0051AF28
	private UISprite[] freeViewSprs; // 0xA0
	[SerializeField] // 0x0051AF28-0x0051AF38
	private TweenScale freeViewTween; // 0xA8
	[SerializeField] // 0x0051AF38-0x0051AF48
	private GameObject freeViewGo; // 0xB0
	[SerializeField] // 0x0051AF48-0x0051AF58
	private UILabel waitNextTaskBtnLabel; // 0xB8
	[SerializeField] // 0x0051AF58-0x0051AF68
	private UILabel adLbl; // 0xC0
	[SerializeField] // 0x0051AF68-0x0051AF78
	private UILabel nextTaskFreeBtnLabel; // 0xC8
	[SerializeField] // 0x0051AF78-0x0051AF88
	private GameObject freeGo; // 0xD0
	[SerializeField] // 0x0051AF88-0x0051AF98
	private Fly fly; // 0xD8
	[SerializeField] // 0x0051AF98-0x0051AFA8
	private UITexture headTexture; // 0xE0
	[SerializeField] // 0x0051AFA8-0x0051AFB8
	public UILabel levelLabel; // 0xE8
	[SerializeField] // 0x0051AFB8-0x0051AFC8
	public UILabel expLabel; // 0xF0
	[SerializeField] // 0x0051AFC8-0x0051AFD8
	public UISlider expSlider; // 0xF8
	[SerializeField] // 0x0051AFD8-0x0051AFE8
	public BoxCollider closeCollider; // 0x100
	public TaskInfo[] _currentTasks; // 0x108
	private int rewardCoinsNum; // 0x110
	private int rewardExpNum; // 0x114
	private int oriExp; // 0x118
	private int oriLevel; // 0x11C
	private Color waitNextTaskBtnLabelOriginColor; // 0x120
	private BoxCollider[] getBtnColliders; // 0x130
	private bool hasShowFreeTutrial; // 0x138
	private bool hasRewardAd; // 0x139
	public ParticleSystem[] taskGetPs; // 0x140

	// Properties
	private int oneOfEach { get; } // 0x00FC7FAC-0x00FC80AC 
	public static int TaskStartValue0 { get; set; } // 0x00FC8320-0x00FC8370 0x00FC8370-0x00FC83C4
	public static int TaskStartValue1 { get; set; } // 0x00FC83C4-0x00FC8414 0x00FC8414-0x00FC8468
	public static int TaskStartValue2 { get; set; } // 0x00FC8468-0x00FC84B8 0x00FC84B8-0x00FC850C

	// Nested types
	[CompilerGenerated] // 0x005148A0-0x005148B0
	private sealed class _CountUp_d__44 : IEnumerator<object> // TypeDefIndex: 4082
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public int amount; // 0x20
		public TaskList __4__this; // 0x28
		private float _countFactor_5__2; // 0x30
		private float _countTime_5__3; // 0x34
		private int _from_5__4; // 0x38
		private int _to_5__5; // 0x3C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527554-0x00527564 */ get; } // 0x00FC9830-0x00FC9838 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527574-0x00527584 */ get; } // 0x00FC989C-0x00FC98A4 

		// Constructors
		[DebuggerHidden] // 0x00527534-0x00527544
		public _CountUp_d__44(int __1__state); // 0x00FC6DB8-0x00FC6DE4

		// Methods
		[DebuggerHidden] // 0x00527544-0x00527554
		void IDisposable.Dispose(); // 0x00FC962C-0x00FC9630
		private bool MoveNext(); // 0x00FC9630-0x00FC9830
		[DebuggerHidden] // 0x00527564-0x00527574
		void IEnumerator.Reset(); // 0x00FC9838-0x00FC989C
	}

	[CompilerGenerated] // 0x005148B0-0x005148C0
	private sealed class _WaitFlyStop_d__45 : IEnumerator<object> // TypeDefIndex: 4083
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public TaskList __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005275A4-0x005275B4 */ get; } // 0x00FC9F68-0x00FC9F70 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005275C4-0x005275D4 */ get; } // 0x00FC9FD4-0x00FC9FDC 

		// Constructors
		[DebuggerHidden] // 0x00527584-0x00527594
		public _WaitFlyStop_d__45(int __1__state); // 0x00FC6DE4-0x00FC6E10

		// Methods
		[DebuggerHidden] // 0x00527594-0x005275A4
		void IDisposable.Dispose(); // 0x00FC9CB8-0x00FC9CBC
		private bool MoveNext(); // 0x00FC9CBC-0x00FC9F68
		[DebuggerHidden] // 0x005275B4-0x005275C4
		void IEnumerator.Reset(); // 0x00FC9F70-0x00FC9FD4
	}

	[CompilerGenerated] // 0x005148C0-0x005148D0
	private sealed class _TaskPorgressUp_d__74 : IEnumerator<object> // TypeDefIndex: 4084
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public int i; // 0x20
		public TaskList __4__this; // 0x28
		private float _countFactor_5__2; // 0x30
		private float _countTime_5__3; // 0x34
		private int _from_5__4; // 0x38
		private int _to_5__5; // 0x3C
		private int _val_5__6; // 0x40
		private float _SmoothVal_5__7; // 0x44
		private float _SmoothValto_5__8; // 0x48

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005275F4-0x00527604 */ get; } // 0x00FC9C44-0x00FC9C4C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527614-0x00527624 */ get; } // 0x00FC9CB0-0x00FC9CB8 

		// Constructors
		[DebuggerHidden] // 0x005275D4-0x005275E4
		public _TaskPorgressUp_d__74(int __1__state); // 0x00FC85D4-0x00FC8600

		// Methods
		[DebuggerHidden] // 0x005275E4-0x005275F4
		void IDisposable.Dispose(); // 0x00FC98A4-0x00FC98A8
		private bool MoveNext(); // 0x00FC98A8-0x00FC9C44
		[DebuggerHidden] // 0x00527604-0x00527614
		void IEnumerator.Reset(); // 0x00FC9C4C-0x00FC9CB0
	}

	[CompilerGenerated] // 0x005148D0-0x005148E0
	private sealed class _AutoGetReward_d__75 : IEnumerator<object> // TypeDefIndex: 4085
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public int val; // 0x20
		public TaskList __4__this; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527644-0x00527654 */ get; } // 0x00FC95B8-0x00FC95C0 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527664-0x00527674 */ get; } // 0x00FC9624-0x00FC962C 

		// Constructors
		[DebuggerHidden] // 0x00527624-0x00527634
		public _AutoGetReward_d__75(int __1__state); // 0x00FC8684-0x00FC86B0

		// Methods
		[DebuggerHidden] // 0x00527634-0x00527644
		void IDisposable.Dispose(); // 0x00FC8F90-0x00FC8F94
		private bool MoveNext(); // 0x00FC8F94-0x00FC95B8
		[DebuggerHidden] // 0x00527654-0x00527664
		void IEnumerator.Reset(); // 0x00FC95C0-0x00FC9624
	}

	// Constructors
	public TaskList(); // 0x00FC8E20-0x00FC8F90

	// Methods
	private void Awake(); // 0x00FC56C8-0x00FC5768
	public void Show(); // 0x00FC5768-0x00FC5984
	public void AfterShow(); // 0x00FC63F4-0x00FC675C
	private void OnClickGetReward(GameObject go); // 0x00FC675C-0x00FC6CC0
	[IteratorStateMachine] // 0x00522260-0x005222C4
	private IEnumerator CountUp(int amount); // 0x00FC6D34-0x00FC6DB8
	[IteratorStateMachine] // 0x005222C4-0x00522328
	private IEnumerator WaitFlyStop(GameObject gameObject, int amount); // 0x00FC6CC0-0x00FC6D34
	public void AddExps(int add); // 0x00FC6E10-0x00FC6E28
	private void AddLevel(int add); // 0x00FC6E28-0x00FC6E2C
	private void RefreshLevel(int amount); // 0x00FC5A44-0x00FC5A48
	private void RefreshExp(int level, int amount); // 0x00FC5A40-0x00FC5A44
	public bool CheckPlayerLevel(); // 0x00FC6E2C-0x00FC70BC
	private void RefreshTime(); // 0x00FC70BC-0x00FC712C
	public void OnClickSkipWaitTime(GameObject go); // 0x00FC712C-0x00FC7364
	public void OnClickFree(GameObject go); // 0x00FC7364-0x00FC7498
	private void OnEnable(); // 0x00FC75DC-0x00FC7888
	private void OnDisable(); // 0x00FC7888-0x00FC7984
	private void RefreshHeadUI(); // 0x00FC5A48-0x00FC5AB8
	private void OnFreeView(RiseSdk.AdEventType aet, int id, string tag, int type); // 0x00FC7984-0x00FC7B74
	private void RefreshContents(bool waiting); // 0x00FC5AB8-0x00FC6138
	private void LabelAndNumberUpdate(int taskArrayNr, UILabel sendTaskLabel, UISlider progress, UILabel progressLabel, UISprite coinSpr, UISprite expSpr, UISprite getRewardSpr, BoxCollider getRewardCollider, GameObject completeObj); // 0x00FC7B74-0x00FC7FAC
	private void Update(); // 0x00FC80AC-0x00FC8320
	public static int GetTaskStartValue(int idx); // 0x00FC850C-0x00FC8528
	public static void SetTaskStartValue(int idx, int val); // 0x00FC8528-0x00FC8550
	[IteratorStateMachine] // 0x00522328-0x0052238C
	public IEnumerator TaskPorgressUp(int i); // 0x00FC8550-0x00FC85D4
	[IteratorStateMachine] // 0x0052238C-0x005223F0
	public IEnumerator AutoGetReward(int val); // 0x00FC8600-0x00FC8684
	public void FreshtaskContent(int i); // 0x00FC6138-0x00FC63F4
	public void freshTask(int idx); // 0x00FC8C64-0x00FC8D40
	private void LabelAndNumberUpdateNew(int taskArrayNr, UILabel sendTaskLabel, UISlider progress, UILabel progressLabel, UISprite coinSpr, UISprite expSpr, UISprite getRewardSpr, BoxCollider getRewardCollider, GameObject completeObj); // 0x00FC86B0-0x00FC8C64
	public bool TaskNewChange(); // 0x00FC8D40-0x00FC8E20
}

[ExecuteInEditMode] // 0x00513D40-0x00513D50
public class UIShadowHelper<T> : MonoBehaviour // TypeDefIndex: 4086
	where T : UIWidget
{
	// Fields
	public T shadow;
	public bool updateDynamically;
	public Vector3 shadowOffset;
	protected T _front;
	protected Transform _frontTransform;
	protected Transform _shadowTransform;

	// Constructors
	public UIShadowHelper();

	// Methods
	private void Awake();
	private void OnDisable();
	private void OnEnable();
	private void Start();
	private void Update();
	public void UpdateNow();
	private void UpdateT();
	protected virtual void withUpdate();
}

[ExecuteInEditMode] // 0x00513D50-0x00513D60
public class UISpriteShadowHelper : UIShadowHelper<UISprite> // TypeDefIndex: 4087
{
	// Fields
	public Color frontColor; // 0x48
	public Color shadowColor; // 0x58

	// Constructors
	public UISpriteShadowHelper(); // 0x00809CF4-0x00809D64

	// Methods
	protected override void withUpdate(); // 0x00809C1C-0x00809CF4
}

[ExecuteInEditMode] // 0x00513D60-0x00513D70
public class UITextShadowHelper : UIShadowHelper<UILabel> // TypeDefIndex: 4088
{
	// Fields
	public Color frontColor; // 0x48
	public Color shadowColor; // 0x58

	// Constructors
	public UITextShadowHelper(); // 0x0080D62C-0x0080D69C

	// Methods
	protected override void withUpdate(); // 0x0080D50C-0x0080D62C
}

public class FriendsScrollView : MonoBehaviour // TypeDefIndex: 4089
{
	// Fields
	[SerializeField] // 0x0051AFE8-0x0051AFF8
	private GameObject rankcellPrefab; // 0x18
	[SerializeField] // 0x0051AFF8-0x0051B008
	private UITable table; // 0x20
	[SerializeField] // 0x0051B008-0x0051B018
	private GameObject _separateGo; // 0x28
	private List<TopRunCell> _cacheCells; // 0x30
	private PullListResult result; // 0x38
	private float pullListTime; // 0x3C
	private List<TopRun> topRunList; // 0x40
	private bool isShow; // 0x48
	private int remainCount; // 0x4C
	private float time; // 0x50

	// Nested types
	[CompilerGenerated] // 0x005148E0-0x005148F0
	private sealed class _DownloadImage_d__18 : IEnumerator<object> // TypeDefIndex: 4090
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public List<string> urls; // 0x20
		public FriendsScrollView __4__this; // 0x28
		private int _count_5__2; // 0x30
		private int _i_5__3; // 0x34

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527694-0x005276A4 */ get; } // 0x0069117C-0x00691184 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005276B4-0x005276C4 */ get; } // 0x006911E8-0x006911F0 

		// Constructors
		[DebuggerHidden] // 0x00527674-0x00527684
		public _DownloadImage_d__18(int __1__state); // 0x00690828-0x00690854

		// Methods
		[DebuggerHidden] // 0x00527684-0x00527694
		void IDisposable.Dispose(); // 0x00690FCC-0x00690FD0
		private bool MoveNext(); // 0x00690FD0-0x0069117C
		[DebuggerHidden] // 0x005276A4-0x005276B4
		void IEnumerator.Reset(); // 0x00691184-0x006911E8
	}

	// Constructors
	public FriendsScrollView(); // 0x00690FB4-0x00690FCC

	// Methods
	public void Hide(); // 0x0068E9D8-0x0068E9E0
	public void Show(); // 0x0068E9E0-0x0068EBF0
	public void PullFriendsListListener(int status, object obj); // 0x0068EED0-0x0068F5D0
	private void GetInfoCallback(int status, object obj); // 0x0068F5D0-0x0068FA30
	private void GetPlayerLevelDataCall(int status, object obj); // 0x0068FAB0-0x0068FDEC
	private void GetSubscriptionDataCallback(int status, object obj); // 0x0068FDEC-0x00690110
	private void GetPlayerNameDataCallback(int status, object obj); // 0x00690110-0x0069044C
	private void GePictureUrlDataCallback(int status, object obj); // 0x0069044C-0x00690828
	[IteratorStateMachine] // 0x005223F0-0x00522454
	private IEnumerator DownloadImage(List<string> urls); // 0x0068FA30-0x0068FAB0
	private void GetFacebookIDDataCallback(int status, object obj); // 0x00690854-0x00690D60
	private void OnComplete(bool result, ImageDownloader loader); // 0x00690D60-0x00690E98
	private void Update(); // 0x00690E98-0x00690FB4
	public void FillTable(); // 0x0068EBF0-0x0068EED0
	private TopRunCell InstantCell<T>(GameObject prefab, GameObject parent)
		where T : TopRunCell;
}

public class GlobalScrollView : MonoBehaviour // TypeDefIndex: 4091
{
	// Fields
	[SerializeField] // 0x0051B018-0x0051B028
	private GameObject rewardPrefab; // 0x18
	[SerializeField] // 0x0051B028-0x0051B038
	private GameObject rankcellPrefab; // 0x20
	[SerializeField] // 0x0051B038-0x0051B048
	private ScrollViewRecyclel scrollView; // 0x28
	[SerializeField] // 0x0051B048-0x0051B058
	private Transform table; // 0x30
	[SerializeField] // 0x0051B058-0x0051B068
	private int topRunCellCachedCount; // 0x38
	[SerializeField] // 0x0051B068-0x0051B078
	private RankReward[] rankRewards; // 0x40
	private RankRewardCell[] _cacheRankRewardCells; // 0x48
	private TopRunCell[] _cacheCells; // 0x50
	private PullListResult result; // 0x58
	private float pullListTime; // 0x5C
	private List<TopRun> topRunList; // 0x60
	private bool isShow; // 0x68
	private int remainCount; // 0x6C
	private float time; // 0x70

	// Nested types
	[Serializable]
	public class RankReward // TypeDefIndex: 4092
	{
		// Fields
		public int min; // 0x10
		public int max; // 0x14
		public int coinReward; // 0x18
		public int keyReward; // 0x1C

		// Constructors
		public RankReward(); // 0x0065B09C-0x0065B0A4
	}

	[CompilerGenerated] // 0x005148F0-0x00514900
	private sealed class _DownloadImage_d__25 : IEnumerator<object> // TypeDefIndex: 4093
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public List<string> urls; // 0x20
		public GlobalScrollView __4__this; // 0x28
		private int _count_5__2; // 0x30
		private int _i_5__3; // 0x34

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005276E4-0x005276F4 */ get; } // 0x0065B028-0x0065B030 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527704-0x00527714 */ get; } // 0x0065B094-0x0065B09C 

		// Constructors
		[DebuggerHidden] // 0x005276C4-0x005276D4
		public _DownloadImage_d__25(int __1__state); // 0x0065A38C-0x0065A3B8

		// Methods
		[DebuggerHidden] // 0x005276D4-0x005276E4
		void IDisposable.Dispose(); // 0x0065AE78-0x0065AE7C
		private bool MoveNext(); // 0x0065AE7C-0x0065B028
		[DebuggerHidden] // 0x005276F4-0x00527704
		void IEnumerator.Reset(); // 0x0065B030-0x0065B094
	}

	// Constructors
	public GlobalScrollView(); // 0x0065AE58-0x0065AE78

	// Methods
	private void Awake(); // 0x00656764-0x00656824
	private void OnRefreshUI(int type, int number, RankCell item); // 0x00656824-0x00656918
	public void Hide(); // 0x00656918-0x00656920
	public void Show(); // 0x00656920-0x00656B08
	public void PullGlobalListListener(int status, object obj); // 0x006571D8-0x00658010
	private void GetInfoCallback(int status, object obj); // 0x00658780-0x006590A0
	private void GetPlayerLevelDataCall(int status, object obj); // 0x00659120-0x00659480
	private void GetSubscriptionDataCallback(int status, object obj); // 0x00659480-0x006597A8
	private void GetCountryCodeDataCallback(int status, object obj); // 0x006597A8-0x00659B78
	private void GetPlayerNameDataCallback(int status, object obj); // 0x00659B78-0x00659F38
	private void GePictureUrlDataCallback(int status, object obj); // 0x00659F38-0x0065A38C
	[IteratorStateMachine] // 0x00522454-0x005224B8
	private IEnumerator DownloadImage(List<string> urls); // 0x006590A0-0x00659120
	private void OnComplete(bool result, ImageDownloader loader); // 0x0065A3B8-0x0065A4E8
	private void Update(); // 0x0065A4E8-0x0065A604
	public void FillTable(); // 0x00656BDC-0x006571D8
	private T InstantCell<T>(GameObject prefab, GameObject parent);
	private void OnComplete(string data); // 0x0065A604-0x0065A834
	private void CacheLocalGlobalData(); // 0x00656B08-0x00656BDC
	private void RefreshTopRunList(); // 0x00658010-0x00658780
	private bool TopRunListContainsMe(string userid); // 0x0065A834-0x0065A8F0
	private void GetCurrentMyRankNO100(); // 0x0065A8F0-0x0065A9DC
	private void PullGetMyRankNO100(int status, object obj); // 0x0065A9DC-0x0065ADF0
	private void GlobalScrollDelayMove(); // 0x0065ADF0-0x0065AE58
}

public class MyRankCell : MonoBehaviour // TypeDefIndex: 4094
{
	// Fields
	[SerializeField] // 0x0051B078-0x0051B088
	private UILabel rankLbl; // 0x18
	[SerializeField] // 0x0051B088-0x0051B098
	private UILabel scoreLbl; // 0x20
	[SerializeField] // 0x0051B098-0x0051B0A8
	private UILabel playerNameLbl; // 0x28
	[SerializeField] // 0x0051B0A8-0x0051B0B8
	private UILabel playerLevelLbl; // 0x30
	[SerializeField] // 0x0051B0B8-0x0051B0C8
	private UITexture headTxt; // 0x38
	[SerializeField] // 0x0051B0C8-0x0051B0D8
	private UISprite vipSpr; // 0x40
	[SerializeField] // 0x0051B0D8-0x0051B0E8
	private UISprite coutrySpr; // 0x48
	[SerializeField] // 0x0051B0E8-0x0051B0F8
	private GameObject changeNameBtn; // 0x50
	[SerializeField] // 0x0051B0F8-0x0051B108
	private GameObject inputGo; // 0x58
	[SerializeField] // 0x0051B108-0x0051B118
	private UIInput inputField; // 0x60
	[SerializeField] // 0x0051B118-0x0051B128
	private BoxCollider changeNameCollider; // 0x68
	private RankScreen.RankPopupType rankType; // 0x70

	// Constructors
	public MyRankCell(); // 0x008943E0-0x008943E8

	// Methods
	private void Awake(); // 0x00893644-0x00893798
	private void OnEnable(); // 0x00893798-0x00893954
	private void OnDisable(); // 0x00893954-0x00893B10
	public void OnChangeNameClick(GameObject go); // 0x00893B10-0x00893BA4
	public void SubmitNameClick(); // 0x00893BA4-0x00893C88
	public void OnChangeNameCloseClick(); // 0x00893C88-0x00893CD8
	public void Show(); // 0x00893CD8-0x00893E0C
	public void UpdateUI(RankScreen.RankPopupType type); // 0x00893E0C-0x00893E5C
	private void RefreshRankID(); // 0x008941F8-0x00894370
	private void RefreshScore(); // 0x00894024-0x008940C8
	private void RefreshCountryCode(); // 0x008940C8-0x0089416C
	private void RefreshSubscription(); // 0x0089416C-0x008941F8
	private void RefreshHead(); // 0x00894370-0x008943E0
	private void RefreshPlayerName(); // 0x00893E5C-0x00893F24
	private void RefreshPlayerLevel(); // 0x00893F24-0x00894024
}

public class RankCell : MonoBehaviour // TypeDefIndex: 4095
{
	// Constructors
	public RankCell(); // 0x0072B6A8-0x0072B6B0

	// Methods
	public virtual void RefreshUI(object obj); // 0x0072B6A4-0x0072B6A8
}

public class RankLoadingPopup : UIBaseScreen // TypeDefIndex: 4096
{
	// Fields
	[SerializeField] // 0x0051B128-0x0051B138
	private GameObject bgBtn; // 0x98
	[SerializeField] // 0x0051B138-0x0051B148
	private UILabel tipLbl; // 0xA0
	private TweenAlpha ta; // 0xA8

	// Nested types
	[CompilerGenerated] // 0x00514900-0x00514910
	private sealed class _PlayTween_d__8 : IEnumerator<object> // TypeDefIndex: 4097
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public RankLoadingPopup __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527734-0x00527744 */ get; } // 0x0072BC38-0x0072BC40 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527754-0x00527764 */ get; } // 0x0072BCA4-0x0072BCAC 

		// Constructors
		[DebuggerHidden] // 0x00527714-0x00527724
		public _PlayTween_d__8(int __1__state); // 0x0072BA80-0x0072BAAC

		// Methods
		[DebuggerHidden] // 0x00527724-0x00527734
		void IDisposable.Dispose(); // 0x0072BB04-0x0072BB08
		private bool MoveNext(); // 0x0072BB08-0x0072BC38
		[DebuggerHidden] // 0x00527744-0x00527754
		void IEnumerator.Reset(); // 0x0072BC40-0x0072BCA4
	}

	// Constructors
	public RankLoadingPopup(); // 0x0072BAFC-0x0072BB04

	// Methods
	public override void Init(); // 0x0072B798-0x0072B864
	public void OnPress(GameObject go, bool isPressed); // 0x0072B864-0x0072B8EC
	private void Update(); // 0x0072B8EC-0x0072B944
	public override void Show(); // 0x0072B944-0x0072B984
	private void RefreshLable(); // 0x0072B984-0x0072BA0C
	[IteratorStateMachine] // 0x005224B8-0x0052251C
	private IEnumerator PlayTween(); // 0x0072BA0C-0x0072BA80
	public override void Hide(); // 0x0072BAAC-0x0072BAFC
}

public class RankRewardCell : RankCell // TypeDefIndex: 4098
{
	// Fields
	[SerializeField] // 0x0051B148-0x0051B158
	private UILabel rankID; // 0x18
	[SerializeField] // 0x0051B158-0x0051B168
	private UILabel keyAmount; // 0x20
	[SerializeField] // 0x0051B168-0x0051B178
	private UILabel coinAmount; // 0x28
	[SerializeField] // 0x0051B178-0x0051B188
	private UISprite keySpr; // 0x30

	// Constructors
	public RankRewardCell(); // 0x0072BF1C-0x0072BF24

	// Methods
	public override void RefreshUI(object obj); // 0x0072BCAC-0x0072BD44
	private void Refresh(int min, int max, int coin, int key); // 0x0072BD44-0x0072BF1C
}

public class RankScreen : UIBaseScreen // TypeDefIndex: 4099
{
	// Fields
	[SerializeField] // 0x0051B188-0x0051B198
	private UILabel titleLbl; // 0x98
	[SerializeField] // 0x0051B198-0x0051B1A8
	private UILabel globalLbl; // 0xA0
	[SerializeField] // 0x0051B1A8-0x0051B1B8
	private UILabel vipLbl; // 0xA8
	[SerializeField] // 0x0051B1B8-0x0051B1C8
	private UILabel friendLbl; // 0xB0
	[SerializeField] // 0x0051B1C8-0x0051B1D8
	private UILabel changeNameLbl; // 0xB8
	[SerializeField] // 0x0051B1D8-0x0051B1E8
	private UILabel submitLbl; // 0xC0
	[SerializeField] // 0x0051B1E8-0x0051B1F8
	private UILabel connectLbl; // 0xC8
	[SerializeField] // 0x0051B1F8-0x0051B208
	private MyRankCell myRankCell; // 0xD0
	[SerializeField] // 0x0051B208-0x0051B218
	private TimeLeft timeLeft; // 0xD8
	[SerializeField] // 0x0051B218-0x0051B228
	private GlobalScrollView highScore; // 0xE0
	[SerializeField] // 0x0051B228-0x0051B238
	private VipScrollView vip; // 0xE8
	[SerializeField] // 0x0051B238-0x0051B248
	private FriendsScrollView friends; // 0xF0
	[SerializeField] // 0x0051B248-0x0051B258
	private RankToggles toggles; // 0xF8
	[SerializeField] // 0x0051B258-0x0051B268
	private BoxCollider connectCollider; // 0x100
	[SerializeField] // 0x0051B268-0x0051B278
	private GameObject facebookGo; // 0x108
	[SerializeField] // 0x0051B278-0x0051B288
	private GameObject vipGo; // 0x110
	[SerializeField] // 0x0051B288-0x0051B298
	private UISprite buttomBG; // 0x118
	[SerializeField] // 0x0051B298-0x0051B2A8
	private GameObject myCellGo; // 0x120
	private RankPopupType currentType; // 0x128

	// Nested types
	public enum RankPopupType // TypeDefIndex: 4100
	{
		HighScore = 0,
		VIP = 1,
		Friends = 2,
		None = 3
	}

	// Constructors
	public RankScreen(); // 0x0072C5F4-0x0072C5FC

	// Methods
	private void RefreshLabel(); // 0x0072BF24-0x0072C060
	public override void Show(); // 0x0072C060-0x0072C19C
	public override void Hide(); // 0x0072C444-0x0072C52C
	private void RefreshFacebookAndVIP(); // 0x0072C19C-0x0072C1BC
	public void ChangeState(RankPopupType type); // 0x0072C200-0x0072C444
	public void ToggleGlobalScrollView(); // 0x0072C52C-0x0072C560
	public void ToggleVIPScrollView(); // 0x0072C560-0x0072C594
	public void ToggleFriendScrollView(); // 0x0072C5EC-0x0072C5F0
	public void OnConnectClick(); // 0x0072C5F0-0x0072C5F4
}

public enum PullListResult // TypeDefIndex: 4101
{
	NetError = 0,
	NoData = 1,
	DataError = 2,
	ServerError = 3,
	Success = 4,
	TimeOut = 5,
	None = 6
}

public class RankToggles : MonoBehaviour // TypeDefIndex: 4102
{
	// Fields
	[SerializeField] // 0x0051B2A8-0x0051B2B8
	private TopRunToggle global; // 0x18
	[SerializeField] // 0x0051B2B8-0x0051B2C8
	private TopRunToggle vip; // 0x20
	[SerializeField] // 0x0051B2C8-0x0051B2D8
	private TopRunToggle friend; // 0x28

	// Constructors
	public RankToggles(); // 0x0072C684-0x0072C68C

	// Methods
	private void Awake(); // 0x0072C5FC-0x0072C62C
	public void Global(); // 0x0072C1BC-0x0072C200
	public void Vip(); // 0x0072C594-0x0072C5EC
	public void Friend(); // 0x0072C62C-0x0072C684
}

public class ScrollViewRecyclel : UIScrollView // TypeDefIndex: 4103
{
	// Fields
	protected int totalItemCount; // 0x100
	public float[] _itemSizes; // 0x108
	protected List<int> _containers; // 0x110
	protected Dictionary<int, List<RankCell>> _items; // 0x118
	protected Vector3 _originPos; // 0x120
	protected int _lastIndex; // 0x12C
	public OnRefreshUIDelegate OnRefreshUI; // 0x130
	private bool firstGet; // 0x138

	// Properties
	public override Bounds bounds { get; } // 0x006C43C4-0x006C45E0 

	// Nested types
	public delegate void OnRefreshUIDelegate(int type, int number, RankCell item); // TypeDefIndex: 4104; 0x006C40D0-0x006C434C

	// Constructors
	public ScrollViewRecyclel(); // 0x006C45E0-0x006C4658

	// Methods
	protected override void Start(); // 0x006C3674-0x006C36A0
	public void AddItem(int type); // 0x006C36A0-0x006C3744
	public void AddItem(int type, RankCell item); // 0x006C3744-0x006C3804
	public void InitOriginPos(Vector3 pos); // 0x006C3958-0x006C3968
	public void InitCell(int type, RankCell cell, int i); // 0x006C3804-0x006C3958
	protected virtual void PlaceItem(RankCell item, int index); // 0x006C3968-0x006C3AE8
	public override void MoveRelative(Vector3 relative); // 0x006C3AE8-0x006C40C0
	private void RefreshUI(int type, int number, RankCell item); // 0x006C40C0-0x006C40D0
	public void Reset(); // 0x006C434C-0x006C43C4
}

public class TimeLeft : MonoBehaviour // TypeDefIndex: 4105
{
	// Fields
	[SerializeField] // 0x0051B2D8-0x0051B2E8
	private UILabel frontLbl; // 0x18
	[SerializeField] // 0x0051B2E8-0x0051B2F8
	private UILabel timeLbl; // 0x20
	[SerializeField] // 0x0051B2F8-0x0051B308
	private GameObject timeLeft; // 0x28
	private float time; // 0x30

	// Constructors
	public TimeLeft(); // 0x00FD1134-0x00FD113C

	// Methods
	private void OnEnable(); // 0x00FD0FC0-0x00FD1088
	private void OnDisable(); // 0x00FD1088-0x00FD1090
	private void Update(); // 0x00FD1090-0x00FD1134
}

[Serializable]
public class TopRun // TypeDefIndex: 4106
{
	// Fields
	public string userId; // 0x10
	public int highestScore; // 0x18
	public int rank; // 0x1C

	// Constructors
	public TopRun(); // 0x00FD2D74-0x00FD2DA0
}

[Serializable]
public class TopRunInfo // TypeDefIndex: 4107
{
	// Fields
	public string playerName; // 0x10
	public string facebookName; // 0x18
	public string countryCode; // 0x20
	public string isVip; // 0x28
	public string playerLevel; // 0x30
	public string pictureUrl; // 0x38

	// Constructors
	public TopRunInfo(); // 0x00FD3604-0x00FD3694
}

public class TopRunCell : RankCell // TypeDefIndex: 4108
{
	// Fields
	[SerializeField] // 0x0051B308-0x0051B318
	private UISprite rankSpr; // 0x18
	[SerializeField] // 0x0051B318-0x0051B328
	private UILabel rankLbl; // 0x20
	[SerializeField] // 0x0051B328-0x0051B338
	private UISprite fillTopSpr; // 0x28
	[SerializeField] // 0x0051B338-0x0051B348
	private UISprite fillSpr; // 0x30
	[SerializeField] // 0x0051B348-0x0051B358
	private UISprite avatarTopSpr; // 0x38
	[SerializeField] // 0x0051B358-0x0051B368
	private UISprite avatarSpr; // 0x40
	[SerializeField] // 0x0051B368-0x0051B378
	private UITexture headTopTxt; // 0x48
	[SerializeField] // 0x0051B378-0x0051B388
	private UITexture headTxt; // 0x50
	[SerializeField] // 0x0051B388-0x0051B398
	private UILabel playerNameToplbl; // 0x58
	[SerializeField] // 0x0051B398-0x0051B3A8
	private UILabel playerNamelbl; // 0x60
	[SerializeField] // 0x0051B3A8-0x0051B3B8
	private UILabel scroeTopLbl; // 0x68
	[SerializeField] // 0x0051B3B8-0x0051B3C8
	private UILabel scroeLbl; // 0x70
	[SerializeField] // 0x0051B3C8-0x0051B3D8
	private UILabel playerLevelLbl; // 0x78
	[SerializeField] // 0x0051B3D8-0x0051B3E8
	private UISprite countrySpr; // 0x80
	[SerializeField] // 0x0051B3E8-0x0051B3F8
	private UISprite vipTip; // 0x88
	private TopRun _data; // 0x90
	private TopRunInfo _info; // 0x98
	private const string goldSpriteName = "Rank_icon_place_first"; // Metadata: 0x001F63D4
	private const string sliverSpriteName = "Rank_icon_place_second"; // Metadata: 0x001F63ED
	private const string bronzeSpriteName = "Rank_icon_place_third"; // Metadata: 0x001F6407

	// Constructors
	public TopRunCell(); // 0x00FD35FC-0x00FD3604

	// Methods
	private void Awake(); // 0x00FD2DA0-0x00FD2E38
	public override void RefreshUI(object obj); // 0x00FD2E38-0x00FD319C
	public void RefreshPlayerName(); // 0x00FD319C-0x00FD3254
	public void RefreshVIP(); // 0x00FD3254-0x00FD3318
	public void RefreshCoutryCode(); // 0x00FD3318-0x00FD33D8
	public void RefreshImage(); // 0x00FD33D8-0x00FD3520
	public void RefreshPlayrLevel(); // 0x00FD3520-0x00FD35FC
}

public class TopRunTipCell : RankCell // TypeDefIndex: 4109
{
	// Fields
	[SerializeField] // 0x0051B3F8-0x0051B408
	private UILabel title; // 0x18
	[SerializeField] // 0x0051B408-0x0051B418
	private Color goldColor; // 0x20
	[SerializeField] // 0x0051B418-0x0051B428
	private Color silveryColor; // 0x30
	[SerializeField] // 0x0051B428-0x0051B438
	private Color copperColor; // 0x40
	[SerializeField] // 0x0051B438-0x0051B448
	private UISprite[] cupIcons; // 0x50
	private int _rankId; // 0x58

	// Constructors
	public TopRunTipCell(); // 0x00FD38F8-0x00FD3958

	// Methods
	public override void RefreshUI(object obj); // 0x00FD3694-0x00FD38F8
}

public class TopRunToggle : MonoBehaviour // TypeDefIndex: 4110
{
	// Fields
	[SerializeField] // 0x0051B448-0x0051B458
	private UISprite on_bg; // 0x18
	[SerializeField] // 0x0051B458-0x0051B468
	private UISprite on_icon; // 0x20
	[SerializeField] // 0x0051B468-0x0051B478
	private UILabel titleLbl; // 0x28
	private Color titleLblColor; // 0x30

	// Constructors
	public TopRunToggle(); // 0x00FD3A2C-0x00FD3A34

	// Methods
	private void Awake(); // 0x00FD3958-0x00FD398C
	public void Toggle(bool value); // 0x00FD398C-0x00FD3A2C
}

public class VideoLoadingPopup : UIBaseScreen // TypeDefIndex: 4111
{
	// Fields
	public static int adType; // 0x00
	public static int rewardId; // 0x04
	public static string ad_position; // 0x08
	public static string ad_reason; // 0x10
	[SerializeField] // 0x0051B478-0x0051B488
	private UILabel content; // 0x98
	[SerializeField] // 0x0051B488-0x0051B498
	private int min_delay; // 0xA0
	[SerializeField] // 0x0051B498-0x0051B4A8
	private int max_delay; // 0xA4
	private int delay; // 0xA8
	[SerializeField] // 0x0051B4A8-0x0051B4B8
	private int max; // 0xAC
	private int frame; // 0xB0

	// Constructors
	public VideoLoadingPopup(); // 0x00A8D4CC-0x00A8D4E8

	// Methods
	public override void Show(); // 0x00A8D210-0x00A8D2D0
	private void Update(); // 0x00A8D2D0-0x00A8D4CC
}

public class VipScrollView : MonoBehaviour // TypeDefIndex: 4112
{
	// Fields
	[SerializeField] // 0x0051B4B8-0x0051B4C8
	private GameObject rankcellPrefab; // 0x18
	[SerializeField] // 0x0051B4C8-0x0051B4D8
	private RankCellScrollView scrollView; // 0x20
	[SerializeField] // 0x0051B4D8-0x0051B4E8
	private Transform table; // 0x28
	[SerializeField] // 0x0051B4E8-0x0051B4F8
	private GameObject _separateGo; // 0x30
	private TopRunCell[] _cacheCells; // 0x38
	private PullListResult result; // 0x40
	private float pullListTime; // 0x44
	private List<TopRun> topRunList; // 0x48
	private bool isShow; // 0x50
	private int remainCount; // 0x54
	private float time; // 0x58

	// Nested types
	[CompilerGenerated] // 0x00514910-0x00514920
	private sealed class _DownloadImage_d__21 : IEnumerator<object> // TypeDefIndex: 4113
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public List<string> urls; // 0x20
		public VipScrollView __4__this; // 0x28
		private int _count_5__2; // 0x30
		private int _i_5__3; // 0x34

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527784-0x00527794 */ get; } // 0x00A91908-0x00A91910 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005277A4-0x005277B4 */ get; } // 0x00A91974-0x00A9197C 

		// Constructors
		[DebuggerHidden] // 0x00527764-0x00527774
		public _DownloadImage_d__21(int __1__state); // 0x00A90CB4-0x00A90CE0

		// Methods
		[DebuggerHidden] // 0x00527774-0x00527784
		void IDisposable.Dispose(); // 0x00A91758-0x00A9175C
		private bool MoveNext(); // 0x00A9175C-0x00A91908
		[DebuggerHidden] // 0x00527794-0x005277A4
		void IEnumerator.Reset(); // 0x00A91910-0x00A91974
	}

	// Constructors
	public VipScrollView(); // 0x00A916E8-0x00A91758

	// Methods
	private void Awake(); // 0x00A8D4E8-0x00A8D540
	public void Hide(); // 0x00A8D540-0x00A8D548
	public void Show(); // 0x00A8D548-0x00A8D724
	public void PullVipsListListener(int status, object obj); // 0x00A8DBAC-0x00A8E930
	private void GetInfoCallback(int status, object obj); // 0x00A8F0C8-0x00A8FA18
	private void GetPlayerLevelDataCall(int status, object obj); // 0x00A8FA18-0x00A8FD48
	private void GetSubscriptionDataCallback(int status, object obj); // 0x00A8FD48-0x00A90070
	private void GetCountryCodeDataCallback(int status, object obj); // 0x00A90070-0x00A90470
	private void GetPlayerNameDataCallback(int status, object obj); // 0x00A90470-0x00A90830
	private void GePictureUrlDataCallback(int status, object obj); // 0x00A90830-0x00A90CB4
	[IteratorStateMachine] // 0x0052251C-0x00522580
	private IEnumerator DownloadImage(List<string> urls); // 0x00A8E930-0x00A8E9B0
	private void OnComplete(bool result, ImageDownloader loader); // 0x00A90CE0-0x00A90E10
	private void Update(); // 0x00A90E10-0x00A90F2C
	public void FillTable(); // 0x00A8D7F8-0x00A8DBAC
	private TopRunCell InstantCell<T>(GameObject prefab, GameObject parent)
		where T : TopRunCell;
	private void CacheLocalVIPData(); // 0x00A8D724-0x00A8D7F8
	private void OnComplete(string data); // 0x00A90F2C-0x00A9115C
	private void RefreshTopRunList(); // 0x00A8E9B0-0x00A8F0C8
	private bool TopRunListContainsMe(string userid); // 0x00A9115C-0x00A91218
	private void GetCurrentMyRankNO100(); // 0x00A91218-0x00A91304
	private void PullGetMyRankNO100(int status, object obj); // 0x00A91304-0x00A916E8
}

public class TrialHelper : MonoBehaviour // TypeDefIndex: 4114
{
	// Fields
	[SerializeField] // 0x0051B4F8-0x0051B508
	private UISprite tryIcon; // 0x18
	[SerializeField] // 0x0051B508-0x0051B518
	private UILabel lbl; // 0x20
	private bool isActive; // 0x28

	// Constructors
	public TrialHelper(); // 0x007BC028-0x007BC030

	// Methods
	private void OnEnable(); // 0x007BBA3C-0x007BBCC8
	private void Update(); // 0x007BBE60-0x007BC028
}

public class UIAnimatorController : MonoBehaviour // TypeDefIndex: 4115
{
	// Fields
	[SerializeField] // 0x0051B518-0x0051B528
	private Animator self; // 0x18
	[SerializeField] // 0x0051B528-0x0051B538
	private List<Animator> animators; // 0x20
	[SerializeField] // 0x0051B538-0x0051B548
	private bool limit; // 0x28
	[SerializeField] // 0x0051B548-0x0051B558
	private int limitCount; // 0x2C
	[SerializeField] // 0x0051B558-0x0051B568
	private bool immediately; // 0x30
	[Range] // 0x0051B568-0x0051B5A8
	[SerializeField] // 0x0051B568-0x0051B5A8
	private float interval; // 0x34

	// Nested types
	[CompilerGenerated] // 0x00514920-0x00514930
	private sealed class __c__DisplayClass9_0 // TypeDefIndex: 4116
	{
		// Fields
		public Action EnterOnEnter; // 0x10
		public UIAnimatorController __4__this; // 0x18

		// Constructors
		public __c__DisplayClass9_0(); // 0x007EAE4C-0x007EAE54

		// Methods
		internal void _OnEnter_b__0(); // 0x007EB1EC-0x007EB224
	}

	[CompilerGenerated] // 0x00514930-0x00514940
	private sealed class _PlayAnimatorsInterval_C_d__13 : IEnumerator<object> // TypeDefIndex: 4117
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public UIAnimatorController __4__this; // 0x20
		private int _index_5__2; // 0x28
		private int _max_5__3; // 0x2C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005277D4-0x005277E4 */ get; } // 0x007EB454-0x007EB45C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005277F4-0x00527804 */ get; } // 0x007EB4C0-0x007EB4C8 

		// Constructors
		[DebuggerHidden] // 0x005277B4-0x005277C4
		public _PlayAnimatorsInterval_C_d__13(int __1__state); // 0x007EB09C-0x007EB0C8

		// Methods
		[DebuggerHidden] // 0x005277C4-0x005277D4
		void IDisposable.Dispose(); // 0x007EB224-0x007EB228
		private bool MoveNext(); // 0x007EB228-0x007EB454
		[DebuggerHidden] // 0x005277E4-0x005277F4
		void IEnumerator.Reset(); // 0x007EB45C-0x007EB4C0
	}

	// Constructors
	public UIAnimatorController(); // 0x007EB16C-0x007EB1EC

	// Methods
	public void AddAnimator(Animator anim); // 0x007EA984-0x007EAA50
	public void OrderAnimators(int[] orders); // 0x007EAA50-0x007EABC8
	public void WaitForCancel(); // 0x007EABC8-0x007EACFC
	public void OnEnter(Action EnterOnEnter, Action EnterOnExit, Action ExitOnExit); // 0x007EACFC-0x007EAE4C
	private void PlayAnimators(); // 0x007EAE54-0x007EAEE0
	private void PlayAnimatorsImmediately(); // 0x007EAEE0-0x007EAFFC
	private void PlayAnimatorsInterval(); // 0x007EAFFC-0x007EB028
	[IteratorStateMachine] // 0x00522580-0x005225E4
	private IEnumerator PlayAnimatorsInterval_C(); // 0x007EB028-0x007EB09C
	public bool OnExit(); // 0x007EB0C8-0x007EB16C
}

public class UIAnimatorEnterBehaviour : StateMachineBehaviour // TypeDefIndex: 4118
{
	// Fields
	public Action onStateUpdate; // 0x18
	public float normalizedTime; // 0x20
	private bool update; // 0x24

	// Constructors
	public UIAnimatorEnterBehaviour(); // 0x007EB550-0x007EB564

	// Methods
	public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex); // 0x007EB4C8-0x007EB550
}

public class UIAnimatorExitBehaviour : StateMachineBehaviour // TypeDefIndex: 4119
{
	// Fields
	public Action onStateUpdate; // 0x18
	public Action onStateExit; // 0x20
	public float normalizedTime; // 0x28
	private bool update; // 0x2C

	// Constructors
	public UIAnimatorExitBehaviour(); // 0x007EB644-0x007EB64C

	// Methods
	public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex); // 0x007EB564-0x007EB5EC
	public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex); // 0x007EB5EC-0x007EB644
}

public class UIButtonSendCount : MonoBehaviour // TypeDefIndex: 4120
{
	// Fields
	public string[] IdString; // 0x18
	public string toPanelString; // 0x20

	// Constructors
	public UIButtonSendCount(); // 0x007F8134-0x007F8194

	// Methods
	public void OnClick(); // 0x007F7FA8-0x007F8134
}

public class UICelebrateController : MonoBehaviour // TypeDefIndex: 4121
{
	// Fields
	public static UICelebrateController Instance; // 0x00

	// Constructors
	public UICelebrateController(); // 0x00822618-0x00822620

	// Methods
	private void Awake(); // 0x00822574-0x00822610
	private void Start(); // 0x00822610-0x00822614
	private void Update(); // 0x00822614-0x00822618
}

public class UIDrag : MonoBehaviour // TypeDefIndex: 4122
{
	// Fields
	[SerializeField] // 0x0051B5A8-0x0051B5B8
	private float sensitivity; // 0x18
	public OnSwipeDelegate onHandleDir; // 0x20
	private Vector2 mMovemont; // 0x28
	private bool mDragStart; // 0x30

	// Nested types
	public delegate void OnSwipeDelegate(SwipeDir dir); // TypeDefIndex: 4123; 0x0082A1AC-0x0082A3F0

	// Constructors
	public UIDrag(); // 0x0082A3F8-0x0082A400

	// Methods
	private void OnDragStart(); // 0x00829EC4-0x00829F38
	private void OnDrag(Vector2 delta); // 0x00829F38-0x0082A000
	private void OnDragEnd(); // 0x0082A3F0-0x0082A3F8
	private SwipeDir AnalysisDirction(Vector2 movement); // 0x0082A000-0x0082A1AC
}

public class UIFooterHandler : MonoBehaviour // TypeDefIndex: 4124
{
	// Fields
	public FootItem helm; // 0x18
	public FootItem character; // 0x20
	public FootItem upgrade; // 0x28
	public FootItem store; // 0x30
	[SerializeField] // 0x0051B5B8-0x0051B5C8
	private UISprite upgrade_unfill; // 0x38
	public GameObject[] unicon; // 0x40
	public GameObject[] unfillLab; // 0x48
	[SerializeField] // 0x0051B5C8-0x0051B5D8
	private UISprite[] tips; // 0x50
	[SerializeField] // 0x0051B5D8-0x0051B5E8
	private GameObject UpgradeTutorial; // 0x58

	// Constructors
	public UIFooterHandler(); // 0x0083A694-0x0083A71C

	// Methods
	private void FreshUpgradeTutorial(); // 0x00839580-0x00839644
	private void OnEnable(); // 0x00839644-0x00839E50
	private void OnDisable(); // 0x00839E50-0x0083A0CC
	public void InitButtonType(); // 0x0083A0CC-0x0083A138
	private void UpdateHelmetTip(Helmets.HelmType obj); // 0x0083A138-0x0083A1F0
	private void UpdateUpgradeTip(PropType propType); // 0x0083A1F0-0x0083A400
	private void UpdateCharacterTip(Characters.CharacterType characterType); // 0x0083A400-0x0083A4B4
	private void UpdateCharacterTip(); // 0x0083A4B4-0x0083A5A8
	public void OnButtonClick(int selected); // 0x0083A5A8-0x0083A694
}

[Serializable]
public class FootItem // TypeDefIndex: 4125
{
	// Fields
	public UISprite fill; // 0x10
	public UILabel arrow; // 0x18
	public UISprite fillIcon; // 0x20
	private bool isFilled; // 0x28

	// Constructors
	public FootItem(); // 0x0068B640-0x0068B650

	// Methods
	public void SetFill(bool isfill); // 0x0068B5BC-0x0068B640
}

public class UIPosScalesAndNGUIAtlas : MonoBehaviour // TypeDefIndex: 4126
{
	// Fields
	private static UIPosScalesAndNGUIAtlas _instance; // 0x00
	public Vector3 characterScreenSelectedButtonPos; // 0x18
	public Vector3 characterScreenCharacterModelLocalPos; // 0x24
	public Vector3 characterScreenCharacterModelLocalScl; // 0x30
	public Vector3 characterScreenCharacterModelLocalRot; // 0x3C
	public Vector3 helmetScreenCharacterModelLocalPos; // 0x48
	public Vector3 helmetScreenCharacterModelLocalScl; // 0x54
	public Vector3 helmetScreenCharacterModelLocalRot; // 0x60
	public Vector3 celebrationCharacterUnlockCharacterModelLocalPos; // 0x6C
	public Vector3 celebrationCharacterUnlockCharacterModelLocalScl; // 0x78
	public Vector3 celebrationCharacterUnlockCharacterModelLocalRot; // 0x84
	public Vector3 celebrationHelmUnlockCharacterModelLocalPos; // 0x90
	public Vector3 celebrationHelmUnlockCharacterModelLocalScl; // 0x9C
	public Vector3 celebrationHelmUnlockCharacterModelLocalRot; // 0xA8
	public Vector3 celebrationHighScoreCharacterModelLocalPos; // 0xB4
	public Vector3 celebrationHighScoreCharacterModelLocalScl; // 0xC0
	public Vector3 celebrationHighScoreCharacterModelLocalRot; // 0xCC
	public Vector3 tryCharacterModelLocalPos; // 0xD8
	public Vector3 tryCharacterModelLocalScl; // 0xE4
	public Vector3 tryCharacterModelLocalRot; // 0xF0
	public Vector3 dailyCharacterModelLocalPos; // 0xFC
	public Vector3 dailyCharacterModelLocalScl; // 0x108
	public Vector3 dailyCharacterModelLocalRot; // 0x114
	public Vector3 mainScreenPlayFingerOffset; // 0x120
	public float mainScreenPlayFingerRotZ; // 0x12C
	public Vector3 mainScreenCharFingerOffset; // 0x130
	public float mainScreenCharFingerRotZ; // 0x13C
	public Vector3 mainScreenChestFingerOffset; // 0x140
	public float mainScreenChestFingerRotZ; // 0x14C
	public Vector3 mainScreenTaskFingerOffset; // 0x150
	public float mainScreenTaskFingerRotZ; // 0x15C
	public Vector3 characterScreenShifterFingerOffset; // 0x160
	public float characterScreenShifterFingerRotZ; // 0x16C
	public Vector3 characterScreenSelectFingerOffset; // 0x170
	public float characterScreenSelectFingerRotZ; // 0x17C
	public Vector3 shopScreenFreeFingerOffset; // 0x180
	public float shopScreenFreeFingerRotZ; // 0x18C
	public Vector3 chestPopupButtoneFingerOffset; // 0x190
	public float chestPopupButtoneFingerRotZ; // 0x19C
	public Vector3 taskPopupButtoneFingerOffset; // 0x1A0
	public float taskPopupButtoneFingerRotZ; // 0x1AC
	public Color shineColor_gold; // 0x1B0
	public Color glowColor_gold; // 0x1C0
	public Color xxStartUpColor_gold; // 0x1D0
	public Color xxStartDownColor_gold; // 0x1E0
	public Color shineColor_sliver; // 0x1F0
	public Color glowColor_sliver; // 0x200
	public Color xxStartUpColor_sliver; // 0x210
	public Color xxStartDownColor_sliver; // 0x220
	public Color shineColor_normal; // 0x230
	public Color glowColor_normal; // 0x240
	public Color xxStartUpColor_normal; // 0x250
	public Color xxStartDownColor_normal; // 0x260
	public Color shineColor_free; // 0x270
	public Color glowColor_free; // 0x280
	public Color xxStartUpColor_free; // 0x290
	public Color xxStartDownColor_free; // 0x2A0
	public Color shineColor_view; // 0x2B0
	public Color glowColor_view; // 0x2C0
	public Color xxStartUpColor_view; // 0x2D0
	public Color xxStartDownColor_view; // 0x2E0
	public Color shineColor_game; // 0x2F0
	public Color glowColor_game; // 0x300
	public Color xxStartUpColor_game; // 0x310
	public Color xxStartDownColor_game; // 0x320
	public Vector3 ingameUIHeadStartFingerOffset; // 0x330
	public float ingameUIHeadStartFingerRotZ; // 0x33C
	public Vector3 ingameUIScoreboostFingerOffset; // 0x340
	public float ingameUIScoreboostFingerRotZ; // 0x34C
	public string coin; // 0x350
	public string key; // 0x358
	public string headstart2000; // 0x360
	public string scorebooster; // 0x368
	public string fillSpriteNameFormat; // 0x370
	public string slotFormat; // 0x378
	public Color dayLblActive; // 0x380
	public Color rewardLblActive; // 0x390
	public Color dayLblInactive; // 0x3A0
	public Color rewardLblInactive; // 0x3B0
	public string achievementCellFillSpriteName; // 0x3C0
	public int freeViewCoinReward; // 0x3C8
	public int freeViewGemReward; // 0x3CC

	// Properties
	public static UIPosScalesAndNGUIAtlas Instance { get; } // 0x0075E608-0x0075E6D4 

	// Constructors
	public UIPosScalesAndNGUIAtlas(); // 0x0075EAB4-0x0075F260

	// Methods
	public string GetSprName(RewardType targettype); // 0x0075E6D4-0x0075E768
	public string GetSprNameSp(RewardType targettype); // 0x0075E768-0x0075E804
	public string GetUnlockName(Characters.UnlockType targettype); // 0x0075E804-0x0075E888
	public string GetSprNameBySkill(); // 0x0075E888-0x0075E954
	public string GetSprNameBySkillbytype(DoubleSkillType doubleskilltype); // 0x0075E954-0x0075EA18
	public string GetSprNameInWeekly(RewardType targettype); // 0x0075EA18-0x0075EAB4
}

public class UIRewardFlyingEffects : MonoBehaviour // TypeDefIndex: 4127
{
	// Fields
	[SerializeField] // 0x0051B5E8-0x0051B5F8
	private FlyEffect scorebooster; // 0x18
	[SerializeField] // 0x0051B5F8-0x0051B608
	private FlyEffect turtleShell; // 0x20
	[SerializeField] // 0x0051B608-0x0051B618
	private FlyEffect coin; // 0x28
	[SerializeField] // 0x0051B618-0x0051B628
	private FlyEffect key; // 0x30
	[SerializeField] // 0x0051B628-0x0051B638
	private FlyEffect headSprint; // 0x38
	[SerializeField] // 0x0051B638-0x0051B648
	private FlyEffect twoPole; // 0x40
	private static UIRewardFlyingEffects _instance; // 0x00

	// Properties
	public static UIRewardFlyingEffects Instance { get; } // 0x0076512C-0x007651F8 

	// Constructors
	public UIRewardFlyingEffects(); // 0x0076533C-0x00765344

	// Methods
	private void Awake(); // 0x007651F8-0x00765294
	public void ScoreBooster(Vector2 start, Vector2 end, float duration, Action action = null); // 0x00765294-0x007652B0
	public void TurtleShell(Vector2 start, Vector2 end, float duration, Action action = null); // 0x007652B0-0x007652CC
	public void Coin(Vector2 start, Vector2 end, float duration, Action action = null); // 0x007652CC-0x007652E8
	public void Key(Vector2 start, Vector2 end, float duration, Action action = null); // 0x007652E8-0x00765304
	public void HeadSprint(Vector2 start, Vector2 end, float duration, Action action = null); // 0x00765304-0x00765320
	public void TwoPole(Vector2 start, Vector2 end, float duration, Action action = null); // 0x00765320-0x0076533C
}

public class UISliderInController : MonoBehaviour // TypeDefIndex: 4128
{
	// Fields
	public static UISliderInController Instance; // 0x00
	[SerializeField] // 0x0051B648-0x0051B658
	private UIMessageHelper messageHelper; // 0x18
	[SerializeField] // 0x0051B658-0x0051B668
	private UISlideInTaskHelper taskHelperSlide; // 0x20
	public UISlideInTaskSetHelper taskSetHelperSlide; // 0x28
	[SerializeField] // 0x0051B668-0x0051B678
	private UISlideInUnlock unlockSlide; // 0x30
	[SerializeField] // 0x0051B678-0x0051B688
	private UISlideInErrorMessage errorMessageSlide; // 0x38
	[SerializeField] // 0x0051B688-0x0051B698
	private UISlideInTopRunTip topRunTipSlide; // 0x40
	private bool slideInActive; // 0x48
	private bool messageIsShowing; // 0x49
	private bool stopping; // 0x4A
	private List<SlideIn> numOfTaskSetSlide; // 0x50
	private List<SlideIn> queueSliderIn; // 0x58
	private Queue<string> queueMessage; // 0x60
	private bool hasPreloadAllSlide; // 0x68

	// Properties
	public bool Stop { get; set; } // 0x00806E18-0x00806E20 0x00806E20-0x00806E38

	// Nested types
	public class SlideIn // TypeDefIndex: 4129
	{
		// Fields
		private string _payload; // 0x10
		private int _payloadInt; // 0x18
		private SlideInType _type; // 0x1C

		// Properties
		public string payload { get; } // 0x00806FF8-0x00807000 
		public int payloadInt { get; } // 0x00807000-0x00807008 
		public SlideInType type { get; } // 0x00807008-0x00807010 

		// Constructors
		public SlideIn(SlideInType type); // 0x00805F18-0x00805F8C
		public SlideIn(SlideInType type, int PayLoadInt); // 0x00806F80-0x00806FF8
		public SlideIn(SlideInType type, string payload); // 0x00805D1C-0x00805D58
	}

	public enum SlideInType // TypeDefIndex: 4130
	{
		TopRunTip = 0,
		Task = 1,
		TaskSet = 2,
		Achievement = 3,
		Unlock = 4,
		ErrorMessage = 5
	}

	[Serializable]
	[CompilerGenerated] // 0x00514940-0x00514950
	private sealed class __c // TypeDefIndex: 4131
	{
		// Fields
		public static readonly __c __9; // 0x00
		public static Predicate<SlideIn> __9__35_0; // 0x08

		// Constructors
		static __c(); // 0x00806EF0-0x00806F54
		public __c(); // 0x00806F54-0x00806F5C

		// Methods
		internal bool _NumberOfTaskSetSlideIns_b__35_0(SlideIn c); // 0x00806F5C-0x00806F80
	}

	// Constructors
	public UISliderInController(); // 0x00806E38-0x00806EF0

	// Methods
	private void Awake(); // 0x008056A8-0x00805744
	private void Start(); // 0x00805744-0x00805A74
	private void OnChangedScreen(string screenName); // 0x00805B4C-0x00805CA0
	private void PreloadAllSlide(); // 0x00805A74-0x00805B4C
	private void OnTaskCompleted(string message); // 0x00805CA0-0x00805D1C
	public void OnAchievementCompleted(string message); // 0x00805E38-0x00805EB4
	private void OnTaskSetCompleted(); // 0x00805EB4-0x00805F18
	private void OnSymbolPickUp(Characters.CharacterType type); // 0x00805F8C-0x008060B8
	public void OnNetErrorPickedUp(); // 0x008060B8-0x008061D8
	public void OnNoFreeViewPickedUp(); // 0x008061D8-0x00806284
	public void OnDataErrorPickedUp(); // 0x00806284-0x008063A4
	public void OnGetSuccessPickedUp(); // 0x008063A4-0x008064C4
	public void OnTrialFinished(); // 0x008064C4-0x008065E4
	public void OnRunMeters(string val); // 0x008065E4-0x00806658
	public void OnRecodeStatusPickedUp(bool success); // 0x00806658-0x00806754
	public void OnNeedEnoughLevel(int level); // 0x00806754-0x00806834
	public void OnNeedEnoughSymbol(string symbol); // 0x00806834-0x008068F0
	public void OnErrorMessage(string description); // 0x008068F0-0x0080696C
	private void ShowSlideIn(); // 0x0080696C-0x00806AC0
	public void QueueSlideIn(SlideIn slideIn); // 0x00805D58-0x00805E38
	public void ReadyForNextSlide(); // 0x00806AC0-0x00806AD4
	public int NumberOfTaskSetSlideIns(); // 0x0080432C-0x00804440
	public void QueueMessage(string message); // 0x00806AD4-0x00806AD8
	private void _QueueMessage(string message); // 0x00806AD8-0x00806B70
	private void ShowNextMessage(); // 0x00806B70-0x00806C04
	public void ReadyForNextMessage(); // 0x00806C04-0x00806C0C
	private void OnDestroy(); // 0x00806C0C-0x00806E18
}

public class WatchFreeViewSystem // TypeDefIndex: 4132
{
	// Fields
	private static WatchFreeViewSystem _instance; // 0x00
	public Dictionary<string, TimeCoolDown> times; // 0x10

	// Properties
	public static WatchFreeViewSystem Instance { get; } // 0x00A951AC-0x00A95228 

	// Constructors
	private WatchFreeViewSystem(); // 0x00A95228-0x00A9529C

	// Methods
	public void AddNewTime(string key, int interval); // 0x00A9529C-0x00A95360
	public void RemoveTime(string key); // 0x00A95360-0x00A953F8
	public void SetFreeTime(string key); // 0x00A953F8-0x00A9549C
	public string GetCoolingDownTime(string key); // 0x00A9549C-0x00A95554
	public bool IsCoolingDownOver(string key); // 0x00A95554-0x00A955FC
}

public class TimeCoolDown // TypeDefIndex: 4133
{
	// Fields
	public string prefsKey; // 0x10
	public int interval; // 0x18
	private DateTime NextFreeDTime; // 0x20

	// Properties
	public string NextFreeTimeStr { get; set; } // 0x00FD0A7C-0x00FD0B14 0x00FD0B14-0x00FD0B20

	// Constructors
	public TimeCoolDown(string key, int interval); // 0x00FD0B20-0x00FD0BC4

	// Methods
	public bool IsCoolingDownOver(); // 0x00FD0BC4-0x00FD0C40
	public string GetCoolingDownTime2(); // 0x00FD0C40-0x00FD0D38
	public string GetCoolingDownTime3(); // 0x00FD0D38-0x00FD0E60
	public void SetFreeTime(); // 0x00FD0E60-0x00FD0F14
	public void ForceCoolingDownOver(); // 0x00FD0F14-0x00FD0FC0
}

public class Create : Point // TypeDefIndex: 4134
{
	// Fields
	[SerializeField] // 0x0051B698-0x0051B6A8
	private float minInterval; // 0x20
	[SerializeField] // 0x0051B6A8-0x0051B6B8
	private float maxInterval; // 0x24
	private float time; // 0x28

	// Constructors
	public Create(); // 0x00674D8C-0x00674D94

	// Methods
	public override void OnEnd(PointsManager manager); // 0x00674C08-0x00674C0C
	public override void OnImility(PointsManager manager); // 0x00674C0C-0x00674C10
	public override void OnInit(PointsManager manager); // 0x00674CEC-0x00674CF0
	public override void OnStart(PointsManager manager); // 0x00674CF0-0x00674D1C
	public override bool OnUpdate(PointsManager manager); // 0x00674D1C-0x00674D88
	public override void OnWholeEnd(PointsManager manager); // 0x00674D88-0x00674D8C
	private void Initialized(PointsManager manager); // 0x00674C10-0x00674CEC
}

public class CreateCharacter : Point // TypeDefIndex: 4135
{
	// Fields
	public string[] characterName; // 0x20
	public int[] characterThemeId; // 0x28

	// Constructors
	public CreateCharacter(); // 0x00675048-0x00675050

	// Methods
	public override void OnEnd(PointsManager manager); // 0x00674D94-0x00674D98
	public override void OnStart(PointsManager manager); // 0x00674D98-0x00674D9C
	public override bool OnUpdate(PointsManager manager); // 0x00675010-0x0067503C
	public override void OnImility(PointsManager manager); // 0x0067503C-0x00675040
	private void InitializeModel(PointsManager manager); // 0x00674D9C-0x00675010
	public override void OnInit(PointsManager manager); // 0x00675040-0x00675044
	public override void OnWholeEnd(PointsManager manager); // 0x00675044-0x00675048
}

public class Idel : Point // TypeDefIndex: 4136
{
	// Fields
	[SerializeField] // 0x0051B6B8-0x0051B6C8
	private AnimationClip idelClip; // 0x20
	[SerializeField] // 0x0051B6C8-0x0051B6D8
	private float minInterval; // 0x28
	[SerializeField] // 0x0051B6D8-0x0051B6E8
	private float maxInterval; // 0x2C
	[SerializeField] // 0x0051B6E8-0x0051B6F8
	private bool removeClipAtLast; // 0x30
	private float time; // 0x34

	// Constructors
	public Idel(); // 0x006DB53C-0x006DB544

	// Methods
	public override void OnInit(PointsManager manager); // 0x006DB298-0x006DB348
	public override void OnWholeEnd(PointsManager manager); // 0x006DB348-0x006DB400
	public override void OnEnd(PointsManager manager); // 0x006DB400-0x006DB404
	public override void OnStart(PointsManager manager); // 0x006DB404-0x006DB4D8
	public override bool OnUpdate(PointsManager manager); // 0x006DB4D8-0x006DB538
	public override void OnImility(PointsManager manager); // 0x006DB538-0x006DB53C
}

public class IdelLoopRandomAnimation : Point // TypeDefIndex: 4137
{
	// Fields
	[SerializeField] // 0x0051B6F8-0x0051B708
	private AnimationClip[] randomClip; // 0x20
	[SerializeField] // 0x0051B708-0x0051B718
	private bool removeClipAtLast; // 0x28
	private string[] randomClipName; // 0x30
	private string clip; // 0x38
	private float time; // 0x40

	// Constructors
	public IdelLoopRandomAnimation(); // 0x006DB8FC-0x006DB904

	// Methods
	private void Awake(); // 0x006DB544-0x006DB660
	public override void OnInit(PointsManager manager); // 0x006DB660-0x006DB6FC
	public override void OnWholeEnd(PointsManager manager); // 0x006DB6FC-0x006DB7A0
	public override void OnEnd(PointsManager manager); // 0x006DB7A0-0x006DB7A4
	public override void OnStart(PointsManager manager); // 0x006DB7A4-0x006DB7A8
	public override bool OnUpdate(PointsManager manager); // 0x006DB8A8-0x006DB8F8
	private void CrossFadeRandomClip(PointsManager manager); // 0x006DB7A8-0x006DB8A8
	public override void OnImility(PointsManager manager); // 0x006DB8F8-0x006DB8FC
}

public class Move : Point // TypeDefIndex: 4138
{
	// Fields
	[SerializeField] // 0x0051B718-0x0051B728
	protected AnimationClip man_runClip; // 0x20
	[SerializeField] // 0x0051B728-0x0051B738
	protected AnimationClip woman_runClip; // 0x28
	[SerializeField] // 0x0051B738-0x0051B748
	protected float animSpeed; // 0x30
	[SerializeField] // 0x0051B748-0x0051B758
	protected float moveSpeed; // 0x34
	[SerializeField] // 0x0051B758-0x0051B768
	private bool removeClipAtLast; // 0x38
	private bool onStop; // 0x39
	private AnimationClip runClip; // 0x40

	// Constructors
	public Move(); // 0x0088F1A0-0x0088F1A8

	// Methods
	public override void OnInit(PointsManager manager); // 0x0088EE48-0x0088EF0C
	public override void OnWholeEnd(PointsManager manager); // 0x0088EF0C-0x0088EFC4
	public override void OnStart(PointsManager manager); // 0x0088EFC4-0x0088F0B4
	public override void OnEnd(PointsManager manager); // 0x0088F0B4-0x0088F0D4
	public override bool OnUpdate(PointsManager manager); // 0x0088F0D4-0x0088F158
	public override void OnImility(PointsManager manager); // 0x0088F158-0x0088F1A0
}

public class MoveAnimation : Point // TypeDefIndex: 4139
{
	// Fields
	[SerializeField] // 0x0051B768-0x0051B778
	private AnimationClip clip; // 0x20
	[SerializeField] // 0x0051B778-0x0051B788
	private float speed; // 0x28
	[SerializeField] // 0x0051B788-0x0051B798
	private bool animationDrive; // 0x2C
	[SerializeField] // 0x0051B798-0x0051B7A8
	private bool front; // 0x2D
	[SerializeField] // 0x0051B7A8-0x0051B7B8
	private float frame; // 0x30
	[SerializeField] // 0x0051B7B8-0x0051B7C8
	private bool removeClipAtLast; // 0x34
	[SerializeField] // 0x0051B7C8-0x0051B7D8
	private bool rotate; // 0x35
	private float moveSpeed; // 0x38
	private float moveTime; // 0x3C
	private float time; // 0x40

	// Constructors
	public MoveAnimation(); // 0x0088F4A0-0x0088F4A8

	// Methods
	public override void OnInit(PointsManager manager); // 0x0088F1A8-0x0088F1EC
	public override void OnWholeEnd(PointsManager manager); // 0x0088F1EC-0x0088F22C
	public override void OnStart(PointsManager manager); // 0x0088F22C-0x0088F36C
	public override bool OnUpdate(PointsManager manager); // 0x0088F36C-0x0088F428
	public override void OnEnd(PointsManager manager); // 0x0088F428-0x0088F464
	public override void OnImility(PointsManager manager); // 0x0088F464-0x0088F4A0
}

public class MoveRandomAnimation : Point // TypeDefIndex: 4140
{
	// Fields
	[SerializeField] // 0x0051B7D8-0x0051B7E8
	private AnimationClip[] clipNames; // 0x20
	[SerializeField] // 0x0051B7E8-0x0051B7F8
	private bool removeClipAtLast; // 0x28
	private Vector3 initPos; // 0x2C
	private AnimationClip clip; // 0x38
	private float time; // 0x40

	// Constructors
	public MoveRandomAnimation(); // 0x0088F8B4-0x0088F8BC

	// Methods
	public override void OnInit(PointsManager manager); // 0x0088F4A8-0x0088F54C
	public override void OnWholeEnd(PointsManager manager); // 0x0088F54C-0x0088F5F0
	public override void OnStart(PointsManager manager); // 0x0088F5F0-0x0088F644
	public override bool OnUpdate(PointsManager manager); // 0x0088F728-0x0088F7AC
	public override void OnEnd(PointsManager manager); // 0x0088F7AC-0x0088F830
	private void CrossFadeRandomClip(PointsManager manager); // 0x0088F644-0x0088F728
	public override void OnImility(PointsManager manager); // 0x0088F830-0x0088F8B4
}

public class MoveTo : Point // TypeDefIndex: 4141
{
	// Constructors
	public MoveTo(); // 0x0088F950-0x0088F958

	// Methods
	public override void OnInit(PointsManager manager); // 0x0088F8BC-0x0088F8C0
	public override void OnWholeEnd(PointsManager manager); // 0x0088F8C0-0x0088F8C4
	public override void OnEnd(PointsManager manager); // 0x0088F8C4-0x0088F8C8
	public override void OnStart(PointsManager manager); // 0x0088F8C8-0x0088F8E8
	public override bool OnUpdate(PointsManager manager); // 0x0088F8E8-0x0088F914
	public override void OnImility(PointsManager manager); // 0x0088F914-0x0088F950
}

public class PlayerAvatarAnimation : Point // TypeDefIndex: 4142
{
	// Fields
	private CharacterModel characterModel; // 0x20

	// Constructors
	public PlayerAvatarAnimation(); // 0x006A88E4-0x006A88EC

	// Methods
	private void Awake(); // 0x006A8784-0x006A8788
	public override void OnInit(PointsManager manager); // 0x006A8788-0x006A878C
	public override void OnWholeEnd(PointsManager manager); // 0x006A878C-0x006A8790
	public override void OnEnd(PointsManager manager); // 0x006A8790-0x006A8834
	public override void OnStart(PointsManager manager); // 0x006A8834-0x006A88D8
	public override bool OnUpdate(PointsManager manager); // 0x006A88D8-0x006A88E0
	public override void OnImility(PointsManager manager); // 0x006A88E0-0x006A88E4
}

public class PlayOnce : Point // TypeDefIndex: 4143
{
	// Fields
	[SerializeField] // 0x0051B7F8-0x0051B808
	private AnimationClip man_animClip; // 0x20
	[SerializeField] // 0x0051B808-0x0051B818
	private AnimationClip woman_animClip; // 0x28
	[SerializeField] // 0x0051B818-0x0051B828
	private bool removeClipAtLast; // 0x30
	private AnimationClip animClip; // 0x38
	private float time; // 0x40

	// Constructors
	public PlayOnce(); // 0x006A81F0-0x006A81F8

	// Methods
	public override void OnInit(PointsManager manager); // 0x006A7F2C-0x006A7FF4
	public override void OnWholeEnd(PointsManager manager); // 0x006A7FF4-0x006A80AC
	public override void OnEnd(PointsManager manager); // 0x006A80AC-0x006A80B0
	public override void OnStart(PointsManager manager); // 0x006A80B0-0x006A818C
	public override bool OnUpdate(PointsManager manager); // 0x006A818C-0x006A81EC
	public override void OnImility(PointsManager manager); // 0x006A81EC-0x006A81F0
}

public abstract class Point : MonoBehaviour // TypeDefIndex: 4144
{
	// Fields
	public bool move; // 0x18
	public int group; // 0x1C

	// Constructors
	protected Point(); // 0x007214BC-0x007214C4

	// Methods
	public abstract void OnStart(PointsManager manager);
	public abstract void OnEnd(PointsManager manager);
	public abstract bool OnUpdate(PointsManager manager);
	public abstract void OnImility(PointsManager manager);
	public abstract void OnInit(PointsManager manager);
	public abstract void OnWholeEnd(PointsManager manager);
}

public class PointAnimationCtrl : MonoBehaviour // TypeDefIndex: 4145
{
	// Fields
	public Animation anim; // 0x18
	public Animation follow; // 0x20

	// Properties
	public AnimationState this[string clip] { get => default; } // 0x00721BA8-0x00721BC4 

	// Constructors
	public PointAnimationCtrl(); // 0x00721BC4-0x00721BCC

	// Methods
	public void AddClip(AnimationClip clip); // 0x007214C4-0x00721618
	public void RemoveClip(AnimationClip clip); // 0x00721618-0x00721744
	public void CrossFade(string clip, float time); // 0x00721744-0x00721818
	public void CrossFadeQueued(string clip, float time); // 0x00721818-0x007218EC
	public void Play(string clip); // 0x007218EC-0x007219A8
	public bool IsEnable(string clip); // 0x007219A8-0x007219D4
	public void SetSpeed(string clip, float speed); // 0x007219D4-0x00721AC0
	public void Stop(); // 0x00721AC0-0x00721ADC
	public void Sample(AnimationClip clip, int frame); // 0x00721ADC-0x00721BA8
}

public class PointList : MonoBehaviour // TypeDefIndex: 4146
{
	// Fields
	[SerializeField] // 0x0051B828-0x0051B838
	private Point[] wayPoints; // 0x18
	private int currentPointId; // 0x20
	[SerializeField] // 0x0051B838-0x0051B848
	private int showgroup; // 0x24

	// Properties
	public int CurrentId { get; } // 0x007224A4-0x007224AC 
	public Point CurrentPoint { get; } // 0x007224AC-0x007224F4 
	public Point this[int index] { get => default; } // 0x007224F4-0x00722568 
	public int Count { get; } // 0x00721D88-0x00721DA0 

	// Constructors
	public PointList(); // 0x00722568-0x00722570

	// Methods
	public void Play(); // 0x00721CE8-0x00721CF0
	public int OnBreak(); // 0x00721CF0-0x00721D88
	private void Reset(); // 0x00721DA0-0x00721F68
	private void OnDrawGizmos(); // 0x00721F68-0x0072226C
	public int WaitNext(PointsManager manager); // 0x0072226C-0x00722390
	public int CalcNext(); // 0x00722390-0x00722480
	public int Next(); // 0x00722480-0x007224A4
}

public class PointsManager : MonoBehaviour // TypeDefIndex: 4147
{
	// Fields
	[SerializeField] // 0x0051B848-0x0051B858
	private PointList list; // 0x18
	[SerializeField] // 0x0051B858-0x0051B868
	private GameObject model; // 0x20
	[SerializeField] // 0x0051B868-0x0051B878
	private Transform target; // 0x28
	[SerializeField] // 0x0051B878-0x0051B888
	private PointAnimationCtrl targetAnim; // 0x30
	[SerializeField] // 0x0051B888-0x0051B898
	private AudioSource audioSource; // 0x38
	[SerializeField] // 0x0051B898-0x0051B8A8
	private Transform thing; // 0x40
	[SerializeField] // 0x0051B8A8-0x0051B8B8
	private CharacterController characterController; // 0x48
	[SerializeField] // 0x0051B8B8-0x0051B8C8
	private Transform trans; // 0x50
	public bool isGirl; // 0x58
	private bool wait; // 0x59
	private Transform refrence; // 0x60
	private float pointToPointThreshold; // 0x68
	private Point currentPoint; // 0x70
	private Vector3 velocity; // 0x78
	public Action onStop; // 0x88
	private Vector3 temp; // 0x90
	public static List<string> hasShowedModels; // 0x00
	private static bool _isApplicationPaused; // 0x08

	// Properties
	public PointAnimationCtrl TargetAnim { get; } // 0x00723E60-0x00723E68 
	public Transform Refrence { get; } // 0x00723E68-0x00723E70 
	public bool Wait { get; set; } // 0x00723E70-0x00723E78 0x00723E78-0x00723F00

	// Constructors
	public PointsManager(); // 0x00723F00-0x00723F10

	// Methods
	private void Awake(); // 0x00722570-0x00722664
	private void Start(); // 0x00722664-0x00722800
	private void SetPointStart(); // 0x00722800-0x00722AA4
	public void Play(); // 0x00722AA4-0x00722CF4
	public void BreakLoop(); // 0x00722CF4-0x00722DB0
	public void OnStop(); // 0x00722DB0-0x00723050
	public void GoToNextPoint(); // 0x00723050-0x007230BC
	private void Update(); // 0x007230BC-0x007232B0
	private void OnApplicationPause(bool paused); // 0x007232B0-0x00723340
	public void Check(); // 0x00723340-0x007234C8
	public void InitializeCharacterModel(Transform point, string name, int themeId); // 0x007234C8-0x007236E4
	public void InitializedModel(Vector3 localPos, Vector3 localRotation); // 0x007236E4-0x00723888
	public void StopSound(); // 0x00723888-0x0072391C
	public float GetDistanceToTarget(); // 0x0072391C-0x007239EC
	public void SetTransformToTarget(); // 0x007239EC-0x007239F8
	public void SetTransformTo(Transform trans); // 0x00723A54-0x00723A68
	private void SetTranformPQ(Transform trans, Transform target); // 0x007239F8-0x00723A54
	public void SetPositionAccordingRefrence(Vector3 pos); // 0x00723A68-0x00723B68
	public void Move(float delta); // 0x00723B68-0x00723C1C
	public void RotatoToTarget(); // 0x00723C1C-0x00723D38
	public void RotatoToPoint(); // 0x00723D38-0x00723E60
}

public class Sample : Point // TypeDefIndex: 4148
{
	// Fields
	[SerializeField] // 0x0051B8C8-0x0051B8D8
	private AnimationClip idelClip; // 0x20
	[SerializeField] // 0x0051B8D8-0x0051B8E8
	private int frame; // 0x28
	[SerializeField] // 0x0051B8E8-0x0051B8F8
	private bool removeClipAtLast; // 0x2C

	// Constructors
	public Sample(); // 0x006BF81C-0x006BF824

	// Methods
	public override void OnEnd(PointsManager manager); // 0x006BF530-0x006BF534
	public override void OnImility(PointsManager manager); // 0x006BF534-0x006BF538
	public override void OnInit(PointsManager manager); // 0x006BF538-0x006BF5E8
	public override void OnStart(PointsManager manager); // 0x006BF5E8-0x006BF738
	public override bool OnUpdate(PointsManager manager); // 0x006BF738-0x006BF764
	public override void OnWholeEnd(PointsManager manager); // 0x006BF764-0x006BF81C
}

public class TopMenuAnimations : MonoBehaviour // TypeDefIndex: 4149
{
	// Fields
	[SerializeField] // 0x0051B8F8-0x0051B908
	private GameObject[] starts; // 0x18
	private CharacterModel characterModel; // 0x20

	// Constructors
	public TopMenuAnimations(); // 0x00FD2D6C-0x00FD2D74

	// Methods
	private void Start(); // 0x00FD2818-0x00FD292C
	private void OnMenuScreenShown(); // 0x00FD292C-0x00FD2AB0
	private void OnChangeOnTrackPiece(TrackPiece oldTp, TrackPiece newTp); // 0x00FD2B54-0x00FD2CC4
	public void OnNewGameStart(); // 0x00FD2CC4-0x00FD2CC8
	private void StartPlayIdleRummagesAnimation(); // 0x00FD2AB0-0x00FD2B54
	private void StopPlayIdleRummagesAnimation(); // 0x00FD2CC8-0x00FD2D6C
}

public class VariableMove : Point // TypeDefIndex: 4150
{
	// Fields
	[SerializeField] // 0x0051B908-0x0051B918
	protected AnimationClip man_runClip; // 0x20
	[SerializeField] // 0x0051B918-0x0051B928
	protected AnimationClip woman_runClip; // 0x28
	[SerializeField] // 0x0051B928-0x0051B938
	protected float animSpeed; // 0x30
	[SerializeField] // 0x0051B938-0x0051B948
	protected float initialSpeed; // 0x34
	[SerializeField] // 0x0051B948-0x0051B958
	protected float acc; // 0x38
	[SerializeField] // 0x0051B958-0x0051B968
	protected float maxSpeed; // 0x3C
	[SerializeField] // 0x0051B968-0x0051B978
	private bool removeClipAtLast; // 0x40
	private float speed; // 0x44
	private AnimationClip animClip; // 0x48

	// Constructors
	public VariableMove(); // 0x00A8CDC8-0x00A8CDD0

	// Methods
	public override void OnInit(PointsManager manager); // 0x00A8C9D8-0x00A8CA9C
	public override void OnWholeEnd(PointsManager manager); // 0x00A8CA9C-0x00A8CB54
	public override void OnEnd(PointsManager manager); // 0x00A8CB54-0x00A8CB58
	public override void OnStart(PointsManager manager); // 0x00A8CB58-0x00A8CC50
	public override bool OnUpdate(PointsManager manager); // 0x00A8CC50-0x00A8CD8C
	public override void OnImility(PointsManager manager); // 0x00A8CD8C-0x00A8CDC8
}

public class Wait : Point // TypeDefIndex: 4151
{
	// Constructors
	public Wait(); // 0x00A91CF8-0x00A91D00

	// Methods
	public override void OnInit(PointsManager manager); // 0x00A91C9C-0x00A91CA0
	public override void OnWholeEnd(PointsManager manager); // 0x00A91CA0-0x00A91CA4
	public override void OnEnd(PointsManager manager); // 0x00A91CA4-0x00A91CA8
	public override void OnStart(PointsManager manager); // 0x00A91CA8-0x00A91CEC
	public override bool OnUpdate(PointsManager manager); // 0x00A91CEC-0x00A91CF4
	public override void OnImility(PointsManager manager); // 0x00A91CF4-0x00A91CF8
}

public class WaitUntil : Point // TypeDefIndex: 4152
{
	// Fields
	private UIScreenController uiscreen; // 0x20

	// Constructors
	public WaitUntil(); // 0x00A91E30-0x00A91E38

	// Methods
	public override void OnEnd(PointsManager manager); // 0x00A91D00-0x00A91D04
	public override void OnImility(PointsManager manager); // 0x00A91D04-0x00A91D08
	public override void OnInit(PointsManager manager); // 0x00A91D08-0x00A91D0C
	public override void OnStart(PointsManager manager); // 0x00A91D0C-0x00A91D78
	public override bool OnUpdate(PointsManager manager); // 0x00A91D78-0x00A91E2C
	public override void OnWholeEnd(PointsManager manager); // 0x00A91E2C-0x00A91E30
}

public class NewUpdatePopup : UIBaseScreen // TypeDefIndex: 4153
{
	// Fields
	public static bool ShowUpdate; // 0x00
	[SerializeField] // 0x0051B978-0x0051B988
	private UILabel titleLbl; // 0x98
	[SerializeField] // 0x0051B988-0x0051B998
	private UILabel contentLbl; // 0xA0
	[SerializeField] // 0x0051B998-0x0051B9A8
	private UILabel updateLbl; // 0xA8
	[SerializeField] // 0x0051B9A8-0x0051B9B8
	private UILabel rewardLbl; // 0xB0
	[SerializeField] // 0x0051B9B8-0x0051B9C8
	private UIRewardHelper uiReward1; // 0xB8
	[SerializeField] // 0x0051B9C8-0x0051B9D8
	private UIRewardHelper uiReward2; // 0xC0
	[SerializeField] // 0x0051B9D8-0x0051B9E8
	private GameObject updateGo; // 0xC8
	[SerializeField] // 0x0051B9E8-0x0051B9F8
	private GameObject getRewardGo; // 0xD0
	[SerializeField] // 0x0051B9F8-0x0051BA08
	private ParticleSystem getRewardPs; // 0xD8
	private int index; // 0xE0
	private UpdateReward updateReward1; // 0xE8
	private UpdateReward updateReward2; // 0xF0

	// Constructors
	public NewUpdatePopup(); // 0x00A6B414-0x00A6B41C
	static NewUpdatePopup(); // 0x00A6B41C-0x00A6C420

	// Methods
	public override void Init(); // 0x00A6AF44-0x00A6AFF0
	private void RefreshLabel(); // 0x00A6AFF0-0x00A6B09C
	public override void Show(); // 0x00A6B09C-0x00A6B280
	public void GetApp(); // 0x00A6B280-0x00A6B31C
	public void GetReward(); // 0x00A6B31C-0x00A6B414
}

public class UIRewardHelper : MonoBehaviour // TypeDefIndex: 4154
{
	// Fields
	public UIReward uiReward; // 0x18
	private UpdateReward reward; // 0x28

	// Constructors
	public UIRewardHelper(); // 0x007654E0-0x007654E8

	// Methods
	public void RefreshUI(UpdateReward reward); // 0x00765344-0x00765490
	public void GetReward(int multiple = 1 /* Metadata: 0x001F6438 */); // 0x00765490-0x007654E0
}

[Serializable]
public class UpdateReward // TypeDefIndex: 4155
{
	// Fields
	public UpdateRewardType rewardType; // 0x10
	public int number; // 0x14
	public string description; // 0x18
	public string icon; // 0x20
	public Color color; // 0x28

	// Constructors
	public UpdateReward(); // 0x008189FC-0x00818A04
}

[Serializable]
public struct UIReward // TypeDefIndex: 4156
{
	// Fields
	public UISprite Icon; // 0x00
	public UILabel Number; // 0x08
}

public enum UpdateRewardType // TypeDefIndex: 4157
{
	Coins = 0,
	Keys = 1,
	HeadSprint = 2,
	ScoreBooster = 3,
	Helmet = 4,
	Chest = 5,
	Token = 6,
	Notset = 7
}

public class UpdateRewardManager : MonoBehaviour // TypeDefIndex: 4158
{
	// Fields
	private static UpdateRewardManager _instance; // 0x00
	[SerializeField] // 0x0051BA08-0x0051BA18
	private UpdateReward[] updateRewards; // 0x18

	// Properties
	public static UpdateRewardManager Instance { get; } // 0x00818A04-0x00818AD0 

	// Constructors
	public UpdateRewardManager(); // 0x00818E38-0x00818E40

	// Methods
	public int GetUpdateRewardInfo(ref UpdateReward one, ref UpdateReward two); // 0x00818AD0-0x00818BC0
	public void GetReward(UpdateReward reward, int multiple); // 0x00818BC0-0x00818E38
}

public class Version : MonoBehaviour // TypeDefIndex: 4159
{
	// Fields
	[SerializeField] // 0x0051BA18-0x0051BA28
	private GameObject child; // 0x18

	// Constructors
	public Version(); // 0x00A8D204-0x00A8D20C

	// Methods
	private void Awake(); // 0x00A8CDD0-0x00A8CE90
	private void Check(); // 0x00A8CE90-0x00A8CECC
	private void CancelUpdate(); // 0x00A8CECC-0x00A8CF48
	private void CheckUpdate(); // 0x00A8CF48-0x00A8D0B0
	public void ShowUpdate(); // 0x00A8D158-0x00A8D204
	public void GetReward(); // 0x00A8D0B0-0x00A8D158
	[CompilerGenerated] // 0x005225E4-0x005225F4
	private void _Awake_b__1_0(); // 0x00A8D20C-0x00A8D210
}

public class Wall : BaseO // TypeDefIndex: 4160
{
	// Fields
	[SerializeField] // 0x0051BA28-0x0051BA38
	private int trackIndex; // 0x18
	[SerializeField] // 0x0051BA38-0x0051BA48
	private bool displayText; // 0x1C
	[SerializeField] // 0x0051BA48-0x0051BA58
	private string text; // 0x20
	[SerializeField] // 0x0051BA58-0x0051BA68
	private bool displayMesh; // 0x28
	[SerializeField] // 0x0051BA68-0x0051BA78
	private float meshDir; // 0x2C
	[SerializeField] // 0x0051BA78-0x0051BA88
	private float time; // 0x30
	[SerializeField] // 0x0051BA88-0x0051BA98
	private float maxDistance; // 0x34
	public SwipeDir swipeDir; // 0x38
	[SerializeField] // 0x0051BA98-0x0051BAA8
	private BoxCollider bCollider; // 0x40
	[SerializeField] // 0x0051BAA8-0x0051BAB8
	private float height; // 0x48
	private GameObject _mesh; // 0x50
	private Game game; // 0x58
	private Character character; // 0x60
	private float distance; // 0x68
	private bool willShowMesh; // 0x6C
	private bool hasShowMesh; // 0x6D
	private EnvType envType; // 0x70
	[CompilerGenerated] // 0x0051BAB8-0x0051BAC8
	private Vector3 _Size_k__BackingField; // 0x74
	[CompilerGenerated] // 0x0051BAC8-0x0051BAD8
	private Bounds _Bounds_k__BackingField; // 0x80

	// Properties
	public BoxCollider Collider { get; } // 0x00A92424-0x00A9242C 
	public float Height { get; } // 0x00A9242C-0x00A92434 
	public Vector3 Size { [CompilerGenerated] /* 0x00522658-0x00522668 */ get; [CompilerGenerated] /* 0x00522668-0x00522678 */ private set; } // 0x00A92434-0x00A92440 0x00A92440-0x00A9244C
	public Bounds Bounds { [CompilerGenerated] /* 0x00522678-0x00522688 */ get; [CompilerGenerated] /* 0x00522688-0x00522698 */ private set; } // 0x00A9244C-0x00A92460 0x00A92460-0x00A92474
	private GameObject Mesh { get; } // 0x00A92380-0x00A923F8 

	// Nested types
	[CompilerGenerated] // 0x00514950-0x00514960
	private sealed class __c__DisplayClass23_0 // TypeDefIndex: 4161
	{
		// Fields
		public Wall __4__this; // 0x10
		public Vector3 pos; // 0x18

		// Constructors
		public __c__DisplayClass23_0(); // 0x00A92488-0x00A92490

		// Methods
		internal void _ShowMesh_b__0(float t); // 0x00A92490-0x00A92768
	}

	[CompilerGenerated] // 0x00514960-0x00514970
	private sealed class _ShowMesh_d__23 : IEnumerator<object> // TypeDefIndex: 4162
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Wall __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527824-0x00527834 */ get; } // 0x00A92A80-0x00A92A88 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527844-0x00527854 */ get; } // 0x00A92AEC-0x00A92AF4 

		// Constructors
		[DebuggerHidden] // 0x00527804-0x00527814
		public _ShowMesh_d__23(int __1__state); // 0x00A923F8-0x00A92424

		// Methods
		[DebuggerHidden] // 0x00527814-0x00527824
		void IDisposable.Dispose(); // 0x00A92768-0x00A9276C
		private bool MoveNext(); // 0x00A9276C-0x00A92A04
		[DebuggerHidden] // 0x00527834-0x00527844
		void IEnumerator.Reset(); // 0x00A92A88-0x00A92AEC
	}

	// Constructors
	public Wall(); // 0x00A92474-0x00A92488

	// Methods
	protected override void Awake(); // 0x00A91E38-0x00A91F18
	public override void OnActivate(); // 0x00A91F18-0x00A91FA4
	public override void OnDeactivate(); // 0x00A91FA4-0x00A91FC4
	public void OnTrigger(); // 0x00A91FC4-0x00A920F0
	private void Update(); // 0x00A920F0-0x00A922AC
	private bool CanSwipe(); // 0x00A922AC-0x00A9230C
	[IteratorStateMachine] // 0x005225F4-0x00522658
	private IEnumerator ShowMesh(); // 0x00A9230C-0x00A92380
}

public class ScrollViewRecycle<T, V> : UIScrollView // TypeDefIndex: 4163
	where T : MonoBehaviour
{
	// Fields
	[SerializeField] // 0x0051BAD8-0x0051BAE8
	protected int topCount;
	[SerializeField] // 0x0051BAE8-0x0051BAF8
	protected int topCellHeight;
	[SerializeField] // 0x0051BAF8-0x0051BB08
	protected int elseCount;
	[SerializeField] // 0x0051BB08-0x0051BB18
	protected int cellHeight;
	private int _currentCellCount;
	protected Vector3[] _ones;
	protected Vector3[] _twos;
	protected Vector3 _originPos;
	protected int _lastIndex;
	private bool firstGet;
	[CompilerGenerated] // 0x0051BB18-0x0051BB28
	private T[] __monos_k__BackingField;
	[CompilerGenerated] // 0x0051BB28-0x0051BB38
	private Transform[] __cells_k__BackingField;
	[CompilerGenerated] // 0x0051BB38-0x0051BB48
	private V[] __orders_k__BackingField;

	// Properties
	public override Bounds bounds { get; }
	private Vector3[] ones { get; }
	private Vector3[] twos { get; }
	protected T[] _monos { [CompilerGenerated] /* 0x00522698-0x005226A8 */ get; [CompilerGenerated] /* 0x005226A8-0x005226B8 */ set; }
	protected Transform[] _cells { [CompilerGenerated] /* 0x005226B8-0x005226C8 */ get; [CompilerGenerated] /* 0x005226C8-0x005226D8 */ private set; }
	public V[] _orders { [CompilerGenerated] /* 0x005226D8-0x005226E8 */ get; [CompilerGenerated] /* 0x005226E8-0x005226F8 */ private set; }

	// Constructors
	public ScrollViewRecycle();

	// Methods
	protected override void Start();
	public int Init(int cellCount);
	public void InitCell(T cell, int i);
	public override void MoveRelative(Vector3 relative);
	protected virtual void RefreshUI(int cellIndex, V index);
	public void ResetCell();
}

public class ArrayAdapter<T> : ListAdapter // TypeDefIndex: 4164
{
	// Fields
	public List<T> _dataList;

	// Constructors
	public ArrayAdapter(List<T> list);

	// Methods
	public virtual void AddItem(T element);
	public virtual void AddMany(IEnumerable<T> list);
	public virtual void Clear();
	public override int GetCount();
	public virtual T GetItem(int index);
	public virtual void Insert(int index, T element);
	public virtual void RemoveItem(T element);
	public virtual void RemoveItemAt(int index);
}

public class AvatarAnimations : MonoBehaviour // TypeDefIndex: 4165
{
	// Fields
	public Animation Target; // 0x18
	public bool PlayIdleAnimations; // 0x20
	public AnimationClip Celebrate; // 0x28
	public AnimationClip Breath; // 0x30
	public AnimationClip startClip; // 0x38
	public List<AnimationClip> Idles; // 0x40
	public List<AnimationClip> HighscorePopup; // 0x48
	public List<AnimationClip> UnlockPopup; // 0x50
	public bool Paused; // 0x58
	private IEnumerator routine; // 0x60
	private float nextTime; // 0x68
	private bool useHighscoreIdles; // 0x6C
	private bool useStartClip; // 0x6D
	private bool useUnlockIdles; // 0x6E
	private AvatarEyeAnimation eyeAnimation; // 0x70
	private AvatarAnimationsAdditions avatarAdditions; // 0x78
	private string celebrateName; // 0x80
	private string breathName; // 0x88
	private string startClipName; // 0x90
	private List<string> IdlesName; // 0x98
	private List<string> HighscoreName; // 0xA0
	private List<string> UnlockPopupName; // 0xA8
	private bool _hasInited; // 0xB0

	// Nested types
	[CompilerGenerated] // 0x00514970-0x00514980
	private sealed class _Play_d__24 : IEnumerator<object> // TypeDefIndex: 4166
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public AvatarAnimations __4__this; // 0x20
		private List<AnimationClip> _possibleClips_5__2; // 0x28
		private AnimationClip _selectedClip_5__3; // 0x30
		private int _count_5__4; // 0x38
		private int _max_5__5; // 0x3C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527874-0x00527884 */ get; } // 0x00717414-0x0071741C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527894-0x005278A4 */ get; } // 0x00717480-0x00717488 

		// Constructors
		[DebuggerHidden] // 0x00527854-0x00527864
		public _Play_d__24(int __1__state); // 0x00714E50-0x00714E7C

		// Methods
		[DebuggerHidden] // 0x00527864-0x00527874
		void IDisposable.Dispose(); // 0x00716668-0x0071666C
		private bool MoveNext(); // 0x0071666C-0x00717118
		[DebuggerHidden] // 0x00527884-0x00527894
		void IEnumerator.Reset(); // 0x0071741C-0x00717480
	}

	// Constructors
	public AvatarAnimations(); // 0x00716660-0x00716668

	// Methods
	private Animation FindAnimationInParent(GameObject current); // 0x00714CA0-0x00714DDC
	[IteratorStateMachine] // 0x005226F8-0x0052275C
	private IEnumerator Play(); // 0x00714DDC-0x00714E50
	private void Init(); // 0x00714E7C-0x00715448
	public void StartIdleAnimations(); // 0x00715448-0x007156DC
	public void StartHighscoreAnimations(); // 0x007157F4-0x00715AA0
	public void StartUnlockAnimations(); // 0x00715AA0-0x00715CC4
	public void StopIdleAnimations(); // 0x00715CC4-0x00716474
	private void Update(); // 0x0071649C-0x007165F4
	private bool IsNotNull(AnimationClip a); // 0x007165F4-0x00716660
}

public class AvatarEyeAnimation : MonoBehaviour // TypeDefIndex: 4167
{
	// Fields
	private bool animating; // 0x18
	public Renderer closedEyes; // 0x20
	public float blinkTime; // 0x28
	public float blinkWaitTimeMax; // 0x2C
	public float blinkWaitTimeMin; // 0x30
	private float waitForBlinkEndTime; // 0x34
	private float blinkEndTime; // 0x38

	// Constructors
	public AvatarEyeAnimation(); // 0x00717964-0x0071798C

	// Methods
	public bool IsAnimating(); // 0x0071777C-0x00717784
	public void ForceBlink(); // 0x00717784-0x007177B4
	public void ChangeMat(Material mat); // 0x007177B4-0x007177D0
	public void StartAnimatingEyes(); // 0x007156DC-0x00715718
	public void StopAnimatingEyes(); // 0x00716474-0x0071649C
	private void Update(); // 0x007177D0-0x007177FC
	private void UpdateEyeBlinking(); // 0x007177FC-0x00717964
}

public class Boss : MonoBehaviour // TypeDefIndex: 4168
{
	// Fields
	public DefaultAnimations defaultAnimations; // 0x18
	public float distanceToCharacterMin; // 0x20
	public float distanceToCharacterMax; // 0x24
	public float catchUpDuration; // 0x28
	public float resetCatchUpDuration; // 0x2C
	public float lastGroundedSmoothTime; // 0x30
	public float xSmoothTime; // 0x34
	public float gravity; // 0x38
	public bool isShowing; // 0x3C
	public Animation guardAnimation; // 0x40
	public CatchAnimationSet[] caughtSets; // 0x48
	public int debugCatchAnimationToPlay; // 0x50
	public Transform[] enemies; // 0x58
	public OnCatchPlayerDelegate OnCatchPlayer; // 0x60
	public float guardProximityLoopVolume; // 0x68
	private AudioSource audioSource; // 0x70
	private bool caught; // 0x78
	private Character character; // 0x80
	private CharacterController characterController; // 0x88
	private CharacterRendering characterRendering; // 0x90
	private Transform characterTransform; // 0x98
	private bool closeToCharacter; // 0xA0
	private float distanceToCharacter; // 0xA4
	private Vector3[] enemiesStartPos; // 0xA8
	private Renderer[] enemyRenderers; // 0xB0
	private Game game; // 0xB8
	private static Boss instance; // 0x00
	private bool isPaused; // 0xC0
	private float lastGroundedSmooth; // 0xC4
	private float lastGroundedVelocity; // 0xC8
	private float verticalSpeed; // 0xCC
	private SmoothDampFloat x; // 0xD0
	private float y; // 0xD8

	// Properties
	public static Boss Instance { get; } // 0x0071B654-0x0071B790 

	// Nested types
	[Serializable]
	public class CatchAnimationSet // TypeDefIndex: 4169
	{
		// Fields
		public AnimationClip death; // 0x10
		public AnimationClip avatar; // 0x18
		public AnimationClip guard; // 0x20
		public float catchAvatarAnimationPlayOffset; // 0x28
		public float waitTimeBeforeScreen; // 0x2C

		// Constructors
		public CatchAnimationSet(); // 0x0071C788-0x0071C790
	}

	[Serializable]
	public class DefaultAnimations // TypeDefIndex: 4170
	{
		// Fields
		public AnimationClip[] introGuard; // 0x10
		public AnimationClip[] runGuard; // 0x18
		public AnimationClip[] jumpGuard; // 0x20
		public AnimationClip[] dodgeLeftGuard; // 0x28
		public AnimationClip[] dodgeRigthGuard; // 0x30
		public AnimationClip[] rollGuard; // 0x38
		public AnimationClip[] catchupGuard; // 0x40

		// Constructors
		public DefaultAnimations(); // 0x0071C790-0x0071C798
	}

	public delegate void OnCatchPlayerDelegate(string currentChartacterCatch, float catchUpTime, float waitTimeBeforeScreen); // TypeDefIndex: 4171; 0x007197C8-0x00719BC8

	[CompilerGenerated] // 0x00514980-0x00514990
	private sealed class __c__DisplayClass35_0 // TypeDefIndex: 4172
	{
		// Fields
		public float distanceFrom; // 0x10
		public Boss __4__this; // 0x18

		// Constructors
		public __c__DisplayClass35_0(); // 0x00719E00-0x00719E08

		// Methods
		internal void _CatchUp_b__0(float t); // 0x0071BB1C-0x0071BBC0
	}

	[CompilerGenerated] // 0x00514990-0x005149A0
	private sealed class _HitByTrainSequenceCoroutine_d__39 : IEnumerator<object> // TypeDefIndex: 4173
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Boss __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005278C4-0x005278D4 */ get; } // 0x0071C234-0x0071C23C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005278E4-0x005278F4 */ get; } // 0x0071C2A0-0x0071C2A8 

		// Constructors
		[DebuggerHidden] // 0x005278A4-0x005278B4
		public _HitByTrainSequenceCoroutine_d__39(int __1__state); // 0x0071A08C-0x0071A0B8

		// Methods
		[DebuggerHidden] // 0x005278B4-0x005278C4
		void IDisposable.Dispose(); // 0x0071C0A8-0x0071C0AC
		private bool MoveNext(); // 0x0071C0AC-0x0071C234
		[DebuggerHidden] // 0x005278D4-0x005278E4
		void IEnumerator.Reset(); // 0x0071C23C-0x0071C2A0
	}

	[CompilerGenerated] // 0x005149A0-0x005149B0
	private sealed class __c__DisplayClass40_0 // TypeDefIndex: 4174
	{
		// Fields
		public Boss __4__this; // 0x10
		public Vector3 endPos; // 0x18

		// Constructors
		public __c__DisplayClass40_0(); // 0x0071BBC0-0x0071BBC8

		// Methods
		internal void _FallIntoWaterCoroutine_b__0(float t); // 0x0071BBC8-0x0071BCF8
	}

	[CompilerGenerated] // 0x005149B0-0x005149C0
	private sealed class _FallIntoWaterCoroutine_d__40 : IEnumerator<object> // TypeDefIndex: 4175
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Boss __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527914-0x00527924 */ get; } // 0x0071C034-0x0071C03C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527934-0x00527944 */ get; } // 0x0071C0A0-0x0071C0A8 

		// Constructors
		[DebuggerHidden] // 0x005278F4-0x00527904
		public _FallIntoWaterCoroutine_d__40(int __1__state); // 0x0071A0B8-0x0071A0E4

		// Methods
		[DebuggerHidden] // 0x00527904-0x00527914
		void IDisposable.Dispose(); // 0x0071BE48-0x0071BE4C
		private bool MoveNext(); // 0x0071BE4C-0x0071C034
		[DebuggerHidden] // 0x00527924-0x00527934
		void IEnumerator.Reset(); // 0x0071C03C-0x0071C0A0
	}

	[CompilerGenerated] // 0x005149C0-0x005149D0
	private sealed class _JumpCoroutine_d__45 : IEnumerator<object> // TypeDefIndex: 4176
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public float delay; // 0x20
		public Boss __4__this; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527964-0x00527974 */ get; } // 0x0071C38C-0x0071C394 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527984-0x00527994 */ get; } // 0x0071C3F8-0x0071C400 

		// Constructors
		[DebuggerHidden] // 0x00527944-0x00527954
		public _JumpCoroutine_d__45(int __1__state); // 0x0071AB50-0x0071AB7C

		// Methods
		[DebuggerHidden] // 0x00527954-0x00527964
		void IDisposable.Dispose(); // 0x0071C2A8-0x0071C2AC
		private bool MoveNext(); // 0x0071C2AC-0x0071C38C
		[DebuggerHidden] // 0x00527974-0x00527984
		void IEnumerator.Reset(); // 0x0071C394-0x0071C3F8
	}

	[CompilerGenerated] // 0x005149D0-0x005149E0
	private sealed class __c__DisplayClass58_0 // TypeDefIndex: 4177
	{
		// Fields
		public Boss __4__this; // 0x10
		public float distanceFrom; // 0x18

		// Constructors
		public __c__DisplayClass58_0(); // 0x0071BCF8-0x0071BD00

		// Methods
		internal void _ResetCatchUpCoroutine_b__0(float t); // 0x0071BD00-0x0071BDA4
		internal void _ResetCatchUpCoroutine_b__1(float t); // 0x0071BDA4-0x0071BE48
	}

	[CompilerGenerated] // 0x005149E0-0x005149F0
	private sealed class _ResetCatchUpCoroutine_d__58 : IEnumerator<object> // TypeDefIndex: 4178
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Boss __4__this; // 0x20
		public float duration; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005279B4-0x005279C4 */ get; } // 0x0071C5CC-0x0071C5D4 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005279D4-0x005279E4 */ get; } // 0x0071C638-0x0071C640 

		// Constructors
		[DebuggerHidden] // 0x00527994-0x005279A4
		public _ResetCatchUpCoroutine_d__58(int __1__state); // 0x0071B484-0x0071B4B0

		// Methods
		[DebuggerHidden] // 0x005279A4-0x005279B4
		void IDisposable.Dispose(); // 0x0071C400-0x0071C404
		private bool MoveNext(); // 0x0071C404-0x0071C5CC
		[DebuggerHidden] // 0x005279C4-0x005279D4
		void IEnumerator.Reset(); // 0x0071C5D4-0x0071C638
	}

	[CompilerGenerated] // 0x005149F0-0x00514A00
	private sealed class _RollCoroutine_d__62 : IEnumerator<object> // TypeDefIndex: 4179
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public float delay; // 0x20
		public Boss __4__this; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527A04-0x00527A14 */ get; } // 0x0071C714-0x0071C71C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527A24-0x00527A34 */ get; } // 0x0071C780-0x0071C788 

		// Constructors
		[DebuggerHidden] // 0x005279E4-0x005279F4
		public _RollCoroutine_d__62(int __1__state); // 0x0071B628-0x0071B654

		// Methods
		[DebuggerHidden] // 0x005279F4-0x00527A04
		void IDisposable.Dispose(); // 0x0071C640-0x0071C644
		private bool MoveNext(); // 0x0071C644-0x0071C714
		[DebuggerHidden] // 0x00527A14-0x00527A24
		void IEnumerator.Reset(); // 0x0071C71C-0x0071C780
	}

	// Constructors
	public Boss(); // 0x0071B790-0x0071B7DC

	// Methods
	public void CatchPlayer(Animation characterAnimation); // 0x007193E0-0x0071971C
	public void CatchUp(); // 0x00719BC8-0x00719BD0
	public void CatchUp(float duration); // 0x00719BD0-0x00719E00
	private void HandleOnPauseChange(bool pause); // 0x00719EAC-0x00719F1C
	public void HitByTrainSequence(); // 0x00719F1C-0x00719F60
	public void FallIntoWater(); // 0x00719FD4-0x0071A018
	[IteratorStateMachine] // 0x0052275C-0x005227C0
	public IEnumerator HitByTrainSequenceCoroutine(); // 0x00719F60-0x00719FD4
	[IteratorStateMachine] // 0x005227C0-0x00522824
	public IEnumerator FallIntoWaterCoroutine(); // 0x0071A018-0x0071A08C
	public void Initialize(); // 0x0071A0E4-0x0071A688
	private void InitializeClips(Animation animationComponent, List<AnimationClip> addedClips, AnimationClip[] clips); // 0x0071A890-0x0071A99C
	public void Jump(float delay); // 0x0071A99C-0x0071AA54
	private void JumpAnimation(); // 0x0071AAD8-0x0071AB50
	[IteratorStateMachine] // 0x00522824-0x00522888
	private IEnumerator JumpCoroutine(float delay); // 0x0071AA54-0x0071AAD8
	public void LateUpdate(); // 0x0071AB7C-0x0071AD90
	public void MuteProximityLoop(); // 0x0071AD90-0x0071ADAC
	private void OnChangeTrack(Character.OnChangeTrackDirection direction); // 0x0071ADAC-0x0071AEC8
	public void OnDisable(); // 0x0071AEC8-0x0071B024
	public void OnEnable(); // 0x0071B024-0x0071B1D0
	private void OnJump(); // 0x0071B1D0-0x0071B1F8
	private void OnRoll(); // 0x0071B1F8-0x0071B2C4
	private void OnRollNoAnimation(); // 0x0071B2C4-0x0071B310
	public void PlayIntro(); // 0x0071B394-0x0071B398
	public void Run(); // 0x0071B398-0x0071B3A4
	public void ResetCatchUp(); // 0x0071B3A4-0x0071B3D4
	public void ResetCatchUp(float duration); // 0x0071B3D4-0x0071B400
	[IteratorStateMachine] // 0x00522888-0x005228EC
	public IEnumerator ResetCatchUpCoroutine(float duration); // 0x0071B400-0x0071B484
	public void ResetModelRootPosition(); // 0x0071B4B0-0x0071B5D4
	public void Restart(bool closeToCharacter); // 0x0071B5D4-0x0071B628
	private string ReturnRandomAnimations(AnimationClip[] guardAnimations); // 0x00719E08-0x00719EAC
	[IteratorStateMachine] // 0x005228EC-0x00522950
	private IEnumerator RollCoroutine(float delay); // 0x0071B310-0x0071B394
	private void SetupAvatarAnimationsStates(Animation animation, AnimationClip animationClip); // 0x0071A688-0x0071A7B0
	private void SetupGuardAnimationsStates(Animation animation, AnimationClip animationClip); // 0x0071A7B0-0x0071A890
	public void ShowEnemies(bool vis); // 0x0071971C-0x007197C8
	[CompilerGenerated] // 0x00522950-0x00522960
	private void _CatchPlayer_b__33_0(float t); // 0x0071B7DC-0x0071B938
	[CompilerGenerated] // 0x00522960-0x00522970
	private void _CatchUp_b__35_1(float t); // 0x0071B938-0x0071B9D4
	[CompilerGenerated] // 0x00522970-0x00522980
	private void _HitByTrainSequenceCoroutine_b__39_0(float t); // 0x0071B9D4-0x0071BB1C
}

public struct ButtonColorScheme // TypeDefIndex: 4180
{
	// Fields
	public Color32? light; // 0x00
	public Color32? selected; // 0x08
	public Color32? unavailable; // 0x10
	public Color32? original; // 0x18
}

public class BuyButtonIngame : MonoBehaviour, IPurchaseHandler // TypeDefIndex: 4181
{
	// Fields
	[SerializeField] // 0x0051BB48-0x0051BB58
	private UISprite fill; // 0x18
	[SerializeField] // 0x0051BB58-0x0051BB68
	private UILabel freelbl; // 0x20
	[SerializeField] // 0x0051BB68-0x0051BB78
	private UILabel priceLbl; // 0x28
	[SerializeField] // 0x0051BB78-0x0051BB88
	private UILabel upgradeLbl; // 0x30
	[SerializeField] // 0x0051BB88-0x0051BB98
	private GameObject showGo; // 0x38
	[SerializeField] // 0x0051BB98-0x0051BBA8
	private GameObject freeGo; // 0x40
	[SerializeField] // 0x0051BBA8-0x0051BBB8
	private GameObject buyGo; // 0x48
	[SerializeField] // 0x0051BBB8-0x0051BBC8
	private GameObject hideGo; // 0x50
	[SerializeField] // 0x0051BBC8-0x0051BBD8
	private BoxCollider btnCollider; // 0x58
	[SerializeField] // 0x0051BBD8-0x0051BBE8
	private ParticleSystem upgradePs; // 0x60
	private bool _purchaseInProgress; // 0x68
	private PropType _type; // 0x6C
	private bool inbuy; // 0x70
	private bool _forceBuy; // 0x71
	public bool IsFree; // 0x72

	// Nested types
	[CompilerGenerated] // 0x00514A00-0x00514A10
	private sealed class _WaitRefreshUI_d__25 : IEnumerator<object> // TypeDefIndex: 4182
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public BuyButtonIngame __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527A54-0x00527A64 */ get; } // 0x00772B6C-0x00772B74 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527A74-0x00527A84 */ get; } // 0x00772BD8-0x00772BE0 

		// Constructors
		[DebuggerHidden] // 0x00527A34-0x00527A44
		public _WaitRefreshUI_d__25(int __1__state); // 0x00772990-0x007729BC

		// Methods
		[DebuggerHidden] // 0x00527A44-0x00527A54
		void IDisposable.Dispose(); // 0x007729C4-0x007729C8
		private bool MoveNext(); // 0x007729C8-0x00772B6C
		[DebuggerHidden] // 0x00527A64-0x00527A74
		void IEnumerator.Reset(); // 0x00772B74-0x00772BD8
	}

	// Constructors
	public BuyButtonIngame(); // 0x007729BC-0x007729C4

	// Methods
	public void initBuyButton(PropType type); // 0x00771EE0-0x00771EE8
	public void Reload(bool forceBuy, int IDX); // 0x00771EE8-0x007722D0
	private void OnClick(); // 0x007722D0-0x007723C8
	private void OnDisable(); // 0x00772594-0x00772630
	private void OnEnable(); // 0x00772630-0x00772704
	private void OnFreeRewardCallback(RiseSdk.AdEventType type, int id, string tag, int adType); // 0x00772704-0x007727D0
	private void FreeRewardClick(); // 0x007723C8-0x00772594
	public void PurchaseFailure(); // 0x0077290C-0x00772914
	public void PurchaseSuccessful(); // 0x00772914-0x0077291C
	private void AfterUpgrade(); // 0x007727D0-0x0077290C
	[IteratorStateMachine] // 0x00522980-0x005229E4
	private IEnumerator WaitRefreshUI(); // 0x0077291C-0x00772990
}

public class CameraCulling : MonoBehaviour // TypeDefIndex: 4183
{
	// Fields
	private float[] distances; // 0x18
	private Material mat; // 0x20
	[SerializeField] // 0x0051BBE8-0x0051BBF8
	private Shader fadeShader; // 0x28
	[SerializeField] // 0x0051BBF8-0x0051BC08
	private FadeData defaultFadeData; // 0x30
	private FadeState state; // 0x38
	private float fadeup; // 0x3C
	private float ing; // 0x40
	private float fadedown; // 0x44
	private float factor; // 0x48

	// Properties
	public float TransparentFXCullingDistance { set; } // 0x00774FC0-0x00775060

	// Nested types
	private enum FadeState // TypeDefIndex: 4184
	{
		FadeIn = 0,
		FadeOut = 1,
		White = 2,
		None = 3
	}

	// Constructors
	public CameraCulling(); // 0x0077547C-0x007754FC

	// Methods
	private void Start(); // 0x00775060-0x00775114
	private void Update(); // 0x00775114-0x007752A8
	private void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x007752A8-0x0077532C
	private void SetToAndThenBack(Color color, float fadeup, float ing, float fadedown); // 0x0077532C-0x0077540C
	public FadeData SetToAndThenBack(); // 0x0077540C-0x00775454
	public void SetToAndThenBack(FadeData fadeData); // 0x00775454-0x0077547C
}

[Serializable]
public class FadeData // TypeDefIndex: 4185
{
	// Fields
	public Color color; // 0x10
	public float fadeInDuration; // 0x20
	public float onDuration; // 0x24
	public float fadeOutDuration; // 0x28

	// Constructors
	public FadeData(); // 0x006862B8-0x006862C0
}

public class CenterOnChild : MonoBehaviour // TypeDefIndex: 4186
{
	// Fields
	[NonSerialized]
	public bool characterWasClicked; // 0x18
	private GameObject mCenteredObject; // 0x20
	private UIScrollView mDrag; // 0x28
	private GameObject mSelectedObject; // 0x30

	// Properties
	public GameObject centeredObject { get; } // 0x0077EED0-0x0077EED8 

	// Constructors
	public CenterOnChild(); // 0x0077EED8-0x0077EEE0

	// Methods
	public bool CenterOnClosestChildAtPosition(Vector2 clickPositionOnScreen); // 0x0077DED0-0x0077E718
	public void CenterOnTransform(Transform target, bool instant = false /* Metadata: 0x001F646C */); // 0x0077E718-0x0077EEA4
	public void CharacterFocusedFromClick(); // 0x0077EEA4-0x0077EEAC
	public void ClearCenterObject(); // 0x0077EEAC-0x0077EEB4
	private void OnDragFinished(); // 0x0077EEB4-0x0077EEBC
	private void OnEnable(); // 0x0077EEC0-0x0077EEC4
	private void OnStringFinished(); // 0x0077EEC4-0x0077EED0
	public void Recenter(); // 0x0077EEBC-0x0077EEC0
}

public class CharacterHead : MonoBehaviour // TypeDefIndex: 4187
{
	// Fields
	[SerializeField] // 0x0051BC08-0x0051BC18
	private UISprite headSpr; // 0x18
	[SerializeField] // 0x0051BC18-0x0051BC28
	private UISprite selectSpr; // 0x20
	private Characters.CharacterType characterType; // 0x28

	// Constructors
	public CharacterHead(); // 0x0074365C-0x00743664

	// Methods
	public void Set(Characters.CharacterType characterType); // 0x00743570-0x00743620
	public void Select(Characters.CharacterType characterType); // 0x00743620-0x0074364C
	public bool Equals(Characters.CharacterType characterType); // 0x0074364C-0x0074365C
}

public enum CharSkillType // TypeDefIndex: 4188
{
	None = 0,
	sprint_up = 1,
	magnet_up = 2,
	score_bonus = 3,
	coin_bonus = 4,
	shield_up = 5,
	double_up = 6,
	multiple = 7,
	super_shield = 8,
	super_print = 9,
	free_savene = 10,
	distance_bonus = 11,
	magnetic_force = 12,
	guard = 13,
	frantic = 14,
	lucky = 15
}

public class CharSkillInfo // TypeDefIndex: 4189
{
	// Fields
	public string skillname; // 0x10
	public string skilldescript; // 0x18
	public int locklevel; // 0x20
	public int value; // 0x24
	public CharSkillType curCharskillType; // 0x28

	// Constructors
	public CharSkillInfo(); // 0x00781414-0x0078146C
	public CharSkillInfo(CharSkillInfo model); // 0x0078146C-0x00781508

	// Methods
	public static CharSkillInfo Parse(string json); // 0x0077F690-0x0077FD98
	public static string ToJson(CharSkillInfo model); // 0x00780114-0x007802E4
}

public class CharSkillConfig // TypeDefIndex: 4190
{
	// Fields
	public static Dictionary<Characters.CharacterType, List<CharSkillInfo>> AllcharSkilData; // 0x00
	public static Dictionary<CharSkillType, CharSkillInfo> characterSkilData; // 0x08
	public static List<CharSkillType> characterSkill; // 0x10

	// Constructors
	public CharSkillConfig(); // 0x0078140C-0x00781414

	// Methods
	public static bool LoadFile(); // 0x0077F170-0x0077F690
	public static bool SaveFile(); // 0x0077FD98-0x00780114
	public static bool SaveCharSkill(); // 0x007802E4-0x00780780
	public static bool LoadFileCharSkill(); // 0x00780780-0x00780F74
	public static int GetSkillBuff(Characters.CharacterType chartype, CharSkillType curCharskill); // 0x00780F74-0x007810EC
	public static CharSkillInfo GetCharSkillInfo(CharSkillType curCharskill); // 0x007810EC-0x00781158
	public static List<CharSkillInfo> GetCharSkillInfosByChar(Characters.CharacterType chartype); // 0x00781158-0x007811C4
	public static int GetScoreMultiplier(); // 0x007811C4-0x00781238
	public static int GetSupreShield(); // 0x00781238-0x007812AC
	public static int GetSupreSprint(); // 0x007812AC-0x00781320
	public static int GetFreeRevive(); // 0x00781320-0x00781394
	public static int GetExtraPickup(CharSkillType charskilltype); // 0x00781394-0x0078140C
}

public class Coin : IPickup // TypeDefIndex: 4191
{
	// Fields
	private Character character; // 0x40
	private GameStats gameStats; // 0x48
	private Vector3 initialGlowPosition; // 0x50
	private Vector3 initialPivotPosition; // 0x5C
	private Transform pivot; // 0x68
	public GameObject coin; // 0x70
	public GameObject doubleCoin; // 0x78
	public MeshRenderer coinglow; // 0x80
	public MeshRenderer doublecoinglow; // 0x88
	private bool isDouble; // 0x90

	// Properties
	public Transform PivotTransform { get; } // 0x0066D13C-0x0066D144 

	// Constructors
	public Coin(); // 0x0066D144-0x0066D14C

	// Methods
	protected override void Awake(); // 0x0066C828-0x0066C920
	private void Start(); // 0x0066C920-0x0066CAE8
	public override void OnActivate(); // 0x0066CAE8-0x0066CBB4
	private void SetCoin(); // 0x0066CBB4-0x0066CD08
	public override void NotifyPickup(PickupParticles pickupParticles); // 0x0066CD08-0x0066CFCC
}

public class CoinBoxSizer : MonoBehaviour // TypeDefIndex: 4192
{
	// Fields
	[SerializeField] // 0x0051BC28-0x0051BC38
	private GameObject _coinsParent; // 0x18
	[SerializeField] // 0x0051BC38-0x0051BC48
	private GameObject _keysParent; // 0x20
	[SerializeField] // 0x0051BC48-0x0051BC58
	private GameObject _levelParent; // 0x28
	[SerializeField] // 0x0051BC58-0x0051BC68
	private GameObject _closeParent; // 0x30
	[SerializeField] // 0x0051BC68-0x0051BC78
	private UISprite coinAdd; // 0x38
	[SerializeField] // 0x0051BC78-0x0051BC88
	private UISprite keyAdd; // 0x40
	[SerializeField] // 0x0051BC88-0x0051BC98
	private BoxCollider levelCollider; // 0x48
	[SerializeField] // 0x0051BC98-0x0051BCA8
	private UILabel coinAmountLabel; // 0x50
	[SerializeField] // 0x0051BCA8-0x0051BCB8
	private UILabel keyAmountLabel; // 0x58
	[SerializeField] // 0x0051BCB8-0x0051BCC8
	private UILabel levelAmountLabel; // 0x60
	[SerializeField] // 0x0051BCC8-0x0051BCD8
	private UILabel expAmountLabel; // 0x68
	[SerializeField] // 0x0051BCD8-0x0051BCE8
	private UISlider expSlider; // 0x70
	[SerializeField] // 0x0051BCE8-0x0051BCF8
	private UITexture headTexture; // 0x78
	private int _originCoinAmount; // 0x80
	private int _originKeyAmount; // 0x84
	private int _originExpAmount; // 0x88
	private int _originLevelAmount; // 0x8C
	private float _depthOffset_default; // 0x90
	private bool _updateAutomatically; // 0x94
	private bool isInitialized; // 0x95
	public UIAnchor parentAnchor; // 0x98

	// Properties
	public bool updateAutomatically { get; set; } // 0x0066E550-0x0066E558 0x0066E558-0x0066E5A8
	public Transform Head { get; } // 0x0066E5A8-0x0066E5C4 

	// Constructors
	public CoinBoxSizer(); // 0x0066E5C4-0x0066E5DC

	// Methods
	private void EnableElements(bool fundsEnabled, bool coinsEnabled, bool keysEnabled); // 0x0066D14C-0x0066D1E0
	public void Init(bool fundsEnabled, bool coinsEnabled, bool keysEnabled, bool updateAutomatically, bool enableAdd = true /* Metadata: 0x001F64AD */); // 0x0066D1E0-0x0066D3A0
	private void OnDisable(); // 0x0066D480-0x0066D6A0
	private void OnEnable(); // 0x0066D6A0-0x0066D8D8
	private void RefreshHeadUI(); // 0x0066D8D8-0x0066D948
	private void Refresh(); // 0x0066D3A0-0x0066D480
	private void RefreshCoins(int amount); // 0x0066D948-0x0066D990
	private void RefreshKeys(int amount); // 0x0066D990-0x0066D9D8
	private void RefreshExp(int level, int amount); // 0x0066DA6C-0x0066DB50
	private void RefreshLevel(int amount); // 0x0066D9D8-0x0066DA6C
	private void OnCoinsChanged(); // 0x0066DB50-0x0066DBF0
	private void OnKeysChanged(); // 0x0066DBF0-0x0066DC90
	private void OnExpChanged(); // 0x0066DC90-0x0066DD40
	private void OnLevelChanged(); // 0x0066DD40-0x0066DDE8
	public void AddCoins(int add); // 0x0066DDE8-0x0066DE40
	public void AddKeys(int add); // 0x0066DE40-0x0066DE98
	public void AddExps(int add); // 0x0066DE98-0x0066DF9C
	public void AddLevel(int add); // 0x0066DF9C-0x0066DFF4
	public void AddOriginCoins(int add); // 0x0066DFF4-0x0066E050
	public void AddOriginKeys(int add); // 0x0066E050-0x0066E0AC
	public void AddOriginExps(int add); // 0x0066E0AC-0x0066E194
	public void AddOriginLevel(int add); // 0x0066E194-0x0066E1F0
	public void OnCoinPlusClick(); // 0x0066E1F0-0x0066E348
	public void OnKeyPlusClick(); // 0x0066E348-0x0066E4A0
	public void ChangeToFrontUI(); // 0x0066E4A0-0x0066E550
}

public class CoinJumpCurve : BaseO // TypeDefIndex: 4193
{
	// Fields
	public float speed; // 0x18
	public float curveOffset; // 0x1C
	public float coinSpacing; // 0x20
	public float beginRatio; // 0x24
	public float endRatio; // 0x28
	private int activation; // 0x2C
	private Character character; // 0x30
	private static CoinPool coinPool; // 0x00
	private List<TrackObject> coins; // 0x38
	private Game game; // 0x40
	private int previewSteps; // 0x48

	// Properties
	private float JumpHeight { get; } // 0x0066EED4-0x0066EEF4 

	// Constructors
	public CoinJumpCurve(); // 0x0066F788-0x0066F818

	// Methods
	protected override void Awake(); // 0x0066EB08-0x0066EBC8
	private Vector3 CalcJumpCurve(float ratio); // 0x0066ED04-0x0066ED24
	private Vector3 CalcJumpCurve(float ratio, float speed); // 0x0066ED24-0x0066EED4
	private void DrawCurve(float speed, Color color); // 0x0066EF0C-0x0066F004
	private float InvertedSpeed(float z); // 0x0066F004-0x0066F0BC
	private float NormalizedJumpCurve(float z); // 0x0066EEF4-0x0066EF0C
	public override void OnActivate(); // 0x0066F0BC-0x0066F3A4
	public override void OnDeactivate(); // 0x0066F4D4-0x0066F604
	private void PositionCoins(float forSpeed); // 0x0066F6A8-0x0066F788
}

public class CoinLine : BaseO // TypeDefIndex: 4194
{
	// Fields
	public float length; // 0x18
	public float coinSpacing; // 0x1C
	private List<TrackObject> activeCoins; // 0x20
	private CoinLineManager coinLineManager; // 0x28
	private CoinPool coinPool; // 0x30
	private float topLevelHight; // 0x38

	// Constructors
	public CoinLine(); // 0x00670144-0x00670160

	// Methods
	protected override void Awake(); // 0x0066F818-0x0066F898
	public override void OnActivate(); // 0x0066F9D4-0x0066FC4C
	public override void OnDeactivate(); // 0x0066FC4C-0x0066FCAC
	public void OnDrawGizmos(); // 0x0066FDF8-0x00670028
	public void RemoveCoins(); // 0x0066FCAC-0x0066FD7C
	public void ToggleCoinVisibility(bool active); // 0x00670028-0x00670144
}

public class CoinLineManager : MonoBehaviour // TypeDefIndex: 4195
{
	// Fields
	private static CoinLineManager instance; // 0x00
	private List<CoinLine> topLevelPlaced; // 0x18

	// Properties
	public static CoinLineManager Instance { get; } // 0x0066F898-0x0066F9D4 

	// Constructors
	public CoinLineManager(); // 0x006703BC-0x0067042C

	// Methods
	public void AddLine(CoinLine line); // 0x00670160-0x006701C8
	public void ClearTopLevelLines(); // 0x006701C8-0x006702AC
	public void RemoveLine(CoinLine line); // 0x0066FD7C-0x0066FDF8
	public void Reset(); // 0x006702AC-0x00670304
	public void ToggleLines(bool active); // 0x00670304-0x006703BC
}

public class CoinPool : MonoBehaviour // TypeDefIndex: 4196
{
	// Fields
	public GameObject coinPrefab; // 0x18
	public int numDeletedPerCleanup; // 0x20
	public float cleanupIntervalInSeconds; // 0x24
	private List<PickupRotate> activeRotatePickups; // 0x28
	private List<TrackObject> coins; // 0x30
	private static CoinPool instance; // 0x00
	private int numberOfActiveCoins; // 0x38
	private int numberOfActiveCoins_high; // 0x3C
	private Vector3 spawnPoint; // 0x40
	private Vector3 spawnSpacing; // 0x4C

	// Properties
	public static CoinPool Instance { get; } // 0x0066EBC8-0x0066ED04 

	// Nested types
	[CompilerGenerated] // 0x00514A10-0x00514A20
	private sealed class _CleanUpCoins_d__11 : IEnumerator<object> // TypeDefIndex: 4197
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public CoinPool __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527AA4-0x00527AB4 */ get; } // 0x00672630-0x00672638 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527AC4-0x00527AD4 */ get; } // 0x0067269C-0x006726A4 

		// Constructors
		[DebuggerHidden] // 0x00527A84-0x00527A94
		public _CleanUpCoins_d__11(int __1__state); // 0x00671D9C-0x00671DC8

		// Methods
		[DebuggerHidden] // 0x00527A94-0x00527AA4
		void IDisposable.Dispose(); // 0x00672464-0x00672468
		private bool MoveNext(); // 0x00672468-0x00672630
		[DebuggerHidden] // 0x00527AB4-0x00527AC4
		void IEnumerator.Reset(); // 0x00672638-0x0067269C
	}

	// Constructors
	public CoinPool(); // 0x0067235C-0x00672464

	// Methods
	public void Awake(); // 0x00671AA0-0x00671B0C
	[IteratorStateMachine] // 0x005229E4-0x00522A48
	private IEnumerator CleanUpCoins(); // 0x00671D28-0x00671D9C
	public TrackObject GetCoin(string from); // 0x0066F3A4-0x0066F4D4
	private void GetCoins(); // 0x00671B0C-0x00671D28
	private TrackObject MakeNewCoin(int coinIndex); // 0x00671DC8-0x00671FB0
	private void OnEnable(); // 0x00671FB0-0x00671FDC
	public void Put(List<TrackObject> coins); // 0x0066F604-0x0066F6A8
	public void Put(TrackObject coin); // 0x00671948-0x00671A48
	private void Update(); // 0x00671FDC-0x00672148
	public void AddActiveRotatePickups(PickupRotate rotate); // 0x00672148-0x006721E0
	public void RemoveActiveRotatePickups(PickupRotate rotate); // 0x006721E0-0x00672278
	public static string FindPath(Transform child); // 0x00672278-0x0067235C
}

public class Curve // TypeDefIndex: 4198
{
	// Fields
	public AnimationCurve curveX; // 0x10
	public AnimationCurve curveY; // 0x18
	public AnimationCurve curveZ; // 0x20
	private float max; // 0x28
	private float min; // 0x2C

	// Constructors
	public Curve(); // 0x00675718-0x0067583C

	// Methods
	public void AddKey(float t, Vector3 value); // 0x0067583C-0x006758DC
	public void AddKey(float t, Vector3 value, Vector3 inTangent, Vector3 outTangent); // 0x006758DC-0x00675A50
	public void DrawGizmos(Color color); // 0x00675A50-0x00675B18
	public Vector3 Evaluate(float t); // 0x00675B18-0x00675BC0
	public void MoveKey(int index, float t, Vector3 value); // 0x00675BC0-0x00675CF4
	public void MoveKey(int index, float t, Vector3 value, Vector3 inTangent, Vector3 outTangent); // 0x00675CF4-0x00675E58
	public void SmoothTangents(int index, float weight); // 0x00675E58-0x00675ECC
}

public class CustomizeControl : MonoBehaviour // TypeDefIndex: 4199
{
	// Fields
	public SkinnedMeshRenderer body; // 0x18
	public SkinnedMeshRenderer[] Skins; // 0x20
	public AnimationClipData clipdata; // 0x28
	public bool adjustAnimation; // 0x30
	public AnimationClip animClip; // 0x38
	public Animation otherAnimation; // 0x40
	public AnimationClip otherAnimClip; // 0x48
	public int frame; // 0x50
	public int totalFrame; // 0x54
	private Animation anim; // 0x58
	private AvatarEyeAnimation eyeAnima; // 0x60

	// Constructors
	public CustomizeControl(); // 0x00676B24-0x00676B2C

	// Methods
	private void Awake(); // 0x00675ECC-0x00675F5C
	private void OnEnable(); // 0x00675F5C-0x00676290
	private void ResetTransform(); // 0x00676290-0x006766CC
	private void OnDisable(); // 0x006766CC-0x00676700
	public void ChangeSkin(int CustomIndx); // 0x00676700-0x006768AC
	public void Flash(Material flash, bool isStart); // 0x006768AC-0x00676940
	private void ChangeMaterials(SkinnedMeshRenderer render, Material mat, bool isStart); // 0x00676940-0x00676B24
}

public class DeviceInfo // TypeDefIndex: 4200
{
	// Fields
	public PerformanceLevel performanceLevel; // 0x10
	public string deviceModel; // 0x18
	public readonly float dpi; // 0x20
	public readonly FormFactor formFactor; // 0x24
	public readonly bool isHighres; // 0x28
	private static DeviceInfo _instance; // 0x00

	// Properties
	public static DeviceInfo Instance { get; } // 0x0067B2C4-0x0067B340 

	// Nested types
	public enum FormFactor // TypeDefIndex: 4201
	{
		iPhone = 0,
		iPad = 1,
		small = 2,
		medium = 3,
		large = 4,
		iPhone5 = 5,
		iPhone6 = 6,
		iPhone6Plus = 7
	}

	public enum PerformanceLevel // TypeDefIndex: 4202
	{
		Low = 0,
		Medium = 1,
		High = 2
	}

	// Constructors
	private DeviceInfo(); // 0x0067AF90-0x0067B050

	// Methods
	private bool isDeviceLowPerformance(); // 0x0067B150-0x0067B2C4
	private bool isTablet(); // 0x0067B050-0x0067B150
}

public class DiscountButton : MonoBehaviour // TypeDefIndex: 4203
{
	// Fields
	[SerializeField] // 0x0051BCF8-0x0051BD08
	protected UISprite icon; // 0x18
	[SerializeField] // 0x0051BD08-0x0051BD18
	protected UILabel description; // 0x20
	[SerializeField] // 0x0051BD18-0x0051BD28
	protected UILabel price; // 0x28
	[SerializeField] // 0x0051BD28-0x0051BD38
	protected UISprite fillGraySprite; // 0x30
	[SerializeField] // 0x0051BD38-0x0051BD48
	protected Transform content; // 0x38
	[SerializeField] // 0x0051BD48-0x0051BD58
	protected GameObject vipTip; // 0x40
	protected Vector3 originalContentPosition; // 0x48
	protected Color32 originalDescriptionColor; // 0x54
	protected Vector3 originalDescriptionPosition; // 0x58
	protected Vector3 originalFillGrayScale; // 0x64
	protected string originalFillGraySpriteName; // 0x70
	protected Vector3 originalPricePosition; // 0x78

	// Constructors
	public DiscountButton(); // 0x0067C16C-0x0067C174

	// Methods
	public virtual void Awake(); // 0x0067BC6C-0x0067BD70
	private void Common(int productIndex); // 0x0067BD70-0x0067BF30
	protected virtual void ShowNoDiscount(int productIndex, string backupDescription = "" /* Metadata: 0x001F64DA */); // 0x0067BF30-0x0067C16C
}

public enum DieType // TypeDefIndex: 4204
{
	Hit = 0,
	Stumble = 1,
	FixedPoint = 2,
	None = 3
}

public class Swipe // TypeDefIndex: 4205
{
	// Fields
	public Vector3 start; // 0x10
	public Vector3 end; // 0x1C
	public float startTime; // 0x28
	public float endTime; // 0x2C

	// Constructors
	public Swipe(); // 0x00FC44B8-0x00FC44C0
}

public class Game : MonoBehaviour // TypeDefIndex: 4206
{
	// Fields
	public bool isDead; // 0x18
	public bool canRevive; // 0x19
	public float FixedSpeed; // 0x1C
	public float currentSpeed; // 0x20
	public float currentLevelSpeed; // 0x24
	public float distancePerMeter; // 0x28
	[SerializeField] // 0x0051BD58-0x0051BD68
	private SwipeInfo swipe; // 0x30
	public SpeedInfo speed; // 0x38
	[SerializeField] // 0x0051BD68-0x0051BD78
	private float backToCheckpointDelayTime; // 0x40
	[SerializeField] // 0x0051BD78-0x0051BD88
	private float backToCheckpointZoomTime; // 0x44
	[SerializeField] // 0x0051BD88-0x0051BD98
	private CharacterAttachmentCollection attachment; // 0x48
	[HideInInspector] // 0x0051BD98-0x0051BDA8
	public Character character; // 0x50
	[HideInInspector] // 0x0051BDA8-0x0051BDB8
	public TrackController trackController; // 0x58
	[SerializeField] // 0x0051BDB8-0x0051BDC8
	private AnimationCurve curve; // 0x60
	private bool firstStart; // 0x68
	public OnPauseChangeDelegate OnPauseChange; // 0x70
	public OnStageMenuSequenceDelegate OnStageMenuSequence; // 0x78
	public OnIntroRunDelegate OnIntroRun; // 0x80
	public Variable<bool> IsInGame; // 0x88
	public Variable<bool> IsInTopMenu; // 0x90
	[HideInInspector] // 0x0051BDC8-0x0051BDD8
	public bool awakeDone; // 0x98
	[HideInInspector] // 0x0051BDD8-0x0051BDE8
	public bool isReadyForSlideinPowerups; // 0x99
	[HideInInspector] // 0x0051BDE8-0x0051BDF8
	public bool wasButtonClicked; // 0x9A
	public bool isRunHua; // 0x9B
	public TopMenuAnimations topMenu; // 0xA0
	public bool Paused; // 0xA8
	public Sky sky; // 0xB0
	public TrackPiece rootTrack; // 0xB8
	private bool _game_paused; // 0xC0
	private bool _unHandlable; // 0xC1
	private Animation characterAnimation; // 0xC8
	private GameCamera characterCamera; // 0xD0
	private static CharacterController characterController; // 0x00
	private CharacterRendering characterRendering; // 0xD8
	public CharacterState characterState; // 0xE0
	private Swipe currentSwipe; // 0xE8
	private IEnumerator currentThread; // 0xF0
	private bool goingBackToCheckpoint; // 0xF8
	public static bool HasLoaded; // 0x08
	private static Game instance; // 0x10
	private float internalStartTime; // 0xFC
	private float lastAccelerationX; // 0x100
	private float t; // 0x104
	private int mRunSecond; // 0x108
	private int mLastRunSecond; // 0x10C
	public Action OnGameEnded; // 0x110
	public Action OnMenuScreenShown; // 0x118
	private Running running; // 0x120
	private Flypack flypack; // 0x128
	private Sprint sprint; // 0x130
	private TraversingCity traversingCity; // 0x138
	private Die die; // 0x140
	public WallWalking wallWalking; // 0x148
	private float startTime; // 0x150
	private float startGameTime; // 0x154
	private GameStats stats; // 0x158
	[HideInInspector] // 0x0051BDF8-0x0051BE08
	public string lastScreenName; // 0x160
	[CompilerGenerated] // 0x0051BE08-0x0051BE18
	private ChangeUseSkill OnChangeSkill; // 0x168
	[CompilerGenerated] // 0x0051BE18-0x0051BE28
	private OnSpeedChangedDelegate OnSpeedChanged; // 0x170
	[CompilerGenerated] // 0x0051BE28-0x0051BE38
	private OnTurboHeadstartInputDelegate OnTurboHeadstartInput; // 0x178
	public bool IsTestChar; // 0x180
	public int preCharacter; // 0x184
	public int preCharacterSkin; // 0x188
	[HideInInspector] // 0x0051BE38-0x0051BE48
	public bool closePopupOnAdEvent; // 0x18C
	private float expCoefficient; // 0x190
	public int newPlayerSkipTaskNum; // 0x194
	[HideInInspector] // 0x0051BE48-0x0051BE58
	public string ad_position; // 0x198
	[HideInInspector] // 0x0051BE58-0x0051BE68
	public string ad_reason; // 0x1A0
	public Getgemfresh OnFreshUIGet; // 0x1A8
	public Camera CharCamInMenu; // 0x1B0
	private int touchCount; // 0x1B8
	private float doubleTapDelay; // 0x1BC
	private Vector2 delta; // 0x1C0
	[HideInInspector] // 0x0051BE68-0x0051BE78
	public string playType; // 0x1C8
	private Character.CriticalHitType type; // 0x1D0
	[HideInInspector] // 0x0051BE78-0x0051BE88
	public DieType dieType; // 0x1D4
	public bool IninvincibleShowChange; // 0x1D8
	[CompilerGenerated] // 0x0051BE88-0x0051BE98
	private string _lastShowAd_k__BackingField; // 0x1E0
	public float IsInReduceSpeedTime; // 0x1E8
	private bool fixspeedInTime; // 0x1EC
	private float fixspeed; // 0x1F0
	public bool UseSkillInSprint; // 0x1F4
	public bool UseSkillInSuperSprint; // 0x1F5

	// Properties
	public DoubleSkillType CurrentSkillType { get; set; } // 0x006915E0-0x00691754 0x00691754-0x006917F8
	public Character Character { get; } // 0x00695B94-0x00695B9C 
	public static CharacterController Charactercontroller { get; } // 0x00695B9C-0x00695CE4 
	public Character.CriticalHitType HitType { get; } // 0x00695CE4-0x00695CEC 
	public Sprint Sprint { get; } // 0x00695CEC-0x00695CF4 
	public static Game Instance { get; } // 0x0068949C-0x0068956C 
	public bool IsInSprintMode { get; } // 0x0068BC9C-0x0068BD10 
	public bool IsInFlypackMode { get; } // 0x00695CF4-0x00695D68 
	public bool IsInWallWalkingMode { get; } // 0x00695D68-0x00695DDC 
	public bool isPaused { get; } // 0x00695DDC-0x00695DE4 
	public Flypack Jetpack { get; } // 0x00695DE4-0x00695DEC 
	public CharacterState CharacterState { get; } // 0x00695DEC-0x00695DF4 
	public CharacterAttachmentCollection Attachment { get; } // 0x00695DF4-0x00695DFC 
	public float NormalizedGameSpeed { get; } // 0x00695DFC-0x00695E24 
	public float DefaultSpeedForAnimation { get; } // 0x00695E24-0x00695E2C 
	public Running Running { get; } // 0x00695E2C-0x00695E34 
	public bool IsInRunningMode { get; } // 0x00695E34-0x00695EA8 
	public bool GoingBackToCheckpoint { get; } // 0x00695EA8-0x00695EB0 
	public string lastShowAd { [CompilerGenerated] /* 0x00522D64-0x00522D74 */ get; [CompilerGenerated] /* 0x00522D74-0x00522D84 */ set; } // 0x00695EB0-0x00695EB8 0x00695EB8-0x00695EC0
	public bool IsPoolTrack { get; } // 0x00695EC0-0x00695F7C 
	public bool IsHillTrack { get; } // 0x00695F7C-0x00696038 
	public bool IsFixedSpeed { get; } // 0x00696258-0x006963BC 
	public TrackIdxPro NoCharacterctlIdx { get; } // 0x006963BC-0x00696484 

	// Events
	public event ChangeUseSkill OnChangeSkill {
		add; // 0x006911F0-0x00691298
		remove; // 0x00691298-0x00691340
	}
	public event OnSpeedChangedDelegate OnSpeedChanged {
		add; // 0x00691340-0x006913E8
		remove; // 0x006913E8-0x00691490
	}
	public event OnTurboHeadstartInputDelegate OnTurboHeadstartInput {
		add; // 0x00691490-0x00691538
		remove; // 0x00691538-0x006915E0
	}

	// Nested types
	public delegate void Getgemfresh(); // TypeDefIndex: 4207; 0x006957D8-0x006959F4

	public delegate void OnGameOverDelegate(GameStats gameStats); // TypeDefIndex: 4208; 0x00697D00-0x006980B4

	public delegate void OnIntroRunDelegate(); // TypeDefIndex: 4209; 0x00644DD0-0x00644FEC

	public delegate void OnPauseChangeDelegate(bool pause); // TypeDefIndex: 4210; 0x0064503C-0x00645280

	public delegate void OnSpeedChangedDelegate(float speed); // TypeDefIndex: 4211; 0x0064532C-0x00645578

	public delegate void ChangeUseSkill(); // TypeDefIndex: 4212; 0x00696494-0x006966B0

	public delegate void OnStageMenuSequenceDelegate(); // TypeDefIndex: 4213; 0x00645620-0x0064583C

	public delegate void OnTopMenuDelegate(); // TypeDefIndex: 4214; 0x0064588C-0x00645AA8

	public delegate void OnTurboHeadstartInputDelegate(); // TypeDefIndex: 4215; 0x00645AF8-0x00645D14

	[Serializable]
	public class SpeedInfo // TypeDefIndex: 4216
	{
		// Fields
		public float min; // 0x10
		public float max; // 0x14
		public float rampUpDuration; // 0x18

		// Constructors
		public SpeedInfo(); // 0x00645D54-0x00645D70
	}

	[Serializable]
	public class SwipeInfo // TypeDefIndex: 4217
	{
		// Fields
		public float distanceMin; // 0x10
		public float doubleTapDuration; // 0x14

		// Constructors
		public SwipeInfo(); // 0x00645D70-0x00645D8C
	}

	[Serializable]
	[CompilerGenerated] // 0x00514A20-0x00514A30
	private sealed class __c // TypeDefIndex: 4218
	{
		// Fields
		public static readonly __c __9; // 0x00
		public static Action __9__89_0; // 0x08
		public static Action __9__89_1; // 0x10

		// Constructors
		static __c(); // 0x006967C0-0x00696824
		public __c(); // 0x00696824-0x0069682C

		// Methods
		internal void _PayResult_b__89_0(); // 0x0069682C-0x006968A0
		internal void _PayResult_b__89_1(); // 0x006968A0-0x00696914
	}

	[CompilerGenerated] // 0x00514A30-0x00514A40
	private sealed class _TopMenu_d__114 : IEnumerator<object> // TypeDefIndex: 4219
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Game __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527AF4-0x00527B04 */ get; } // 0x00697BDC-0x00697BE4 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527B14-0x00527B24 */ get; } // 0x00697C48-0x00697C50 

		// Constructors
		[DebuggerHidden] // 0x00527AD4-0x00527AE4
		public _TopMenu_d__114(int __1__state); // 0x006940C4-0x006940F0

		// Methods
		[DebuggerHidden] // 0x00527AE4-0x00527AF4
		void IDisposable.Dispose(); // 0x00697998-0x0069799C
		private bool MoveNext(); // 0x0069799C-0x00697BDC
		[DebuggerHidden] // 0x00527B04-0x00527B14
		void IEnumerator.Reset(); // 0x00697BE4-0x00697C48
	}

	[CompilerGenerated] // 0x00514A40-0x00514A50
	private sealed class _Intro_d__115 : IEnumerator<object> // TypeDefIndex: 4220
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Game __4__this; // 0x20
		private float _time_5__2; // 0x28
		private float _fov_start_5__3; // 0x2C
		private float _fov_end_5__4; // 0x30

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527B44-0x00527B54 */ get; } // 0x006972B8-0x006972C0 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527B64-0x00527B74 */ get; } // 0x00697324-0x0069732C 

		// Constructors
		[DebuggerHidden] // 0x00527B24-0x00527B34
		public _Intro_d__115(int __1__state); // 0x00694164-0x00694190

		// Methods
		[DebuggerHidden] // 0x00527B34-0x00527B44
		void IDisposable.Dispose(); // 0x00696C6C-0x00696C70
		private bool MoveNext(); // 0x00696C70-0x006972B8
		[DebuggerHidden] // 0x00527B54-0x00527B64
		void IEnumerator.Reset(); // 0x006972C0-0x00697324
	}

	[CompilerGenerated] // 0x00514A50-0x00514A60
	private sealed class _GameIntro_d__117 : IEnumerator<object> // TypeDefIndex: 4221
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Game __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527B94-0x00527BA4 */ get; } // 0x00696BF8-0x00696C00 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527BB4-0x00527BC4 */ get; } // 0x00696C64-0x00696C6C 

		// Constructors
		[DebuggerHidden] // 0x00527B74-0x00527B84
		public _GameIntro_d__117(int __1__state); // 0x006943D4-0x00694400

		// Methods
		[DebuggerHidden] // 0x00527B84-0x00527B94
		void IDisposable.Dispose(); // 0x00696AF4-0x00696AF8
		private bool MoveNext(); // 0x00696AF8-0x00696BF8
		[DebuggerHidden] // 0x00527BA4-0x00527BB4
		void IEnumerator.Reset(); // 0x00696C00-0x00696C64
	}

	[CompilerGenerated] // 0x00514A60-0x00514A70
	private sealed class _BackToCheckPointSequence_d__123 : IEnumerator<object> // TypeDefIndex: 4222
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Game __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527BE4-0x00527BF4 */ get; } // 0x00696A80-0x00696A88 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527C04-0x00527C14 */ get; } // 0x00696AEC-0x00696AF4 

		// Constructors
		[DebuggerHidden] // 0x00527BC4-0x00527BD4
		public _BackToCheckPointSequence_d__123(int __1__state); // 0x00694A74-0x00694AA0

		// Methods
		[DebuggerHidden] // 0x00527BD4-0x00527BE4
		void IDisposable.Dispose(); // 0x00696914-0x00696918
		private bool MoveNext(); // 0x00696918-0x00696A80
		[DebuggerHidden] // 0x00527BF4-0x00527C04
		void IEnumerator.Reset(); // 0x00696A88-0x00696AEC
	}

	[CompilerGenerated] // 0x00514A70-0x00514A80
	private sealed class _SkipRevive_d__129 : IEnumerator<object> // TypeDefIndex: 4223
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Game __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527C34-0x00527C44 */ get; } // 0x00697728-0x00697730 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527C54-0x00527C64 */ get; } // 0x00697794-0x0069779C 

		// Constructors
		[DebuggerHidden] // 0x00527C14-0x00527C24
		public _SkipRevive_d__129(int __1__state); // 0x00695278-0x006952A4

		// Methods
		[DebuggerHidden] // 0x00527C24-0x00527C34
		void IDisposable.Dispose(); // 0x00697660-0x00697664
		private bool MoveNext(); // 0x00697664-0x00697728
		[DebuggerHidden] // 0x00527C44-0x00527C54
		void IEnumerator.Reset(); // 0x00697730-0x00697794
	}

	[CompilerGenerated] // 0x00514A80-0x00514A90
	private sealed class _StumbleDeathSequence_d__134 : IEnumerator<object> // TypeDefIndex: 4224
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Game __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527C84-0x00527C94 */ get; } // 0x00697924-0x0069792C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527CA4-0x00527CB4 */ get; } // 0x00697990-0x00697998 

		// Constructors
		[DebuggerHidden] // 0x00527C64-0x00527C74
		public _StumbleDeathSequence_d__134(int __1__state); // 0x006955B0-0x006955DC

		// Methods
		[DebuggerHidden] // 0x00527C74-0x00527C84
		void IDisposable.Dispose(); // 0x0069779C-0x006977A0
		private bool MoveNext(); // 0x006977A0-0x00697924
		[DebuggerHidden] // 0x00527C94-0x00527CA4
		void IEnumerator.Reset(); // 0x0069792C-0x00697990
	}

	[CompilerGenerated] // 0x00514A90-0x00514AA0
	private sealed class _OnInvincibleShowChange_d__137 : IEnumerator<object> // TypeDefIndex: 4225
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Game __4__this; // 0x20
		private float _addTime_5__2; // 0x28
		private float _time_5__3; // 0x2C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527CD4-0x00527CE4 */ get; } // 0x006974B0-0x006974B8 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527CF4-0x00527D04 */ get; } // 0x0069751C-0x00697524 

		// Constructors
		[DebuggerHidden] // 0x00527CB4-0x00527CC4
		public _OnInvincibleShowChange_d__137(int __1__state); // 0x006956B4-0x006956E0

		// Methods
		[DebuggerHidden] // 0x00527CC4-0x00527CD4
		void IDisposable.Dispose(); // 0x0069732C-0x00697330
		private bool MoveNext(); // 0x00697330-0x006974B0
		[DebuggerHidden] // 0x00527CE4-0x00527CF4
		void IEnumerator.Reset(); // 0x006974B8-0x0069751C
	}

	[CompilerGenerated] // 0x00514AA0-0x00514AB0
	private sealed class _SetfixSpeedInTime_d__197 : IEnumerator<object> // TypeDefIndex: 4226
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Game __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527D24-0x00527D34 */ get; } // 0x006975EC-0x006975F4 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527D44-0x00527D54 */ get; } // 0x00697658-0x00697660 

		// Constructors
		[DebuggerHidden] // 0x00527D04-0x00527D14
		public _SetfixSpeedInTime_d__197(int __1__state); // 0x0069622C-0x00696258

		// Methods
		[DebuggerHidden] // 0x00527D14-0x00527D24
		void IDisposable.Dispose(); // 0x00697524-0x00697528
		private bool MoveNext(); // 0x00697528-0x006975EC
		[DebuggerHidden] // 0x00527D34-0x00527D44
		void IEnumerator.Reset(); // 0x006975F4-0x00697658
	}

	// Constructors
	public Game(); // 0x006966B0-0x006967C0

	// Methods
	private SwipeDir AnalyzeSwipe(Swipe swipe); // 0x006917F8-0x00691B28
	public void Awake(); // 0x00691B28-0x00691EC4
	public void Start(); // 0x00691F00-0x00691F88
	private void OnEnable(); // 0x00691FFC-0x00692138
	private void OnDisable(); // 0x00692138-0x00692288
	public void ResetTest(bool quit = false /* Metadata: 0x001F64EE */); // 0x00692288-0x0069239C
	public void TestCharacter(Characters.CharacterType characterType, int themeId); // 0x0069239C-0x0069245C
	public bool IsInTest(); // 0x0069245C-0x00692464
	public void OnFreeReward(RiseSdk.AdEventType type, int id, string tag, int eventType); // 0x00692464-0x006927F8
	public void PayResult(RiseSdk.PaymentResult result, int billId); // 0x006927F8-0x00692EAC
	public void Pause(bool active); // 0x00692EAC-0x00692F9C
	public void ChangeCurrentSpeed(float timeOffset); // 0x00692F9C-0x00692FAC
	public void ChangeState(CharacterState state); // 0x0068AE68-0x0068AF0C
	public void ChangeState(CharacterState state, IEnumerator thread); // 0x00692FAC-0x00692FB8
	public bool IsCharacterState(CharacterState state); // 0x00692FB8-0x00693034
	public Dictionary<LevelExpManager.LevelAwardType, int> GetTaskLevelRewards(float level); // 0x00693034-0x00693314
	public LevelExpManager.PrizeEntry GetLevelFreeViewBox(float level); // 0x00693314-0x00693530
	public float GetExpCoefficient(int level); // 0x00693530-0x006936EC
	public float GetExpCoefficient(); // 0x006936EC-0x00693764
	public float GetStartGameDuration(); // 0x00693764-0x00693790
	public float GetDuration(); // 0x00693790-0x006937BC
	public void HandleControls(); // 0x0068A6B4-0x0068A994
	private void HandleDebugControls(); // 0x006937BC-0x00693B54
	private float Speed(float t, SpeedInfo speedInfo); // 0x00691EC4-0x00691F00
	public void NewPlayerRunDuration(); // 0x00693C04-0x00693C08
	public void NormalPlayerRunDuration(); // 0x00693C08-0x00693C0C
	public void TriggerPause(bool pauseGame); // 0x00693C0C-0x00693CC8
	public void HandlePause(bool unhandlale); // 0x00693CC8-0x00693CD4
	public void Update(); // 0x00693CD4-0x00693F90
	public void UpdateMeters(); // 0x0068A994-0x0068AA30
	public void InitTrackRoot(); // 0x00693F90-0x00694050
	[IteratorStateMachine] // 0x00522AA8-0x00522B0C
	private IEnumerator TopMenu(); // 0x00694050-0x006940C4
	[IteratorStateMachine] // 0x00522B0C-0x00522B70
	private IEnumerator Intro(); // 0x006940F0-0x00694164
	private void StageMenuSequence(); // 0x00694190-0x006943D4
	[IteratorStateMachine] // 0x00522B70-0x00522BD4
	private IEnumerator GameIntro(); // 0x00691F88-0x00691FFC
	public void StartTopMenu(); // 0x00694400-0x006944C8
	public void StartGame(); // 0x006944C8-0x00694604
	public void StartNewRun(bool duel); // 0x00694604-0x00694834
	private void SendRunCharCount(); // 0x006948B4-0x00694A00
	[IteratorStateMachine] // 0x00522BD4-0x00522C38
	private IEnumerator BackToCheckPointSequence(); // 0x00694A00-0x00694A74
	public void SetToMine(bool IsStart); // 0x00694AA0-0x00694BC0
	public void SetToHill(bool IsStart); // 0x00694BC0-0x00694CE0
	public void SetToHillOut(bool IsStart); // 0x00694CE0-0x00694E38
	public void WillDie(); // 0x00694E38-0x00694FA8
	public void Revive(); // 0x00694FA8-0x006950C4
	[IteratorStateMachine] // 0x00522C38-0x00522C9C
	public IEnumerator SkipRevive(); // 0x00695204-0x00695278
	public void OnCriticalHit(Character.CriticalHitType type); // 0x006952A4-0x00695444
	public void OnStumble(Character.StumbleType stumbleType, Character.StumbleHorizontalHit horizontalHit, Character.StumbleVerticalHit verticalHit, string colliderName); // 0x00695444-0x0069553C
	[IteratorStateMachine] // 0x00522C9C-0x00522D00
	private IEnumerator StumbleDeathSequence(); // 0x0069553C-0x006955B0
	public void OnStartWall(SwipeDir dir, Wall wall); // 0x006955DC-0x006956B4
	[IteratorStateMachine] // 0x00522D00-0x00522D64
	private IEnumerator OnInvincibleShowChange(); // 0x006950C4-0x00695138
	private bool random(int max); // 0x006956E0-0x00695714
	public void GetLuckGem(); // 0x00695714-0x006957D8
	public void Megaheadstart(); // 0x00693B54-0x00693BD4
	public void PickupFlypack(); // 0x0068B3EC-0x0068B424
	public void PickupSprint(); // 0x00693BD4-0x00693C04
	public void PickupTransition(); // 0x00695A54-0x00695A5C
	public void StartFlypack(); // 0x006959F4-0x00695A1C
	public void StartSprint(); // 0x00695A1C-0x00695A54
	private void OnInvincibleShowChange(bool enable, bool force = false /* Metadata: 0x001F64EF */); // 0x00695A5C-0x00695B64
	private void OnSprintStart(); // 0x00695B64-0x00695B90
	private void OnSprintEnd(); // 0x00694834-0x00694890
	public void OnCoinMagnetEnd(); // 0x00694890-0x006948B4
	public void ReviveInvincible(); // 0x00695B90-0x00695B94
	public void SetfixspeddHitRobber(); // 0x00696038-0x006961B8
	[IteratorStateMachine] // 0x00522D84-0x00522DE8
	private IEnumerator SetfixSpeedInTime(); // 0x006961B8-0x0069622C
	public void OnChangeSKILL(); // 0x00696484-0x00696494
	public void SetCharacterControllerEnable(bool ctlenable); // 0x00695138-0x00695204
}

public class GameStats // TypeDefIndex: 4227
{
	// Fields
	public float duration; // 0x10
	public Action OnCoinsChanged; // 0x18
	public Action OnGameOverPlayLotteryCountIncreased; // 0x20
	public Action OnScoreChanged; // 0x28
	public Action OnJumpsChanged; // 0x30
	public Action OnRollsChanged; // 0x38
	public Action OnChestsChanged; // 0x40
	public Action OnCoinsWithHelmetChanged; // 0x48
	public Action<float> OnHelmetInCooling; // 0x50
	public float meters; // 0x58
	public float metersRunLeftTrack; // 0x5C
	public float metersRunCenterTrack; // 0x60
	public float metersRunRightTrack; // 0x64
	public float metersFly; // 0x68
	public float metersRunGround; // 0x6C
	public float metersRunTrain; // 0x70
	public float metersRunStation; // 0x74
	public int trackChanges; // 0x78
	private int _reviveCount; // 0x7C
	private int _allCoinsInFlypack; // 0x80
	private int _amountLeftToConsume; // 0x84
	private int _barrierHit; // 0x88
	private int _coinCollectedOnLeftTrack; // 0x8C
	private int _coinMagnetsPickups; // 0x90
	private int _coinsCoinMagnet; // 0x94
	private int _coinsCollectedOnCenterTrack; // 0x98
	private int _coinsCollectedOnRightTrack; // 0x9C
	private int _coinsInAir; // 0xA0
	private int _coinsNotTouchingGround; // 0xA4
	private int _coinsWithSpringJump; // 0xA8
	private int _coinsWithHelmet; // 0xAC
	private int _rollUnderBarrier; // 0xB0
	private int _doubleMultiplierPickups; // 0xB4
	private int _grindedTrains; // 0xB8
	private int _guardHitScreen; // 0xBC
	private int _guardFallWater; // 0xC0
	private int _flypackPickups; // 0xC4
	private int _jumpBarrier; // 0xC8
	private int _jumpHighBarrier; // 0xCC
	private int _jumps; // 0xD0
	private List<ActiveProp> _listOfActivePowerups; // 0xD8
	private float _meterScore; // 0xE0
	private float _metersLastUsedForScore; // 0xE4
	private Dictionary<PropType, bool> _taskEachPowerupPickupStatus; // 0xE8
	private int _trainHit; // 0xF0
	private int _busHit; // 0xF4
	private int _carHit; // 0xF8
	private int _flowerBedHit; // 0xFC
	private int _movingTrainHit; // 0x100
	private int _movingBusHit; // 0x104
	private int _movingCarHit; // 0x108
	private int _jumpsOverTrains; // 0x10C
	private int _jumpsOverBuses; // 0x110
	private int _jumpsOverCars; // 0x114
	private int _fallIntoWater; // 0x118
	private int _chestPickups; // 0x11C
	private int _sprintPickups; // 0x120
	private int _pickedUpPowerups; // 0x124
	private int _powerJumperPickups; // 0x128
	private int _rolls; // 0x12C
	private int _rollsCenterTrack; // 0x130
	private int _rollsLeftTrack; // 0x134
	private int _rollsRightTrack; // 0x138
	private int _saveMeSymbolPickup; // 0x13C
	private int _score; // 0x140
	private bool _scoreBooster5Activated; // 0x144
	private bool _scoreBooster10Activated; // 0x145
	private int _superChestPickups; // 0x148
	private int _superShoesPickups; // 0x14C
	private int _shieldPickups; // 0x150
	private int _xoredNumberOfCoins; // 0x154
	private static GameStats instance; // 0x00
	private bool pausePowerups; // 0x158
	private int _gameOverPlayLotteryCount; // 0x15C
	public int CoinNum; // 0x160
	public bool AutoOpenGlobalShow; // 0x164
	public float LastCurGetCollectNum; // 0x168
	public float LastCollectZ; // 0x16C
	public bool FisrtAfterGameover; // 0x170
	private bool AutonOpenWeekAndGlobal; // 0x171
	public int GameoverMenuBackMainTimes; // 0x174
	private bool FirstStartFreerole; // 0x178
	private bool AppstartOpenFreeRole; // 0x179

	// Properties
	public int allCoinsInFlypack { get; set; } // 0x00650BD8-0x00650BE0 0x00650BE0-0x00650BE8
	public int barrierHit { get; set; } // 0x00650BE8-0x00650BF0 0x006500E0-0x00650184
	public int coinMagnetsPickups { get; set; } // 0x00650BF0-0x00650BF8 0x006503C4-0x006504E4
	public int coins { get; set; } // 0x00648814-0x00648880 0x0064BAC8-0x0064BBC4
	public int coinsCoinMagnet { get; set; } // 0x00650BF8-0x00650C00 0x0064F1CC-0x0064F270
	public int coinsCollectedOnCenterTrack { get; set; } // 0x00650C00-0x00650C08 0x00650C08-0x00650CAC
	public int coinsCollectedOnLeftTrack { get; set; } // 0x00650CAC-0x00650CB4 0x00650CB4-0x00650D58
	public int coinsCollectedOnRightTrack { get; set; } // 0x00650D58-0x00650D60 0x00650D60-0x00650E04
	public int coinsInAir { get; set; } // 0x00650E04-0x00650E0C 0x00650E0C-0x00650EB0
	public int coinsNotTouchingGround { get; set; } // 0x00650EB0-0x00650EB8 0x00650EB8-0x00650EC0
	public int coinsWithFlypack { get; set; } // 0x00650EC0-0x00650EC8 0x0064F298-0x0064F33C
	public int coinsWithSpringJump { get; set; } // 0x00650EC8-0x00650ED0 0x00650ED0-0x00650F74
	public int coinsWithHelmet { get; set; } // 0x00650F74-0x00650F7C 0x0064F270-0x0064F298
	public int reviveCount { get; set; } // 0x00650F7C-0x00650F84 0x00650F84-0x00650F8C
	public int rollUnderBarrier { get; set; } // 0x00650F8C-0x00650F94 0x0064F7D0-0x0064F894
	public int doubleMultiplierPickups { get; set; } // 0x00650F94-0x00650F9C 0x00650618-0x00650738
	public int grindedTrains { get; set; } // 0x00650F9C-0x00650FA4 0x00650FA4-0x00650FAC
	public int guardHitScreen { get; set; } // 0x00650FAC-0x00650FB4 0x00650FB4-0x00650FBC
	public int guardFallWater { get; set; } // 0x00650FBC-0x00650FC4 0x00650FC4-0x00650FCC
	public static GameStats Instance { get; } // 0x00648778-0x006487F4 
	public int flypackPickups { get; set; } // 0x00651064-0x0065106C 0x00650184-0x006502A4
	public int jumpBarrier { get; set; } // 0x0065106C-0x00651074 0x0064F894-0x0064F958
	public int jumpHighBarrier { get; set; } // 0x00651074-0x0065107C 0x0065107C-0x00651084
	public int jumps { get; set; } // 0x00651084-0x0065108C 0x0064F44C-0x0064F518
	public Dictionary<PropType, bool> TaskEachPowerupPickupStatus { get; } // 0x0065108C-0x00651094 
	public int fallIntoWater { get; set; } // 0x00651094-0x0065109C 0x0065109C-0x006510A4
	public int gameOverPlayLotteryCount { get; set; } // 0x006510A4-0x006510AC 0x006487F4-0x00648814
	public int chestPickups { get; set; } // 0x006510AC-0x006510B4 0x006510B4-0x00651174
	public bool PAUSEPOWERUPS { get; set; } // 0x00651174-0x0065117C 0x0065117C-0x00651188
	public int pickedUpPowerups { get; set; } // 0x00651188-0x00651190 0x006504E4-0x00650618
	public int powerJumperPickups { get; set; } // 0x00651190-0x00651198 0x00651198-0x0065123C
	public int rolls { get; set; } // 0x0065123C-0x00651244 0x0064F518-0x0064F5E4
	public int rollsCenterTrack { get; set; } // 0x00651244-0x0065124C 0x0064F688-0x0064F72C
	public int rollsLeftTrack { get; set; } // 0x0065124C-0x00651254 0x0064F5E4-0x0064F688
	public int rollsRightTrack { get; set; } // 0x00651254-0x0065125C 0x0064F72C-0x0064F7D0
	public int saveMeSymbolPickup { get; set; } // 0x0065125C-0x00651264 0x00651264-0x00651308
	public int score { get; set; } // 0x00649D1C-0x00649D34 0x0064DE90-0x0064DEA4
	public bool scoreBooster5Activated { get; set; } // 0x00651308-0x00651310 0x0064F33C-0x0064F3C4
	public bool scoreBooster10Activated { get; set; } // 0x00651310-0x00651318 0x0064F3C4-0x0064F44C
	public int superChestPickups { get; set; } // 0x00651318-0x00651320 0x00651320-0x00651328
	public int superShoesPickups { get; set; } // 0x00651328-0x00651330 0x006502A4-0x006503C4
	public int jumpsOverTrains { get; set; } // 0x00651330-0x00651338 0x0064F958-0x0064F9FC
	public int jumpsOverBuses { get; set; } // 0x00651338-0x00651340 0x0064F9FC-0x0064FAA0
	public int jumpsOverCars { get; set; } // 0x00651340-0x00651348 0x0064FAA0-0x0064FB44
	public int trainHit { get; set; } // 0x00651348-0x00651350 0x0064FB44-0x0064FBE8
	public int movingTrainHit { get; set; } // 0x00651350-0x00651358 0x0064FBE8-0x0064FC8C
	public int busHit { get; set; } // 0x00651358-0x00651360 0x0064FC8C-0x0064FD30
	public int movingBusHit { get; set; } // 0x00651360-0x00651368 0x0064FD30-0x0064FDD4
	public int carHit { get; set; } // 0x00651368-0x00651370 0x0064FDD4-0x0064FE78
	public int movingCarHit { get; set; } // 0x00651370-0x00651378 0x0064FE78-0x0064FF1C
	public int flowerBedHit { get; set; } // 0x00651378-0x00651380 0x0064FF1C-0x0064FFC0
	public int shieldPickups { get; set; } // 0x00651380-0x00651388 0x0064FFC0-0x006500E0
	public int sprintPickups { get; set; } // 0x00651388-0x00651390 0x00651390-0x006514B0
	public int GlobalActiveMeters { get; set; } // 0x0064C6F8-0x0064C748 0x0064C748-0x0064C7AC
	public int CurCollectionNum { get; set; } // 0x006514B0-0x00651500 0x00651500-0x00651564
	public int GlobalRewardIdx { get; set; } // 0x00651564-0x006515B4 0x006515B4-0x00651618
	public bool WeekCollectRewardGet { get; set; } // 0x00651618-0x00651674 0x00651674-0x006516D4
	public string WeekLocalKey { get; set; } // 0x006516D4-0x0065172C 0x0065172C-0x00651780
	public string BattlePassLocalKey { get; set; } // 0x00651780-0x006517D8 0x006517D8-0x0065182C
	public string BattlePassLocalNewComing { get; set; } // 0x0065182C-0x00651884 0x00651884-0x006518D8
	public string WeeklyLocalNewComing { get; set; } // 0x006518D8-0x00651930 0x00651930-0x00651984
	public bool IsCollectFull { get; } // 0x00651984-0x006519D8 
	public int GameoverTimes { get; set; } // 0x0064C274-0x0064C2C4 0x0064C2C4-0x0064C318
	public int GameoverFirsTLockjungle { get; set; } // 0x0064C954-0x0064C9A4 0x0064C9A4-0x0064C9F8
	public bool GuideNewVersion { get; set; } // 0x0064BC44-0x0064BC90 0x006519D8-0x00651A28
	public string AutoOpenGlobalShowVersion { get; set; } // 0x00651A28-0x00651A80 0x00651A80-0x00651AD4
	public bool TodayHaveTryPlayForest { get; set; } // 0x00651AD4-0x00651B30 0x00651B30-0x00651B90
	private int GlobalFreeRoleVideoPuzzle { get; set; } // 0x00651B90-0x00651BE0 0x00651BE0-0x00651C44
	public bool AutoOpenTaskPopup { get; } // 0x00651D40-0x00651ED4 
	public bool AutoOpenFreeRolePopup { get; } // 0x00652218-0x006523CC 
	public bool NewSkillTipShow { get; set; } // 0x006523CC-0x006524A0 0x006524A0-0x00652630
	public static int tutorialUpgradeSkill { get; set; } // 0x00652630-0x006526F4 0x006526F4-0x00652748

	// Nested types
	public delegate void CoinsChangedIngame(); // TypeDefIndex: 4228; 0x00652840-0x00652A5C

	// Constructors
	public GameStats(); // 0x00650FCC-0x00651064

	// Methods
	private void _AddScoreForPickup(bool wasPowerup); // 0x0064DCF8-0x0064DE90
	public void AddScoreForPickup(PropType type); // 0x0064DEA4-0x0064DECC
	public void CalculateScore(); // 0x0064DECC-0x0064E728
	public void ClearPowerups(); // 0x0064E728-0x0064E7B8
	public static int CoinToScoreConversion(int coins); // 0x0064BBC4-0x0064BC44
	public List<ActiveProp> GetActivePowerups(); // 0x0064E7B8-0x0064E7C0
	public void RemoveHoverHelmPowerup(); // 0x0064E7C0-0x0064E8A4
	public void RemoveShieldPowerup(); // 0x0064E8A4-0x0064E98C
	public void RemoveSprintPowerup(); // 0x0064E98C-0x0064EA74
	public bool HaveSprintPowerUp(); // 0x0064EA74-0x0064EB20
	private void ReportOneOfEachPowerupIfApplicable(PropType powerupType); // 0x0064EB20-0x0064EC50
	public void Reset(); // 0x0064EC50-0x0064F1BC
	public void ResetScore(); // 0x0064F1BC-0x0064F1CC
	public ActiveProp RegisterPowerup(PropType type); // 0x00650738-0x00650924
	public void UpdatePowerupTimes(float deltaTime); // 0x00650924-0x00650BD8
	public void FreeRoleVideoLockedIdx(int curidx); // 0x00651C44-0x00651CC4
	public bool IsRoleVideoLocked(int curIdx); // 0x00651CC4-0x00651D40
	public static void recordSceneRun(bool IsGameover, int deathTime, int subsceneID, float gametime); // 0x0064B034-0x0064B98C
}

public class GlobalColors // TypeDefIndex: 4229
{
	// Fields
	public static readonly Dictionary<UIButtonOverlayOff.ButtonType, ButtonColorScheme> buttonColorData; // 0x00
	public static readonly Color32 PRIMARY_ACTION_COLOR; // 0x08
	private static readonly Color32 PRIMARY_ACTION_COLOR_LIGHT; // 0x0C
	private static readonly Color32 PRIMARY_ACTION_COLOR_SELECTED; // 0x10
	public static readonly Color32 PRIMARY_ACTION_COLOR_UNAVAILABLE; // 0x14
	public static readonly Color32 TERTIARY_ACTION_COLOR; // 0x18
	private static readonly Color32 TERTIARY_ACTION_COLOR_LIGHT; // 0x1C
	private static readonly Color32 TERTIARY_ACTION_COLOR_SELECTED; // 0x20
	public static readonly Color32 TERTIARY_ACTION_COLOR_UNAVAILABLE; // 0x24
	public static readonly Color32 FOOTER_ACTION_COLOR; // 0x28
	private static readonly Color32 FOOTER_ACTION_COLOR_LIGHT; // 0x2C
	private static readonly Color32 FOOTER_ACTION_COLOR_SELECTED; // 0x30
	public static readonly Color32 FOOTER_ACTION_COLOR_UNAVAILABLE; // 0x34

	// Constructors
	static GlobalColors(); // 0x00653DE0-0x006542C8
	public GlobalColors(); // 0x006544B8-0x006544C0

	// Methods
	public static ButtonColorScheme GetButtonColorScheme(UIButtonOverlayOff.ButtonType buttonType, GameObject gameObject); // 0x006542C8-0x006544B8
}

public class GlobalInit : MonoBehaviour // TypeDefIndex: 4230
{
	// Fields
	private const string English = "english"; // Metadata: 0x001F64F0
	private const string ChineseSimplified = "chinese"; // Metadata: 0x001F64FB
	private const string ChineseTraditional = "chinese_traditional"; // Metadata: 0x001F6506
	private const string Japanese = "japanese"; // Metadata: 0x001F651D
	public bool debug; // 0x18
	public EnvType envType_debug; // 0x1C
	public EnvType[] envTypes; // 0x20
	public bool firstLoad; // 0x28
	public List<RobberModel> robbermodelList; // 0x30
	public Editorlanguage LanguageKey; // 0x38
	public Strings.DocumentFormat documentFormat; // 0x3C
	private bool _isFocused; // 0x40
	public static GlobalInit Instance; // 0x00

	// Properties
	public bool PlanB { get; set; } // 0x006544C0-0x0065451C 0x0065451C-0x00654580
	public bool IsFirstSetFirstEnv { get; } // 0x00654580-0x006545CC 
	public EnvType firstEnvType { get; set; } // 0x00652748-0x00652830 0x006545CC-0x0065463C
	private string languageKey { get; } // 0x0065463C-0x006546B4 
	public bool GiftRemoteShow { get; } // 0x0065662C-0x00656664 
	public bool DoubleCoinGiftRemoteShow { get; } // 0x00656664-0x0065669C 

	// Nested types
	public enum Editorlanguage // TypeDefIndex: 4231
	{
		english = 0,
		chinese = 1,
		chinese_traditional = 2,
		japanese = 3
	}

	// Constructors
	public GlobalInit(); // 0x0065669C-0x00656764

	// Methods
	public void ResetRobberlist(); // 0x006546B4-0x00654754
	private void Awake(); // 0x00654754-0x00654EBC
	private void Start(); // 0x00656368-0x006563F0
	private void CheckPlayerLevel(); // 0x006551F4-0x00655A04
	private void CheckGameOverDoubleVideo(); // 0x00655A04-0x00656368
	private void CheckSendSingleUserTime(); // 0x0065511C-0x00655188
	private void CheckSendDayEverageTime(); // 0x00655188-0x006551F4
	public string SelectLanguage(); // 0x00654EBC-0x00654FE8
	private void Update(); // 0x006563F0-0x00656488
	private void ResetEveryDay(); // 0x00656488-0x006564AC
	private bool Istoday(); // 0x006564AC-0x0065655C
	private string todaystr(); // 0x0065655C-0x0065662C
	private void resetcutomattributedata(); // 0x00654FE8-0x0065511C
}

public class Globals // TypeDefIndex: 4232
{
	// Fields
	private static List<AddedAnimationEventInfo> addedAnimEvents; // 0x00

	// Properties
	public static string AppStoreURL { get; } // 0x0065D2A4-0x0065D2EC 

	// Nested types
	private struct AddedAnimationEventInfo // TypeDefIndex: 4233
	{
		// Fields
		public Animation animation; // 0x00
		public string clipName; // 0x08
		public float time; // 0x10
		public string functionName; // 0x18

		// Constructors
		public AddedAnimationEventInfo(Animation animation, string clipName, float time, string functionName); // 0x0058009C-0x00580194
	}

	public enum LogInState // TypeDefIndex: 4234
	{
		Offline = 0,
		Facebook = 1,
		GameCenter = 2,
		Both = 3
	}

	// Constructors
	static Globals(); // 0x0065C53C-0x0065C5B0
	public Globals(); // 0x0065D2EC-0x0065D2F4

	// Methods
	public static string[] convertAllBoolToString(bool[] array); // 0x0065C5B0-0x0065C6A8
	public static string[] convertAllIntToString(int[] array); // 0x0065C6A8-0x0065C7A0
	public static bool[] convertAllStringToBool(string[] array); // 0x0065C7A0-0x0065C8A4
	public static int[] convertAllStringToInt(string[] array); // 0x0065C8A4-0x0065C978
	public static string convertEnumBoolDictionaryToString<T>(Dictionary<T, bool> sourceDict);
	public static string convertEnumIntArrayDictionaryToString<T>(Dictionary<T, int[]> sourceDict);
	public static string convertEnumIntDictionaryToString<T>(Dictionary<T, int> sourceDict);
	public static string convertStringStringDictionaryToString(Dictionary<string, string> sourceDict); // 0x0065C978-0x0065CB08
	public static string convertStringIntDictionaryToString(Dictionary<string, int> sourceDict); // 0x0065CB08-0x0065CCB8
	public static Dictionary<T, bool> convertStringToEnumBoolDictionary<T>(string sourceString);
	public static Dictionary<T, int[]> convertStringToEnumIntArrayDictionary<T>(string sourceString);
	public static Dictionary<T, int> convertStringToEnumIntDictionary<T>(string sourceString);
	public static Dictionary<string, string> convertStringToStringStringDictionary(string sourceString); // 0x0065CCB8-0x0065CE00
	public static Dictionary<string, int> convertStringToStringIntDictionary(string sourceString); // 0x0065CE00-0x0065CF6C
	public static bool TryAddAnimationEvent(Animation animation, string clipName, AnimationEvent aniEvent); // 0x0065CF6C-0x0065D29C
	public static string GetUserDataPath(); // 0x0065D29C-0x0065D2A4
}

public class Glow : MonoBehaviour // TypeDefIndex: 4235
{
	// Fields
	public MeshRenderer meshRenderer; // 0x18
	[SerializeField] // 0x0051BE98-0x0051BEA8
	private Animation anim; // 0x20
	[SerializeField] // 0x0051BEA8-0x0051BEB8
	private Material glowmaterial; // 0x28
	[SerializeField] // 0x0051BEB8-0x0051BEC8
	private MeshRenderer glowstar5; // 0x30

	// Constructors
	public Glow(); // 0x0065D9C4-0x0065D9CC

	// Methods
	private void Reset(); // 0x0065D2F4-0x0065D3D4
	public void Awake(); // 0x0065D3D4-0x0065D878
	public void SetVisible(bool visible); // 0x0065D878-0x0065D9C4
}

public class HelmScreen : UIBaseScreen, IScrollClick // TypeDefIndex: 4236
{
	// Fields
	[SerializeField] // 0x0051BEC8-0x0051BED8
	private GameObject scrollAnchor; // 0x98
	[SerializeField] // 0x0051BED8-0x0051BEE8
	private UIGrid scrollGrid; // 0xA0
	[SerializeField] // 0x0051BEE8-0x0051BEF8
	private UIPanel scrollPanel; // 0xA8
	[SerializeField] // 0x0051BEF8-0x0051BF08
	private GameObject dummyObject; // 0xB0
	[SerializeField] // 0x0051BF08-0x0051BF18
	private GameObject skill1Go; // 0xB8
	[SerializeField] // 0x0051BF18-0x0051BF28
	private UILabel skill1Title; // 0xC0
	[SerializeField] // 0x0051BF28-0x0051BF38
	private UILabel skill2Title; // 0xC8
	[SerializeField] // 0x0051BF38-0x0051BF48
	private UILabel skill1Label; // 0xD0
	[SerializeField] // 0x0051BF48-0x0051BF58
	private GameObject skill2Go; // 0xD8
	[SerializeField] // 0x0051BF58-0x0051BF68
	private UILabel skill2Label; // 0xE0
	[SerializeField] // 0x0051BF68-0x0051BF78
	private UILabel nameLabel; // 0xE8
	[SerializeField] // 0x0051BF78-0x0051BF88
	private AudioClip selectSound; // 0xF0
	[SerializeField] // 0x0051BF88-0x0051BF98
	private HelmetSelectButton selectBtn; // 0xF8
	[SerializeField] // 0x0051BF98-0x0051BFA8
	private float minScale; // 0x100
	[SerializeField] // 0x0051BFA8-0x0051BFB8
	private float maxScale; // 0x104
	[SerializeField] // 0x0051BFB8-0x0051BFC8
	private UIDrag drag; // 0x108
	public bool resetHelmAnimation; // 0x110
	private float _cellWidth; // 0x114
	private CenterOnChild _centerer; // 0x118
	private Helmets.HelmType _currentHelmShown; // 0x120
	private bool _hasInited; // 0x124
	private bool _modelsEnabled; // 0x125
	private bool _popupActive; // 0x126
	private List<OverlayIndex> helmIndices; // 0x128
	private List<KeyValuePair<Helmets.HelmType, Helmets.Helm>> helmList; // 0x130
	private List<HelmState> scrollHelms; // 0x138

	// Nested types
	private class HelmState // TypeDefIndex: 4237
	{
		// Fields
		public Helmets.HelmType type; // 0x10
		public Quaternion defaultRotation; // 0x14
		public GameObject helmRoot; // 0x28
		public Transform helmTransform; // 0x30

		// Constructors
		public HelmState(); // 0x0065E998-0x0065E9A0
	}

	// Constructors
	public HelmScreen(); // 0x0065F328-0x0065F3C0

	// Methods
	private void OnEnable(); // 0x0065DB88-0x0065DC44
	private void OnDisable(); // 0x0065DC44-0x0065DD00
	private void OnHandleDir(SwipeDir dir); // 0x0065DD00-0x0065DE64
	private T ElementToCenterOn<T>(List<T> elements, Helmets.HelmType helm);
	public override void Hide(); // 0x0065DE64-0x0065DEA0
	public override void Init(); // 0x0065DEA0-0x0065DF58
	private void InitHelms(); // 0x0065DF58-0x0065E998
	private void RefreshCurrentHelmAndUI(); // 0x0065E9A0-0x0065E9E0
	public override void GainFocus(); // 0x0065EA2C-0x0065EA54
	public void ScrollClicked(Vector2 pos); // 0x0065EA54-0x0065EB24
	private void SelectCurrentHelmShown(); // 0x0065EB24-0x0065EBA4
	public override void Show(); // 0x0065EBC8-0x0065EBF0
	private void Update(); // 0x0065EBF0-0x0065F128
	public void ShowHelmetInMenu(bool updateAnimation); // 0x0065E9E0-0x0065EA2C
	private void UpdateNamesAndButtons(); // 0x0065F128-0x0065F14C
	private void UpdateNames(); // 0x0065F14C-0x0065F328
	private void UpdateButtons(); // 0x0065EBA4-0x0065EBC8
}

public class HighestScoreHelper : MonoBehaviour // TypeDefIndex: 4238
{
	// Fields
	[SerializeField] // 0x0051BFC8-0x0051BFD8
	private UISprite background; // 0x18
	[SerializeField] // 0x0051BFD8-0x0051BFE8
	private UISprite iconBg; // 0x20
	[SerializeField] // 0x0051BFE8-0x0051BFF8
	private UILabel points; // 0x28
	[SerializeField] // 0x0051BFF8-0x0051C008
	private UILabel scoreType; // 0x30
	[SerializeField] // 0x0051C008-0x0051C018
	private UITexture head; // 0x38
	[SerializeField] // 0x0051C018-0x0051C028
	private AnimatingState currentAnimationState; // 0x40
	[SerializeField] // 0x0051C028-0x0051C038
	private Vector3 _inPosition; // 0x44
	[SerializeField] // 0x0051C038-0x0051C048
	private Vector3 _outPosition; // 0x50
	[SerializeField] // 0x0051C048-0x0051C058
	private Vector3 _resetPosition; // 0x5C
	private int _HighestScore; // 0x68
	private string _playerName; // 0x70
	private Texture _image; // 0x78
	private bool _passedHighScore; // 0x80
	private float _duration; // 0x84
	private float _backgroundAlphaDefault; // 0x88
	private float _iconBgAlphaDefault; // 0x8C
	private float _iconAlphaDefault; // 0x90
	private float _pointsAlphaDefault; // 0x94
	private float _scoreTypeAlphaDefault; // 0x98
	private float _headAlphaDefault; // 0x9C
	private Transform _cachedTransform; // 0xA0
	private float _current; // 0xA8
	private bool _gameRunning; // 0xAC
	private bool _inited; // 0xAD
	private Vector3 _vector; // 0xB0
	private HighestScoreSystem _highestScore; // 0xC0
	private TopRun _topRun; // 0xC8

	// Nested types
	public enum AnimatingState // TypeDefIndex: 4239
	{
		_notset = 0,
		OnScreen = 1,
		OffScreen = 2,
		AnimatingIn = 3,
		AnimatingOut = 4
	}

	// Constructors
	public HighestScoreHelper(); // 0x006D7A5C-0x006D7B3C

	// Methods
	private void Awake(); // 0x006D695C-0x006D6980
	public void AnimateIn(); // 0x006D6C04-0x006D6C4C
	public void AnimateOut(); // 0x006D6C4C-0x006D6C60
	public void GameOver(); // 0x006D6C60-0x006D6D1C
	private void Init(); // 0x006D6980-0x006D6AEC
	private int CalculateGapToFriendsScore(int scoreTo, int currentScore); // 0x006D6DE8-0x006D6DF0
	private void SetNewHighScore(); // 0x006D6DF0-0x006D6FAC
	private void RefreshUI(); // 0x006D7160-0x006D71C0
	public void NewGame(); // 0x006D6AEC-0x006D6C04
	private bool CheckNewHighScore(); // 0x006D7358-0x006D7394
	private void Update(); // 0x006D7394-0x006D78D4
}

public class InAirCoinsManager : MonoBehaviour // TypeDefIndex: 4240
{
	// Fields
	public GameObject coinPrefab; // 0x18
	public int numberOfCoins; // 0x20
	public float stayInTrackDistance; // 0x24
	public float coinDistance; // 0x28
	private CoinPool coinPool; // 0x30
	private List<TrackObject> coins; // 0x38
	private AnimationCurve curve; // 0x40
	private Flypack flypack; // 0x48
	private TrackController trackController; // 0x50

	// Nested types
	[CompilerGenerated] // 0x00514AB0-0x00514AC0
	private sealed class _MoveCoins_d__10 : IEnumerator<object> // TypeDefIndex: 4241
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public float StartZ; // 0x20
		public InAirCoinsManager __4__this; // 0x28
		public float height; // 0x30
		public float length; // 0x34
		private float _z_5__2; // 0x38

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527D74-0x00527D84 */ get; } // 0x006DCBA4-0x006DCBAC 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527D94-0x00527DA4 */ get; } // 0x006DCC10-0x006DCC18 

		// Constructors
		[DebuggerHidden] // 0x00527D54-0x00527D64
		public _MoveCoins_d__10(int __1__state); // 0x006DC524-0x006DC550

		// Methods
		[DebuggerHidden] // 0x00527D64-0x00527D74
		void IDisposable.Dispose(); // 0x006DC948-0x006DC94C
		private bool MoveNext(); // 0x006DC94C-0x006DCBA4
		[DebuggerHidden] // 0x00527D84-0x00527D94
		void IEnumerator.Reset(); // 0x006DCBAC-0x006DCC10
	}

	// Constructors
	public InAirCoinsManager(); // 0x006DC8C4-0x006DC948

	// Methods
	public void Awake(); // 0x006DC44C-0x006DC48C
	[IteratorStateMachine] // 0x00522DE8-0x00522E4C
	private IEnumerator MoveCoins(float StartZ, float length, float height); // 0x006DC48C-0x006DC524
	public void ReleaseCoins(); // 0x006DC550-0x006DC624
	public void Spawn(float startZ, float length, float height); // 0x006DC624-0x006DC8C4
}

public static class InAppData // TypeDefIndex: 4242
{
	// Fields
	private static bool _hasInited; // 0x00
	private static Dictionary<int, InAppProfile> _inAppData; // 0x08

	// Properties
	public static Dictionary<int, InAppProfile> inAppData { get; } // 0x006DCC18-0x006DCCC0 

	// Nested types
	public enum DataType // TypeDefIndex: 4243
	{
		None = 0,
		Coin = 1,
		Coin_Key = 2,
		Key = 3
	}

	// Constructors
	static InAppData(); // 0x006E1054-0x006E1710

	// Methods
	private static void Init(); // 0x006DCCC0-0x006E1054
}

public class InAppManager : MonoBehaviour // TypeDefIndex: 4244
{
	// Fields
	private static InAppManager _instance; // 0x00
	private InAppManagerPopupData _popupData; // 0x18
	public static bool PackageGiftIsCoin; // 0x08

	// Properties
	public static InAppManager instance { get; } // 0x006E1D14-0x006E1D80 

	// Constructors
	public InAppManager(); // 0x006E1D80-0x006E1D88
	static InAppManager(); // 0x006E1D88-0x006E1DDC

	// Methods
	private void Awake(); // 0x006E1778-0x006E1878
	public InAppManagerPopupData GetPopupData(); // 0x006E1878-0x006E1880
	public static void Init(); // 0x006E1880-0x006E19A0
	public void SetupNativePopup(int cost, bool isPopup, InAppData.DataType type); // 0x006E19A0-0x006E1D0C
}

public class InAppManagerPopupData // TypeDefIndex: 4245
{
	// Fields
	public string popupTitle; // 0x10
	public string popupDescription; // 0x18
	public bool isCoins; // 0x20
	public bool lastIsPopup; // 0x21

	// Constructors
	public InAppManagerPopupData(); // 0x006E1D0C-0x006E1D14
}

public class InAppProfile // TypeDefIndex: 4246
{
	// Fields
	public int amountOfCoins; // 0x10
	public int amountOfKeys; // 0x14
	public int amountOfHelmets; // 0x18
	public int amountOfHeadstarts; // 0x1C
	public int amountOfScoreboosters; // 0x20
	public bool removeAd; // 0x24
	public string title; // 0x28
	public string description; // 0x30
	public string iconName; // 0x38
	public InAppData.DataType type; // 0x40
	public bool isConsumable; // 0x44
	public float priceAmount; // 0x48
	public string price; // 0x50
	public bool validInApp; // 0x58

	// Constructors
	public InAppProfile(); // 0x006E1710-0x006E1778

	// Methods
	public static InAppProfile getInAppProfileClone(InAppProfile objectToClone); // 0x006E1DDC-0x006E1EA8
}

public class IngameScreen : UIBaseScreen // TypeDefIndex: 4247
{
	// Fields
	[SerializeField] // 0x0051C058-0x0051C068
	private UISlider slider; // 0x98
	[SerializeField] // 0x0051C068-0x0051C078
	private UILabel sliderLbl; // 0xA0
	[SerializeField] // 0x0051C078-0x0051C088
	private UISprite sliderIcon; // 0xA8
	public static IngameScreen Instance; // 0x00
	[SerializeField] // 0x0051C088-0x0051C098
	private Animator scoreLabelAnimator; // 0xB0
	[SerializeField] // 0x0051C098-0x0051C0A8
	private UILabel scoreLabel; // 0xB8
	public UILabel multiplierLabel; // 0xC0
	[SerializeField] // 0x0051C0A8-0x0051C0B8
	private UILabel coinLabel; // 0xC8
	[SerializeField] // 0x0051C0B8-0x0051C0C8
	private Transform _multiplier; // 0xD0
	[SerializeField] // 0x0051C0C8-0x0051C0D8
	private SlideinPowerupHelper slideinPowerupHelper; // 0xD8
	[SerializeField] // 0x0051C0D8-0x0051C0E8
	private IngameChestPickedHelper chestPickedHelper; // 0xE0
	[SerializeField] // 0x0051C0E8-0x0051C0F8
	private UILabel countdownStartingLabel; // 0xE8
	[SerializeField] // 0x0051C0F8-0x0051C108
	private UILabel countdownLabel; // 0xF0
	[SerializeField] // 0x0051C108-0x0051C118
	private GameObject leanTip; // 0xF8
	public Color SCOREBOOSTER_ACTIVE_COLOR; // 0x100
	public Color MULTIPLIER_LABEL_ORIGINAL_COLOR; // 0x110
	[SerializeField] // 0x0051C118-0x0051C128
	private GameObject pauseButton; // 0x120
	[SerializeField] // 0x0051C128-0x0051C138
	private UIAnchor topLeft; // 0x128
	[SerializeField] // 0x0051C138-0x0051C148
	private UIAnchor topRight; // 0x130
	[SerializeField] // 0x0051C148-0x0051C158
	private UIAnchor top; // 0x138
	private TrialInfo info; // 0x140
	private Vector3 _cachedCountdownLabelScale; // 0x148
	private float _countdownSeconds; // 0x154
	private bool _countingDown; // 0x158
	private bool _isMultiplierLabelUpdated; // 0x159
	private int digits; // 0x15C
	private bool doLastIteration; // 0x160
	private int lastKnowDigits; // 0x164
	private float lerpFactor; // 0x168
	private bool mShowBanner; // 0x16C
	private float mActual; // 0x170
	private float mTimeDelta; // 0x174
	private float mTimeStart; // 0x178
	private bool mTimeStarted; // 0x17C
	private int score; // 0x180
	private Color SCOREBOOSTER_ELECTRICBLUE; // 0x184
	private Color SCOREBOOSTER_WHITE; // 0x194
	private int progress; // 0x1A4
	private float value; // 0x1A8
	private bool trialCharge; // 0x1AC
	[SerializeField] // 0x0051C158-0x0051C168
	private ParticleSystem SkillIconMax; // 0x1B0
	[SerializeField] // 0x0051C168-0x0051C178
	private ParticleSystem SkillIconAdd; // 0x1B8
	[SerializeField] // 0x0051C178-0x0051C188
	private ParticleSystem SkillIconUse; // 0x1C0
	[SerializeField] // 0x0051C188-0x0051C198
	private GameObject skillMaxBg; // 0x1C8
	[SerializeField] // 0x0051C198-0x0051C1A8
	private GameObject TokenShow; // 0x1D0
	[SerializeField] // 0x0051C1A8-0x0051C1B8
	private UISprite TokenIcon; // 0x1D8
	[SerializeField] // 0x0051C1B8-0x0051C1C8
	private UILabel TokenNum; // 0x1E0
	private GameCamera gamecam; // 0x1E8
	private UIScreenController uiscreen; // 0x1F0
	private UISliderInController uisliderctl; // 0x1F8
	private int tutorialSkill; // 0x200
	public static DoubleSkillType CurrentSkillType; // 0x08
	public Transform scorelabelPos; // 0x208
	public Animator hitrobberAni; // 0x210
	public UILabel HitRobberPoint; // 0x218
	private UILabel HitRobberPoint2; // 0x220
	private UILabel LastRobberPoint; // 0x228
	public AnimationCurve HitrobberPointCurveX; // 0x230
	public AnimationCurve HitrobberPointCurveY; // 0x238
	public AnimationCurve HitrobberPointCurveScale; // 0x240
	private int RobberHit; // 0x248
	private float HitRobbertime; // 0x24C
	public GameObject showplane; // 0x250
	public GameObject showplane1; // 0x258
	[SerializeField] // 0x0051C1C8-0x0051C1D8
	private UISprite robberHitSp; // 0x260
	private float shake; // 0x268
	private float skillTime; // 0x26C
	public float SkillTime; // 0x270
	public float ShieldSkillTime; // 0x274
	[HideInInspector] // 0x0051C1D8-0x0051C1E8
	public float TutorialSkillTime; // 0x278
	[SerializeField] // 0x0051C1E8-0x0051C1F8
	private UISprite TwinkleObj1; // 0x280
	[SerializeField] // 0x0051C1F8-0x0051C208
	private UISprite TwinkleObj2; // 0x288
	[SerializeField] // 0x0051C208-0x0051C218
	private UISprite TwinkleObjSkill1; // 0x290
	[SerializeField] // 0x0051C218-0x0051C228
	private UISprite TwinkleObjSkill2; // 0x298
	[SerializeField] // 0x0051C228-0x0051C238
	private UISprite TwinkleObjSkill3; // 0x2A0
	public UISlider PowerCenter; // 0x2A8
	[HideInInspector] // 0x0051C238-0x0051C248
	public float collectionCoins; // 0x2B0
	private float t1; // 0x2B4
	private float t2; // 0x2B8
	public static bool canUserSkill; // 0x0C
	[HideInInspector] // 0x0051C248-0x0051C258
	public static bool inSkillTime; // 0x0D
	[HideInInspector] // 0x0051C258-0x0051C268
	public bool isClick; // 0x2BC
	private bool canPlaySound; // 0x2BD
	public GameObject TutorialSkill; // 0x2C0
	private int LastCoinsNum; // 0x2C8
	private UISprite SkillIcon; // 0x2D0
	public Animator MetersShow; // 0x2D8
	public UILabel meterslabel; // 0x2E0
	private PlayerInfo playinfo; // 0x2E8
	private Character character; // 0x2F0
	private Game game; // 0x2F8
	private GameStats gamestats; // 0x300
	private float NextShowMeters; // 0x308
	public GameObject SkillGet; // 0x310
	public UISprite SkillgetImg; // 0x318
	public UILabel SkillgetTex; // 0x320
	public UIPowerupHandler uipowerup; // 0x328

	// Properties
	private int extraNumberOfChars { get; } // 0x006E66BC-0x006E6730 

	// Nested types
	[CompilerGenerated] // 0x00514AC0-0x00514AD0
	private sealed class _moveHitRobberPointEffect_d__69 : IEnumerator<object> // TypeDefIndex: 4248
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public IngameScreen __4__this; // 0x20
		public UILabel tempRobberPoint; // 0x28
		private float _offsetX_5__2; // 0x30
		private float _dis_x_5__3; // 0x34
		private float _dis_y_5__4; // 0x38
		private float _dis_xC_5__5; // 0x3C
		private float _dis_yC_5__6; // 0x40

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527DC4-0x00527DD4 */ get; } // 0x006E84AC-0x006E84B4 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527DE4-0x00527DF4 */ get; } // 0x006E8518-0x006E8520 

		// Constructors
		[DebuggerHidden] // 0x00527DA4-0x00527DB4
		public _moveHitRobberPointEffect_d__69(int __1__state); // 0x006E2DE4-0x006E2E10

		// Methods
		[DebuggerHidden] // 0x00527DB4-0x00527DC4
		void IDisposable.Dispose(); // 0x006E7F50-0x006E7F54
		private bool MoveNext(); // 0x006E7F54-0x006E84AC
		[DebuggerHidden] // 0x00527DD4-0x00527DE4
		void IEnumerator.Reset(); // 0x006E84B4-0x006E8518
	}

	[CompilerGenerated] // 0x00514AD0-0x00514AE0
	private sealed class _ResetmoveHitRobberPointEffect_d__70 : IEnumerator<object> // TypeDefIndex: 4249
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public IngameScreen __4__this; // 0x20
		public UILabel tempRobberPoint; // 0x28
		private float _offsetX_5__2; // 0x30
		private float _dis_x_5__3; // 0x34
		private float _dis_y_5__4; // 0x38
		private float _dis_xC_5__5; // 0x3C
		private float _dis_yC_5__6; // 0x40

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527E14-0x00527E24 */ get; } // 0x006E7EDC-0x006E7EE4 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527E34-0x00527E44 */ get; } // 0x006E7F48-0x006E7F50 

		// Constructors
		[DebuggerHidden] // 0x00527DF4-0x00527E04
		public _ResetmoveHitRobberPointEffect_d__70(int __1__state); // 0x006E2E90-0x006E2EBC

		// Methods
		[DebuggerHidden] // 0x00527E04-0x00527E14
		void IDisposable.Dispose(); // 0x006E7A24-0x006E7A28
		private bool MoveNext(); // 0x006E7A28-0x006E7EDC
		[DebuggerHidden] // 0x00527E24-0x00527E34
		void IEnumerator.Reset(); // 0x006E7EE4-0x006E7F48
	}

	[CompilerGenerated] // 0x00514AE0-0x00514AF0
	private sealed class _DelayCloseRobberHIT_d__72 : IEnumerator<object> // TypeDefIndex: 4250
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public IngameScreen __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527E64-0x00527E74 */ get; } // 0x006E76B0-0x006E76B8 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527E84-0x00527E94 */ get; } // 0x006E771C-0x006E7724 

		// Constructors
		[DebuggerHidden] // 0x00527E44-0x00527E54
		public _DelayCloseRobberHIT_d__72(int __1__state); // 0x006E2FD0-0x006E2FFC

		// Methods
		[DebuggerHidden] // 0x00527E54-0x00527E64
		void IDisposable.Dispose(); // 0x006E742C-0x006E7430
		private bool MoveNext(); // 0x006E7430-0x006E76B0
		[DebuggerHidden] // 0x00527E74-0x00527E84
		void IEnumerator.Reset(); // 0x006E76B8-0x006E771C
	}

	[CompilerGenerated] // 0x00514AF0-0x00514B00
	private sealed class _AnimateColor_d__77 : IEnumerator<object> // TypeDefIndex: 4251
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public float speedFactor; // 0x20
		public UISprite sprite; // 0x28
		public Color32 startValue; // 0x30
		public Color32 endValue; // 0x34
		private float _Factor_5__2; // 0x38

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527EB4-0x00527EC4 */ get; } // 0x006E6F40-0x006E6F48 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527ED4-0x00527EE4 */ get; } // 0x006E6FAC-0x006E6FB4 

		// Constructors
		[DebuggerHidden] // 0x00527E94-0x00527EA4
		public _AnimateColor_d__77(int __1__state); // 0x006E34FC-0x006E3528

		// Methods
		[DebuggerHidden] // 0x00527EA4-0x00527EB4
		void IDisposable.Dispose(); // 0x006E6DC4-0x006E6DC8
		private bool MoveNext(); // 0x006E6DC8-0x006E6F40
		[DebuggerHidden] // 0x00527EC4-0x00527ED4
		void IEnumerator.Reset(); // 0x006E6F48-0x006E6FAC
	}

	[CompilerGenerated] // 0x00514B00-0x00514B10
	private sealed class _AnimateSize_d__78 : IEnumerator<object> // TypeDefIndex: 4252
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public float speedFactor; // 0x20
		public UISprite sprite; // 0x28
		public int startWidthValue; // 0x30
		public int endWidthValue; // 0x34
		public int startHeightValue; // 0x38
		public int endHeightValue; // 0x3C
		private float _Factor_5__2; // 0x40

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527F04-0x00527F14 */ get; } // 0x006E7108-0x006E7110 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527F24-0x00527F34 */ get; } // 0x006E7174-0x006E717C 

		// Constructors
		[DebuggerHidden] // 0x00527EE4-0x00527EF4
		public _AnimateSize_d__78(int __1__state); // 0x006E35D4-0x006E3600

		// Methods
		[DebuggerHidden] // 0x00527EF4-0x00527F04
		void IDisposable.Dispose(); // 0x006E6FB4-0x006E6FB8
		private bool MoveNext(); // 0x006E6FB8-0x006E7108
		[DebuggerHidden] // 0x00527F14-0x00527F24
		void IEnumerator.Reset(); // 0x006E7110-0x006E7174
	}

	[CompilerGenerated] // 0x00514B10-0x00514B20
	private sealed class _CloseLeanTip_d__86 : IEnumerator<object> // TypeDefIndex: 4253
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public IngameScreen __4__this; // 0x20
		private float _time_5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527F54-0x00527F64 */ get; } // 0x006E73B8-0x006E73C0 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527F74-0x00527F84 */ get; } // 0x006E7424-0x006E742C 

		// Constructors
		[DebuggerHidden] // 0x00527F34-0x00527F44
		public _CloseLeanTip_d__86(int __1__state); // 0x006E4108-0x006E4134

		// Methods
		[DebuggerHidden] // 0x00527F44-0x00527F54
		void IDisposable.Dispose(); // 0x006E717C-0x006E7180
		private bool MoveNext(); // 0x006E7180-0x006E73B8
		[DebuggerHidden] // 0x00527F64-0x00527F74
		void IEnumerator.Reset(); // 0x006E73C0-0x006E7424
	}

	[CompilerGenerated] // 0x00514B20-0x00514B30
	private sealed class _EndDoubleSkill_d__134 : IEnumerator<object> // TypeDefIndex: 4254
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public IngameScreen __4__this; // 0x20
		public float delaytime; // 0x28
		private Shield _shield_5__2; // 0x30

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527FA4-0x00527FB4 */ get; } // 0x006E79B0-0x006E79B8 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00527FC4-0x00527FD4 */ get; } // 0x006E7A1C-0x006E7A24 

		// Constructors
		[DebuggerHidden] // 0x00527F84-0x00527F94
		public _EndDoubleSkill_d__134(int __1__state); // 0x006E6B8C-0x006E6BB8

		// Methods
		[DebuggerHidden] // 0x00527F94-0x00527FA4
		void IDisposable.Dispose(); // 0x006E7724-0x006E7728
		private bool MoveNext(); // 0x006E7728-0x006E79B0
		[DebuggerHidden] // 0x00527FB4-0x00527FC4
		void IEnumerator.Reset(); // 0x006E79B8-0x006E7A1C
	}

	// Constructors
	public IngameScreen(); // 0x006E32B0-0x006E3464
	static IngameScreen(); // 0x006E6DC0-0x006E6DC4

	// Methods
	public void SetUIshow(bool isshow); // 0x006E2938-0x006E2980
	public void SetHitRobberPar(); // 0x006E2980-0x006E2AF4
	private void ResetRobberStatus(); // 0x006E2AF4-0x006E2BBC
	public void ShowHitRobberPoint(); // 0x006E2BBC-0x006E2D64
	[IteratorStateMachine] // 0x00522E4C-0x00522EB0
	private IEnumerator moveHitRobberPointEffect(UILabel tempRobberPoint); // 0x006E2D64-0x006E2DE4
	[IteratorStateMachine] // 0x00522EB0-0x00522F14
	private IEnumerator ResetmoveHitRobberPointEffect(UILabel tempRobberPoint); // 0x006E2E10-0x006E2E90
	public void ShowHitRobber(); // 0x006E2EBC-0x006E2F5C
	[IteratorStateMachine] // 0x00522F14-0x00522F78
	private IEnumerator DelayCloseRobberHIT(); // 0x006E2F5C-0x006E2FD0
	public void InitToken(); // 0x006E2FFC-0x006E317C
	private string GetTokenSpriteName(string version); // 0x006E317C-0x006E3268
	public void FreshToken(); // 0x006E3268-0x006E32B0
	[IteratorStateMachine] // 0x00522F78-0x00522FDC
	private IEnumerator AnimateColor(UISprite sprite, Color32 startValue, Color32 endValue, float speedFactor); // 0x006E3464-0x006E34FC
	[IteratorStateMachine] // 0x00522FDC-0x00524040
	private IEnumerator AnimateSize(UISprite sprite, int startHeightValue, int endHeightValue, int startWidthValue, int endWidthValue, float speedFactor); // 0x006E3528-0x006E35D4
	private void FadeFromWhiteToDarkBlue(); // 0x006E3600-0x006E3780
	public override void Hide(); // 0x006E3780-0x006E3824
	public override void Init(); // 0x006E3A18-0x006E3D78
	private void OnCoinsChanged(); // 0x006E3D78-0x006E3DEC
	private void OnCoinsWithHelmetChanged(); // 0x006E3E14-0x006E4050
	private void OnChestsChanged(); // 0x006E4050-0x006E4068
	private void OnTramcarTutorial(); // 0x006E4068-0x006E4094
	[IteratorStateMachine] // 0x00524040-0x005240A4
	private IEnumerator CloseLeanTip(); // 0x006E4094-0x006E4108
	private void OnEnable(); // 0x006E4134-0x006E41E8
	private void OnDisable(); // 0x006E41E8-0x006E42D8
	private void OnGameStarted(); // 0x006E42D8-0x006E4904
	private void resetMultiplierLabel(); // 0x006E3824-0x006E3A18
	public void ResetMultiplierLabelColour(); // 0x006E4950-0x006E49F0
	private void ResizeCoinBox(); // 0x006E3DEC-0x006E3E14
	private void ResizeMultiplierBox(); // 0x006E49F0-0x006E4B10
	public void SetPauseButtonVisibility(bool isActive); // 0x006E4B10-0x006E4B30
	private void SetScoreLabel(); // 0x006E4B30-0x006E4C68
	public void CountDown(); // 0x006E4C68-0x006E4CA0
	public override void Show(); // 0x006E4CA0-0x006E5028
	private void Update(); // 0x006E5494-0x006E5794
	private void UpdateMultiplierLable(); // 0x006E5794-0x006E5B20
	private float UpdateRealTimeDelta(); // 0x006E532C-0x006E5494
	private void SetInstace(); // 0x006E6730-0x006E6810
	private void Awake(); // 0x006E6810-0x006E6950
	private void FrehsSkillPs(); // 0x006E5028-0x006E5120
	private void UpdateSkill(); // 0x006E5CCC-0x006E66BC
	[IteratorStateMachine] // 0x005240A4-0x00524108
	private IEnumerator EndDoubleSkill(float delaytime); // 0x006E6950-0x006E69D4
	private void UpdateShowMeters(); // 0x006E5B20-0x006E5CCC
	public void CloseShowMeters(); // 0x006E4904-0x006E4910
	private float GetNextMeters(float val); // 0x006E6BB8-0x006E6C80
	public void FreshSkillGet(); // 0x006E69D4-0x006E6B8C
	public void FreshSkillGetGem(); // 0x006E6C80-0x006E6DC0
	private void InitFreshSkillGet(); // 0x006E4910-0x006E4950
	public void SetSkillUI(bool reset); // 0x006E5120-0x006E532C
}

public struct IntMask // TypeDefIndex: 4255
{
	// Fields
	private int mask; // 0x00

	// Properties
	public bool this[int bit] { get => default; set {} } // 0x0058039C-0x005803B8 0x005803B8-0x00580970

	// Constructors
	public IntMask(int i); // 0x00580394-0x0058039C

	// Methods
	public static implicit operator int(IntMask i); // 0x006E962C-0x006E9630
	public static implicit operator IntMask(int i); // 0x006E9630-0x006E9638
}

public class JetPackCloud : MonoBehaviour // TypeDefIndex: 4256
{
	// Fields
	private Material material; // 0x18
	public float scrollSpeed; // 0x20
	public float startOffset; // 0x24

	// Constructors
	public JetPackCloud(); // 0x006EE6C8-0x006EE6D8

	// Methods
	private void Awake(); // 0x006EE580-0x006EE634
	private void Update(); // 0x006EE634-0x006EE6C8
}

public class JumpCoinsManager // TypeDefIndex: 4257
{
	// Fields
	private CoinPool coinPool; // 0x10
	private List<TrackObject> coins; // 0x18
	private TrackController trackController; // 0x20
	private static JumpCoinsManager _instance; // 0x00

	// Properties
	public static JumpCoinsManager Instance { get; } // 0x006EE6D8-0x006EE754 

	// Constructors
	public JumpCoinsManager(); // 0x006EE754-0x006EE7E0

	// Methods
	private void MoveCoin(Vector3 position); // 0x006EE7E0-0x006EE954
	public void placeRow(float z, float height); // 0x006EE954-0x006EEAF8
	public void ReleaseCoins(); // 0x006EEAF8-0x006EEBCC
}

[Serializable]
public class KeyFrameAudio : KeyFrameBase // TypeDefIndex: 4258
{
	// Fields
	public AudioKeyFrameType audioKeyFrameType; // 0x20
	public string audio; // 0x28
	public Transform point; // 0x30
	public ExtraKeyframeCall Callback; // 0x38

	// Nested types
	public delegate void ExtraKeyframeCall(KeyFrameAudio info); // TypeDefIndex: 4259; 0x006EEBEC-0x006EEFA0

	// Constructors
	public KeyFrameAudio(); // 0x006EEBCC-0x006EEBD4
}

public enum AudioKeyFrameType // TypeDefIndex: 4260
{
	oneShot = 0,
	Recycles = 1,
	loopStop = 2
}

[Serializable]
public class KeyFrameBase // TypeDefIndex: 4261
{
	// Fields
	public string clip; // 0x10
	public int KeyFrame; // 0x18
	public bool state; // 0x1C

	// Constructors
	public KeyFrameBase(); // 0x006EEBD4-0x006EEBDC
}

public static class CheckEncoding // TypeDefIndex: 4262
{
	// Methods
	public static byte[] ComputeSHA1(byte[] data); // 0x00669560-0x00669688
	public static byte[] ComputeSHA1(string data, Encoding encoding); // 0x00669688-0x006696D8
}

public static class StringUtility // TypeDefIndex: 4263
{
	// Methods
	public static int GetNextKeyValuePair(string text, int startIndex, out string key, out string value); // 0x00FC1604-0x00FC16F4
	public static int NonEscapedIndexOf(string text, int startIndex, char ch); // 0x00FC16F4-0x00FC1760
	public static string ToHexString(byte[] bytes, bool lowerCase = false /* Metadata: 0x001F6579 */); // 0x00FC1760-0x00FC189C
	public static string Color32ToString(Color32 clr); // 0x00FC189C-0x00FC1990
	public static Color32 StringToColor32(string str); // 0x00FC1990-0x00FC1AD8
}

public class CSVReader // TypeDefIndex: 4264
{
	// Fields
	private BetterList<string> mTemp; // 0x10
	private byte[] mBuffers; // 0x18
	private int mOffset; // 0x20

	// Properties
	private bool canRead { get; } // 0x007748E4-0x00774908 

	// Constructors
	public CSVReader(byte[] buffers); // 0x0077485C-0x007748E4

	// Methods
	public BetterList<string> ReadLine(); // 0x00774908-0x00774C2C
	private string ReadLine(int index, int count); // 0x00774D2C-0x00774D80
	private string ReadLine(bool skipEmptyLines); // 0x00774C2C-0x00774D2C
}

public class Layers // TypeDefIndex: 4265
{
	// Fields
	public readonly int Default; // 0x10
	public readonly int HitBounceOnly; // 0x14
	public readonly int KeepOnHelmet; // 0x18
	public readonly int _3DGUI; // 0x1C
	public readonly int CELEBRATION; // 0x20
	public readonly int _2DGUI; // 0x24
	public readonly int Character; // 0x28
	public readonly int LoadScreenLayer; // 0x2C
	public readonly int HIT; // 0x30
	public readonly int RECIEVESHADOW; // 0x34
	private static Layers _instance; // 0x00

	// Properties
	public static Layers Instance { get; } // 0x006F2794-0x006F27F8 

	// Constructors
	private Layers(); // 0x006F2574-0x006F2684

	// Methods
	private static int FindLayer(string name); // 0x006F2684-0x006F2734
	public static void Init(); // 0x006F2734-0x006F2794
}

public abstract class ListAdapter // TypeDefIndex: 4266
{
	// Constructors
	protected ListAdapter(); // 0x006F4F60-0x006F4F68

	// Methods
	public abstract int GetCount();
}

public class ListTitleComponentHelper : MonoBehaviour // TypeDefIndex: 4267
{
	// Fields
	[SerializeField] // 0x0051C268-0x0051C278
	private UILabel bigLabel; // 0x18
	[SerializeField] // 0x0051C278-0x0051C288
	private UILabel smallLabel; // 0x20

	// Constructors
	public ListTitleComponentHelper(); // 0x006F4FAC-0x006F4FB4

	// Methods
	public void Setup(string text, string descripe); // 0x006F4F68-0x006F4FAC
}

public class LongMagnet : MonoBehaviour // TypeDefIndex: 4268
{
	// Fields
	private Character character; // 0x18
	private Transform characterControllerTrans; // 0x20
	private CharacterModel characterModel; // 0x28
	private CharacterRendering characterRendering; // 0x30
	private OnTriggerObject coinMagnetCollider; // 0x38
	private Game game; // 0x40
	private VariableBool longMagnetSuction; // 0x48
	public float pullSpeed; // 0x50

	// Nested types
	[CompilerGenerated] // 0x00514B30-0x00514B40
	private sealed class __c__DisplayClass11_0 // TypeDefIndex: 4269
	{
		// Fields
		public Coin coin; // 0x10
		public Vector3 coinPosition; // 0x18
		public LongMagnet __4__this; // 0x28
		public Vector3 offsetCoinHitPosition; // 0x30

		// Constructors
		public __c__DisplayClass11_0(); // 0x006F9478-0x006F9480

		// Methods
		internal void _Pull_b__0(float t); // 0x006F9480-0x006F95B8
	}

	[CompilerGenerated] // 0x00514B40-0x00514B50
	private sealed class _Pull_d__11 : IEnumerator<object> // TypeDefIndex: 4270
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Coin coin; // 0x20
		public LongMagnet __4__this; // 0x28
		private __c__DisplayClass11_0 __8__1; // 0x30

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00527FF4-0x00528004 */ get; } // 0x006F989C-0x006F98A4 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00528014-0x00528024 */ get; } // 0x006F9908-0x006F9910 

		// Constructors
		[DebuggerHidden] // 0x00527FD4-0x00527FE4
		public _Pull_d__11(int __1__state); // 0x006F90BC-0x006F90E8

		// Methods
		[DebuggerHidden] // 0x00527FE4-0x00527FF4
		void IDisposable.Dispose(); // 0x006F95B8-0x006F95BC
		private bool MoveNext(); // 0x006F95BC-0x006F989C
		[DebuggerHidden] // 0x00528004-0x00528014
		void IEnumerator.Reset(); // 0x006F98A4-0x006F9908
	}

	// Constructors
	public LongMagnet(); // 0x006F9408-0x006F9478

	// Methods
	public void Activate(); // 0x006F8D7C-0x006F8DA0
	public void CoinHit(Collider collider); // 0x006F8DA0-0x006F9018
	public void Deactivate(); // 0x006F9098-0x006F90BC
	[IteratorStateMachine] // 0x00524108-0x0052416C
	private IEnumerator Pull(Coin coin); // 0x006F9018-0x006F9098
	public void DelegteInGameOne(bool _value); // 0x006F90E8-0x006F910C
	public void DelegteInGameTwo(bool _value); // 0x006F910C-0x006F9268
	public void Start(); // 0x006F9268-0x006F9408
}

public class MessageCenter : MonoBehaviour // TypeDefIndex: 4271
{
	// Fields
	private static MessageCenter _instance; // 0x00

	// Properties
	public static MessageCenter Instance { get; } // 0x00702150-0x00702308 
	public static bool IsInstanced { get; } // 0x00702308-0x00702384 

	// Constructors
	public MessageCenter(); // 0x00702384-0x0070238C

	// Methods
	private void Awake(); // 0x007020FC-0x00702150
}

[RequireComponent] // 0x00513E18-0x00513E7C
public class MovingCoin : MonoBehaviour // TypeDefIndex: 4272
{
	// Fields
	private Vector3 originePos; // 0x18
	private Transform coin; // 0x28
	private Game game; // 0x30

	// Constructors
	public MovingCoin(); // 0x008905AC-0x008905B4

	// Methods
	public void Awake(); // 0x00890184-0x0089038C
	public void OnActivate(); // 0x0089038C-0x00890440
	public void OnDeactivate(); // 0x00890440-0x0089044C
	public void OnDrawGizmos(); // 0x0089044C-0x008905AC
}

public class myTween // TypeDefIndex: 4273
{
	// Fields
	public static Action complete; // 0x00

	// Nested types
	[CompilerGenerated] // 0x00514B50-0x00514B60
	private sealed class _RealtimeTo_d__1 : IEnumerator<object> // TypeDefIndex: 4274
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public float duration; // 0x20
		public Action<float> callback; // 0x28
		public float startValue; // 0x30
		public float endValue; // 0x34
		private float _end_5__2; // 0x38
		private float _speed_5__3; // 0x3C
		private float _startSpeed_5__4; // 0x40

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00528044-0x00528054 */ get; } // 0x00A9A35C-0x00A9A364 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00528064-0x00528074 */ get; } // 0x00A9A3C8-0x00A9A3D0 

		// Constructors
		[DebuggerHidden] // 0x00528024-0x00528034
		public _RealtimeTo_d__1(int __1__state); // 0x00A9A094-0x00A9A0C0

		// Methods
		[DebuggerHidden] // 0x00528034-0x00528044
		void IDisposable.Dispose(); // 0x00A9A20C-0x00A9A210
		private bool MoveNext(); // 0x00A9A210-0x00A9A35C
		[DebuggerHidden] // 0x00528054-0x00528064
		void IEnumerator.Reset(); // 0x00A9A364-0x00A9A3C8
	}

	[CompilerGenerated] // 0x00514B60-0x00514B70
	private sealed class _To_d__4 : IEnumerator<object> // TypeDefIndex: 4275
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public float duration; // 0x20
		public Action<float> callback; // 0x28
		public float startValue; // 0x30
		public float endValue; // 0x34
		private float _end_5__2; // 0x38
		private float _durationInv_5__3; // 0x3C
		private float _startMulDurationInv_5__4; // 0x40

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00528094-0x005280A4 */ get; } // 0x00A9A580-0x00A9A588 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005280B4-0x005280C4 */ get; } // 0x00A9A5EC-0x00A9A5F4 

		// Constructors
		[DebuggerHidden] // 0x00528074-0x00528084
		public _To_d__4(int __1__state); // 0x00A9A1D4-0x00A9A200

		// Methods
		[DebuggerHidden] // 0x00528084-0x00528094
		void IDisposable.Dispose(); // 0x00A9A3D0-0x00A9A3D4
		private bool MoveNext(); // 0x00A9A3D4-0x00A9A580
		[DebuggerHidden] // 0x005280A4-0x005280B4
		void IEnumerator.Reset(); // 0x00A9A588-0x00A9A5EC
	}

	// Constructors
	public myTween(); // 0x00A9A200-0x00A9A208
	static myTween(); // 0x00A9A208-0x00A9A20C

	// Methods
	[IteratorStateMachine] // 0x0052416C-0x005241D0
	public static IEnumerator RealtimeTo(float duration, float startValue, float endValue, Action<float> callback); // 0x00A99FFC-0x00A9A094
	public static IEnumerator ToReal(float duration, Action<float> callback); // 0x00A9A0C0-0x00A9A13C
	public static IEnumerator To(float duration, Action<float> callback); // 0x00A92A04-0x00A92A80
	[IteratorStateMachine] // 0x005241D0-0x00524234
	public static IEnumerator To(float duration, float startValue, float endValue, Action<float> callback); // 0x00A9A13C-0x00A9A1D4
}

public class NewHighScoreHandler : MonoBehaviour // TypeDefIndex: 4276
{
	// Fields
	[SerializeField] // 0x0051C288-0x0051C298
	private UIAnchor _hightScoreTop; // 0x18
	[SerializeField] // 0x0051C298-0x0051C2A8
	private UILabel _Title; // 0x20
	[SerializeField] // 0x0051C2A8-0x0051C2B8
	private UILabel _highScoreLbl; // 0x28
	[SerializeField] // 0x0051C2B8-0x0051C2C8
	private UILabel _myRankLbl; // 0x30
	[SerializeField] // 0x0051C2C8-0x0051C2D8
	private UILabel _myScoreLbl; // 0x38
	[SerializeField] // 0x0051C2D8-0x0051C2E8
	private UILabel _myNameLbl; // 0x40
	[SerializeField] // 0x0051C2E8-0x0051C2F8
	private UITexture _myHeadTxt; // 0x48
	[SerializeField] // 0x0051C2F8-0x0051C308
	private UILabel _otherRankLbl; // 0x50
	[SerializeField] // 0x0051C308-0x0051C318
	private UILabel _otherScoreLbl; // 0x58
	[SerializeField] // 0x0051C318-0x0051C328
	private UILabel _otherNameLbl; // 0x60
	[SerializeField] // 0x0051C328-0x0051C338
	private UITexture _otherHeadTxt; // 0x68
	[SerializeField] // 0x0051C338-0x0051C348
	private Animation upAnim; // 0x70

	// Nested types
	[CompilerGenerated] // 0x00514B70-0x00514B80
	private sealed class _SetUI_d__13 : IEnumerator<object> // TypeDefIndex: 4277
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public NewHighScoreHandler __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005280E4-0x005280F4 */ get; } // 0x00A6A954-0x00A6A95C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00528104-0x00528114 */ get; } // 0x00A6A9C0-0x00A6A9C8 

		// Constructors
		[DebuggerHidden] // 0x005280C4-0x005280D4
		public _SetUI_d__13(int __1__state); // 0x00A6A434-0x00A6A460

		// Methods
		[DebuggerHidden] // 0x005280D4-0x005280E4
		void IDisposable.Dispose(); // 0x00A6A760-0x00A6A764
		private bool MoveNext(); // 0x00A6A764-0x00A6A954
		[DebuggerHidden] // 0x005280F4-0x00528104
		void IEnumerator.Reset(); // 0x00A6A95C-0x00A6A9C0
	}

	// Constructors
	public NewHighScoreHandler(); // 0x00A6A758-0x00A6A760

	// Methods
	private void Awake(); // 0x00A6A258-0x00A6A3C0
	[IteratorStateMachine] // 0x00524234-0x00524298
	private IEnumerator SetUI(); // 0x00A6A3C0-0x00A6A434
	private void RefreshUI(); // 0x00A6A460-0x00A6A758
}

public class NotEnoughCurencyPopup : UIBaseScreen // TypeDefIndex: 4278
{
	// Fields
	[SerializeField] // 0x0051C348-0x0051C358
	private UILabel popupTitle; // 0x98
	[SerializeField] // 0x0051C358-0x0051C368
	private UILabel popupDescription; // 0xA0
	[SerializeField] // 0x0051C368-0x0051C378
	private GameObject buy; // 0xA8
	[SerializeField] // 0x0051C378-0x0051C388
	private GameObject video; // 0xB0
	[SerializeField] // 0x0051C388-0x0051C398
	private GameObject videoLable; // 0xB8
	[SerializeField] // 0x0051C398-0x0051C3A8
	private UILabel buyLbl; // 0xC0
	private InAppManagerPopupData _popupData; // 0xC8
	private bool hasRewardAd; // 0xD0
	public UILabel amountLbl; // 0xD8
	public UISprite iconSpr; // 0xE0
	public BoxCollider freeCollider; // 0xE8
	public UISprite fillSpr; // 0xF0

	// Nested types
	[Serializable]
	[CompilerGenerated] // 0x00514B80-0x00514B90
	private sealed class __c // TypeDefIndex: 4279
	{
		// Fields
		public static readonly __c __9; // 0x00
		public static Action __9__9_0; // 0x08
		public static Action __9__9_1; // 0x10

		// Constructors
		static __c(); // 0x0069B7F0-0x0069B854
		public __c(); // 0x0069B854-0x0069B85C

		// Methods
		internal void _OnFreeReward_b__9_0(); // 0x0069B85C-0x0069B8D0
		internal void _OnFreeReward_b__9_1(); // 0x0069B8D0-0x0069B944
	}

	// Constructors
	public NotEnoughCurencyPopup(); // 0x0069B7E8-0x0069B7F0

	// Methods
	public override void Hide(); // 0x0069A79C-0x0069A7A8
	public void OnFreeReward(RiseSdk.AdEventType b, int type, string tag, int d); // 0x0069A7A8-0x0069AA58
	public void OnFreeViewClick(); // 0x0069AA58-0x0069AC90
	private void OnEnable(); // 0x0069AC90-0x0069ADD8
	private void OnDisable(); // 0x0069ADD8-0x0069AE74
	public void OnCancelClicked(); // 0x0069AE74-0x0069B004
	public void OnBuyClicked(GameObject go); // 0x0069B004-0x0069B17C
	public void OnOkClicked(GameObject go); // 0x0069B23C-0x0069B44C
	public override void Show(); // 0x0069B44C-0x0069B7E8
}

public class A : MonoBehaviour // TypeDefIndex: 4280
{
	// Constructors
	public A(); // 0x0070541C-0x00705424

	// Methods
	public void OnCollisionWrapperEnter(Collision collision); // 0x00705414-0x00705418
	public void OnTriggerWrapperEnter(Collider other); // 0x00705418-0x0070541C
}

public class CollisionWrapperA : MonoBehaviour // TypeDefIndex: 4281
{
	// Fields
	public A collisionHandler; // 0x18

	// Constructors
	public CollisionWrapperA(); // 0x00674B74-0x00674B7C

	// Methods
	public void OnCollisionEnter(Collision collision); // 0x00674A24-0x00674ACC
	public void OnTriggerEnter(Collider other); // 0x00674ACC-0x00674B74
}

public class CollisionWrapper : MonoBehaviour // TypeDefIndex: 4282
{
	// Fields
	public ICollisionHandler collisionHandler; // 0x18

	// Nested types
	public interface ICollisionHandler // TypeDefIndex: 4283
	{
		// Methods
		void OnWrapperCollisionEnter(CollisionWrapper wrapper, Collision collision);
		void OnWrapperTriggerEnter(CollisionWrapper wrapper, Collider other);
	}

	// Constructors
	public CollisionWrapper(); // 0x00674A1C-0x00674A24

	// Methods
	public void OnCollisionEnter(Collision collision); // 0x00674878-0x00674948
	public void OnTriggerEnter(Collider other); // 0x00674948-0x00674A1C
}

public class OnTriggerObject : MonoBehaviour // TypeDefIndex: 4284
{
	// Fields
	public OnEnterDelegate OnEnter; // 0x18
	public OnExitDelegate OnExit; // 0x20

	// Nested types
	public delegate void OnEnterDelegate(Collider collider); // TypeDefIndex: 4285; 0x0069F5F4-0x0069F9A8

	public delegate void OnExitDelegate(Collider collider); // TypeDefIndex: 4286; 0x0069F9B8-0x0069FD6C

	// Constructors
	public OnTriggerObject(); // 0x0069FD6C-0x0069FD74

	// Methods
	public void OnTriggerEnter(Collider collider); // 0x0069F5E4-0x0069F5F4
	public void OnTriggerExit(Collider collider); // 0x0069F9A8-0x0069F9B8
}

[AttributeUsage] // 0x00513E7C-0x00513E90
public class OptionalFieldAttribute : Attribute // TypeDefIndex: 4287
{
	// Constructors
	public OptionalFieldAttribute(); // 0x006A2424-0x006A242C
}

public class OverlayIndex : MonoBehaviour // TypeDefIndex: 4288
{
	// Fields
	private UISprite tip; // 0x18
	[CompilerGenerated] // 0x0051C3A8-0x0051C3B8
	private int _index_k__BackingField; // 0x20

	// Properties
	public int index { [CompilerGenerated] /* 0x00524298-0x005242A8 */ get; [CompilerGenerated] /* 0x005242A8-0x005242B8 */ set; } // 0x006A2B04-0x006A2B0C 0x006A2B0C-0x006A2B14

	// Constructors
	public OverlayIndex(); // 0x006A2B14-0x006A2B1C

	// Methods
	public void Refresh(bool tip); // 0x006A2990-0x006A2A6C
	public void Hide(); // 0x006A2A6C-0x006A2B04
}

public class Package00_Popup : UIBaseScreen // TypeDefIndex: 4289
{
	// Fields
	private CollectionManage.Pack pack; // 0x98
	public UILabel TimeCd; // 0xA0
	public UILabel title; // 0xA8
	public UILabel priceLbl; // 0xB0
	public UILabel invalidLbl; // 0xB8
	[SerializeField] // 0x0051C3B8-0x0051C3C8
	private float off; // 0xC0

	// Constructors
	public Package00_Popup(); // 0x006A36E0-0x006A36E8

	// Methods
	public void GetGiftEndtime(); // 0x006A2B1C-0x006A2B54
	public override void Hide(); // 0x006A2B54-0x006A2B5C
	public void OnCancelClicked(); // 0x006A2B5C-0x006A2C00
	public void OnBuyClicked(); // 0x006A2C00-0x006A2C74
	public override void Show(); // 0x006A2C74-0x006A2CA4
	private void OnEnable(); // 0x006A2F40-0x006A3014
	private void OnDisable(); // 0x006A3014-0x006A30B0
	public void PayResult(RiseSdk.PaymentResult result, int billId); // 0x006A30B0-0x006A3190
	private void FreshUI(); // 0x006A2CA4-0x006A2F40
	private void Update(); // 0x006A3190-0x006A36E0
}

public class Package01_Popup : UIBaseScreen // TypeDefIndex: 4290
{
	// Fields
	private CollectionManage.Pack pack; // 0x98
	public UILabel TimeCd; // 0xA0
	public UILabel title; // 0xA8
	public UILabel priceLbl; // 0xB0
	public UILabel invalidLbl; // 0xB8
	[SerializeField] // 0x0051C3C8-0x0051C3D8
	private float off; // 0xC0

	// Constructors
	public Package01_Popup(); // 0x006A4268-0x006A4270

	// Methods
	public void GetGiftEndtime(); // 0x006A36E8-0x006A3720
	public override void Hide(); // 0x006A3720-0x006A3728
	public void OnCancelClicked(); // 0x006A3728-0x006A37CC
	public void OnBuyClicked(); // 0x006A37CC-0x006A3840
	public override void Show(); // 0x006A3840-0x006A3870
	private void OnEnable(); // 0x006A3A80-0x006A3B54
	private void OnDisable(); // 0x006A3B54-0x006A3BF0
	public void PayResult(RiseSdk.PaymentResult result, int billId); // 0x006A3BF0-0x006A3CC8
	private void FreshUI(); // 0x006A3870-0x006A3A80
	private void Update(); // 0x006A3D18-0x006A4268
}

public class Package02_Popup : UIBaseScreen // TypeDefIndex: 4291
{
	// Fields
	public CharSkillUICtl charskillctl; // 0x98
	public static bool GetReward; // 0x00
	private CollectionManage.Pack pack; // 0xA0
	public UILabel TimeCd; // 0xA8
	public UILabel title; // 0xB0
	public UILabel priceLbl; // 0xB8
	public UILabel invalidLbl; // 0xC0
	[SerializeField] // 0x0051C3D8-0x0051C3E8
	private float off; // 0xC8

	// Constructors
	public Package02_Popup(); // 0x006A5078-0x006A5080
	static Package02_Popup(); // 0x006A5080-0x006A5084

	// Methods
	public void GetGiftEndtime(); // 0x006A4270-0x006A42A8
	public override void Hide(); // 0x006A42A8-0x006A42B0
	public void OnCancelClicked(); // 0x006A42B0-0x006A4354
	public void OnBuyClicked(); // 0x006A4354-0x006A43C8
	public override void Show(); // 0x006A43C8-0x006A440C
	private void OnEnable(); // 0x006A461C-0x006A46F0
	private void OnDisable(); // 0x006A46F0-0x006A478C
	public void PayResult(RiseSdk.PaymentResult result, int billId); // 0x006A478C-0x006A48CC
	private void FreshUI(); // 0x006A440C-0x006A461C
	private void Update(); // 0x006A4B28-0x006A5078
}

public class ParticleFollow : MonoBehaviour // TypeDefIndex: 4292
{
	// Fields
	public Transform Target; // 0x18
	public float TweenTime; // 0x20
	private float tweenVelocity; // 0x24

	// Constructors
	public ParticleFollow(); // 0x006A5664-0x006A566C

	// Methods
	private void Awake(); // 0x006A54C0-0x006A54E8
	private void LateUpdate(); // 0x006A54E8-0x006A5654
	private void OnDisable(); // 0x006A5654-0x006A565C
	private void OnEnable(); // 0x006A565C-0x006A5664
}

public class PauseScreen : UIBaseScreen // TypeDefIndex: 4293
{
	// Fields
	[SerializeField] // 0x0051C3E8-0x0051C3F8
	private TaskList taskList; // 0x98
	public GameObject BackMenu; // 0xA0

	// Constructors
	public PauseScreen(); // 0x006A6138-0x006A6140

	// Methods
	private void OnEnable(); // 0x006A5BD0-0x006A5C3C
	private void ShowNativeAd(); // 0x006A5C3C-0x006A5DEC
	private void OnDisable(); // 0x006A5DEC-0x006A5E54
	public override void Show(); // 0x006A5E54-0x006A6018
	public void OnMenuClick(); // 0x006A6018-0x006A6138
}

public class PlayerInfo // TypeDefIndex: 4294
{
	// Fields
	public Action onCoinsChanged; // 0x10
	public Action onKeysChanged; // 0x18
	public Action onScoreMultiplierChanged; // 0x20
	public Action onExpChanged; // 0x28
	public Action onLevelChanged; // 0x30
	public Action<Characters.CharacterType> OnCharacterOutfitUnlocked; // 0x38
	public Action<Characters.CharacterType> OnSymbolCollected; // 0x40
	public Action<Helmets.HelmType> OnHelmUnlocked; // 0x48
	public Action OnSubscribed; // 0x50
	public Action onPowerupAmountChanged; // 0x58
	public Action<PropType> onPowerupTireChanged; // 0x60
	private int _amountOfGameChestesOpened; // 0x68
	private DateTime _lastPushLocalNotificationDateTime; // 0x70
	private bool _transcendByLeadborad; // 0x78
	private bool _hasScoreboosterTutorial; // 0x79
	private Dictionary<Characters.CharacterType, int[]> _characterThemesSeen; // 0x80
	private Dictionary<Characters.CharacterType, int[]> _characterThemesUnlocked; // 0x88
	private int[] _collectedCharacterTokens; // 0x90
	private int _currentCharacter; // 0x98
	private Helmets.HelmType _currentHelmet; // 0x9C
	private int[] _currentTaskProgress; // 0xA0
	private int _currentTaskSet; // 0xA8
	private int[] _achievementProgress; // 0xB0
	private bool[] _achievementAwardPayedOut; // 0xB8
	private bool[] _taskRewardPayedOut; // 0xC0
	private int[] _achievementProgressInGooglePlay; // 0xC8
	private int[] _currentTrialProgress; // 0xD0
	private int _currentTrialIndex; // 0xD8
	private int _totalTrialDays; // 0xDC
	private int _updateRewardIndex; // 0xE0
	private bool _updateFromLastApp; // 0xE4
	private int _version; // 0xE8
	private int _amountOfOpenGameApp; // 0xEC
	private int _dailyLandingInRow; // 0xF0
	private int _dailyLandingLastPayoutDayOfYear; // 0xF4
	private bool _dailyLandingPayedOut; // 0xF8
	private bool _dailyLandingTrigger; // 0xF9
	private bool _dirty; // 0xFA
	private bool _doubleScore; // 0xFB
	private int _openAppCountDaily; // 0xFC
	private int _playOnceTimes; // 0x100
	private int _playDailyTimes; // 0x104
	private int _playerLevelTimes; // 0x108
	private DateTime _updateDateTime; // 0x110
	private int _gameOverDoubleCoinsShowCountLastDay; // 0x118
	private int _gameOverDoubleCoinsShowCountOneDay; // 0x11C
	private int _gameOverDoubleCoinsShowCountTwoDay; // 0x120
	private DateTime _lastGameOverDoubleCoinsDateTime; // 0x128
	private int _watchDoublePlayerLevel; // 0x130
	private int _playerLevel; // 0x134
	private DateTime _firstInstallDate; // 0x138
	private DateTime _lastOpenGameDateTime; // 0x140
	private DateTime _lastLotteryFreeViewDateTime; // 0x148
	private DateTime _lastLotteryFreeDateTime; // 0x150
	private bool _hasFreeToNextTaskSet; // 0x158
	private DateTime _lastShowFreeUpgradeDate; // 0x160
	private DateTime _lastGameOverDoubleCoinViewDate; // 0x168
	private DateTime _lastPlayDate; // 0x170
	private int _showTrialPopupCount; // 0x178
	private int _showSubscriptionPopupCount; // 0x17C
	private int _watchFreeVideoTime; // 0x180
	private Dictionary<Characters.CharacterType, bool> _hasCharacterBeenSeen; // 0x188
	private bool _hasDoubleCoins; // 0x190
	private Dictionary<Helmets.HelmType, bool> _hasHelmetBeenSeen; // 0x198
	private int _openFreeChestCount; // 0x1A0
	private int _completeTaskCount; // 0x1A4
	private bool _menuSliderShow; // 0x1A8
	private bool _autoShowChangePlayerName; // 0x1A9
	private bool _hasShownPlayerMenuPopup; // 0x1AA
	private int _highestScore; // 0x1AC
	private int _lotteryWatchViewRemainCount; // 0x1B0
	private int _lotteryFreeRemainCount; // 0x1B4
	private int _gameOverDoubleCoinViewCycleCount; // 0x1B8
	private int _donotClickGameOverDoubleCoinViewCount; // 0x1BC
	private int _freeUpgradeCount; // 0x1C0
	private int _freeUpgradeInterval; // 0x1C4
	public Dictionary<Helmets.HelmType, bool> _helmetUnlockStatus; // 0x1C8
	private Dictionary<string, string> _inappHistory; // 0x1D0
	private static PlayerInfo _instance; // 0x00
	private Dictionary<Characters.CharacterType, int> _lastSelectedThemes; // 0x1D8
	private int _taskCompletedSum; // 0x1E0
	private int _numberOfRuns; // 0x1E4
	private int _numberOfRunsSinceLastGuideline; // 0x1E8
	private bool _hasFacebookLogin; // 0x1EC
	private List<CelebrationReward> _pendingRewards; // 0x1F0
	private bool _gameOverDoubleConfirmNoRemind; // 0x1F8
	private bool _shouldShownPlayerMenuPopup; // 0x1F9
	private bool _firstGameOverNoRemind; // 0x1FA
	private bool _hasRated; // 0x1FB
	private bool _shouldShowDailyLandingPopup; // 0x1FC
	private bool _hasSubscribed; // 0x1FD
	private bool _hasRemoveAd; // 0x1FE
	private bool _tutorialCompleted; // 0x1FF
	private int _tutorialStep; // 0x200
	private Dictionary<PropType, int> _upgradeAmounts; // 0x208
	private Dictionary<PropType, int> _upgradeTiers; // 0x210
	private Dictionary<EnvType, int> _wallWalkTutorialCount; // 0x218
	private int _amountOfCoins; // 0x220
	private int _amountOfKeys; // 0x224
	private DateTime _gameOverFullAdLastDate; // 0x228
	private int _gameOverFullAdCount; // 0x230
	private bool _hasTaskCompleted; // 0x234
	private DateTime _gameoverUITryNextTime; // 0x238
	private int _gameoverUITryCount; // 0x240
	private DateTime _ignoreSubscriptionNextTime; // 0x248
	private bool _ignoreSubscriptionPopup; // 0x250
	private bool _isNewPlayer; // 0x251
	private int _forceNextCityOrder; // 0x254
	private int _amountOfLevel; // 0x258
	public bool _hasHeadStartTutorial; // 0x25C
	public bool _hasLeanTutorial; // 0x25D
	private bool _levelTaskComplete; // 0x25E
	private int _amountOfExp; // 0x260
	public int GlobalRank; // 0x264
	public int VipRank; // 0x268
	public static EnvType currentScene; // 0x08
	[CompilerGenerated] // 0x0051C3F8-0x0051C408
	private CelebrationReward _lastAddedReward_k__BackingField; // 0x270
	[CompilerGenerated] // 0x0051C408-0x0051C418
	private Statistics _stats_k__BackingField; // 0x278
	public const string LockCharKey = "lockchar"; // Metadata: 0x001F6586

	// Properties
	public int watchFreeVideoTime { get; set; } // 0x006B0EC8-0x006B0ED0 0x006B0ED0-0x006B0EE0
	public int lotteryFreeRemainCount { get; set; } // 0x006B0EE0-0x006B0EE8 0x006B0EE8-0x006B0F04
	public int donotClickGameOverDoubleCoinViewCount { get; set; } // 0x006B0F04-0x006B0F0C 0x006B0F0C-0x006B0F28
	public int currentTrialIndex { get; set; } // 0x006B0F28-0x006B0F30 0x006B0F30-0x006B0F4C
	public int totalTrialDays { get; set; } // 0x006B0F4C-0x006B0F54 0x006B0F54-0x006B0F70
	public int Version { get; set; } // 0x006B0F70-0x006B0F78 0x006B0F78-0x006B0F88
	public int OpenGameAppAmount { get; set; } // 0x006B0F88-0x006B0F90 0x006B0F90-0x006B0FA0
	public int showTrialPopupCount { get; set; } // 0x006B0FA0-0x006B0FA8 0x006B0FA8-0x006B0FC4
	public int showSubscriptionPopupCount { get; set; } // 0x006B0FC4-0x006B0FCC 0x006B0FCC-0x006B0FE8
	public int lotteryWatchViewRemainCount { get; set; } // 0x006B0FE8-0x006B0FF0 0x006B0FF0-0x006B100C
	public int amountOfCoins { get; set; } // 0x006B100C-0x006B1014 0x006A1210-0x006A1238
	public int amountOfLevel { get; set; } // 0x006ACCB0-0x006ACCC8 0x006AC750-0x006AC854
	public int amountOfExp { get; set; } // 0x006B1014-0x006B101C 0x006AC854-0x006AC87C
	public bool waitingNextTaskSet { get; set; } // 0x006B101C-0x006B1024 0x006AC87C-0x006AC890
	public int amountOfKeys { get; set; } // 0x006B1024-0x006B102C 0x006A1238-0x006A1260
	public int amountOfGameChestesOpened { get; set; } // 0x006B102C-0x006B1034 0x006B1034-0x006B1050
	public bool transcendByLeadborad { get; set; } // 0x006B1050-0x006B1058 0x006B1058-0x006B1080
	public bool hasScoreboosterTutorial { get; set; } // 0x006B1080-0x006B1088 0x006B1088-0x006B10B0
	public int currentCharacter { get; set; } // 0x006B10B0-0x006B10B8 0x006B10B8-0x006B10D4
	public Helmets.HelmType currentHelmet { get; set; } // 0x006B10D4-0x006B10DC 0x006B07F4-0x006B0810
	public bool menuSliderShow { get; set; } // 0x006B10DC-0x006B10E4 0x006B10E4-0x006B110C
	public int currentTaskSet { get; } // 0x006B110C-0x006B1114 
	public int currentThemeIndex { get; set; } // 0x006B1114-0x006B111C 0x006B111C-0x006B1130
	public bool doubleScore { get; set; } // 0x006B1130-0x006B1138 0x006B1138-0x006B116C
	public bool hasDoubleCoins { get; set; } // 0x006B116C-0x006B1174 0x006B1174-0x006B119C
	public DateTime firstInstallDate { get; set; } // 0x006B119C-0x006B11A4 0x006B11A4-0x006B11B4
	public int openFreeChestCount { get; set; } // 0x006B11B4-0x006B11BC 0x006B11BC-0x006B11DC
	public int completeTaskCount { get; set; } // 0x006B11DC-0x006B11E4 0x006B11E4-0x006B1204
	public bool autoShowChangePlayerName { get; set; } // 0x006B1204-0x006B120C 0x006B120C-0x006B1234
	public bool hasShownPlayerMenuPopup { get; set; } // 0x006B1234-0x006B123C 0x006B123C-0x006B1264
	public int gameOverDoubleCoinsShowCountLastDay { get; set; } // 0x006B1264-0x006B126C 0x006B126C-0x006B1288
	public int watchDoublePlayerLevel { get; set; } // 0x006B1288-0x006B1290 0x006B1290-0x006B12AC
	public int playerLevel { get; set; } // 0x006B12AC-0x006B12B4 0x006B12B4-0x006B12DC
	public int highestScore { get; set; } // 0x006B12DC-0x006B12E4 0x006B12E4-0x006B1300
	public bool hasFreeToNextTaskSet { get; set; } // 0x006B1300-0x006B1308 0x006B1308-0x006B131C
	public static PlayerInfo Instance { get; } // 0x0069B17C-0x0069B23C 
	public CelebrationReward lastAddedReward { [CompilerGenerated] /* 0x005242B8-0x005242C8 */ get; [CompilerGenerated] /* 0x005242C8-0x005242D8 */ private set; } // 0x006B131C-0x006B1324 0x006B1324-0x006B132C
	public int taskCompletedSum { get; set; } // 0x006B132C-0x006B134C 0x006B134C-0x006B1354
	public int numberOfRuns { get; set; } // 0x006B1354-0x006B135C 0x006B135C-0x006B1378
	public bool hasFacebookLogin { get; set; } // 0x006B1378-0x006B1380 0x006B1380-0x006B1394
	public List<CelebrationReward> pendingRewards { get; set; } // 0x006B1394-0x006B139C 0x006B139C-0x006B13AC
	public int updateRewardIndex { get; set; } // 0x006B13AC-0x006B13B4 0x006B13B4-0x006B13D0
	public bool updateFromLastApp { get; set; } // 0x006B13D0-0x006B13D8 0x006B13D8-0x006B1400
	public int rawMultiplier { get; } // 0x006AD164-0x006AD1D8 
	public bool gameOverDoubleConfirmNoRemind { get; set; } // 0x006B1400-0x006B1408 0x006B1408-0x006B1430
	public int scoreMultiplier { get; } // 0x006B1430-0x006B1510 
	public bool firstGameOverNoRemind { get; set; } // 0x006B1510-0x006B1518 0x006B1518-0x006B1540
	public DateTime lastPlayDate { get; set; } // 0x006B1540-0x006B1548 0x006B1548-0x006B1558
	public int playOnceTimes { get; set; } // 0x006B1558-0x006B1560 0x006B1560-0x006B1570
	public int playDailyTimes { get; set; } // 0x006B1570-0x006B1578 0x006B1578-0x006B1588
	public int playerLevelTimes { get; set; } // 0x006B1588-0x006B1590 0x006B1590-0x006B15A0
	public int openAppCountDaily { get; set; } // 0x006B15A0-0x006B15A8 0x006B15A8-0x006B15C4
	public bool hasRated { get; set; } // 0x006B15C4-0x006B15CC 0x006B15CC-0x006B15F4
	public bool shouldShowPlayerMenuPopup { get; set; } // 0x006B15F4-0x006B15FC 0x006B15FC-0x006B1624
	public bool hasTaskCompleted { get; set; } // 0x006B1624-0x006B162C 0x006B162C-0x006B1654
	public bool ignoreSubscriptionPopup { get; set; } // 0x006B1654-0x006B165C 0x006B165C-0x006B1684
	public DateTime ignoreSubscriptionNextTime { get; set; } // 0x006B1684-0x006B168C 0x006B168C-0x006B171C
	public int gameoverUITryCount { get; set; } // 0x006B171C-0x006B1724 0x006B1724-0x006B1740
	public DateTime gameoverUITryNextTime { get; set; } // 0x006B1740-0x006B1748 0x006B1748-0x006B17D8
	public bool isNewPlayer { get; set; } // 0x006B17D8-0x006B17E0 0x006B17E0-0x006B1808
	public Statistics stats { [CompilerGenerated] /* 0x005242D8-0x005242E8 */ get; [CompilerGenerated] /* 0x005242E8-0x005242F8 */ private set; } // 0x006B1808-0x006B1810 0x006B1810-0x006B1818
	public int gameOverFullAdCount { get; set; } // 0x006B1818-0x006B1820 0x006B1820-0x006B183C
	public DateTime gameOverFullAdDate { get; set; } // 0x006B183C-0x006B1844 0x006B1844-0x006B18D4
	public int forceNextEnvType { get; set; } // 0x006B18D4-0x006B18DC 0x006B18DC-0x006B18F8
	public bool tutorialCompleted { get; set; } // 0x006B18F8-0x006B1918 0x006B1918-0x006B1940
	public bool hasHeadStartTutorial { get; set; } // 0x006B1940-0x006B1948 0x006B1948-0x006B1970
	public bool hasLeanTutorial { get; set; } // 0x006B1970-0x006B1978 0x006B1978-0x006B19A0
	public int tutorialStep { get; set; } // 0x006B19A0-0x006B19A8 0x006B19A8-0x006B19C4
	public bool TutorialForest { get; set; } // 0x006B19C4-0x006B1A10 0x006B1A10-0x006B1A60
	public bool hasRemoveADbyGift { get; set; } // 0x006B1A60-0x006B1AAC 0x006B1AAC-0x006B1B10
	public bool hasRemoveAd { get; set; } // 0x006A0274-0x006A0290 0x006B1B10-0x006B1BD8
	public bool hasSubscribed { get; set; } // 0x006B1BD8-0x006B1BE0 0x006B1BE0-0x006B1CB8
	public int GameDoubleVideoTimes { get; set; } // 0x006B2264-0x006B22B4 0x006B22B4-0x006B2308
	public bool DoubleCoinGift { get; set; } // 0x006B2308-0x006B2354 0x006A3CC8-0x006A3D18
	public bool RoleCoinGift { get; set; } // 0x006B2354-0x006B23E8 0x006A48CC-0x006A491C
	public int GameFreeRoleVideoAmoutTimes { get; set; } // 0x006B23E8-0x006B2438 0x006B2438-0x006B248C
	public int GameFreeRoleVideoDailyTimes { get; set; } // 0x006B248C-0x006B24DC 0x006B24DC-0x006B2530
	public bool DailyShowRole { get; set; } // 0x006B2530-0x006B258C 0x006B258C-0x006B25EC

	// Nested types
	private enum Key // TypeDefIndex: 4295
	{
		AmountOfCoins = 0,
		HighestScore = 1,
		HasSubscribed = 2,
		HasRemoveAd = 3,
		DailyLandingPayedOut = 6,
		CurrentCharacter = 7,
		CurrentMissionSet = 8,
		CurrentMissionSetProgress = 9,
		CollectedCharacterTokens = 10,
		TranscendByLeadborad = 11,
		TutorialCompleted = 12,
		TutorialStep = 13,
		DoubleCoins = 15,
		DailyLandingInRow = 17,
		MissionCompletedSum = 18,
		NumberOfRunsSinceLastGuideline = 19,
		AutoShowChangePlayerName = 20,
		HasFacebookLogin = 21,
		HasShownPlayerMenuPopup = 22,
		ShouldShownPlayerMenuPopup = 23,
		FirstGameOverNoRemind = 24,
		HasShownMission1Popup = 25,
		HasRated = 26,
		HasTaskCompleted = 27,
		DailyLandingLastPayoutDayOfYear = 29,
		HasScoreboosterTutorial = 30,
		HasHoverboardsBeenSeen = 31,
		UnlockedHoverboardTypes = 32,
		CurrentHoverboard = 33,
		HistoryOfInapp = 36,
		HasCharacterBeenSeen = 37,
		AmountOfKeys = 39,
		OpenFreeChestCount = 40,
		CompleteTaskCount = 41,
		CharacterThemesUnlocked = 43,
		CharacterLastSelectedThemes = 44,
		CharacterThemesSeen = 45,
		PendingRewards = 46,
		GameOverDoubleConfirnNoRemind = 47,
		NumberOfRuns = 48,
		Stats = 49,
		FirstInstallDate = 51,
		HasFreeToNextTaskSet = 52,
		AmountOfGameChestesOpened = 53,
		LotteryRemainCount = 54,
		LotteryLastDateTime = 55,
		ShowTrialPopupCount = 56,
		LastShowFreeUpgradeDate = 57,
		FreeUpgradeCount = 58,
		MenuSliderShow = 59,
		AchievementProgress = 61,
		AchievementRewardPayedOut = 62,
		GameOverFullAdCount = 63,
		GameOverFullAdLastDate = 64,
		ForceNextCityOrder = 65,
		GameOverUITryCount = 66,
		GameOverUITryNextTime = 67,
		IgnoreSubscriptionPopup = 68,
		IgnoreSubscriptionNextTime = 69,
		LastPlayTime = 70,
		UpdateRewardIndex = 71,
		UpdateFromLastApp = 72,
		LastPushLocalNotificationDateTime = 73,
		Version = 74,
		AmountOfOpenGameApp = 75,
		LastOpenGameDateTime = 76,
		WallWalkTutorialCount = 77,
		GameOverDoubleCoinViewCycleCount = 78,
		DonotClickGameOverDoubleCoinViewCount = 79,
		IsNewPlayer = 80,
		LastGameOverDoubleCoinViewDate = 81,
		LastClearSingleUserDateTime = 82,
		LastSendSingerUserAverageTime = 83,
		LastSendDayAveragePlayTime = 84,
		OpenAppCountDaily = 85,
		PlayOnceTimes = 86,
		PlayDailyTimes = 87,
		PlayerLevelTimes = 88,
		GameOverDoubleCoinsShowCountOneDay = 89,
		GameOverDoubleCoinsShowCountTwoDay = 90,
		GameOverDoubleCoinsShowCountLastDay = 91,
		WatchDoublePlayerLevel = 92,
		PlayerLevel = 93,
		LastGameOverDoubleCoinsDateTime = 94,
		UpdateDateTime = 95,
		CurrentTrialProgress = 96,
		CurrentTrialIndex = 97,
		TotalTrialDays = 98,
		LotteryFreeCount = 99,
		LotteryFreeLastDateTime = 100,
		AmountOfLevel = 101,
		AmountOfExp = 102,
		LevelTaskComplete = 103,
		TaskRewardPayedOut = 104,
		HasHeadStartTutorial = 105,
		DailyLandingTrigger = 106,
		WatchFreeVideoTime = 107,
		ShowSubscriptionPopupCount = 108,
		HasLeanTutorial = 109
	}

	// Constructors
	private PlayerInfo(); // 0x006A88EC-0x006A8C4C
	static PlayerInfo(); // 0x006B25EC-0x006B35F0

	// Methods
	public void AddPendingReward(CelebrationReward reward); // 0x006AA0D8-0x006AA26C
	public void RemovePendingReward(CelebrationReward reward); // 0x006AA26C-0x006AA3E8
	private bool FindChest(CelebrationReward mbr); // 0x006AA3E8-0x006AA40C
	private bool FindSuperChest(CelebrationReward mbr); // 0x006AA40C-0x006AA430
	public void AddSaveGemToUnlock(); // 0x006AA430-0x006AA4D4
	public bool AddTransactionToHistory(string orderId, string itemId); // 0x006AA4D4-0x006AA5AC
	public void BragCompleted(); // 0x006AA5AC-0x006AA5B0
	public void CheckIfWeShouldRemoveProgressForDailyQuestInRow(); // 0x006AA5CC-0x006AA684
	public void SetSymbol(Characters.CharacterType characterType, int amount); // 0x006AA684-0x006AA6D0
	public void CollectSymbol(Characters.CharacterType characterType, int amount); // 0x006AA6D0-0x006AA844
	public void UpdateGoogleAchievement_UnlockedCharacterCount(); // 0x006AA844-0x006AA848
	public void DecreaseSymbol(Characters.CharacterType characterType, int amount); // 0x006AA848-0x006AA8BC
	public int GetCollectedSymbols(Characters.CharacterType ModelType, int idx = 0 /* Metadata: 0x001F657A */); // 0x006AA8BC-0x006AA9D8
	public PrizeEntryTemplate GetSymbolsIcon(Characters.CharacterType ModelType); // 0x006AA9D8-0x006AA9FC
	public int GetCollectedSymbolsTotalPrice(Characters.CharacterType characterType); // 0x006AA9FC-0x006AAAE8
	public int GetCurrentTaskProgress(int task); // 0x006AAAE8-0x006AAB5C
	public int GetCurrentTier(PropType type); // 0x006AAB5C-0x006AABF8
	public float GetHelmCoolDown(); // 0x006AABF8-0x006AAC00
	public int GetIndexForLastSelectedTheme(Characters.CharacterType character); // 0x006AAC00-0x006AACA0
	public float GetPowerupDuration(PropType type); // 0x006AACA0-0x006AAE2C
	public float GetCharskillConfig(PropType PropType); // 0x006AAE2C-0x006AAEA0
	public int GetCharskillAddConfig(bool IsCoinBouns); // 0x006AAEA0-0x006AAEB8
	public string GetplusDescrip(PropType type); // 0x006AAEB8-0x006AAFE0
	public float GetPowerupDuration(PrizeEntryType type); // 0x006AAFE0-0x006AB000
	public float GetPowerupLandSpeed(PropType type); // 0x006AB000-0x006AB0A4
	public float GetPowerupSpeed(PropType type); // 0x006AB0A4-0x006AB148
	private static List<CelebrationReward> GetRewardsFromString(string rewardsAsString); // 0x006AB148-0x006AB2C8
	private static string GetSavePath(); // 0x006AB2C8-0x006AB33C
	private static string GetStringFromRewards(List<CelebrationReward> rewards); // 0x006AB33C-0x006AB4E8
	public int GetUpgradeAmount(PropType type); // 0x006AB4E8-0x006AB550
	public void SetUpgradeAmount(PropType type, int num); // 0x006AB550-0x006AB5C0
	public int GetUpgradeTierSum(); // 0x006AB5C0-0x006AB6B8
	public int GetLowestTier(); // 0x006AB6B8-0x006AB768
	private int Get(PropType proptype, int val); // 0x006AB768-0x006AB7BC
	public bool HasHelmetBeenSeen(Helmets.HelmType helmType); // 0x006AB7BC-0x006AB8A4
	public void IncreasePowerupTier(PropType type); // 0x006AB8A4-0x006ABA64
	public void IncreaseUpgradeAmount(PropType type, int amount = 1 /* Metadata: 0x001F657E */); // 0x006ABADC-0x006ABC3C
	public bool IncrementCurrentTaskProgress(int task, int target); // 0x006ABC3C-0x006ABCC8
	public void InitCurrentTaskSet(int taskSet, int taskCount, bool resetProgress, int CurIdx = -1 /* Metadata: 0x001F6582 */); // 0x006ABCC8-0x006ABE24
	private void InitDailyLanding(); // 0x006ABE38-0x006ABE40
	public int GetDailyLandingDaysInRow(out bool Istoday); // 0x0069CCE4-0x0069CE6C
	public void ReceiveDailyLandingPayout(int multiple, Action callback); // 0x006ABE40-0x006ABFE4
	public bool DailyLandingPayOut(); // 0x0069CE6C-0x0069CE7C
	public void InitNew(); // 0x006ABFE4-0x006AC750
	public bool isCharacterActive(Characters.CharacterType characterType); // 0x006AC890-0x006AC898
	public bool IsCollectionComplete(Characters.CharacterType characterType); // 0x006A491C-0x006A4B28
	public void SetMainCharOwn(Characters.CharacterType characterType); // 0x006AC898-0x006AC934
	public bool GetMainCharOwn(Characters.CharacterType characterType); // 0x006AC934-0x006AC9D8
	public int CanIncreasePowerup(); // 0x0069D070-0x0069D2C8
	public bool CanUnlockHelm(); // 0x006ACB38-0x006ACCB0
	public bool CanUnlockCharacter(); // 0x0069CF20-0x0069D070
	public bool CanUnlockCharacter(Characters.CharacterType characterType); // 0x006ACCC8-0x006ACDD0
	public bool CanUnlockCharacterOrCTheme(); // 0x006ACDD0-0x006AD148
	public bool IsNewUser(); // 0x006AD148-0x006AD164
	public bool IsThemeSeenForCharacter(Characters.CharacterType character, int index); // 0x006AD1D8-0x006AD2B4
	public bool IsThemeUnlockedForCharacter(Characters.CharacterType character, int index); // 0x006AD2B4-0x006AD3BC
	public int HasThemeUnlockedForCharactersNum(); // 0x006AD3BC-0x006AD59C
	public bool IsSymbolUseful(Characters.CharacterType characterType); // 0x006AD59C-0x006AD69C
	public void Load(); // 0x006A8C4C-0x006A9D6C
	private bool LoadBool(Dictionary<Key, string> dict, Key key, bool defaultValue); // 0x006AD7EC-0x006AD8C0
	private bool[] LoadBoolArray(Dictionary<Key, string> dict, Key key, bool[] defaultValue); // 0x006ADB38-0x006ADC5C
	private DateTime LoadDateTime(Dictionary<Key, string> dict, Key key, DateTime defaultValue); // 0x006AD8C0-0x006AD984
	private T LoadEnum<T>(Dictionary<Key, string> dict, Key key, T defaultValue);
	private int LoadInt(Dictionary<Key, string> dict, Key key, int defaultValue); // 0x006AD70C-0x006AD7EC
	private int[] LoadIntArray(Dictionary<Key, string> dict, Key key, int[] defaultValue); // 0x006ADA14-0x006ADB38
	private long LoadLong(Dictionary<Key, string> dict, Key key, long defaultValue); // 0x006ADC5C-0x006ADD38
	private string LoadString(Dictionary<Key, string> dict, Key key, string defaultValue); // 0x006AD984-0x006ADA14
	public void LockHelm(Helmets.HelmType helmType); // 0x006ADD38-0x006ADDD0
	private static void LogError(string msg, UnityEngine.Object context); // 0x006ABA64-0x006ABADC
	private static void LogWarning(string msg, UnityEngine.Object context); // 0x006ADDD0-0x006ADE48
	public void MarkHelmetAsSeen(Helmets.HelmType helmType); // 0x006ADE48-0x006ADF0C
	public void ResetHighestScoreTo(int score); // 0x006AA5B0-0x006AA5CC
	public void RunCompleted(); // 0x006ADF0C-0x006ADF84
	private void Save(); // 0x006ADF84-0x006AEAE4
	private void SaveBool(Dictionary<Key, string> dict, Key key, bool value); // 0x006AEB94-0x006AEC1C
	private void SaveBoolArray(Dictionary<Key, string> dict, Key key, bool[] value); // 0x006AED88-0x006AEE44
	private void SaveDateTime(Dictionary<Key, string> dict, Key key, DateTime value); // 0x006AEC1C-0x006AECCC
	private void SaveEnum<T>(Dictionary<Key, string> dict, Key key, T value);
	public void SaveIfDirty(); // 0x006A1260-0x006A1290
	private void SaveInt(Dictionary<Key, string> dict, Key key, int value); // 0x006AEAE4-0x006AEB94
	private void SaveIntArray(Dictionary<Key, string> dict, Key key, int[] value); // 0x006AECCC-0x006AED88
	private void SaveLong(Dictionary<Key, string> dict, Key key, long value); // 0x006AEEB8-0x006AEF68
	private void SaveString(Dictionary<Key, string> dict, Key key, string value); // 0x006AEE44-0x006AEEB8
	public void SetCurrentTaskProgress(int task, int progress); // 0x006AEF68-0x006AEFE8
	public bool GetCurrentAchievementAward(int index); // 0x006AEFE8-0x006AF044
	public bool GetAllAchievementAward(); // 0x006AF044-0x006AF16C
	public void SetCurrentAchivementReward(int index, bool value); // 0x006AF16C-0x006AF1F8
	public void SetCurrentTaskRewardTrue(int index); // 0x006AF1F8-0x006AF2DC
	public bool GetIndexTaskRewardPayedOut(int index); // 0x006AF2DC-0x006AF320
	public void ResetTaskReward(); // 0x006AF320-0x006AF390
	public bool TaskRewardAllPayed(); // 0x006AF390-0x006AF3FC
	public bool TaskRewardAnyPayed(); // 0x006AF3FC-0x006AF468
	public void SetLastSelectedTheme(Characters.CharacterType character, int themeIndex); // 0x006AF468-0x006AF6E4
	public bool CheckIfLotteryCanFree(); // 0x006AF6E4-0x006AF774
	public bool CheckIfLotteryCanWatchFreeView(); // 0x006AF774-0x006AF878
	public string LotteryFreeTimeSpan(); // 0x006AF878-0x006AF9A0
	public void UseLotteryFree(); // 0x006AF9A0-0x006AFA40
	public void UseLotteryWatchView(); // 0x006AFA40-0x006AFA50
	public bool CheckIfFreeUpgrade(); // 0x006AC9D8-0x006ACB38
	public void UseFreeUpgrade(); // 0x006AFA50-0x006AFAEC
	public void ThemeSeen(Characters.CharacterType character, int index); // 0x006AFAEC-0x006AFC78
	public void TriggerOnScoreMultiplierChanged(); // 0x006ABE24-0x006ABE38
	private static void TryGetLoadPaths(out string path, out string externalPath); // 0x006AD69C-0x006AD70C
	public void UnlockHelmet(Helmets.HelmType helmType); // 0x006AFC78-0x006AFD58
	public void UnlockTheme(Characters.CharacterType character, int index); // 0x006AFD58-0x006AFF08
	public void UseUpgrade(PropType type); // 0x006AFF08-0x006B0020
	public bool CheckGameoverUITry(); // 0x006B0020-0x006B0138
	public void ShowGameoverUITry(); // 0x006B0138-0x006B01D8
	public int CheckGameOverDoubleCoinViewRate(int coins); // 0x006B01D8-0x006B01E0
	public void ResetGameOverDoubleCoinViewRate(); // 0x006B01E0-0x006B01F4
	public void DonotClickDoubleCoinView(); // 0x006B01F4-0x006B0204
	public bool CheckWallWalkingTutorial(EnvType envType); // 0x006B0204-0x006B02B8
	public void AddWallWalkingTutorial(EnvType envType); // 0x006B02B8-0x006B0388
	public int UpdateSpanDays(); // 0x006B0388-0x006B043C
	public void CheckGameOverDoubleCoinsSpanDays(); // 0x006B043C-0x006B0550
	public int LastThreeDaysGameOverDoubleCoinsCount(); // 0x006B0550-0x006B0568
	public void UpdateGameOverDoubleCoinsShowCount(); // 0x006B0568-0x006B0580
	public void NextTrialLevel(); // 0x006B0580-0x006B07F4
	public void IncreaseTrialProgress(int number); // 0x006B0810-0x006B0D08
	public int CurrentTrialInfoProgress(); // 0x006B0D08-0x006B0DCC
	public int CurrentTrialInfoLevel(); // 0x006B0DCC-0x006B0E98
	public int NextTrial(int limit); // 0x006B0E98-0x006B0EB4
	public int NextTrial(); // 0x006B0EB4-0x006B0EC8
	public int GetLockSkinNum(); // 0x006B1CB8-0x006B1DD8
	private void InitLockChardata(); // 0x006A9D6C-0x006AA0D8
	public void CheckLockChar(); // 0x006B1DD8-0x006B2264
}

public class pMath // TypeDefIndex: 4296
{
	// Constructors
	public pMath(); // 0x00A9A7BC-0x00A9B87C

	// Methods
	public static float Bell(float x); // 0x00A9A5F4-0x00A9A680
	public static float Lerp(float xFrom, float xTo, float x, float yFrom, float yTo); // 0x00A9A680-0x00A9A72C
	public static float Square(float x); // 0x00A9A72C-0x00A9A7BC
}

public class Data // TypeDefIndex: 4297
{
	// Fields
	private Hashtable hashTable; // 0x10
	private Hashtable listeners; // 0x18
	private Hashtable keyValues; // 0x20
	private bool _dirty; // 0x28

	// Constructors
	public Data(); // 0x00678C9C-0x00678D28

	// Methods
	public void AddOperater<T>(KeyValueOperate<T> keyValueOperate);
	public T Get<T>(string key, T defaultValue);
	public void Set<T>(string key, T newValue, T defaultValue, object[] messages);
	public void Register<T>(string key, T defaultValue, Action<string, T, T, object[]> onChange);
	public void Unregister<T>(string key, T defaultValue, Action<string, T, T, object[]> onChange);
	private IKeyValue<T> GetOrNew<T>(string key, T defaultValue);
	public void Load(); // 0x00678D28-0x00679230
	private static void TryGetLoadPaths(out string path, out string externalPath); // 0x00679230-0x006792A0
	public void Save(); // 0x006792A0-0x006797C0
	private static string GetSavePath(); // 0x006797C0-0x00679834
}

public class KeyValueManager // TypeDefIndex: 4298
{
	// Fields
	public static KeyValueManager Instance; // 0x00
	private Data _data; // 0x10

	// Properties
	public Data Data { get; } // 0x006EF0E4-0x006EF0EC 

	// Constructors
	public KeyValueManager(); // 0x006EEFD0-0x006EF0E4
}

public interface IKeyValueBus // TypeDefIndex: 4299
{
	// Methods
	void Save(Dictionary<string, string> dict);
	void Load(Dictionary<string, string> dict);
}

public class IKeyValue<T> : IKeyValueBus // TypeDefIndex: 4300
{
	// Fields
	public string key;
	private T value;
	public T defaultValue;
	public KeyValueOperate<T> keyValueOperate;
	private Action<string, T, T, object[]> OnChange;

	// Properties
	public T Value { get; set; }

	// Constructors
	public IKeyValue();
	public IKeyValue(string key, T value, T defaultValue);

	// Methods
	public void Save(Dictionary<string, string> dict);
	public void Load(Dictionary<string, string> dict);
	public void Register(Action<string, T, T, object[]> onChange);
}

public class KeyValueOperate<T> // TypeDefIndex: 4301
{
	// Constructors
	public KeyValueOperate();

	// Methods
	public virtual void Save(Dictionary<string, string> dict, string key, T value);
	public virtual T Load(Dictionary<string, string> dict, string key, T defaultValue);
}

public class IntKeyValue : KeyValueOperate<int> // TypeDefIndex: 4302
{
	// Constructors
	public IntKeyValue(); // 0x006E9590-0x006E962C

	// Methods
	public override void Save(Dictionary<string, string> dict, string key, int value); // 0x006E9400-0x006E94B0
	public override int Load(Dictionary<string, string> dict, string key, int defaultValue); // 0x006E94B0-0x006E9590
}

public class BooleanKeyValue : KeyValueOperate<bool> // TypeDefIndex: 4303
{
	// Constructors
	public BooleanKeyValue(); // 0x00719390-0x007193E0

	// Methods
	public override void Save(Dictionary<string, string> dict, string key, bool value); // 0x00719208-0x007192BC
	public override bool Load(Dictionary<string, string> dict, string key, bool defaultValue); // 0x007192BC-0x00719390
}

public class IntArrayKeyValue : KeyValueOperate<int[]> // TypeDefIndex: 4304
{
	// Constructors
	public IntArrayKeyValue(); // 0x006E93B0-0x006E9400

	// Methods
	public override void Save(Dictionary<string, string> dict, string key, int[] value); // 0x006E91D0-0x006E928C
	public override int[] Load(Dictionary<string, string> dict, string key, int[] defaultValue); // 0x006E928C-0x006E93B0
}

public class PointConstraint : MonoBehaviour // TypeDefIndex: 4305
{
	// Fields
	public Transform master; // 0x18
	private Transform transformCached; // 0x20

	// Constructors
	public PointConstraint(); // 0x00721CE0-0x00721CE8

	// Methods
	private void Awake(); // 0x00721BCC-0x00721BF4
	private void LateUpdate(); // 0x00721BF4-0x00721CE0
}

public interface IPurchaseHandler // TypeDefIndex: 4306
{
	// Methods
	void PurchaseFailure();
	void PurchaseSuccessful();
}

public class PurchaseHandler // TypeDefIndex: 4307
{
	// Fields
	private static PurchaseHandler _instance; // 0x00
	private Action<PropType> _onUpgradePurchase; // 0x10

	// Properties
	public static PurchaseHandler Instance { get; } // 0x00728D24-0x00728DA4 

	// Constructors
	public PurchaseHandler(); // 0x00728DA4-0x00728DAC

	// Methods
	public void AddOnUpgradePurchase(Action<PropType> handler); // 0x00726BB0-0x00726C30
	public void PurchaseCharacter(Characters.CharacterType characterType, int themeIndex, bool isPopup, Action buySuccessCallBack = null); // 0x00726C30-0x00727218
	public void PurchaseHelmetTheme(Helmets.HelmType helmetType, IPurchaseHandler handler); // 0x00727218-0x007276E0
	public void PurchaseHelmet(int number, IPurchaseHandler handler); // 0x007276E0-0x00727960
	public void PurchaseHelmet(Helmets.HelmType helmetType, IPurchaseHandler handler); // 0x00727960-0x00727D9C
	public void PurchaseKeysIfNeeded(int amountToSaveMe); // 0x00727D9C-0x00727E1C
	public void PurchaseCoinsIfNeeded(int amountToSaveMe); // 0x00727E1C-0x00727E9C
	public void PurchaseUpgradeTiers(PropType type, bool isPopup, IPurchaseHandler sender); // 0x00727E9C-0x0072821C
	public void PurchaseUpgrade(PropType type, bool isPopup, IPurchaseHandler sender); // 0x0072821C-0x007286FC
	public void PurchaseUpgradeFreeTiers(PropType type); // 0x00728794-0x00728884
	public void RemoveOnUpgradePurchase(Action<PropType> handler); // 0x00728884-0x00728908
	public void PurchaseChest(ChestType chestType, IPurchaseHandler sender); // 0x00728908-0x00728D24
	public void PurchaseUpgradeTiersFree(PropType type, bool isPopup, IPurchaseHandler sender); // 0x00728DAC-0x007290B0
}

public class RedeemPopup : UIBaseScreen // TypeDefIndex: 4308
{
	// Fields
	[SerializeField] // 0x0051C418-0x0051C428
	private UILabel titleLbl; // 0x98
	[SerializeField] // 0x0051C428-0x0051C438
	private UILabel getLbl; // 0xA0
	[SerializeField] // 0x0051C438-0x0051C448
	private UISprite coinIcon; // 0xA8
	[SerializeField] // 0x0051C448-0x0051C458
	private UISprite keyIcon; // 0xB0
	[SerializeField] // 0x0051C458-0x0051C468
	private UILabel coinNum; // 0xB8
	[SerializeField] // 0x0051C468-0x0051C478
	private UILabel gemNum; // 0xC0
	private int coinAmount; // 0xC8
	private int gemAmount; // 0xCC

	// Constructors
	public RedeemPopup(); // 0x0072E3E4-0x0072E3EC

	// Methods
	public override void Show(); // 0x0072E03C-0x0072E2B8
	private void RefreshLabel(); // 0x0072E2B8-0x0072E364
	public void GetRecodeReward(); // 0x0072E364-0x0072E3E4
}

public class RenderQueueModifier : MonoBehaviour // TypeDefIndex: 4309
{
	// Fields
	private int _lastQueue; // 0x18
	private Renderer[] _renderers; // 0x20
	public UIWidget m_target; // 0x28
	public RenderType m_type; // 0x30

	// Nested types
	public enum RenderType // TypeDefIndex: 4310
	{
		FRONT = 0,
		MID = 1,
		BACK = 2
	}

	// Constructors
	public RenderQueueModifier(); // 0x0072E690-0x0072E698

	// Methods
	private void LateUpdate(); // 0x0072E4C8-0x0072E638
	private void Start(); // 0x0072E638-0x0072E690
}

public class ResumeButtonHelper : MonoBehaviour // TypeDefIndex: 4311
{
	// Fields
	private UIButtonOverlayOff _cachedOverlayHelper; // 0x18
	private bool buttonEnabled; // 0x20

	// Properties
	public bool isButtonEnabled { get; } // 0x007308A4-0x007308AC 
	private UIButtonOverlayOff overlayHelper { get; } // 0x007308AC-0x00730954 

	// Nested types
	[CompilerGenerated] // 0x00514B90-0x00514BA0
	private sealed class _EnableButtonWhenReady_d__4 : IEnumerator<object> // TypeDefIndex: 4312
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public ResumeButtonHelper __4__this; // 0x20
		private float _startTime_5__2; // 0x28
		private float _timeWaited_5__3; // 0x2C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00528134-0x00528144 */ get; } // 0x00730A58-0x00730A60 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00528154-0x00528164 */ get; } // 0x00730AC4-0x00730ACC 

		// Constructors
		[DebuggerHidden] // 0x00528114-0x00528124
		public _EnableButtonWhenReady_d__4(int __1__state); // 0x0073082C-0x00730858

		// Methods
		[DebuggerHidden] // 0x00528124-0x00528134
		void IDisposable.Dispose(); // 0x00730964-0x00730968
		private bool MoveNext(); // 0x00730968-0x00730A58
		[DebuggerHidden] // 0x00528144-0x00528154
		void IEnumerator.Reset(); // 0x00730A60-0x00730AC4
	}

	// Constructors
	public ResumeButtonHelper(); // 0x00730954-0x00730964

	// Methods
	public void DisableButton(); // 0x00730790-0x007307A0
	public void EnableButton(); // 0x007307A0-0x007307B8
	[IteratorStateMachine] // 0x005242F8-0x0052435C
	private IEnumerator EnableButtonWhenReady(); // 0x007307B8-0x0073082C
	private void OnApplicationPause(bool pause); // 0x00730858-0x007308A4
}

public class Revive : MonoBehaviour // TypeDefIndex: 4313
{
	// Fields
	public float WaitForParticlesDelay; // 0x18
	public float RemoveObstaclesDistance; // 0x1C
	[OptionalField] // 0x0051C478-0x0051C4B0
	[SerializeField] // 0x0051C478-0x0051C4B0
	private ParticleSystem reviveParticle; // 0x20
	private Character character; // 0x28
	private Game game; // 0x30
	private static Revive instance; // 0x00
	private TrackController trackController; // 0x38
	[CompilerGenerated] // 0x0051C4B0-0x0051C4C0
	private OnReviveDelegate OnRevive; // 0x40
	[CompilerGenerated] // 0x0051C4C0-0x0051C4D0
	private OnSwitchToRunningDelegate OnSwitchToRunning; // 0x48

	// Properties
	public static Revive Instance { get; } // 0x00731480-0x0073154C 

	// Events
	public event OnReviveDelegate OnRevive {
		add; // 0x007310A8-0x0073114C
		remove; // 0x0073114C-0x007311F0
	}
	public event OnSwitchToRunningDelegate OnSwitchToRunning {
		add; // 0x007311F0-0x00731294
		remove; // 0x00731294-0x00731338
	}

	// Nested types
	public delegate void OnReviveDelegate(); // TypeDefIndex: 4314; 0x00731A94-0x00731CB0

	public delegate void OnSwitchToRunningDelegate(); // TypeDefIndex: 4315; 0x00731CB0-0x00731ECC

	[CompilerGenerated] // 0x00514BA0-0x00514BB0
	private sealed class _ReviveNow_d__14 : IEnumerator<object> // TypeDefIndex: 4316
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Revive __4__this; // 0x20
		private float _timeLeft_5__2; // 0x28

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00528184-0x00528194 */ get; } // 0x00731ECC-0x00731ED4 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005281A4-0x005281B4 */ get; } // 0x00731F38-0x00731F40 

		// Constructors
		[DebuggerHidden] // 0x00528164-0x00528174
		public _ReviveNow_d__14(int __1__state); // 0x007313EC-0x00731418

		// Methods
		[DebuggerHidden] // 0x00528174-0x00528184
		void IDisposable.Dispose(); // 0x00731564-0x00731568
		private bool MoveNext(); // 0x00731568-0x00731A94
		[DebuggerHidden] // 0x00528194-0x005281A4
		void IEnumerator.Reset(); // 0x00731ED4-0x00731F38
	}

	// Constructors
	public Revive(); // 0x0073154C-0x00731564

	// Methods
	private void Awake(); // 0x00731338-0x00731378
	[IteratorStateMachine] // 0x0052439C-0x00524400
	private IEnumerator ReviveNow(); // 0x00731378-0x007313EC
	public void SendRevive(); // 0x00731418-0x00731444
	public void SendSkipRevive(); // 0x00731444-0x00731480
}

public class RightHandCollider : MonoBehaviour // TypeDefIndex: 4317
{
	// Fields
	[SerializeField] // 0x0051C4D0-0x0051C4E0
	private CharacterModel _characterModel; // 0x18
	[CompilerGenerated] // 0x0051C4E0-0x0051C4F0
	private OnHitDelegate OnHi5Pressed; // 0x20
	[CompilerGenerated] // 0x0051C4F0-0x0051C500
	private OnHitDelegate OnHi5Released; // 0x28

	// Events
	public event OnHitDelegate OnHi5Pressed {
		add; // 0x00733928-0x007339CC
		remove; // 0x007339CC-0x00733A70
	}
	public event OnHitDelegate OnHi5Released {
		add; // 0x00733A70-0x00733B14
		remove; // 0x00733B14-0x00733BB8
	}

	// Nested types
	public delegate void OnHitDelegate(); // TypeDefIndex: 4318; 0x00733D68-0x00733F84

	// Constructors
	public RightHandCollider(); // 0x00733F94-0x00733F9C

	// Methods
	private void Awake(); // 0x00733BB8-0x00733BE0
	public void Enable(); // 0x00733BE0-0x00733D58
	private void OnMouseDown(); // 0x00733D58-0x00733D68
	private void OnMouseUp(); // 0x00733F84-0x00733F94
}

public class RunnerAnimation : MonoBehaviour // TypeDefIndex: 4319
{
	// Fields
	private static bool addedListeners; // 0x00
	public float AnimationSpeedUpFactor; // 0x18

	// Constructors
	public RunnerAnimation(); // 0x006BE028-0x006BE038

	// Methods
	public void SetAnimationSpeedEvent(AnimationEvent animEvent); // 0x006BDF58-0x006BE028
}

public class SaveMeAnimateClock : MonoBehaviour // TypeDefIndex: 4320
{
	// Fields
	public UISprite clockTexture; // 0x18
	public UILabel timeLabel; // 0x20

	// Constructors
	public SaveMeAnimateClock(); // 0x006BF938-0x006BF940

	// Methods
	public void FillSpriteAmount(float amount); // 0x006BF824-0x006BF938
}

public class SaveMeButton : MonoBehaviour // TypeDefIndex: 4321
{
	// Fields
	[SerializeField] // 0x0051C500-0x0051C510
	private UILabel freeLbl; // 0x18
	[SerializeField] // 0x0051C510-0x0051C520
	private UILabel watchLbl; // 0x20
	[SerializeField] // 0x0051C520-0x0051C530
	private UILabel adLbl; // 0x28
	[SerializeField] // 0x0051C530-0x0051C540
	private UILabel saveMePrice; // 0x30
	public SaveMePopup saveMePopup; // 0x38
	public BoxCollider cancleCollider; // 0x40
	public static bool ColliderEnable; // 0x00
	private string characterID; // 0x48
	private string helmetID; // 0x50

	// Constructors
	public SaveMeButton(); // 0x006C08F8-0x006C0900

	// Methods
	public void CenterUnit(Transform targetTransform, float aditionalOffset = 0f /* Metadata: 0x001F672A */); // 0x006BF940-0x006BFA4C
	public void WatchVideoOnClick(); // 0x006BFA4C-0x006BFC14
	public void OnClick(); // 0x006BFC14-0x006BFDFC
	public void OnFreeReviveClick(); // 0x006C01D8-0x006C03A4
	public void ReviveGameSuc(); // 0x006BFFC4-0x006C01D8
	private void OnEnable(); // 0x006C03A4-0x006C06A8
	private void OnDisable(); // 0x006C06A8-0x006C0740
	public void OnFreeReward(RiseSdk.AdEventType type, int id, string tag, int eventType); // 0x006C0740-0x006C0844
}

public class SaveMeCancelButton : MonoBehaviour // TypeDefIndex: 4322
{
	// Fields
	public SaveMePopup saveMePopup; // 0x18

	// Constructors
	public SaveMeCancelButton(); // 0x006C0ADC-0x006C0AE4

	// Methods
	public static void CloseSaveMe(); // 0x006C0900-0x006C09AC
	private void OnClick(); // 0x006C0A30-0x006C0AD4
}

public static class SaveMeManager // TypeDefIndex: 4323
{
	// Fields
	public static int _numberOfUsedKeysInCurrentRun; // 0x00
	public static int _numberOfFreeVideoInCurrentRun; // 0x04
	public static int _numberInCurrentRun; // 0x08
	public static bool IS_PURCHASE_MADE_FROM_INGAME; // 0x0C
	public static bool IS_PURCHASE_RUNNING_INGAME; // 0x0D

	// Constructors
	static SaveMeManager(); // 0x006C11DC-0x006C1248

	// Methods
	public static int GetNumberOfKeysToSaveMe(); // 0x006BFDFC-0x006BFEDC
	public static void IncrementNumberOfUsedKeys(); // 0x006BFEDC-0x006BFFC4
	public static void IncrementNumberOfFreeVideo(); // 0x006C0844-0x006C08F8
	public static void IncrementNumber(); // 0x006C0AE4-0x006C0B98
	public static void ResetSaveMeForNewRun(); // 0x006C09AC-0x006C0A30
	public static void SendReviveIfPurchaseSucceeded(); // 0x006C0B98-0x006C0FFC
	public static void SkipReviveIfPurchaseFailed(); // 0x006C0FFC-0x006C11DC
}

public class SaveMePopup : UIBaseScreen // TypeDefIndex: 4324
{
	// Fields
	public SaveMeAnimateClock saveMeAnimateClock; // 0x98
	[SerializeField] // 0x0051C540-0x0051C550
	private UILabel titleLabel; // 0xA0
	public Transform WatchVideoBtn; // 0xA8
	public Transform UseKeysBtn; // 0xB0
	public Transform FreeBtn; // 0xB8
	private const float ANIMATION_DURATION = 5f; // Metadata: 0x001F672E
	private float timeLeft; // 0xC0
	private Vector3 watchVideoOriginePos; // 0xC4
	private Vector3 useKeyOriginePos; // 0xD0
	[SerializeField] // 0x0051C550-0x0051C560
	private UILabel VideoTimes; // 0xE0
	[SerializeField] // 0x0051C560-0x0051C570
	private UIGrid gridbtn; // 0xE8
	private CoinBoxSizer coinbox; // 0xF0

	// Nested types
	[CompilerGenerated] // 0x00514BB0-0x00514BC0
	private sealed class _startClockAnimation_d__19 : IEnumerator<object> // TypeDefIndex: 4325
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public SaveMePopup __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005281D4-0x005281E4 */ get; } // 0x006C1DF8-0x006C1E00 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005281F4-0x00528204 */ get; } // 0x006C1E64-0x006C1E6C 

		// Constructors
		[DebuggerHidden] // 0x005281B4-0x005281C4
		public _startClockAnimation_d__19(int __1__state); // 0x006C1BD8-0x006C1C04

		// Methods
		[DebuggerHidden] // 0x005281C4-0x005281D4
		void IDisposable.Dispose(); // 0x006C1C4C-0x006C1C50
		private bool MoveNext(); // 0x006C1C50-0x006C1DF8
		[DebuggerHidden] // 0x005281E4-0x005281F4
		void IEnumerator.Reset(); // 0x006C1E00-0x006C1E64
	}

	// Constructors
	public SaveMePopup(); // 0x006C1C44-0x006C1C4C

	// Methods
	private void Awake(); // 0x006C1248-0x006C1304
	public override void Init(); // 0x006C1304-0x006C1350
	public void SetCoin(); // 0x006C1350-0x006C1514
	public float getAnimationDuration(); // 0x006C0AD4-0x006C0ADC
	public float getAnimationTimeLeft(); // 0x006C1514-0x006C151C
	public override void Show(); // 0x006C151C-0x006C1544
	private void OnEnable(); // 0x006C1544-0x006C1B64
	[IteratorStateMachine] // 0x00524440-0x005244A4
	private IEnumerator startClockAnimation(); // 0x006C1B64-0x006C1BD8
	public override void GainFocus(); // 0x006C1C04-0x006C1C24
	public override void LooseFocus(); // 0x006C1C24-0x006C1C44
}

public class ScoreCounterSoundPlayer : MonoBehaviour // TypeDefIndex: 4326
{
	// Fields
	public AudioClip scoreSound; // 0x18
	public AudioClip vipSound; // 0x20
	public float volume; // 0x28
	public float stepDelay; // 0x2C
	private float count; // 0x30
	private bool playScore; // 0x34
	private AudioSource scoreSource; // 0x38

	// Nested types
	[CompilerGenerated] // 0x00514BC0-0x00514BD0
	private sealed class _ScoreSoundTimer_d__11 : IEnumerator<object> // TypeDefIndex: 4327
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public ScoreCounterSoundPlayer __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00528224-0x00528234 */ get; } // 0x006C21DC-0x006C21E4 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00528244-0x00528254 */ get; } // 0x006C2248-0x006C2250 

		// Constructors
		[DebuggerHidden] // 0x00528204-0x00528214
		public _ScoreSoundTimer_d__11(int __1__state); // 0x006C2064-0x006C2090

		// Methods
		[DebuggerHidden] // 0x00528214-0x00528224
		void IDisposable.Dispose(); // 0x006C20B0-0x006C20B4
		private bool MoveNext(); // 0x006C20B4-0x006C21DC
		[DebuggerHidden] // 0x00528234-0x00528244
		void IEnumerator.Reset(); // 0x006C21E4-0x006C2248
	}

	// Constructors
	public ScoreCounterSoundPlayer(); // 0x006C2098-0x006C20B0

	// Methods
	private void Awake(); // 0x006C1E6C-0x006C1F1C
	public void PlayCoinSound(float countFactor); // 0x006C1F1C-0x006C1F94
	public void PlayVipSound(); // 0x006C2008-0x006C2048
	public void StopVipSound(); // 0x006C2048-0x006C2064
	[IteratorStateMachine] // 0x005244A4-0x00524508
	private IEnumerator ScoreSoundTimer(); // 0x006C1F94-0x006C2008
	public void StopScoreSound(); // 0x006C2090-0x006C2098
}

public enum ScrollDirection // TypeDefIndex: 4328
{
	Up = 0,
	Down = 1,
	Left = 2,
	Right = 3,
	Stationary = 4
}

public class ScrollingTextLabel : MonoBehaviour // TypeDefIndex: 4329
{
	// Fields
	private bool _destroyOnDisable; // 0x18
	private bool _isScrolling; // 0x19
	private Color _labelBaseColor; // 0x1C
	private Transform _labelTransform; // 0x30
	[SerializeField] // 0x0051C570-0x0051C580
	private UILabel label; // 0x38

	// Nested types
	[CompilerGenerated] // 0x00514BD0-0x00514BE0
	private sealed class _StartScrollingCoroutine_d__8 : IEnumerator<object> // TypeDefIndex: 4330
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public ScrollingTextLabel __4__this; // 0x20
		public bool destroyWhenDone; // 0x28
		public float duration; // 0x2C
		public float fadeOutDuration; // 0x30
		public string text; // 0x38
		public Vector3 startLocalPos; // 0x40
		public Vector3 endLocalPos; // 0x4C
		private float _fadeOutAniFactorStart__0_5__2; // 0x58
		private float _aniFactor__1_5__3; // 0x5C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00528274-0x00528284 */ get; } // 0x006C4D34-0x006C4D3C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00528294-0x005282A4 */ get; } // 0x006C4DA0-0x006C4DA8 

		// Constructors
		[DebuggerHidden] // 0x00528254-0x00528264
		public _StartScrollingCoroutine_d__8(int __1__state); // 0x006C4A40-0x006C4A6C

		// Methods
		[DebuggerHidden] // 0x00528264-0x00528274
		void IDisposable.Dispose(); // 0x006C4A74-0x006C4A78
		private bool MoveNext(); // 0x006C4A78-0x006C4D34
		[DebuggerHidden] // 0x00528284-0x00528294
		void IEnumerator.Reset(); // 0x006C4D3C-0x006C4DA0
	}

	// Constructors
	public ScrollingTextLabel(); // 0x006C4A6C-0x006C4A74

	// Methods
	private void OnDisable(); // 0x006C4724-0x006C472C
	private void OnEnable(); // 0x006C472C-0x006C4810
	public void StartScrolling(string text, Vector3 startLocalPos, Vector3 endLocalPos, float duration, float fadeOutDuration, bool destroyWhenDone); // 0x006C4810-0x006C4960
	[IteratorStateMachine] // 0x00524508-0x0052456C
	private IEnumerator StartScrollingCoroutine(string text, Vector3 startLocalPos, Vector3 endLocalPos, float duration, float fadeOutDuration, bool destroyWhenDone); // 0x006C4960-0x006C4A40
}

public class ScrollPanelPixelPerfect : MonoBehaviour // TypeDefIndex: 4331
{
	// Fields
	private float _pixelFactor; // 0x18
	private Transform _transform; // 0x20
	private UIScrollView dragPanel; // 0x28

	// Constructors
	public ScrollPanelPixelPerfect(); // 0x006C2488-0x006C2498

	// Methods
	private void Start(); // 0x006C2250-0x006C2334
	private void Update(); // 0x006C2334-0x006C2488
}

public class ScrollViewHeightResizer : MonoBehaviour // TypeDefIndex: 4332
{
	// Fields
	[SerializeField] // 0x0051C580-0x0051C590
	private GameObject _scrollBar; // 0x18
	[SerializeField] // 0x0051C590-0x0051C5A0
	private GameObject _scrollCollider; // 0x20
	[SerializeField] // 0x0051C5A0-0x0051C5B0
	private UIPanel _scrollPanel; // 0x28
	[SerializeField] // 0x0051C5B0-0x0051C5C0
	private GameObject _grid; // 0x30
	[SerializeField] // 0x0051C5C0-0x0051C5D0
	private float _staticObjectsHeight; // 0x38
	[SerializeField] // 0x0051C5D0-0x0051C5E0
	private float _centerOffset; // 0x3C
	[SerializeField] // 0x0051C5E0-0x0051C5F0
	private bool _addTopCollider; // 0x40
	[SerializeField] // 0x0051C5F0-0x0051C600
	private bool _addBottomcollider; // 0x41
	[SerializeField] // 0x0051C600-0x0051C610
	private float _zDepth; // 0x44
	[SerializeField] // 0x0051C610-0x0051C620
	private bool rearrange; // 0x48
	private bool isCalculated; // 0x49

	// Properties
	public Vector4 clipping { get; } // 0x006C3070-0x006C30AC 
	public float Height { get; set; } // 0x006C30AC-0x006C30B4 0x006C30B4-0x006C30BC
	public Vector3 scrollPanelPosition { get; } // 0x006C30BC-0x006C3104 

	// Nested types
	[CompilerGenerated] // 0x00514BE0-0x00514BF0
	private sealed class _RepositionscrollView_d__13 : IEnumerator<object> // TypeDefIndex: 4333
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public int frames; // 0x20
		public ScrollViewHeightResizer __4__this; // 0x28
		private int _index__0_5__2; // 0x30

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005282C4-0x005282D4 */ get; } // 0x006C3204-0x006C320C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005282E4-0x005282F4 */ get; } // 0x006C3270-0x006C3278 

		// Constructors
		[DebuggerHidden] // 0x005282A4-0x005282B4
		public _RepositionscrollView_d__13(int __1__state); // 0x006C2D6C-0x006C2D98

		// Methods
		[DebuggerHidden] // 0x005282B4-0x005282C4
		void IDisposable.Dispose(); // 0x006C310C-0x006C3110
		private bool MoveNext(); // 0x006C3110-0x006C3204
		[DebuggerHidden] // 0x005282D4-0x005282E4
		void IEnumerator.Reset(); // 0x006C320C-0x006C3270
	}

	// Constructors
	public ScrollViewHeightResizer(); // 0x006C3104-0x006C310C

	// Methods
	private void AddColliders(); // 0x006C2498-0x006C2904
	public void RearrangeWidgets(); // 0x006C2904-0x006C2CE8
	[IteratorStateMachine] // 0x0052456C-0x005245D0
	private IEnumerator RepositionscrollView(int frames); // 0x006C2CE8-0x006C2D6C
	private void Start(); // 0x006C2D98-0x006C2FAC
	private void Update(); // 0x006C2FAC-0x006C3070
}

public class SetParticleZVelo : MonoBehaviour // TypeDefIndex: 4334
{
	// Fields
	private Game _game; // 0x18
	private ParticleSystem _particleSystem; // 0x20
	private ParticleSystem.MainModule mainModule; // 0x28
	[SerializeField] // 0x0051C620-0x0051C630
	private float _speedMultiplier; // 0x30

	// Constructors
	public SetParticleZVelo(); // 0x006C54D0-0x006C54E0

	// Methods
	private void Awake(); // 0x006C52F0-0x006C53F8
	private void Update(); // 0x006C53F8-0x006C54D0
}

public class Settings : MonoBehaviour // TypeDefIndex: 4335
{
	// Fields
	private static bool _optionsLoaded; // 0x00
	private static float _optionSoundVolume; // 0x04
	private const float OPTION_SOUND_DEFAULT_VOLUME = 1f; // Metadata: 0x001F6746
	private const string OPTION_SOUND_KEY_VOLUME = "OPTION_SOUND_VOLUMN"; // Metadata: 0x001F674A

	// Properties
	public static float optionSoundVolume { get; set; } // 0x006C5DE0-0x006C5E34 0x006C5E34-0x006C5EC0

	// Constructors
	public Settings(); // 0x006C5EC0-0x006C5EC8

	// Methods
	private void Awake(); // 0x006C5D40-0x006C5D44
	private static void LoadOptionsIfNeeded(); // 0x006C5D44-0x006C5DE0
}

public class SettingsPopup : UIBaseScreen // TypeDefIndex: 4336
{
	// Fields
	[SerializeField] // 0x0051C630-0x0051C640
	private UILabel weeklyHighestScoreLbl; // 0x98
	[SerializeField] // 0x0051C640-0x0051C650
	private UILabel titleLbl; // 0xA0
	[SerializeField] // 0x0051C650-0x0051C660
	private UILabel nameLbl; // 0xA8
	[SerializeField] // 0x0051C660-0x0051C670
	private UILabel redeemLbl; // 0xB0
	[SerializeField] // 0x0051C670-0x0051C680
	private UILabel followLbl; // 0xB8
	[SerializeField] // 0x0051C680-0x0051C690
	private UILabel enterNameLbl; // 0xC0
	[SerializeField] // 0x0051C690-0x0051C6A0
	private UILabel submitLbl; // 0xC8
	[SerializeField] // 0x0051C6A0-0x0051C6B0
	private UILabel redeemCodeLbl; // 0xD0
	[SerializeField] // 0x0051C6B0-0x0051C6C0
	private UILabel connectLbl; // 0xD8
	[SerializeField] // 0x0051C6C0-0x0051C6D0
	private UILabel loginedLbl; // 0xE0
	[SerializeField] // 0x0051C6D0-0x0051C6E0
	private UILabel followUsLbl; // 0xE8
	[SerializeField] // 0x0051C6E0-0x0051C6F0
	private UILabel followUsRedeemLbl; // 0xF0
	[SerializeField] // 0x0051C6F0-0x0051C700
	private UILabel okLbl; // 0xF8
	[SerializeField] // 0x0051C700-0x0051C710
	private UILabel googleLbl; // 0x100
	[SerializeField] // 0x0051C710-0x0051C720
	private UITexture headTexture; // 0x108
	[SerializeField] // 0x0051C720-0x0051C730
	private UILabel VersionLabel; // 0x110
	[SerializeField] // 0x0051C730-0x0051C740
	private UILabel playerNameLbl; // 0x118
	[SerializeField] // 0x0051C740-0x0051C750
	private UISprite[] changeNameSprs; // 0x120
	[SerializeField] // 0x0051C750-0x0051C760
	private BoxCollider changeNameCollider; // 0x128
	[SerializeField] // 0x0051C760-0x0051C770
	private GameObject changeNamePanel; // 0x130
	[SerializeField] // 0x0051C770-0x0051C780
	private UIInput inputField; // 0x138
	[SerializeField] // 0x0051C780-0x0051C790
	private UILabel inputLbl; // 0x140
	[SerializeField] // 0x0051C790-0x0051C7A0
	private GameObject sendRecodePanel; // 0x148
	[SerializeField] // 0x0051C7A0-0x0051C7B0
	private UIInput inputRecodeField; // 0x150
	[SerializeField] // 0x0051C7B0-0x0051C7C0
	private GameObject redeemGo; // 0x158
	[SerializeField] // 0x0051C7C0-0x0051C7D0
	private GameObject loginFacebookGo; // 0x160
	[SerializeField] // 0x0051C7D0-0x0051C7E0
	private GameObject hasLoginFacebookGo; // 0x168
	[SerializeField] // 0x0051C7E0-0x0051C7F0
	private GameObject googleGo; // 0x170
	[SerializeField] // 0x0051C7F0-0x0051C800
	private GameObject facebookUrlGo; // 0x178
	[SerializeField] // 0x0051C800-0x0051C810
	private GameObject redeemOKGo; // 0x180
	private UISprite coutrySpr; // 0x188
	private string inputName; // 0x190
	public static bool IsInGameOver; // 0x00
	public static bool IsInPause; // 0x01
	public GameObject MusicOn; // 0x198
	public GameObject MusicOff; // 0x1A0
	public GameObject SoundOn; // 0x1A8
	public GameObject SoundOff; // 0x1B0

	// Constructors
	public SettingsPopup(); // 0x006C6F84-0x006C6F8C
	static SettingsPopup(); // 0x006C6F8C-0x006C6F90

	// Methods
	private void Awake(); // 0x006C5EC8-0x006C5F4C
	private void Start(); // 0x006C5F4C-0x006C5FF4
	private void RefreshLabel(); // 0x006C5FF4-0x006C6248
	public override void Show(); // 0x006C6248-0x006C62F0
	public void OnSendGiftClick(); // 0x006C65F4-0x006C6664
	public void CloseSendRecodePanel(); // 0x006C6664-0x006C6684
	public void SendGiftRecode(); // 0x006C6684-0x006C6700
	public void OnChangeNameClick(GameObject go); // 0x006C6700-0x006C6780
	public void OnChangeNameCloseClick(); // 0x006C6780-0x006C67A0
	public void SubmitNameClick(); // 0x006C67A0-0x006C6824
	private void OnEnable(); // 0x006C6824-0x006C6910
	private void OnDisable(); // 0x006C69FC-0x006C6AE0
	private void RefreshPlayerNameUI(); // 0x006C62F0-0x006C6484
	private void RefreshScoreUI(); // 0x006C6910-0x006C69FC
	private void RefreshHeadUI(); // 0x006C6484-0x006C64F4
	public void URL(); // 0x006C6AE0-0x006C6AE4
	public void OnFacebookLoginClick(); // 0x006C6AE4-0x006C6AE8
	public void OnGoogleClick(); // 0x006C6AE8-0x006C6AEC
	public void FreshUI(); // 0x006C64F4-0x006C65F4
	public void CloseMusic(); // 0x006C6AEC-0x006C6C60
	public void OpenMusic(); // 0x006C6C60-0x006C6DD8
	public void CloseSound(); // 0x006C6DD8-0x006C6EAC
	public void OpenSound(); // 0x006C6EAC-0x006C6F84
}

public class ShopBackgroundScreen : UIBaseScreen // TypeDefIndex: 4337
{
	// Fields
	[SerializeField] // 0x0051C810-0x0051C820
	private UITexture background1; // 0x98
	[SerializeField] // 0x0051C820-0x0051C830
	private UITexture background2; // 0xA0
	public static bool one; // 0x00

	// Constructors
	public ShopBackgroundScreen(); // 0x006C78D8-0x006C78E0
	static ShopBackgroundScreen(); // 0x006C78E0-0x006C7934

	// Methods
	public override void Hide(); // 0x006C78C0-0x006C78C8
	public void HideBackground(); // 0x006C78C8-0x006C78CC
	public override void Show(); // 0x006C78CC-0x006C78D4
	public void ShowBackground(); // 0x006C78D4-0x006C78D8
}

public class SlideinPowerupButton : UIButtonSender // TypeDefIndex: 4338
{
	// Fields
	[SerializeField] // 0x0051C830-0x0051C840
	private GameObject _model; // 0x20
	[SerializeField] // 0x0051C840-0x0051C850
	private UISprite _background; // 0x28
	[SerializeField] // 0x0051C850-0x0051C860
	private UILabel _amount; // 0x30
	private int index; // 0x38
	private PropType propType; // 0x3C
	private SlideinPowerupHelper _helper; // 0x40
	private bool hasInit; // 0x48
	public Color32 INACTIVE_BUTTON_BACKGROUND_COLOR; // 0x4C
	public Color32 ACTIVE_BUTTON_BACKGROUND_COLOR; // 0x50
	[SerializeField] // 0x0051C860-0x0051C870
	public GameObject Buyobj; // 0x58
	[SerializeField] // 0x0051C870-0x0051C880
	public UILabel Coinamount; // 0x60

	// Nested types
	[CompilerGenerated] // 0x00514BF0-0x00514C00
	private sealed class _AnimateColor_d__11 : IEnumerator<object> // TypeDefIndex: 4339
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public float speedFactor; // 0x20
		public UISprite sprite; // 0x28
		public Color32 startValue; // 0x30
		public Color32 endValue; // 0x34
		private float _Factor_5__2; // 0x38

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00528314-0x00528324 */ get; } // 0x006CA214-0x006CA21C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00528334-0x00528344 */ get; } // 0x006CA280-0x006CA288 

		// Constructors
		[DebuggerHidden] // 0x005282F4-0x00528304
		public _AnimateColor_d__11(int __1__state); // 0x006C9308-0x006C9334

		// Methods
		[DebuggerHidden] // 0x00528304-0x00528314
		void IDisposable.Dispose(); // 0x006CA100-0x006CA104
		private bool MoveNext(); // 0x006CA104-0x006CA214
		[DebuggerHidden] // 0x00528324-0x00528334
		void IEnumerator.Reset(); // 0x006CA21C-0x006CA280
	}

	[CompilerGenerated] // 0x00514C00-0x00514C10
	private sealed class __c__DisplayClass20_0 // TypeDefIndex: 4340
	{
		// Fields
		public SlideinPowerupButton __4__this; // 0x10
		public Action<PropType> onFinished; // 0x18

		// Constructors
		public __c__DisplayClass20_0(); // 0x006C9E90-0x006C9E98

		// Methods
		internal void _Show_b__0(); // 0x006C9FFC-0x006CA100
	}

	// Constructors
	public SlideinPowerupButton(); // 0x006C9F7C-0x006C9FFC

	// Methods
	[IteratorStateMachine] // 0x005245D0-0x00524634
	private IEnumerator AnimateColor(UISprite sprite, Color32 startValue, Color32 endValue, float speedFactor); // 0x006C9270-0x006C9308
	public void UpdateAmount(); // 0x006C9334-0x006C93EC
	public void InitSlideinButton(SlideinPowerupHelper helper, int index, PropType type, Vector3 pos); // 0x006C93EC-0x006C94E8
	private void OnDisable(); // 0x006C94E8-0x006C94EC
	public void OnPressButton(); // 0x006C9528-0x006C9570
	public void OnReleaseButton(); // 0x006C95E0-0x006C9628
	public void ResetPowerupButtonColor(); // 0x006C94EC-0x006C9528
	protected override void Send(); // 0x006C9628-0x006C96F4
	private void SetPowerupColor(bool animateIn); // 0x006C9570-0x006C95E0
	public void Show(Vector3 off, Vector3 on, Action<PropType> onFinished, bool showbuy, int coinamount); // 0x006C9CD8-0x006C9E90
	public void Hide(bool instant, Vector3 off); // 0x006C9E98-0x006C9F7C
}

public class SlideinPowerupHelper : MonoBehaviour // TypeDefIndex: 4341
{
	// Fields
	[SerializeField] // 0x0051C880-0x0051C890
	private SlideinPowerupButton[] powerupButtons; // 0x18
	[SerializeField] // 0x0051C890-0x0051C8A0
	private List<PropType> types; // 0x20
	[SerializeField] // 0x0051C8A0-0x0051C8B0
	private GameObject tutorialRoot; // 0x28
	[SerializeField] // 0x0051C8B0-0x0051C8C0
	private Transform finger; // 0x30
	private int _currentHeadstartGear; // 0x38
	private bool _hasInited; // 0x3C
	[SerializeField] // 0x0051C8C0-0x0051C8D0
	private Vector3 positionOff; // 0x40
	[SerializeField] // 0x0051C8D0-0x0051C8E0
	private Vector3 positionOn; // 0x4C
	[SerializeField] // 0x0051C8E0-0x0051C8F0
	private float yOff; // 0x58
	private float showDuration; // 0x5C
	private PropType typeInTutorial; // 0x60
	[CompilerGenerated] // 0x0051C8F0-0x0051C900
	private static Action OnScoreBoostActivated; // 0x00

	// Events
	public static event Action OnScoreBoostActivated {
		add; // 0x006CA288-0x006CA33C
		remove; // 0x006CA33C-0x006CA3F0
	}

	// Nested types
	[CompilerGenerated] // 0x00514C10-0x00514C20
	private sealed class _AnimateColor_d__14 : IEnumerator<object> // TypeDefIndex: 4342
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public float speedFactor; // 0x20
		public UISprite sprite; // 0x28
		public Color32 startValue; // 0x30
		public Color32 endValue; // 0x34
		private float _animationLerpFactor_5__2; // 0x38

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00528364-0x00528374 */ get; } // 0x006CB9D0-0x006CB9D8 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00528384-0x00528394 */ get; } // 0x006CBA3C-0x006CBA44 

		// Constructors
		[DebuggerHidden] // 0x00528344-0x00528354
		public _AnimateColor_d__14(int __1__state); // 0x006CA488-0x006CA4B4

		// Methods
		[DebuggerHidden] // 0x00528354-0x00528364
		void IDisposable.Dispose(); // 0x006CB8BC-0x006CB8C0
		private bool MoveNext(); // 0x006CB8C0-0x006CB9D0
		[DebuggerHidden] // 0x00528374-0x00528384
		void IEnumerator.Reset(); // 0x006CB9D8-0x006CBA3C
	}

	// Constructors
	public SlideinPowerupHelper(); // 0x006CB808-0x006CB8BC

	// Methods
	[IteratorStateMachine] // 0x00524654-0x005246B8
	private IEnumerator AnimateColor(UISprite sprite, Color32 startValue, Color32 endValue, float speedFactor); // 0x006CA3F0-0x006CA488
	public void HidePowerup(bool instant, int index); // 0x006CA4B4-0x006CA5CC
	public void HidePowerups(); // 0x006CA7F4-0x006CA894
	public void HidePowerups(bool instant); // 0x006CA894-0x006CA9A4
	private void InitHelper(); // 0x006CA5CC-0x006CA7F4
	private void OnDestroy(); // 0x006CA9A4-0x006CAAEC
	private void OnDisable(); // 0x006CAAEC-0x006CAC10
	private void OnEnable(); // 0x006CAC10-0x006CAD0C
	private void OnGameEnded(); // 0x006CAD0C-0x006CAD10
	private void ScreenDidChange(string popupName); // 0x006CAD10-0x006CAD94
	public void ShowPowerup(int index); // 0x006CAD94-0x006CB13C
	private void OnFinished(PropType type); // 0x006CB13C-0x006CB548
	public void ShowPowerups(); // 0x006CB548-0x006CB66C
	private void Update(); // 0x006CB66C-0x006CB6D0
	public void SlideinPowerupClicked(int index); // 0x006C96F4-0x006C9CD8
	private void Start(); // 0x006CB6D0-0x006CB808
}

public class SmoothDampFloat // TypeDefIndex: 4343
{
	// Fields
	private float smoothTime; // 0x10
	private float target; // 0x14
	private float value; // 0x18
	public float valueSpeed; // 0x1C

	// Properties
	public float SmoothTime { get; set; } // 0x006CBB28-0x006CBB30 0x006CBB30-0x006CBB38
	public float Target { get; set; } // 0x006CBB38-0x006CBB40 0x006CBB40-0x006CBB48
	public float Value { get; set; } // 0x006CBB48-0x006CBB50 0x006CBB50-0x006CBB58

	// Constructors
	public SmoothDampFloat(float value, float smoothTime); // 0x006CBA44-0x006CBA80

	// Methods
	public void Update(); // 0x006CBA80-0x006CBB28
}

public class SmoothDampVector3 // TypeDefIndex: 4344
{
	// Fields
	private float smoothTime; // 0x10
	private Vector3 target; // 0x14
	private Vector3 value; // 0x20
	private Vector3 velocity; // 0x2C

	// Properties
	public float SmoothTime { get; set; } // 0x006CBDA8-0x006CBDB0 0x006CBDB0-0x006CBDB8
	public Vector3 Target { get; set; } // 0x006CBDB8-0x006CBDC4 0x006CBDC4-0x006CBDD0
	public Vector3 Value { get; set; } // 0x006CBDD0-0x006CBDDC 0x006CBDDC-0x006CBDE8
	public Vector3 Velocity { get; set; } // 0x006CBDE8-0x006CBDF4 0x006CBDF4-0x006CBE00

	// Constructors
	public SmoothDampVector3(Vector3 value, float smoothTime); // 0x006CBB58-0x006CBC04

	// Methods
	public void Update(); // 0x006CBC04-0x006CBDA8
}

public class SoundSlider : MonoBehaviour // TypeDefIndex: 4345
{
	// Fields
	[SerializeField] // 0x0051C900-0x0051C910
	private UISlider slider; // 0x18

	// Constructors
	public SoundSlider(); // 0x006CC210-0x006CC218

	// Methods
	private void Start(); // 0x006CC17C-0x006CC1B0
	public void OnSliderValueChange(); // 0x006CC1B0-0x006CC210
}

public class SpawnUpgradeManager // TypeDefIndex: 4346
{
	// Fields
	private PickupType doubleScoreMultiplier; // 0x10
	private static SpawnUpgradeManager instance; // 0x00
	private PickupType sprint; // 0x18
	private PickupType shield; // 0x20
	private PickupType magnetBooster; // 0x28
	private List<PickupType> pickups; // 0x30
	private System.Random randomGen; // 0x38
	private PickupType gem; // 0x40
	private PickupType chest; // 0x48
	private float spawnSpacing; // 0x50
	private float spawnZ; // 0x54

	// Properties
	public static SpawnUpgradeManager Instance { get; } // 0x006CC24C-0x006CC2C8 

	// Nested types
	private class PickupType // TypeDefIndex: 4347
	{
		// Fields
		public Func<SpawnUpgrade, GameObject> ExtractGameObject; // 0x10
		public int spawnProbability; // 0x18
		public float spawnDistanceMin; // 0x1C
		public float spawnZ; // 0x20

		// Constructors
		public PickupType(); // 0x00FB9D20-0x00FB9D28
	}

	[Serializable]
	[CompilerGenerated] // 0x00514C20-0x00514C30
	private sealed class __c // TypeDefIndex: 4348
	{
		// Fields
		public static readonly __c __9; // 0x00
		public static Func<SpawnUpgrade, GameObject> __9__11_0; // 0x08
		public static Func<SpawnUpgrade, GameObject> __9__11_1; // 0x10
		public static Func<SpawnUpgrade, GameObject> __9__11_2; // 0x18
		public static Func<SpawnUpgrade, GameObject> __9__11_3; // 0x20
		public static Func<SpawnUpgrade, GameObject> __9__11_4; // 0x28
		public static Func<SpawnUpgrade, GameObject> __9__11_5; // 0x30

		// Constructors
		static __c(); // 0x00FB9BDC-0x00FB9C40
		public __c(); // 0x00FB9C40-0x00FB9C48

		// Methods
		internal GameObject _.ctor_b__11_0(SpawnUpgrade spawnPoint); // 0x00FB9C48-0x00FB9C64
		internal GameObject _.ctor_b__11_1(SpawnUpgrade spawnPoint); // 0x00FB9C64-0x00FB9C80
		internal GameObject _.ctor_b__11_2(SpawnUpgrade spawnPoint); // 0x00FB9C80-0x00FB9C9C
		internal GameObject _.ctor_b__11_3(SpawnUpgrade spawnPoint); // 0x00FB9C9C-0x00FB9CB8
		internal GameObject _.ctor_b__11_4(SpawnUpgrade spawnPoint); // 0x00FB9CB8-0x00FB9CD4
		internal GameObject _.ctor_b__11_5(SpawnUpgrade spawnPoint); // 0x00FB9CD4-0x00FB9CF0
	}

	[CompilerGenerated] // 0x00514C30-0x00514C40
	private sealed class __c__DisplayClass14_0 // TypeDefIndex: 4349
	{
		// Fields
		public float z; // 0x10

		// Constructors
		public __c__DisplayClass14_0(); // 0x00FB9CF0-0x00FB9CF8

		// Methods
		internal bool _PerformSelection_b__0(PickupType p); // 0x00FB9CF8-0x00FB9D20
	}

	// Constructors
	public SpawnUpgradeManager(); // 0x006CC5F8-0x006CCD28

	// Methods
	public bool CanSpawnPickup(float z); // 0x006CCD28-0x006CCD38
	private void CheckShieldSpawnRate(); // 0x006CCD38-0x006CCDF0
	public void PerformSelection(SpawnUpgrade spawn, List<GameObject> objectsToVisit); // 0x006CC2C8-0x006CC5F0
	public void Restart(); // 0x006CCE00-0x006CDEE0
	public void SetNextSpawnPositionZ(float z); // 0x006CCDF0-0x006CCE00
}

public class SpeedStripes : MonoBehaviour // TypeDefIndex: 4350
{
	// Fields
	[SerializeField] // 0x0051C910-0x0051C920
	private float _fadeInTime; // 0x18
	[SerializeField] // 0x0051C920-0x0051C930
	private Renderer _renderer; // 0x20
	[SerializeField] // 0x0051C930-0x0051C940
	private Animator _animator; // 0x28
	[SerializeField] // 0x0051C940-0x0051C950
	private Material _OriginalMaterial; // 0x30
	private Material _material; // 0x38
	private Color _originalColor; // 0x40

	// Constructors
	public SpeedStripes(); // 0x00FBA1E8-0x00FBA1F8

	// Methods
	private void Activate(); // 0x00FB9D28-0x00FB9D30
	private void Activate(float time); // 0x00FB9D30-0x00FB9E24
	private void Start(); // 0x00FB9E24-0x00FBA0B0
	private void Deactivate(); // 0x00FBA0B0-0x00FBA0B4
	private void Deactivate(float time); // 0x00FBA0B4-0x00FBA144
	private void OnStartFlypack(); // 0x00FBA144-0x00FBA148
	private void OnStopFlypack(); // 0x00FBA148-0x00FBA14C
	private void OnStopTuboHeadstart(); // 0x00FBA14C-0x00FBA150
	private void Reset(); // 0x00FBA150-0x00FBA1E8
	[CompilerGenerated] // 0x005246B8-0x005246C8
	private void _Activate_b__7_0(float t); // 0x00FBA1F8-0x00FBA27C
}

public enum Stat // TypeDefIndex: 4351
{
	NotSet = 0,
	Diamond = 1,
	Goldbar = 2,
	GoldChainClock = 3,
	GoldChainDollar = 4,
	GoldSkull = 5,
	Headphones = 6,
	LpBlack = 7,
	TapeBlack = 8,
	CoinsFriends = 9,
	AllCoinsJetpack = 10,
	OwnCharacters = 11,
	TaskSetCompleted = 12,
	TaskCompleted = 13,
	TopRunRank1 = 14,
	TopRunRank2 = 15,
	TopRunRank3 = 16,
	TopRunRank4 = 17,
	TopRunRank5 = 18,
	TopRunRank6 = 19,
	TopRunRank7 = 20,
	TopRunRank8 = 21,
	TopRunRank9 = 22,
	TopRunRank10 = 23,
	TopRunRank5orBetter = 24,
	PickupPowerup = 25,
	PokeFriend = 26,
	KeysCollected = 27,
	TopRunRank0 = 28,
	ChestesOpened = 29,
	TopRunFriendsBeaten = 30,
	WordyWeekendChallengesCompleted = 31
}

public class Statistics // TypeDefIndex: 4352
{
	// Fields
	private StatChangedDelegate[] _statChangedHandlers; // 0x10
	private TempStatChangedDelegate[] _tempStatChangedHandlers; // 0x18
	private int[] _tempStatValues; // 0x20
	private int[] _values; // 0x28
	public bool dirty; // 0x30

	// Properties
	public int this[string stat] { get => default; set {} } // 0x00FC0CD8-0x00FC0DFC 0x00FC0DFC-0x00FC0EFC
	public int this[TempStat tempStat] { get => default; set {} } // 0x00FC0EFC-0x00FC0F40 0x00FC0F40-0x00FC0FC4
	public int this[Stat stat] { get => default; set {} } // 0x00FC0480-0x00FC04C4 0x00FC0114-0x00FC0198

	// Nested types
	public delegate void StatChangedDelegate(Stat stat, int newValue); // TypeDefIndex: 4353; 0x00FC1220-0x00FC147C

	public delegate void TempStatChangedDelegate(TempStat tempStat, int newValue); // TypeDefIndex: 4354; 0x00FC0FC4-0x00FC1220

	// Constructors
	public Statistics(); // 0x00FC084C-0x00FC0924

	// Methods
	public void AddStatChangedHandler(Stat stat, StatChangedDelegate handler); // 0x00FBFCF0-0x00FBFE14
	public bool AnyListenerForStat(Stat stat); // 0x00FBFE14-0x00FBFE5C
	public void Clear(); // 0x00FBFE5C-0x00FC0114
	public void Copy(Statistics src); // 0x00FC0198-0x00FC0480
	public static Statistics Parse(string s); // 0x00FC04C4-0x00FC084C
	public void RemoveStatChangedHandler(Stat stat, StatChangedDelegate handler); // 0x00FC0924-0x00FC0A18
	public override string ToString(); // 0x00FC0A18-0x00FC0CD8
}

public class Strings // TypeDefIndex: 4355
{
	// Fields
	private static string language; // 0x00
	public static string LOCALE_FILES_FOLDER; // 0x08
	public static string LOCALE_FILES_MANDATORY_ENDING; // 0x10
	public static string[] values; // 0x18
	private static DocumentFormat _documentFormat; // 0x20

	// Properties
	public static DocumentFormat documentFormat { get; set; } // 0x00FC1AD8-0x00FC1B40 0x00FC1B40-0x00FC1C3C
	public static string Language { get; set; } // 0x00FC2D04-0x00FC2D6C 0x00FC2008-0x00FC20E8

	// Nested types
	public enum DocumentFormat // TypeDefIndex: 4356
	{
		TXT = 0,
		CSV = 1
	}

	// Constructors
	public Strings(); // 0x00FC2D6C-0x00FC2D74
	static Strings(); // 0x00FC2D74-0x00FC2DE4

	// Methods
	public static bool Exists(string keyString); // 0x00FC1C3C-0x00FC1D1C
	public static string Get(string keyString); // 0x00FC1D1C-0x00FC1E54
	public static string Get(LanguageKey key); // 0x00FC1E54-0x00FC1F90
	private static void Load(string language); // 0x00FC20E8-0x00FC27E0
	private static bool LoadCSV(string language); // 0x00FC27E0-0x00FC2D04
	public static void LogWarning(string msg, UnityEngine.Object context); // 0x00FC1F90-0x00FC2008
}

public enum SwipeDir // TypeDefIndex: 4357
{
	Up = 0,
	Down = 1,
	Left = 2,
	Right = 3,
	None = 4
}

public class SyncPositionHelper : MonoBehaviour // TypeDefIndex: 4358
{
	// Fields
	public GameObject fromObject; // 0x18
	private Transform fromTransform; // 0x20
	public GameObject toObject; // 0x28
	private Transform toTransform; // 0x30

	// Constructors
	public SyncPositionHelper(); // 0x00FC46A4-0x00FC46AC

	// Methods
	private void LateUpdate(); // 0x00FC44C0-0x00FC4568
	private void Start(); // 0x00FC4568-0x00FC46A4
}

public enum TempStat // TypeDefIndex: 4359
{
	CurrentCoinsJetpack = 0,
	CurrentTaskSetOneRun = 1,
	CurrentTimeActiveSnickers = 2,
	CurrentScoreNoCoins = 3
}

public class TutorialButton : MonoBehaviour // TypeDefIndex: 4360
{
	// Fields
	[SerializeField] // 0x0051C950-0x0051C960
	private ButtonAction buttonAction; // 0x18
	private const int NUMBER_OF_FREE_HOVERBOARDS = 3; // Metadata: 0x001F680D
	public TutorialPopupType tutorialType; // 0x1C

	// Nested types
	public enum ButtonAction // TypeDefIndex: 4361
	{
		Ok = 0,
		Cancel = 1
	}

	public enum TutorialPopupType // TypeDefIndex: 4362
	{
		_notSet = 0,
		Tasks1 = 1,
		Tasks2 = 2,
		Facebook = 3,
		CollectFromFriends = 4,
		Helmets = 5,
		ChangeLog = 6,
		ChangeLogEndGame = 7
	}

	// Constructors
	public TutorialButton(); // 0x007E399C-0x007E39A4

	// Methods
	private void OnClick(); // 0x007E376C-0x007E3998
	private void SendFlurryEvent(); // 0x007E3998-0x007E399C
}

[ExecuteInEditMode] // 0x00513EC8-0x00513ED8
public class TwoGradientToTexture : MonoBehaviour // TypeDefIndex: 4363
{
	// Fields
	public Gradient firstGradient; // 0x18
	public Gradient secondGradient; // 0x20
	public Texture2D gradientTexture; // 0x28
	public int pixelWidth; // 0x30

	// Constructors
	public TwoGradientToTexture(); // 0x007E739C-0x007E742C

	// Methods
	private void BuildGradient(); // 0x007E7230-0x007E731C
	public Texture2D Initialize(); // 0x007E731C-0x007E739C
}

public class UIBasicButton : MonoBehaviour // TypeDefIndex: 4364
{
	// Fields
	public Trigger trigger; // 0x18

	// Nested types
	public enum Trigger // TypeDefIndex: 4365
	{
		OnClick = 0,
		OnMouseOver = 1,
		OnMouseOut = 2,
		OnPress = 3,
		OnRelease = 4
	}

	// Constructors
	public UIBasicButton(); // 0x007EE544-0x007EE54C

	// Methods
	protected virtual void OnClick(); // 0x007EE4D8-0x007EE4F0
	protected virtual void OnHover(bool isOver); // 0x007EE4F0-0x007EE518
	protected virtual void OnPress(bool isPressed); // 0x007EE518-0x007EE540
	protected virtual void Send(); // 0x007EE540-0x007EE544
}

[AddComponentMenu] // 0x00513ED8-0x00513F10
public class UIButtonChangeScreen : UIBasicButton // TypeDefIndex: 4366
{
	// Fields
	public ScreenChangeType screenChangeType; // 0x1C
	public string ScreenNameToOpen; // 0x20
	private bool useSend; // 0x28

	// Nested types
	public enum ScreenChangeType // TypeDefIndex: 4367
	{
		PushScreen = 0,
		SwitchScreen = 1,
		None = 2,
		QueuePopup = 3,
		ClosePopup = 4,
		PushPopup = 5
	}

	// Constructors
	public UIButtonChangeScreen(); // 0x007F4BE4-0x007F4BF4

	// Methods
	protected override void Send(); // 0x007F4934-0x007F4BE4
}

public class UIButtonGame : UIBasicButton // TypeDefIndex: 4368
{
	// Fields
	public GameMessage messageType; // 0x1C

	// Nested types
	public enum GameMessage // TypeDefIndex: 4369
	{
		_notSet = 0,
		StartNewRun = 1,
		RestartFromPause = 2,
		GameOverMenu = 3,
		GameOverUpgrade = 4,
		MainGo = 5,
		MainTask = 6,
		Mainrole = 7,
		MainMap = 8,
		MainLeadboard = 9,
		MainStore = 10,
		CharacterRole = 11,
		CharacterUpgrader = 12,
		CharacterShop = 13,
		CharacterBack = 14
	}

	// Constructors
	public UIButtonGame(); // 0x007F57DC-0x007F57E4

	// Methods
	protected override void Send(); // 0x007F5644-0x007F57DC
}

public class UIButtonOverlayOff : MonoBehaviour // TypeDefIndex: 4370
{
	// Fields
	public GameObject fillWithPrimeColor; // 0x18
	public UISprite overlay; // 0x20
	public ButtonType buttonType; // 0x28
	private bool _buttonStateLocked; // 0x2C
	protected bool _initDone; // 0x2D
	private ButtonColorScheme buttonColorScheme; // 0x30
	private float DURATION; // 0x50
	private UIWidget fillSprite; // 0x58
	private Color32 originalFillColor; // 0x60

	// Nested types
	public enum ButtonType // TypeDefIndex: 4371
	{
		Custom = 0,
		Primary = 1,
		Tertiary = 2,
		Footer_shop = 3
	}

	// Constructors
	public UIButtonOverlayOff(); // 0x007F72B0-0x007F72B8

	// Methods
	private void Awake(); // 0x007F67F0-0x007F6800
	public void ButtonPressed(bool isPressed); // 0x007F69EC-0x007F6C68
	public void GoToNormalState(); // 0x007F6C68-0x007F6DA0
	public void GoToNotAvailableState(); // 0x007F6DA0-0x007F6EB0
	public void GoToSelectedState(); // 0x007F6EB0-0x007F706C
	protected void Init(); // 0x007F6800-0x007F69EC
	public void LockState(bool locked); // 0x007F706C-0x007F7078
	private void OnDisable(); // 0x007F7078-0x007F710C
	protected virtual void OnPress(bool isPressed); // 0x007F710C-0x007F7114
	public void ResetTweens(); // 0x007F7114-0x007F7284
	public void SetButtonType(ButtonType type); // 0x007F7284-0x007F72B0
}

public class UIButtonSender : MonoBehaviour // TypeDefIndex: 4372
{
	// Fields
	public Trigger trigger; // 0x18

	// Nested types
	public enum Trigger // TypeDefIndex: 4373
	{
		OnClick = 0,
		OnMouseOver = 1,
		OnMouseOut = 2,
		OnPress = 3,
		OnRelease = 4
	}

	// Constructors
	public UIButtonSender(); // 0x007F81FC-0x007F8204

	// Methods
	protected virtual void OnClick(); // 0x007F8194-0x007F81AC
	protected virtual void OnHover(bool isOver); // 0x007F81AC-0x007F81D4
	protected virtual void OnPress(bool isPressed); // 0x007F81D4-0x007F81F4
	protected virtual void Send(); // 0x007F81F4-0x007F81F8
	protected virtual void Send(bool isPressed); // 0x007F81F8-0x007F81FC
}

public class UICameraScreenClipping : MonoBehaviour // TypeDefIndex: 4374
{
	// Fields
	private Camera _cam; // 0x18
	private const int POPUP_WIDTH = 265; // Metadata: 0x001F68C5
	private const int SCREEN_WIDTH = 300; // Metadata: 0x001F68C9

	// Constructors
	public UICameraScreenClipping(); // 0x00822520-0x00822528

	// Methods
	public void CalculateClipping(bool popupSizedClip); // 0x008221F4-0x0082243C
	private void Start(); // 0x0082243C-0x00822520
}

public class UIGameOverScreenButton : UIButtonGame // TypeDefIndex: 4375
{
	// Constructors
	public UIGameOverScreenButton(); // 0x0083B4F8-0x0083C500

	// Methods
	protected override void Send(); // 0x0083AE24-0x0083B4F8
}

public class UIMessageHelper : MonoBehaviour // TypeDefIndex: 4376
{
	// Fields
	private UILabel _label; // 0x18
	private bool _wasPermanentlyHidden; // 0x20
	public Color shownColor; // 0x24

	// Nested types
	[CompilerGenerated] // 0x00514C40-0x00514C50
	private sealed class _FadeOut_d__5 : IEnumerator<object> // TypeDefIndex: 4377
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public UIMessageHelper __4__this; // 0x20
		private float _duration_5__2; // 0x28
		private float _fadeTime_5__3; // 0x2C
		private Vector3 _scaleFrom_5__4; // 0x30
		private Vector3 _scaleTo_5__5; // 0x3C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005283B4-0x005283C4 */ get; } // 0x0084C4A4-0x0084C4AC 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005283D4-0x005283E4 */ get; } // 0x0084C510-0x0084C518 

		// Constructors
		[DebuggerHidden] // 0x00528394-0x005283A4
		public _FadeOut_d__5(int __1__state); // 0x0084C058-0x0084C084

		// Methods
		[DebuggerHidden] // 0x005283A4-0x005283B4
		void IDisposable.Dispose(); // 0x0084C1DC-0x0084C1E0
		private bool MoveNext(); // 0x0084C1E0-0x0084C4A4
		[DebuggerHidden] // 0x005283C4-0x005283D4
		void IEnumerator.Reset(); // 0x0084C4AC-0x0084C510
	}

	// Constructors
	public UIMessageHelper(); // 0x0084C1A8-0x0084C1DC

	// Methods
	private void Awake(); // 0x0084BED0-0x0084BF58
	public void DisableShowLabel(); // 0x0084BF58-0x0084BFE4
	[IteratorStateMachine] // 0x005246C8-0x0052472C
	private IEnumerator FadeOut(); // 0x0084BFE4-0x0084C058
	public void SetTemporaryHidden(bool hidden); // 0x0084C084-0x0084C0C8
	public void ShowMessage(string message, bool bigText = false /* Metadata: 0x001F68CD */); // 0x0084C0C8-0x0084C1A8
}

public class UIModelController : MonoBehaviour // TypeDefIndex: 4378
{
	// Fields
	public GameObject CharacterAnchor; // 0x18
	public GameObject GameOverAnchor; // 0x20
	public GameObject CelebrationPopupAnchor; // 0x28
	public GameObject TutorialPopupAnchor; // 0x30
	public GameObject PauseScreenAnchor; // 0x38
	public GameObject ModelPrefab; // 0x40
	private CharacterModel _cachedActiveModel; // 0x48
	private ModelScreen _currentActivatedScreenModel; // 0x50
	private Characters.CharacterType _currentCharacterShownModel; // 0x54
	private int _currentCThemeShownIndex; // 0x58
	private static UIModelController _instance; // 0x00
	private bool _isCelebrationCharacterScreen; // 0x5C
	private bool isShownInCelebrate; // 0x5D
	public List<AnimationClip> highScoreClips; // 0x60
	private bool isAnimationPlaying; // 0x68

	// Properties
	public Characters.CharacterType currentCharacterModelShown { get; } // 0x0084E694-0x0084E69C 
	public int currentCThemeShownIndex { get; } // 0x0084E69C-0x0084E6A4 
	public static UIModelController Instance { get; } // 0x0084E6A4-0x0084E7E0 

	// Nested types
	public enum ModelScreen // TypeDefIndex: 4379
	{
		Character = 0,
		GameOver = 1,
		TrialRolePopup = 2,
		TrialHelmetPopup = 3,
		Popup = 4,
		Helms = 5,
		CelebrationCharacterUnlock = 6,
		CelebrationHelmUnlock = 7,
		CelebrationHighScore = 8,
		DuelResultPopup = 9,
		CelebrationTopRun = 10,
		DailyTipPopup = 11
	}

	[CompilerGenerated] // 0x00514C50-0x00514C60
	private sealed class __c__DisplayClass22_0 // TypeDefIndex: 4380
	{
		// Fields
		public AnimationClip select; // 0x10
		public Predicate<AnimationClip> __9__0; // 0x18

		// Constructors
		public __c__DisplayClass22_0(); // 0x0084E7F0-0x0084E7F8

		// Methods
		internal bool _AnimateRunningCharacterForBragCelebration_b__0(AnimationClip a); // 0x0084E7F8-0x0084E874
	}

	[CompilerGenerated] // 0x00514C60-0x00514C70
	private sealed class _AnimateRunningCharacterForBragCelebration_d__22 : IEnumerator<object> // TypeDefIndex: 4381
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public GameObject model; // 0x20
		public UIModelController __4__this; // 0x28
		private __c__DisplayClass22_0 __8__1; // 0x30
		private Animation __charAnim_5__2; // 0x38
		private float _time_5__3; // 0x40
		private float _waitTime_5__4; // 0x44

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00528404-0x00528414 */ get; } // 0x0084EBB0-0x0084EBB8 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00528424-0x00528434 */ get; } // 0x0084EC1C-0x0084EC24 

		// Constructors
		[DebuggerHidden] // 0x005283E4-0x005283F4
		public _AnimateRunningCharacterForBragCelebration_d__22(int __1__state); // 0x0084D930-0x0084D95C

		// Methods
		[DebuggerHidden] // 0x005283F4-0x00528404
		void IDisposable.Dispose(); // 0x0084E874-0x0084E878
		private bool MoveNext(); // 0x0084E878-0x0084EBB0
		[DebuggerHidden] // 0x00528414-0x00528424
		void IEnumerator.Reset(); // 0x0084EBB8-0x0084EC1C
	}

	[CompilerGenerated] // 0x00514C70-0x00514C80
	private sealed class _AnimateUnlockBackground_d__23 : IEnumerator<object> // TypeDefIndex: 4382
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public UIModelController __4__this; // 0x20
		public GameObject go; // 0x28
		private Vector3 _charWithHelmPosition_5__2; // 0x30
		private Vector3 _charPosition_5__3; // 0x3C
		private int _index_5__4; // 0x48
		private Vector3 _currentBackgroundRotationOffset_5__5; // 0x4C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00528454-0x00528464 */ get; } // 0x0084F0E8-0x0084F0F0 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00528474-0x00528484 */ get; } // 0x0084F154-0x0084F15C 

		// Constructors
		[DebuggerHidden] // 0x00528434-0x00528444
		public _AnimateUnlockBackground_d__23(int __1__state); // 0x0084D9DC-0x0084DA08

		// Methods
		[DebuggerHidden] // 0x00528444-0x00528454
		void IDisposable.Dispose(); // 0x0084EC24-0x0084EC28
		private bool MoveNext(); // 0x0084EC28-0x0084F0E8
		[DebuggerHidden] // 0x00528464-0x00528474
		void IEnumerator.Reset(); // 0x0084F0F0-0x0084F154
	}

	// Constructors
	public UIModelController(); // 0x0084E7E0-0x0084E7F0

	// Methods
	private GameObject _ActivateModel(Characters.CharacterType characterName, int modelIndex, ModelScreen screen); // 0x0084C518-0x0084CFCC
	public void ActivateCelebrationHelmWithStripes(Helmets.HelmType helmType, ModelScreen screen); // 0x0084D660-0x0084D758
	public void ActivateGameOverModel(); // 0x0084D758-0x0084D7F0
	public void ActivateTrailRoleModel(Characters.CharacterType characterType, int themeIndex); // 0x0084D7F0-0x0084D7FC
	public void ActivateTrailHelmetModel(Helmets.HelmType helmType); // 0x0084D7FC-0x0084D800
	public void ActivateDailyRoleModel(Characters.CharacterType characterType, int themeIndex); // 0x0084D800-0x0084D80C
	public void ActivateHelmetModel(); // 0x0084D80C-0x0084D8B0
	[IteratorStateMachine] // 0x0052472C-0x00524790
	private IEnumerator AnimateRunningCharacterForBragCelebration(GameObject model); // 0x0084D8B0-0x0084D930
	[IteratorStateMachine] // 0x00524790-0x005247F4
	private IEnumerator AnimateUnlockBackground(GameObject go); // 0x0084D95C-0x0084D9DC
	public void ClearModels(); // 0x0084CFCC-0x0084D660
	public void ClearTutorialPopup(); // 0x0084DA08-0x0084DBF4
	public void DeactivateCelebrationPopupModels(); // 0x0084DBF4-0x0084DE18
	public void ActivateTutorialPopup(bool active); // 0x0084DE18-0x0084DEBC
	private void _PauseAnimations(bool pause, Transform trans); // 0x0084DEBC-0x0084E138
	public void SelectCharacterForPlay(Characters.CharacterType characterType, int themeIndex); // 0x0084E138-0x0084E278
	public void SelectCurrentHelmShown(Helmets.HelmType currentlyShownHelm); // 0x0084E278-0x0084E2F0
	public void SelectThemeForCurrentCharacterModel(int themeIndex); // 0x0084E2F0-0x0084E308
	public GameObject ShowCharacterInCelebration(Characters.CharacterType charType, int themeIndex, ModelScreen screen); // 0x0084E308-0x0084E314
	public void ShowHelmetMenuModel(Helmets.HelmType currentHelmShown, bool updateAnimation); // 0x0084E314-0x0084E318
	public void ShowMenuCharacterModel(Characters.CharacterType charType, int themeIndex); // 0x0084E318-0x0084E3D8
	private void _ChangeCharacterModel(Characters.CharacterType characterName, int themeIndex); // 0x0084E3D8-0x0084E4F4
	private void UpdateCelebrationRotation(GameObject go, Vector3 charRotation, Vector3 charPosition, Vector3 charPositionOffset, Vector3 backgroundRotationOffset); // 0x0084E4F4-0x0084E694
}

public class UIPanelStaticDelayer : MonoBehaviour // TypeDefIndex: 4383
{
	// Fields
	private UIPanel _panel; // 0x18
	[SerializeField] // 0x0051C960-0x0051C970
	private int framesToWait; // 0x20
	private bool inited; // 0x24
	[SerializeField] // 0x0051C970-0x0051C980
	private bool refreshOnEnable; // 0x25

	// Nested types
	[CompilerGenerated] // 0x00514C80-0x00514C90
	private sealed class _SetStaticDelayed_d__7 : IEnumerator<object> // TypeDefIndex: 4384
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public UIPanel panel; // 0x20
		public int delayFrames; // 0x28
		private int _num_5__2; // 0x2C

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005284A4-0x005284B4 */ get; } // 0x00855A9C-0x00855AA4 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005284C4-0x005284D4 */ get; } // 0x00855B08-0x00856BE8 

		// Constructors
		[DebuggerHidden] // 0x00528484-0x00528494
		public _SetStaticDelayed_d__7(int __1__state); // 0x008559C4-0x008559F0

		// Methods
		[DebuggerHidden] // 0x00528494-0x005284A4
		void IDisposable.Dispose(); // 0x00855A00-0x00855A04
		private bool MoveNext(); // 0x00855A04-0x00855A9C
		[DebuggerHidden] // 0x005284B4-0x005284C4
		void IEnumerator.Reset(); // 0x00855AA4-0x00855B08
	}

	// Constructors
	public UIPanelStaticDelayer(); // 0x008559F0-0x00855A00

	// Methods
	private void Awake(); // 0x008557C8-0x008558D8
	private void OnEnable(); // 0x00855928-0x00855940
	private void OrderStaticDelay(); // 0x008558D8-0x00855928
	[IteratorStateMachine] // 0x005247F4-0x00524858
	public IEnumerator SetStaticDelayed(int delayFrames, UIPanel panel); // 0x00855940-0x008559C4
}

public class UIPowerupHandler : MonoBehaviour // TypeDefIndex: 4385
{
	// Fields
	private int _bottomOffset; // 0x18
	private Vector3 _offScreenPosition; // 0x1C
	private List<UIPowerupHelper> _powerupSlots; // 0x28
	private int _screenOffset; // 0x30
	public GameObject PowerupPrefab; // 0x38
	private const int MaxPowerupHelperCount = 4; // Metadata: 0x001F68FE

	// Constructors
	public UIPowerupHandler(); // 0x00760238-0x007602F0

	// Methods
	private void Awake(); // 0x0075F260-0x0075F43C
	public int getNumberOfSpaces(int i); // 0x0075F5D4-0x0075F66C
	public float getSliderHights(int i, int slotPosition); // 0x0075F66C-0x0075F708
	private void Update(); // 0x0075F72C-0x0075FB40
	public void GameStart(); // 0x0076011C-0x00760238
}

public class UIPowerupHelper : MonoBehaviour // TypeDefIndex: 4386
{
	// Fields
	[SerializeField] // 0x0051C980-0x0051C990
	private UISlider slider; // 0x18
	[SerializeField] // 0x0051C990-0x0051C9A0
	private UISprite sliderBG; // 0x20
	[SerializeField] // 0x0051C9A0-0x0051C9B0
	private UISprite icon; // 0x28
	[SerializeField] // 0x0051C9B0-0x0051C9C0
	private UISprite iconBG; // 0x30
	[SerializeField] // 0x0051C9C0-0x0051C9D0
	private GameObject container; // 0x38
	[SerializeField] // 0x0051C9D0-0x0051C9E0
	private UIAnchor anchor; // 0x40
	private IngameScreen _ingameScreen; // 0x48
	private ActiveProp _powerup; // 0x50
	private Color32[] colorTargets; // 0x58
	private FadeTarget currentFadeTarget; // 0x60
	private bool inverse; // 0x64
	private float lerpTime; // 0x68
	private FadeTarget oldFadeTarget; // 0x6C
	private Color originalColor; // 0x70
	private float sliderSteps; // 0x80
	private Color storedColor; // 0x84
	private Game game; // 0x98

	// Properties
	public UIAnchor Anchor { get; } // 0x007609B4-0x007609BC 
	private IngameScreen ingameScreen { get; } // 0x0076035C-0x0076048C 

	// Nested types
	private enum FadeTarget // TypeDefIndex: 4387
	{
		white = 0,
		green = 1,
		darkgreen = 2,
		none = 3
	}

	// Constructors
	public UIPowerupHelper(); // 0x007609BC-0x00760AF0

	// Methods
	private void Awake(); // 0x007602F0-0x0076035C
	private void FadingToWhiteToGreenToDarkGreen(bool sendInverse); // 0x0076048C-0x007606E0
	public float getSliderHeight(); // 0x0075F708-0x0075F72C
	public int getSliderWidth(); // 0x007606E0-0x0076071C
	public int getHalfIconBGWidth(); // 0x00760040-0x0076006C
	public void HidePowerupSlot(); // 0x00760100-0x0076011C
	private void OnDisable(); // 0x007607F4-0x007607F8
	private void OnEnable(); // 0x007607F8-0x00760848
	private void ReturnToNormal(); // 0x0076071C-0x007607F4
	public void setContainerPosition(float x, float y, float z); // 0x0076006C-0x00760100
	public void SetPowerupSlot(ActiveProp powerup); // 0x0075FB40-0x00760040
}

public class UIPreBragPopupHelper : UIBaseScreen // TypeDefIndex: 4388
{
	// Fields
	public UILabel description; // 0x98

	// Constructors
	public UIPreBragPopupHelper(); // 0x00760C44-0x00760C4C

	// Methods
	private void BragClicked(); // 0x00760AF0-0x00760B70
	private void CloseClicked(); // 0x00760BCC-0x00760C34
	public override void Init(); // 0x00760C34-0x00760C3C
	public override void Show(); // 0x00760C3C-0x00760C44
}

public class UIScale : MonoBehaviour // TypeDefIndex: 4389
{
	// Fields
	private Vector2 iPadSize; // 0x18

	// Constructors
	public UIScale(); // 0x00766AB0-0x00766B00

	// Methods
	private void Start(); // 0x00766A00-0x00766AB0
}

public class UIScreenController : MonoBehaviour // TypeDefIndex: 4390
{
	// Fields
	public GameObject backgroundAnchor; // 0x18
	public GameObject screenAnchor; // 0x20
	public GameObject popupAnchor; // 0x28
	public GameObject superPopupAnchor; // 0x30
	public UICamera nguiCamera; // 0x38
	public Camera CameraOverlay2d; // 0x40
	public UIRoot root; // 0x48
	public GameObject MenuElements3D; // 0x50
	public bool LoadMenuOnStart; // 0x58
	public Material chestBox; // 0x60
	[SerializeField] // 0x0051C9E0-0x0051C9F0
	private int bannerDpiParam; // 0x68
	public Font FloatingTextFont; // 0x70
	[SerializeField] // 0x0051C9F0-0x0051CA00
	private Font lilitaRegularFont; // 0x78
	[SerializeField] // 0x0051CA00-0x0051CA10
	private Font titanRegularFont; // 0x80
	public string text; // 0x88
	public int size; // 0x90
	public FontStyle style; // 0x94
	public bool stoppingFromEditor; // 0x98
	public bool doSaveAndDelayRemainingPopups; // 0x99
	public bool ignoreLastPopupClosed; // 0x9A
	public UIMessageHelper messageHelper; // 0xA0
	public static bool isGetBtnPressed; // 0x00
	private Dictionary<string, UIBaseScreen> _cachedScreens; // 0xA8
	private List<string> _delayedPopups; // 0xB0
	private bool _gameIsFocused; // 0xB8
	private static UIScreenController _instance; // 0x08
	private bool _isApplicationResuming; // 0xB9
	private bool _popupActive; // 0xBA
	private List<string> _popupQueue; // 0xC0
	private List<string> _screenNamesWithoutBackground; // 0xC8
	private List<string> _screenNamesWithBackground2; // 0xD0
	private List<string> _screenStack; // 0xD8
	private Camera mainCamera; // 0xE0
	[CompilerGenerated] // 0x0051CA10-0x0051CA20
	private static Action OnApplicationResumed; // 0x10
	public Action OnLastPopupClosed; // 0xE8
	public Action<string> OnPopupClosed; // 0xF0
	public Action<string> OnPopupShown; // 0xF8
	public Action<string> OnChangedScreen; // 0x100
	public string uiPrefabNameSuffix; // 0x108
	public const string iPadNameSuffix = "_ipad"; // Metadata: 0x001F692B
	public const string iPhoneXNameSuffix = "_iphoneX"; // Metadata: 0x001F6934
	public float bannerHeight; // 0x110
	public DeviceType curDeviceType; // 0x114
	public string CurScreenName; // 0x118

	// Properties
	public bool GameIsFocused { get; } // 0x0076AE88-0x0076AE90 
	public static UIScreenController Instance { get; } // 0x0075F43C-0x0075F5D4 
	public static bool isInstanced { get; } // 0x0076AE90-0x0076B04C 
	public bool isShowingPopup { get; } // 0x0076B04C-0x0076B0A8 

	// Events
	public static event Action OnApplicationResumed {
		add; // 0x00766B00-0x00766BF0
		remove; // 0x00766BF0-0x00766CE0
	}

	// Nested types
	public enum DeviceType // TypeDefIndex: 4391
	{
		Android = 0,
		iPhone = 1,
		iPad = 2,
		iPhoneX = 3
	}

	[CompilerGenerated] // 0x00514C90-0x00514CA0
	private sealed class __c__DisplayClass52_0 // TypeDefIndex: 4392
	{
		// Fields
		public UIScreenController __4__this; // 0x10
		public string screenName; // 0x18

		// Constructors
		public __c__DisplayClass52_0(); // 0x00767F84-0x00767F8C

		// Methods
		internal void __RemovePopup_b__0(); // 0x0076B0AC-0x0076B0D0
	}

	[CompilerGenerated] // 0x00514CA0-0x00514CB0
	private sealed class __c__DisplayClass55_0 // TypeDefIndex: 4393
	{
		// Fields
		public UIScreenController __4__this; // 0x10
		public string screenName; // 0x18
		public UIBaseScreen screen; // 0x20

		// Constructors
		public __c__DisplayClass55_0(); // 0x0076854C-0x00768554

		// Methods
		internal void __ActivateScreen_b__0(); // 0x0076B0D0-0x0076B180
	}

	[CompilerGenerated] // 0x00514CB0-0x00514CC0
	private sealed class _AnimateAlpha_d__70 : IEnumerator<object> // TypeDefIndex: 4394
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public UILabel label; // 0x20
		public float duration; // 0x28
		public float toAlpha; // 0x2C
		private float _fromAlpha_5__2; // 0x30
		private float _factor_5__3; // 0x34

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005284F4-0x00528504 */ get; } // 0x0076B2B8-0x0076B2C0 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00528514-0x00528524 */ get; } // 0x0076B324-0x0076B32C 

		// Constructors
		[DebuggerHidden] // 0x005284D4-0x005284E4
		public _AnimateAlpha_d__70(int __1__state); // 0x00769550-0x0076957C

		// Methods
		[DebuggerHidden] // 0x005284E4-0x005284F4
		void IDisposable.Dispose(); // 0x0076B180-0x0076B184
		private bool MoveNext(); // 0x0076B184-0x0076B2B8
		[DebuggerHidden] // 0x00528504-0x00528514
		void IEnumerator.Reset(); // 0x0076B2C0-0x0076B324
	}

	[CompilerGenerated] // 0x00514CC0-0x00514CD0
	private sealed class _AnimateCollectText_d__71 : IEnumerator<object> // TypeDefIndex: 4395
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public UILabel collectText; // 0x20
		public UIScreenController __4__this; // 0x28
		private Vector3 _toLocalPosition_5__2; // 0x30

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00528544-0x00528554 */ get; } // 0x0076B554-0x0076B55C 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00528564-0x00528574 */ get; } // 0x0076B5C0-0x0076B5C8 

		// Constructors
		[DebuggerHidden] // 0x00528524-0x00528534
		public _AnimateCollectText_d__71(int __1__state); // 0x007695FC-0x00769628

		// Methods
		[DebuggerHidden] // 0x00528534-0x00528544
		void IDisposable.Dispose(); // 0x0076B32C-0x0076B330
		private bool MoveNext(); // 0x0076B330-0x0076B554
		[DebuggerHidden] // 0x00528554-0x00528564
		void IEnumerator.Reset(); // 0x0076B55C-0x0076B5C0
	}

	[CompilerGenerated] // 0x00514CD0-0x00514CE0
	private sealed class _GoToMainMenuFromGame_d__81 : IEnumerator<object> // TypeDefIndex: 4396
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public UIScreenController __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00528594-0x005285A4 */ get; } // 0x0076B76C-0x0076B774 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005285B4-0x005285C4 */ get; } // 0x0076B7D8-0x0076B7E0 

		// Constructors
		[DebuggerHidden] // 0x00528574-0x00528584
		public _GoToMainMenuFromGame_d__81(int __1__state); // 0x00769BB4-0x00769BE0

		// Methods
		[DebuggerHidden] // 0x00528584-0x00528594
		void IDisposable.Dispose(); // 0x0076B5C8-0x0076B5CC
		private bool MoveNext(); // 0x0076B5CC-0x0076B76C
		[DebuggerHidden] // 0x005285A4-0x005285B4
		void IEnumerator.Reset(); // 0x0076B774-0x0076B7D8
	}

	[CompilerGenerated] // 0x00514CE0-0x00514CF0
	private sealed class _MoveTransform_d__86 : IEnumerator<object> // TypeDefIndex: 4397
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public Transform trans; // 0x20
		public float duration; // 0x28
		public Vector3 toPos; // 0x2C
		private Vector3 _fromPos__0_5__2; // 0x38
		private float _factor__1_5__3; // 0x44

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005285E4-0x005285F4 */ get; } // 0x0076B968-0x0076B970 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00528604-0x00528614 */ get; } // 0x0076B9D4-0x0076B9DC 

		// Constructors
		[DebuggerHidden] // 0x005285C4-0x005285D4
		public _MoveTransform_d__86(int __1__state); // 0x00769EF8-0x00769F24

		// Methods
		[DebuggerHidden] // 0x005285D4-0x005285E4
		void IDisposable.Dispose(); // 0x0076B7E0-0x0076B7E4
		private bool MoveNext(); // 0x0076B7E4-0x0076B968
		[DebuggerHidden] // 0x005285F4-0x00528604
		void IEnumerator.Reset(); // 0x0076B970-0x0076B9D4
	}

	[CompilerGenerated] // 0x00514CF0-0x00514D00
	private sealed class _ShowMainMenuCoroutine_d__104 : IEnumerator<object> // TypeDefIndex: 4398
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public UIScreenController __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00528634-0x00528644 */ get; } // 0x0076BAA4-0x0076BAAC 
		object IEnumerator.Current { [DebuggerHidden] /* 0x00528654-0x00528664 */ get; } // 0x0076BB10-0x0076BB18 

		// Constructors
		[DebuggerHidden] // 0x00528614-0x00528624
		public _ShowMainMenuCoroutine_d__104(int __1__state); // 0x0076A890-0x0076A8BC

		// Methods
		[DebuggerHidden] // 0x00528624-0x00528634
		void IDisposable.Dispose(); // 0x0076B9DC-0x0076B9E0
		private bool MoveNext(); // 0x0076B9E0-0x0076BAA4
		[DebuggerHidden] // 0x00528644-0x00528654
		void IEnumerator.Reset(); // 0x0076BAAC-0x0076BB10
	}

	// Constructors
	public UIScreenController(); // 0x00766CE0-0x00766F4C
	static UIScreenController(); // 0x0076B0A8-0x0076B0AC

	// Methods
	private void Awake(); // 0x00766F4C-0x007670D8
	public bool CheckNetwork(); // 0x0076744C-0x0076746C
	private void _ActivateNextPopup(string oldPopupName = "" /* Metadata: 0x001F6912 */); // 0x0076746C-0x007677C8
	private void _PushPopup(string name); // 0x0076796C-0x00767BF8
	private void _QueuePopup(string name); // 0x00767BF8-0x00767CA4
	private void _RemovePopup(string screenName = "" /* Metadata: 0x001F6916 */); // 0x00767CA4-0x00767F84
	private void PopupClosed(string screenName = "" /* Metadata: 0x001F691A */); // 0x00768084-0x007681C4
	public void ClosePopup(string screenName); // 0x00760B74-0x00760BCC
	private UIBaseScreen _ActivateScreen(string screenName); // 0x0076829C-0x0076854C
	private void AddScreenStack(string screenName); // 0x00768614-0x0076867C
	private void _BackToPreviousScreen(); // 0x0076867C-0x0076879C
	private UIBaseScreen _LoadScreenToCache(string screenName, bool isPopup = false /* Metadata: 0x001F691E */); // 0x007670D8-0x0076744C
	private void _PauseAnimations(bool pause, Transform trans); // 0x00768C7C-0x00768ED4
	private void _PauseApplication(bool paused); // 0x00768ED4-0x00768F70
	private void _SetBackground(string screenName); // 0x007688AC-0x00768B7C
	public void ReadyTutorial(); // 0x00768F70-0x00769198
	public void ShowTutorial(GameObject go, Vector3 offset, float angle); // 0x00769198-0x007692C0
	public void ShowTutorialNew(GameObject go, Vector3 offset, float angle, Vector3 pos, float scale = 1f /* Metadata: 0x001F691F */); // 0x007692C0-0x00769420
	public void HideTutorial(); // 0x00769420-0x007694C4
	private void _ShowScreen(string screenName, UIBaseScreen screen); // 0x00768554-0x00768614
	private void _SwitchScreen(string screenName); // 0x007694C4-0x007694C8
	public void ActivateAnchors(bool active); // 0x00767834-0x0076796C
	[IteratorStateMachine] // 0x00524878-0x005248DC
	private IEnumerator AnimateAlpha(UILabel label, float duration, float toAlpha); // 0x007694C8-0x00769550
	[IteratorStateMachine] // 0x005248DC-0x00524940
	private IEnumerator AnimateCollectText(UILabel collectText); // 0x0076957C-0x007695FC
	public void BackToPrevious(); // 0x00769628-0x0076962C
	public void CloseActivePopups(string popupToStopAt); // 0x0076962C-0x00769818
	public void CloseAllPopups(); // 0x00769818-0x00769990
	private string Dequeue(List<string> list); // 0x00767F8C-0x00768020
	public void GameOverTriggered(); // 0x00769990-0x00769A78
	public string GetCurrentPopupName(); // 0x00769A78-0x00769A80
	public UIBaseScreen GetScreenFromCache(string screenName); // 0x00769A80-0x00769B14
	public string GetTopScreenName(); // 0x00768020-0x00768084
	public void GoToMainMenuFromGame(GameObject sender); // 0x00769B14-0x00769B40
	[IteratorStateMachine] // 0x00524940-0x005249A4
	public IEnumerator GoToMainMenuFromGame(); // 0x00769B40-0x00769BB4
	public bool IsPopupAlreadyQueued(string popupName); // 0x00769BE0-0x00769CA4
	public bool IsPopupQueueEmpty(); // 0x00769CA4-0x00769D00
	private void LateUpdate(); // 0x00769D00-0x00769E58
	public static void LogError(string msg, UnityEngine.Object context); // 0x00768C04-0x00768C7C
	[IteratorStateMachine] // 0x005249A4-0x00524A08
	private IEnumerator MoveTransform(Transform trans, float duration, Vector3 toPos); // 0x00769E5C-0x00769EF8
	private void OnApplicationFocus(bool focus); // 0x00769F24-0x0076A01C
	private void OnApplicationPause(bool paused); // 0x0076A01C-0x0076A108
	public void PayoutCelebrationReward(CelebrationReward reward); // 0x0076A108-0x0076A2B0
	private string Peek(List<string> list); // 0x00768830-0x007688AC
	private string Pop(List<string> list); // 0x0076879C-0x00768830
	public void PushPopup(string name); // 0x0076A2B0-0x0076A2B4
	public void PushScreen(string screenName); // 0x00769E58-0x00769E5C
	private void _PushScreen(string screenOverride); // 0x0076A2B4-0x0076A4E0
	public void QueueChest(); // 0x0076A4E0-0x0076A594
	private string QueuePeek(List<string> list); // 0x007677C8-0x00767834
	public void QueuePopup(string popupName); // 0x00760B70-0x00760B74
	public void QueuePopupRightAfterCurrentActivePopup(string popupName); // 0x0076A594-0x0076A650
	public void RecalculateViewportRectForClipCamera(Camera camera, bool popupSizedClip); // 0x0076A650-0x0076A744
	public void RequeueDelayedPopups(); // 0x0076A744-0x0076A7F0
	public void SaveAndDelayPopups(); // 0x007681C4-0x0076829C
	private void ScreenDidChange(string newScreenName); // 0x00768B7C-0x00768C04
	public void ShowMainMenu(); // 0x0076A7F0-0x0076A81C
	[IteratorStateMachine] // 0x00524A08-0x00524A6C
	private IEnumerator ShowMainMenuCoroutine(); // 0x0076A81C-0x0076A890
	public void ShowUnlockAnimationForCharacter(Characters.CharacterType ctype, int themeIndex = 0 /* Metadata: 0x001F6923 */); // 0x0076A8BC-0x0076A958
	public void ShowUnlockAnimationForHelmet(Helmets.HelmType helmType); // 0x0076A958-0x0076A9F0
	public void AddUnlockForCharacterToReward(Characters.CharacterType ctype, int themeIndex = 0 /* Metadata: 0x001F6927 */); // 0x0076A9F0-0x0076AA80
	public void AddUnlockForHelmetToReward(Helmets.HelmType helmType); // 0x0076AA80-0x0076AB04
	public void SpawnCollectText(Vector3 startPosition, string text); // 0x0076AB04-0x0076AD54
	private void Start(); // 0x0076AD54-0x0076ADF0
	public void SwitchScreen(string screenName); // 0x0076AE84-0x0076AE88
	private void UpdateNguiTouchThresholds(); // 0x0076ADF0-0x0076AE84
}

public interface IScrollClick // TypeDefIndex: 4399
{
	// Methods
	void ScrollClicked(Vector2 pos);
}

public class UIScrollClick : MonoBehaviour // TypeDefIndex: 4400
{
	// Fields
	[SerializeField] // 0x0051CA20-0x0051CA30
	private GameObject target; // 0x18
	private IScrollClick scollClick; // 0x20

	// Constructors
	public UIScrollClick(); // 0x0076C648-0x0076C650

	// Methods
	private void Awake(); // 0x0076C4A0-0x0076C538
	private void OnClick(); // 0x0076C538-0x0076C648
}

public class UITierHelper : MonoBehaviour // TypeDefIndex: 4401
{
	// Fields
	private PropType _type; // 0x18
	public UIAtlas usedAtlas; // 0x20
	private UISprite[] _slots; // 0x28
	private UISprite[] _activeSlots; // 0x30
	private bool _hasInited; // 0x38

	// Constructors
	public UITierHelper(); // 0x0080F0FC-0x0080F104

	// Methods
	public void ResetTiers(); // 0x0080EA94-0x0080EB80
	public void SetupTiers(PropType type); // 0x0080EB80-0x0080EFD4
}

public class UIWidgetResizer : MonoBehaviour // TypeDefIndex: 4402
{
	// Fields
	[SerializeField] // 0x0051CA30-0x0051CA40
	private UIWidget _anchorBackground; // 0x18
	private const int _pixelsOutsideTheBackground = 84; // Metadata: 0x001F6950

	// Constructors
	public UIWidgetResizer(); // 0x00817448-0x00817450

	// Methods
	public void AdjustAnchorBackgroundToResolution(); // 0x00817244-0x00817444
	private void OnEnable(); // 0x00817444-0x00817448
}

public class Upgrade // TypeDefIndex: 4403
{
	// Fields
	public LanguageKey name; // 0x10
	public LanguageKey nameTwoLines; // 0x14
	public LanguageKey description; // 0x18
	public LanguageKey mysteryBoxDescription; // 0x1C
	public int numberOfTiers; // 0x20
	public float[] durations; // 0x28
	public float speed; // 0x30
	public float landSpeed; // 0x34
	public int spawnProbability; // 0x38
	public int minimumMeters; // 0x3C
	public int coinmagnetRange; // 0x40
	public int[] pricesRaw; // 0x48
	public int levelPriceMultiplyer; // 0x50
	public string iconName; // 0x58
	public int weight; // 0x60
	public string[] plusDescrip; // 0x68

	// Constructors
	public Upgrade(); // 0x00818E40-0x00818E48
	public Upgrade(Upgrade upgrade); // 0x00818E48-0x00818EEC

	// Methods
	public LanguageKey GetName(); // 0x00818EEC-0x00818F80
	public int getPrice(int tier); // 0x00812AB8-0x00812BD0
	public static Upgrade Parse(string json); // 0x00818F80-0x00819BB4
	public static string ToJson(Upgrade upgrade); // 0x00819BB4-0x0081A194
}

public class UpgradeHelper : MonoBehaviour // TypeDefIndex: 4404
{
	// Fields
	[SerializeField] // 0x0051CA40-0x0051CA50
	private UISprite powerupIcon; // 0x18
	[SerializeField] // 0x0051CA50-0x0051CA60
	private UILabel titleLbl; // 0x20
	[SerializeField] // 0x0051CA60-0x0051CA70
	private UILabel decriptionLbl; // 0x28
	[SerializeField] // 0x0051CA70-0x0051CA80
	private BuyButtonIngame button; // 0x30
	[SerializeField] // 0x0051CA80-0x0051CA90
	private UITierHelper tierHelper; // 0x38
	[SerializeField] // 0x0051CA90-0x0051CAA0
	private GameObject Tutoriallab; // 0x40
	[SerializeField] // 0x0051CAA0-0x0051CAB0
	private GameObject PriceObj; // 0x48
	private bool _hasInited; // 0x50
	private PropType _type; // 0x54

	// Constructors
	public UpgradeHelper(); // 0x0081A8EC-0x0081A8F4

	// Methods
	public GameObject GetPriceBtn(); // 0x0081A194-0x0081A1D8
	private void FreshTutoria(bool isShow); // 0x0081A1D8-0x0081A224
	public void InitPermanent(PropType type); // 0x0081A224-0x0081A574
	public void RefreshTitle(); // 0x0081A574-0x0081A78C
	public void RefreshUpgrade(PropType type, int IDX); // 0x0081A78C-0x0081A8EC
}

public class Upgrades // TypeDefIndex: 4405
{
	// Fields
	public static Dictionary<PropType, Upgrade> upgrades; // 0x00

	// Constructors
	public Upgrades(); // 0x0081C8E8-0x0081C8F0

	// Methods
	public static void LoadFile(); // 0x0081C0B4-0x0081C0B8
	public static Dictionary<PropType, Upgrade> Load(); // 0x0081C0B8-0x0081C50C
	public static void Save(); // 0x0081C50C-0x0081C8E8
}

public class UpgradeScreen : UIBaseScreen // TypeDefIndex: 4406
{
	// Fields
	[SerializeField] // 0x0051CAB0-0x0051CAC0
	private GameObject PermanentPrefab; // 0x98
	[SerializeField] // 0x0051CAC0-0x0051CAD0
	private UITable _table; // 0xA0
	[SerializeField] // 0x0051CAD0-0x0051CAE0
	private UIScrollView _parentDragPanel; // 0xA8
	[SerializeField] // 0x0051CAE0-0x0051CAF0
	private GameObject listTitleComponent; // 0xB0
	private GameObject UpgradeUpBtn; // 0xB8
	public UIProgressBar bar; // 0xC0
	public float ShowscrollVal; // 0xC8
	public static int CurFreeVideoIdx; // 0x00
	private static PropType[] powerupPermanent; // 0x08
	private List<UpgradeHelper> cachedUpgradeHelpers; // 0xD0
	private static PropType freeType; // 0x10
	public static PropType curFreeType; // 0x14
	private bool _hasInited; // 0xD8
	private int numberOfObjects; // 0xDC

	// Nested types
	[CompilerGenerated] // 0x00514D00-0x00514D10
	private sealed class _WaitRefreshUpgrade_d__23 : IEnumerator<object> // TypeDefIndex: 4407
	{
		// Fields
		private int __1__state; // 0x10
		private object __2__current; // 0x18
		public UpgradeScreen __4__this; // 0x20

		// Properties
		object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00528684-0x00528694 */ get; } // 0x0081C040-0x0081C048 
		object IEnumerator.Current { [DebuggerHidden] /* 0x005286A4-0x005286B4 */ get; } // 0x0081C0AC-0x0081C0B4 

		// Constructors
		[DebuggerHidden] // 0x00528664-0x00528674
		public _WaitRefreshUpgrade_d__23(int __1__state); // 0x0081BA88-0x0081BAB4

		// Methods
		[DebuggerHidden] // 0x00528674-0x00528684
		void IDisposable.Dispose(); // 0x0081BF94-0x0081BF98
		private bool MoveNext(); // 0x0081BF98-0x0081C040
		[DebuggerHidden] // 0x00528694-0x005286A4
		void IEnumerator.Reset(); // 0x0081C048-0x0081C0AC
	}

	// Constructors
	public UpgradeScreen(); // 0x0081BEF0-0x0081BEF8
	static UpgradeScreen(); // 0x0081BEF8-0x0081BF94

	// Methods
	private void FillTable(); // 0x0081A8F4-0x0081AB80
	public override void Init(); // 0x0081ACF8-0x0081ADCC
	private GameObject MakeBuyable(PropType powerupType); // 0x0081AB80-0x0081ACF8
	public override void Show(); // 0x0081ADCC-0x0081AF18
	private void setBarvalue(); // 0x0081B294-0x0081B338
	private void SetShowTutorialUseSkill(); // 0x0081B338-0x0081B33C
	private void OnDisable(); // 0x0081B638-0x0081B778
	private void OnEnable(); // 0x0081B778-0x0081B8B8
	private void OnUpgradePurchase(PropType propType); // 0x0081B8B8-0x0081BA14
	[IteratorStateMachine] // 0x00524A6C-0x00524AD0
	private IEnumerator WaitRefreshUpgrade(); // 0x0081BA14-0x0081BA88
	private void RefreshUpgrade(); // 0x0081AF18-0x0081B294
	public static void GetFreeType(); // 0x0081BAB4-0x0081BD78
	public void RefreshTitle(PropType propType); // 0x0081BD78-0x0081BE1C
	public override void Hide(); // 0x0081BE1C-0x0081BEF0
	public void ShowTutorialUseSkill(); // 0x0081B33C-0x0081B638
}

public static class Utility // TypeDefIndex: 4408
{
	// Methods
	public static int CompareVersions(string leftVersion, string rightVersion); // 0x0081CF90-0x0081D0FC
	public static int NumberOfDigits(int number); // 0x0081D0FC-0x0081D140
	public static void SetLayerRecursively(Transform t, int layer); // 0x0081D140-0x0081D2E0
	public static void SaveDateTimeInPlayerPrefs(string key, DateTime dt); // 0x0081D2E0-0x0081D354
	public static DateTime GetDateTimeInPlayerPrefs(string key); // 0x0081D354-0x0081D424
}

public static class Utils // TypeDefIndex: 4409
{
	// Fields
	private static int randomNumber; // 0x00

	// Constructors
	static Utils(); // 0x0081DB30-0x0081EB84

	// Methods
	public static void Bar(string text, float ratio, int offset, Color color); // 0x0081D424-0x0081D548
	public static int EncryptDecryptXORValue(int value); // 0x0081D548-0x0081D5B0
	public static T FindComponentInThisOrParents<T>(Transform t)
		where T : Component;
	public static T FindObject<T>()
		where T : class;
	private static string GetIntBinaryString(int n); // 0x0081D680-0x0081D74C
	public static string GetLongName(Transform transform); // 0x0081D74C-0x0081D850
	public static string GetLongNameList(Component[] components); // 0x0081D850-0x0081D994
	private static int GetXorRandomValueForThisSession(); // 0x0081D5B0-0x0081D680
	public static DateTime StringToDateTime(string value, DateTime defaultValue); // 0x0081D994-0x0081DAA8
	public static string toTitleCase(string value); // 0x0081DAA8-0x0081DB30

	// Extension methods
	public static T FindComponentInParents<T>(this MonoBehaviour obj)
		where T : Component;
	public static T FindObject<T>(this MonoBehaviour obj)
		where T : class;
}

public class Variable<T> // TypeDefIndex: 4410
	where T : IComparable
{
	// Fields
	public OnChangeDelegate OnChange;
	private T value;

	// Properties
	public T Value { get; set; }

	// Nested types
	public delegate void OnChangeDelegate(T value); // TypeDefIndex: 4411; 0x00000000-0x00000000

	// Constructors
	public Variable(T initialValue);

	// Methods
	public void FireOnChange();
	private void NotifyOnChange();
}

public class VariableBool // TypeDefIndex: 4412
{
	// Fields
	private HashSet<object> objects; // 0x10
	public OnChangeDelegate OnChange; // 0x18
	private bool value; // 0x20

	// Properties
	public bool Value { get; } // 0x00A8C8B4-0x00A8C8BC 

	// Nested types
	public delegate void OnChangeDelegate(bool value); // TypeDefIndex: 4413; 0x00A8C5E0-0x00A8C824

	// Constructors
	public VariableBool(); // 0x00A8C8BC-0x00A8C92C

	// Methods
	public void Add(object o); // 0x00A8C430-0x00A8C4C0
	public void Clear(); // 0x00A8C550-0x00A8C5B0
	public void FireOnChange(); // 0x00A8C5B0-0x00A8C5C8
	private void NotifyOnChange(); // 0x00A8C5C8-0x00A8C5E0
	public void Remove(object o); // 0x00A8C824-0x00A8C8B4
	private void UpdateValue(); // 0x00A8C4C0-0x00A8C550
}

public class VisibleObject : MonoBehaviour // TypeDefIndex: 4414
{
	// Fields
	public OnVisibleChangeDelegate OnVisibleChange; // 0x18

	// Nested types
	public delegate void OnVisibleChangeDelegate(bool isVisible); // TypeDefIndex: 4415; 0x00A91990-0x00A91BD4

	// Constructors
	public VisibleObject(); // 0x00A91BE8-0x00A91BF0

	// Methods
	public void OnBecameInvisible(); // 0x00A9197C-0x00A91990
	public void OnBecameVisible(); // 0x00A91BD4-0x00A91BE8
}

[ExecuteInEditMode] // 0x00513F20-0x00513F30
public class ParticleScaler : MonoBehaviour // TypeDefIndex: 4416
{
	// Fields
	public float particleScale; // 0x18
	public bool alsoScaleGameobject; // 0x1C
	private float prevScale; // 0x20

	// Constructors
	public ParticleScaler(); // 0x006A5678-0x006A5690

	// Methods
	private void Start(); // 0x006A566C-0x006A5678
}

namespace MiniJSONs
{
	public static class Json // TypeDefIndex: 4417
	{
		// Nested types
		private sealed class Parser : IDisposable // TypeDefIndex: 4418
		{
			// Fields
			[CompilerGenerated] // 0x0051CB60-0x0051CB70
			private static Dictionary<string, int> f__switchmap0; // 0x00
			private StringReader json; // 0x10
			private const string WHITE_SPACE = " \t\n\r"; // Metadata: 0x001F6954
			private const string WORD_BREAK = " \t\n\r{}[],:\""; // Metadata: 0x001F695C
	
			// Properties
			private char NextChar { get; } // 0x0070530C-0x00705394 
			private TOKEN NextSymbol { get; } // 0x00704AA4-0x00704CFC 
			private string NextWord { get; } // 0x00705224-0x0070530C 
			private char PeekChar { get; } // 0x00704914-0x0070499C 
	
			// Nested types
			private enum TOKEN // TypeDefIndex: 4419
			{
				NONE = 0,
				CURLY_OPEN = 1,
				CURLY_CLOSE = 2,
				SQUARED_OPEN = 3,
				SQUARED_CLOSE = 4,
				COLON = 5,
				COMMA = 6,
				STRING = 7,
				NUMBER = 8,
				TRUE = 9,
				FALSE = 10,
				NULL = 11
			}
	
			// Constructors
			private Parser(string jsonString); // 0x007047B8-0x00704834
	
			// Methods
			public void Dispose(); // 0x00704834-0x00704868
			private void EatWhitespace(); // 0x00704868-0x00704914
			public static object Parse(string jsonString); // 0x00704670-0x007047B0
			private List<object> ParseArray(); // 0x007049C4-0x00704AA4
			private object ParseBySymbol(TOKEN symbol); // 0x00704CFC-0x00704DD8
			private object ParseNumber(); // 0x00705144-0x00705224
			private Dictionary<string, object> ParseObject(); // 0x00704DD8-0x00704EF4
			private string ParseString(); // 0x00704EF4-0x00705144
			private object ParseValue(); // 0x0070499C-0x007049C4
		}
	
		private sealed class Serializer // TypeDefIndex: 4420
		{
			// Fields
			private StringBuilder builder; // 0x10
	
			// Constructors
			private Serializer(); // 0x0088DA88-0x0088DAF0
	
			// Methods
			public static string Serialize(object obj); // 0x0088DAF0-0x0088DB70
			private void SerializeArray(IList anArray); // 0x0088DD04-0x0088DFDC
			private void SerializeObject(IDictionary obj); // 0x0088DFDC-0x0088E3EC
			private void SerializeOther(object value); // 0x0088E668-0x0088E7E4
			private void SerializeString(string str); // 0x0088E3EC-0x0088E668
			private void SerializeValue(object value); // 0x0088DB70-0x0088DD04
		}
	
		// Methods
		public static object Deserialize(string json); // 0x00704664-0x00704670
		public static string Serialize(object obj); // 0x007047B0-0x007047B8
	}
}

namespace UnityEngine
{
	public enum LanguageKey // TypeDefIndex: 4421
	{
		NULL = 0,
		UPGRADE_SCREEN_SINGLE_USE = 1,
		PROP_DESCRIPTION = 2,
		INGAME_UI_COUNTDOWN_STARTING = 3,
		INGAME_UI_HIGHSCORE = 4,
		COIN_SCREEN_STORE = 5,
		COIN_SCREEN_STORE_DESCRIPTION = 6,
		DAILY_CHALLENGE_TODAY_2 = 7,
		DAILY_CHALLENGE_DAY = 8,
		HOVERBOARD_POPUP = 9,
		HOVERBOARD_POPUP_DESCRIPTION_1 = 10,
		HOVERBOARD_POPUP_DESCRIPTION_2 = 11,
		TASK_POPUP_MAIN_TITLE = 12,
		TASK_POPUP_TASK_SET_NUMBER = 13,
		TASK_POPUP_SUPER = 14,
		TASK_POPUP_MYSTERY_BOX = 15,
		TASK_POPUP_SCORE = 16,
		TASK_POPUP_MULTIPLIER = 17,
		TASK_POPUP_REWARD = 18,
		SAVE_ME_POPUP_BUTTON_LABEL = 19,
		MYESTERY_POWERUP_PLUS_MULTIPLIER = 20,
		MYESTERY_POWERUP_PLUS_MULTIPLIER_DESCRIPTION = 21,
		UPGRADES_HOVERBOARD = 22,
		UPGRADES_HOVERBOARD_DESCRIPTION = 23,
		UPGRADES_HOVERBOARD_DESCRIPTION_MYSTERY = 24,
		UPGRADES_HEADSTART = 25,
		UPGRADES_HEADSTART_DESCRIPTION = 26,
		UPGRADES_HEADSTART_DESCRIPTION_MYSTERY = 27,
		UPGRADES_SCOREBOOSTER = 28,
		UPGRADES_SCOREBOOSTER_DESCRIPTION = 29,
		UPGRADES_SCOREBOOSTER_DESCRIPTION_MYSTERY = 30,
		UPGRADES_MEGAHEADSTART_TWO_LINES = 31,
		UPGRADES_MEGAHEADSTART = 32,
		UPGRADES_MEGAHEADSTART_DESCRIPTION = 33,
		UPGRADES_MEGAHEADSTART_DESCRIPTION_MYSTERY = 34,
		UPGRADES_MYSTERY_BOX = 35,
		UPGRADES_JETPACK = 36,
		UPGRADES_JETPACK_DESCRIPTION = 37,
		UPGRADES_SUPERSNEAKERS = 38,
		UPGRADES_SUPERSNEAKERS_DESCRIPTION = 39,
		UPGRADES_COIN_MAGNET = 40,
		UPGRADES_COIN_MAGNET_DESCRIPTION = 41,
		UPGRADES_DOUBLE_MULTIPLIER = 42,
		UPGRADES_DOUBLE_MULTIPLIER_DESCRIPTION = 43,
		UPGRADES_KEY = 44,
		UPGRADES_SKIP_TASK_1 = 45,
		UPGRADES_SKIP_TASK_1_DESCRIPTION = 46,
		UPGRADES_SKIP_TASK_2 = 47,
		UPGRADES_SKIP_TASK_2_DESCRIPTION = 48,
		UPGRADES_SKIP_TASK_3 = 49,
		UPGRADES_SKIP_TASK_3_DESCRIPTION = 50,
		UPGRADES_HELPER_MYSTERY_BOX = 51,
		UPGRADES_HELPER_YOU_HAVE = 52,
		UPGRADES_TITLE = 53,
		UPGRADES_DESCRIPTION = 54,
		UPGRADES_MYSTERY_POWERUP = 55,
		COIN_BUTTON_HELPER_NUMBER_OF_KEYS = 56,
		COIN_BUTTON_HELPER_NUMBER_OF_COINS = 57,
		HOVERBOARDS_HOVERBOARD = 58,
		HOVERBOARDS_FREESTYLER = 59,
		HOVERBOARDS_STARBOARD = 60,
		HOVERBOARDS_MIAMI = 61,
		HOVERBOARDS_MONSTER = 62,
		HOVERBOARDS_LIBERTY = 63,
		HOVERBOARDS_ENERGY = 64,
		CHARACTERS_ELLEN = 65,
		CHARACTERS_DARCY = 66,
		CHARACTERS_FRANK = 67,
		CHARACTERS_TAG = 68,
		CHARACTERS_NINJA = 69,
		CHARACTERS_LEE = 70,
		CHARACTERS_KELVIN = 71,
		CHARACTERS_TURTLEFOK = 72,
		CHARACTERS_CLOWN = 73,
		CHARACTERS_STRONG = 74,
		CHARACTERS_VENICE = 75,
		CHARACTERS_EXPLORER = 76,
		CHARACTERS_PRINCESS = 77,
		TASK_EARNCOIN_DESCRIPTION_SINGLE = 78,
		TASK_EARNCOIN_DESCRIPTION = 79,
		TASK_EARNCOIN_ULTRASHORT_DESCRIPTION_SINGLE = 80,
		TASK_EARNCOIN_ULTRASHORT_DESCRIPTION = 81,
		TASK_EARNCOIN_SINGLERUN_DESCRIPTION_SINGLE = 82,
		TASK_EARNCOIN_SINGLERUN_DESCRIPTION = 83,
		TASK_EARNCOIN_SINGLERUN_ULTRASHORT_DESCRIPTION_SINGLE = 84,
		TASK_EARNCOIN_SINGLERUN_ULTRASHORT_DESCRIPTION = 85,
		TASK_SPENDCOIN_DESCRIPTION_SINGLE = 86,
		TASK_SPENDCOIN_DESCRIPTION = 87,
		TASK_SPENDCOIN_ULTRASHORT_DESCRIPTION_SINGLE = 88,
		TASK_SPENDCOIN_ULTRASHORT_DESCRIPTION = 89,
		TASK_SCORE_DESCRIPTION_SINGLE = 90,
		TASK_SCORE_DESCRIPTION = 91,
		TASK_SCORE_ULTRASHORT_DESCRIPTION_SINGLE = 92,
		TASK_SCORE_ULTRASHORT_DESCRIPTION = 93,
		TASK_JUMPTRAIN_DESCRIPTION_SINGLE = 94,
		TASK_JUMPTRAIN_DESCRIPTION = 95,
		TASK_JUMPTRAIN_ULTRASHORT_DESCRIPTION_SINGLE = 96,
		TASK_JUMPTRAIN_ULTRASHORT_DESCRIPTION = 97,
		TASK_JUMPCAR_DESCRIPTION_SINGLE = 98,
		TASK_JUMPCAR_DESCRIPTION = 99,
		TASK_JUMPCAR_ULTRASHORT_DESCRIPTION_SINGLE = 100,
		TASK_JUMPCAR_ULTRASHORT_DESCRIPTION = 101,
		TASK_JUMPCAR_SINGLERUN_DESCRIPTION_SINGLE = 102,
		TASK_JUMPCAR_SINGLERUN_DESCRIPTION = 103,
		TASK_JUMPCAR_SINGLERUN_ULTRASHORT_DESCRIPTION_SINGLE = 104,
		TASK_JUMPCAR_SINGLERUN_ULTRASHORT_DESCRIPTION = 105,
		TASK_JUMPBUS_DESCRIPTION_SINGLE = 106,
		TASK_JUMPBUS_DESCRIPTION = 107,
		TASK_JUMPBUS_ULTRASHORT_DESCRIPTION_SINGLE = 108,
		TASK_JUMPBUS_ULTRASHORT_DESCRIPTION = 109,
		TASK_JUMPBUS_SINGLERUN_DESCRIPTION_SINGLE = 110,
		TASK_JUMPBUS_SINGLERUN_DESCRIPTION = 111,
		TASK_JUMPBUS_SINGLERUN_ULTRASHORT_DESCRIPTION_SINGLE = 112,
		TASK_JUMPBUS_SINGLERUN_ULTRASHORT_DESCRIPTION = 113,
		TASK_JUMPTRAIN_SINGLERUN_DESCRIPTION_SINGLE = 114,
		TASK_JUMPTRAIN_SINGLERUN_DESCRIPTION = 115,
		TASK_JUMPTRAIN_SINGLERUN_ULTRASHORT_DESCRIPTION_SINGLE = 116,
		TASK_JUMPTRAIN_SINGLERUN_ULTRASHORT_DESCRIPTION = 117,
		TASK_JUMP_DESCRIPTION_SINGLE = 118,
		TASK_JUMP_DESCRIPTION = 119,
		TASK_JUMP_ULTRASHORT_DESCRIPTION_SINGLE = 120,
		TASK_JUMP_ULTRASHORT_DESCRIPTION = 121,
		TASK_JUMP_SINGLERUN_DESCRIPTION_SINGLE = 122,
		TASK_JUMP_SINGLERUN_DESCRIPTION = 123,
		TASK_JUMP_SINGLERUN_ULTRASHORT_DESCRIPTION_SINGLE = 124,
		TASK_JUMP_SINGLERUN_ULTRASHORT_DESCRIPTION = 125,
		TASK_ROLL_DESCRIPTION_SINGLE = 126,
		TASK_ROLL_DESCRIPTION = 127,
		TASK_ROLL_ULTRASHORT_DESCRIPTION_SINGLE = 128,
		TASK_ROLL_ULTRASHORT_DESCRIPTION = 129,
		TASK_ROLL_SINGLERUN_DESCRIPTION_SINGLE = 130,
		TASK_ROLL_SINGLERUN_DESCRIPTION = 131,
		TASK_ROLL_SINGLERUN_ULTRASHORT_DESCRIPTION_SINGLE = 132,
		TASK_ROLL_SINGLERUN_ULTRASHORT_DESCRIPTION = 133,
		TASK_ROLL_LEFT_DESCRIPTION_SINGLE = 134,
		TASK_ROLL_LEFT_DESCRIPTION = 135,
		TASK_ROLL_LEFT_ULTRASHORT_DESCRIPTION_SINGLE = 136,
		TASK_ROLL_LEFT_ULTRASHORT_DESCRIPTION = 137,
		TASK_ROLL_CENTER_DESCRIPTION_SINGLE = 138,
		TASK_ROLL_CENTER_DESCRIPTION = 139,
		TASK_ROLL_CENTER_ULTRASHORT_DESCRIPTION_SINGLE = 140,
		TASK_ROLL_CENTER_ULTRASHORT_DESCRIPTION = 141,
		TASK_ROLL_RIGHT_DESCRIPTION_SINGLE = 142,
		TASK_ROLL_RIGHT_DESCRIPTION = 143,
		TASK_ROLL_RIGHT_ULTRASHORT_DESCRIPTION_SINGLE = 144,
		TASK_ROLL_RIGHT_ULTRASHORT_DESCRIPTION = 145,
		TASK_ROLL_UNDERBARRIERS_DESCRIPTION_SINGLE = 146,
		TASK_ROLL_UNDERBARRIERS_DESCRIPTION = 147,
		TASK_ROLL_UNDERBARRIERS_ULTRASHORT_DESCRIPTION_SINGLE = 148,
		TASK_ROLL_UNDERBARRIERS_ULTRASHORT_DESCRIPTION = 149,
		TASK_JUMP_BARRIERS_DESCRIPTION_SINGLE = 150,
		TASK_JUMP_BARRIERS_DESCRIPTION = 151,
		TASK_JUMP_BARRIERS_ULTRASHORT_DESCRIPTION_SINGLE = 152,
		TASK_JUMP_BARRIERS_ULTRASHORT_DESCRIPTION = 153,
		TASK_DIETOTRAIN_DESCRIPTION_SINGLE = 154,
		TASK_DIETOTRAIN_DESCRIPTION = 155,
		TASK_DIETOTRAIN_ULTRASHORT_DESCRIPTION_SINGLE = 156,
		TASK_DIETOTRAIN_ULTRASHORT_DESCRIPTION = 157,
		TASK_JETPACK_DESCRIPTION_SINGLE = 158,
		TASK_JETPACK_DESCRIPTION = 159,
		TASK_JETPACK_ULTRASHORT_DESCRIPTION_SINGLE = 160,
		TASK_JETPACK_ULTRASHORT_DESCRIPTION = 161,
		TASK_JETPACK_SINGLERUN_DESCRIPTION_SINGLE = 162,
		TASK_JETPACK_SINGLERUN_DESCRIPTION = 163,
		TASK_JETPACK_SINGLERUN_ULTRASHORT_DESCRIPTION_SINGLE = 164,
		TASK_JETPACK_SINGLERUN_ULTRASHORT_DESCRIPTION = 165,
		TASK_SUPERSNEAKERS_DESCRIPTION_SINGLE = 166,
		TASK_SUPERSNEAKERS_DESCRIPTION = 167,
		TASK_SUPERSNEAKERS_ULTRASHORT_DESCRIPTION_SINGLE = 168,
		TASK_SUPERSNEAKERS_ULTRASHORT_DESCRIPTION = 169,
		TASK_SUPERSNEAKERS_SINGLERUN_DESCRIPTION_SINGLE = 170,
		TASK_SUPERSNEAKERS_SINGLERUN_DESCRIPTION = 171,
		TASK_SUPERSNEAKERS_SINGLERUN_ULTRASHORT_DESCRIPTION_SINGLE = 172,
		TASK_SUPERSNEAKERS_SINGLERUN_ULTRASHORT_DESCRIPTION = 173,
		TASK_MGANETS_DESCRIPTION_SINGLE = 174,
		TASK_MAGNETS_DESCRIPTION = 175,
		TASK_MAGNETS_ULTRASHORT_DESCRIPTION_SINGLE = 176,
		TASK_MAGNETS_ULTRASHORT_DESCRIPTION = 177,
		TASK_MGANETS_SINGLERUN_DESCRIPTION_SINGLE = 178,
		TASK_MAGNETS_SINGLERUN_DESCRIPTION = 179,
		TASK_MAGNETS_SINGLERUN_ULTRASHORT_DESCRIPTION_SINGLE = 180,
		TASK_MAGNETS_SINGLERUN_ULTRASHORT_DESCRIPTION = 181,
		TASK_DAILYQUESTS_DESCRIPTION_SINGLE = 182,
		TASK_DAILYQUESTS_DESCRIPTION = 183,
		TASK_DAILYQUESTS_ULTRASHORT_DESCRIPTION_SINGLE = 184,
		TASK_DAILYQUESTS_ULTRASHORT_DESCRIPTION = 185,
		TASK_TOKENS_DESCRIPTION_SINGLE = 186,
		TASK_TOKENS_DESCRIPTION = 187,
		TASK_TOKENS_ULTRASHORT_DESCRIPTION_SINGLE = 188,
		TASK_TOKENS_ULTRASHORT_DESCRIPTION = 189,
		TASK_DODGE_BARRIERS_DESCRIPTION_SINGLE = 190,
		TASK_DODGE_BARRIERS_DESCRIPTION = 191,
		TASK_DODGE_BARRIERS_ULTRASHORT_DESCRIPTION_SINGLE = 192,
		TASK_DODGE_BARRIERS_ULTRASHORT_DESCRIPTION = 193,
		TASK_CRASH_BARRIERS_DESCRIPTION_SINGLE = 194,
		TASK_CRASH_BARRIERS_DESCRIPTION = 195,
		TASK_CRASH_BARRIERS_ULTRASHORT_DESCRIPTION_SINGLE = 196,
		TASK_CRASH_BARRIERS_ULTRASHORT_DESCRIPTION = 197,
		TASK_CRASH_BARRIERS_SINGLERUN_DESCRIPTION_SINGLE = 198,
		TASK_CRASH_BARRIERS_SINGLERUN_DESCRIPTION = 199,
		TASK_CRASH_BARRIERS_SINGLERUN_ULTRASHORT_DESCRIPTION_SINGLE = 200,
		TASK_CRASH_BARRIERS_SINGLERUN_ULTRASHORT_DESCRIPTION = 201,
		TASK_CRASH_TRAINS_DESCRIPTION_SINGLE = 202,
		TASK_CRASH_TRAINS_DESCRIPTION = 203,
		TASK_CRASH_TRAINS_ULTRASHORT_DESCRIPTION_SINGLE = 204,
		TASK_CRASH_TRAINS_ULTRASHORT_DESCRIPTION = 205,
		TASK_CRASH_TRAINS_SINGLERUN_DESCRIPTION_SINGLE = 206,
		TASK_CRASH_TRAINS_SINGLERUN_DESCRIPTION = 207,
		TASK_CRASH_TRAINS_SINGLERUN_ULTRASHORT_DESCRIPTION_SINGLE = 208,
		TASK_CRASH_TRAINS_SINGLERUN_ULTRASHORT_DESCRIPTION = 209,
		TASK_POWERUPS_DESCRIPTION_SINGLE = 210,
		TASK_POWERUPS_DESCRIPTION = 211,
		TASK_POWERUPS_ULTRASHORT_DESCRIPTION_SINGLE = 212,
		TASK_POWERUPS_ULTRASHORT_DESCRIPTION = 213,
		TASK_HEADSTART_DESCRIPTION_SINGLE = 214,
		TASK_HEADSTART_DESCRIPTION = 215,
		TASK_HEADSTART_ULTRASHORT_DESCRIPTION_SINGLE = 216,
		TASK_HEADSTART_ULTRASHORT_DESCRIPTION = 217,
		TASK_COINS_WITH_MAGNET_DESCRIPTION_SINGLE = 218,
		TASK_COINS_WITH_MAGNET_DESCRIPTION = 219,
		TASK_COINS_WITH_MAGNET_ULTRASHORT_DESCRIPTION_SINGLE = 220,
		TASK_COINS_WITH_MAGNET_ULTRASHORT_DESCRIPTION = 221,
		TASK_BUY_MISTERYBOX_DESCRIPTION_SINGLE = 222,
		TASK_BUY_MISTERYBOX_DESCRIPTION = 223,
		TASK_BUY_MISTERYBOX_ULTRASHORT_DESCRIPTION_SINGLE = 224,
		TASK_BUY_MISTERYBOX_ULTRASHORT_DESCRIPTION = 225,
		TASK_TIMEDEATH_DESCRIPTION_SINGLE = 226,
		TASK_TIMEDEATH_DESCRIPTION = 227,
		TASK_TIMEDEATH_ULTRASHORT_DESCRIPTION_SINGLE = 228,
		TASK_TIMEDEATH_ULTRASHORT_DESCRIPTION = 229,
		TASK_MYSTERYBOXES_DESCRIPTION_SINGLE = 230,
		TASK_MYSTERYBOXES_DESCRIPTION = 231,
		TASK_MYSTERYBOXES_ULTRASHORT_DESCRIPTION_SINGLE = 232,
		TASK_MYSTERYBOXES_ULTRASHORT_DESCRIPTION = 233,
		TASK_BUMP_BARRIER_DESCRIPTION_SINGLE = 234,
		TASK_BUMP_BARRIER_DESCRIPTION = 235,
		TASK_BUMP_BARRIER_ULTRASHORT_DESCRIPTION_SINGLE = 236,
		TASK_BUMP_BARRIER_ULTRASHORT_DESCRIPTION = 237,
		TASK_BUMP_LIGHTSIGNAL_DESCRIPTION_SINGLE = 238,
		TASK_BUMP_LIGHTSIGNAL_DESCRIPTION = 239,
		TASK_BUMP_LIGHTSIGNAL_ULTRASHORT_DESCRIPTION_SINGLE = 240,
		TASK_BUMP_LIGHTSIGNAL_ULTRASHORT_DESCRIPTION = 241,
		TASK_BUMP_BUSH_DESCRIPTION_SINGLE = 242,
		TASK_BUMP_BUSH_DESCRIPTION = 243,
		TASK_BUMP_BUSH_ULTRASHORT_DESCRIPTION_SINGLE = 244,
		TASK_BUMP_BUSH_ULTRASHORT_DESCRIPTION = 245,
		TASK_BUMP_TRAIN_DESCRIPTION_SINGLE = 246,
		TASK_BUMP_TRAIN_DESCRIPTION = 247,
		TASK_BUMP_TRAIN_ULTRASHORT_DESCRIPTION_SINGLE = 248,
		TASK_BUMP_TRAIN_ULTRASHORT_DESCRIPTION = 249,
		TASK_HOVERBOARD_DESCRIPTION_SINGLE = 250,
		TASK_HOVERBOARD_DESCRIPTION = 251,
		TASK_HOVERBOARD_ULTRASHORT_DESCRIPTION_SINGLE = 252,
		TASK_HOVERBOARD_ULTRASHORT_DESCRIPTION = 253,
		TASK_HOVERBOARD_EXPIRE_DESCRIPTION_SINGLE = 254,
		TASK_HOVERBOARD_EXPIRE_DESCRIPTION = 255,
		TASK_HOVERBOARD_EXPIRE_ULTRASHORT_DESCRIPTION_SINGLE = 256,
		TASK_HOVERBOARD_EXPIRE_ULTRASHORT_DESCRIPTION = 257,
		TASK_SCORE_SINGLERUN_DESCRIPTION_SINGLE = 258,
		TASK_SCORE_SINGLERUN_DESCRIPTION = 259,
		TASK_SCORE_SINGLERUN_ULTRASHORT_DESCRIPTION_SINGLE = 260,
		TASK_SCORE_SINGLERUN_ULTRASHORT_DESCRIPTION = 261,
		TASK_NOCOINS_WITHOUTSCORE_DESCRIPTION_SINGLE = 262,
		TASK_NOCOINS_WITHOUTSCORE_DESCRIPTION = 263,
		TASK_NOCOINS_WITHOUTSCORE_ULTRASHORT_DESCRIPTION_SINGLE = 264,
		TASK_NOCOINS_WITHOUTSCORE_ULTRASHORT_DESCRIPTION = 265,
		TASK_DOUBLE_MULTIPLIER_SINGLERUN_DESCRIPTION_SINGLE = 266,
		TASK_DOUBLE_MULTIPLIER_SINGLERUN_DESCRIPTION = 267,
		TASK_DOUBLE_MULTIPLIER_SINGLERUN_ULTRASHORT_DESCRIPTION_SINGLE = 268,
		TASK_DOUBLE_MULTIPLIER_SINGLERUN_ULTRASHORT_DESCRIPTION = 269,
		TASK_DODGEBARRIERS_SINGLERUN_DESCRIPTION_SINGLE = 270,
		TASK_DODGEBARRIERS_SINGLERUN_DESCRIPTION = 271,
		TASK_DODGEBARRIERS_SINGLERUN_ULTRASHORT_DESCRIPTION_SINGLE = 272,
		TASK_DODGEBARRIERS_SINGLERUN_ULTRASHORT_DESCRIPTION = 273,
		TASK_HOVERBOARD_EXPIRE_SINGLERUN_DESCRIPTION_SINGLE = 274,
		TASK_HOVERBOARD_EXPIRE_SINGLERUN_DESCRIPTION = 275,
		TASK_HOVERBOARD_EXPIRE_SINGLERUN_ULTRASHORT_DESCRIPTION_SINGLE = 276,
		TASK_HOVERBOARD_EXPIRE_SINGLERUN_ULTRASHORT_DESCRIPTION = 277,
		TASK_BUMPBARRIER_SINGLERUN_DESCRIPTION_SINGLE = 278,
		TASK_BUMPBARRIER_SINGLERUN_DESCRIPTION = 279,
		TASK_BUMPBARRIER_SINGLERUN_ULTRASHORT_DESCRIPTION_SINGLE = 280,
		TASK_BUMPBARRIER_SINGLERUN_ULTRASHORT_DESCRIPTION = 281,
		TASK_BUMP_LIGHTSIGNAL_SINGLERUN_DESCRIPTION_SINGLE = 282,
		TASK_BUMP_LIGHTSIGNAL_SINGLERUN_DESCRIPTION = 283,
		TASK_BUMP_LIGHTSIGNAL_SINGLERUN_ULTRASHORT_DESCRIPTION_SINGLE = 284,
		TASK_BUMP_LIGHTSIGNAL_SINGLERUN_ULTRASHORT_DESCRIPTION = 285,
		TASK_JUMPONTRAIN_INROW_DESCRIPTION_SINGLE = 286,
		TASK_JUMPONTRAIN_INROW_DESCRIPTION = 287,
		TASK_JUMPONTRAIN_INROW_ULTRASHORT_DESCRIPTION_SINGLE = 288,
		TASK_JUMPONTRAIN_INROW_ULTRASHORT_DESCRIPTION = 289,
		TASK_STAYIN_ONELINE_DESCRIPTION_SINGLE = 290,
		TASK_STAYIN_ONELINE_DESCRIPTION = 291,
		TASK_STAYIN_ONELINE_ULTRASHORT_DESCRIPTION_SINGLE = 292,
		TASK_STAYIN_ONELINE_ULTRASHORT_DESCRIPTION = 293,
		TASK_DAILYQUEST_INROW_DESCRIPTION_SINGLE = 294,
		TASK_DAILYQUEST_INROW_DESCRIPTION = 295,
		TASK_DAILYQUEST_INROW_ULTRASHORT_DESCRIPTION_SINGLE = 296,
		TASK_DAILYQUEST_INROW_ULTRASHORT_DESCRIPTION = 297,
		TASK_NOJUMPS_WITHOUT_SCORE_DESCRIPTION_SINGLE = 298,
		TASK_NOJUMPS_WITHOUT_SCORE_DESCRIPTION = 299,
		TASK_NOJUMPS_WITHOUT_SCORE_ULTRASHORT_DESCRIPTION_SINGLE = 300,
		TASK_NOJUMPS_WITHOUT_SCORE_ULTRASHORT_DESCRIPTION = 301,
		TASK_NOROLLS_WITHOUT_SCORE_DESCRIPTION_SINGLE = 302,
		TASK_NOROLLS_WITHOUT_SCORE_DESCRIPTION = 303,
		TASK_NOROLLS_WITHOUT_SCORE_ULTRASHORT_DESCRIPTION_SINGLE = 304,
		TASK_NOROLLS_WITHOUT_SCORE_ULTRASHORT_DESCRIPTION = 305,
		TASK_NOPOWERUPS_WITHOUT_SCORE_DESCRIPTION_SINGLE = 306,
		TASK_NOPOWERUPS_WITHOUT_SCORE_DESCRIPTION = 307,
		TASK_NOPOWERUPS_WITHOUT_SCORE_ULTRASHORT_DESCRIPTION_SINGLE = 308,
		TASK_NOPOWERUPS_WITHOUT_SCORE_ULTRASHORT_DESCRIPTION = 309,
		TASK_ONE_OF_EACH_POWERUP_DESCRIPTION_SINGLE = 310,
		TASK_ONE_OF_EACH_POWERUP_DESCRIPTION = 311,
		TASK_ONE_OF_EACH_POWERUP_ULTRASHORT_DESCRIPTION_SINGLE = 312,
		TASK_ONE_OF_EACH_POWERUP_ULTRASHORT_DESCRIPTION = 313,
		TASK_SCOORE_BOOSTER_DESCRIPTION_SINGLE = 314,
		TASK_SCOORE_BOOSTER_DESCRIPTION = 315,
		TASK_SCOORE_BOOSTER_ULTRASHORT_DESCRIPTION_SINGLE = 316,
		TASK_SCOORE_BOOSTER_ULTRASHORT_DESCRIPTION = 317,
		TASK_BEATOWN_HIGHSCORE_DESCRIPTION_SINGLE = 318,
		TASK_BEATOWN_HIGHSCORE_DESCRIPTION = 319,
		TASK_BEATOWN_HIGHSCORE_ULTRASHORT_DESCRIPTION_SINGLE = 320,
		TASK_BEATOWN_HIGHSCORE_ULTRASHORT_DESCRIPTION = 321,
		TASK_GET_AMOUNT_OF_COINS_DESCRIPTION_SINGLE = 322,
		TASK_GET_AMOUNT_OF_COINS_DESCRIPTION = 323,
		TASK_GET_AMOUNT_OF_COINS_ULTRASHORT_DESCRIPTION_SINGLE = 324,
		TASK_GET_AMOUNT_OF_COINS_ULTRASHORT_DESCRIPTION = 325,
		TASK_ACTIVE_POWERUPS_DESCRIPTION_SINGLE = 326,
		TASK_ACTIVE_POWERUPS_DESCRIPTION = 327,
		TASK_ACTIVE_POWERUPS_ULTRASHORT_DESCRIPTION_SINGLE = 328,
		TASK_ACTIVE_POWERUPS_ULTRASHORT_DESCRIPTION = 329,
		TASK_COINSWITH_JETPACK_DESCRIPTION_SINGLE = 330,
		TASK_COINSWITH_JETPACK_DESCRIPTION = 331,
		TASK_COINSWITH_JETPACK_ULTRASHORT_DESCRIPTION_SINGLE = 332,
		TASK_COINSWITH_JETPACK_ULTRASHORT_DESCRIPTION = 333,
		TASK_SCOOREWITH_SCORE_BOOSTER_DESCRIPTION_SINGLE = 334,
		TASK_SCOOREWITH_SCORE_BOOSTER_DESCRIPTION = 335,
		TASK_SCOOREWITH_SCORE_BOOSTER_ULTRASHORT_DESCRIPTION_SINGLE = 336,
		TASK_SCOOREWITH_SCORE_BOOSTER_ULTRASHORT_DESCRIPTION = 337,
		TASK_EARNCOIN_WITHOUT_TOUCHING_GROUND_DESCRIPTION_SINGLE = 338,
		TASK_EARNCOIN_WITHOUT_TOUCHING_GROUND_DESCRIPTION = 339,
		TASK_EARNCOIN_WITHOUT_TOUCHING_GROUND_ULTRASHORT_DESCRIPTION_SINGLE = 340,
		TASK_EARNCOIN_WITHOUT_TOUCHING_GROUND_ULTRASHORT_DESCRIPTION = 341,
		TASK_SKIP_TASK_DESCRIPTION_SINGLE = 342,
		TASK_SKIP_TASK_DESCRIPTION = 343,
		TASK_SKIP_TASK_ULTRASHORT_DESCRIPTION_SINGLE = 344,
		TASK_SKIP_TASK_ULTRASHORT_DESCRIPTION = 345,
		TASK_PICKUP_KEYS_SINGLERUN_DESCRIPTION_SINGLE = 346,
		TASK_PICKUP_KEYS_SINGLERUN_DESCRIPTION = 347,
		TASK_PICKUP_KEYS_SINGLERUN_ULTRASHORT_DESCRIPTION_SINGLE = 348,
		TASK_PICKUP_KEYS_SINGLERUN_ULTRASHORT_DESCRIPTION = 349,
		TASK_PICKUP_KEYS_DESCRIPTION_SINGLE = 350,
		TASK_PICKUP_KEYS_DESCRIPTION = 351,
		TASK_PICKUP_KEYS_ULTRASHORT_DESCRIPTION_SINGLE = 352,
		TASK_PICKUP_KEYS_ULTRASHORT_DESCRIPTION = 353,
		TASK_SPEND_KEYS_DESCRIPTION_SINGLE = 354,
		TASK_SPEND_KEYS_DESCRIPTION = 355,
		TASK_SPEND_KEYS_ULTRASHORT_DESCRIPTION_SINGLE = 356,
		TASK_SPEND_KEYS_ULTRASHORT_DESCRIPTION = 357,
		TASK_COLLECT_COINS_LEFTLANE_DESCRIPTION_SINGLE = 358,
		TASK_COLLECT_COINS_LEFTLANE_DESCRIPTION = 359,
		TASK_COLLECT_COINS_LEFTLANE_ULTRASHORT_DESCRIPTION_SINGLE = 360,
		TASK_COLLECT_COINS_LEFTLANE_ULTRASHORT_DESCRIPTION = 361,
		TASK_COLLECT_COINS_CENTERLANE_DESCRIPTION_SINGLE = 362,
		TASK_COLLECT_COINS_CENTERLANE_DESCRIPTION = 363,
		TASK_COLLECT_COINS_CENTERLANE_ULTRASHORT_DESCRIPTION_SINGLE = 364,
		TASK_COLLECT_COINS_CENTERLANE_ULTRASHORT_DESCRIPTION = 365,
		TASK_COLLECT_COINS_RIGHTLANE_DESCRIPTION_SINGLE = 366,
		TASK_COLLECT_COINS_RIGHTLANE_DESCRIPTION = 367,
		TASK_COLLECT_COINS_RIGHTLANE_ULTRASHORT_DESCRIPTION_SINGLE = 368,
		TASK_COLLECT_COINS_RIGHTLANE_ULTRASHORT_DESCRIPTION = 369,
		TASK_CRASH_FLOWERBEDS_DESCRIPTION_SINGLE = 370,
		TASK_CRASH_FLOWERBEDS_DESCRIPTION = 371,
		TASK_CRASH_FLOWERBEDS_ULTRASHORT_DESCRIPTION_SINGLE = 372,
		TASK_CRASH_FLOWERBEDS_ULTRASHORT_DESCRIPTION = 373,
		TASK_CRASH_CARS_DESCRIPTION_SINGLE = 374,
		TASK_CRASH_CARS_DESCRIPTION = 375,
		TASK_CRASH_CARS_ULTRASHORT_DESCRIPTION_SINGLE = 376,
		TASK_CRASH_CARS_ULTRASHORT_DESCRIPTION = 377,
		TASK_CRASH_BUSES_DESCRIPTION_SINGLE = 378,
		TASK_CRASH_BUSES_DESCRIPTION = 379,
		TASK_CRASH_BUSES_ULTRASHORT_DESCRIPTION_SINGLE = 380,
		TASK_CRASH_BUSES_ULTRASHORT_DESCRIPTION = 381,
		HOVERBOARD_SELCTECT_BUTTON_SELECT = 382,
		HOVERBOARD_SELCTECT_BUTTON_SELECTED = 383,
		UICHARACTER_SELECT_BUTTON_SELECT = 384,
		UICHARACTER_SELECT_BUTTON_SELECTED = 385,
		TASK_POPUP_PROGRESS_DONE = 386,
		CELEBRATION_POPUP_CONTINUE = 387,
		CELEBRATION_POPUP_OPEN = 388,
		ELLEN_ARMY_THEME_TITLE = 389,
		ELLEN_ARMY_THEME_UNLOCK_DESCRIPTION = 390,
		ELLEN_COOL_THEME_TITLE = 391,
		ELLEN_COOL_THEME_UNLOCK_DESCRIPTION = 392,
		CLOWN_THEME1_THEME_TITLE = 393,
		CLOWN_THEME2_THEME_TITLE = 394,
		CLOWN_THEME_UNLOCK_DESCRIPTION = 395,
		TURTLEFOK_THEME1_THEME_TITLE = 396,
		TURTLEFOK_THEME2_THEME_TITLE = 397,
		TURTLEFOK_THEME_UNLOCK_DESCRIPTION = 398,
		NIJIA_DARK_THEME_TITLE = 399,
		NIJIA_THEME_UNLOCK_DESCRIPTION = 400,
		LEE_STAR_THEME_TITLE = 401,
		LEE_THEME_UNLOCK_DESCRIPTION = 402,
		STRONG_SMOOTH_THEME_TITLE = 403,
		STRONG_BASKET_THEME_TITLE = 404,
		STRONG_THEME_UNLOCK_DESCRIPTION = 405,
		KELVIN_THEME_UNLOCK_DESCRIPTION = 406,
		KELVIN_BASKET_THEME_TITLE = 407,
		KELVIN_SMOOTH_THEME_TITLE = 408,
		TAG_THEME_UNLOCK_DESCRIPTION = 409,
		TAG_SMOOTH_THEME_TITLE = 410,
		VENICE_THEME_UNLOCK_DESCRIPTION = 411,
		VENICE_SMOOTH_THEME_TITLE = 412,
		DARCY_THEME_UNLOCK_DESCRIPTION = 413,
		DARCY_SMOOTH_THEME_TITLE = 414,
		BRAG_CELEBRATION_NEW_HIGHSCORE = 415,
		PURCHASE_COINS_ONE_NO_INTERNET = 416,
		PURCHASE_COINS_MULTIPLE_NO_INTERNET = 417,
		PURCHASE_KEYS_ONE_NO_INTERNET = 418,
		PURCHASE_KEYS_MULTIPLE_NO_INTERNET = 419,
		NOT_ENOUGH_COINS = 420,
		NOT_ENOUGH_KEYS = 421,
		CELEBRATION_POPUP_COLLECT_MORE_TOKENS = 422,
		CELEBRATION_POPUP_YOU_UNLOCKED_TROPHY = 423,
		CELEBRATION_POPUP_MEDAL_BIG_LABEL = 424,
		CELEBRATION_POPUP_CHARACTER_UNLOCK = 425,
		CELEBRATION_POPUP_EVENT_BOARD_TRYOUT = 426,
		CELEBRATION_POPUP_COINS_AMOUNT = 427,
		CELEBRATION_POPUP_KEYS_AMOUNT = 428,
		CELEBRATION_POPUP_KEY_AMOUNT = 429,
		TASK_PICKUP_POWER_JUMPERS_DESCRIPTION_SINGLE = 430,
		TASK_PICKUP_POWER_JUMPERS_DESCRIPTION = 431,
		TASK_PICKUP_POWER_JUMPERS_ULTRASHORT_DESCRIPTION_SINGLE = 432,
		TASK_PICKUP_POWER_JUMPERS_ULTRASHORT_DESCRIPTION = 433,
		TASK_PICKUP_POWER_JUMPERS_SINGLE_RUN_DESCRIPTION_SINGLE = 434,
		TASK_PICKUP_POWER_JUMPERS_SINGLE_RUN_DESCRIPTION = 435,
		TASK_PICKUP_POWER_JUMPERS_SINGLE_RUN_ULTRASHORT_DESCRIPTION_SINGLE = 436,
		TASK_PICKUP_POWER_JUMPERS_SINGLE_RUN_ULTRASHORT_DESCRIPTION = 437,
		TASK_COLLECT_COINS_WITH_POWER_JUMPER_DESCRIPTION_SINGLE = 438,
		TASK_COLLECT_COINS_WITH_POWER_JUMPER_DESCRIPTION = 439,
		TASK_COLLECT_COINS_WITH_POWER_JUMPER_ULTRASHORT_DESCRIPTION_SINGLE = 440,
		TASK_COLLECT_COINS_WITH_POWER_JUMPER_ULTRASHORT_DESCRIPTION = 441,
		TASK_HAVECHARACTERS_DESCRIPTION_SINGLE = 442,
		TASK_HAVECHARACTERS_DESCRIPTION = 443,
		TASK_HAVECHARACTERS_ULTRASHORT_DESCRIPTION_SINGLE = 444,
		TASK_HAVECHARACTERS_ULTRASHORT_DESCRIPTION = 445,
		INAPP_DATA_BUNDLE_TIER_ONE = 446,
		INAPP_DATA_BUNDLE_TIER_TWO = 447,
		INAPP_DATA_BUNDLE_TIER_THREE = 448,
		INAPP_DATA_BUNDLE_TIER_FOUR = 449,
		INAPP_DATA_BUNDLE_TIER_FIVE = 450,
		TOPRUN_RANK0_TITLE = 451,
		TOPRUN_RANK1_TITLE = 452,
		TOPRUN_RANK2_TITLE = 453,
		START_APP_LOADING = 454,
		UI_POPUP_SETTING_TITLE = 455,
		UI_POPUP_SETTING_NAME = 456,
		UI_POPUP_SETTING_REDEEM = 457,
		UI_POPUP_SETTING_FOLLOW = 458,
		UI_POPUP_SETTING_LOGIN = 459,
		UI_POPUP_SETTING_MUSIC = 460,
		UI_POPUP_SETTING_MUSIC_OPEN = 461,
		UI_POPUP_SETTING_MUSIC_CLOSE = 462,
		UI_POPUP_SETTING_INPUT_NAME_TITLE = 463,
		UI_POPUP_SETTING_INPUT_NAME_SUBMIT = 464,
		UI_POPUP_SETTING_INPUT_REDEEM_TITLE = 465,
		UI_POPUP_SETTING_INPUT_REDEEM_FOLLOW_US = 466,
		UI_POPUP_SETTING_INPUT_REDEEM_FOLLOW_REDEEM = 467,
		UI_POPUP_SETTING_INPUT_REDEEM_OK = 468,
		UI_SCREEN_SHOP_PAY_PRICE_COIN1 = 469,
		UI_SCREEN_SHOP_PAY_PRICE_COIN2 = 470,
		UI_SCREEN_SHOP_PAY_PRICE_COIN3 = 471,
		UI_SCREEN_SHOP_PAY_PRICE_COIN4 = 472,
		UI_SCREEN_SHOP_PAY_PRICE_COIN5 = 473,
		UI_SCREEN_SHOP_PAY_PRICE_GEM1 = 474,
		UI_SCREEN_SHOP_PAY_PRICE_GEM2 = 475,
		UI_SCREEN_SHOP_PAY_PRICE_GEM3 = 476,
		UI_SCREEN_SHOP_PAY_PRICE_GEM4 = 477,
		UI_SCREEN_SHOP_FREE_GEMS = 478,
		UI_SCREEN_SHOP_FREE_GEMS_GET = 479,
		UI_SCREEN_CHARACTER_SELECT_BUTTON_FIND = 480,
		UI_SCREEN_CHARACTER_SELECT_BUTTON_IN = 481,
		UI_SCREEN_CHARACTER_SELECT_BUTTON_WATCH = 482,
		UI_SCREEN_CHARACTER_SELECT_BUTTON_TRY = 483,
		UI_SCREEN_CHARACTER_SELECT_BUTTON_EXCLUSIVE = 484,
		UI_SCREEN_CHARACTER_SELECT_BUTTON_PLAY = 485,
		UI_POPUP_ACHIEVEMENT_TITLE = 486,
		UI_POPUP_ACHIEVEMENT_COMPLETED = 487,
		UI_POPUP_ACHIEVEMENT_COMPLETED_GOTTENLABEL = 488,
		UI_POPUP_DAILY_TITLE = 489,
		UI_POPUP_DAILY_KEEP_CONTINUE = 490,
		UI_POPUP_DAILY_BUTTON_GET = 491,
		UI_SCREEN_RANK_HIGHSCORE_TITLE = 492,
		UI_SCREEN_RANK_GLOBAL_TITLE = 493,
		UI_SCREEN_RANK_VIP_TITLE = 494,
		UI_SCREEN_RANK_FRIEND_TITLE = 495,
		UI_SCREEN_RANK_TIME = 496,
		UI_SCREEN_RANK_LEFT = 497,
		UI_SCREEN_RANK_NAME = 498,
		UI_SCREEN_RANK_MEDAL_YOU_HAVE = 499,
		UI_SCREEN_RANK_MEDAL_BOTTOM = 500,
		UI_SCREEN_HELM_SELECT_BUTTON_FREE = 501,
		UI_POPUP_LOTTERY_TITLE = 502,
		UI_POPUP_LOTTERY_BUTTON_SPIN_NORMAL = 503,
		UI_POPUP_LOTTERY_BUTTON_SPIN_FREE = 504,
		UI_POPUP_LOTTERY_BUTTON_SPIN_FREE_AGAIN = 505,
		UI_POPUP_LOTTERY_NEXT_FREE_SPIN_TIME = 506,
		UI_POPUP_RATE_TITLE = 507,
		UI_POPUP_RATE_CONTENT = 508,
		UI_POPUP_RATE_BUTTON_GOOD = 509,
		UI_POPUP_WATCH_VIDEO_TITLE = 510,
		UI_POPUP_WATCH_VIDEO_BUTTON_VIDEO = 511,
		UI_POPUP_CONFIRM_TITLE = 512,
		UI_POPUP_CONFIRM_CONTENT = 513,
		UI_POPUP_CONFIRM_BUTTON_WATCH = 514,
		UI_POPUP_CONFIRM_NO_REMINDER = 515,
		UI_POPUP_GET_FREE_REWARD_TITLE = 516,
		UI_POPUP_GET_FREE_REWARD_BUTTON_GET = 517,
		UI_POPUP_NOT_ENOUGH_CURENCY_BUTTON_FREE = 518,
		UI_POPUP_NOT_ENOUGH_CURENCY_BUTTON_BUY = 519,
		UI_POPUP_RANK_LOADING_CONTENT = 520,
		UI_POPUP_REDEEM_TITLE = 521,
		UI_POPUP_REDEEM_BUTTON_GET = 522,
		UI_POPUP_SAVE_ME_BUTTON_FREE = 523,
		UI_POPUP_TRY_ROLE_TRY_TITLE = 524,
		UI_POPUP_TRY_ROLE_BUY_TITLE = 525,
		UI_POPUP_TRY_ROLE_BUTTON_WATCH_VIDEO = 526,
		UI_POPUP_TRY_ROLE_BUTTON_TRY = 527,
		UI_POPUP_TRY_ROLE_BUTTON_PLAY = 528,
		UI_POPUP_TRY_ROLE_BUTTON_NO_THANKS = 529,
		UI_POPUP_TRY_ROLE_BUTTON_NO_REMINDER = 530,
		UI_SCREEN_GAME_OVER_TITLE = 531,
		UI_SCREEN_GAME_OVER_BUTTON_CLAIM = 532,
		UI_SCREEN_GAME_OVER_BUTTON_LOTTERY = 533,
		UI_SCREEN_GAME_OVER_BUTTON_TRY = 534,
		ATLAS_UI_PLAY_BUTTON_SPRITE = 535,
		ATLAS_UI_LOTTERY_BUTTON_SPRITE = 536,
		ATLAS_UI_ROLE_BUTTON_SPRITE = 537,
		ATLAS_UI_RANK_BUTTON_SPRITE = 538,
		ATLAS_UI_VIP_BUTTON_SPRITE = 539,
		ATLAS_UI_LOTTERY_LUCK_SPRITE = 540,
		ATLAS_UI_TRY_BUTTON_NEW = 541,
		ATLAS_UI_ICON_SUBSCRIBE_SPRITE = 542,
		ATLAS_SUBSCRIBE_TITLE_SPRITE = 543,
		ATLAS_UI_ONLINE_BUTTON_ONLINE = 544,
		UI_TOP_TIP_MISSION_COMPLETE = 545,
		UI_TOP_TIP_ACHIEVEMENT_COMPLETE = 546,
		UI_TOP_TIP_NET_ERROR = 547,
		UI_TOP_TIP_REDEEM_SUCCESS = 548,
		UI_TOP_TIP_REDEEM_CODE_ERROR = 549,
		UI_TOP_TIP_GOT_SUCCESSFULLY = 550,
		UI_TOP_TIP_SUBSCRIBE_TO_SUCCESS = 551,
		UI_TOP_TIP_GOOD_JOB = 552,
		UI_TOP_TIP_FLY_OVER = 553,
		UI_TOP_TIP_YOU_DID_IT = 554,
		UI_TOP_TIP_YOU_UNLOCK = 555,
		UI_TOP_TIP_FILL_COMPLETED = 556,
		UI_TOP_TIP_TASK_SET_COMPLETE = 557,
		UI_POPUP_SUBSCRIBE_CONTENT_REMOVE = 558,
		UI_POPUP_SUBSCRIBE_CONTENT_ADS = 559,
		UI_POPUP_SUBSCRIBE_CONTENT_DISCOUNT_GEMS = 560,
		UI_POPUP_SUBSCRIBE_CONTENT_EXCLUSIVE_ROLE = 561,
		UI_POPUP_SUBSCRIBE_CONTENT_MONK = 562,
		UI_POPUP_SUBSCRIBE_CONTENT_DOUBLE_COINS = 563,
		UI_POPUP_SUBSCRIBE_BUTTON_TRIAL = 564,
		UI_POPUP_SUBSCRIBE_BUTTON_TRIAL_TIP = 565,
		UI_POPUP_SUBSCRIBE_NO_REMINDER = 566,
		UI_POPUP_SUBSCRIBE_SUBSCRIBE_INFO = 567,
		UI_POPUP_SUBSCRIBE_URL_TERMS_OF_USE = 568,
		UI_POPUP_SUBSCRIBE_URL_PRIVACY_POLICY = 569,
		UI_POPUP_SUBSCRIBE_BUTTON_RESTORE = 570,
		UI_MYSTERY_BOX_LEE_S = 571,
		UI_MYSTERY_BOX_TURTLEFOK_S = 572,
		UI_SCREEN_SHOP_FREE_GEMS_CD = 573,
		UI_POPUP_SUBSCRIBE_SUBSCRIBE_INFO_IOS = 574,
		UI_POPUP_SUBSCRIBE_BUTTON_TRIAL_IOS = 575,
		UI_POPUP_RATE_CONTENT_IOS = 576,
		UI_POPUP_SUBSCRIBE_BUTTON_PURCHASED = 577,
		UI_POPUP_NEWUPDATE_TITLE = 578,
		UI_POPUP_NEWUPDATE_EXPLAIN = 579,
		UI_POPUP_NEWUPDATE_BUTTON_UPDATEB = 580,
		UI_POPUP_NEWUPDATE_REWARD_TITLE = 581,
		UI_POPUP_NEWUPDATE_REWARD_EXPLAIN = 582,
		UI_POPUP_NEWUPDATE_BUTTON_REWARD = 583,
		UI_POPUP_WATCH_VIDEO_REWARD = 584,
		UI_POPUP_CELEBRATION_DOUBLE = 585,
		UI_POPUP_CELEBRATION_DOUBLE_DESCRIPT = 586,
		UI_POPUP_SETTING_CONNECT = 587,
		UI_POPUP_SETTING_LGINED = 588,
		UI_CELEBRATION_GE = 589,
		UI_POPUP_TRY_HOVERBOARD_TITLE_H = 590,
		UI_POPUP_TRY_HOVERBOARD_TITLE_R = 591,
		UI_POPUP_TRY_HOVERBOARD_TIME_D = 592,
		UI_POPUP_TRY_HOVERBOARD_TIME_H = 593,
		UI_POPUP_TRY_HOVERBOARD_SKILL_TITLE_H = 594,
		UI_POPUP_TRY_HOVERBOARD_SKILL_TITLE_R = 595,
		UI_POPUP_TRY_HOVERBOARD_SKILL1_H = 596,
		UI_POPUP_TRY_HOVERBOARD_SKILL2_H = 597,
		UI_POPUP_TRY_HOVERBOARD_SKILL1_R = 598,
		UI_POPUP_TRY_HOVERBOARD_FREE = 599,
		UI_POPUP_TRY_HOVERBOARD_BOTTOM_INFO = 600,
		UI_POPUP_TRY_HOVERBOARD_FILL_TITLE = 601,
		UI_POPUP_TRY_HOVERBOARD_FILL_H_CONTENT1 = 602,
		UI_POPUP_TRY_HOVERBOARD_FILL_H_CONTENT2 = 603,
		UI_POPUP_TRY_HOVERBOARD_FILL_H_CONTENT3 = 604,
		UI_POPUP_TRY_HOVERBOARD_FILL_R_CONTENT1 = 605,
		UI_POPUP_TRY_HOVERBOARD_FILL_R_CONTENT2 = 606,
		UI_POPUP_TRY_HOVERBOARD_FILL_R_CONTENT3 = 607,
		UI_SCREEN_PAUSE_UI_TITLE = 608,
		UI_POPUP_ONLINE_REWARD_TITLE = 609,
		UI_POPUP_ONLINE_REWARD_ONLINE_TIME = 610,
		UI_POPUP_ONLINE_REWARD_INTERVAL_TIME = 611,
		UI_POPUP_ONLINE_REWARD_BUTTON_GET = 612,
		UI_POPUP_SUBSCRIBE_TRIAL_LABEL = 613,
		TASK_POPUP_LABEL0 = 614,
		TASK_POPUP_LOCK_LABEL = 615,
		TASK_POPUP_UNLOCK_LABEL = 616,
		TASK_POPUP_NEXT = 617,
		UNLOCK_NEWSCENE_POPUP_TITLE = 618,
		UNLOCK_NEWSCENE_POPUP_SCENE_NAME = 619,
		UNLOCK_NEWSCENE_POPUP_SCENE_DESCRIP = 620,
		ATLAS_UI_TASK_BUTTON = 621,
		SCENE_BANGKOK = 622,
		SCENE_NEWYORK = 623,
		SCENE_PARIS = 624,
		GAMEOVER_VIPTIP = 625,
		FRANK_PHARAOH_THEME_TITLE = 626,
		FRANK_PHARAOH_THEME_UNLOCK_DESCRIPTION = 627,
		ListTitle_label_01 = 628,
		ListTitle_label_02 = 629,
		ListTitle_label_03 = 630,
		ListTitle_label_04 = 631,
		ListTitle_label_05 = 632,
		UI_POPUP_PLAYER_LEVEL_INFO = 633,
		UI_POPUP_PLAYER_LEVEL_SCORE_MULTIPLE = 634,
		UI_POPUP_LEVEL_UP_TITILE = 635,
		UI_POPUP_LEVEL_UP_YOU_UNLOCK = 636,
		UI_POPUP_LEVEL_UP_NEW = 637,
		UI_POPUP_LEVEL_UP_ROLE = 638,
		UI_POPUP_LEVEL_UP_MULTIPLE = 639,
		UI_POPUP_LEVEL_UP_SCORE = 640,
		UI_POPUP_LEVEL_UP_SCREEN = 641,
		BOX_NAME_GOLD = 642,
		BOX_NAME_SLIVER = 643,
		BOX_NAME_NORMAL = 644,
		BOX_NAME_FREE = 645,
		BOX_NAME_VIEW = 646,
		BOX_NAME_GAME = 647,
		UI_SCREEN_CHARACTER_SELECT_BUTTON_LEVELLOCK = 648,
		SHOP_BOX_LABEL_FERR = 649,
		BOX_PREVIEW_POPUP_REWARD_LABEL = 650,
		BOX_OPEN_SHOW_ALL_REWARD_BTN = 651,
		BOX_OPEN_SKIP = 652,
		UI_POPUP_LEVEL_UP_HELMET = 653,
		UPGRADE_BTN_LAB = 654,
		UPGRADE_DESCRIBE_JETPACK = 655,
		UPGRADE_DESCRIBE_SUPER_SENAKERS = 656,
		UPGRADE_DESCRIBE_MAGENTE = 657,
		UPGRADE_DESCRIBE_MULTIPLIER = 658,
		UI_CHEST_REWARD_SEXP = 659,
		UI_CHEST_REWARD_LEXP = 660,
		UI_CHEST_REWARD_MEXP = 661,
		UI_POPUP_SUBSCRIBE_CONTENT_MONK_CAPITAL = 662,
		UI_LAB_DOUBLE_CAPITAL = 663,
		UI_LAB_COINS_CAPITAL = 664,
		UI_LAB_GEMS_CAPITAL = 665,
		UI_LAB_VIP_BADGE_CAPITAL = 666,
		UI_LAB_RANK_CAPITAL = 667,
		UI_LAB_TRIAL_CAPITAL = 668,
		UI_LAB_VIP_TIME_LABEL = 669,
		UI_BEGINNERS_PACK_CAPITAL = 670,
		UI_SHOP_BUY_TIMES_LABEL = 671,
		UI_SHOP_DISCOUNT_LABEL = 672,
		UI_LAB_REMOVE_CAPITAL = 673,
		UI_LAB_PRIVILEGE_CAPITAL = 674,
		UI_LAB_PROPS_CAPITAL = 675,
		UI_LAB_ROLE_CAPITAL = 676,
		EXPLORER_THEME_UNLOCK_DESCRIPTION = 677,
		EXPLORER_THEME1_THEME_TITLE = 678,
		UI_POPUP_PLAYER_LEVEL_EXP_DESCRIPTION = 679,
		RANK_SCREEN_LV_LABEL = 680,
		NOT_ENOUGH_UNLOCK_TIP = 681,
		TASK_POPUP_REFRESH_MISSION = 682,
		TASK_POPUP_NEXT_MISSION_IN = 683,
		UI_POPUP_NEWVERSIONTIP_DESCRIPTION = 684,
		UI_POPUP_NEWVERSIONTIP_TITLE = 685,
		UI_STARTER_PACK_CAPITAL = 686,
		UI_POPUP_SUBSCRIBE_BUTTON_TRIAL_TIP_IOS = 687,
		UI_POPUP_DAILY_AD_DOUBLE_TIP = 688,
		UI_POPUP_HELMET_AD_GET_TIP = 689,
		UI_POPUP_LOTTERY_AD_SPIN_TIP = 690,
		UI_POPUP_SAVE_ME_AD_REVIVE_TIP = 691,
		UI_POPUP_TASK_AD_MORE_MISSION_TIP = 692,
		UI_SCREEN_GAME_OVER_AD_MORE_TIP = 693,
		UI_SCREEN_GAME_OVER_AD_TRY_TIP = 694,
		UI_POPUP_SETTING_LGIN = 695,
		UI_POPUP_SETTING_LOOK = 696,
		PURCHASE_COINS_ONE_NO_INTERNET_NO_BILLING = 697,
		PURCHASE_COINS_MULTIPLE_NO_INTERNET_NO_BILLING = 698,
		PURCHASE_KEYS_ONE_NO_INTERNET_NO_BILLING = 699,
		PURCHASE_KEYS_MULTIPLE_NO_INTERNET_NO_BILLING = 700,
		UI_TOP_TIP_NO_ADS = 701,
		UI_TOP_TIP_HAD_SELECT = 702,
		UI_POPUP_VIDEO_LOADING = 703,
		UI_POPUP_GET_FREE_ROLE_TITLE1 = 704,
		UI_POPUP_GET_FREE_ROLE_TITLE2 = 705,
		UI_POPUP_GET_FREE_ROLE_BUTTON = 706,
		UI_SCREEN_CHARACTER_UNLOCK_DAILY = 707,
		UI_TOP_TIP__CHARACTER_UNLOCK_DAILY_4 = 708,
		UI_TOP_TIP__CHARACTER_UNLOCK_DAILY_7 = 709,
		UI_SCREEN_SHOP__FREE_COINS_GEMS = 710,
		UPGRADES_SHIELD = 711,
		UPGRADES_SHIELD_DESCRIPTION = 712,
		UPGRADES_SPRINT = 713,
		UPGRADES_SPRINT_DESCRIPTION = 714,
		UI_POPUP_RATE_BUTTON_NO = 715,
		UI_POPUP_RATE_SEND = 716,
		UI_POPUP_RATE_EMAIL = 717,
		UI_POPUP_RATE_SUGGESTION = 718,
		UI_POPUP_RATE_EMAIL_TITLE = 719,
		UI_POPUP_RATE_MESSAGE = 720,
		UI_POPUP_RATING_MESSAGE = 721,
		VIP_PRIVILEGE_LABEL = 722,
		BUTTON_LABEL_TASK = 723,
		BUTTON_LABEL_LUCK = 724,
		BUTTON_LABEL_RANK = 725,
		BUTTON_LABEL_ACHIEVEMENT = 726,
		BUTTON_LABEL_FREE = 727,
		BUTTON_LABEL_BOX = 728,
		BUTTON_LABEL_ROLE = 729,
		BUTTON_LABEL_GO = 730,
		MINE_TUTOTIAL_LABEL = 731,
		REMOVEAD_POPUP_TITLE = 732,
		REMOVEAD_POPUP_DECRIPE = 733,
		REMOVEAD_POPUP_BUTTON = 734,
		BOX_AGAIN_BUTTON = 735,
		Map_ComeSoon = 736,
		Map_unlock = 737,
		FrontUI_map = 738,
		Map_go = 739,
		Sence_name01 = 740,
		Sence_name02 = 741,
		UI_MYSTERY_BOX_EVA_S = 742,
		CHARACTERS_EVA = 743,
		UPGRADES_TITLE_COIN = 744,
		UPGRADES_TITLE_SCORE = 745,
		UPGRADES_TITLE_POWER = 746,
		UPGRADES_TITLE_GEM = 747,
		UPGRADES_DESCRIPTION_SCORE = 748,
		UPGRADES_DESCRIPTION_COIN = 749,
		UPGRADES_DESCRIPTION_POWER = 750,
		UPGRADES_DESCRIPTION_GEM = 751,
		TASK_METERS_DESCRIPTION = 752,
		TASK_METERS_DESCRIPTION_SINGLE = 753,
		TASK_METER_SCENE01_DESCRIPTION = 754,
		TASK_METER_SCENE02_DESCRIPTION = 755,
		TASK_METERNODIE_DESCRIPTION = 756,
		TASK_METERNOPOWER_DESCRIPTION = 757,
		TASK_PROPLEVELS_DESCRIPTION = 758,
		TASK_PROPTIME_DESCRIPTION = 759,
		TASK_PROPTIME_ULTRASHORT_DESCRIPTION = 760,
		TASK_USESKILL_DESCRIPTION = 761,
		TASK_USESKILL_ULTRASHORT_DESCRIPTION = 762,
		TASK_UNLOCKSKIN_DESCRIPTION = 763,
		TASK_METERS_ANNA_DESCRIPTION = 764,
		TASK_METERS_CAESAR_DESCRIPTION = 765,
		TASK_METERS_DARCY_DESCRIPTION = 766,
		TASK_METERS_EXPLOER_DESCRIPTION = 767,
		TASK_METERS_FRANK_DESCRIPTION = 768,
		TASK_METERS_JACK_DESCRIPTION = 769,
		TASK_METERS_NIJIA_DESCRIPTION = 770,
		TASK_METERS_PIA_DESCRIPTION = 771,
		TASK_METERS_PRINCESS_DESCRIPTION = 772,
		TASK_METERS_SLICK_DESCRIPTION = 773,
		TASK_METERS_SPIKE_DESCRIPTION = 774,
		CHARACTERS_CAESAR = 775,
		CHARACTERS_JACK = 776,
		CHARACTERS_PIA = 777,
		CHARACTERS_ANNA = 778,
		TASK_TITLE01 = 779,
		TASK_TITLE02 = 780,
		TASK_TITLE03 = 781,
		GAMEOVER_TITLE = 782,
		AD_DOUBLE = 783,
		SKILL_CONS = 784,
		SKILL_SCORE = 785,
		SKILL_GEM = 786,
		SKILL_SPRINT_DESCRIPTION = 787,
		SKILL_SHIELD_DESCRIPTION = 788,
		SKILL_MAGNET_DESCRIPTION = 789,
		SKILL_COIN_DESCRIPTION = 790,
		SKILL_SCORE_DESCRIPTION = 791,
		SKILL_GEM_DESCRIPTION = 792,
		SKILL_TIP_01 = 793,
		SKILL_TIP_02 = 794,
		SKILL_POPUP_TITLE = 795,
		BOX_REWARD_TITLE_COIN = 796,
		BOX_REWARD_TITLE_GEM = 797,
		BOX_REWARD_TITLE_PROP = 798,
		BOX_REWARD_TITLE_TOKEN = 799,
		BOX_TOKEN_NUMBER = 800,
		BOX_TOKEN_DESCRIPTION = 801,
		SKILL_USE = 802,
		SKILL_USED = 803,
		UNLOCK_LV = 804,
		TASK_SHIELD_SINGLERUN_DESCRIPTION = 805,
		TASK_SHIELD_DESCRIPTION = 806,
		INGAME_METER = 807,
		UNLOCK_INITIAL_ROLE = 808,
		LEVEL = 809,
		USE_POWER_TIP = 810,
		SCENCE_UNLOCKED = 811,
		SCENCE_LOCK = 812,
		DISTANCE_LAB = 813,
		LOADING_TIP01 = 814,
		LOADING_TIP02 = 815,
		LOADING_TIP03 = 816,
		UI_POPUP_TRY_HOVERBOARD_TIME_M = 817,
		UI_POPUP_TRY_HOVERBOARD_TIME_S = 818,
		WEEKLY_END = 819,
		WEEKLY_TASK_01 = 820,
		WEEKLY_TASK_02 = 821,
		TRY_TIP_POPUP_TITLE = 822,
		TRY_TIP_POPUP_DES = 823,
		TRY_TIP_POPUP_BUTTON = 824,
		WEEKLY_TITLE = 825,
		TASK_BACK = 826,
		GLOBE_TITLE01 = 827,
		GLOBE_TASK_DES = 828,
		RATING_01 = 829,
		RATING_02 = 830,
		RATING_03 = 831,
		RATING_04 = 832,
		RATING_SUGGEST_TITLE = 833,
		RATING_TITLE = 834,
		RATING_DES = 835,
		TASK_MISSION = 836,
		TASK_WEEKLY = 837,
		TASK_GLOBAL = 838,
		GLOBAL_COMPLET = 839,
		WEEKLY_COMPLET = 840,
		VERSION_LAB = 841,
		WEEKLY_TASK_04 = 842,
		WEEKLY_TASK_05 = 843,
		GLOBAL_TIPS = 844,
		GLOBAL_TITLE = 845,
		TAKE_LOOK = 846,
		TASK_TIPS_01 = 847,
		TASK_TIPS_02 = 848,
		VIP_ROLE = 849,
		VIP_REWARD01 = 850,
		VIP_REWARD04 = 851,
		VIP_CLIME = 852,
		CHARACTERS_EILY = 853,
		GIFT_DES = 854,
		GIFT_TIME = 855,
		AD_TIMES = 856,
		WEEKLY_TASK_06 = 857,
		CHARACTER_BUFF_COIN = 858,
		PUZZLE_PROGRESE = 859,
		GAMEOVER_LOTTERY_BTN = 860,
		PUZZLE_DES = 861,
		PUZZLE_SKILL_TITLE = 862,
		WEEKLY_UPDATE = 863,
		LOTTERY_AD_TIP = 864,
		GIFT_DOUBLE_COIN = 865,
		NEW_SKILL_TIPS = 866,
		RANK_TOP_REWARD_01 = 867,
		RANK_TOP_REWARD_02 = 868,
		RANK_TOP_REWARD_03 = 869,
		NEW_SCENE = 870,
		SKILL_S_SPRINT_DESCRIPTION = 871,
		PASSIVE_SPRINT_UP = 872,
		PASSIVE_MAGNET_UP = 873,
		PASSIVE_SCORE_BONUS = 874,
		PASSIVE_SHIELD_UP = 875,
		PASSIVE_DOUBLE_UP = 876,
		PASSIVE_MULTIPLE_UP = 877,
		PASSIVE_SUPER_SHIELD = 878,
		PASSIVE_SUPER_SPRINT = 879,
		PASSIVE_DISTANCE_BOUNUS = 880,
		PASSIVE_MAGNETIC_FORCE = 881,
		PASSIVE_GUARD = 882,
		PASSIVE_FRANTIC = 883,
		PASSIVE_LUCKY = 884,
		SKILL_SPUER_SPRINT = 885,
		WEEKLY_ICON_LAB = 886,
		ROLE_GIFT_EILY = 887,
		ROLE_BUFF = 888,
		GIFT_LAB = 889,
		CHARACTERS_KAREENA = 890,
		CHARACTERS_SEVEN = 891,
		HITS_LAB = 892,
		CHARACTERS_SACHIN = 893,
		SHARE_BTN = 894
	}
}

namespace Kiloo.Common
{
	public static class FileUtil // TypeDefIndex: 4422
	{
		// Nested types
		[CompilerGenerated] // 0x00514D10-0x00514D20
		private sealed class __c__DisplayClass1_0 // TypeDefIndex: 4423
		{
			// Fields
			public bool slotsOnly; // 0x10
	
			// Constructors
			public __c__DisplayClass1_0(); // 0x006EFA78-0x006EFA80
		}
	
		[CompilerGenerated] // 0x00514D20-0x00514D30
		private sealed class __c__DisplayClass1_1 // TypeDefIndex: 4424
		{
			// Fields
			public string fileName; // 0x10
			public __c__DisplayClass1_0 CS___8__locals1; // 0x18
	
			// Constructors
			public __c__DisplayClass1_1(); // 0x006EFA80-0x006EFA88
	
			// Methods
			internal bool _GetFilesForPath_b__0(FileInfo file); // 0x006F14C4-0x006F1548
		}
	
		[Serializable]
		[CompilerGenerated] // 0x00514D30-0x00514D40
		private sealed class __c // TypeDefIndex: 4425
		{
			// Fields
			public static readonly __c __9; // 0x00
			public static Comparison<FileInfo> __9__1_1; // 0x08
			public static Predicate<FileInfo> __9__5_0; // 0x10
			public static Comparison<FileInfo> __9__5_1; // 0x18
	
			// Constructors
			static __c(); // 0x006F1378-0x006F13DC
			public __c(); // 0x006F13DC-0x006F13E4
	
			// Methods
			internal int _GetFilesForPath_b__1_1(FileInfo a, FileInfo b); // 0x006F13E4-0x006F1440
			internal bool _Load_b__5_0(FileInfo file); // 0x006F1440-0x006F1468
			internal int _Load_b__5_1(FileInfo a, FileInfo b); // 0x006F1468-0x006F14C4
		}
	
		// Methods
		public static bool ArraysAreEqual<T>(T[] a, T[] b);
		public static FileInfo[] GetFilesForPath(string path, bool slotsOnly = false /* Metadata: 0x001F7797 */); // 0x006EF7CC-0x006EFA78
		public static DateTime GetLastWriteTimeUtc(FileInfo fileInfo); // 0x006EFA88-0x006EFAA0
		private static int GetMostRecentSlot(string path, bool fixTimestamps); // 0x006EFAA0-0x006EFCC0
		private static int GetSlotForPath(string path); // 0x006EFCC0-0x006EFD84
		public static byte[] Load(string path, string secret, string alternatePath, bool useLastModifiedPathIfNoSlots = false /* Metadata: 0x001F7798 */); // 0x006EFD84-0x006F01FC
		public static byte[] ReadAllBytes(string filename); // 0x006F055C-0x006F0624
		public static Dictionary<E, int> ReadEnumIntDictionary<E>(BinaryReader reader);
		public static Dictionary<E, string> ReadEnumStringDictionary<E>(BinaryReader reader);
		public static Dictionary<string, string> ReadStringStringDictionary(BinaryReader reader); // 0x006F0710-0x006F0818
		public static void Save(string path, byte[] data, string secret, int offset = 0 /* Metadata: 0x001F7799 */, int length = -1 /* Metadata: 0x001F779D */, int redundancy = 0 /* Metadata: 0x001F77A1 */, int slots = 0 /* Metadata: 0x001F77A5 */, string alternatePath = "" /* Metadata: 0x001F77A9 */, int alternateRedundancy = 0 /* Metadata: 0x001F77AD */, int alternateSlots = 0 /* Metadata: 0x001F77B1 */); // 0x006F0818-0x006F0F80
		public static void SetLastWriteTimeUtc(FileInfo fileInfo, DateTime time); // 0x006F0F80-0x006F0F98
		private static byte[] TryLoadFile(string path, byte[] secretBytes); // 0x006F01FC-0x006F055C
		public static void WriteAllBytes(string filename, byte[] bytes); // 0x006F0F98-0x006F1048
		public static void WriteEnumIntDictionary<E>(BinaryWriter writer, IDictionary<E, int> dict);
		public static void WriteEnumStringDictionary<E>(BinaryWriter writer, IDictionary<E, string> dict);
		public static void WriteStringStringDictionary(BinaryWriter writer, IDictionary<string, string> dict); // 0x006F1048-0x006F1378
	
		// Extension methods
		public static void ReadFully(this Stream s, byte[] buffer); // 0x006F0624-0x006F0640
		public static void ReadFully(this Stream s, byte[] buffer, int offset, int count); // 0x006F0640-0x006F0710
	}
}

namespace Ivy.Net
{
	public static class AesHelper // TypeDefIndex: 4426
	{
		// Fields
		private static readonly byte[] IvBytes; // 0x00
	
		// Constructors
		static AesHelper(); // 0x006EC784-0x006EC800
	
		// Methods
		public static string EncodeParams(string data); // 0x006EBF28-0x006EBFB8
		public static string DecodeParams(string data); // 0x006EC2E0-0x006EC374
		public static string Encrypt(byte[] datas, string key); // 0x006EC100-0x006EC2E0
		public static byte[] Decrypt(string str, string key); // 0x006EC374-0x006EC554
		public static string Key(); // 0x006EBFB8-0x006EC100
		private static string GetSignatureSHA1Hash(); // 0x006EC554-0x006EC59C
		private static string GetSHAHash(byte[] bytedata); // 0x006EC59C-0x006EC784
	}
}

namespace Network
{
	public class Cache : MonoBehaviour // TypeDefIndex: 4427
	{
		// Fields
		private static Cache _instance; // 0x00
		private const string allrank = "allRank"; // Metadata: 0x001F77B5
		private const string aurun = "VipRun"; // Metadata: 0x001F77C0
	
		// Properties
		public static Cache Instance { get; } // 0x00A5341C-0x00A53500 
		public static bool IsCacheAllRank { get; set; } // 0x00A53500-0x00A5355C 0x00A5355C-0x00A535BC
		public static bool IsCacheVipRank { get; set; } // 0x00A535BC-0x00A53618 0x00A53618-0x00A53678
	
		// Nested types
		[CompilerGenerated] // 0x00514D40-0x00514D50
		private sealed class _Read_d__15 : IEnumerator<object> // TypeDefIndex: 4428
		{
			// Fields
			private int __1__state; // 0x10
			private object __2__current; // 0x18
			public Cache __4__this; // 0x20
			public string fileName; // 0x28
			public Action<string> onComplete; // 0x30
			private string _persistentPath_5__2; // 0x38
			private WWW _www_5__3; // 0x40
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005286D4-0x005286E4 */ get; } // 0x00A53E54-0x00A53E5C 
			object IEnumerator.Current { [DebuggerHidden] /* 0x005286F4-0x00528704 */ get; } // 0x00A53EC0-0x00A53EC8 
	
			// Constructors
			[DebuggerHidden] // 0x005286B4-0x005286C4
			public _Read_d__15(int __1__state); // 0x00A539D8-0x00A53A04
	
			// Methods
			[DebuggerHidden] // 0x005286C4-0x005286D4
			void IDisposable.Dispose(); // 0x00A53C54-0x00A53C58
			private bool MoveNext(); // 0x00A53C58-0x00A53E54
			[DebuggerHidden] // 0x005286E4-0x005286F4
			void IEnumerator.Reset(); // 0x00A53E5C-0x00A53EC0
		}
	
		// Constructors
		public Cache(); // 0x00A53C4C-0x00A53C54
	
		// Methods
		public void ReadAllRank(Action<string> onComplete); // 0x00A53678-0x00A536E8
		public void ReadVIPRun(Action<string> onComplete); // 0x00A53770-0x00A537E0
		public void WriteAllRank(string data); // 0x00A537E0-0x00A53884
		public void WriteVIPRun(string data); // 0x00A53934-0x00A539D8
		[IteratorStateMachine] // 0x00524B10-0x00524B74
		private IEnumerator Read(string fileName, Action<string> onComplete); // 0x00A536E8-0x00A53770
		private void Save(string fileName, string data); // 0x00A53884-0x00A53934
		private string GetPersistentPath(string file); // 0x00A53A04-0x00A53BDC
		private string GetStreamingAssetsPathForWWW(string fileName); // 0x00A53BDC-0x00A53C4C
	}

	public class FacebookManger : MonoBehaviour // TypeDefIndex: 4429
	{
		// Fields
		private static FacebookManger _instance; // 0x00
		public bool facebookHasLogin; // 0x18
		public Action<bool> OnFacebookLoginResult; // 0x20
		public List<FaceBookPerson> friendsList; // 0x28
		public FaceBookPerson me; // 0x30
	
		// Properties
		public static FacebookManger Instance { get; } // 0x00A54D00-0x00A54DE4 
	
		// Constructors
		public FacebookManger(); // 0x00A55F14-0x00A55F1C
	
		// Methods
		public void URL(); // 0x00A54DE4-0x00A54E30
		public void LoginFacebook(); // 0x00A54E30-0x00A55050
		private void OnLoginFacebook(RiseSdk.SnsEventType type, int id); // 0x00A55050-0x00A55238
		private void GetFriends(); // 0x00A55238-0x00A55654
		public void Me(); // 0x00A55654-0x00A55988
		private void OnMeComplete(bool result, ImageDownloader loader); // 0x00A55B8C-0x00A55B90
		public string FriendsIds(); // 0x00A55B90-0x00A55D0C
		public string GetNameAccrodingID(string id); // 0x00A55D0C-0x00A55E10
		public string GetPictureAccrodingID(string id); // 0x00A55E10-0x00A55F14
	}

	public class FaceBookPerson // TypeDefIndex: 4430
	{
		// Fields
		public string id; // 0x10
		public string name; // 0x18
		public string picture; // 0x20
	
		// Constructors
		public FaceBookPerson(); // 0x00A54BE4-0x00A54BEC
	}

	public class KeyJsonValueRequest // TypeDefIndex: 4431
	{
		// Fields
		private static KeyJsonValueRequest _instance; // 0x00
		private Dictionary<string, JsonData> jsonKeyValueList; // 0x10
	
		// Properties
		public static KeyJsonValueRequest Instance { get; } // 0x00A56260-0x00A562DC 
	
		// Nested types
		public class JsonData // TypeDefIndex: 4432
		{
			// Fields
			public string userId; // 0x10
			public string key; // 0x18
			public string json; // 0x20
			public Action<int, object> onRespondResult; // 0x28
	
			// Constructors
			public JsonData(string userId, string key, string json, Action<int, object> onSuccess); // 0x00A56A2C-0x00A56A78
	
			// Methods
			public void UploadDataListener(string s); // 0x00A5769C-0x00A57A34
			public void GetDataListener(string s); // 0x00A57A34-0x00A57C68
			public void OnComplete(string data); // 0x00A581A8-0x00A581B0
			private void Handle(string data, bool cache = false /* Metadata: 0x001F77CA */); // 0x00A57C68-0x00A581A8
		}
	
		// Constructors
		private KeyJsonValueRequest(); // 0x00A569B8-0x00A56A2C
	
		// Methods
		public void UploadJsonData(string userId, string key, string json, Action<int, object> handle = null); // 0x00A56800-0x00A56998
		public void GetJsonData(string userId, string key, string jsonKey, Action<int, object> handle = null); // 0x00A56F80-0x00A57118
		public void GetAllJsonData(string userId, string key, Action<int, object> handle = null); // 0x00A56314-0x00A5649C
	}

	public class CountryCode : StringKeyValue // TypeDefIndex: 4433
	{
		// Fields
		public static string defaultValue; // 0x00
		private const string PlayerPrefsKey = "Network_CountryCode_"; // Metadata: 0x001F77CB
	
		// Properties
		public override string Value { get; protected set; } // 0x00A54AB8-0x00A54B28 0x00A54B28-0x00A54B2C
	
		// Constructors
		public CountryCode(string key); // 0x00A53EC8-0x00A54024
		static CountryCode(); // 0x00A54B88-0x00A54BE4
	
		// Methods
		protected override void UploadWithLocalValueByExpire(); // 0x00A541A8-0x00A5424C
		public void RequestGetCountryCode(); // 0x00A544B8-0x00A5455C
		private void GetCountryCodeListener(string s); // 0x00A5455C-0x00A5480C
		public override void OnValueChange(); // 0x00A5490C-0x00A54940
		public override void UploadWithLocalValueWhenOutofExpire(); // 0x00A54A14-0x00A54AB8
	}

	public class FacebookID : StringKeyValue // TypeDefIndex: 4434
	{
		// Fields
		private const string PlayerPrefsKey = "Network_FacebookID_"; // Metadata: 0x001F77E3
	
		// Constructors
		public FacebookID(string key, string value); // 0x00A54BEC-0x00A54D00
	}

	public abstract class KeyJsonValue // TypeDefIndex: 4435
	{
		// Fields
		protected string _key; // 0x10
		protected SynchroniseRule _rule; // 0x18
		public Action onValueChange; // 0x20
	
		// Properties
		public SynchroniseRule rule { get; } // 0x00A569B0-0x00A569B8 
	
		// Constructors
		public KeyJsonValue(); // 0x00A55F1C-0x00A55F90
	
		// Methods
		public virtual void Reset(); // 0x00A55F90-0x00A55FAC
		public void GetJsonData(); // 0x00A55FAC-0x00A560B8
		private void GetJsonDataCallback(int status, object obj); // 0x00A5649C-0x00A566D0
		protected virtual void Parse(object obj); // 0x00A566D0-0x00A566D4
		protected virtual string ToJson(); // 0x00A566D4-0x00A566DC
		public void UploadJsonData(); // 0x00A566DC-0x00A5670C
		private void UploadJson(string json); // 0x00A5670C-0x00A56800
		protected virtual void UploadCallback(int status, object obj); // 0x00A56998-0x00A5699C
		protected virtual void OnValueChange(); // 0x00A5699C-0x00A569B0
	}

	public class Medals : KeyJsonValue // TypeDefIndex: 4436
	{
		// Fields
		private const string Format = "{{\"playerName\":\"{0}\",\"country\":\"{1}\",\"playerLvl\":\"{2}\",\"subscription\":\"{3}\",\"picturlurl\":\"{4}\",\"facebookID\":\"{5}\"}}"; // Metadata: 0x001F77FA
		public string playerName; // 0x28
		public string countryCode; // 0x30
		public string playerLvl; // 0x38
		public string subscription; // 0x40
		public string picturlurl; // 0x48
		public string facebookID; // 0x50
	
		// Constructors
		public Medals(); // 0x00A581B0-0x00A5820C
	
		// Methods
		protected override void Parse(object obj); // 0x00A5820C-0x00A5823C
		protected override void UploadCallback(int status, object obj); // 0x00A5824C-0x00A58280
		protected override string ToJson(); // 0x00A58280-0x00A58418
	}

	public class PictureUrl : StringKeyValue // TypeDefIndex: 4437
	{
		// Fields
		public Action onDownloadImageSuccess; // 0x48
		private const string PlayerPrefsKey = "Network_PictureUrl_"; // Metadata: 0x001F7871
	
		// Properties
		public Texture2D Image { get; } // 0x00A61D9C-0x00A61DD0 
	
		// Constructors
		public PictureUrl(string key); // 0x00A618F0-0x00A61A38
		public PictureUrl(string key, string value); // 0x00A61A38-0x00A61B74
	
		// Methods
		protected void DownloadImage(); // 0x00A61B74-0x00A61C84
		private void OnComplete(bool result, ImageDownloader loader); // 0x00A61C84-0x00A61D48
		public override void UploadWithLocalValueWhenOutofExpire(); // 0x00A61D5C-0x00A61D9C
	}

	public class PlayerName : StringKeyValue // TypeDefIndex: 4438
	{
		// Fields
		private const string PlayerPrefsKey = "Network_PlayerName_"; // Metadata: 0x001F7888
	
		// Properties
		public static string defaultValue { get; } // 0x00A620AC-0x00A62128 
	
		// Constructors
		public PlayerName(string key); // 0x00A62128-0x00A62204
		public PlayerName(string key, string value); // 0x00A62204-0x00A622D8
	
		// Methods
		public override void OnValueChange(); // 0x00A622D8-0x00A6230C
		public override void UploadWithLocalValueWhenOutofExpire(); // 0x00A62320-0x00A6236C
	}

	public class RankID // TypeDefIndex: 4439
	{
		// Fields
		private int _rankId; // 0x10
		private string _rankKey; // 0x18
		private string _date; // 0x20
		private string _key; // 0x28
		private const string PlayerPrefsKey = "Network_RankID_"; // Metadata: 0x001F789F
		private string _playerPrefsKey_rankTag; // 0x30
		private string _playerPrefsKey_rankID; // 0x38
		[CompilerGenerated] // 0x0051CAF0-0x0051CB00
		private SynchroniseRule _rule_k__BackingField; // 0x40
	
		// Properties
		public int rankID { get; private set; } // 0x00A6298C-0x00A62994 0x00A628B0-0x00A628C8
		public SynchroniseRule rule { [CompilerGenerated] /* 0x00524B74-0x00524B84 */ get; [CompilerGenerated] /* 0x00524B84-0x00524B94 */ private set; } // 0x00A62994-0x00A6299C 0x00A6299C-0x00A629A4
	
		// Constructors
		public RankID(string key, string rankTag); // 0x00A6236C-0x00A62524
	
		// Methods
		public void GetRankID(); // 0x00A62524-0x00A62630
		private void OnGetRankIDCallback(int status, object obj); // 0x00A627E4-0x00A628B0
		public void Synchronise(int rankId); // 0x00A628C8-0x00A62934
		private void OnValueChange(); // 0x00A62934-0x00A62978
	}

	public class RankIDFixed // TypeDefIndex: 4440
	{
		// Fields
		private int _rankId; // 0x10
		private string _rankKey; // 0x18
		private string _key; // 0x20
		private string _date; // 0x28
	
		// Properties
		public int rankID { get; private set; } // 0x00A62A90-0x00A62A98 0x00A62A48-0x00A62A60
	
		// Constructors
		public RankIDFixed(string key, string rankKey); // 0x00A629A4-0x00A629F8
	
		// Methods
		public void Synchronise(int rankId); // 0x00A629F8-0x00A62A48
		private void OnValueChange(); // 0x00A62A60-0x00A62A90
	}

	public class RankIDInFriends // TypeDefIndex: 4441
	{
		// Fields
		private int _rankId; // 0x10
		public Action onValueChange; // 0x18
	
		// Properties
		public int rankID { get; set; } // 0x00A62B14-0x00A62B1C 0x00A62AEC-0x00A62B14
	
		// Constructors
		public RankIDInFriends(); // 0x00A62A98-0x00A62AC4
	
		// Methods
		public void Synchronise(int rankId); // 0x00A62AC4-0x00A62AEC
	}

	public class Score // TypeDefIndex: 4442
	{
		// Fields
		private int _score; // 0x10
		private int _scoreTmp; // 0x14
		private string _rankKey; // 0x18
		private string _date; // 0x20
		private string _key; // 0x28
		private const string PlayerPrefsKey = "Network_Score_"; // Metadata: 0x001F78B2
		private string _playerPrefsKey_rankTag; // 0x30
		private string _playerPrefsKey_score; // 0x38
		[CompilerGenerated] // 0x0051CB00-0x0051CB10
		private SynchroniseRule _rule_k__BackingField; // 0x40
	
		// Properties
		public int score { get; private set; } // 0x00A6347C-0x00A63484 0x00A62FD8-0x00A62FF0
		public SynchroniseRule rule { [CompilerGenerated] /* 0x00524B94-0x00524BA4 */ get; [CompilerGenerated] /* 0x00524BA4-0x00524BB4 */ private set; } // 0x00A63484-0x00A6348C 0x00A6348C-0x00A63494
	
		// Constructors
		public Score(string key, string rankTag); // 0x00A62B1C-0x00A62CD0
	
		// Methods
		public void GetScore(); // 0x00A62CD0-0x00A62DDC
		private void OnGetScoreCallback(int status, object obj); // 0x00A62F10-0x00A62FD8
		public void UploadScore(int score); // 0x00A62FF0-0x00A63150
		private void OnUploadScoreCallback(int status, object obj); // 0x00A63288-0x00A633A0
		public void Synchronise(int score); // 0x00A633B8-0x00A63424
		private void OnValueChange(); // 0x00A63424-0x00A63468
	}

	public class ScoreFixed // TypeDefIndex: 4443
	{
		// Fields
		private int _score; // 0x10
		private int _scoreTmp; // 0x14
		private string _rankKey; // 0x18
		private string _key; // 0x20
		private string _date; // 0x28
		private string _playerPrefsKey; // 0x30
	
		// Properties
		public int score { get; private set; } // 0x00A63A54-0x00A63A5C 0x00A63724-0x00A6373C
	
		// Constructors
		public ScoreFixed(string key, string rankKey); // 0x00A63494-0x00A6356C
	
		// Methods
		public void GetScore(); // 0x00A6356C-0x00A6366C
		private void OnGetScoreCallback(int status, object obj); // 0x00A6366C-0x00A63724
		public void UploadScore(int score); // 0x00A6373C-0x00A63850
		private void OnUploadScoreCallback(int status, object obj); // 0x00A63998-0x00A639BC
		public void Synchronise(int score); // 0x00A639BC-0x00A63A10
		private void OnValueChange(); // 0x00A63A10-0x00A63A54
	}

	public class ServeTimeUpdate : MonoBehaviour // TypeDefIndex: 4444
	{
		// Fields
		public int _interval; // 0x18
		public int _max_interval; // 0x1C
		private int _factor; // 0x20
		private double _deltaTime; // 0x28
		private float _time; // 0x30
		private long _serverTime; // 0x38
		private bool _requestDatasAfter; // 0x40
		private DateTime _utcServerTime; // 0x48
		private static ServeTimeUpdate _instance; // 0x00
		[CompilerGenerated] // 0x0051CB10-0x0051CB20
		private string _RankWeekString_k__BackingField; // 0x50
		[CompilerGenerated] // 0x0051CB20-0x0051CB30
		private string _Date_k__BackingField; // 0x58
		[CompilerGenerated] // 0x0051CB30-0x0051CB40
		private bool _IsActive_k__BackingField; // 0x60
	
		// Properties
		public static ServeTimeUpdate Instance { get; } // 0x00A560F0-0x00A56250 
		public string RankWeekString { [CompilerGenerated] /* 0x00524BB4-0x00524BC4 */ get; [CompilerGenerated] /* 0x00524BC4-0x00524BD4 */ private set; } // 0x00A67778-0x00A67780 0x00A67780-0x00A67788
		public string Date { [CompilerGenerated] /* 0x00524BD4-0x00524BE4 */ get; [CompilerGenerated] /* 0x00524BE4-0x00524BF4 */ private set; } // 0x00A67788-0x00A67790 0x00A67790-0x00A67798
		public long ServerTime { get; } // 0x00A67798-0x00A677A0 
		public float time { get; } // 0x00A677A0-0x00A677A8 
		public bool IsActive { [CompilerGenerated] /* 0x00524BF4-0x00524C04 */ get; [CompilerGenerated] /* 0x00524C04-0x00524C14 */ set; } // 0x00A677A8-0x00A677B0 0x00A677B0-0x00A677BC
	
		// Constructors
		public ServeTimeUpdate(); // 0x00A677BC-0x00A677E8
	
		// Methods
		private void Awake(); // 0x00A67278-0x00A67348
		private void Start(); // 0x00A67348-0x00A6734C
		public void RequestServerTime(); // 0x00A6734C-0x00A67410
		private void GetServerTimeListener(string s); // 0x00A67410-0x00A675EC
		private bool CheckForNewCalc(); // 0x00A675EC-0x00A67628
		public bool ServerTimeValid(); // 0x00A56250-0x00A56260
		public bool ChechCanRequestDatas(); // 0x00A67628-0x00A67644
		public DateTime ServerDateTime(); // 0x00A67644-0x00A676D8
		private void Update(); // 0x00A676D8-0x00A67778
	}

	public abstract class StringKeyValue // TypeDefIndex: 4445
	{
		// Fields
		protected string _key; // 0x10
		protected string _value; // 0x18
		protected string _valueTmp; // 0x20
		protected string _playerPrefsKey; // 0x28
		protected SynchroniseRule _rule; // 0x30
		public Action onValueChange; // 0x38
		protected bool _inJson; // 0x40
	
		// Properties
		public virtual string Value { get; protected set; } // 0x00A699C0-0x00A699C8 0x00A54B2C-0x00A54B88
		public SynchroniseRule rule { get; } // 0x00A699C8-0x00A699D0 
	
		// Constructors
		public StringKeyValue(); // 0x00A54024-0x00A540A0
	
		// Methods
		public void GetStringValue(); // 0x00A540A0-0x00A541A8
		private void GetValueCallback(int status, object obj); // 0x00A69548-0x00A69838
		protected virtual void UploadWithLocalValueByExpire(); // 0x00A69838-0x00A6983C
		public void UploadKeyValue_Strict(string value); // 0x00A61F94-0x00A620AC
		public void UploadKeyValue_Force(string value); // 0x00A5480C-0x00A5490C
		protected virtual void UploadCallback(int status, object obj); // 0x00A69940-0x00A699BC
		public void Synchronise(string value); // 0x00A67B24-0x00A67B8C
		public virtual void UploadWithLocalValueWhenOutofExpire(); // 0x00A699BC-0x00A699C0
		public virtual void OnValueChange(); // 0x00A54940-0x00A54984
	}

	public class Subscription : StringKeyValue // TypeDefIndex: 4446
	{
		// Fields
		public const string defaultValue = "no"; // Metadata: 0x001F78C4
		private const string PlayerPrefsKey = "Network_Score_"; // Metadata: 0x001F78CA
	
		// Constructors
		public Subscription(string key); // 0x00A68108-0x00A681D8
	}

	public class PlayerLevel : StringKeyValue // TypeDefIndex: 4447
	{
		// Fields
		private const string PlayerPrefsKey = "Network_PlayerLevel_"; // Metadata: 0x001F78DC
	
		// Constructors
		public PlayerLevel(string key); // 0x00A61DD0-0x00A61F94
	}

	public class NetworkConnect // TypeDefIndex: 4448
	{
		// Fields
		private static NetworkConnect _instance; // 0x00
		private const string serverTimeUrl = "http://run.papermobi.com"; // Metadata: 0x001F79CC
		private const string expireTime = "25290000"; // Metadata: 0x001F79E8
		private const string debug = "1"; // Metadata: 0x001F79F4
		private const string v_api = "2"; // Metadata: 0x001F79F9
	
		// Properties
		public static NetworkConnect Instance { get; } // 0x00A56A78-0x00A56AF8 
		private string ServerUrl { get; } // 0x00A58420-0x00A58468 
		private int UrlTag { get; set; } // 0x00A58510-0x00A58560 0x00A58468-0x00A58510
	
		// Nested types
		public enum RequestCommand // TypeDefIndex: 4449
		{
			GetServerTime = 0,
			GetUniqueUid = 1,
			UploadStringData = 2,
			UploadJsonData = 3,
			GetStringData = 4,
			GetJsonData = 5,
			GetAllInnerJsonData = 6,
			UploadScoreFixedLength = 7,
			UploadScoreExpire = 8,
			GetRankListByUserRankID = 9,
			GetRankList = 10,
			GetUserScore = 11,
			GetUserRankIdx = 12,
			UploadFile = 13,
			GetFileUrl = 14,
			GetFriendRankList = 15,
			GetCountryCode = 16,
			DeleteUserInRank = 17,
			GetRankListWithScore = 18,
			GetCampaignInfo = 19,
			GetBattlePassInfo = 20,
			GetNoticeInfo = 21
		}
	
		// Constructors
		public NetworkConnect(); // 0x00A58418-0x00A58420
	
		// Methods
		public void ChangeUrl(); // 0x00A58560-0x00A58588
		public string Url(RequestCommand cmd); // 0x00A58588-0x00A58724
		public string Url_AES(RequestCommand cmd); // 0x00A58724-0x00A588C0
		public string Uid(); // 0x00A588C0-0x00A58A2C
		private string GetDeviceUid(); // 0x00A58A2C-0x00A58AB4
		private void UpdateDeviceUid(string uid); // 0x00A58AB4-0x00A58B08
		public string AppId(); // 0x00A58B08-0x00A58B7C
		private string Stamp(); // 0x00A58B7C-0x00A58BB8
		private string Token(string userId); // 0x00A58BB8-0x00A58D88
		private string Version(); // 0x00A58D88-0x00A58E28
		public Dictionary<string, string> GetUserLoginDict(PlatFormType platForm = PlatFormType.guest /* Metadata: 0x001F78F4 */, string platUid = null); // 0x00A58E28-0x00A58FB0
		public Dictionary<string, string> GetUserLoginDict_AES(PlatFormType platForm = PlatFormType.guest /* Metadata: 0x001F78F8 */, string platUid = null, int api = 0 /* Metadata: 0x001F78FC */); // 0x00A58FB0-0x00A59260
		public Dictionary<string, string> GetUploadStringDataDict(string userId, string key, string value, int expire = 0 /* Metadata: 0x001F7900 */); // 0x00A59260-0x00A5942C
		public Dictionary<string, string> GetUploadStringDataDict_AES(string userId, string key, string value, int expire = 0 /* Metadata: 0x001F7904 */, int api = 0 /* Metadata: 0x001F7908 */); // 0x00A5942C-0x00A5972C
		public Dictionary<string, string> GetRequestStringDataDict(string userId, string key); // 0x00A5972C-0x00A598A4
		public Dictionary<string, string> GetRequestStringDataDict_AES(string userId, string key, int api = 0 /* Metadata: 0x001F790C */); // 0x00A598A4-0x00A59B58
		public Dictionary<string, string> GetUploadJsonDataDict(string userId, string key, string json, int expire = 0 /* Metadata: 0x001F7910 */); // 0x00A59B58-0x00A59D24
		public Dictionary<string, string> GetUploadJsonDataDict_AES(string userId, string key, string json, int expire = 0 /* Metadata: 0x001F7914 */, int api = 0 /* Metadata: 0x001F7918 */); // 0x00A56AF8-0x00A56DF8
		public Dictionary<string, string> GetRequestJsonDataDict(string userId, string key, string jsonKey); // 0x00A59D24-0x00A59EBC
		public Dictionary<string, string> GetRequestJsonDataDict_AES(string userId, string key, string jsonKey, int api = 0 /* Metadata: 0x001F791C */); // 0x00A57118-0x00A573E8
		public Dictionary<string, string> GetRequestAllJsonDataDict(string userId, string key); // 0x00A59EBC-0x00A5A034
		public Dictionary<string, string> GetRequestAllJsonDataDict_AES(string userId, string key, int api = 0 /* Metadata: 0x001F7920 */); // 0x00A573E8-0x00A5769C
		public Dictionary<string, string> GetSubmitScoreFixedLengthDict(string userId, string rankTag, float score, int max_len = 0 /* Metadata: 0x001F7924 */); // 0x00A5A034-0x00A5A234
		public Dictionary<string, string> GetSubmitScoreFixedLengthDict_AES(string userId, string rankTag, float score, int max_len = 0 /* Metadata: 0x001F7928 */, int api = 0 /* Metadata: 0x001F792C */); // 0x00A5A234-0x00A5A57C
		public Dictionary<string, string> GetSubmitScoreFixedLengthDict_Server(string userId, string rankTag, RankType rankType, string date, int score, int max_len = 0 /* Metadata: 0x001F7930 */); // 0x00A5A57C-0x00A5A800
		public Dictionary<string, string> GetSubmitScoreFixedLengthDict_Server_AES(string userId, string rankTag, RankType rankType, string date, int score, int max_len = 0 /* Metadata: 0x001F7934 */, int api = 0 /* Metadata: 0x001F7938 */); // 0x00A5A800-0x00A5ABC8
		public Dictionary<string, string> GetSubmitScoreExpireDict(string userId, string rankTag, float score, int expire = 0 /* Metadata: 0x001F793C */); // 0x00A5AC48-0x00A5AE20
		public Dictionary<string, string> GetSubmitScoreExpireDict_AES(string userId, string rankTag, float score, int expire = 0 /* Metadata: 0x001F7940 */, int api = 0 /* Metadata: 0x001F7944 */); // 0x00A5AE20-0x00A5B138
		public Dictionary<string, string> GetSubmitScoreExpireDict_Server(string userId, string rankTag, RankType rankType, string date, int score, int expire = 0 /* Metadata: 0x001F7948 */); // 0x00A5B138-0x00A5B38C
		public Dictionary<string, string> GetSubmitScoreExpireDict_Server_AES(string userId, string rankTag, RankType rankType, string date, int score, int expire = 0 /* Metadata: 0x001F794C */, int api = 0 /* Metadata: 0x001F7950 */); // 0x00A5B38C-0x00A5B6CC
		public Dictionary<string, string> GetRequestRankListDict(string userId, string rankTag, RankOrder order, int rankCount = 100 /* Metadata: 0x001F7954 */); // 0x00A5B6CC-0x00A5B8D8
		public Dictionary<string, string> GetRequestRankListDict_AES(string userId, string rankTag, RankOrder order, int rankCount = 100 /* Metadata: 0x001F7958 */, int api = 0 /* Metadata: 0x001F795C */); // 0x00A5B8D8-0x00A5BC2C
		public Dictionary<string, string> GetRequestRankListDict_Server(string userId, string rankTag, RankType rankType, string date, RankOrder order, int rankCount = 100 /* Metadata: 0x001F7960 */); // 0x00A5BC2C-0x00A5BEBC
		public Dictionary<string, string> GetRequestRankListDict_Server_AES(string userId, string rankTag, RankType rankType, string date, RankOrder order, int rankCount = 100 /* Metadata: 0x001F7964 */, int api = 0 /* Metadata: 0x001F7968 */); // 0x00A5BEBC-0x00A5C290
		public Dictionary<string, string> GetRequestRankListAroundUserDict(string userId, string rankTag, int myRankIdxUpCount, int myRankIdxDownCount, RankOrder order); // 0x00A5C290-0x00A5C498
		public Dictionary<string, string> GetRequestRankListAroundUserDict_AES(string userId, string rankTag, int myRankIdxUpCount, int myRankIdxDownCount, RankOrder order, int api = 0 /* Metadata: 0x001F796C */); // 0x00A5C498-0x00A5C7E0
		public Dictionary<string, string> GetRequestRankListAroundUserDict_Server(string userId, string rankTag, RankType rankType, string date, int myRankIdxUpCount, int myRankIdxDownCount, RankOrder order); // 0x00A5C7E0-0x00A5CA70
		public Dictionary<string, string> GetRequestRankListAroundUserDict_Server_AES(string userId, string rankTag, RankType rankType, string date, int myRankIdxUpCount, int myRankIdxDownCount, RankOrder order, int api = 0 /* Metadata: 0x001F7970 */); // 0x00A5CA70-0x00A5CE44
		public Dictionary<string, string> GetRequestFriendRankListDict(string userId, string rankTag, RankOrder order, string platIds, PlatFormType platType); // 0x00A5CE44-0x00A5D078
		public Dictionary<string, string> GetRequestFriendRankListDict_AES(string userId, string rankTag, RankOrder order, string platIds, PlatFormType platType, int api = 0 /* Metadata: 0x001F7974 */); // 0x00A5D078-0x00A5D3E8
		public Dictionary<string, string> GetRequestFriendRankListDict_Server(string userId, string rankTag, RankType rankType, string date, RankOrder order, string platIds, PlatFormType platType); // 0x00A5D3E8-0x00A5D6A0
		public Dictionary<string, string> GetRequestFriendRankListDict_Server_AES(string userId, string rankTag, RankType rankType, string date, RankOrder order, string platIds, PlatFormType platType, int api = 0 /* Metadata: 0x001F7978 */); // 0x00A5D6A0-0x00A5DA9C
		public Dictionary<string, string> GetRequestRankListBetweenScoresDict(string userId, string rankTag, RankOrder order, int startScore, int endScore = 0 /* Metadata: 0x001F797C */, int num = 100 /* Metadata: 0x001F7980 */); // 0x00A5DA9C-0x00A5DD18
		public Dictionary<string, string> GetRequestRankListBetweenScoresDict_AES(string userId, string rankTag, RankOrder order, int startScore, int endScore = 0 /* Metadata: 0x001F7984 */, int num = 100 /* Metadata: 0x001F7988 */, int api = 0 /* Metadata: 0x001F798C */); // 0x00A5DD18-0x00A5E0D0
		public Dictionary<string, string> GetRequestRankListBetweenScoresDict_Server(string userId, string rankTag, RankType rankType, string date, RankOrder order, int startScore, int endScore = 0 /* Metadata: 0x001F7990 */, int num = 100 /* Metadata: 0x001F7994 */); // 0x00A5E0D0-0x00A5E3D0
		public Dictionary<string, string> GetRequestRankListBetweenScoresDict_Server_AES(string userId, string rankTag, RankType rankType, string date, RankOrder order, int startScore, int endScore = 0 /* Metadata: 0x001F7998 */, int num = 100 /* Metadata: 0x001F799C */, int api = 0 /* Metadata: 0x001F79A0 */); // 0x00A5E3D0-0x00A5E804
		public Dictionary<string, string> GetRequestBattlePassDataDict_Server_AES(); // 0x00A5E804-0x00A5E89C
		public Dictionary<string, string> GetRequestCollectionDataDict_Server_AES(); // 0x00A5E89C-0x00A5E958
		public Dictionary<string, string> GetRequestNoticeDataDict_Server_AES(); // 0x00A5E958-0x00A5EA10
		public string GetLanguageID(); // 0x00A5EA10-0x00A5EB14
		public Dictionary<string, string> GetRequestUserScoreDict(string userId, string rankTag); // 0x00A5EB14-0x00A5EC8C
		public Dictionary<string, string> GetRequestUserScoreDict_AES(string userId, string rankTag, int api = 0 /* Metadata: 0x001F79A4 */); // 0x00A5EC8C-0x00A5EF40
		public Dictionary<string, string> GetRequestUserScoreDict_Server(string userId, string rankTag, RankType rankType, string date); // 0x00A5EF40-0x00A5F140
		public Dictionary<string, string> GetRequestUserScoreDict_Server_AES(string userId, string rankTag, RankType rankType, string date, int api = 0 /* Metadata: 0x001F79A8 */); // 0x00A5F140-0x00A5F480
		public Dictionary<string, string> GetRequestUserRankIdxDict(string userId, string rankTag); // 0x00A5F480-0x00A5F5F8
		public Dictionary<string, string> GetRequestUserRankIdxDict_AES(string userId, string rankTag, int api = 0 /* Metadata: 0x001F79AC */); // 0x00A5F5F8-0x00A5F8AC
		public Dictionary<string, string> GetRequestUserRankIdxDict_Server(string userId, string rankTag, RankType rankType, string date); // 0x00A5F8AC-0x00A5FAAC
		public Dictionary<string, string> GetRequestUserRankIdxDict_Server_AES(string userId, string rankTag, RankType rankType, string date, int api = 0 /* Metadata: 0x001F79B0 */); // 0x00A5FAAC-0x00A5FDEC
		public Dictionary<string, string> GetUploadUserFileDict(string userId, string fileName, int expireSeconds, int expire = 0 /* Metadata: 0x001F79B4 */); // 0x00A5FDEC-0x00A5FFBC
		public Dictionary<string, string> GetUploadUserFileDict_AES(string userId, string fileName, int expireSeconds, int expire = 0 /* Metadata: 0x001F79B8 */, int api = 0 /* Metadata: 0x001F79BC */); // 0x00A5FFBC-0x00A602CC
		public Dictionary<string, string> GetRequestUserFileUrlDict(string userId, string fileName); // 0x00A602CC-0x00A60444
		public Dictionary<string, string> GetRequestUserFileUrlDict_AES(string userId, string fileName, int api = 0 /* Metadata: 0x001F79C0 */); // 0x00A60444-0x00A606F8
		public Dictionary<string, string> GetDeleteDataDict(string userId, string rankKey); // 0x00A606F8-0x00A60870
		public Dictionary<string, string> GetDeleteDataDict_AES(string userId, string rankKey, int api = 0 /* Metadata: 0x001F79C4 */); // 0x00A60870-0x00A60B24
		public Dictionary<string, string> GetDeleteDataDict_Server(string userId, string rankTag, RankType rankType, string date); // 0x00A60B24-0x00A60D24
		public Dictionary<string, string> GetDeleteDataDict_Server_AES(string userId, string rankTag, RankType rankType, string date, int api = 0 /* Metadata: 0x001F79C8 */); // 0x00A60D24-0x00A61064
		public string GetRankTag(string val); // 0x00A5ABC8-0x00A5AC48
	}

	public enum RankOrder // TypeDefIndex: 4450
	{
		Desc = 1,
		Asc = 2
	}

	public enum PlatFormType // TypeDefIndex: 4451
	{
		guest = 0,
		facebook = 1,
		twitter = 2,
		google = 3
	}

	public enum RankType // TypeDefIndex: 4452
	{
		day = 0,
		week = 1,
		month = 2,
		allrak = 3
	}

	public class NetworkRequest : MonoBehaviour // TypeDefIndex: 4453
	{
		// Fields
		private static NetworkRequest _instance; // 0x00
	
		// Properties
		public static NetworkRequest Instance { get; } // 0x00A5424C-0x00A54330 
	
		// Nested types
		[Serializable]
		public class RequestData // TypeDefIndex: 4454
		{
			// Fields
			public NetworkConnect.RequestCommand command; // 0x10
			public string url; // 0x18
			public Dictionary<string, string> dataDic; // 0x20
	
			// Constructors
			public RequestData(); // 0x00A618E8-0x00A618F0
		}
	
		[CompilerGenerated] // 0x00514D50-0x00514D60
		private sealed class _PostRequest_d__5 : IEnumerator<object> // TypeDefIndex: 4455
		{
			// Fields
			private int __1__state; // 0x10
			private object __2__current; // 0x18
			public Dictionary<string, string> dict; // 0x20
			public string url; // 0x28
			public Action<string> onCompleted; // 0x30
			private UnityWebRequest _webRequest_5__2; // 0x38
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00528724-0x00528734 */ get; } // 0x00A61530-0x00A61538 
			object IEnumerator.Current { [DebuggerHidden] /* 0x00528744-0x00528754 */ get; } // 0x00A6159C-0x00A615A4 
	
			// Constructors
			[DebuggerHidden] // 0x00528704-0x00528714
			public _PostRequest_d__5(int __1__state); // 0x00A6116C-0x00A61198
	
			// Methods
			[DebuggerHidden] // 0x00528714-0x00528724
			void IDisposable.Dispose(); // 0x00A6126C-0x00A61270
			private bool MoveNext(); // 0x00A61270-0x00A61530
			[DebuggerHidden] // 0x00528734-0x00528744
			void IEnumerator.Reset(); // 0x00A61538-0x00A6159C
		}
	
		[CompilerGenerated] // 0x00514D60-0x00514D70
		private sealed class _RequestCountryCode_d__6 : IEnumerator<object> // TypeDefIndex: 4456
		{
			// Fields
			private int __1__state; // 0x10
			private object __2__current; // 0x18
			public string ipStr; // 0x20
			public Action<string> listener; // 0x28
			private WWW _www_5__2; // 0x30
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00528774-0x00528784 */ get; } // 0x00A616B8-0x00A616C0 
			object IEnumerator.Current { [DebuggerHidden] /* 0x00528794-0x005287A4 */ get; } // 0x00A61724-0x00A6172C 
	
			// Constructors
			[DebuggerHidden] // 0x00528754-0x00528764
			public _RequestCountryCode_d__6(int __1__state); // 0x00A61198-0x00A611C4
	
			// Methods
			[DebuggerHidden] // 0x00528764-0x00528774
			void IDisposable.Dispose(); // 0x00A615A4-0x00A615A8
			private bool MoveNext(); // 0x00A615A8-0x00A616B8
			[DebuggerHidden] // 0x00528784-0x00528794
			void IEnumerator.Reset(); // 0x00A616C0-0x00A61724
		}
	
		[CompilerGenerated] // 0x00514D70-0x00514D80
		private sealed class _RequestIpAddress_d__7 : IEnumerator<object> // TypeDefIndex: 4457
		{
			// Fields
			private int __1__state; // 0x10
			private object __2__current; // 0x18
			public Action<string> listener; // 0x20
			private WWW _www_5__2; // 0x28
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005287C4-0x005287D4 */ get; } // 0x00A61874-0x00A6187C 
			object IEnumerator.Current { [DebuggerHidden] /* 0x005287E4-0x005287F4 */ get; } // 0x00A618E0-0x00A618E8 
	
			// Constructors
			[DebuggerHidden] // 0x005287A4-0x005287B4
			public _RequestIpAddress_d__7(int __1__state); // 0x00A61238-0x00A61264
	
			// Methods
			[DebuggerHidden] // 0x005287B4-0x005287C4
			void IDisposable.Dispose(); // 0x00A6172C-0x00A61730
			private bool MoveNext(); // 0x00A61730-0x00A61874
			[DebuggerHidden] // 0x005287D4-0x005287E4
			void IEnumerator.Reset(); // 0x00A6187C-0x00A618E0
		}
	
		// Constructors
		public NetworkRequest(); // 0x00A61264-0x00A6126C
	
		// Methods
		public void Request(NetworkConnect.RequestCommand command, Dictionary<string, string> dict, Action<string> onCompleted); // 0x00A54330-0x00A544B8
		public void Request_AES(NetworkConnect.RequestCommand command, Dictionary<string, string> dict, Action<string> onCompleted); // 0x00A56DF8-0x00A56F80
		[IteratorStateMachine] // 0x00524C14-0x00524C78
		private IEnumerator PostRequest(string url, Dictionary<string, string> dict, Action<string> onCompleted); // 0x00A610E4-0x00A6116C
		[IteratorStateMachine] // 0x00524C78-0x00524CDC
		public IEnumerator RequestCountryCode(string ipStr, Action<string> listener); // 0x00A61064-0x00A610E4
		[IteratorStateMachine] // 0x00524CDC-0x00524D40
		public IEnumerator RequestIpAddress(Action<string> listener); // 0x00A611C4-0x00A61238
	}

	public class ScoreRankRequest // TypeDefIndex: 4458
	{
		// Fields
		private static ScoreRankRequest _instance; // 0x00
	
		// Properties
		public static ScoreRankRequest Instance { get; } // 0x00A62630-0x00A626B0 
	
		// Nested types
		public struct RankData // TypeDefIndex: 4459
		{
			// Fields
			public NetworkConnect.RequestCommand requestCommand; // 0x00
			public string userId; // 0x08
			public string key; // 0x10
			public Action<int, object> onRespondSuccessed; // 0x18
	
			// Constructors
			public RankData(NetworkConnect.RequestCommand requestCommand, string userId, string key, Action<int, object> onSuccess); // 0x0058902C-0x0058903C
	
			// Methods
			public void UploadListener(string s); // 0x0058903C-0x00589044
			public void GetListener(string s); // 0x00589044-0x0058904C
			private void OnComplete(string data); // 0x0058904C-0x00589058
			private void Handle(string data, bool cache = false /* Metadata: 0x001F7ACE */); // 0x00589058-0x0058913C
		}
	
		// Constructors
		public ScoreRankRequest(); // 0x00A63A5C-0x00A63A64
	
		// Methods
		public void UploadScoreFixedLength(string rankKey, float score, Action<int, object> handle = null); // 0x00A63A64-0x00A63BA8
		public void UploadScoreExpire(string rankKey, float score, Action<int, object> handle = null); // 0x00A63BA8-0x00A63CDC
		public void GetUserScore(string rankKey, Action<int, object> handle = null); // 0x00A63CDC-0x00A63DFC
		public void GetUserRankIdx(string rankKey, Action<int, object> handle = null); // 0x00A63DFC-0x00A63F1C
		public void GetRankList(string rankKey, int rankCount, RankOrder order = RankOrder.Desc /* Metadata: 0x001F7A7E */, Action<int, object> handle = null); // 0x00A63F1C-0x00A64070
		public void RequestRankListAroundUser(string rankKey, int start, int end, RankOrder order = RankOrder.Desc /* Metadata: 0x001F7A82 */, Action<int, object> handle = null); // 0x00A64070-0x00A641D4
		public void RequestFriendRankList(string rankKey, PlatFormType platType, string platIds, RankOrder order = RankOrder.Desc /* Metadata: 0x001F7A86 */, Action<int, object> handle = null); // 0x00A641D4-0x00A64338
		public void RequestRankListWithScore(string rankKey, RankOrder order, int startScore, int endScore = 0 /* Metadata: 0x001F7A8A */, int num = 100 /* Metadata: 0x001F7A8E */, Action<int, object> handle = null); // 0x00A64338-0x00A644A4
		public void UploadScoreFixedLength_AES(string rankKey, float score, Action<int, object> handle = null); // 0x00A644A4-0x00A645DC
		public void UploadScoreExpire_AES(string rankKey, float score, Action<int, object> handle = null); // 0x00A645DC-0x00A64714
		public void GetUserScore_AES(string rankKey, Action<int, object> handle = null); // 0x00A64714-0x00A64838
		public void GetUserRankIdx_AES(string rankKey, Action<int, object> handle = null); // 0x00A64838-0x00A6495C
		public void GetRankList_AES(string rankKey, int rankCount, RankOrder order = RankOrder.Desc /* Metadata: 0x001F7A92 */, Action<int, object> handle = null); // 0x00A6495C-0x00A64AB4
		public void RequestRankListAroundUser_AES(string rankKey, int start, int end, RankOrder order = RankOrder.Desc /* Metadata: 0x001F7A96 */, Action<int, object> handle = null); // 0x00A64AB4-0x00A64C1C
		public void RequestFriendRankList_AES(string rankKey, PlatFormType platType, string platIds, RankOrder order = RankOrder.Desc /* Metadata: 0x001F7A9A */, Action<int, object> handle = null); // 0x00A64C1C-0x00A64D84
		public void RequestRankListWithScore_AES(string rankKey, RankOrder order, int startScore, int endScore = 0 /* Metadata: 0x001F7A9E */, int num = 100 /* Metadata: 0x001F7AA2 */, Action<int, object> handle = null); // 0x00A64D84-0x00A64EF4
		public void UploadScoreFixedLength_Server(string rankTag, RankType rankType, string date, int score, Action<int, object> handle = null); // 0x00A64EF4-0x00A65038
		public void UploadScoreExpire_Server(string rankTag, RankType rankType, string date, int score, Action<int, object> handle = null); // 0x00A65038-0x00A6517C
		public void GetUserScore_Server(string rankTag, RankType rankType, string date, Action<int, object> handle = null); // 0x00A6517C-0x00A652AC
		public void GetUserRankIdx_Server(string rankTag, RankType rankType, string date, Action<int, object> handle = null); // 0x00A652AC-0x00A653DC
		public void GetRankList_Server(string rankTag, RankType rankType, string date, int rankCount, RankOrder order = RankOrder.Desc /* Metadata: 0x001F7AA6 */, Action<int, object> handle = null); // 0x00A653DC-0x00A65548
		public void RequestRankListAroundUser_Server(string rankTag, RankType rankType, string date, int start, int end, RankOrder order = RankOrder.Desc /* Metadata: 0x001F7AAA */, Action<int, object> handle = null); // 0x00A65548-0x00A656C4
		public void RequestFriendRankList_Server(string rankTag, RankType rankType, string date, PlatFormType platType, string platIds, RankOrder order = RankOrder.Desc /* Metadata: 0x001F7AAE */, Action<int, object> handle = null); // 0x00A656C4-0x00A65840
		public void RequestRankListWithScore_Server(string rankTag, RankType rankType, string date, RankOrder order, int startScore, int endScore = 0 /* Metadata: 0x001F7AB2 */, int num = 100 /* Metadata: 0x001F7AB6 */, Action<int, object> handle = null); // 0x00A65840-0x00A659C4
		public void UploadScoreFixedLength_Server_AES(string rankTag, RankType rankType, string date, int score, Action<int, object> handle = null); // 0x00A63850-0x00A63998
		public void UploadScoreExpire_Server_AES(string rankTag, RankType rankType, string date, int score, Action<int, object> handle = null); // 0x00A63150-0x00A63288
		public void GetUserScore_Server_AES(string rankTag, RankType rankType, string date, Action<int, object> handle = null); // 0x00A62DDC-0x00A62F10
		public void GetUserRankIdx_Server_AES(string rankTag, RankType rankType, string date, Action<int, object> handle = null); // 0x00A626B0-0x00A627E4
		public void GetRankList_Server_AES(string rankTag, RankType rankType, string date, int rankCount, RankOrder order = RankOrder.Desc /* Metadata: 0x001F7ABA */, Action<int, object> handle = null); // 0x00A659C4-0x00A65B34
		public void RequestRankListAroundUser_Server_AES(string rankTag, RankType rankType, string date, int start, int end, RankOrder order = RankOrder.Desc /* Metadata: 0x001F7ABE */, Action<int, object> handle = null); // 0x00A65B34-0x00A65CB4
		public void RequestFriendRankList_Server_AES(string rankTag, RankType rankType, string date, PlatFormType platType, string platIds, RankOrder order = RankOrder.Desc /* Metadata: 0x001F7AC2 */, Action<int, object> handle = null); // 0x00A65CB4-0x00A65E34
		public void RequestRankListWithScore_Server_AES(string rankTag, RankType rankType, string date, RankOrder order, int startScore, int endScore = 0 /* Metadata: 0x001F7AC6 */, int num = 100 /* Metadata: 0x001F7ACA */, Action<int, object> handle = null); // 0x00A65E34-0x00A65FBC
		public void RequestBattlePassDataAES(Action<string> listener); // 0x00A65FBC-0x00A66000
		public void RequestCollectionDataAES(Action<string> listener); // 0x00A66000-0x00A66044
		public void RequestNoticeDataAES(Action<string> listener); // 0x00A66044-0x00A66900
	}

	public class SecondManager : MonoBehaviour // TypeDefIndex: 4460
	{
		// Fields
		private static SecondManager _instance; // 0x00
		public int _min_interval; // 0x18
		public int _max_interval; // 0x1C
		private int _factor; // 0x20
		private int _interval; // 0x24
		private LoginIn _guestLoginIn; // 0x28
		private LoginIn _facebookLoginIn; // 0x30
		[CompilerGenerated] // 0x0051CB40-0x0051CB50
		private PlatFormType _platType_k__BackingField; // 0x38
	
		// Properties
		public static SecondManager Instance { get; } // 0x00A55988-0x00A55A6C 
		public PlatFormType platType { [CompilerGenerated] /* 0x00524D40-0x00524D50 */ get; [CompilerGenerated] /* 0x00524D50-0x00524D60 */ private set; } // 0x00A66D94-0x00A66D9C 0x00A66D9C-0x00A66DA4
		public string userId { get; } // 0x00A562DC-0x00A56314 
		public bool hasInited { get; } // 0x00A560B8-0x00A560F0 
		public bool facebook { get; } // 0x00A66DA4-0x00A66DE0 
	
		// Nested types
		public class LoginIn // TypeDefIndex: 4461
		{
			// Fields
			private PlatFormType _platType; // 0x10
			[CompilerGenerated] // 0x0051CB70-0x0051CB80
			private string _platId_k__BackingField; // 0x18
			[CompilerGenerated] // 0x0051CB80-0x0051CB90
			private bool _hasInited_k__BackingField; // 0x20
			[CompilerGenerated] // 0x0051CB90-0x0051CBA0
			private string _userId_k__BackingField; // 0x28
	
			// Properties
			public string platId { [CompilerGenerated] /* 0x005287F4-0x00528804 */ get; [CompilerGenerated] /* 0x00528804-0x00528814 */ set; } // 0x00A67244-0x00A6724C 0x00A6724C-0x00A67254
			public bool hasInited { [CompilerGenerated] /* 0x00528814-0x00528824 */ get; [CompilerGenerated] /* 0x00528824-0x00528834 */ private set; } // 0x00A67254-0x00A6725C 0x00A6725C-0x00A67268
			public string userId { [CompilerGenerated] /* 0x00528834-0x00528844 */ get; [CompilerGenerated] /* 0x00528844-0x00528854 */ private set; } // 0x00A67268-0x00A67270 0x00A67270-0x00A67278
	
			// Constructors
			public LoginIn(PlatFormType type); // 0x00A669EC-0x00A66A18
	
			// Methods
			public void GetUserIDListener(string s); // 0x00A66DF4-0x00A67244
		}
	
		// Constructors
		public SecondManager(); // 0x00A66DE0-0x00A66DF4
	
		// Methods
		private void Awake(); // 0x00A66900-0x00A669EC
		public void RequestGuestUserID(); // 0x00A55A94-0x00A55B8C
		public void RequestFacebookUserID(string platId); // 0x00A55A6C-0x00A55A94
		private void RequestFacebookUserID(); // 0x00A66A28-0x00A66B24
		private void ResetTime(); // 0x00A66A18-0x00A66A28
		private void Update(); // 0x00A66B24-0x00A66C38
	}

	public class ServerManager // TypeDefIndex: 4462
	{
		// Fields
		private static ServerManager _instance; // 0x00
		public Dictionary<string, ServerData> serverDatas; // 0x10
		public Dictionary<string, TopRunInfo> allTopRunDatas; // 0x18
		public Dictionary<string, TopRun> globalDatas; // 0x20
		public Dictionary<string, TopRun> friendDatas; // 0x28
		public Dictionary<string, TopRun> vipDatas; // 0x30
		private ServerData currentServerData; // 0x38
		public Action onPlayerNameChange; // 0x40
		public Action onScoreChange; // 0x48
		public Action onRankIDChange; // 0x50
		public Action onCountryCodeChange; // 0x58
		public Action onPictureURLChange; // 0x60
	
		// Properties
		public static ServerManager Instance { get; } // 0x00A54984-0x00A54A00 
		public PlayerName PlayerName { get; } // 0x00A68BC4-0x00A68BDC 
		public Score Score_Week { get; } // 0x00A68D70-0x00A68D88 
		public Score Score_Vip { get; } // 0x00A68EDC-0x00A68EF4 
		public RankID RankID_Week { get; } // 0x00A633A0-0x00A633B8 
		public RankID RankID_VIP { get; } // 0x00A69060-0x00A69078 
		public int RankID_Global { get; } // 0x00A69090-0x00A690B0 
		public CountryCode CountryCode { get; } // 0x00A690C0-0x00A690D8 
		public PictureUrl PictureUrl { get; } // 0x00A69264-0x00A6927C 
	
		// Constructors
		public ServerManager(); // 0x00A68610-0x00A68708
	
		// Methods
		public TopRunInfo GetTopRunInfo(TopRun topRun); // 0x00A68708-0x00A68724
		public TopRunInfo GetTopRunInfo(string userId); // 0x00A68724-0x00A68828
		public TopRun GetGlobalTopRun(string userId); // 0x00A68828-0x00A688BC
		public void AddGlobalTopRun(TopRun topRun); // 0x00A688BC-0x00A6895C
		public void AddFriendTopRun(TopRun topRun); // 0x00A6895C-0x00A689FC
		public TopRun GetFriendTopRun(string userId); // 0x00A689FC-0x00A68A90
		public void AddVipTopRun(TopRun topRun); // 0x00A68A90-0x00A68B30
		public TopRun GetVipTopRun(string userId); // 0x00A68B30-0x00A68BC4
		public void RequestUserInformation(PlatFormType platForm, string userId); // 0x00A66C38-0x00A66D94
		public void UpdateMedals(); // 0x00A5823C-0x00A5824C
		public void OnPlayerNameChange(); // 0x00A6230C-0x00A62320
		public void OnScoreChange(); // 0x00A63468-0x00A6347C
		public void OnRankIDChange(); // 0x00A62978-0x00A6298C
		public void OnCountryCodeChange(); // 0x00A54A00-0x00A54A14
		public void OnPictureURLChange(); // 0x00A61D48-0x00A61D5C
		public bool CanUploadPlayerName(); // 0x00A68BDC-0x00A68BEC
		public void RequestPlayerName(); // 0x00A68BEC-0x00A68BFC
		public void SynchronisePlayerName(string playerName); // 0x00A68BFC-0x00A68C14
		public void UploadPlayerName(string playerName); // 0x00A68C14-0x00A68C2C
		public void UploadPlayerNameWhenOutofExpire(); // 0x00A68C2C-0x00A68C4C
		public void RegisterOnPlayerNameChange(Action onPlayerNameChange); // 0x00A68C4C-0x00A68CF0
		public void UnregisterOnPlayerNameChange(Action onPlayerNameChange); // 0x00A68CF0-0x00A68D70
		public void UploadScore(int score); // 0x00A68D88-0x00A68DA0
		public void SynchroniseScore(int score); // 0x00A68DA0-0x00A68DB8
		public void RegisterOnScoreChange(Action onScoreChange); // 0x00A68DB8-0x00A68E5C
		public void UnregisterOnScoreChange(Action onScoreChange); // 0x00A68E5C-0x00A68EDC
		public void UploadScoreVip(int score); // 0x00A68EF4-0x00A68F0C
		public void SynchroniseScoreVIP(int score); // 0x00A68F0C-0x00A68F24
		public void RegisterOnRankIDChange(Action onRankIDChange); // 0x00A68F24-0x00A68FC8
		public void UnregisterOnRankIDChange(Action onRankIDChange); // 0x00A68FC8-0x00A69048
		public void SynchroniseRankID(int rankId); // 0x00A69048-0x00A69060
		public void SynchroniseRankIDVIP(int rankId); // 0x00A69078-0x00A69090
		public void SynchroniseRankIDGlobal(int rankId); // 0x00A690B0-0x00A690C0
		public void SynchroniseCountryCode(string countryCode); // 0x00A690D8-0x00A690F0
		public void RegisterOnCountryCodeChange(Action onCountryCodeChange); // 0x00A690F0-0x00A69194
		public void UnregisterOnCountryCodeChange(Action onCountryCodeChange); // 0x00A69194-0x00A69214
		public void UploadCountryCodeWhenOutofExpire(); // 0x00A69214-0x00A69234
		public void UploadSubscription(string value); // 0x00A69234-0x00A6924C
		public void UploadPlayerLevel(string value); // 0x00A6924C-0x00A69264
		public void SynchronisePictrueUrl(string url); // 0x00A6927C-0x00A69294
		public void RegisterOnPictrueUrlChange(Action onDownloadImageSuccess); // 0x00A69294-0x00A69338
		public void UnregisterOnPictrueUrlChange(Action onDownloadImageSuccess); // 0x00A69338-0x00A693B8
		public void UploadPictrueUrlWhenOutofExpire(); // 0x00A693B8-0x00A693D8
	}

	public class ServerData // TypeDefIndex: 4463
	{
		// Fields
		private string userId; // 0x10
		public FacebookID facebookID; // 0x18
		public PlayerName playerName; // 0x20
		public CountryCode countryCode; // 0x28
		public Subscription subscription; // 0x30
		public PlayerLevel playerLevel; // 0x38
		public Score score_week; // 0x40
		public Score score_vip; // 0x48
		public RankID rankID_week; // 0x50
		public RankID rankID_vip; // 0x58
		public PictureUrl pictureUrl; // 0x60
		public Medals medals; // 0x68
		public int rankID_global; // 0x70
	
		// Nested types
		[CompilerGenerated] // 0x00514D80-0x00514D90
		private sealed class _RequestGuest_d__14 : IEnumerator<object> // TypeDefIndex: 4464
		{
			// Fields
			private int __1__state; // 0x10
			private object __2__current; // 0x18
			public ServerData __4__this; // 0x20
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x00528874-0x00528884 */ get; } // 0x00A6859C-0x00A685A4 
			object IEnumerator.Current { [DebuggerHidden] /* 0x00528894-0x005288A4 */ get; } // 0x00A68608-0x00A68610 
	
			// Constructors
			[DebuggerHidden] // 0x00528854-0x00528864
			public _RequestGuest_d__14(int __1__state); // 0x00A67888-0x00A678B4
	
			// Methods
			[DebuggerHidden] // 0x00528864-0x00528874
			void IDisposable.Dispose(); // 0x00A6824C-0x00A68250
			private bool MoveNext(); // 0x00A68250-0x00A6859C
			[DebuggerHidden] // 0x00528884-0x00528894
			void IEnumerator.Reset(); // 0x00A685A4-0x00A68608
		}
	
		[CompilerGenerated] // 0x00514D90-0x00514DA0
		private sealed class _RequestFacebook_d__15 : IEnumerator<object> // TypeDefIndex: 4465
		{
			// Fields
			private int __1__state; // 0x10
			private object __2__current; // 0x18
			public ServerData __4__this; // 0x20
	
			// Properties
			object IEnumerator<System.Object>.Current { [DebuggerHidden] /* 0x005288C4-0x005288D4 */ get; } // 0x00A681D8-0x00A681E0 
			object IEnumerator.Current { [DebuggerHidden] /* 0x005288E4-0x005288F4 */ get; } // 0x00A68244-0x00A6824C 
	
			// Constructors
			[DebuggerHidden] // 0x005288A4-0x005288B4
			public _RequestFacebook_d__15(int __1__state); // 0x00A67928-0x00A67954
	
			// Methods
			[DebuggerHidden] // 0x005288B4-0x005288C4
			void IDisposable.Dispose(); // 0x00A67D2C-0x00A67D30
			private bool MoveNext(); // 0x00A67D30-0x00A68108
			[DebuggerHidden] // 0x005288D4-0x005288E4
			void IEnumerator.Reset(); // 0x00A681E0-0x00A68244
		}
	
		// Constructors
		public ServerData(string key); // 0x00A677E8-0x00A67814
	
		// Methods
		[IteratorStateMachine] // 0x00524D60-0x00524DC4
		public IEnumerator RequestGuest(); // 0x00A67814-0x00A67888
		[IteratorStateMachine] // 0x00524DC4-0x00524E28
		public IEnumerator RequestFacebook(); // 0x00A678B4-0x00A67928
		public void UpdateMedals(); // 0x00A67954-0x00A67A68
		public bool CanUploadPlayerName(); // 0x00A67A68-0x00A67AC4
		public void RequestPlayerName(); // 0x00A67AC4-0x00A67B14
		public void SynchronisePlayerName(string playerName); // 0x00A67B14-0x00A67B24
		public void UploadPlayerName_Strict(string playerName); // 0x00A67B8C-0x00A67B9C
		public void UploadPlayerNameWhenOutofExpire(); // 0x00A67B9C-0x00A67BB4
		public void UploadScore(int score); // 0x00A67BB4-0x00A67BC4
		public void SynchroniseScore(int score); // 0x00A67BC4-0x00A67BD4
		public void UploadScoreVip(int score); // 0x00A67BD4-0x00A67BE4
		public void SynchroniseScoreVIP(int score); // 0x00A67BE4-0x00A67BF4
		public void SynchroniseRankID(int rankId); // 0x00A67BF4-0x00A67C04
		public void SynchroniseRankIDVIP(int rankId); // 0x00A67C04-0x00A67C14
		public void SynchroniseRankIDGlobal(int rankId); // 0x00A67C14-0x00A67C1C
		public void RequestCountryCode(); // 0x00A67C1C-0x00A67C6C
		public void SynchroniseCountryCode(string countryCode); // 0x00A67C6C-0x00A67C7C
		public void UploadCountryCodeWhenOutofExpire(); // 0x00A67C7C-0x00A67C94
		public void UploadSubscription(string value); // 0x00A67C94-0x00A67CA4
		public void UploadPlayerLevel(string value); // 0x00A67CA4-0x00A67CB4
		public void RequestPictrueUrl(); // 0x00A67CB4-0x00A67D04
		public void SynchronisePictrueUrl(string url); // 0x00A67D04-0x00A67D14
		public void UploadPictrueUrlWhenOutofExpire(); // 0x00A67D14-0x00A67D2C
	}

	public class StringKeyValueRequest // TypeDefIndex: 4466
	{
		// Fields
		private static StringKeyValueRequest _instance; // 0x00
	
		// Properties
		public static StringKeyValueRequest Instance { get; } // 0x00A693D8-0x00A69458 
	
		// Nested types
		public class StringData // TypeDefIndex: 4467
		{
			// Fields
			public string userId; // 0x10
			public string key; // 0x18
			public string value; // 0x20
			private Action<int, object> onRespondResult; // 0x28
	
			// Constructors
			public StringData(string userId, string key, string value, Action<int, object> onSuccess); // 0x00A699D8-0x00A69A24
	
			// Methods
			public void UploadStringDataListener(string s); // 0x00A69A24-0x00A69DBC
			public void GetStringDataListener(string s); // 0x00A69DBC-0x00A6A258
		}
	
		// Constructors
		public StringKeyValueRequest(); // 0x00A699D0-0x00A699D8
	
		// Methods
		public void UploadStringData(string userId, string key, string value, Action<int, object> handle = null); // 0x00A6983C-0x00A69940
		public void GetStringData(string userId, string key, Action<int, object> handle = null); // 0x00A69458-0x00A69548
	}
}

namespace AnimationOrTween
{
	public enum Trigger // TypeDefIndex: 4468
	{
		OnClick = 0,
		OnHover = 1,
		OnPress = 2,
		OnHoverTrue = 3,
		OnHoverFalse = 4,
		OnPressTrue = 5,
		OnPressFalse = 6,
		OnActivate = 7,
		OnActivateTrue = 8,
		OnActivateFalse = 9,
		OnDoubleClick = 10,
		OnSelect = 11,
		OnSelectTrue = 12,
		OnSelectFalse = 13
	}

	public enum Direction // TypeDefIndex: 4469
	{
		Reverse = -1,
		Toggle = 0,
		Forward = 1
	}

	public enum EnableCondition // TypeDefIndex: 4470
	{
		DoNothing = 0,
		EnableThenPlay = 1,
		IgnoreDisabledState = 2
	}

	public enum DisableCondition // TypeDefIndex: 4471
	{
		DisableAfterReverse = -1,
		DoNotDisable = 0,
		DisableAfterForward = 1
	}
}

[CompilerGenerated] // 0x00513F40-0x00513F50
internal sealed class _PrivateImplementationDetails_ // TypeDefIndex: 4472
{
	// Fields
	internal static readonly __StaticArrayInitTypeSize_68 _13EE6EA061ECEED88C170715B5551DEF67730B8D; // 0x00 // Starts with: 0c 00 00 00 0d 00 00 00 - Metadata: 0x001F7B2B
	internal static readonly __StaticArrayInitTypeSize_84 _18A7CB48066EB322204791419C8C5680329F2A1E; // 0x44 // Starts with: 00 00 00 00 01 00 00 00 - Metadata: 0x001F7B6F
	internal static readonly __StaticArrayInitTypeSize_32 _68F00C41318114691E02CD7532ACF69A8DBE23C2; // 0x98 // Starts with: 00 00 80 be 00 00 00 00 - Metadata: 0x001F7BC3
	internal static readonly __StaticArrayInitTypeSize_580 _7FB9790B49277F6151D3EB5D555CCF105904DB43; // 0xB8 // Starts with: 08 00 00 00 09 00 00 00 - Metadata: 0x001F7BE3
	internal static readonly __StaticArrayInitTypeSize_16 B02132081808B493C61E86626EE6C2E29326A662; // 0x2FC // Starts with: 30 30 30 30 30 30 30 30 - Metadata: 0x001F7E27
	internal static readonly __StaticArrayInitTypeSize_40 C7ACAF9133C43DD702F00783E8A6BE3D3C6D764D; // 0x30C // Starts with: 1a 00 00 00 1b 00 00 00 - Metadata: 0x001F7E37
	internal static readonly long D26A27B5531D6252D57917C90488F9C3F7AF8F98; // 0x338 // Starts with: 20 00 0a 00 2c 00 2e 00 - Metadata: 0x001F7E5F
	internal static readonly __StaticArrayInitTypeSize_20 D87E030BB24AE8298D920BB8F7D076A8EC796467; // 0x340 // Starts with: ac 0d 00 00 f8 2a 00 00 - Metadata: 0x001F7E67

	// Nested types
	private struct __StaticArrayInitTypeSize_16 // TypeDefIndex: 4473
	{
	}

	private struct __StaticArrayInitTypeSize_20 // TypeDefIndex: 4474
	{
	}

	private struct __StaticArrayInitTypeSize_32 // TypeDefIndex: 4475
	{
	}

	private struct __StaticArrayInitTypeSize_40 // TypeDefIndex: 4476
	{
	}

	private struct __StaticArrayInitTypeSize_68 // TypeDefIndex: 4477
	{
	}

	private struct __StaticArrayInitTypeSize_84 // TypeDefIndex: 4478
	{
	}

	private struct __StaticArrayInitTypeSize_580 // TypeDefIndex: 4479
	{
	}

	// Methods
	internal static uint ComputeStringHash(string s); // 0x00705394-0x00705414
}

