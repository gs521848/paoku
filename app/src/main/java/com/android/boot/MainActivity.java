/**
 * Generated by FakerAndroid for doc or help by https://github.com/Efaker/FakerAndroid
 */
package com.android.boot;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.view.KeyEvent;
import android.view.Window;
import com.huskaimm.com.templespiritendelssrun.R;
import com.unity3d.player.BaseGameAcitivty;

import java.io.File;

/**
 * TODO NOTE:this is a demo act if you want run it you should mode the manifest,if the app's main act extends com.unity3d.player.UnityPlayerActivity
 * TODO NOTE: else you can make this to main
 * TODO NOTE: you can extend the original main act
 */
public class MainActivity extends BaseGameAcitivty implements JniBridge {
    public native void registerCallBack(Object object);
    static final int HANDLER_MSG_CALLJAVA = 1000;
    final Handler handler = new Handler(Looper.getMainLooper()) {
        @Override
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case HANDLER_MSG_CALLJAVA:
                    String cmsg = (String) msg.obj;
                    callJava(cmsg);
                    break;
            }
            super.handleMessage(msg);
        }
    };

    @Override
    public void setUnityCallComplete(String str) {

    }

    @Override
    public void setUnityCallSkip(String str) {

    }
    @Override
    protected void onCreate(Bundle savedInstanceState){
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        super.onCreate(savedInstanceState);
        registerCallBack(this);

        //TODO NOTE: this is a simple to call UnityPlayer java api
        //imageView = new ImageView(this);
        //imageView.setImageResource(R.drawable.faker_android_v_splash);
        //imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
        //mUnityPlayer.addViewToPlayer(imageView,false);
        //new Handler().postDelayed(new Runnable() {
        //  @Override
        //    public void run() {
        //        mUnityPlayer.removeViewFromPlayer(imageView);
        //    }
        //},3000);
    }

    @Override
    public void onJniCall(String msg) {// unity player isnot main thread transfer method to main thread
        Message message = new Message();
        message.what =HANDLER_MSG_CALLJAVA;
        message.obj = msg;
        handler.sendMessage(message);
    }
    public void pressback() {
        // 如果想要在按下返回键时执行一些其他操作，可以在这里添加代码
        new AlertDialog.Builder(this)
                .setTitle("确认退出")
                .setMessage("您确定要退出应用程序吗？")
                .setPositiveButton("确定", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        // 关闭应用程序
                        finish();
                    }
                })
                .setNegativeButton("取消",null)
                .setNeutralButton("注销账号", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        Context con = getApplicationContext();

                        // 清空应用程序的缓存
                        new AlertDialog.Builder(MainActivity.this)
                                .setTitle("注销账号")
                                .setMessage("注销账号将清除用户信息，游戏进度，并退出游戏要继续吗？")
                                .setNegativeButton("取消",null)
                                .setPositiveButton("确定", new DialogInterface.OnClickListener() {
                                    @Override
                                    public void onClick(DialogInterface dialogInterface, int i) {

                                        clearApplicationData();
                                        restartgame();
                                    }
                                }).show();
                    }
                })
                .show();
        // 关闭应用程序
    }
    private void restartgame(){
        final Intent intent= getPackageManager().getLaunchIntentForPackage(getPackageName());
        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        startActivity(intent);
    }

    public void clearApplicationData() {

        File cache = getCacheDir();

        File appDir = new File(cache.getParent());

        if (appDir.exists()) {

            String[] children = appDir.list();

            for (String s : children) {

                if (!s.equals("lib")) {

                    deleteDir(new File(appDir, s));
                }
            }
        }
    }
    public static boolean deleteDir(File dir) {
        if (dir != null && dir.isDirectory()) {
            String[] children = dir.list();
            for (int i = 0; i < children.length; i++) {
                boolean success = deleteDir(new File(dir, children[i]));
                if (!success) {
                    return false;
                }
            }
        }
        return dir.delete();

    }
    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event)   {
        if(keyCode==KeyEvent.KEYCODE_BACK) {
            pressback();
        }
        return mUnityPlayer.injectEvent(event);
    }
    private void callJava(String msg){
        Logger.log(msg);
    }
}
